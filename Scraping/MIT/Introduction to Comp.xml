<doc>
  <source>MIT</source>
  <date>28/01/2023</date>
  <course>
    <course_url>https://ocw.mit.edu/courses/6-00-introduction-to-computer-science-and-programming-fall-2008/</course_url>
    <course_title>Introduction to Computer Science and Programming</course_title>
    <course_tags>
      <list>Engineering </list>
      <list>Computer Science </list>
      <list>Programming Languages</list>
    </course_tags>
  </course>
  <lectures>
    <lecture>
      <lecture_title>http://tdc-www.harvard.edu/Python.pdf</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/http://tdc-www.harvard.edu/Python.pdf</lecture_pdf_url>
      <lectureno>0</lectureno>
      <slides/>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-00-introduction-to-computer-science-and-programming-fall-2008/resources/lecture-1/</video_url>
          <video_title>1: Introduction and Goals; Data Types, Operators, and Variables</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>courses/6-00-introduction-to-computer-science-and-programming-fall-2008/resources/l11_sums2</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-00-introduction-to-computer-science-and-programming-fall-2008/resources/l11_sums2/</lecture_pdf_url>
      <lectureno>1</lectureno>
      <slides>
        <slide>
          <slideno>4</slideno>
          <text>5 Sums, Approximations, and Asymptotics II 
The area of the bars is at least the area under this curve, so we have a lower bound on the 
nth harmonic sum: 
1 1 1 1Hn = + + + . . .+
1 2 3 n
n 1dx 
0x+ 1
= ln(n + 1)
Remember that nblocks can overhang the edge of a table by
1 
2Hn block widths. So 
if we had, say, a million blocks, then this lower bound implies that we could achieve an 
overhang of at least 
ln(1,000,000 + 1)= 6.907 . . .2
block widths! In fact, since the lower bound of 1 
2ln(n + 1) grows arbitrarily large, there
is no limit on how far the stack can overhang. Of course, this assumes no breeze, defor
mation of the blocks, or gravitational variation as our stack grows thousands of miles 
high. 
We can get an upper bound on the nth harmonic number by playing essentially the 
same game. Now we need a curve that skims just above the bar graph. The curve dened 
by y = 1/x ts the bill. 
-6 
1 
1 1 
2 1 
3 1 
4 1
1/2y= 1/x
0 1 2 3 4 n 1n
The area under this curve is an upper bound on the area of the bar graph and thus on the 
nth harmonic sum. But theres a problem: the area under the curve is innite because 
y= 1/xhas a bad asymptote at x= 0. This is a common problem when bounding sums 
with integrals and theres a simple solution: take the exact value of the rst term (1/1)and 
then bound the remaining terms (1/2 + 1 /3 + . . .+ 1/n) with an integral. In this case, we</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.042/18.062J Mathematics for Computer Science March 15, 2005 
Srini Devadas and Eric Lehman Lecture Notes 
Sums, Approximations, and Asymptotics II 
1 Block Stacking 
How far can a stack of identical blocks overhang the end of a table without toppling over? 
Can a block be suspended entirely beyond the tables edge? 
Table
Physics imposes some constraints on the arrangement of the blocks. In particular, the 
stack falls off the desk if its center of mass lies beyond the desks edge. Moreover, the 
center of mass of the top kblocks must lie above the (k+ 1)st block; otherwise, the top k
would fall over. 
In order to nd the best conguration of blocks satisfying these constraints, well need 
a fact about centers of mass. 
Fact 1. If two objects have masses m1 and m2 and centersofmass at positions z1 and z2, then the 
center of mass of the two objects together is at position: 
z1m1 +z2m2 
m1 +m2 
Dene the offset of a particular conguration of blocks to be the horizonal distance 
from its center of mass to its rightmost edge. 
offset 
? 
center of mass s-? 
Table</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>6 Sums, Approximations, and Asymptotics II 
get the upper bound: 
1 1 1 1Hn = + + + . . .+12 3 n
n 1 1 + dx
1 x
= 1 + ln n
So even though there is no closedform for the nth harmonic sum, we now know that 
the harmonic numbers grow logarithmically: 
ln(n + 1) Hn  1 + ln n
There is a renement to the integration method weve just employed, called Euler
Maclaurin summation, which yields a sequence of terms that correct errors in the inital 
estimate. This technique gives an absurdly accurate formula for harmonic numbers: 
1 1 (n)Hn = lnn++ +2n 12n2 120n4 
The second term is Eulers constant , = 0.577215664 . . .. This is probably the third most 
important mathematical constant behind eand . It is somewhat mysterious; for example, 
no one knows whether is rational or irrational, though if it equals a ratio of integers, 
then the denominator must be at least 10242,080 . In the nal term of the formula above, 
(n) denotes some number between 0 and 1. Youll never need this kind of precision in 
this course or, probably, anywhere else. 
2 The Factorial Function 
One of the most common elements in messy mathematical expressions is the factorial 
function: 
n! = 1 2 3 n    (n1)
Factorial comes up particularly often in combinatorics and probability, which happen to 
be the major topics in the remainder of 6.042. Within a few weeks, you are going to have 
factorials coming out your ears. 
A good way to deal with any product is to covert it into a sum by taking a logarithm: 
n n
ln f(k) = ln f(k)
k=1 k=1 
Then we can apply all our summing tools and exponentiate at the end to undo the effect
of the log. Lets use this strategy to get bounds on n!. First, we take a logarithm to make</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>8 Sums, Approximations, and Asymptotics II 
you usually cant do much with it. It doesnt readily cancel or combine with other terms. 
In contrast, the expression on the right looks scary, but melds nicely into larger formulas. 
So dont be put off: Stirlings Formula is your friend. 
(Stepping back a bit, Stirlings formula is fairly amazing. Who would guess that the 
product of the rst npositive integers could be so precisely described by a formula involv
ing both e and  ?) 
If youre feeling a little crazy, you might pull out these evenmoreprecise bounds: 
nn nn 1/(12 n+1) 1/(12 n)
2n 
e  n!
2n ee e
These bounds are ridiculously close. For example, if n = 100 , then we get: 
 100 
100! 100 
200 e1/1201 
e
=1.000832 ...  100 
100! 100 
200 e1/1200 
e
=1.000833 ... 
The upper bound is less than 7 hundredthousandths of 1% greater than the lower bound! 
3 Asymptotic Notation 
Our nal topic is a special notation called asymptotic notation designed to sweep 
mathematical messes under the rug. Asymptotic notation is sort of like the Force from 
Star Wars. Its everywhere. Tts an essential part of the language of computer science. 
And mostly it is a tool for good. At best, asymptotic notation suppresses irrelevant de
tailss, while allowing the essential features of a mathematical analysis to shine through. 
However, as well see, asymptotic notation also has an alluring dark side. 
3.1 Asymptotic Notation: The Jedi Perspective 
Suppose you want to know how long a computer takes to multiply two n nmatrices. 
You could tally up all the multiplications and additions and loop variable increments and 
comparisons and perhaps factor in hardwarespecic considerations such as page faults 
and cache misses and branch mispredicts and oatingpoint unit availability and all this 
would give you one sort of answer. (Whew!) Such an answer would be very accurate, but 
not very insightful. Given a very complicated formula for the running time, we would 
be hardpressed to answer basic questions: How would doubling the size of the matrices 
alter the running time? What is the biggest matrix we can handle? Furthermore, a minor 
change in the procedure or hardware would invalidate the answer.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Sums, Approximations, and Asymptotics II 11 
Proof. We argue by contradiction; suppose that there exist constants x0 and c &gt; 0such 
that: 
2x for all x &gt; x 0 |4x|  c 
Dividing both sides by 2x gives: 
2x  c for all x &gt; x 0 
But this is false when x = 1 + max(x 0,logc). 
3.3 Asymptotic Notation and Limits 
The remaining symbols, , , o, , and , all have denitions similar to O: There exist 
constants blah and blah such that for all blah, suchandsuch holds. This may prompt 
a sense of deja vu: these denitions are all quite similar to the denition of a limit. In 
fact, this similarity has a happy consequence: all these symbols have simple, intuitive 
interpretations in terms of limits. These are summarized in the table below. 
Notation Intuition limf/g Example 
x 
f=O(g) fgrows no faster than g   4x+ 7 = O(x2)
f= ( g) fgrows at least as fast as g
f= (g )fand g grow at about the same rate =
=0 9 x2 = ( x)
= 0, 8x2 +x= (x2)
2f g f and g grow at the same rate 
= 1 x2 +x x
f=o(g) fgrows slower than g = 0 1 /n=o(1)
f=(g) fgrows faster than g = n2 =(n)
This summary of asymptotic notation is valid for essentially all functions encountered 
in computer science. However, in the rare case when lim n f/gdoes not exist or is nega
tive, one must consult the formal, nitpicky denitions of these symbols. These denitions 
are provided in the notes for the recitation following this lecture. 
3.4 Enter the Dark Side 
So when someone talks asymptotics, why should you reach for your light saber? 
Asymptotic notation is so widely used to analyze algorithm running times that there is 
a temptation to design for the notation rather than for true usefulness. Remember that 
asymptotic notation conceals some information about an algorithms performance while 
highlighting other aspects. So when a researcher designs an algorithm, he or she might 
make tradeoffs so that the revealed part look good even though the concealed parts make 
the algorithm undesirable.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Sums, Approximations, and Asymptotics II 7 
the product into a sum: 
lnn!=ln(123n)
=ln 1 + ln 2 + ln 3 + . . .+ lnn
This sum is rather nasty, but we can still get bounds by the integration method. A 
picture can be extremely helpful in working out the proper bounding functions and limits 
of integration. 
-6 
y= lnxy= ln(x
lnn+ 1)
ln 3 ln 4
0 1 2 3 4 n
In this case, we get the bounds: 
n n 
lnx dx lnn! ln(x + 1) dx  
0 1 
n 
lnn! (x+ 1) ln(x + 1)(x+ 1)
1  n 
xlnxx
0 
nlnnn+ 1 ln n! (n+ 1) ln(n + 1)(n+ 1) + 1  
Finally, we exponentiate to get bounds on n !. 
n
n+1 n n+ 1e n!  ee  e
This gives some indication how big n!is: about (n/e)n . This estimate is often good 
enough. If you need a little more accuracy, you can add one more term to get Stirlings 
Formula: 
2nnnn! e
Stirlings formula is worth committing to memory. Well often use it to rewrite expres
sions involving n!. Now, one might object that the expression on the left actually looks a 
lot better than the expression on the right. But thats just an artifact of notation. If you ac
tually wanted to compute n!, youd need n1multiplications. However, the expression 
on the right is a closed form; evaluating it requires only a handful of basic operations, 
regardless of the value of n. Furthermore, when n!appears inside a larger expression,</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>12 Sums, Approximations, and Asymptotics II 
Indeed, there are some notable examples of algorithms where asymptotic notation ob
scures Deathstarsized problems. For example, there is an ingenious algorithm that mul
tiplies two n nmatrices in O(n2.376)steps instead of the obvious O(n3). However, the O
symbol conceals a constant so enormous that the naive multiplication algorithm is prefer
able up to at least n= 1020. No one seems to have gured out exactly where the crossover 
point is, but were unlikely to come anywhere near it in this century at least. Another ex
ample involves an algorithm that nds an approximate solution to the Traveling Salesman 
Problem in nearly linear time. The running time to nd an approximation within 10% 
of optimal is around O(nlog400 n). Now, in a sense, the authors claim that this is nearly 
linear is correct; for example: 
1.01nlog400 n=O(n )
But this is just a tad misleading since 
1.01 nlog400 n n
for all n &lt; 10100,000 . These extreme examples are wellknown, but whether misuse of 
asymptotic notation drives an wedge between algorithmic theory and practice more gen
erally is a question you might ponder. The moral is: use asymptotic notation to clarify, 
not conceal. 
Avoid the Dark Side, you must.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>3 Sums, Approximations, and Asymptotics II 
blocks is: 
1 
2) 1Xn =Xn1  (n 1) + (X n1 +
n
1=Xn1 +2n
1 1 1 1= + + + . . .+2 4 6 2n
We use the assumption P (n 1)in the last step. This proves P (n). 
The theorem follows by the principle of induction. 
1.1 Harmonic Numbers 
Sums similar to the one in Theorem 1 come up all the time in computer science. In partic
ular, 
1 1 1 1+ + + . . .+1 2 3 n
is called a harmonic sum. Its value is called the nth harmonic number and is denoted Hn. 
In these terms, the greatest possible offset of a stack of n blocks is 1 
2Hn. 
We can tabulate the maximum achievable overhang with n= 1, 2, 3 and 4 blocks by 
computing the rst few harmonic numbers: 
# of blocks maximum overhang 
1 1 
21 
11 
21 H1 () = =2
1 1 
21 1 3 
42 H2 ( )+
 = =2 1 2
1 1 
21 1 1 11 =123 H3 ( ) ++ =
2 1 2 3
1 1 
21 1 1 1 254 H4 (
 ) &gt;1 +++ = =24 2 1 2 3 4
1 
2 
1 
4 
1 
6 
1 
8 The last line reveals that we can suspend the fourth block beyond the edge of the table! 
Heres the conguration that does the trick:</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>4 Sums, Approximations, and Asymptotics II 
1.2 Bounding a Sum with an Integral 
We need to know more about harmonic sums to determine what can be done with a large 
number of blocks. Unfortunately, there is no closed form for Hn. But, on the bright side, 
we can get good lower and upper bounds on harmonic sums using a general technique 
involving integration that applies to many other sums as well. 
Heres how it works. First, we imagine a bar graph where the area of the kth bar is 
equal to the kth term in the sum. In particular, each bar has width 1 and height equal 
to the value of the kth term. For example, the bar graph corresponding to the harmonic 
sum 1 1 1 1Hn = + + + . . .+1 2 3 n
is shown below. 
6 
1
1/2
1 1 1 1 . . .
1 2 3 4 -
0 1 2 3 4 n 1n
Now the value of the sum is equal to the area of the bars, and we can estimate the area 
of the bars using integration. Suppose we draw a smooth curve that runs just below the 
bars; in fact, theres a natural choice: the curve described by the function y = 1/(x + 1). 
-6 
1 
1 1 
2 1 
3 1 
4 1
1/2
y= 1/(x + 1)
0 1 2 3 4 n 1n</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>10 Sums, Approximations, and Asymptotics II 
Proof. We must show that there exist constants x0 and c &gt;0such that |5x+ 100|  c xfor 
all x &gt; x 0. Let c = 10 and x 0 = 20 and note that: 
5x+ 100  5x+ 5x= 10x for all x &gt; 20 | | 
Heres another claim that points out a very common error involving O notation. 
Claim 3. x=O(x2)
Proof. We must show that there exist constants x0 and c &gt;0such that |x|  c x2 for all 
x &gt; x 0. Let c = 1and x 0 = 1and note that 
x x for all x &gt; 1 | |  1 2 
Many people fail to realize that a statement of the form f(x) = O(g(x))only places an 
upper bound on the growth of the function f. So, for example, youll often hear people 
say things like, I cant use an algorithm that runs in O(x2)steps because thats too slow. 
People who say things like that are dumb and you should make fun of them until they cry. 
Okay, maybe not. But they are incorrect; we just proved that a fast algorithm that requires 
2only xsteps also runs in time O(x)! One properly expresses a lower bound using the 
notation, which well come to presently. 
2What about the reverse of the previous claim? Is x=O(x)? On an informal basis, this 
means x2 grows no faster than x, which is false. Lets prove this formally. 
2Claim 4. x=O(x)
Proof. We argue by contradiction; suppose that there exist constants x 0 and c such that: 
2|x|  c x for all x &gt; x 0 
Dividing both sides of the inequality by x gives: 
x c for all x &gt; x 0 
But this is false when x = 1 + max(x 0, c). 
2 2We can show that x=O(100x)by essentially the same argument; intuitively, xgrows 
quadratically, while 100x grows only linearly. Generally, changes in multiplicative con
stants do not affect the validity of an assertion involving O. However, constants in expo
nentials can be critical: 
Claim 5. 
4x =O(2x)</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Sums, Approximations, and Asymptotics II 9 
On the other hand, each of the n2 entries in the product matrix takes about nsteps to 
2compute. So the running time is roughly n n =n3. This answer is certainly less precise,  
but it was easy to derive and is easy to interpret. For example, we can see that doubling 
the size of the matrices from n nto 2n 2nwould increase the running time from about 
n3 to about (2n)3 = 8n3 a factor of 8. And, assuming a computer performs billions of 
operations in a reasonable time (as opposed to millions or trillions), the largest matrices 
we could handle would be roughly 1000 1000. Furthermore, this approximate answer 
is independent of tiny implementation and hardware details. It remains valid even after 
you upgrade your computer. 
So approximate answers are quite attractive. And asymptotic notation allows one to 
formulate vague statements like roughly n3 in a very precise way. 
3.2 Six FunnyLookin Symbols 
Asymptotic notation involves six weird little symbols: 
O  o 
oh omega theta littleoh littleomega tilde
Well focus on O, which is the most widely used. The others are about equally popular, 
except for  , which is the JarJar of the lot. 
Suppose that f and g are functions. Then the statement 
f(x) = O(g(x))
means that there exist constants x 0 and c &gt; 0such that 
f(x)|  c g(x) |
for all x &gt; x 0. Now this denition is pretty hairy. But what its trying to say, with all its 
cryptic little constants, is that fgrows no faster than g. A bit more precisely, it says that fis 
at most a constant times greater than g, except maybe for small values of x. For example, 
heres a true statement: 
5x+ 100 = O(x)
This holds because the left side is only about 5 times larger than the right. Of course, for 
small values of x(like x= 1) the left side is many times larger than the right, but the 
denition of O is cleverly designed to sweep aside such inconvenient details. 
Lets work carefully through a sequence of examples involving Oin order to better 
understand this denition. 
Claim 2. 5x+ 100 = O(x)</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-00-introduction-to-computer-science-and-programming-fall-2008/resources/lecture-2/</video_url>
          <video_title>2: Branching, Conditionals, and Iteration</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help MIT
OpenCourseware continue to</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>offer high-quality educational
resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation, or view
additional materials from</text_slice>
            </slice>
            <slice>
              <time_slice>0:13</time_slice>
              <text_slice>hundreds of MIT courses, visit
MIT OpenCourseware, at</text_slice>
            </slice>
            <slice>
              <time_slice>0:17</time_slice>
              <text_slice>ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:19</time_slice>
              <text_slice>PROFESSOR JIM ERICSON:
OK, to work.</text_slice>
            </slice>
            <slice>
              <time_slice>0:24</time_slice>
              <text_slice>A word of warning: fasten
your seat belts.</text_slice>
            </slice>
            <slice>
              <time_slice>0:27</time_slice>
              <text_slice>Or, another way of saying it is,
I'm going to open up the</text_slice>
            </slice>
            <slice>
              <time_slice>0:29</time_slice>
              <text_slice>fire hose a little bit today.</text_slice>
            </slice>
            <slice>
              <time_slice>0:31</time_slice>
              <text_slice>Last lecture, you might have
thought this was a SHASS</text_slice>
            </slice>
            <slice>
              <time_slice>0:33</time_slice>
              <text_slice>class, it's not like a
philosophy class, and it was</text_slice>
            </slice>
            <slice>
              <time_slice>0:35</time_slice>
              <text_slice>important to set the stage for
what we're going to talk</text_slice>
            </slice>
            <slice>
              <time_slice>0:38</time_slice>
              <text_slice>about, but we talked about
very high level things.</text_slice>
            </slice>
            <slice>
              <time_slice>0:41</time_slice>
              <text_slice>The notion of recipes, the
notion of computation, why you</text_slice>
            </slice>
            <slice>
              <time_slice>0:43</time_slice>
              <text_slice>want to do this, what you're
going to learn.</text_slice>
            </slice>
            <slice>
              <time_slice>0:45</time_slice>
              <text_slice>Today we're going to dive into
the nitty-gritty, the nuts and</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>bolts of the basics of
computation, and in</text_slice>
            </slice>
            <slice>
              <time_slice>0:51</time_slice>
              <text_slice>particular, what I'm going to do
today is, I'm going to talk</text_slice>
            </slice>
            <slice>
              <time_slice>0:53</time_slice>
              <text_slice>about operators and operands,
which we did a little bit real</text_slice>
            </slice>
            <slice>
              <time_slice>0:56</time_slice>
              <text_slice>last time, in particular how
to create expressions, I'm</text_slice>
            </slice>
            <slice>
              <time_slice>0:58</time_slice>
              <text_slice>going to talk about statements
as the key building blocks for</text_slice>
            </slice>
            <slice>
              <time_slice>1:02</time_slice>
              <text_slice>writing code, and I'm going to
introduce simple sets of</text_slice>
            </slice>
            <slice>
              <time_slice>1:06</time_slice>
              <text_slice>programs, in particular I'm
going to talk about branching,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09</time_slice>
              <text_slice>conditionals, and iteration.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11</time_slice>
              <text_slice>So, a lot to do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13</time_slice>
              <text_slice>So, let me jump straight
to it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16</time_slice>
              <text_slice>At the end of last lecture, we
started introducing some of</text_slice>
            </slice>
            <slice>
              <time_slice>1:18</time_slice>
              <text_slice>the pieces you want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19</time_slice>
              <text_slice>And I want to remind
you of our goal.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20</time_slice>
              <text_slice>We're trying to describe
processes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22</time_slice>
              <text_slice>We want to have things that
deduce new kinds of</text_slice>
            </slice>
            <slice>
              <time_slice>1:24</time_slice>
              <text_slice>information.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25</time_slice>
              <text_slice>So we want to write programs
to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>If we're going to write
programs, we need at least two</text_slice>
            </slice>
            <slice>
              <time_slice>1:30</time_slice>
              <text_slice>things: we need some
representation</text_slice>
            </slice>
            <slice>
              <time_slice>1:32</time_slice>
              <text_slice>for fundamental data.</text_slice>
            </slice>
            <slice>
              <time_slice>1:34</time_slice>
              <text_slice>And we saw last time two
examples of that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>And the second thing we're going
to need, is we're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:39</time_slice>
              <text_slice>to need a way to give
instructions to the computer</text_slice>
            </slice>
            <slice>
              <time_slice>1:43</time_slice>
              <text_slice>to manipulate that data.</text_slice>
            </slice>
            <slice>
              <time_slice>1:44</time_slice>
              <text_slice>We need to give it a description
of the recipe.</text_slice>
            </slice>
            <slice>
              <time_slice>1:47</time_slice>
              <text_slice>In terms of primitive
data, what we saw</text_slice>
            </slice>
            <slice>
              <time_slice>1:52</time_slice>
              <text_slice>were two kinds: Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:56</time_slice>
              <text_slice>Numbers and strings.</text_slice>
            </slice>
            <slice>
              <time_slice>2:00</time_slice>
              <text_slice>A little later on in the
lecture we're going to</text_slice>
            </slice>
            <slice>
              <time_slice>2:04</time_slice>
              <text_slice>introduce a third kind of value,
but what we're going to</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>see throughout the term is, no
matter how complex a data</text_slice>
            </slice>
            <slice>
              <time_slice>2:11</time_slice>
              <text_slice>structure we create, and we're
going to create a variety of</text_slice>
            </slice>
            <slice>
              <time_slice>2:13</time_slice>
              <text_slice>data structures, fundamentally
all of them have their basis,</text_slice>
            </slice>
            <slice>
              <time_slice>2:16</time_slice>
              <text_slice>their atomic level if you like,
are going to be some</text_slice>
            </slice>
            <slice>
              <time_slice>2:19</time_slice>
              <text_slice>combinations of numbers, of
strings, and the third type,</text_slice>
            </slice>
            <slice>
              <time_slice>2:22</time_slice>
              <text_slice>which are booleans, which I'm
going to introduce a little</text_slice>
            </slice>
            <slice>
              <time_slice>2:23</time_slice>
              <text_slice>later on in this lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>2:25</time_slice>
              <text_slice>And that kind of makes
sense right?</text_slice>
            </slice>
            <slice>
              <time_slice>2:27</time_slice>
              <text_slice>Numbers are there to do numeric
things, strings are</text_slice>
            </slice>
            <slice>
              <time_slice>2:29</time_slice>
              <text_slice>our fundamental way of
representing textual</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>information.</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>And so we're going to see
how to combine those</text_slice>
            </slice>
            <slice>
              <time_slice>2:33</time_slice>
              <text_slice>things as we go along.</text_slice>
            </slice>
            <slice>
              <time_slice>2:35</time_slice>
              <text_slice>Second thing we saw was, we saw
that associated with every</text_slice>
            </slice>
            <slice>
              <time_slice>2:38</time_slice>
              <text_slice>primitive value was a type.</text_slice>
            </slice>
            <slice>
              <time_slice>2:41</time_slice>
              <text_slice>And these are kind of
obvious, right?</text_slice>
            </slice>
            <slice>
              <time_slice>2:42</time_slice>
              <text_slice>Strings are strings.</text_slice>
            </slice>
            <slice>
              <time_slice>2:44</time_slice>
              <text_slice>For numbers, we had some
variations; we had integers,</text_slice>
            </slice>
            <slice>
              <time_slice>2:47</time_slice>
              <text_slice>we had floats.</text_slice>
            </slice>
            <slice>
              <time_slice>2:48</time_slice>
              <text_slice>We'll introduce a few
more as we go along.</text_slice>
            </slice>
            <slice>
              <time_slice>2:49</time_slice>
              <text_slice>But those types are important,
because they tell us something</text_slice>
            </slice>
            <slice>
              <time_slice>2:52</time_slice>
              <text_slice>about what we want to do when we
want to put them together.</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>OK, but nonetheless, I want to
stress we have both a value,</text_slice>
            </slice>
            <slice>
              <time_slice>3:00</time_slice>
              <text_slice>yeah, and a type.</text_slice>
            </slice>
            <slice>
              <time_slice>3:05</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>3:05</time_slice>
              <text_slice>Once we have them, we
want to start making</text_slice>
            </slice>
            <slice>
              <time_slice>3:07</time_slice>
              <text_slice>combinations out of them.</text_slice>
            </slice>
            <slice>
              <time_slice>3:08</time_slice>
              <text_slice>We want to put pieces
together.</text_slice>
            </slice>
            <slice>
              <time_slice>3:10</time_slice>
              <text_slice>And for that, we combine
things in expressions.</text_slice>
            </slice>
            <slice>
              <time_slice>3:19</time_slice>
              <text_slice>And what we saw as expressions
are formed of</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>operands and operators.</text_slice>
            </slice>
            <slice>
              <time_slice>3:30</time_slice>
              <text_slice>And the simple things we did
were the sort of things you'd</text_slice>
            </slice>
            <slice>
              <time_slice>3:34</time_slice>
              <text_slice>expect from numerical things.</text_slice>
            </slice>
            <slice>
              <time_slice>3:36</time_slice>
              <text_slice>Now I want to stress one
other nuance here.</text_slice>
            </slice>
            <slice>
              <time_slice>3:39</time_slice>
              <text_slice>Which is, and we're going to
do some examples of this,</text_slice>
            </slice>
            <slice>
              <time_slice>3:41</time_slice>
              <text_slice>initially we just typed in
expressions into the</text_slice>
            </slice>
            <slice>
              <time_slice>3:43</time_slice>
              <text_slice>interpreter; that is, directly
into Python.</text_slice>
            </slice>
            <slice>
              <time_slice>3:46</time_slice>
              <text_slice>And as I suggested last time,
the interpreter is actually a</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>program inside of the machine
that is basically following</text_slice>
            </slice>
            <slice>
              <time_slice>3:52</time_slice>
              <text_slice>the rules we're describing here
to deduce the value and</text_slice>
            </slice>
            <slice>
              <time_slice>3:54</time_slice>
              <text_slice>print it up.</text_slice>
            </slice>
            <slice>
              <time_slice>3:55</time_slice>
              <text_slice>And if we type directly into
the interpreter, it</text_slice>
            </slice>
            <slice>
              <time_slice>3:58</time_slice>
              <text_slice>essentially does an
eval and a print.</text_slice>
            </slice>
            <slice>
              <time_slice>3:59</time_slice>
              <text_slice>It evaluates, and it prints.</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>Most of the time, we're going to
be doing expressions inside</text_slice>
            </slice>
            <slice>
              <time_slice>4:10</time_slice>
              <text_slice>of some piece of code, inside
of a script, which is the</text_slice>
            </slice>
            <slice>
              <time_slice>4:13</time_slice>
              <text_slice>Python word for program.</text_slice>
            </slice>
            <slice>
              <time_slice>4:15</time_slice>
              <text_slice>In there, I want to make this
distinction, this nuance: the</text_slice>
            </slice>
            <slice>
              <time_slice>4:17</time_slice>
              <text_slice>evaluator is still going to be
taking those expressions and</text_slice>
            </slice>
            <slice>
              <time_slice>4:20</time_slice>
              <text_slice>using its rules to get a value,
but it's not going to</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>print them back out.</text_slice>
            </slice>
            <slice>
              <time_slice>4:24</time_slice>
              <text_slice>Why?</text_slice>
            </slice>
            <slice>
              <time_slice>4:25</time_slice>
              <text_slice>Because typically, you're doing
that to use it somewhere</text_slice>
            </slice>
            <slice>
              <time_slice>4:27</time_slice>
              <text_slice>else in the program.</text_slice>
            </slice>
            <slice>
              <time_slice>4:28</time_slice>
              <text_slice>It's going to be stored
away in a variable.</text_slice>
            </slice>
            <slice>
              <time_slice>4:30</time_slice>
              <text_slice>It's going to be stuck
in a data structure.</text_slice>
            </slice>
            <slice>
              <time_slice>4:31</time_slice>
              <text_slice>It's going to be used
for a side effect.</text_slice>
            </slice>
            <slice>
              <time_slice>4:34</time_slice>
              <text_slice>So, inside of code, or inside of
a script, there's no print,</text_slice>
            </slice>
            <slice>
              <time_slice>4:40</time_slice>
              <text_slice>unless we make it explicit.</text_slice>
            </slice>
            <slice>
              <time_slice>4:45</time_slice>
              <text_slice>And that's a little bit down in
the weeds, it's a detail,</text_slice>
            </slice>
            <slice>
              <time_slice>4:47</time_slice>
              <text_slice>but one I want to stress.</text_slice>
            </slice>
            <slice>
              <time_slice>4:48</time_slice>
              <text_slice>You need to, if you want
something to be printed out</text_slice>
            </slice>
            <slice>
              <time_slice>4:50</time_slice>
              <text_slice>inside your code, you need to
tell the machine to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>4:54</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>4:56</time_slice>
              <text_slice>So let's do some simple
examples.</text_slice>
            </slice>
            <slice>
              <time_slice>4:57</time_slice>
              <text_slice>We've already seen somebody's.</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>I just want to remind you, if I
wanted to, for example, type</text_slice>
            </slice>
            <slice>
              <time_slice>5:02</time_slice>
              <text_slice>in an expression like that,
notice the syntactical form,</text_slice>
            </slice>
            <slice>
              <time_slice>5:04</time_slice>
              <text_slice>it's an expression, a number,
followed by an operand,</text_slice>
            </slice>
            <slice>
              <time_slice>5:07</time_slice>
              <text_slice>followed by another
expression.</text_slice>
            </slice>
            <slice>
              <time_slice>5:09</time_slice>
              <text_slice>And of course I get out the
value I'd like there.</text_slice>
            </slice>
            <slice>
              <time_slice>5:12</time_slice>
              <text_slice>Yes sir.</text_slice>
            </slice>
            <slice>
              <time_slice>5:15</time_slice>
              <text_slice>Oh, you don't like leaning
that far to the left?</text_slice>
            </slice>
            <slice>
              <time_slice>5:17</time_slice>
              <text_slice>OK, if you're a Republican I'll
be happy to shift this</text_slice>
            </slice>
            <slice>
              <time_slice>5:20</time_slice>
              <text_slice>over a little bit.</text_slice>
            </slice>
            <slice>
              <time_slice>5:22</time_slice>
              <text_slice>Wow, John, I got a laugh
for a political</text_slice>
            </slice>
            <slice>
              <time_slice>5:23</time_slice>
              <text_slice>joke, I'm in big trouble.</text_slice>
            </slice>
            <slice>
              <time_slice>5:24</time_slice>
              <text_slice>That better?</text_slice>
            </slice>
            <slice>
              <time_slice>5:26</time_slice>
              <text_slice>Oh damn, all right, I'll have
to do it even more.</text_slice>
            </slice>
            <slice>
              <time_slice>5:32</time_slice>
              <text_slice>OK, here we go, here we go,
you see, I'm doing it down</text_slice>
            </slice>
            <slice>
              <time_slice>5:35</time_slice>
              <text_slice>here, I can't see it, does
that-- ah, I hear his sighs of</text_slice>
            </slice>
            <slice>
              <time_slice>5:37</time_slice>
              <text_slice>relief, OK, good.</text_slice>
            </slice>
            <slice>
              <time_slice>5:38</time_slice>
              <text_slice>There we go.</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>Better.</text_slice>
            </slice>
            <slice>
              <time_slice>5:40</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>5:41</time_slice>
              <text_slice>One of the other things we
showed last time is that</text_slice>
            </slice>
            <slice>
              <time_slice>5:42</time_slice>
              <text_slice>operators are overloaded.</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>And this is where you heard
John and I disagree.</text_slice>
            </slice>
            <slice>
              <time_slice>5:46</time_slice>
              <text_slice>I don't happen to like
this, but he</text_slice>
            </slice>
            <slice>
              <time_slice>5:47</time_slice>
              <text_slice>thinks it's an ok thing.</text_slice>
            </slice>
            <slice>
              <time_slice>5:49</time_slice>
              <text_slice>In a particular-- if we, whoa,
we don't do that, we do this--</text_slice>
            </slice>
            <slice>
              <time_slice>5:54</time_slice>
              <text_slice>that is, give a combination of
a number multiplication in a</text_slice>
            </slice>
            <slice>
              <time_slice>5:57</time_slice>
              <text_slice>string, this will in fact give
us back a new string with that</text_slice>
            </slice>
            <slice>
              <time_slice>6:01</time_slice>
              <text_slice>many replicas, if you
like, of the string</text_slice>
            </slice>
            <slice>
              <time_slice>6:03</time_slice>
              <text_slice>concatenated together.</text_slice>
            </slice>
            <slice>
              <time_slice>6:05</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:05</time_slice>
              <text_slice>And if you want to do other
things, for example, we can</text_slice>
            </slice>
            <slice>
              <time_slice>6:08</time_slice>
              <text_slice>take two strings and add--
whoops, sorry-- and add them</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>together, we will get
out, again, a</text_slice>
            </slice>
            <slice>
              <time_slice>6:15</time_slice>
              <text_slice>concatenation of that string.</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>And these will, we'll let you
work through the variations,</text_slice>
            </slice>
            <slice>
              <time_slice>6:19</time_slice>
              <text_slice>but these are the simple
expressions we can use.</text_slice>
            </slice>
            <slice>
              <time_slice>6:21</time_slice>
              <text_slice>Now, sometimes things get
a little interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>6:25</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>What's the value of
that expression?</text_slice>
            </slice>
            <slice>
              <time_slice>6:33</time_slice>
              <text_slice>What do you think should happen
if I evaluate that</text_slice>
            </slice>
            <slice>
              <time_slice>6:35</time_slice>
              <text_slice>expression?</text_slice>
            </slice>
            <slice>
              <time_slice>6:38</time_slice>
              <text_slice>Somebody with a hand up,
so I can see it.</text_slice>
            </slice>
            <slice>
              <time_slice>6:38</time_slice>
              <text_slice>What's going to happen?</text_slice>
            </slice>
            <slice>
              <time_slice>6:39</time_slice>
              <text_slice>STUDENT: [UNINTELLIGIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>6:41</time_slice>
              <text_slice>PROFESSOR JIM ERICSON:
An error?</text_slice>
            </slice>
            <slice>
              <time_slice>6:43</time_slice>
              <text_slice>Why?</text_slice>
            </slice>
            <slice>
              <time_slice>6:43</time_slice>
              <text_slice>STUDENT: [UNINTELLIGIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>6:48</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: Great.</text_slice>
            </slice>
            <slice>
              <time_slice>6:50</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>6:50</time_slice>
              <text_slice>That means, let's check it.</text_slice>
            </slice>
            <slice>
              <time_slice>6:51</time_slice>
              <text_slice>It certainly is.</text_slice>
            </slice>
            <slice>
              <time_slice>6:52</time_slice>
              <text_slice>We bribe people.</text_slice>
            </slice>
            <slice>
              <time_slice>6:53</time_slice>
              <text_slice>So I, ah, by the way, John's a
Yankees fan, he throws like</text_slice>
            </slice>
            <slice>
              <time_slice>6:57</time_slice>
              <text_slice>Johnny Damon, I'm a Red Sox fan,
so we'll see if I, how</text_slice>
            </slice>
            <slice>
              <time_slice>7:00</time_slice>
              <text_slice>about that?</text_slice>
            </slice>
            <slice>
              <time_slice>7:00</time_slice>
              <text_slice>And I almost hit John along
the way, great.</text_slice>
            </slice>
            <slice>
              <time_slice>7:03</time_slice>
              <text_slice>My third right, exactly,
what can I say?</text_slice>
            </slice>
            <slice>
              <time_slice>7:05</time_slice>
              <text_slice>All right, so we're into bribing
you as we go along</text_slice>
            </slice>
            <slice>
              <time_slice>7:07</time_slice>
              <text_slice>here, and all right?</text_slice>
            </slice>
            <slice>
              <time_slice>7:08</time_slice>
              <text_slice>You'll be badly overweight
by the end of the term.</text_slice>
            </slice>
            <slice>
              <time_slice>7:11</time_slice>
              <text_slice>Right, it's a syntactic error,
because it doesn't know how to</text_slice>
            </slice>
            <slice>
              <time_slice>7:13</time_slice>
              <text_slice>deal with this.</text_slice>
            </slice>
            <slice>
              <time_slice>7:14</time_slice>
              <text_slice>But there's an important thing
going on here, if I in fact</text_slice>
            </slice>
            <slice>
              <time_slice>7:16</time_slice>
              <text_slice>wanted to combine those into a
string, I should have told the</text_slice>
            </slice>
            <slice>
              <time_slice>7:19</time_slice>
              <text_slice>machine to do that, and I can do
that, by explicitly saying,</text_slice>
            </slice>
            <slice>
              <time_slice>7:23</time_slice>
              <text_slice>take that, which is a number,
and convert it into a string,</text_slice>
            </slice>
            <slice>
              <time_slice>7:27</time_slice>
              <text_slice>and then-- bleah, I keep
doing that-- then</text_slice>
            </slice>
            <slice>
              <time_slice>7:29</time_slice>
              <text_slice>add it to that string.</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>OK, so there's an important
point here.</text_slice>
            </slice>
            <slice>
              <time_slice>7:35</time_slice>
              <text_slice>We've got what's called
type conversion.</text_slice>
            </slice>
            <slice>
              <time_slice>7:44</time_slice>
              <text_slice>That is, if I want to combine
two things together in a</text_slice>
            </slice>
            <slice>
              <time_slice>7:48</time_slice>
              <text_slice>particular way, I need to make
sure that I give it the kind</text_slice>
            </slice>
            <slice>
              <time_slice>7:52</time_slice>
              <text_slice>of operand it expects.</text_slice>
            </slice>
            <slice>
              <time_slice>7:53</time_slice>
              <text_slice>So STR, which I just typed up
there, takes in parens, some</text_slice>
            </slice>
            <slice>
              <time_slice>7:57</time_slice>
              <text_slice>input, and it converts it into
a string, so that now I can</text_slice>
            </slice>
            <slice>
              <time_slice>8:01</time_slice>
              <text_slice>use that where I was
expecting a string.</text_slice>
            </slice>
            <slice>
              <time_slice>8:02</time_slice>
              <text_slice>John.</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>PROFESSOR JOHN GUTTAG: You've
got a static semantic error in</text_slice>
            </slice>
            <slice>
              <time_slice>8:07</time_slice>
              <text_slice>your syntax.</text_slice>
            </slice>
            <slice>
              <time_slice>8:07</time_slice>
              <text_slice>PROFESSOR JIM ERICSON:
Thank you.</text_slice>
            </slice>
            <slice>
              <time_slice>8:08</time_slice>
              <text_slice>And I was going to come to that
in a second, but thank</text_slice>
            </slice>
            <slice>
              <time_slice>8:10</time_slice>
              <text_slice>you, John, for pointing it out.</text_slice>
            </slice>
            <slice>
              <time_slice>8:11</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>8:12</time_slice>
              <text_slice>Why is it a static
semantic error?</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>The syntax is OK in the sense
of, it is an operand, an</text_slice>
            </slice>
            <slice>
              <time_slice>8:18</time_slice>
              <text_slice>operator, an operand, so
syntactically it's OK.</text_slice>
            </slice>
            <slice>
              <time_slice>8:23</time_slice>
              <text_slice>The semantics was what caused
the problem, because the</text_slice>
            </slice>
            <slice>
              <time_slice>8:26</time_slice>
              <text_slice>operator was expecting
a particular kind</text_slice>
            </slice>
            <slice>
              <time_slice>8:28</time_slice>
              <text_slice>of structure there.</text_slice>
            </slice>
            <slice>
              <time_slice>8:30</time_slice>
              <text_slice>There's a second thing going
on here that I want to</text_slice>
            </slice>
            <slice>
              <time_slice>8:32</time_slice>
              <text_slice>highlight, because it's
really important.</text_slice>
            </slice>
            <slice>
              <time_slice>8:36</time_slice>
              <text_slice>Yes indeed.</text_slice>
            </slice>
            <slice>
              <time_slice>8:37</time_slice>
              <text_slice>OK, there we go.</text_slice>
            </slice>
            <slice>
              <time_slice>8:38</time_slice>
              <text_slice>The second thing I want to
highlight is, that what's</text_slice>
            </slice>
            <slice>
              <time_slice>8:41</time_slice>
              <text_slice>going on, is that Python is
doing some type checking.</text_slice>
            </slice>
            <slice>
              <time_slice>8:48</time_slice>
              <text_slice>It caught the error, because
it checked the types of the</text_slice>
            </slice>
            <slice>
              <time_slice>8:51</time_slice>
              <text_slice>operands before it applied
things, and it says,</text_slice>
            </slice>
            <slice>
              <time_slice>8:54</time_slice>
              <text_slice>I'm going to stop.</text_slice>
            </slice>
            <slice>
              <time_slice>8:55</time_slice>
              <text_slice>Now, you might have said, gee,
why didn't it just assume that</text_slice>
            </slice>
            <slice>
              <time_slice>8:57</time_slice>
              <text_slice>I wanted to in fact treat these
as strings, and combine</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>them together?</text_slice>
            </slice>
            <slice>
              <time_slice>9:01</time_slice>
              <text_slice>Sounds like a reasonable
thing to do.</text_slice>
            </slice>
            <slice>
              <time_slice>9:03</time_slice>
              <text_slice>But it's a dangerous thing.</text_slice>
            </slice>
            <slice>
              <time_slice>9:05</time_slice>
              <text_slice>Because in doing that, Python
would then have a value that</text_slice>
            </slice>
            <slice>
              <time_slice>9:08</time_slice>
              <text_slice>it could pass on into some other
part of a computation,</text_slice>
            </slice>
            <slice>
              <time_slice>9:10</time_slice>
              <text_slice>and if it wasn't what I wanted,
I might be a long ways</text_slice>
            </slice>
            <slice>
              <time_slice>9:13</time_slice>
              <text_slice>downstream in the computation
before I actually hit some</text_slice>
            </slice>
            <slice>
              <time_slice>9:16</time_slice>
              <text_slice>result that makes no sense.</text_slice>
            </slice>
            <slice>
              <time_slice>9:18</time_slice>
              <text_slice>And tracing back where it came
from can be really hard.</text_slice>
            </slice>
            <slice>
              <time_slice>9:21</time_slice>
              <text_slice>So I actually want to have
type checking as much</text_slice>
            </slice>
            <slice>
              <time_slice>9:23</time_slice>
              <text_slice>as I can early on.</text_slice>
            </slice>
            <slice>
              <time_slice>9:26</time_slice>
              <text_slice>And in fact, under type
checking, different languages</text_slice>
            </slice>
            <slice>
              <time_slice>9:28</time_slice>
              <text_slice>sometimes fall on a spectrum
from weak to strong typing.</text_slice>
            </slice>
            <slice>
              <time_slice>9:36</time_slice>
              <text_slice>Which basically says, how much
type checking do they do?</text_slice>
            </slice>
            <slice>
              <time_slice>9:39</time_slice>
              <text_slice>Now, you're going to hear John
and I go back and forth a lot,</text_slice>
            </slice>
            <slice>
              <time_slice>9:42</time_slice>
              <text_slice>as I said I'm an old time-- well
I'm certainly old time,</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>but I'm also an old time
Lisp programmer.</text_slice>
            </slice>
            <slice>
              <time_slice>9:46</time_slice>
              <text_slice>I love Lisp, but Lisp is
certainly in the category of a</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>very weakly typed language.</text_slice>
            </slice>
            <slice>
              <time_slice>9:50</time_slice>
              <text_slice>It does not check the types
of its arguments at all.</text_slice>
            </slice>
            <slice>
              <time_slice>9:53</time_slice>
              <text_slice>Python is, I wouldn't say
completely strong, but it's</text_slice>
            </slice>
            <slice>
              <time_slice>9:55</time_slice>
              <text_slice>much closer to the strong
end of the spectrum.</text_slice>
            </slice>
            <slice>
              <time_slice>9:58</time_slice>
              <text_slice>It's going to do a lot of type
checking for you before it</text_slice>
            </slice>
            <slice>
              <time_slice>10:00</time_slice>
              <text_slice>actually passes things back.</text_slice>
            </slice>
            <slice>
              <time_slice>10:03</time_slice>
              <text_slice>Nonetheless, I'm also going to
argue that it's probably not</text_slice>
            </slice>
            <slice>
              <time_slice>10:06</time_slice>
              <text_slice>as strongly typed as
we might like.</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>So, for example, there's
an expression.</text_slice>
            </slice>
            <slice>
              <time_slice>10:13</time_slice>
              <text_slice>Now, less than is just, if you
haven't used it before, it's</text_slice>
            </slice>
            <slice>
              <time_slice>10:15</time_slice>
              <text_slice>just the operator you'd expect,
it's comparing two</text_slice>
            </slice>
            <slice>
              <time_slice>10:17</time_slice>
              <text_slice>things and it's going to return
either true or false</text_slice>
            </slice>
            <slice>
              <time_slice>10:19</time_slice>
              <text_slice>depending on whether the first
argument is less than the</text_slice>
            </slice>
            <slice>
              <time_slice>10:21</time_slice>
              <text_slice>second argument.</text_slice>
            </slice>
            <slice>
              <time_slice>10:23</time_slice>
              <text_slice>What's going to happen here?</text_slice>
            </slice>
            <slice>
              <time_slice>10:24</time_slice>
              <text_slice>Again, I need a hand so I can
know where to throw candy.</text_slice>
            </slice>
            <slice>
              <time_slice>10:28</time_slice>
              <text_slice>I've also got on my
reading glasses</text_slice>
            </slice>
            <slice>
              <time_slice>10:29</time_slice>
              <text_slice>on, I can't see anything.</text_slice>
            </slice>
            <slice>
              <time_slice>10:31</time_slice>
              <text_slice>Anybody.</text_slice>
            </slice>
            <slice>
              <time_slice>10:33</time_slice>
              <text_slice>TAs don't count, they
get their own candy.</text_slice>
            </slice>
            <slice>
              <time_slice>10:36</time_slice>
              <text_slice>When it, yep.</text_slice>
            </slice>
            <slice>
              <time_slice>10:37</time_slice>
              <text_slice>STUDENT: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>10:39</time_slice>
              <text_slice>PROFESSOR JIM ERICSON:
Good question.</text_slice>
            </slice>
            <slice>
              <time_slice>10:40</time_slice>
              <text_slice>Sounds like a reasonable
guess, right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:41</time_slice>
              <text_slice>How in the world am I going to
compare a string to a number?</text_slice>
            </slice>
            <slice>
              <time_slice>10:44</time_slice>
              <text_slice>So, see how good my aim
is, ah, not bad.</text_slice>
            </slice>
            <slice>
              <time_slice>10:46</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>10:47</time_slice>
              <text_slice>A good quest-- sorry, a
good thought, but in</text_slice>
            </slice>
            <slice>
              <time_slice>10:51</time_slice>
              <text_slice>fact, son of a gun.</text_slice>
            </slice>
            <slice>
              <time_slice>10:53</time_slice>
              <text_slice>Or as my younger son would
say, fudge knuckle.</text_slice>
            </slice>
            <slice>
              <time_slice>10:58</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>10:58</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>So, what in the world's
going on here?</text_slice>
            </slice>
            <slice>
              <time_slice>11:01</time_slice>
              <text_slice>This is a place--</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>I don't know about you, John,
I think this is actually</text_slice>
            </slice>
            <slice>
              <time_slice>11:04</time_slice>
              <text_slice>really not good, because right,
what this is doing is,</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>it's allowing-- sorry, let me
back up and say it-- it's got</text_slice>
            </slice>
            <slice>
              <time_slice>11:12</time_slice>
              <text_slice>an overload on the less-than
that allows you to compare</text_slice>
            </slice>
            <slice>
              <time_slice>11:14</time_slice>
              <text_slice>basically the lexicographic
ordering, or this sequence of</text_slice>
            </slice>
            <slice>
              <time_slice>11:18</time_slice>
              <text_slice>ordering of symbols, including
numbers inside of the machine.</text_slice>
            </slice>
            <slice>
              <time_slice>11:22</time_slice>
              <text_slice>And this, in my mind, should
have been an error.</text_slice>
            </slice>
            <slice>
              <time_slice>11:24</time_slice>
              <text_slice>Why in the world would you
want to compare that?</text_slice>
            </slice>
            <slice>
              <time_slice>11:26</time_slice>
              <text_slice>Just to give you an example of
that, for instance, I can do</text_slice>
            </slice>
            <slice>
              <time_slice>11:29</time_slice>
              <text_slice>the following: all right, the
number four is less than the</text_slice>
            </slice>
            <slice>
              <time_slice>11:35</time_slice>
              <text_slice>string three, whereas the string
four, oops, is not less</text_slice>
            </slice>
            <slice>
              <time_slice>11:42</time_slice>
              <text_slice>than the string three.</text_slice>
            </slice>
            <slice>
              <time_slice>11:43</time_slice>
              <text_slice>And this is a place where it's
comparing strings and numbers</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>in a strange way.</text_slice>
            </slice>
            <slice>
              <time_slice>11:47</time_slice>
              <text_slice>So why am I showing you this?</text_slice>
            </slice>
            <slice>
              <time_slice>11:48</time_slice>
              <text_slice>Partly to show you that it's
kind of weird, but also to</text_slice>
            </slice>
            <slice>
              <time_slice>11:51</time_slice>
              <text_slice>tell you that one of the things
you want to do is</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>exercise what I'm going to call
some type discipline.</text_slice>
            </slice>
            <slice>
              <time_slice>12:00</time_slice>
              <text_slice>Meaning, when you write code,
you want to get into the habit</text_slice>
            </slice>
            <slice>
              <time_slice>12:05</time_slice>
              <text_slice>of A, checking out operators or
procedures to see what they</text_slice>
            </slice>
            <slice>
              <time_slice>12:08</time_slice>
              <text_slice>do under different
circumstances, either check</text_slice>
            </slice>
            <slice>
              <time_slice>12:10</time_slice>
              <text_slice>them out or read the
specifications of it, and two,</text_slice>
            </slice>
            <slice>
              <time_slice>12:13</time_slice>
              <text_slice>when you write your own code,
you want to be disciplined</text_slice>
            </slice>
            <slice>
              <time_slice>12:15</time_slice>
              <text_slice>about what types of arguments
or operands</text_slice>
            </slice>
            <slice>
              <time_slice>12:18</time_slice>
              <text_slice>you apply to operators.</text_slice>
            </slice>
            <slice>
              <time_slice>12:20</time_slice>
              <text_slice>Because this is something that
could certainly have screwed</text_slice>
            </slice>
            <slice>
              <time_slice>12:22</time_slice>
              <text_slice>you up if you didn't realize
it did it, and you need to</text_slice>
            </slice>
            <slice>
              <time_slice>12:25</time_slice>
              <text_slice>have that discipline
to make sure it's</text_slice>
            </slice>
            <slice>
              <time_slice>12:26</time_slice>
              <text_slice>doing the right thing.</text_slice>
            </slice>
            <slice>
              <time_slice>12:29</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>One of the other things you're
going to see is that some of</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>the operators have
odd meanings.</text_slice>
            </slice>
            <slice>
              <time_slice>12:36</time_slice>
              <text_slice>And again, I think we looked--</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>Yup?</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>STUDENT: So, the string A is
less than three, is false</text_slice>
            </slice>
            <slice>
              <time_slice>12:40</time_slice>
              <text_slice>because they're comparing
like ASCII values?</text_slice>
            </slice>
            <slice>
              <time_slice>12:40</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>12:45</time_slice>
              <text_slice>I mean, I'm sorry.</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>The answer is, I don't
know if it's ASCII.</text_slice>
            </slice>
            <slice>
              <time_slice>12:47</time_slice>
              <text_slice>John, do you know, are
they doing ASCII</text_slice>
            </slice>
            <slice>
              <time_slice>12:48</time_slice>
              <text_slice>encoding inside of here?</text_slice>
            </slice>
            <slice>
              <time_slice>12:49</time_slice>
              <text_slice>I'm assuming so.</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>So, in case you didn't
understand what the the</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>question was, basically every
symbol gets translated into a</text_slice>
            </slice>
            <slice>
              <time_slice>12:57</time_slice>
              <text_slice>particular encoding, a string
of bit, if you like, inside</text_slice>
            </slice>
            <slice>
              <time_slice>13:00</time_slice>
              <text_slice>the machine, there's a
particular one called ASCII,</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>which is, if you like, an
ordering of that, and that's</text_slice>
            </slice>
            <slice>
              <time_slice>13:05</time_slice>
              <text_slice>what the machine's actually
comparing inside of here,</text_slice>
            </slice>
            <slice>
              <time_slice>13:07</time_slice>
              <text_slice>which is why in under ASCII
encoding the numbers are going</text_slice>
            </slice>
            <slice>
              <time_slice>13:09</time_slice>
              <text_slice>to appear after the characters,
and you get the</text_slice>
            </slice>
            <slice>
              <time_slice>13:12</time_slice>
              <text_slice>strange kind of thing going on.</text_slice>
            </slice>
            <slice>
              <time_slice>13:14</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:15</time_slice>
              <text_slice>I want a couple of other things,
just to quickly remind</text_slice>
            </slice>
            <slice>
              <time_slice>13:16</time_slice>
              <text_slice>you, and one of them is,
remember, the operators do</text_slice>
            </slice>
            <slice>
              <time_slice>13:19</time_slice>
              <text_slice>look at the types, so division,
for example nine</text_slice>
            </slice>
            <slice>
              <time_slice>13:21</time_slice>
              <text_slice>divided by five is one, because
this is integer</text_slice>
            </slice>
            <slice>
              <time_slice>13:25</time_slice>
              <text_slice>division, that is, it's the
largest number of integer</text_slice>
            </slice>
            <slice>
              <time_slice>13:27</time_slice>
              <text_slice>multiples of five to go into
nine, and there would be a</text_slice>
            </slice>
            <slice>
              <time_slice>13:30</time_slice>
              <text_slice>remainder associated with it,
which is in fact four.</text_slice>
            </slice>
            <slice>
              <time_slice>13:36</time_slice>
              <text_slice>And again, you've got
to be careful about</text_slice>
            </slice>
            <slice>
              <time_slice>13:37</time_slice>
              <text_slice>how you use the operators.</text_slice>
            </slice>
            <slice>
              <time_slice>13:40</time_slice>
              <text_slice>Right, having done that, we
can certainly get to more</text_slice>
            </slice>
            <slice>
              <time_slice>13:41</time_slice>
              <text_slice>complicated things, so for
example, suppose I look at</text_slice>
            </slice>
            <slice>
              <time_slice>13:46</time_slice>
              <text_slice>that expression.</text_slice>
            </slice>
            <slice>
              <time_slice>13:47</time_slice>
              <text_slice>Three plus four times five.</text_slice>
            </slice>
            <slice>
              <time_slice>13:50</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:51</time_slice>
              <text_slice>Now.</text_slice>
            </slice>
            <slice>
              <time_slice>13:52</time_slice>
              <text_slice>There are two possible
values here, I think.</text_slice>
            </slice>
            <slice>
              <time_slice>13:55</time_slice>
              <text_slice>One is 23, the other's 35.</text_slice>
            </slice>
            <slice>
              <time_slice>13:57</time_slice>
              <text_slice>Because this could be three plus
four, times five, or it</text_slice>
            </slice>
            <slice>
              <time_slice>14:03</time_slice>
              <text_slice>could be three, plus
four times five.</text_slice>
            </slice>
            <slice>
              <time_slice>14:07</time_slice>
              <text_slice>And of course, you know, when
you look at code it doesn't</text_slice>
            </slice>
            <slice>
              <time_slice>14:08</time_slice>
              <text_slice>pause in between them.</text_slice>
            </slice>
            <slice>
              <time_slice>14:09</time_slice>
              <text_slice>But what I do?</text_slice>
            </slice>
            <slice>
              <time_slice>14:10</time_slice>
              <text_slice>I just separated, do I do the
addition first or do the</text_slice>
            </slice>
            <slice>
              <time_slice>14:12</time_slice>
              <text_slice>multiplication first?</text_slice>
            </slice>
            <slice>
              <time_slice>14:14</time_slice>
              <text_slice>Anybody know what happens
In this case?</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>Yeah, way up, oh God I'm going
to have a hell of time</text_slice>
            </slice>
            <slice>
              <time_slice>14:17</time_slice>
              <text_slice>throwing up there, way
up at the back.</text_slice>
            </slice>
            <slice>
              <time_slice>14:18</time_slice>
              <text_slice>STUDENT: Standard order of
operations, I guess take the</text_slice>
            </slice>
            <slice>
              <time_slice>14:25</time_slice>
              <text_slice>multiplication first,
and add the three.</text_slice>
            </slice>
            <slice>
              <time_slice>14:26</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>14:26</time_slice>
              <text_slice>I'm going to try, if I don't
make it, you know, just get</text_slice>
            </slice>
            <slice>
              <time_slice>14:27</time_slice>
              <text_slice>somebody to pass back, whoa!</text_slice>
            </slice>
            <slice>
              <time_slice>14:29</time_slice>
              <text_slice>I just hit somebody
in the head.</text_slice>
            </slice>
            <slice>
              <time_slice>14:30</time_slice>
              <text_slice>Thank you.</text_slice>
            </slice>
            <slice>
              <time_slice>14:30</time_slice>
              <text_slice>Please pass it back
to that guy.</text_slice>
            </slice>
            <slice>
              <time_slice>14:32</time_slice>
              <text_slice>If you want candy, sit much
closer down, and that way we</text_slice>
            </slice>
            <slice>
              <time_slice>14:34</time_slice>
              <text_slice>can film you as well
as we go along.</text_slice>
            </slice>
            <slice>
              <time_slice>14:36</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>14:36</time_slice>
              <text_slice>So the point is, there is
something here called operator</text_slice>
            </slice>
            <slice>
              <time_slice>14:39</time_slice>
              <text_slice>precedence, which is what
the gentleman said.</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>I'm not going to say much more
about it, but basically what</text_slice>
            </slice>
            <slice>
              <time_slice>14:48</time_slice>
              <text_slice>it says is, with all other
things being equal, things</text_slice>
            </slice>
            <slice>
              <time_slice>14:52</time_slice>
              <text_slice>like exponentiation are done
before you do multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>14:56</time_slice>
              <text_slice>or division, which are done
before you do things like</text_slice>
            </slice>
            <slice>
              <time_slice>15:00</time_slice>
              <text_slice>addition and subtraction.</text_slice>
            </slice>
            <slice>
              <time_slice>15:02</time_slice>
              <text_slice>And so, in fact, if I wanted
the other version of it, in</text_slice>
            </slice>
            <slice>
              <time_slice>15:04</time_slice>
              <text_slice>fact, if I do this right, it's
going to give me 23 because it</text_slice>
            </slice>
            <slice>
              <time_slice>15:06</time_slice>
              <text_slice>does the multiplication first,
if I wanted the other version</text_slice>
            </slice>
            <slice>
              <time_slice>15:09</time_slice>
              <text_slice>of it, I need to tell it that,
by using, excuse me,</text_slice>
            </slice>
            <slice>
              <time_slice>15:13</time_slice>
              <text_slice>parentheses.</text_slice>
            </slice>
            <slice>
              <time_slice>15:14</time_slice>
              <text_slice>And in general, what I
would say is, when</text_slice>
            </slice>
            <slice>
              <time_slice>15:16</time_slice>
              <text_slice>in doubt, use parens.</text_slice>
            </slice>
            <slice>
              <time_slice>15:26</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>Now, that just gives
us expressions.</text_slice>
            </slice>
            <slice>
              <time_slice>15:32</time_slice>
              <text_slice>We can start having complex
expressions, you can imagine</text_slice>
            </slice>
            <slice>
              <time_slice>15:35</time_slice>
              <text_slice>we can have things are lots of
parens, and all sorts of</text_slice>
            </slice>
            <slice>
              <time_slice>15:36</time_slice>
              <text_slice>things in it.</text_slice>
            </slice>
            <slice>
              <time_slice>15:37</time_slice>
              <text_slice>Yes, question.</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>STUDENT: What does it mean, the
operator used, when you</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>were calculating the remainder
between nine and five?</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: It's
the percent sign.</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>If you can't read it, I guess
I'm going to have to blow that</text_slice>
            </slice>
            <slice>
              <time_slice>15:47</time_slice>
              <text_slice>font up, aren't I,
next time around.</text_slice>
            </slice>
            <slice>
              <time_slice>15:47</time_slice>
              <text_slice>Yeah, it's a percent, so
this percent sign will</text_slice>
            </slice>
            <slice>
              <time_slice>15:49</time_slice>
              <text_slice>give you the remainder.</text_slice>
            </slice>
            <slice>
              <time_slice>15:52</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>15:53</time_slice>
              <text_slice>Second thing I need to do,
though, is I need to, when I</text_slice>
            </slice>
            <slice>
              <time_slice>15:55</time_slice>
              <text_slice>get those values, I want
to hang on to them.</text_slice>
            </slice>
            <slice>
              <time_slice>15:57</time_slice>
              <text_slice>I'd like to give them a name,
so I can refer to them in</text_slice>
            </slice>
            <slice>
              <time_slice>15:59</time_slice>
              <text_slice>other places.</text_slice>
            </slice>
            <slice>
              <time_slice>16:00</time_slice>
              <text_slice>And so we saw that as well, the
last piece we had here is</text_slice>
            </slice>
            <slice>
              <time_slice>16:05</time_slice>
              <text_slice>the ability to create variables,
which have their</text_slice>
            </slice>
            <slice>
              <time_slice>16:12</time_slice>
              <text_slice>own values, and that's done
using an assignment statement.</text_slice>
            </slice>
            <slice>
              <time_slice>16:20</time_slice>
              <text_slice>So in particular, that is
an assignment statement.</text_slice>
            </slice>
            <slice>
              <time_slice>16:24</time_slice>
              <text_slice>It says, take the name x and
create a binding for that name</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>to the value of the
sub-expression and in fact to</text_slice>
            </slice>
            <slice>
              <time_slice>16:31</time_slice>
              <text_slice>do this, to stress a point,
let's do that.</text_slice>
            </slice>
            <slice>
              <time_slice>16:35</time_slice>
              <text_slice>It's not just a number,
it's any expression.</text_slice>
            </slice>
            <slice>
              <time_slice>16:39</time_slice>
              <text_slice>What Python will do, is it will
evaluate that expression</text_slice>
            </slice>
            <slice>
              <time_slice>16:41</time_slice>
              <text_slice>using the kinds of rules we
talked about, and then it</text_slice>
            </slice>
            <slice>
              <time_slice>16:43</time_slice>
              <text_slice>creates a binding for
x to that value.</text_slice>
            </slice>
            <slice>
              <time_slice>16:45</time_slice>
              <text_slice>And I want to stress this, we're
going to come back to it</text_slice>
            </slice>
            <slice>
              <time_slice>16:47</time_slice>
              <text_slice>later on in the term, so the
way I'd like you to think</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>about it for now, is that
somewhere in the machine,</text_slice>
            </slice>
            <slice>
              <time_slice>16:53</time_slice>
              <text_slice>there's a big space that
contains all possible values.</text_slice>
            </slice>
            <slice>
              <time_slice>16:57</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>16:57</time_slice>
              <text_slice>It's a slight lie, it doesn't
have all possible values, but</text_slice>
            </slice>
            <slice>
              <time_slice>16:59</time_slice>
              <text_slice>you get the idea.</text_slice>
            </slice>
            <slice>
              <time_slice>17:00</time_slice>
              <text_slice>It has, if you like,
intellectually,</text_slice>
            </slice>
            <slice>
              <time_slice>17:01</time_slice>
              <text_slice>all possible values.</text_slice>
            </slice>
            <slice>
              <time_slice>17:03</time_slice>
              <text_slice>And when I create a binding, I'm
taking a variable name, in</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>this case x, stored somewhere in
a table, and I'm creating a</text_slice>
            </slice>
            <slice>
              <time_slice>17:11</time_slice>
              <text_slice>link or a pointer from that
name to that value.</text_slice>
            </slice>
            <slice>
              <time_slice>17:20</time_slice>
              <text_slice>This is a nuance.</text_slice>
            </slice>
            <slice>
              <time_slice>17:21</time_slice>
              <text_slice>It's going to make a lot more
sense later on when we</text_slice>
            </slice>
            <slice>
              <time_slice>17:23</time_slice>
              <text_slice>introduce mutation into our
language, but I want you to</text_slice>
            </slice>
            <slice>
              <time_slice>17:26</time_slice>
              <text_slice>start thinking of it that way.</text_slice>
            </slice>
            <slice>
              <time_slice>17:26</time_slice>
              <text_slice>Don't think of it as a specific
box into which we're</text_slice>
            </slice>
            <slice>
              <time_slice>17:29</time_slice>
              <text_slice>putting things; think of it
as a link to a value.</text_slice>
            </slice>
            <slice>
              <time_slice>17:32</time_slice>
              <text_slice>I could have, for example,
another assignment statement,</text_slice>
            </slice>
            <slice>
              <time_slice>17:37</time_slice>
              <text_slice>and that creates a binding from
y into that same value,</text_slice>
            </slice>
            <slice>
              <time_slice>17:45</time_slice>
              <text_slice>and one of the things as a
conservist I can do is, I</text_slice>
            </slice>
            <slice>
              <time_slice>17:47</time_slice>
              <text_slice>could have a statement like,
let z be bound to</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>the value of x.</text_slice>
            </slice>
            <slice>
              <time_slice>17:54</time_slice>
              <text_slice>And I said it deliberately
that way.</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>That statement says, get the
value of x, which is this</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>link, and give z a pointer
to the same place.</text_slice>
            </slice>
            <slice>
              <time_slice>18:05</time_slice>
              <text_slice>To the value, not to x.</text_slice>
            </slice>
            <slice>
              <time_slice>18:08</time_slice>
              <text_slice>OK, and we'll just plant that
idea, we're going to come back</text_slice>
            </slice>
            <slice>
              <time_slice>18:10</time_slice>
              <text_slice>to later on, as we carry on.</text_slice>
            </slice>
            <slice>
              <time_slice>18:13</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>18:14</time_slice>
              <text_slice>So if we have variables, one
of the questions we can ask</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>is, what's the type
of the variable.</text_slice>
            </slice>
            <slice>
              <time_slice>18:25</time_slice>
              <text_slice>And the answer is, it inherits
it from its value.</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>18:30</time_slice>
              <text_slice>Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>18:35</time_slice>
              <text_slice>So if somewhere in my code, I
have that statement, that</text_slice>
            </slice>
            <slice>
              <time_slice>18:39</time_slice>
              <text_slice>assignment statement,
x now is a variable</text_slice>
            </slice>
            <slice>
              <time_slice>18:41</time_slice>
              <text_slice>whose value is an integer.</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>Unfortunately, at least in
my mind, in Python, these</text_slice>
            </slice>
            <slice>
              <time_slice>18:47</time_slice>
              <text_slice>variable bindings are
dynamic, or the</text_slice>
            </slice>
            <slice>
              <time_slice>18:51</time_slice>
              <text_slice>type, rather, is dynamic.</text_slice>
            </slice>
            <slice>
              <time_slice>18:55</time_slice>
              <text_slice>Meaning, it changes depending on
what the current value is.</text_slice>
            </slice>
            <slice>
              <time_slice>19:00</time_slice>
              <text_slice>Or said a different way, if
somewhere later on in the</text_slice>
            </slice>
            <slice>
              <time_slice>19:03</time_slice>
              <text_slice>program I do this, x
now has changed its</text_slice>
            </slice>
            <slice>
              <time_slice>19:10</time_slice>
              <text_slice>type from INT to string.</text_slice>
            </slice>
            <slice>
              <time_slice>19:14</time_slice>
              <text_slice>Now why should you care?</text_slice>
            </slice>
            <slice>
              <time_slice>19:16</time_slice>
              <text_slice>OK, my view is, I
don't like it.</text_slice>
            </slice>
            <slice>
              <time_slice>19:21</time_slice>
              <text_slice>Especially in the presence
of operator overload.</text_slice>
            </slice>
            <slice>
              <time_slice>19:24</time_slice>
              <text_slice>Because I might have written
some code in which I'm</text_slice>
            </slice>
            <slice>
              <time_slice>19:26</time_slice>
              <text_slice>expecting that particular
variable to</text_slice>
            </slice>
            <slice>
              <time_slice>19:28</time_slice>
              <text_slice>have an integer value.</text_slice>
            </slice>
            <slice>
              <time_slice>19:29</time_slice>
              <text_slice>If somewhere later on in the
code it shifts to string, I</text_slice>
            </slice>
            <slice>
              <time_slice>19:32</time_slice>
              <text_slice>might not be manipulating that
and getting actual values out,</text_slice>
            </slice>
            <slice>
              <time_slice>19:35</time_slice>
              <text_slice>but not what I wanted, and it's
going to be really hard</text_slice>
            </slice>
            <slice>
              <time_slice>19:37</time_slice>
              <text_slice>for me to chase it back.</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>So one of the things I would
like to suggest is that you</text_slice>
            </slice>
            <slice>
              <time_slice>19:41</time_slice>
              <text_slice>develop some good style here,
and in particular, don't</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>change types arbitrarily.</text_slice>
            </slice>
            <slice>
              <time_slice>19:52</time_slice>
              <text_slice>I can't spell today.</text_slice>
            </slice>
            <slice>
              <time_slice>19:59</time_slice>
              <text_slice>Meaning, sometimes you need
to do this, but in general</text_slice>
            </slice>
            <slice>
              <time_slice>20:01</time_slice>
              <text_slice>there's-- at least in my view
and I don't, John, would you</text_slice>
            </slice>
            <slice>
              <time_slice>20:03</time_slice>
              <text_slice>agree?-- you just don't
want to do this.</text_slice>
            </slice>
            <slice>
              <time_slice>20:04</time_slice>
              <text_slice>You don't want to make
those changes.</text_slice>
            </slice>
            <slice>
              <time_slice>20:05</time_slice>
              <text_slice>It just leads to trouble
down the road.</text_slice>
            </slice>
            <slice>
              <time_slice>20:08</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>20:10</time_slice>
              <text_slice>Now, last thing about variables,
and then we're</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>going to start pushing
on this, is</text_slice>
            </slice>
            <slice>
              <time_slice>20:13</time_slice>
              <text_slice>where can you use them?</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>And the answer is, you can use
a variable anywhere you can</text_slice>
            </slice>
            <slice>
              <time_slice>20:19</time_slice>
              <text_slice>use the value.</text_slice>
            </slice>
            <slice>
              <time_slice>20:20</time_slice>
              <text_slice>So, any place it's legal
to use the value.</text_slice>
            </slice>
            <slice>
              <time_slice>20:32</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>20:35</time_slice>
              <text_slice>Now.</text_slice>
            </slice>
            <slice>
              <time_slice>20:36</time_slice>
              <text_slice>This is just sort of bringing us
back up to speed and adding</text_slice>
            </slice>
            <slice>
              <time_slice>20:39</time_slice>
              <text_slice>a few more details in.</text_slice>
            </slice>
            <slice>
              <time_slice>20:40</time_slice>
              <text_slice>What we really want to
do now though is</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>start using this stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>20:44</time_slice>
              <text_slice>So, operands.</text_slice>
            </slice>
            <slice>
              <time_slice>20:46</time_slice>
              <text_slice>Let us take expressions, get
values out, we can store them</text_slice>
            </slice>
            <slice>
              <time_slice>20:49</time_slice>
              <text_slice>away in places, but ultimately
we want to do something with</text_slice>
            </slice>
            <slice>
              <time_slice>20:52</time_slice>
              <text_slice>them, so we need to now start
talking about what are the</text_slice>
            </slice>
            <slice>
              <time_slice>20:54</time_slice>
              <text_slice>things we can do inside of
Python, or any programming</text_slice>
            </slice>
            <slice>
              <time_slice>20:56</time_slice>
              <text_slice>language, to manipulate them.</text_slice>
            </slice>
            <slice>
              <time_slice>20:58</time_slice>
              <text_slice>And for that, we're going
to have statements.</text_slice>
            </slice>
            <slice>
              <time_slice>21:08</time_slice>
              <text_slice>Statements are basically, if
you want to think about it,</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>legal, and I was about to use
the word expression except</text_slice>
            </slice>
            <slice>
              <time_slice>21:15</time_slice>
              <text_slice>I've misused that elsewhere, so
legal commands that Python</text_slice>
            </slice>
            <slice>
              <time_slice>21:24</time_slice>
              <text_slice>can interpret.</text_slice>
            </slice>
            <slice>
              <time_slice>21:30</time_slice>
              <text_slice>You've already seen
a couple of them.</text_slice>
            </slice>
            <slice>
              <time_slice>21:32</time_slice>
              <text_slice>Print, assignment, certainly
two obvious statements,</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>they're commands to
do something.</text_slice>
            </slice>
            <slice>
              <time_slice>21:41</time_slice>
              <text_slice>Assignment is binding a name
to a value, print is saying</text_slice>
            </slice>
            <slice>
              <time_slice>21:43</time_slice>
              <text_slice>put it back out in the screen.</text_slice>
            </slice>
            <slice>
              <time_slice>21:45</time_slice>
              <text_slice>Obviously if you have print as
a way of putting things out,</text_slice>
            </slice>
            <slice>
              <time_slice>21:47</time_slice>
              <text_slice>we expect to have ways of
getting input in, we're going</text_slice>
            </slice>
            <slice>
              <time_slice>21:48</time_slice>
              <text_slice>to see an example that
in the second.</text_slice>
            </slice>
            <slice>
              <time_slice>21:50</time_slice>
              <text_slice>And as we go through the next
few lectures, we're going to</text_slice>
            </slice>
            <slice>
              <time_slice>21:52</time_slice>
              <text_slice>add in more and more of
these statements.</text_slice>
            </slice>
            <slice>
              <time_slice>21:54</time_slice>
              <text_slice>But let's look at what we
could do with this, OK?</text_slice>
            </slice>
            <slice>
              <time_slice>21:56</time_slice>
              <text_slice>And to do this, I'm going to
use some code that I've</text_slice>
            </slice>
            <slice>
              <time_slice>21:59</time_slice>
              <text_slice>already typed in.</text_slice>
            </slice>
            <slice>
              <time_slice>22:00</time_slice>
              <text_slice>So I'm hoping you can
read that, and it's</text_slice>
            </slice>
            <slice>
              <time_slice>22:01</time_slice>
              <text_slice>also in your handout.</text_slice>
            </slice>
            <slice>
              <time_slice>22:03</time_slice>
              <text_slice>This is a little file I created,
all right, and I'm</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>going to start with a sequence
of these things and walk them</text_slice>
            </slice>
            <slice>
              <time_slice>22:09</time_slice>
              <text_slice>along, again I invite you to put
comments on that handout</text_slice>
            </slice>
            <slice>
              <time_slice>22:12</time_slice>
              <text_slice>so that you can follow what
we're going to do.</text_slice>
            </slice>
            <slice>
              <time_slice>22:14</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>22:15</time_slice>
              <text_slice>So let's look at the
first part of this.</text_slice>
            </slice>
            <slice>
              <time_slice>22:16</time_slice>
              <text_slice>Right now, this is
just a text file.</text_slice>
            </slice>
            <slice>
              <time_slice>22:19</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>22:19</time_slice>
              <text_slice>And I've highlighted in blue up
there one of the pieces I'm</text_slice>
            </slice>
            <slice>
              <time_slice>22:21</time_slice>
              <text_slice>going to start with.</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>And what do I have?</text_slice>
            </slice>
            <slice>
              <time_slice>22:23</time_slice>
              <text_slice>I have a sequence of commands;
I've got an assignment</text_slice>
            </slice>
            <slice>
              <time_slice>22:25</time_slice>
              <text_slice>statement, I've got another
assignment statement, I've got</text_slice>
            </slice>
            <slice>
              <time_slice>22:27</time_slice>
              <text_slice>a print statement, I've got an
input statement, which we'll</text_slice>
            </slice>
            <slice>
              <time_slice>22:29</time_slice>
              <text_slice>come back to in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>22:31</time_slice>
              <text_slice>And I want to basically try
and use these things to do</text_slice>
            </slice>
            <slice>
              <time_slice>22:34</time_slice>
              <text_slice>something with them.</text_slice>
            </slice>
            <slice>
              <time_slice>22:35</time_slice>
              <text_slice>Second thing I want to note is,
the little hash mark or</text_slice>
            </slice>
            <slice>
              <time_slice>22:38</time_slice>
              <text_slice>the pound sign, that's
identifying a comment.</text_slice>
            </slice>
            <slice>
              <time_slice>22:41</time_slice>
              <text_slice>So what's a comment?</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>It's words to you, or to the
reader of the code, that are</text_slice>
            </slice>
            <slice>
              <time_slice>22:46</time_slice>
              <text_slice>telling you what's going
on inside of this code.</text_slice>
            </slice>
            <slice>
              <time_slice>22:47</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>22:49</time_slice>
              <text_slice>Now, these comments, frankly,
are brain-damaged, or</text_slice>
            </slice>
            <slice>
              <time_slice>22:54</time_slice>
              <text_slice>computationally challenged
if you prefer.</text_slice>
            </slice>
            <slice>
              <time_slice>22:57</time_slice>
              <text_slice>Meaning, why in the world do I
have to tell the reader that</text_slice>
            </slice>
            <slice>
              <time_slice>23:00</time_slice>
              <text_slice>I'm binding x to the
value three?</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>I'm putting them in there
to make a point.</text_slice>
            </slice>
            <slice>
              <time_slice>23:04</time_slice>
              <text_slice>In general, good programming
style says you put in comments</text_slice>
            </slice>
            <slice>
              <time_slice>23:08</time_slice>
              <text_slice>that are going to be valuable
in helping you as a reader</text_slice>
            </slice>
            <slice>
              <time_slice>23:11</time_slice>
              <text_slice>understand what's going
on inside of the code.</text_slice>
            </slice>
            <slice>
              <time_slice>23:14</time_slice>
              <text_slice>It could be, what's the
intuition behind</text_slice>
            </slice>
            <slice>
              <time_slice>23:16</time_slice>
              <text_slice>this piece of code.</text_slice>
            </slice>
            <slice>
              <time_slice>23:17</time_slice>
              <text_slice>It could be, preconditions
I want to have on input.</text_slice>
            </slice>
            <slice>
              <time_slice>23:19</time_slice>
              <text_slice>It could be, explanations of
specific things you're doing.</text_slice>
            </slice>
            <slice>
              <time_slice>23:22</time_slice>
              <text_slice>But you need to have those
comments there.</text_slice>
            </slice>
            <slice>
              <time_slice>23:25</time_slice>
              <text_slice>Now, this becomes a little bit
of one of those motherhood and</text_slice>
            </slice>
            <slice>
              <time_slice>23:27</time_slice>
              <text_slice>apple pie kinds of lectures.</text_slice>
            </slice>
            <slice>
              <time_slice>23:28</time_slice>
              <text_slice>You know, your mother always
told you to eat brussels</text_slice>
            </slice>
            <slice>
              <time_slice>23:30</time_slice>
              <text_slice>sprouts because it
was good for you.</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>Well this is a brussels sprouts
comment. everybody</text_slice>
            </slice>
            <slice>
              <time_slice>23:34</time_slice>
              <text_slice>goes yeah, yeah, yeah,
comments, of course.</text_slice>
            </slice>
            <slice>
              <time_slice>23:35</time_slice>
              <text_slice>Of course we're going
to do comments.</text_slice>
            </slice>
            <slice>
              <time_slice>23:36</time_slice>
              <text_slice>And they never do.</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>So my challenge to you, and I
know Professor Guttag can do</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>this, my challenge to you is, a
year from now, come back and</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>look at code you wrote here.</text_slice>
            </slice>
            <slice>
              <time_slice>23:46</time_slice>
              <text_slice>Can you still understand what it
was you were trying to do?</text_slice>
            </slice>
            <slice>
              <time_slice>23:50</time_slice>
              <text_slice>I don't know, John, if
you'd agree, right?</text_slice>
            </slice>
            <slice>
              <time_slice>23:52</time_slice>
              <text_slice>If you can read the code a
year later, even code you</text_slice>
            </slice>
            <slice>
              <time_slice>23:54</time_slice>
              <text_slice>wrote yourself, it's a good
sign that you put good</text_slice>
            </slice>
            <slice>
              <time_slice>23:56</time_slice>
              <text_slice>comments in, right?</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>Second good piece
of style here is</text_slice>
            </slice>
            <slice>
              <time_slice>24:01</time_slice>
              <text_slice>choice of variable names.</text_slice>
            </slice>
            <slice>
              <time_slice>24:03</time_slice>
              <text_slice>These are lousy.</text_slice>
            </slice>
            <slice>
              <time_slice>24:05</time_slice>
              <text_slice>Deliberately.</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>I'm just using simple things
like x and y and z because I</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>want to make it, just
get through the</text_slice>
            </slice>
            <slice>
              <time_slice>24:10</time_slice>
              <text_slice>lecture if you like.</text_slice>
            </slice>
            <slice>
              <time_slice>24:11</time_slice>
              <text_slice>But in general, the choice of
variable name is a great way</text_slice>
            </slice>
            <slice>
              <time_slice>24:14</time_slice>
              <text_slice>of commenting your code.</text_slice>
            </slice>
            <slice>
              <time_slice>24:15</time_slice>
              <text_slice>Use variable names
that make sense.</text_slice>
            </slice>
            <slice>
              <time_slice>24:19</time_slice>
              <text_slice>That little problem set
zero that you did.</text_slice>
            </slice>
            <slice>
              <time_slice>24:21</time_slice>
              <text_slice>You read in a couple
of values, you</text_slice>
            </slice>
            <slice>
              <time_slice>24:22</time_slice>
              <text_slice>probably stored them away.</text_slice>
            </slice>
            <slice>
              <time_slice>24:23</time_slice>
              <text_slice>My bet is, you used simple
names like x and y.</text_slice>
            </slice>
            <slice>
              <time_slice>24:27</time_slice>
              <text_slice>A much better name would have
been firstname, lastname, as</text_slice>
            </slice>
            <slice>
              <time_slice>24:29</time_slice>
              <text_slice>the name of the variable to tell
you what you were trying</text_slice>
            </slice>
            <slice>
              <time_slice>24:31</time_slice>
              <text_slice>to capture there.</text_slice>
            </slice>
            <slice>
              <time_slice>24:33</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>24:34</time_slice>
              <text_slice>The other piece I want to say
about variable names is, once</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>I have that choice of variable
name, I can use it, but in</text_slice>
            </slice>
            <slice>
              <time_slice>24:41</time_slice>
              <text_slice>fact there are a few things that
I can't use in terms of</text_slice>
            </slice>
            <slice>
              <time_slice>24:44</time_slice>
              <text_slice>variable names.</text_slice>
            </slice>
            <slice>
              <time_slice>24:45</time_slice>
              <text_slice>So, these are an important way
of documenting, but there're</text_slice>
            </slice>
            <slice>
              <time_slice>24:58</time_slice>
              <text_slice>some things excluded.</text_slice>
            </slice>
            <slice>
              <time_slice>24:59</time_slice>
              <text_slice>And in particular, there are
some key words that Python is</text_slice>
            </slice>
            <slice>
              <time_slice>25:04</time_slice>
              <text_slice>going to use that have
to be excluded.</text_slice>
            </slice>
            <slice>
              <time_slice>25:07</time_slice>
              <text_slice>Let me highlight that.</text_slice>
            </slice>
            <slice>
              <time_slice>25:09</time_slice>
              <text_slice>As I said, right now that's
just text file.</text_slice>
            </slice>
            <slice>
              <time_slice>25:10</time_slice>
              <text_slice>I'm going to save this away--
yeah, not that way, I'm going</text_slice>
            </slice>
            <slice>
              <time_slice>25:15</time_slice>
              <text_slice>to save this away-- with the
subscript, or the suffix</text_slice>
            </slice>
            <slice>
              <time_slice>25:22</time_slice>
              <text_slice>rather, py to make
it a Python file.</text_slice>
            </slice>
            <slice>
              <time_slice>25:25</time_slice>
              <text_slice>Yeah, and I know it's already
there but I'm going to do it,</text_slice>
            </slice>
            <slice>
              <time_slice>25:28</time_slice>
              <text_slice>and I get some wonderful
colors.</text_slice>
            </slice>
            <slice>
              <time_slice>25:30</time_slice>
              <text_slice>But these are important, OK?</text_slice>
            </slice>
            <slice>
              <time_slice>25:33</time_slice>
              <text_slice>So notice what I have
up there now.</text_slice>
            </slice>
            <slice>
              <time_slice>25:34</time_slice>
              <text_slice>Comments appear in red.</text_slice>
            </slice>
            <slice>
              <time_slice>25:35</time_slice>
              <text_slice>I can see those.</text_slice>
            </slice>
            <slice>
              <time_slice>25:37</time_slice>
              <text_slice>There's a keyword, which I'm
going to highlight right up</text_slice>
            </slice>
            <slice>
              <time_slice>25:39</time_slice>
              <text_slice>here, print, which is in,
I don't know what</text_slice>
            </slice>
            <slice>
              <time_slice>25:41</time_slice>
              <text_slice>that color is, orange?</text_slice>
            </slice>
            <slice>
              <time_slice>25:44</time_slice>
              <text_slice>There's a function in purple,
there's a string in green, and</text_slice>
            </slice>
            <slice>
              <time_slice>25:48</time_slice>
              <text_slice>in black I have the assignment
statements.</text_slice>
            </slice>
            <slice>
              <time_slice>25:51</time_slice>
              <text_slice>That print is a keyword.</text_slice>
            </slice>
            <slice>
              <time_slice>25:53</time_slice>
              <text_slice>It's a command to Python
to do something.</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>As a consequence, I can't use
it as a variable name.</text_slice>
            </slice>
            <slice>
              <time_slice>26:00</time_slice>
              <text_slice>All right, think about
it for a second.</text_slice>
            </slice>
            <slice>
              <time_slice>26:01</time_slice>
              <text_slice>If I wanted to use print as a
variable name, how do I get</text_slice>
            </slice>
            <slice>
              <time_slice>26:04</time_slice>
              <text_slice>the system to decide gee, do
I want print as a value for</text_slice>
            </slice>
            <slice>
              <time_slice>26:08</time_slice>
              <text_slice>something, or do I want
print as a command?</text_slice>
            </slice>
            <slice>
              <time_slice>26:11</time_slice>
              <text_slice>So there's a sequence of these
that are blocked out, and I--</text_slice>
            </slice>
            <slice>
              <time_slice>26:13</time_slice>
              <text_slice>John, I think there are
what, twenty-eight?</text_slice>
            </slice>
            <slice>
              <time_slice>26:16</time_slice>
              <text_slice>Something like that,
TAs, is that right?</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>Twenty-eight keywords
that are blocked?</text_slice>
            </slice>
            <slice>
              <time_slice>26:20</time_slice>
              <text_slice>We'll find them as
we go along--</text_slice>
            </slice>
            <slice>
              <time_slice>26:23</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>26:24</time_slice>
              <text_slice>Having done this now, I can
simply go ahead and run this,</text_slice>
            </slice>
            <slice>
              <time_slice>26:26</time_slice>
              <text_slice>and in fact if I go up here to
run, you'll see I've got both</text_slice>
            </slice>
            <slice>
              <time_slice>26:29</time_slice>
              <text_slice>an option to check the module,
though in this case I'm just</text_slice>
            </slice>
            <slice>
              <time_slice>26:31</time_slice>
              <text_slice>going to run it.</text_slice>
            </slice>
            <slice>
              <time_slice>26:33</time_slice>
              <text_slice>Oh, notice what happened.</text_slice>
            </slice>
            <slice>
              <time_slice>26:35</time_slice>
              <text_slice>It ran through that sequence of
instructions, in particular</text_slice>
            </slice>
            <slice>
              <time_slice>26:37</time_slice>
              <text_slice>it bound x to the value three,
and then it took x times x,</text_slice>
            </slice>
            <slice>
              <time_slice>26:41</time_slice>
              <text_slice>got the value of x multipied by
x, which of course is nine,</text_slice>
            </slice>
            <slice>
              <time_slice>26:43</time_slice>
              <text_slice>bound that to the value of x,
and then it printed out the</text_slice>
            </slice>
            <slice>
              <time_slice>26:46</time_slice>
              <text_slice>value, and now it's sitting
here waiting for an input.</text_slice>
            </slice>
            <slice>
              <time_slice>26:49</time_slice>
              <text_slice>You notice what it did, it
printed out that little, right</text_slice>
            </slice>
            <slice>
              <time_slice>26:52</time_slice>
              <text_slice>up here I'd said enter a number
and that's what it's</text_slice>
            </slice>
            <slice>
              <time_slice>26:53</time_slice>
              <text_slice>printed out, so I can enter a
number and it prints it out.</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>Great.</text_slice>
            </slice>
            <slice>
              <time_slice>27:00</time_slice>
              <text_slice>Let's run it again.</text_slice>
            </slice>
            <slice>
              <time_slice>27:01</time_slice>
              <text_slice>Actually for that, I can just
use, if I'm lucky, function</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>F5, which didn't work, so let me
try it again., here we go.</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>We're going to run that module.</text_slice>
            </slice>
            <slice>
              <time_slice>27:11</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>Whoa.</text_slice>
            </slice>
            <slice>
              <time_slice>27:17</time_slice>
              <text_slice>What happened?</text_slice>
            </slice>
            <slice>
              <time_slice>27:20</time_slice>
              <text_slice>I said enter a number.</text_slice>
            </slice>
            <slice>
              <time_slice>27:20</time_slice>
              <text_slice>I didn't.</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>I gave it a string.</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>And it still took it.</text_slice>
            </slice>
            <slice>
              <time_slice>27:23</time_slice>
              <text_slice>And printed it up.</text_slice>
            </slice>
            <slice>
              <time_slice>27:25</time_slice>
              <text_slice>Well, this is one of the places
where I want to come</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>back to that highlighting
of what do things do?</text_slice>
            </slice>
            <slice>
              <time_slice>27:29</time_slice>
              <text_slice>Even though my statement said
enter a number, in particular,</text_slice>
            </slice>
            <slice>
              <time_slice>27:33</time_slice>
              <text_slice>raw input here simply takes in a
set of characters and treats</text_slice>
            </slice>
            <slice>
              <time_slice>27:37</time_slice>
              <text_slice>it as a string.</text_slice>
            </slice>
            <slice>
              <time_slice>27:38</time_slice>
              <text_slice>And then prints it back out.</text_slice>
            </slice>
            <slice>
              <time_slice>27:39</time_slice>
              <text_slice>So if in fact I wanted to make
sure this was a number, I</text_slice>
            </slice>
            <slice>
              <time_slice>27:42</time_slice>
              <text_slice>should have done something like
either try and convert it</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>to a number, which of course
failed here, or put in a check</text_slice>
            </slice>
            <slice>
              <time_slice>27:47</time_slice>
              <text_slice>to say where it is.</text_slice>
            </slice>
            <slice>
              <time_slice>27:48</time_slice>
              <text_slice>So it's a way of reminding you,
I've got to be careful</text_slice>
            </slice>
            <slice>
              <time_slice>27:50</time_slice>
              <text_slice>about the types of things
that I put in.</text_slice>
            </slice>
            <slice>
              <time_slice>27:53</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>27:56</time_slice>
              <text_slice>This is still boring, so let's
step on the accelerator.</text_slice>
            </slice>
            <slice>
              <time_slice>28:01</time_slice>
              <text_slice>What I have now is the
following: I can write</text_slice>
            </slice>
            <slice>
              <time_slice>28:04</time_slice>
              <text_slice>expressions, do combinations of
things to get out values, I</text_slice>
            </slice>
            <slice>
              <time_slice>28:07</time_slice>
              <text_slice>can store them away, I
can print them up.</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>But literally all I can do at
this stage is write what we</text_slice>
            </slice>
            <slice>
              <time_slice>28:13</time_slice>
              <text_slice>would call a straight-line
program, that is, a program in</text_slice>
            </slice>
            <slice>
              <time_slice>28:18</time_slice>
              <text_slice>which we execute in which we
execute the sequence of</text_slice>
            </slice>
            <slice>
              <time_slice>28:28</time_slice>
              <text_slice>instructions one by one.</text_slice>
            </slice>
            <slice>
              <time_slice>28:31</time_slice>
              <text_slice>Simply walk down that
list. That's what we</text_slice>
            </slice>
            <slice>
              <time_slice>28:34</time_slice>
              <text_slice>just did there, right?</text_slice>
            </slice>
            <slice>
              <time_slice>28:34</time_slice>
              <text_slice>We just walked through that
list. This is boring.</text_slice>
            </slice>
            <slice>
              <time_slice>28:36</time_slice>
              <text_slice>In fact, you can do some nice
things to prove what is the</text_slice>
            </slice>
            <slice>
              <time_slice>28:39</time_slice>
              <text_slice>class of functions you can
compute with straight-line</text_slice>
            </slice>
            <slice>
              <time_slice>28:42</time_slice>
              <text_slice>programs, and what you'd see if
you did that is, it's not</text_slice>
            </slice>
            <slice>
              <time_slice>28:44</time_slice>
              <text_slice>particularly interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>28:46</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>28:48</time_slice>
              <text_slice>Let's go back and think
about our recipes.</text_slice>
            </slice>
            <slice>
              <time_slice>28:49</time_slice>
              <text_slice>What we use as our
motivation here.</text_slice>
            </slice>
            <slice>
              <time_slice>28:52</time_slice>
              <text_slice>Even in real recipes, you
have things like,</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>if needed, add sugar.</text_slice>
            </slice>
            <slice>
              <time_slice>28:59</time_slice>
              <text_slice>That's a decision.</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>That's a conditional.</text_slice>
            </slice>
            <slice>
              <time_slice>29:01</time_slice>
              <text_slice>That's a branch.</text_slice>
            </slice>
            <slice>
              <time_slice>29:02</time_slice>
              <text_slice>That says, if something
is true, do something.</text_slice>
            </slice>
            <slice>
              <time_slice>29:04</time_slice>
              <text_slice>Otherwise, do something
different.</text_slice>
            </slice>
            <slice>
              <time_slice>29:06</time_slice>
              <text_slice>So to really add to this, we
need to have branching</text_slice>
            </slice>
            <slice>
              <time_slice>29:09</time_slice>
              <text_slice>programs. What I mean by that
is, a branching program is</text_slice>
            </slice>
            <slice>
              <time_slice>29:19</time_slice>
              <text_slice>something that can change the
order of instructions based on</text_slice>
            </slice>
            <slice>
              <time_slice>29:32</time_slice>
              <text_slice>some test. And that test is
usually a value of a variable.</text_slice>
            </slice>
            <slice>
              <time_slice>29:46</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>29:47</time_slice>
              <text_slice>And these get a whole lot
more interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>So let's look at a little
example, and this is going to,</text_slice>
            </slice>
            <slice>
              <time_slice>29:52</time_slice>
              <text_slice>excuse me, both allow us
introduce the syntax as well</text_slice>
            </slice>
            <slice>
              <time_slice>29:54</time_slice>
              <text_slice>as what we want to have
as the flow of</text_slice>
            </slice>
            <slice>
              <time_slice>29:56</time_slice>
              <text_slice>control inside of here.</text_slice>
            </slice>
            <slice>
              <time_slice>29:57</time_slice>
              <text_slice>So let me go back up here, and
I'm going to comment out that</text_slice>
            </slice>
            <slice>
              <time_slice>30:02</time_slice>
              <text_slice>region, and let's uncomment
this region.</text_slice>
            </slice>
            <slice>
              <time_slice>30:10</time_slice>
              <text_slice>I want to write a little
piece of code.</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>It's going to print out even or
odd, depending on whether</text_slice>
            </slice>
            <slice>
              <time_slice>30:14</time_slice>
              <text_slice>the value I put in, which is x
in this case, is even or odd.</text_slice>
            </slice>
            <slice>
              <time_slice>30:19</time_slice>
              <text_slice>Think about that.</text_slice>
            </slice>
            <slice>
              <time_slice>30:20</time_slice>
              <text_slice>That says, if this thing has
some particular value, I want</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>to do one thing; otherwise,
I want to</text_slice>
            </slice>
            <slice>
              <time_slice>30:26</time_slice>
              <text_slice>do something different.</text_slice>
            </slice>
            <slice>
              <time_slice>30:28</time_slice>
              <text_slice>And let's look at the
syntax of this.</text_slice>
            </slice>
            <slice>
              <time_slice>30:29</time_slice>
              <text_slice>This is the first of the
conditionals that</text_slice>
            </slice>
            <slice>
              <time_slice>30:31</time_slice>
              <text_slice>we're going to see.</text_slice>
            </slice>
            <slice>
              <time_slice>30:36</time_slice>
              <text_slice>Notice the format.</text_slice>
            </slice>
            <slice>
              <time_slice>30:38</time_slice>
              <text_slice>I'm going to go up there.</text_slice>
            </slice>
            <slice>
              <time_slice>30:39</time_slice>
              <text_slice>The first statement right
here, that's just an</text_slice>
            </slice>
            <slice>
              <time_slice>30:41</time_slice>
              <text_slice>assignment statement, I'm
giving some value to x.</text_slice>
            </slice>
            <slice>
              <time_slice>30:43</time_slice>
              <text_slice>We could make it something
different.</text_slice>
            </slice>
            <slice>
              <time_slice>30:45</time_slice>
              <text_slice>And then, notice the
structure here.</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>The next three statements.</text_slice>
            </slice>
            <slice>
              <time_slice>30:48</time_slice>
              <text_slice>First of all, IF is a keyword.
which makes sense.</text_slice>
            </slice>
            <slice>
              <time_slice>30:50</time_slice>
              <text_slice>It is followed, as you can see
there, by some expression,</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>followed by a colon.</text_slice>
            </slice>
            <slice>
              <time_slice>30:56</time_slice>
              <text_slice>And in fact, that colon is
important, so let me stress</text_slice>
            </slice>
            <slice>
              <time_slice>30:59</time_slice>
              <text_slice>this over here.</text_slice>
            </slice>
            <slice>
              <time_slice>31:00</time_slice>
              <text_slice>The colon is important It's
defining the beginning of a</text_slice>
            </slice>
            <slice>
              <time_slice>31:11</time_slice>
              <text_slice>block of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>31:12</time_slice>
              <text_slice>Yes sir.</text_slice>
            </slice>
            <slice>
              <time_slice>31:13</time_slice>
              <text_slice>STUDENT: [UNINTELLIGIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>31:17</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: Based on
a test. Usually the value</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>of a variable.</text_slice>
            </slice>
            <slice>
              <time_slice>31:21</time_slice>
              <text_slice>OK, so let me go back
to where I am.</text_slice>
            </slice>
            <slice>
              <time_slice>31:22</time_slice>
              <text_slice>I'm looking at that
piece of code.</text_slice>
            </slice>
            <slice>
              <time_slice>31:23</time_slice>
              <text_slice>What that colon is saying is,
I'm about to begin a sequence</text_slice>
            </slice>
            <slice>
              <time_slice>31:27</time_slice>
              <text_slice>of instructions that I want
to treat as a block.</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>So it identifies a block
of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>31:38</time_slice>
              <text_slice>It's, and in particular, the
colon is the start, and the</text_slice>
            </slice>
            <slice>
              <time_slice>31:43</time_slice>
              <text_slice>carriage return is the end.</text_slice>
            </slice>
            <slice>
              <time_slice>31:48</time_slice>
              <text_slice>Now what in the world
does that mean?</text_slice>
            </slice>
            <slice>
              <time_slice>31:49</time_slice>
              <text_slice>I'm doing a lot of words here,
let me try and say this a</text_slice>
            </slice>
            <slice>
              <time_slice>31:50</time_slice>
              <text_slice>little bit better.</text_slice>
            </slice>
            <slice>
              <time_slice>31:51</time_slice>
              <text_slice>That code says the following:
the IF says, I've got an</text_slice>
            </slice>
            <slice>
              <time_slice>31:54</time_slice>
              <text_slice>expression, I'm going
to evaluate it.</text_slice>
            </slice>
            <slice>
              <time_slice>31:56</time_slice>
              <text_slice>If that value is true, I want
to do a set of things.</text_slice>
            </slice>
            <slice>
              <time_slice>32:01</time_slice>
              <text_slice>And that set of things is
identified by the sequence of</text_slice>
            </slice>
            <slice>
              <time_slice>32:04</time_slice>
              <text_slice>commands that are indented in,
this one right here, following</text_slice>
            </slice>
            <slice>
              <time_slice>32:09</time_slice>
              <text_slice>the colon but before I get
back to the same place in</text_slice>
            </slice>
            <slice>
              <time_slice>32:12</time_slice>
              <text_slice>terms of the indentation.</text_slice>
            </slice>
            <slice>
              <time_slice>32:14</time_slice>
              <text_slice>If that test is not true, I want
to skip this instruction,</text_slice>
            </slice>
            <slice>
              <time_slice>32:19</time_slice>
              <text_slice>and there's a second keyword
else, followed by a colon, and</text_slice>
            </slice>
            <slice>
              <time_slice>32:23</time_slice>
              <text_slice>that tells me the thing
I want to do in the</text_slice>
            </slice>
            <slice>
              <time_slice>32:24</time_slice>
              <text_slice>case that it's false.</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>So in fact if I run this,
ah, and save it, and</text_slice>
            </slice>
            <slice>
              <time_slice>32:36</time_slice>
              <text_slice>it prints out odd.</text_slice>
            </slice>
            <slice>
              <time_slice>32:37</time_slice>
              <text_slice>So, what happened here?</text_slice>
            </slice>
            <slice>
              <time_slice>32:39</time_slice>
              <text_slice>Well, let's look at the code.</text_slice>
            </slice>
            <slice>
              <time_slice>32:41</time_slice>
              <text_slice>Right? x is initially
bound to fifteen.</text_slice>
            </slice>
            <slice>
              <time_slice>32:43</time_slice>
              <text_slice>I get to the IF.</text_slice>
            </slice>
            <slice>
              <time_slice>32:44</time_slice>
              <text_slice>The IF says, evaluate that
next expression.</text_slice>
            </slice>
            <slice>
              <time_slice>32:46</time_slice>
              <text_slice>In that next expression, I'm
actually taking advantage of</text_slice>
            </slice>
            <slice>
              <time_slice>32:49</time_slice>
              <text_slice>the fact that I'm doing integer
multiplication and</text_slice>
            </slice>
            <slice>
              <time_slice>32:51</time_slice>
              <text_slice>division here.</text_slice>
            </slice>
            <slice>
              <time_slice>32:52</time_slice>
              <text_slice>Right, that divide is, if x is
an integer and two is an</text_slice>
            </slice>
            <slice>
              <time_slice>32:55</time_slice>
              <text_slice>integer, what's it
going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>32:56</time_slice>
              <text_slice>If x was even, x divided by two
is going to be actually</text_slice>
            </slice>
            <slice>
              <time_slice>32:59</time_slice>
              <text_slice>the half of x, right?</text_slice>
            </slice>
            <slice>
              <time_slice>33:02</time_slice>
              <text_slice>If x is odd, that integer
division is going to give me</text_slice>
            </slice>
            <slice>
              <time_slice>33:04</time_slice>
              <text_slice>the number of multiples of two,
that go into x, plus a</text_slice>
            </slice>
            <slice>
              <time_slice>33:08</time_slice>
              <text_slice>remainder, which I'm going
to throw away.</text_slice>
            </slice>
            <slice>
              <time_slice>33:11</time_slice>
              <text_slice>In either case, I take that
value and multiply back by</text_slice>
            </slice>
            <slice>
              <time_slice>33:13</time_slice>
              <text_slice>two, if it was even I get back
the original number, if it was</text_slice>
            </slice>
            <slice>
              <time_slice>33:17</time_slice>
              <text_slice>odd, I'm not going to get back
the original number, so I can</text_slice>
            </slice>
            <slice>
              <time_slice>33:20</time_slice>
              <text_slice>just check to see if
they're the same.</text_slice>
            </slice>
            <slice>
              <time_slice>33:22</time_slice>
              <text_slice>OK, so a little nuance
that I'm using there.</text_slice>
            </slice>
            <slice>
              <time_slice>33:24</time_slice>
              <text_slice>So, the first thing that IF
does, bleah that IF says is,</text_slice>
            </slice>
            <slice>
              <time_slice>33:26</time_slice>
              <text_slice>evaluate that expression and
if it's true, do the next</text_slice>
            </slice>
            <slice>
              <time_slice>33:30</time_slice>
              <text_slice>thing, the thing after
the colon.</text_slice>
            </slice>
            <slice>
              <time_slice>33:31</time_slice>
              <text_slice>In this case it's not true, so
it's going to skip down and</text_slice>
            </slice>
            <slice>
              <time_slice>33:34</time_slice>
              <text_slice>evaluate the thing printed
up the odd.</text_slice>
            </slice>
            <slice>
              <time_slice>33:38</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>33:38</time_slice>
              <text_slice>What-- yes.</text_slice>
            </slice>
            <slice>
              <time_slice>33:38</time_slice>
              <text_slice>STUDENT: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>33:41</time_slice>
              <text_slice>PROFESSOR JIM ERICSON:
Thank you.</text_slice>
            </slice>
            <slice>
              <time_slice>33:42</time_slice>
              <text_slice>I was hoping somebody would
ask that question.</text_slice>
            </slice>
            <slice>
              <time_slice>33:44</time_slice>
              <text_slice>The question was, if you didn't
hear, why do I have two</text_slice>
            </slice>
            <slice>
              <time_slice>33:47</time_slice>
              <text_slice>equal signs?</text_slice>
            </slice>
            <slice>
              <time_slice>33:49</time_slice>
              <text_slice>It's like I'm doing
this, right?</text_slice>
            </slice>
            <slice>
              <time_slice>33:51</time_slice>
              <text_slice>Anybody have a se--%uFFFD
why don't I just</text_slice>
            </slice>
            <slice>
              <time_slice>33:52</time_slice>
              <text_slice>use an equal sign?</text_slice>
            </slice>
            <slice>
              <time_slice>33:53</time_slice>
              <text_slice>I want to know if something's
equal to something.</text_slice>
            </slice>
            <slice>
              <time_slice>33:54</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>33:55</time_slice>
              <text_slice>STUDENT: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>33:55</time_slice>
              <text_slice>PROFESSOR JIM ERICSON:
Absolutely.</text_slice>
            </slice>
            <slice>
              <time_slice>33:58</time_slice>
              <text_slice>The equal sign is
going to bind--</text_slice>
            </slice>
            <slice>
              <time_slice>34:02</time_slice>
              <text_slice>Nice catch.</text_slice>
            </slice>
            <slice>
              <time_slice>34:05</time_slice>
              <text_slice>John, this is so much
fun, throwing candy.</text_slice>
            </slice>
            <slice>
              <time_slice>34:06</time_slice>
              <text_slice>I've got to say, we've got
to do this more often--</text_slice>
            </slice>
            <slice>
              <time_slice>34:07</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>34:08</time_slice>
              <text_slice>Let me, let me get
to the point.</text_slice>
            </slice>
            <slice>
              <time_slice>34:09</time_slice>
              <text_slice>What does an equal sign do?</text_slice>
            </slice>
            <slice>
              <time_slice>34:10</time_slice>
              <text_slice>It is an assignment.</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>It says, take this thing on the
left and use it as a name</text_slice>
            </slice>
            <slice>
              <time_slice>34:14</time_slice>
              <text_slice>to bind to the value
on the right.</text_slice>
            </slice>
            <slice>
              <time_slice>34:17</time_slice>
              <text_slice>It's not what I want here.</text_slice>
            </slice>
            <slice>
              <time_slice>34:17</time_slice>
              <text_slice>Having already chosen to use
equal as an assignment, I need</text_slice>
            </slice>
            <slice>
              <time_slice>34:20</time_slice>
              <text_slice>something else to
do comparison.</text_slice>
            </slice>
            <slice>
              <time_slice>34:23</time_slice>
              <text_slice>And that's why I use
double equals.</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>Those two equal signs are
saying, is this thing equal</text_slice>
            </slice>
            <slice>
              <time_slice>34:27</time_slice>
              <text_slice>to, in value, the thing
on the other side?</text_slice>
            </slice>
            <slice>
              <time_slice>34:31</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>34:32</time_slice>
              <text_slice>Now, having done that, again I
want to stress this idea and</text_slice>
            </slice>
            <slice>
              <time_slice>34:36</time_slice>
              <text_slice>I'm going to write it out one
more time, that there's a</text_slice>
            </slice>
            <slice>
              <time_slice>34:38</time_slice>
              <text_slice>particular format here.</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>So we have if, and that is
followed by, I'm going to use</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>angle braces here just to
indicates something goes in</text_slice>
            </slice>
            <slice>
              <time_slice>34:49</time_slice>
              <text_slice>here, some test followed
by a colon.</text_slice>
            </slice>
            <slice>
              <time_slice>34:54</time_slice>
              <text_slice>That is followed by a block
of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>35:02</time_slice>
              <text_slice>And we have an ELSE, followed by
a colon in some other block</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>35:17</time_slice>
              <text_slice>And I want you to get used to
this, that colon is important,</text_slice>
            </slice>
            <slice>
              <time_slice>35:20</time_slice>
              <text_slice>it identifies the start, and
then the set of indented</text_slice>
            </slice>
            <slice>
              <time_slice>35:23</time_slice>
              <text_slice>things identify all the things
at the same level, and when we</text_slice>
            </slice>
            <slice>
              <time_slice>35:26</time_slice>
              <text_slice>reset back to the previous
level, that's when we go back</text_slice>
            </slice>
            <slice>
              <time_slice>35:29</time_slice>
              <text_slice>to where we were.</text_slice>
            </slice>
            <slice>
              <time_slice>35:31</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>35:32</time_slice>
              <text_slice>Now, that's a nice simple little
test, let's look at a</text_slice>
            </slice>
            <slice>
              <time_slice>35:35</time_slice>
              <text_slice>couple of other examples
to get a sense of</text_slice>
            </slice>
            <slice>
              <time_slice>35:37</time_slice>
              <text_slice>what this will do.</text_slice>
            </slice>
            <slice>
              <time_slice>35:39</time_slice>
              <text_slice>OK, let me comment this out,
and let's look at this next</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>little piece of code.</text_slice>
            </slice>
            <slice>
              <time_slice>35:50</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>35:51</time_slice>
              <text_slice>I'm binding a z to be some
value, and then I'm</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>going to run this.</text_slice>
            </slice>
            <slice>
              <time_slice>35:55</time_slice>
              <text_slice>Well, let's just run it
and see what it does.</text_slice>
            </slice>
            <slice>
              <time_slice>36:02</time_slice>
              <text_slice>Nothing.</text_slice>
            </slice>
            <slice>
              <time_slice>36:03</time_slice>
              <text_slice>OK, so why?</text_slice>
            </slice>
            <slice>
              <time_slice>36:04</time_slice>
              <text_slice>Well, let's look at it.</text_slice>
            </slice>
            <slice>
              <time_slice>36:05</time_slice>
              <text_slice>I'm doing a test there to say,
if the string x is less than</text_slice>
            </slice>
            <slice>
              <time_slice>36:08</time_slice>
              <text_slice>the value of b, and x does not
appear before b as strings,</text_slice>
            </slice>
            <slice>
              <time_slice>36:12</time_slice>
              <text_slice>then I was going to do, oh, a
couple of things, because</text_slice>
            </slice>
            <slice>
              <time_slice>36:16</time_slice>
              <text_slice>they're at the same
block level.</text_slice>
            </slice>
            <slice>
              <time_slice>36:18</time_slice>
              <text_slice>Given that that wasn't
true, it did nothing.</text_slice>
            </slice>
            <slice>
              <time_slice>36:22</time_slice>
              <text_slice>Now, wait a minute, you say,
where's the ELSE clause?</text_slice>
            </slice>
            <slice>
              <time_slice>36:25</time_slice>
              <text_slice>And the answer is,
I don't need one.</text_slice>
            </slice>
            <slice>
              <time_slice>36:26</time_slice>
              <text_slice>All right, if this is purely a
test of, if this is true do</text_slice>
            </slice>
            <slice>
              <time_slice>36:29</time_slice>
              <text_slice>this otherwise I don't care, I
don't need the ELSE clause in</text_slice>
            </slice>
            <slice>
              <time_slice>36:32</time_slice>
              <text_slice>there to identify it.</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>36:35</time_slice>
              <text_slice>Second thing I want to look at
is, suppose I compare that the</text_slice>
            </slice>
            <slice>
              <time_slice>36:39</time_slice>
              <text_slice>one below it.</text_slice>
            </slice>
            <slice>
              <time_slice>36:39</time_slice>
              <text_slice>Oops, that I don't want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>36:45</time_slice>
              <text_slice>Comment that out, and let's
uncomment this.</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>Yeah, I've still got a binding
for z and I'm giving it the</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>same test, but notice now I've
got the two same commands but</text_slice>
            </slice>
            <slice>
              <time_slice>36:59</time_slice>
              <text_slice>they have different
indentation.</text_slice>
            </slice>
            <slice>
              <time_slice>37:01</time_slice>
              <text_slice>In this case, in fact I do
get a different behavior.</text_slice>
            </slice>
            <slice>
              <time_slice>37:08</time_slice>
              <text_slice>Why?</text_slice>
            </slice>
            <slice>
              <time_slice>37:10</time_slice>
              <text_slice>Because that block identifies a
set of things that I'm going</text_slice>
            </slice>
            <slice>
              <time_slice>37:14</time_slice>
              <text_slice>to do if the test is true.</text_slice>
            </slice>
            <slice>
              <time_slice>37:16</time_slice>
              <text_slice>If the test was not true, notice
that that last command</text_slice>
            </slice>
            <slice>
              <time_slice>37:18</time_slice>
              <text_slice>for print Mon is now back at the
same level as the IF, so</text_slice>
            </slice>
            <slice>
              <time_slice>37:21</time_slice>
              <text_slice>what this says is the IF does
the test, having done the</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>test, it decides I'm not going
to do anything in the block</text_slice>
            </slice>
            <slice>
              <time_slice>37:27</time_slice>
              <text_slice>below it, I'm going to skip
down therefore to the next</text_slice>
            </slice>
            <slice>
              <time_slice>37:29</time_slice>
              <text_slice>instruction at the same level
as the IF, which gets me to</text_slice>
            </slice>
            <slice>
              <time_slice>37:32</time_slice>
              <text_slice>the second print statement.</text_slice>
            </slice>
            <slice>
              <time_slice>37:35</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>37:36</time_slice>
              <text_slice>So now we're seeing some of
these variations, let's see</text_slice>
            </slice>
            <slice>
              <time_slice>37:38</time_slice>
              <text_slice>what else can we do here.</text_slice>
            </slice>
            <slice>
              <time_slice>37:39</time_slice>
              <text_slice>So let me just to try something
a little more</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>interesting, and then we'll
get to writing some simple</text_slice>
            </slice>
            <slice>
              <time_slice>37:43</time_slice>
              <text_slice>programs. So I'm going to
comment those out, and let's</text_slice>
            </slice>
            <slice>
              <time_slice>37:47</time_slice>
              <text_slice>go down to this piece of
code, and uncomment it.</text_slice>
            </slice>
            <slice>
              <time_slice>37:53</time_slice>
              <text_slice>Ooh yes, that was brilliant.</text_slice>
            </slice>
            <slice>
              <time_slice>37:55</time_slice>
              <text_slice>Let's try this again.</text_slice>
            </slice>
            <slice>
              <time_slice>37:59</time_slice>
              <text_slice>And uncomment that, and
uncomment it again.</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>Right, so here's a little piece
of code that's going to</text_slice>
            </slice>
            <slice>
              <time_slice>38:06</time_slice>
              <text_slice>print out the smallest
value of three.</text_slice>
            </slice>
            <slice>
              <time_slice>38:09</time_slice>
              <text_slice>And notice what this
is showing is that</text_slice>
            </slice>
            <slice>
              <time_slice>38:12</time_slice>
              <text_slice>the IFs can be nested.</text_slice>
            </slice>
            <slice>
              <time_slice>38:13</time_slice>
              <text_slice>All right, it's so if I looked
at it, it's going to say that</text_slice>
            </slice>
            <slice>
              <time_slice>38:15</time_slice>
              <text_slice>IF x is y-- sorry, IF x is less
than y, THEN check to see</text_slice>
            </slice>
            <slice>
              <time_slice>38:18</time_slice>
              <text_slice>IF x is less than z, and if
that's true, print out x is</text_slice>
            </slice>
            <slice>
              <time_slice>38:22</time_slice>
              <text_slice>the smallest. And notice the
structure of it, if it's not</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>true I'm going to go to that
next ELSE, and print out that</text_slice>
            </slice>
            <slice>
              <time_slice>38:28</time_slice>
              <text_slice>z is smallest. If the first test
wasn't true, I'm going to</text_slice>
            </slice>
            <slice>
              <time_slice>38:31</time_slice>
              <text_slice>skip that whole block and just
go down and print out that y</text_slice>
            </slice>
            <slice>
              <time_slice>38:33</time_slice>
              <text_slice>was smallest. So notice the
nesting, I can flow my way</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>through how those tests are
actually going to take place.</text_slice>
            </slice>
            <slice>
              <time_slice>38:40</time_slice>
              <text_slice>All right, so let's run this
and see what happens.</text_slice>
            </slice>
            <slice>
              <time_slice>38:46</time_slice>
              <text_slice>Great. y is smallest. OK.</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>Is that code correct?</text_slice>
            </slice>
            <slice>
              <time_slice>38:55</time_slice>
              <text_slice>Is that a tentative
hand back there?</text_slice>
            </slice>
            <slice>
              <time_slice>38:56</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>38:57</time_slice>
              <text_slice>STUDENT: Let me compare
y to [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: Yeah,
it's not doing all of the</text_slice>
            </slice>
            <slice>
              <time_slice>39:02</time_slice>
              <text_slice>comparisons.</text_slice>
            </slice>
            <slice>
              <time_slice>39:03</time_slice>
              <text_slice>All right, and let's just check
this out, because I want</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>to make a point of this, let's
go back and do the following.</text_slice>
            </slice>
            <slice>
              <time_slice>39:08</time_slice>
              <text_slice>Let's take y, change it to
thirteen, let's run it, hmm.</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>So what did I miss here?</text_slice>
            </slice>
            <slice>
              <time_slice>39:20</time_slice>
              <text_slice>Two important points.</text_slice>
            </slice>
            <slice>
              <time_slice>39:22</time_slice>
              <text_slice>First one, when I write a piece
of code, especially code</text_slice>
            </slice>
            <slice>
              <time_slice>39:24</time_slice>
              <text_slice>that has branches in it, when
I design test cases for that</text_slice>
            </slice>
            <slice>
              <time_slice>39:28</time_slice>
              <text_slice>piece of code, I should try and
have a specific test case</text_slice>
            </slice>
            <slice>
              <time_slice>39:32</time_slice>
              <text_slice>for each possible path
through the code.</text_slice>
            </slice>
            <slice>
              <time_slice>39:35</time_slice>
              <text_slice>And by just doing that, I just
spotted, there's a bug here.</text_slice>
            </slice>
            <slice>
              <time_slice>39:38</time_slice>
              <text_slice>And the bug was in my thinking,
I did not look for</text_slice>
            </slice>
            <slice>
              <time_slice>39:40</time_slice>
              <text_slice>all of the tests.</text_slice>
            </slice>
            <slice>
              <time_slice>39:41</time_slice>
              <text_slice>So the way I can fix that, is,
let me comment that out, and</text_slice>
            </slice>
            <slice>
              <time_slice>39:49</time_slice>
              <text_slice>keep doing that, comment that
out, let's uncomment this,</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>notice the structure here.</text_slice>
            </slice>
            <slice>
              <time_slice>40:04</time_slice>
              <text_slice>I now have multiple tests.</text_slice>
            </slice>
            <slice>
              <time_slice>40:06</time_slice>
              <text_slice>So actually, let's just run
it and then we'll talk</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>about what it does.</text_slice>
            </slice>
            <slice>
              <time_slice>40:09</time_slice>
              <text_slice>I run this, yeah, I have a
syntax error, yes indeed,</text_slice>
            </slice>
            <slice>
              <time_slice>40:16</time_slice>
              <text_slice>because I forgot to comment that
one out, all right, and</text_slice>
            </slice>
            <slice>
              <time_slice>40:20</time_slice>
              <text_slice>cue, we'll try it again.</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>Ah-ha!</text_slice>
            </slice>
            <slice>
              <time_slice>40:29</time_slice>
              <text_slice>And let's quickly look at
the structure of this.</text_slice>
            </slice>
            <slice>
              <time_slice>40:31</time_slice>
              <text_slice>This now has, gee, a funny
thing, it says IF x is less</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>than y AND x is less than
z, then do something.</text_slice>
            </slice>
            <slice>
              <time_slice>40:39</time_slice>
              <text_slice>And then it has a strange thing
called ELIF, which is</text_slice>
            </slice>
            <slice>
              <time_slice>40:42</time_slice>
              <text_slice>simply short for else/if in a
second test. So the way to</text_slice>
            </slice>
            <slice>
              <time_slice>40:46</time_slice>
              <text_slice>think about this in terms of
flow is, it starts with that</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>if and it says, check both
of those things.</text_slice>
            </slice>
            <slice>
              <time_slice>40:51</time_slice>
              <text_slice>And that fact that both of those
things is the fact that</text_slice>
            </slice>
            <slice>
              <time_slice>40:54</time_slice>
              <text_slice>we're using Boolean
combination here.</text_slice>
            </slice>
            <slice>
              <time_slice>41:06</time_slice>
              <text_slice>It is to say, we can take any
logical expressions, combine</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>them together with AND, OR,
or NOT to make a complex</text_slice>
            </slice>
            <slice>
              <time_slice>41:14</time_slice>
              <text_slice>expression, and use the value of
that expression as my test.</text_slice>
            </slice>
            <slice>
              <time_slice>41:17</time_slice>
              <text_slice>And that's literally what I've
done there, right, I've got x</text_slice>
            </slice>
            <slice>
              <time_slice>41:19</time_slice>
              <text_slice>less than y, that's a test, it
returns a Boolean, which by</text_slice>
            </slice>
            <slice>
              <time_slice>41:22</time_slice>
              <text_slice>the way is the other type, at
least I would include here, it</text_slice>
            </slice>
            <slice>
              <time_slice>41:25</time_slice>
              <text_slice>has only two values, which are
true and false, and what that</text_slice>
            </slice>
            <slice>
              <time_slice>41:32</time_slice>
              <text_slice>code says, if x is less than y,
AND, logically, whatever I</text_slice>
            </slice>
            <slice>
              <time_slice>41:37</time_slice>
              <text_slice>put up there, x is less than
z, then the combination is</text_slice>
            </slice>
            <slice>
              <time_slice>41:42</time_slice>
              <text_slice>true, and therefore I'm
going to do something.</text_slice>
            </slice>
            <slice>
              <time_slice>41:44</time_slice>
              <text_slice>So AND is if both arguments are
true it's true, OR is if</text_slice>
            </slice>
            <slice>
              <time_slice>41:47</time_slice>
              <text_slice>either argument it's true it's
true, NOT is if the argument</text_slice>
            </slice>
            <slice>
              <time_slice>41:50</time_slice>
              <text_slice>is not true it's true, and then
the last piece, as I said</text_slice>
            </slice>
            <slice>
              <time_slice>41:53</time_slice>
              <text_slice>is, I can now have a sequence
of things I want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>41:56</time_slice>
              <text_slice>So if this is true do something
else, otherwise test</text_slice>
            </slice>
            <slice>
              <time_slice>41:58</time_slice>
              <text_slice>and see if this is true, do
something else, as many as I</text_slice>
            </slice>
            <slice>
              <time_slice>42:00</time_slice>
              <text_slice>like followed by the end.</text_slice>
            </slice>
            <slice>
              <time_slice>42:02</time_slice>
              <text_slice>And ELSE, it says, here's
what I want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>42:05</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>42:07</time_slice>
              <text_slice>Now.</text_slice>
            </slice>
            <slice>
              <time_slice>42:09</time_slice>
              <text_slice>Having added this in, I have
branching instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>42:12</time_slice>
              <text_slice>I have simple branching
programs. These are still</text_slice>
            </slice>
            <slice>
              <time_slice>42:15</time_slice>
              <text_slice>awfully simple.</text_slice>
            </slice>
            <slice>
              <time_slice>42:16</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>42:16</time_slice>
              <text_slice>And they're awfully simple
because, all I can do now, is</text_slice>
            </slice>
            <slice>
              <time_slice>42:20</time_slice>
              <text_slice>decide whether to execute some
piece of code or another.</text_slice>
            </slice>
            <slice>
              <time_slice>42:24</time_slice>
              <text_slice>Said a different way, in the
case of the straight-line</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>programs, how long would it
take to run a program?</text_slice>
            </slice>
            <slice>
              <time_slice>42:29</time_slice>
              <text_slice>Well, basically, however many
instructions I have, because</text_slice>
            </slice>
            <slice>
              <time_slice>42:31</time_slice>
              <text_slice>I've got to do each
one in order.</text_slice>
            </slice>
            <slice>
              <time_slice>42:33</time_slice>
              <text_slice>With simple branching, how long
is it going to take to</text_slice>
            </slice>
            <slice>
              <time_slice>42:36</time_slice>
              <text_slice>run a piece of code?</text_slice>
            </slice>
            <slice>
              <time_slice>42:38</time_slice>
              <text_slice>Well at most, I'm going to
execute each instruction once.</text_slice>
            </slice>
            <slice>
              <time_slice>42:42</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>42:42</time_slice>
              <text_slice>Because the IFs are saying, if
it's true do this, otherwise</text_slice>
            </slice>
            <slice>
              <time_slice>42:44</time_slice>
              <text_slice>skip on it.</text_slice>
            </slice>
            <slice>
              <time_slice>42:46</time_slice>
              <text_slice>Therefore, for simple branching
programs, the length</text_slice>
            </slice>
            <slice>
              <time_slice>42:48</time_slice>
              <text_slice>of time, the complexity
the code, is what</text_slice>
            </slice>
            <slice>
              <time_slice>42:52</time_slice>
              <text_slice>we would call constant.</text_slice>
            </slice>
            <slice>
              <time_slice>42:53</time_slice>
              <text_slice>That is, it's at most the length
of the actual number of</text_slice>
            </slice>
            <slice>
              <time_slice>42:56</time_slice>
              <text_slice>instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>42:57</time_slice>
              <text_slice>It doesn't depend
on the input.</text_slice>
            </slice>
            <slice>
              <time_slice>42:59</time_slice>
              <text_slice>Real simple programs.</text_slice>
            </slice>
            <slice>
              <time_slice>43:00</time_slice>
              <text_slice>Let's take another
simple example.</text_slice>
            </slice>
            <slice>
              <time_slice>43:02</time_slice>
              <text_slice>Suppose I want to compute
the average age</text_slice>
            </slice>
            <slice>
              <time_slice>43:03</time_slice>
              <text_slice>of all the MIT faculty.</text_slice>
            </slice>
            <slice>
              <time_slice>43:05</time_slice>
              <text_slice>There's about a thousand
of us.</text_slice>
            </slice>
            <slice>
              <time_slice>43:07</time_slice>
              <text_slice>However I do that, I know that
should inherently take more</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>time than it takes to compute
the average age of all the</text_slice>
            </slice>
            <slice>
              <time_slice>43:12</time_slice>
              <text_slice>EECS faculty.</text_slice>
            </slice>
            <slice>
              <time_slice>43:14</time_slice>
              <text_slice>There's only 125 of us.</text_slice>
            </slice>
            <slice>
              <time_slice>43:16</time_slice>
              <text_slice>And that should take more time
than what it takes to compute</text_slice>
            </slice>
            <slice>
              <time_slice>43:19</time_slice>
              <text_slice>the average of John's and my
ages, instructors in 600,</text_slice>
            </slice>
            <slice>
              <time_slice>43:21</time_slice>
              <text_slice>because there's only
two of us.</text_slice>
            </slice>
            <slice>
              <time_slice>43:23</time_slice>
              <text_slice>All right, those pieces of
code inherently involved</text_slice>
            </slice>
            <slice>
              <time_slice>43:27</time_slice>
              <text_slice>something that does depend on
the size of the input, or on</text_slice>
            </slice>
            <slice>
              <time_slice>43:30</time_slice>
              <text_slice>the particular input.</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>And that is a preface to an
idea of computational</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>complexity we're going
to come back to.</text_slice>
            </slice>
            <slice>
              <time_slice>43:36</time_slice>
              <text_slice>One of the things we want to
help you do is identify the</text_slice>
            </slice>
            <slice>
              <time_slice>43:38</time_slice>
              <text_slice>different classes of algorithms,
what their costs</text_slice>
            </slice>
            <slice>
              <time_slice>43:41</time_slice>
              <text_slice>are, and how you can map
problems into the most</text_slice>
            </slice>
            <slice>
              <time_slice>43:43</time_slice>
              <text_slice>efficient class to do
the computation.</text_slice>
            </slice>
            <slice>
              <time_slice>43:47</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>43:47</time_slice>
              <text_slice>Now.</text_slice>
            </slice>
            <slice>
              <time_slice>43:48</time_slice>
              <text_slice>Think for a second about
computing the average age of</text_slice>
            </slice>
            <slice>
              <time_slice>43:52</time_slice>
              <text_slice>the faculty.</text_slice>
            </slice>
            <slice>
              <time_slice>43:53</time_slice>
              <text_slice>You can already kind of
see what I want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>43:55</time_slice>
              <text_slice>I, somehow if, I want to walk
through some sequence of data</text_slice>
            </slice>
            <slice>
              <time_slice>43:57</time_slice>
              <text_slice>structures, gathering up or
doing the same thing, adding</text_slice>
            </slice>
            <slice>
              <time_slice>44:01</time_slice>
              <text_slice>ages in until I get a total
age and then divide by the</text_slice>
            </slice>
            <slice>
              <time_slice>44:03</time_slice>
              <text_slice>number faculty.</text_slice>
            </slice>
            <slice>
              <time_slice>44:04</time_slice>
              <text_slice>How do I write a piece
of code for that?</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>Well, let's go back
up to our original</text_slice>
            </slice>
            <slice>
              <time_slice>44:09</time_slice>
              <text_slice>starting point of recipes.</text_slice>
            </slice>
            <slice>
              <time_slice>44:10</time_slice>
              <text_slice>And I'm sure you don't remember,
but one of the</text_slice>
            </slice>
            <slice>
              <time_slice>44:13</time_slice>
              <text_slice>things I had in my recipe, is
beat egg whites until stiff.</text_slice>
            </slice>
            <slice>
              <time_slice>44:18</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>44:19</time_slice>
              <text_slice>That until is an
important word.</text_slice>
            </slice>
            <slice>
              <time_slice>44:21</time_slice>
              <text_slice>It's actually defining a test.
Let me rephrase it into</text_slice>
            </slice>
            <slice>
              <time_slice>44:24</time_slice>
              <text_slice>garbled English that'll lead
more naturally into what I</text_slice>
            </slice>
            <slice>
              <time_slice>44:26</time_slice>
              <text_slice>want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>44:27</time_slice>
              <text_slice>While the egg whites are
not stiff, beat them.</text_slice>
            </slice>
            <slice>
              <time_slice>44:31</time_slice>
              <text_slice>That is a different
kind of structure.</text_slice>
            </slice>
            <slice>
              <time_slice>44:33</time_slice>
              <text_slice>It has a test in it, which is
that while, while something is</text_slice>
            </slice>
            <slice>
              <time_slice>44:36</time_slice>
              <text_slice>true, do something, but I
want to keep doing it.</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>And so for that, we need
to add one last thing.</text_slice>
            </slice>
            <slice>
              <time_slice>44:45</time_slice>
              <text_slice>Which is iteration.</text_slice>
            </slice>
            <slice>
              <time_slice>44:49</time_slice>
              <text_slice>Or loops.</text_slice>
            </slice>
            <slice>
              <time_slice>44:50</time_slice>
              <text_slice>We're going to see variations of
this, we're going to see a</text_slice>
            </slice>
            <slice>
              <time_slice>44:52</time_slice>
              <text_slice>variation of it called
recursion, a little later on,</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>but for now we're just going
to talk about how do we do</text_slice>
            </slice>
            <slice>
              <time_slice>44:56</time_slice>
              <text_slice>iterations.</text_slice>
            </slice>
            <slice>
              <time_slice>44:57</time_slice>
              <text_slice>And I want to show you an
example of this, to lead to</text_slice>
            </slice>
            <slice>
              <time_slice>45:00</time_slice>
              <text_slice>both the syntax, and
to the semantics.</text_slice>
            </slice>
            <slice>
              <time_slice>45:04</time_slice>
              <text_slice>And let me comment that out,
and let's go to this one.</text_slice>
            </slice>
            <slice>
              <time_slice>45:15</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>45:15</time_slice>
              <text_slice>What does this piece
of code say?</text_slice>
            </slice>
            <slice>
              <time_slice>45:17</time_slice>
              <text_slice>Not, what does it do, but
what does it say.</text_slice>
            </slice>
            <slice>
              <time_slice>45:19</time_slice>
              <text_slice>Well, the first three statements
are just assignment</text_slice>
            </slice>
            <slice>
              <time_slice>45:21</time_slice>
              <text_slice>statements.</text_slice>
            </slice>
            <slice>
              <time_slice>45:21</time_slice>
              <text_slice>I'm binding x, y, and iters
left to some values.</text_slice>
            </slice>
            <slice>
              <time_slice>45:25</time_slice>
              <text_slice>And then notice the structure, I
got a keyword WHILE, there's</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>that color identifying it, and
in parentheses I have a test.</text_slice>
            </slice>
            <slice>
              <time_slice>45:32</time_slice>
              <text_slice>I'm expecting the value that
test to be a Boolean.</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>Followed by a colon.</text_slice>
            </slice>
            <slice>
              <time_slice>45:36</time_slice>
              <text_slice>The colon's identifying
a block of code.</text_slice>
            </slice>
            <slice>
              <time_slice>45:38</time_slice>
              <text_slice>And what this is
saying is, gee.</text_slice>
            </slice>
            <slice>
              <time_slice>45:41</time_slice>
              <text_slice>Check to see if the variable
iters left has a value</text_slice>
            </slice>
            <slice>
              <time_slice>45:43</time_slice>
              <text_slice>greater than zero.</text_slice>
            </slice>
            <slice>
              <time_slice>45:45</time_slice>
              <text_slice>If it does, then execute
each of the</text_slice>
            </slice>
            <slice>
              <time_slice>45:47</time_slice>
              <text_slice>instructions in that block.</text_slice>
            </slice>
            <slice>
              <time_slice>45:50</time_slice>
              <text_slice>So I'm going to have an
assignment of y, I'm going to</text_slice>
            </slice>
            <slice>
              <time_slice>45:52</time_slice>
              <text_slice>have an assignment of iters
left, I've got a comment that</text_slice>
            </slice>
            <slice>
              <time_slice>45:53</time_slice>
              <text_slice>I had borrowed in order to do
some debugging, and then what</text_slice>
            </slice>
            <slice>
              <time_slice>45:57</time_slice>
              <text_slice>do I want it to do?</text_slice>
            </slice>
            <slice>
              <time_slice>45:57</time_slice>
              <text_slice>I want it to go back around to
the test. Once again, say, is</text_slice>
            </slice>
            <slice>
              <time_slice>46:02</time_slice>
              <text_slice>that test true?</text_slice>
            </slice>
            <slice>
              <time_slice>46:03</time_slice>
              <text_slice>If it is true, execute the
sequence of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>46:07</time_slice>
              <text_slice>So in fact we can block this
out and see what it does.</text_slice>
            </slice>
            <slice>
              <time_slice>46:10</time_slice>
              <text_slice>If I make a little chart here,
I've got x, y, and iters left.</text_slice>
            </slice>
            <slice>
              <time_slice>46:16</time_slice>
              <text_slice>x starts off as I think I set
it up as, here I can't even</text_slice>
            </slice>
            <slice>
              <time_slice>46:19</time_slice>
              <text_slice>read it, is x is three, y is
zero, iters left is three.</text_slice>
            </slice>
            <slice>
              <time_slice>46:24</time_slice>
              <text_slice>I can hand-simulate it.</text_slice>
            </slice>
            <slice>
              <time_slice>46:25</time_slice>
              <text_slice>It says, is the value of iters
left greater than zero?</text_slice>
            </slice>
            <slice>
              <time_slice>46:28</time_slice>
              <text_slice>Yes it is.</text_slice>
            </slice>
            <slice>
              <time_slice>46:28</time_slice>
              <text_slice>So, execute those two
instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>It says, take value of y and
value of x, add them together,</text_slice>
            </slice>
            <slice>
              <time_slice>46:34</time_slice>
              <text_slice>and create that as the
new value of y.</text_slice>
            </slice>
            <slice>
              <time_slice>46:36</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>46:36</time_slice>
              <text_slice>That's the assigned statement.</text_slice>
            </slice>
            <slice>
              <time_slice>46:38</time_slice>
              <text_slice>It says, take iters left,
subtract one from it, and bind</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>that as the new value
of iters left.</text_slice>
            </slice>
            <slice>
              <time_slice>46:44</time_slice>
              <text_slice>Having reached the end of the
block, go back up and check</text_slice>
            </slice>
            <slice>
              <time_slice>46:47</time_slice>
              <text_slice>the test. Is iters left
greater than zero?</text_slice>
            </slice>
            <slice>
              <time_slice>46:49</time_slice>
              <text_slice>Yes it is.</text_slice>
            </slice>
            <slice>
              <time_slice>46:50</time_slice>
              <text_slice>So, evaluate the same sequence
of instructions again. y plus</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>x is six, that's my new value
of y, two minus one is one,</text_slice>
            </slice>
            <slice>
              <time_slice>46:57</time_slice>
              <text_slice>that's my new value of iters
left, go back up.</text_slice>
            </slice>
            <slice>
              <time_slice>47:00</time_slice>
              <text_slice>Is iters left greater
than zero?</text_slice>
            </slice>
            <slice>
              <time_slice>47:01</time_slice>
              <text_slice>Yes it is.</text_slice>
            </slice>
            <slice>
              <time_slice>47:02</time_slice>
              <text_slice>So once more, thank God I didn't
take 47 as an example,</text_slice>
            </slice>
            <slice>
              <time_slice>47:07</time_slice>
              <text_slice>x plus y, subtract one from
iters left, go back up to the</text_slice>
            </slice>
            <slice>
              <time_slice>47:12</time_slice>
              <text_slice>test. Is iters left's value
greater than zero?</text_slice>
            </slice>
            <slice>
              <time_slice>47:14</time_slice>
              <text_slice>No, it is not.</text_slice>
            </slice>
            <slice>
              <time_slice>47:16</time_slice>
              <text_slice>Therefore, skip the rest of that
block of code and go to</text_slice>
            </slice>
            <slice>
              <time_slice>47:20</time_slice>
              <text_slice>the next instruction, which
is, ah, print out y.</text_slice>
            </slice>
            <slice>
              <time_slice>47:24</time_slice>
              <text_slice>In fact, if we test this,
son of a gun.</text_slice>
            </slice>
            <slice>
              <time_slice>47:29</time_slice>
              <text_slice>Got a simple square
procedure,.</text_slice>
            </slice>
            <slice>
              <time_slice>47:32</time_slice>
              <text_slice>Right, It's just squaring an
integer, is what it's doing.</text_slice>
            </slice>
            <slice>
              <time_slice>47:34</time_slice>
              <text_slice>But notice the structure.</text_slice>
            </slice>
            <slice>
              <time_slice>47:36</time_slice>
              <text_slice>Now I have the ability to create
a loop, that is, to</text_slice>
            </slice>
            <slice>
              <time_slice>47:39</time_slice>
              <text_slice>reuse the same pieces of
code over and over</text_slice>
            </slice>
            <slice>
              <time_slice>47:41</time_slice>
              <text_slice>again as I go around.</text_slice>
            </slice>
            <slice>
              <time_slice>47:43</time_slice>
              <text_slice>And this adds, now, a lot
of power to the kinds</text_slice>
            </slice>
            <slice>
              <time_slice>47:47</time_slice>
              <text_slice>of code I can write.</text_slice>
            </slice>
            <slice>
              <time_slice>47:49</time_slice>
              <text_slice>Notice some other things I want
to highlight on this.</text_slice>
            </slice>
            <slice>
              <time_slice>47:51</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>47:52</time_slice>
              <text_slice>The first one is, that test
has to involve-- shouldn't</text_slice>
            </slice>
            <slice>
              <time_slice>47:57</time_slice>
              <text_slice>have to, but almost always is
going to involve-- the value</text_slice>
            </slice>
            <slice>
              <time_slice>47:59</time_slice>
              <text_slice>of some variable.</text_slice>
            </slice>
            <slice>
              <time_slice>48:01</time_slice>
              <text_slice>What if I don't change the value
of that variable inside</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>of the code?</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>Or, another way of saying it
is, what if I did this?</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>Comment it up.</text_slice>
            </slice>
            <slice>
              <time_slice>48:13</time_slice>
              <text_slice>What happens if I
run this sucker?</text_slice>
            </slice>
            <slice>
              <time_slice>48:15</time_slice>
              <text_slice>STUDENT: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>48:17</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>48:19</time_slice>
              <text_slice>It'll go forever.</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>Absolutely, right?</text_slice>
            </slice>
            <slice>
              <time_slice>48:21</time_slice>
              <text_slice>It's going to loop into
an infinite loop--</text_slice>
            </slice>
            <slice>
              <time_slice>48:23</time_slice>
              <text_slice>I think I can hit this close,
ah, no I can't, boy what a</text_slice>
            </slice>
            <slice>
              <time_slice>48:26</time_slice>
              <text_slice>terrible aim--</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>All right, what has
[UNINTELLIGIBLE PHRASE] try</text_slice>
            </slice>
            <slice>
              <time_slice>48:30</time_slice>
              <text_slice>again, the point I'm trying to
make here-- thank God we're at</text_slice>
            </slice>
            <slice>
              <time_slice>48:32</time_slice>
              <text_slice>the end of this lecture, my
tongue is falling apart-- the</text_slice>
            </slice>
            <slice>
              <time_slice>48:34</time_slice>
              <text_slice>point I'm trying to make is,
that test needs to involve</text_slice>
            </slice>
            <slice>
              <time_slice>48:37</time_slice>
              <text_slice>some loop variable
that is changing.</text_slice>
            </slice>
            <slice>
              <time_slice>48:40</time_slice>
              <text_slice>Otherwise the test is always
going to be true, we're going</text_slice>
            </slice>
            <slice>
              <time_slice>48:42</time_slice>
              <text_slice>to go off here, but this would
loop forever if I did that.</text_slice>
            </slice>
            <slice>
              <time_slice>48:45</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>48:45</time_slice>
              <text_slice>Second question: or maybe a
better way of saying this, and</text_slice>
            </slice>
            <slice>
              <time_slice>48:49</time_slice>
              <text_slice>the general format you're likely
to see here is, a test</text_slice>
            </slice>
            <slice>
              <time_slice>48:51</time_slice>
              <text_slice>involving a variable name,
which must be initialized</text_slice>
            </slice>
            <slice>
              <time_slice>48:54</time_slice>
              <text_slice>outside of the loop, and which
interior to the loop gets</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>changed, so that the test
is going to change.</text_slice>
            </slice>
            <slice>
              <time_slice>49:00</time_slice>
              <text_slice>Here's the second question.</text_slice>
            </slice>
            <slice>
              <time_slice>49:02</time_slice>
              <text_slice>What value of inputs, what
values of x will this run</text_slice>
            </slice>
            <slice>
              <time_slice>49:05</time_slice>
              <text_slice>correctly for?</text_slice>
            </slice>
            <slice>
              <time_slice>49:08</time_slice>
              <text_slice>Probably should be
integers, right?</text_slice>
            </slice>
            <slice>
              <time_slice>49:10</time_slice>
              <text_slice>Otherwise, this is going to be
doing something strange, but</text_slice>
            </slice>
            <slice>
              <time_slice>49:13</time_slice>
              <text_slice>all integers?</text_slice>
            </slice>
            <slice>
              <time_slice>49:16</time_slice>
              <text_slice>All right, suppose I do this.</text_slice>
            </slice>
            <slice>
              <time_slice>49:18</time_slice>
              <text_slice>It's my last example.</text_slice>
            </slice>
            <slice>
              <time_slice>49:24</time_slice>
              <text_slice>Yeah, how about that, right?</text_slice>
            </slice>
            <slice>
              <time_slice>49:26</time_slice>
              <text_slice>We knew this was trying to do
squaring, so intellectually we</text_slice>
            </slice>
            <slice>
              <time_slice>49:29</time_slice>
              <text_slice>know we can square -4, it
ought to be 16, but what</text_slice>
            </slice>
            <slice>
              <time_slice>49:31</time_slice>
              <text_slice>happens here?</text_slice>
            </slice>
            <slice>
              <time_slice>49:33</time_slice>
              <text_slice>Double fudge knuckle.</text_slice>
            </slice>
            <slice>
              <time_slice>49:34</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>49:35</time_slice>
              <text_slice>It's going to run through the
loop, accumulating the</text_slice>
            </slice>
            <slice>
              <time_slice>49:39</time_slice>
              <text_slice>answers, but because I'm
subtracting, it's just going</text_slice>
            </slice>
            <slice>
              <time_slice>49:41</time_slice>
              <text_slice>to keep making x more and more
negative as it goes along,</text_slice>
            </slice>
            <slice>
              <time_slice>49:44</time_slice>
              <text_slice>again it's off into
an infinite loop.</text_slice>
            </slice>
            <slice>
              <time_slice>49:46</time_slice>
              <text_slice>Which is a way of reminding you
that I need to think as I</text_slice>
            </slice>
            <slice>
              <time_slice>49:49</time_slice>
              <text_slice>write the code about what are
my expectations from the</text_slice>
            </slice>
            <slice>
              <time_slice>49:52</time_slice>
              <text_slice>input, and how might
I enforce them.</text_slice>
            </slice>
            <slice>
              <time_slice>49:54</time_slice>
              <text_slice>In this case, I probably want
to make sure I use absolute</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>value of x before
I carry it on.</text_slice>
            </slice>
            <slice>
              <time_slice>49:57</time_slice>
              <text_slice>Yes ma'am.</text_slice>
            </slice>
            <slice>
              <time_slice>50:03</time_slice>
              <text_slice>STUDENT: [UNINTELLIGIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>50:11</time_slice>
              <text_slice>PROFESSOR JIM ERICSON: You're
absolutely right, because I</text_slice>
            </slice>
            <slice>
              <time_slice>50:13</time_slice>
              <text_slice>bind iters left to, um, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>50:16</time_slice>
              <text_slice>Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>50:16</time_slice>
              <text_slice>Thank you.</text_slice>
            </slice>
            <slice>
              <time_slice>50:16</time_slice>
              <text_slice>Boy, two candy for you.</text_slice>
            </slice>
            <slice>
              <time_slice>50:19</time_slice>
              <text_slice>You caught me making an error.</text_slice>
            </slice>
            <slice>
              <time_slice>50:20</time_slice>
              <text_slice>Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>50:21</time_slice>
              <text_slice>The point is, it's not going to
work, and she caught both</text_slice>
            </slice>
            <slice>
              <time_slice>50:24</time_slice>
              <text_slice>of them, impressive, it's not
going to work because iters</text_slice>
            </slice>
            <slice>
              <time_slice>50:26</time_slice>
              <text_slice>left is already negative, it's
just going to skip the whole</text_slice>
            </slice>
            <slice>
              <time_slice>50:27</time_slice>
              <text_slice>loop, and I'm in trouble, so
thank you for catching that.</text_slice>
            </slice>
            <slice>
              <time_slice>50:31</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:31</time_slice>
              <text_slice>I was going to do one more
example, but I've run you up</text_slice>
            </slice>
            <slice>
              <time_slice>50:33</time_slice>
              <text_slice>to the end of the time.</text_slice>
            </slice>
            <slice>
              <time_slice>50:34</time_slice>
              <text_slice>I'll leave the example on the
handout, it shows you another</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>version that we'll come
back to next time.</text_slice>
            </slice>
            <slice>
              <time_slice>50:38</time_slice>
              <text_slice>The key thing to notice is, I
now have the ability to create</text_slice>
            </slice>
            <slice>
              <time_slice>50:41</time_slice>
              <text_slice>iterations, which extends
well I can do.</text_slice>
            </slice>
            <slice>
              <time_slice>50:44</time_slice>
              <text_slice>And we'll see you next time.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
  </lectures>
</doc>
