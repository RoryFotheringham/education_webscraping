<doc>
  <source>MIT</source>
  <date>28/01/2023</date>
  <course>
    <course_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/</course_url>
    <course_title>Computing for Biomedical Scientists</course_title>
    <course_tags>
      <list>Engineering </list>
      <list>Computer Science </list>
      <list>Biological Engineering </list>
    </course_tags>
  </course>
  <lectures>
    <lecture>
      <lecture_title>Logic and Medical Ontology (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture12/</lecture_pdf_url>
      <lectureno>12</lectureno>
      <slides>
        <slide>
          <slideno>23</slideno>
          <text>Understanding Understanding  
zz AAB is different from A=BB is different from A=B 
zz A: a person is pregnant.  A: a person is pregnant. 
woman.woman. 
zz In this case, AIn this case, A B is true, A=B is not.B is true, A=B is not. 
zz Use formal logic to represent knowledge Use formal logic to represent knowledge 
of the real world, not the other way of the real world, not the other way 
around. around. B: a person is B: a person is</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Precedence of Logical OperatorsPrecedence of Logical Operators 
zz  
zz  
zz VV 
zz  
zz</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Examples of Medical KnowledgeExamples of Medical Knowledge 
zz Nitrates are a s afe and effective treatment that can be used in Nitrates are a s afe and effective treatment that can be used in 
patients with angina and left ventricular systolic dysfunction. patients with angina and left ventricular systolic dysfunction. 
zz On the basis of currently published evidence, On the basis of currently published evidence, amlo dipine amlo dipine is the is the 
calcium ch annel antagon ist th at it is safest  to use in patients calcium ch annel antagon ist th at it is safest  to use in patients with with 
heart failure and left ventricular systolic dysfunction. heart failure and left ventricular systolic dysfunction. 
zz Coronary artery bypass grafting may be indicated, in some, for Coronary artery bypass grafting may be indicated, in some, for 
relief of anginarelief of angina 
zz All patients with heart failure and angina s hould be referred fo All patients with heart failure and angina s hould be referred fo r r 
specialist assessment.specialist assessment. 
zz Patients with angina and mild to moderately symptomatic ally Patients with angina and mild to moderately symptomatic ally 
severe heart failure that i s well controlled, and who have no ot severe heart failure that i s well controlled, and who have no ot her her 
contraindications to major surgery, should be considered for contraindications to major surgery, should be considered for 
coronary artery bypass grafting  on prognostic (as well as coronary artery bypass grafting  on prognostic (as well as 
symptomatic) grounds.symptomatic) grounds.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Main TextbookMain Textbook 
zz Knowledge Representation: Logical, Knowledge Representation: Logical, 
Philosophical, and Computational Philosophical, and Computational 
FoundationsFoundations 
by by John F. John F. SowaSowa</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Inclusive Logical Or (Inclusive Logical Or ( V)V) 
TrueTrue FalseFalse TrueTrue FalseFalse FalseFalse False False 
TrueTrue TrueTrue FalseFalse 
TrueTrue TrueTrue TrueTrue A A V BV B BB AA</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>PropositionProposition 
zz A proposition is a symbolic variable whose A proposition is a symbolic variable whose 
value must be either True or False, and value must be either True or False, and 
which stands for a natural language which stands for a natural language 
statement which could be either true or statement which could be either true or 
falsefalse 
zz Examples:Examples: 
zz A = Smith has chest painA = Smith has chest pain 
zz B = Smith is depressedB = Smith is depressed 
zz C = It is raining C = It is raining</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>WFFWFF 
zz Constants:  Constants: False, TrueFalse, True 
zz Variables: Variables: P, Q, RP, Q, R 
zz If If aais WFF, is WFF, aais WFFis WFF 
zz If If aaand and bbare WFF, are WFF, aabbare WFFare WFF 
zz If If aaand and bbare WFF, are WFF, aabbare WFFare WFF 
zz If If aaand and bbare WFF, are WFF, aabbare WFFare WFF 
zz If If aaand and bbare WFF, are WFF, aabbare WFFare WFF 
zz Any formula that cannot be constructed using Any formula that cannot be constructed using 
these rules are not WFFthese rules are not WFF</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Tautology and ContradictionTautology and Contradiction 
zz Male V Male V MaleMale 
zz Tautology: proposition that is always trueTautology: proposition that is always true 
zz Healthy Healthy  HealthyHealthy 
zz Contradiction: proposition that is always Contradiction: proposition that is always 
falsefalse</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>My ResearchMy Research 
zz Semantic KnowledgeSemantic Knowledge --based Systembased System 
zz Information retrievalInformation retrieval 
zz Information integration/presentationInformation integration/presentation 
zz Consumer Information RetrievalConsumer Information Retrieval 
zz Flow Flow CytometryCytometry --based Proteomicsbased Proteomics 
zz Share Pathology Information NetworkShare Pathology Information Network</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>MotivationMotivation 
zz Representing data and knowledge for Representing data and knowledge for 
computing computing 
zz DevelopDevelop 
zz MaintainMaintain 
zz ShareShare</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Let Try An ExampleLet Try An Example 
zz Order Test A for all male over 70 , smokers with family history o Order Test A for all male over 70 , smokers with family history o f f 
cancer, and women with chronic cough and family history of cancecancer, and women with chronic cough and family history of cance r. r. 
Other wise, do not order it.Other wise, do not order it. 
(Male (Male Young) V (Smoker Young) V (Smoker  FHC) V (FHC) V ( Male Male  Cough Cough  FHC) FHC)  OrderAOrderA 
FF TT TT TT TT SmokerSmoker 
FF FF FF TT TT 
FF TT TT TT TT 
 FF TT FF TT TT TT FF TT TT TT TT TT TT TT TT Order Test AOrder Test A CoughCough FHCFHC Young(&lt;=70)Young(&lt;=70) MaleMale</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>ChallengeChallenge 
zz Philosophical differencePhilosophical difference 
zz Domain differenceDomain difference 
zz Application differenceApplication difference 
zz Developer differenceDeveloper difference 
zz LiabilityLiability 
zz CostCost</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Formalism and Conceptualization Formalism and Conceptualization 
zz Natural Language is the most expressive Natural Language is the most expressive 
form of formalism and conceptualizationform of formalism and conceptualization 
zz Conceptualization is an abstract and Conceptualization is an abstract and 
simplified view of the worldsimplified view of the world 
zz Such simplification allow computer and Such simplification allow computer and 
human alike to communicate in an human alike to communicate in an 
unambiguous fashion (e.g. and vs. &amp;)unambiguous fashion (e.g. and vs. &amp;)</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Exclusive Logical Or (   Exclusive Logical Or ( 
FalseFalse TrueTrue TrueTrue TrueTrue FalseFalse TrueTrue TrueTrue TrueTrue FalseFalse FalseFalse FalseFalse FalseFalse A       A BB AA )) 
BB</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>HomeworkHomework</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Logical Implication (Logical Implication ( )) 
FalseFalse FalseFalse TrueTrue TrueTrue FalseFalse False False 
TrueTrue TrueTrue FalseFalse 
TrueTrue TrueTrue TrueTrue A A  BB BB AA</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Truth TableTruth Table 
zz An easy way to evaluate propositionsAn easy way to evaluate propositions 
0011 00 00 00 
0000 11 11 00 
0000 11 11 11 1111 11 00 11 (A (A  B) B)  
BB BB A A  BB BB AA</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Propositional LogicPropositional Logic 
zz PropositionProposition 
zz Basic operatorsBasic operators 
zz LanguageLanguage 
zz Truth tableTruth table 
zz Boolean AlgebraBoolean Algebra</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>LogicLogic 
zz A tool for reasoningA tool for reasoning 
zz Provide basic concepts used in many Provide basic concepts used in many 
computer science fields (AI, IR, DB, etc..)computer science fields (AI, IR, DB, etc..) 
zz Used in many informatics applications Used in many informatics applications</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Medical Data and KnowledgeMedical Data and Knowledge 
zz Large varietyLarge variety 
zz Many possible representationsMany possible representations 
zz Implication of representation on Implication of representation on 
computingcomputing</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>OperatorsOperators 
zz Logic AndLogic And 
zz Inclusive OrInclusive Or 
zz Exclusive OrExclusive Or 
zz Logic NotLogic Not 
zz Logical ImplicationLogical Implication 
zz Logical EquivalenceLogical Equivalence</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Inclusive vs. ExclusiveInclusive vs. Exclusive 
zz Natural language Or can mean eitherNatural language Or can mean either 
zz Exclusive not often used (except in circuit Exclusive not often used (except in circuit 
design)design)</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Extra ReadingExtra Reading 
zz AhosAhos book chapter 12book chapter 12 
zz Sowas book p1Sowas book p1 --3939</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Let Try An ExampleLet Try An Example 
zz Order Test A for all male over 70, smokers with family Order Test A for all male over 70, smokers with family 
history of cancer, and women with chronic cough and history of cancer, and women with chronic cough and 
family history of cancer. Otherwise, do not order it.family history of cancer. Otherwise, do not order it. 
zz Male: a person being maleMale: a person being male 
zz Old: a person being over 70Old: a person being over 70 
zz Smoker: a person being a smokerSmoker: a person being a smoker 
zz Cough: a person having chronic coughCough: a person having chronic cough 
zz FHC: a person having family history of cancerFHC: a person having family history of cancer 
zz OrderAOrderA : Order Test A: Order Test A 
(Male (Male  Old) V (Smoker Old) V (Smoker  FHC) V (FHC) V ( Male Male  Cough Cough  FHC) FHC)  
OrderAOrderA</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Medical ExampleMedical Example 
zz Heart AND Lung disease: does patients Heart AND Lung disease: does patients 
have to have both? have to have both? Or either?Or either? 
zz Foot AND mouth diseaseFoot AND mouth disease : what does : what does 
ANDAND mean in this case?mean in this case? 
zz Further reading: Further reading: Mendonca Mendonca EA, EA, Cimino Cimino JJ, Campbell JJ, Campbell 
KE, KE, Spackm an Spackm an KA.KA. Evaluation of a proposed method for Evaluation of a proposed method for 
representing drug terminology. Proc AMIA representing drug terminology. Proc AMIA SympSymp . . 
1999;:471999;:47 --51. 51.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>What I Intend to CoverWhat I Intend to Cover 
zz LogicLogic 
zz Medical OntologyMedical Ontology</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Logical Not ( Logical Not (  )) 
FalseFalse TrueTrue TrueTrue FalseFalse AA AA</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Logical And Logical And  
FalseFalse FalseFalse False False 
FalseFalse TrueTrue FalseFalse 
FalseFalse FalseFalse TrueTrue 
True True TrueTrue TrueTrue A A  BB BB AA</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>ExamplesExamples 
zz Smokers are those who are currently Smokers are those who are currently 
smoking or had quit smoking for less than smoking or had quit smoking for less than 
6 months6 months 
zz A document is completed only after signed A document is completed only after signed 
by both the chief resident and the by both the chief resident and the 
attending physician. attending physician. 
zz Smith is depressed whenever it rainsSmith is depressed whenever it rains</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Logical Equivalence (Logical Equivalence ( )) 
FalseFalse FalseFalse TrueTrue TrueTrue FalseFalse False False 
FalseFalse TrueTrue FalseFalse 
TrueTrue TrueTrue TrueTrue A A  BB BB AA</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 1Lecture 1 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>WellWell--Formed FormulasFormed Formulas 
zz FormulaFormula 
zz A term (string) in prepositional logicA term (string) in prepositional logic 
zz WellWell--formed formula (WFF)formed formula (WFF) 
zz A term that is constructed correctly according A term that is constructed correctly according 
to propositional logic syntax rulesto propositional logic syntax rules</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>A Few CommentsA Few Comments 
zz Use parentheses if precedence not clearUse parentheses if precedence not clear 
zz Very similar to programming language Very similar to programming language 
operators precedenceoperators precedence 
zz Precedence in natural language depend Precedence in natural language depend 
more on context  more on context 
zz E.g. no heart and lung diseaseE.g. no heart and lung disease 
zz E.g. no family history and healthy life style.E.g. no family history and healthy life style.</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Understanding Understanding  
zz This is an operator. Although we call it imply This is an operator. Although we call it imply 
or implication, do not try to understand its or implication, do not try to understand its 
semantic from the name. We could have called it semantic from the name. We could have called it 
I and still define its semantic the same way.I and still define its semantic the same way. 
zz AAB B meansmeans  A is sufficient, but not necessary A is sufficient, but not necessary
to make B true.to make B true. 
zz E.g. Let A be E.g. Let A be having coldhaving cold  and B be and B be drink waterdrink water , A , A 
 B can be interpreted as B can be interpreted as should drink watershould drink water  when when 
having coldhaving cold . However, you can drink water even . However, you can drink water even
when you donwhen you don t have cold. Thus A t have cold. Thus A  B  B 
when A is not true.when A is not true. still is true still is true</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Boolean Algebra and Predicate Knowledge (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture13/</lecture_pdf_url>
      <lectureno>13</lectureno>
      <slides>
        <slide>
          <slideno>30</slideno>
          <text>Equational Equational ReasoningReasoning 
zz Showing two values are the same by Showing two values are the same by 
building up chains of equalitiesbuilding up chains of equalities 
zz Substitute equals for equalsSubstitute equals for equals</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Algebraic Laws of Predicate LogicAlgebraic Laws of Predicate Logic 
)(. )( )( )(. 
xfx cf cf xfx 
  
 x is any element in the universe. 
 The element c is any fixed element 
of the universe.</text>
        </slide>
        <slide>
          <slideno>40</slideno>
          <text>Examples of Medical KnowledgeExamples of Medical Knowledge 
zz Nitrates are a s afe and effective treatment that can be used in Nitrates are a s afe and effective treatment that can be used in 
patients with angina and left ventricular systolic dysfunction. patients with angina and left ventricular systolic dysfunction. 
zz On the basis of currently published evidence, On the basis of currently published evidence, amlo dipine amlo dipine is the is the 
calcium ch annel antagon ist th at it is safest  to use in patients calcium ch annel antagon ist th at it is safest  to use in patients with with 
heart failure and left ventricular systolic dysfunction. heart failure and left ventricular systolic dysfunction. 
zz Coronary artery bypass grafting may be indicated, in some, for Coronary artery bypass grafting may be indicated, in some, for 
relief of anginarelief of angina 
zz All patients with heart failure and angina s hould be referred fo All patients with heart failure and angina s hould be referred fo r r 
specialist assessment.specialist assessment. 
zz Patients with angina and mild to moderately symptomatic ally Patients with angina and mild to moderately symptomatic ally 
severe heart failure that i s well controlled, and who have no ot severe heart failure that i s well controlled, and who have no ot her her 
contraindications to major surgery, should be considered for contraindications to major surgery, should be considered for 
coronary artery bypass grafting  on prognostic (as well as coronary artery bypass grafting  on prognostic (as well as 
symptomatic) grounds.symptomatic) grounds.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>aab = b =aVbaVb 
00 00 11 11 aa 
11 11 11 11 11 11 00 00 00 11 11 11 11 11 00 11 11 11 00 00 aab = b = 
aVbaVb 
aVbaVb
aabb bb aa</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>ExampleExample 
Q FalseQ Q False Q FalseP Q P False 
= = = =  
) ( ) (</text>
        </slide>
        <slide>
          <slideno>42</slideno>
          <text>AlternativesAlternatives 
zz CaseCase--based reaso ning (Analogy) based reaso ning (Analogy) 
zz Fuzzy logicFuzzy logic 
zz NonmonotonicNonmonotonic logiclogic</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>ExerciseExercise 
zz Generate a truth table for Generate a truth table for 
) () ( b a ba</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>a a b b aa 
11 11 11 11 11 00 00 11 11 00 11 00 11 00 00 00 a a b b aa
a a bb bb aa</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>TranslationTranslation 
positiveistest pregnancya C pregnantis patienta B femaleis patienta A 
   
What does B  A mean? 
What does A  C  B mean? 
But is C a test the patient in A took?</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>a a a V ba V b 
11 11 11 11 11 11 00 11 11 11 11 00 11 00 00 00 a a a V ba V b
a V ba V b bb aa</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Scope of Variables BindingsScope of Variables Bindings 
zz Quantifiers bind variables by assigning Quantifiers bind variables by assigning 
them values from a universethem values from a universe 
zz This formula This formula 
Can be interpreted asCan be interpreted as 
Or Or 
zz Use parentheses if not clearUse parentheses if not clear )( )(. xExFx  
)( ))(.( xE xFx  
))( )((. xExFx</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Laws of Boolean AlgebraLaws of Boolean Algebra 
Distributive and Distributive and DeMorganDeMorgan s s LawsLaws 
zz a a (b V c) = (a (b V c) = (a  b) V (a b) V (a c)c) 
zz a V (b a V (b c) = (a V b) c) = (a V b)  (a V c) (a V c) 
zz  (a (a b) = b) =  a V a Vbb 
zz  (a V b) = (a V b) = a a b b</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>ExamplesExamples 
zz Women over 70 years oldWomen over 70 years old 
Women (x)   Women (x)  x is femalex is female 
senior (x) senior (x)  x is over 70 years oldx is over 70 years old</text>
        </slide>
        <slide>
          <slideno>43</slideno>
          <text>Extra ReadingExtra Reading 
zz Ahos Ahos book chapter 14book chapter 14 
zz Sowas book p467Sowas book p467 --488488</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>ExerciseExercise 
zz Prove Prove 
x.( f ( x) g( x)) 
=x. f (x)  (x.g(x)) 
=x. f (x) x.g(x) )(. )(. ))( )(.( xgx xfx xg xfx =</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Algebraic Laws of Predicate LogicAlgebraic Laws of Predicate Logic 
))( )(.( )(. )(. )( )(. ))( )(.( ))( )(.( )(. )(. ))( )(.( )(. )(. 
xgxfx xgx xfx xg xfx xgxfx xgxfx xgx xfx xgxfx xgx xfx 
=   = 
 Please note the difference between   and =</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Universe of DiscourseUniverse of Discourse 
zz Also called universe or UAlso called universe or U 
zz A set of possible values that the variables A set of possible values that the variables 
can havecan have 
zz Let U be all female, C (x, xx) mean x has Let U be all female, C (x, xx) mean x has 
XX chromosomes, then                  XX chromosomes, then 
zz Let U be all patients, C (x, xx) mean x Let U be all patients, C (x, xx) mean x 
has XX chromosomes, then                  has XX chromosomes, then 
falsefalse )"",( xxxCx 
)"",( xxxCx is trueis true 
is is</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Today We Will Talk AboutToday We Will Talk About 
zz Boolean AlgebraBoolean Algebra 
zz Predicate Logic (First order logic)Predicate Logic (First order logic)</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>Relationship to OO modelRelationship to OO model 
zz Representing patient X has Diabetes in OO Representing patient X has Diabetes in OO 
model:model: 
zz Diabetes (x)Diabetes (x) 
zz Object x has an attribute called DiabetesObject x has an attribute called Diabetes 
zz Has_Diagnosis (x, Diabetes)Has_Diagnosis (x, Diabetes) 
zz Object x has an attribute called Has_Diagnosis which can Object x has an attribute called Has_Diagnosis which can 
have value Diabeteshave value Diabetes 
zz Has (x, Diagnosis, Diabetes)Has (x, Diagnosis, Diabetes) 
zz Object x has an attribute called Has which can have value Object x has an attribute called Has which can have value 
observation, which is an object with attributes ob servation observation, which is an object with attributes ob servation 
type Diagnosis and observation value Diabetestype Diagnosis and observation value Diabetes</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Laws of Boolean AlgebraLaws of Boolean Algebra 
Operations with ConstantsOperations with Constants 
zz a a False = FalseFalse = False 
zz a V True = Truea V True = True 
zz a a True = a True = a 
zz a V False = aa V False = a</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Last Time We Talked AboutLast Time We Talked About 
zz Why is knowledge/data representation Why is knowledge/data representation 
importantimportant 
zz Propositional LogicPropositional Logic 
zz OperatorsOperators 
zz WFFWFF 
zz Truth tableTruth table</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Algebraic Laws of Predicate LogicAlgebraic Laws of Predicate Logic 
) )( .( )(. ) )( .( )(. ) )( .( )(. ) )( .( )(. )(. )( . )(. )( . 
q xfx q xfx q xfx q xfx q xfx q xfx q xfx q xfx xfx xf x xfx xf x 
 =   =   =   =  = = 
 q is a proposition that does not contain x</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>ExamplesExamples 
zz Please write a propositional logic WFF for Please write a propositional logic WFF for 
the following guideline:the following guideline: 
All women over 30 years old should have All women over 30 years old should have 
pap smear every yearpap smear every year 
w w  Over30 Over30  
pap_yearlypap_yearly 
How to convey all?How to convey all?</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Laws of Boolean AlgebraLaws of Boolean Algebra 
Laws on ImplicationLaws on Implication 
zz (a (a  (a (a  b))  b))  bb 
zz ((a ((a  b) b)  b) b)  aa 
zz ((a V b) ((a V b)  a) a)  bb 
zz ((a ((a  b) b)  (b (b  c)) c))  (a (a  c)c) 
zz ((a ((a  b) b)  (c (c  d)) d))  ((a ((a  c) c)  (b (b  d))d)) 
zz ((a ((a  b) b)  c) c)  ((a a  (b (b  c))c)) 
zz ((a ((a  b) b)  c) = c) = ((a a  (b (b  c))c)) 
zz a a  b = b = a V ba V b 
zz a a  b = b = b b  aa 
zz (a (a  b) b)  (a (a   b) = b) = aa</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>ExerciseExercise 
zz Prove PProve P(QVP) = False(QVP) = False 
False Q False Q P P Q P P P Q P PQ P 
= = = = =  
) ( ) ( ) ( ) (</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Alternatives in ModelingAlternatives in Modeling 
zz X has Diabetes:X has Diabetes: 
zz Diabetes (x)Diabetes (x) 
zz Has_Diagnosis (x, Diabetes)Has_Diagnosis (x, Diabetes) 
zz Has (x, Diagnosis, Diabetes)Has (x, Diagnosis, Diabetes) 
zz Trade off between efficiency and Trade off between efficiency and 
expressivenessexpressiveness 
zz Has (x, y, Diabetes)Has (x, y, Diabetes)</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Existential QuantificationExistential Quantification 
zz If F(x) is a wellIf F(x) is a well --formed formula containing formed formula containing 
the variable x, then                 the variable x, then --
formed called a existential quantification. formed called a existential quantification. 
For one or more x in the universe, the For one or more x in the universe, the 
predicate F(x) holds. In other words: predicate F(x) holds. In other words: 
some x has the property F.some x has the property F. )(. xFx 
)( )( )( )( )(. 2 2 1 nxF xF xF xFxFx  = K is a wellis a well</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>QuantifiersQuantifiers 
zz There are two quantifiers in predicate logic:There are two quantifiers in predicate logic: 
zz The universal quantification:The universal quantification: 
zz The existential quantification:The existential quantification:</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 2Lecture 2 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>ExamplesExamples 
zz Please write a propositional logic WFF for Please write a propositional logic WFF for 
the following eligibility criteria:the following eligibility criteria: 
a women over 50a women over 50 --year old year old and and  not on 
hormonal therapyhormonal therapy 
w w  old old   ( (hrthrt)) 
Need to define w, old, and Need to define w, old, and hrthrt</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Laws of Boolean AlgebraLaws of Boolean Algebra 
Laws on NegationLaws on Negation 
zz True = FalseTrue = False 
zz False = TrueFalse = True 
zz a a  a = Falsea = False 
zz a Va V a = Truea = True 
zz ((a) = aa) = a</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>(a (a  b) b)  (a (a   b) = b) = aa 
a Falsea b ba b a ba b a b a 
= = = =  
) ( ) () ( ) () (</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>Relationship to DBRelationship to DB 
zz Representing patient X has Diabetes in a table:Representing patient X has Diabetes in a table: 
zz Diabetes (x)Diabetes (x) 
zz A table called Diabetes with co lumn ( s) identifying patient x A table called Diabetes with co lumn ( s) identifying patient x 
and a column of the value of Diabetes (x)and a column of the value of Diabetes (x) 
zz Has_Diagnosis (x, Diabetes)Has_Diagnosis (x, Diabetes) 
zz A table called Diagnosis with column (s) identifying patient x, A table called Diagnosis with column (s) identifying patient x, 
and diagnosis y and a column of the value of Has_Diagnosis and diagnosis y and a column of the value of Has_Diagnosis 
(x, y)(x, y) 
zz Has (x, Diagnosis, Diabetes)Has (x, Diagnosis, Diabetes) 
zz A table called observation with column (s) identifying patient A table called observation with column (s) identifying patient 
x, observation type y and observation value z and a column x, observation type y and observation value z and a column 
of the value of Has (x, y, z)of the value of Has (x, y, z)</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>Different Representation of FirstDifferent Representation of First --
Order LogicOrder Logic 
zz Conceptual Graph (CG)Conceptual Graph (CG) 
zz Knowledge Interchange Format (KIF)Knowledge Interchange Format (KIF) 
zz Conceptual Graph Interchange Format Conceptual Graph Interchange Format 
(CDIF)(CDIF) 
zz ....</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Boolean AlgebraBoolean Algebra 
zz Named in honor of George Named in honor of George BooleBoole 
zz http://www.http://www. digitalcenturydigitalcentury .com/.com/ encycloencyclo /updat/updat 
e/e/booleboole .html.html 
zz Another way of reasoning with proposition Another way of reasoning with proposition 
logiclogic 
zz Is a form of Is a form of equational equational reasoningreasoning</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>ExampleExample 
False Falsexgx xf xf xgx xf xf xg x xf xg xfx xf xg xf x xf xgxf x xf xg xf x xfx xg xfx xfx xg xfx False xfx xg xfx 
= = = = = = = = =   =  
) )( .( )))( )(()( .( ))( ))( )( .(( ))( )( )(.( ))( )( ))( (.( ))( ))( )( (.( ))( ))( )((.( )(. ))( )((. )(. ))( )(.( )(. ))( )(.( Prove</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>TranslationTranslation 
positiveisx xD yoftest pregnancyaisx yxC pregnantisx xB femaleisx xA 
    
)( ),( )( )( 
)( )(. xB xAx  What does mean? 
What does mean? 
Can we say some pregnant female does not have 
positive pregnancy test results? )( )( ),( )(.. xB yDxyCxAyx</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>PredicatePredicate 
zz A predicate is a statement that an object x A predicate is a statement that an object x 
has certain propertyhas certain property 
zz E.g. F (x): F is the predicate and x is the E.g. F (x): F is the predicate and x is the 
variable F applies tovariable F applies to 
zz Any term in the form F(x), where F is a Any term in the form F(x), where F is a 
predicate name and x is a variable name, predicate name and x is a variable name, 
is a wellis a well --formed formula. Similarly, F(Xformed formula. Similarly, F(X11,, 
XX22 XXkk) is a well) is a well --formed formula; this formed formula; this 
is a predicate containing k variablesis a predicate containing k variables</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Predicate LogicPredicate Logic 
zz Extension to propositional logicExtension to propositional logic 
zz Augmented with variables, predicates and Augmented with variables, predicates and 
quantifiersquantifiers</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Laws of Boolean AlgebraLaws of Boolean Algebra 
EquivalenceEquivalence 
a a  b  b  b) b)  (b (b  a)a) = (a = (a</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>ExerciseExercise 
zz Translate the following into Predicate Translate the following into Predicate 
Logic:Logic: 
zz Some patients only speak Spanish.Some patients only speak Spanish. 
zz All doctors speak English, while some can also All doctors speak English, while some can also 
speak Spanish.speak Spanish. 
zz Spanish speaking doctors should be assigned Spanish speaking doctors should be assigned 
to patients who only speak Spanishto patients who only speak Spanish</text>
        </slide>
        <slide>
          <slideno>41</slideno>
          <text>LimitationLimitation 
zz Real world sometimes can not be Real world sometimes can not be 
represented using logicrepresented using logic 
zz Induction and deduction modelInduction and deduction model 
zz Uncertainty and probabilityUncertainty and probability 
zz Context and exceptionContext and exception</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Laws of Boolean AlgebraLaws of Boolean Algebra 
Basic properties of Basic properties of  and Vand V 
zz a a a V b    a V b 
zz a a b b aa 
zz a a a = a a = a 
zz a V a = aa V a = a 
zz a a b = b b = b aa 
zz a V b = b V a a V b = b V a 
zz (a (a b) b) c = a c = a (b (b c)c) 
zz (a V b) V c = a V (b V c) (a V b) V c = a V (b V c) Note the difference 
between   and =</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Universal QuantificationUniversal Quantification 
zz If F(x) is a wellIf F(x) is a well --formed formula containing formed formula containing 
the variable x, then                 the variable x, then --
formed called a universal quantification. formed called a universal quantification. 
For all x in the universe, the predicate F(x) For all x in the universe, the predicate F(x) 
holds. In other words: every x has the holds. In other words: every x has the 
property F.property F. 
zz )( . xFx 
)( )( )( )( )(. 2 2 1 nxF xF xF xFxFx  = K is a wellis a well</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Time Complexity of Algorithms (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture10/</lecture_pdf_url>
      <lectureno>10</lectureno>
      <slides>
        <slide>
          <slideno>22</slideno>
          <text>Analyzing a programs running time
 Binary search iterative algorithm analysis (board)</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Analyzing a programs running time
T1(n) = 40*n + 10
T2(n) = 3*n2
If program 1 and 2 are two different methods for 
finding a patient ID within the database of a small practice with 12 patients (i.e., n = 12) which program would you choose? 
Would your choice be different if you knew that the 
practice would expand to include up to 100 patients?</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Analyzing a programs running time
Formally:
T(n) is O(f(n)) if there exists a non-negative integer 
n0 and a constant c &gt; 0 such that 
for all integers n &gt;= n0, T(n) &lt;= c*f(n) 
For program 1 in our previous example T(0) = 10, 
T(1) = 50, and T(n) = 40n + 10 generally.  We can say
that T(n) is O(n) because for n
0= 10, n &gt;= n0 and c = 41,
40n + 10 &lt;= 41n 
(this is because for n&gt;=10, 40n + 10 &lt;= 40n + n)</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Analyzing a programs running time
	The precise running time of a program depends on 
the particular computer used. Constant factors for a 
particular computer include:
 the average number of machin e language instructions the 
assembler for that computer produces 
 the average number of machin e language instructions the 
computer executes in one second 
	The Big-Oh notation is designed to help us focus on 
the non-constant portions of the running time
	Instead of saying that the factorial program studied 
has running time T(n) = 5n + 6, we say it takes O(n) 
time (dropping the 5 and 6 from 5n + 6)</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Analyzing a programs running time
Common program running times and their names:
Big-Oh Informal name Example weve seen 
O(1) constant time 
O(log n) logarithmic time binary search 
O(n) linear time sequential search 
O(n log n) n log n time merge sort 
O(n2) quadratic time selection sort 
O(n3) cubic time 
O(2n) exponential time</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Analyzing a programs running time
Imagine that for a problem we have a choice of 
using program 1 which has a running time 
T1(n) = 40*n + 10 
and program 2 which has a running time of 
T2(n) = 3*n2 
Lets examine what this means for different values of n</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Analyzing a programs running time
	Program 2 has a running time that increases fairly 
quickly as n gets larger than 12
	Program 1 has a running ti me that grows much more 
slowly as n increases 
	Even if the speed of the computer hardware on which 
we are running both programs doubles, T1(n) remains 
a better choice than T2(n) for large n 
	For large collections of data such as can be found in 
electronic medical records, etc. improving hardware 
speeds is no substitute for improving the efficiency 
of algorithms that may need to manipulate the data in 
such collections</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Analyzing a programs running time
T h e worst-case running time is the maximum possible 
running time on any input of size n 
T h e average-case running time is the average running 
time of a program over all possible inputs of size n
 this is often a more realistic measure of 
performance than worst-case running time
 it is much harder to compute than worst-case time
 it assumes that each possible input of size n is 
equally likely (this is often untrue) 
	The best-case running time is the minimum possible 
running time on any input of size n</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Analyzing a programs running time
	In many cases, the running time of a program 
depends on a particular type of input, not just 
the size of the input
 the running time of a factorial program depends 
on the particular number whose factorial is being 
sought because this determines the total number of multiplications that need to be performed 
 the running time of a search program may depend 
on whether the value being sought occurs in the 
collection of items to be searched 
	In these cases, we define T(n) to be the worst-
case running time</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Outline
 Time complexity of algorithms</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Time complexity of algorithms
	As can be seen from searching and sorting examples, 
different algorithms may exist for a particular 
problem 
	In order to choose an algorithm for solving the 
problem we often need to consider its performance 
 how quickly it runs 
 whether it uses computing resources efficiently
	This means that we need to be able to measure and 
compare the performance of different algorithms for the same problem</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Analyzing a programs running time
For program 2 in our previous example T(0) = 0, 
T(1) = 3, and T(n) = 3n2 generally. We can say 
that T(n) is O(n2) because for n0= 0, n &gt;= n0 and c = 3, 
3n2 &lt;= 3n2</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Analyzing a programs running time
Lets analyze the running time of the 
factorial program fragment below: 
findFactorial(n) {
int factorial = 1; // set initial value of factorial to 1
int iterator = 1; // set initial value of loop iterator to 1
while (iterator &lt;= n) {
factorial = factorial * iterator; 
iterator = iterator + 1; 
} // end of while () System.out.println("The factorial is " + factorial); 
}</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Analyzing a programs running time
	The worst-case running time is what is most 
commonly used to measure a programs running time 
	To assess the running time, we have to accept the idea 
that certain programming operations take a fixed 
amount of time (independent of the input size): 
	arithmetic operations (+, -, *, etc.) 
	logical operations (and, or, not) 
	comparison operations (==, &lt;, &gt;, etc.)
	array/vector indexing 
	simple assignments (n = 2, etc.) 
	calls to System methods such as println</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Time complexity of algorithms
	When you need to write a program that is used 
only once on small amounts of data 
 okay to select the easiest to implement algorithm 
 When you need to write a program that needs to 
be reused many times other issues may arise
 how much times does it take to run it? 
 how much storage space do its variables use?
 how much network traffic does it generate? 
	For large problems the running time is what 
really determines whether a program should be 
used</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Time complexity of algorithms
 To measure the running time of a program, we
 Select different sets of inputs that it should be 
tested on (for benchmarking ). Such inputs may 
correspond to 
 the easiest case of the problem that needs to be solved 
 the hardest case of the problem that needs to be solved 
 a case that falls between these two extremes 
 Analyze its running time on the set of inputs 
 The Big-Oh notation is a measure that is used in 
estimating this 
 We will focus on analysis of running time</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Analyzing a programs running time
T1(n) = 40*n + 10
T2(n) = 3*n2
Running times for T1(n) and T2(n): 
n T1(n) T2(n) 
1 50 3 
2 90 12 
 
10 410 300 
 
13 530 507 
14 570 588 
15 610 675 
... 
20 810 1200 
21 850 1323 
22 890 1452</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 10</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Analyzing a programs running time
The Big-Oh notation allows us to 
 ignore unknown constants associated with the computer 
 make simplifying assumptions about the amount of time 
used up by an invocation of a simple programming 
statement 
If 
 f(n) is a mathematical function on the non-negative integers 
(i.e., n = 0,1,2,3,4,5,), and 
 T(n) is a function with a non-negative value (possibly 
corresponding to the running time of some program)
We say that 
T(n) is O(f(n)) if T(n) is at most a constant times f(n) for 
most values of n greater than some base-line n0</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Read
Foundations of Computer Science by Aho and 
Ullman 
 Chapter 2 
 Chapter 3</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Recap: Sorting
	Selection sort is one of the easiest sorting 
methods to understand and code 
	Interchanges smallest number in unsorted 
portion of an array with first location in 
unsorted portion of array 
	It is not the most efficient sorting method
	Merge sort uses a divide-and-conquer 
strategy for sorting 
	More efficient than selection sort</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Analyzing a programs running time
	First we determine the size of its input 
 for a program that sorts n numbers, n is the size of its input 
	We use the function T(n) to represent the number of 
units of time taken by the program on an input of size n 
	Example: a sequential search program on an input of 
size n has a running time
T(n) = c*n
	c is a constant (greater than 0)
 sequential search has a running time that is linearly 
proportional to the size of its input: it is a linear time
algorithm</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Recap: Searching 
	Linear search is most appropriate for searching through a 
collection of unsorted items 
	It is not very efficient, but is easy to program
	Binary search is a more efficient search method than linear 
search 
	It works for arrays/collections that are already sorted (is 
essentially the strategy that humans use for searching a phone 
book or dictionary) 
	this strategy is often called a divide-and-conquer strategy 
	Strategy for searching for a name in one section of a phone 
book is the same as initial strategy for searching for the name in the entire phone book 
	This implies that we can solve the binary search problem 
using recursion</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Analyzing a programs running time
findFactorial(n) {
int factorial = 1; // set initial value of factorial to 1
int iterator = 1; // set initial value of loop iterator to 1
while (iterator &lt;= n) {
factorial = factorial * iterator; 
iterator = iterator + 1;
} // end of while ()
System.out.println("The factorial is " + factorial);
}
	We perform two variable initializati ons and two assignments before the 
while loop 
	We check the loop condition n+1 times 
	We go into the while loop n times 
	We perform two assignments, and two arithmetic operations each time 
	We perform one print statement 
	The running time, T(n) = 4  + (n+1) + n*(4) + 1 
T(n) = 5n + 6</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Recursion and Iteration, Imperative &amp; Declarative Programming, Abstract Data Types (ADTs), Arrays, and Classes, Object &amp; Methods (continued) (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture5/</lecture_pdf_url>
      <lectureno>5</lectureno>
      <slides>
        <slide>
          <slideno>55</slideno>
          <text>Testing Two 
Arrays for 
Equality 
	To test two arrays for 
equality you need to
define an equals
method that returns 
true if and only if the 
arrays have the same length and all corresponding values 
are equal 
	This code shows an 
example of such an
equals method. ) 
{
)
;
 {
 //
;
 { 
; 
;
 }
 }
; 
} public static boolean equa ls(int[] a, int[] b
 boolean match;
 if (a.length != b.length
 match = false
 else
 match = true; tentatively
 int i = 0
 while (match &amp;&amp; (i &lt; a.length))
if (a[i] != b[i])
 match = false
i++
 return match</text>
        </slide>
        <slide>
          <slideno>49</slideno>
          <text>Array Names as Method Arguments
When using an entire array as an argument to a 
method: 
 use just the array name and no brackets (this passes 
the memory address of the arrays first element)
 as described in the previous slide, the method has 
access to the original array contents and can change 
the value of its elements 
 the length of the array passed can be different for 
each call 
 when you define the function you do not know the 
length of the array that will be passed 
 so use the length attribute inside the method to avoid 
ArrayIndexOutOfBoundsException s</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Testing a Method
 Top down
 test method A and use a stub for method B 
A stub is a method that stands in for the final version 
and does little actual work. It usually does something 
as trivial as printing a message or returning a fixed 
value. The idea is to have it so simple you are nearly 
certain it will work.</text>
        </slide>
        <slide>
          <slideno>53</slideno>
          <text>Using = with Array Names:
Remember They Are Reference Types
int[] a = new int[3]; 
b = a; 
a[2] = 10; 
2 2
10 10
int[] b = new int[3]; for(int i=0; i &lt; a.length; i++) 
a[i] = i;
System.out.println(a[2] + " " + b[2]);
System.out.println(a[2] + " " + b[2]); 
The output for this code will be: This does not create a 
copy of array a
b another way of 
associated with array a. 
If we change a stored value using a,we retrieve the 
changed value when we use b for access ; it makes 
accessing the values</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Recursion
	Involves choosing a sub-problem that is of the 
same form as the main problem 
 To avoid an infinite number of steps with a 
recursive strategy, must define a base case
	A base case is one for which there is no sub
problem, no further work needs to be done for a 
Note: may have more than one base casebase case as with the Fibonacci numbers problem 
(in the factorial example, the base case is finding the 
factorial of 0 -- simply return the value 1) 
	Basis for recursion is mathematical induction</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Factorial example revisited (recursion)
/* This class implements an imperative programming solution to the 
factorial problem using recursion. 
factorial(n) = n * factorial(n - 1) and  factorial(0) = 1 */
public class RecursiveFactorial{
private int factorial = 1;
public int findFactorial(int number)
{ // this method returns the value of the factorial of number
if (number == 0) {
// the factorial of 0 is 1 (base case)
return factorial; 
} 
Example continued on next slide</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Formalized Abstraction: ADTs
To create ADTs in Java that ar e used by others via an API: 
	Use the private modifier when declaring instance 
variables 
D o not give the user the class definition (.java) file
	Do give the user the interface - a file with just the class 
and method descriptions and headings 
 the headings give the names and parameters of the 
methods 
 it tells the user how to use the class and its methods
 it is all the user needs to know 
 the Java utility javadoc can be used to create the 
interface description file</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>Some Array Terminology
temperature [n + 2] 
temperature[ n + 2] 
temperature[n + 2] Array name 
Index subscript 
int, 
an int 
Indexed variable 
element or subscripted variable 
Value of the indexed variable - also called a 
- must be an 
- or an expression that evaluates to 
- also called an 
- also called an element of the array 
temperature[n + 2] = 32; 
Note that "element" may refer to either a single indexed 
variable in the array or the value of a single indexed variable.</text>
        </slide>
        <slide>
          <slideno>57</slideno>
          <text>Read
 Chapter 5 -- sections 5.1 - 5.7
 Chapter 6 -- sections 6.1 - 6.2</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Factorial example revisited (iteration)
/* This class implements an imperative programming solution to the 
factorial problem using iteration 
factorial(n) = n * factorial(n - 1) and factorial(0) = 1 */ 
public class IterativeFactorial{ 
public static void main(String[] args) { 
int factorial = 1; // set initial value of factorial to factorial(0) int iterator = 1; // set initial value of loop iterator to 1 int n = 5; // number whose factorial we are finding 
Example continued on next slide</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>Using Constructors
	The keyword new must precede a call to a 
constructor 
	If you want to change values of instance 
variables after you have created an object using 
a constructor, you must use other methods (e.g. defined set methods) for the object 
 you cannot call a constructor for an object after it is 
created 
set methods should be provided for the purpose of 
changing values of instance variables</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Constructor Example
public class Person
{ 
private String firstName;
private String lastName;
private GregorianCalendar dateOfBirth; 
. . . 
public Person(String fName)
{ 
firstName = fName; 
lastName = null; 
dateOfBirth = null; 
} 
Sample use: Null is a special constant that 
be assigned to any variable of 
any class type. It is a place
holder for an objects address 
Person person1 = new Person(Eric);</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Creating Arrays
 General syntax for declaring an array:
Base_Type[] Array_Name = new 
Base_Type[Length];
 Examples:
80-element array with base type char :
char[] symbol = new char[80];
100-element array of doubles:
double[] realNums = new double[100];
90-element array of type Person :
Person[] people = new Person[90];</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 5</text>
        </slide>
        <slide>
          <slideno>42</slideno>
          <text>Subscript Range
 Array subscripts use zero-numbering 
 the first element has subscript 0 
 the second element has subscript 1 
 etc. - the nth element has subscript n-1 
 the last element has subscript length-1 
 For example: 
int[] scores = {97, 86, 92, 71}; 
Subscript: 0 1 2 3 
Value: 97 86 92 71</text>
        </slide>
        <slide>
          <slideno>48</slideno>
          <text>When Can a Method Change an 
Indexed Variable Argument?
Remember: 
 primitive types are call-by-value
 only a copy of the value is passed as an argument in a method 
call 
 so the method cannot change the value of the indexed variable
 class types are reference types; they pass the address of 
the object when they are an  argument in a method call
 the corresponding argument in the method definition becomes 
another means of accessing the objects contents (another 
key for the same mailbox) 
 this means the method has access to the objects contents
 so the method can change the values associated with the 
indexed variable if it is a class (and not a primitive) type</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Testing a Method
	Test programs are sometimes called driver programs
	Keep it simple: test only one new method at a time 
 driver program should have only one untested  
method 
	If method A uses method B, there are two 
approaches: 
	Bottom up 
 test method B fully before testing A</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Overloading and Argument Type
 You want to set the pet's weight to 6 pounds:
set(6.0) works as you want because the 
argument is type double 
set(6) will set the age to 6, not the weight, 
since the argument is type int 
	If Java does not find a signature match, it 
attempts some automatic type conversions, 
e.g. int to double
	An unwanted version of the method may 
execute</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Iteration
 Iteration strategy: By doing a little bit of work 
first, transform your problem into a smaller one 
with the same solution. Then solve this smaller 
problem
e.g.: to find 52!, first multiply two of the 53 numbers to be 
multiplied and store their product.  Now there are only 52 numbers 
to multiply (including the stored product) and 51 multiplications 
left to do. Multiply the stored product with another number from 
the remaining 52. Now there are only 51 numbers to multiply. 
Repeat this process of multiplying the product to a number until 
there is only one number remaining (the factorial) and there are 
zero multiplications left to do.</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Constructors
Aconstructor is a special method designed to 
initialize instance variables 
	Automatically called when an object is created using 
new 
	Has the same name as the class 
	Often overloaded (more than one constructor for the 
same class definition) 
 different versions to initialize all, some, or none 
of the instance variables 
 each constructor has a different signature (a 
different number or sequence of argument types)</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Defining Constructors
	Constructor headings do not include the word 
void 
	In fact, constructor headings do not include a 
return type 
	A constructor with no parameters is called a 
default constructor 
 If no constructor is provided by the class creator, 
Java automatically creates a default constructor
 If any constructor is provided, then no constructors 
are created automatically</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Constructor Example
public Person()
{ 
firstName = null; 
lastName = null; 
dateOfBirth = null; 
} 
Sample use: 
Person person4 = new Person();
This is the default constructor</text>
        </slide>
        <slide>
          <slideno>40</slideno>
          <text>Array Length
	The array length can be read with the instance
variable length, e.g. the following code 
displays the number 20 (the size, or length of the 
Person array, morePeople): 
Person[] morePeople = new Person[20];
System.out.println(morePeople.length);
	The length attribute is established in the 
declaration and cannot be changed unless the 
array is redeclared</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Formalized Abstraction: ADTs
	Method definitions are usually public but specific 
implementation details are always hidden from the user 
	The user cannot see or change the implementation
	The user only sees the interface, also called the 
application programmer interface (API) 
	Prevents programming errors (e.g., user inadvertently 
changing the value of a public instance variable by 
using = instead of == for a comparison) 
	Sharing API spares an end user from having to read 
through source code to understand how a classs 
methods work</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Formalized Abstraction: ADTs
ADT: Abstract data type
	A data type (in Java, a class) that is written using good 
information hiding/encapsulation techniques 
	This Object-Oriented approach is used by several 
languages 
	An ADT provides a public user interface so the user 
knows how to use the class 
 user interface has descriptions, parameters, and names of 
the classs methods 
	Changes to a class implementation should not affect 
code that uses the class</text>
        </slide>
        <slide>
          <slideno>47</slideno>
          <text>public static void main(String arg[]) Indexed 
{ 
String scoreString = Variables JOptionPane.showInputDialog( Enter your grade\n );
 int firstScore = Integer.parseInt(scoreString);as Method 
Arguments ] 
;
 ( ; ) 
[i]
 ( ; ) 
{ 
); 
} 
}
( ) 
{
; 
} nextScore is 
an array of 
ints 
an element of 
nextScore is 
used as an 
argument of 
method average 
average
method definition Modification of ArgumentDemo  int[ nextScore = new int[3];
 int i
 double possibleAverage;
 for i = 0; i &lt; nextScore.length  i++
nextScore  = 80 + 10*i;
 for i = 0; i &lt; nextScore.length  i++
possibleAverage = average(firstScore, nextScore[i]); 
System.out.println("If your score on exam 2 is " 
+ nextScore[i]);
 System.out.println("your average will be " 
+ possibleAverage
 public static double average int n1, int n2
 return (n1 + n2)/2.0
program in text</text>
        </slide>
        <slide>
          <slideno>50</slideno>
          <text>Example: An Array as an Argument
in a Method Call
public static void
showArray(char[] a) 
{ 
int i; 
for(i = 0; i &lt; a.length; i++) 
System.out.println(a[i]);
} the method's argument is 
the name of an array of characters 
uses the length attribute 
to control the loop allows different size arrays and avoids index-out-of-bounds exceptions</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Overloading and Argument Type
 set(String, int, double) sets the pet's 
name, age, and weight 
 set("Scamp", 2, 3) 
 it sets the pet's age = 2 and the weight = 3.0 
W h y ? 
set has no definition with the argument types 
String, int, int 
 However, it does have a definition with String, 
int, double, 
so it promotes the last number, 3, to 3.0 and 
executes the method with that signature</text>
        </slide>
        <slide>
          <slideno>54</slideno>
          <text>Using == with Array Names:
Remember They Are Reference Types
int i; 
int[] a = new int[3];
int[] b = new int[3];
for(i=0; i &lt; a.length; i++)
a[i] = 0;
for(i=0; i &lt; b.length; i++)
b[i] = 0;
if(b == a)
System.out.println("a equals b");
else 
System.out.println("a does not equal b"); a and b are both 
3-element arrays of ints 
all elements of a and b are 
assigned the value 0 
tests if the 
of a 
and b are equal, 
not if the array 
The output for this code will be " a does not equal b " 
because the addresses referenced by the arrays are not the same. addresses 
values are equal</text>
        </slide>
        <slide>
          <slideno>56</slideno>
          <text>Methods 
that Return 
an Array 
	Yet another example 
of passing a 
reference 
	Actually, it is the 
address of the array 
that is returned 
	The local array name 
within main 
provides another way of accessing the 
contents of the 
original array {
( [])
 { 
[] c;
;
( ; ;
; 
} 
]
{ 
[] [
[ ; 
[ ; 
[
[
[
; 
} 
} c, newArray , and 
the return type of 
vowels are 
all the same type: 
char array public class returnArrayDemo 
 public static void main String arg
char
 c = vowels()
 for int i = 0 i &lt; c.length  i++)
   System.out.println(c[i])
public static char[  vowels() 
char  newArray = new char 5]; 
newArray 0] = 'a'
newArray 1] = 'e'
newArray 2] = 'i'; 
newArray 3] = 'o'; 
newArray 4] = 'u'; 
return newArray</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Factorial example revisited (iteration)
while (iterator &lt;= n) {
/* set the new value of the vari able factorial to its current 
factorial = factorial * iterator++; 
} // end of while () iterator incremented after 
its old value has been used value times the value of the iterator */ 
// print out the value of n factorial 
System.out.println("The factorial of " + n + " is " + factorial); 
} // end of main 
} // end of class IterativeFactorial</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Constructor Example 
{ 
dateOfBirth = null; 
} Sample use: public Person(String fName, String lName) 
firstName = fName; 
lastName = lName; 
Person person2 = new Person(Eric,LeRouge);
{ 
dateOfBirth = dob; 
} Sample use: 
Person person3 = new Person(Eric,LeRouge,
new GregorianCalendar(1965, 8, 21, 0, 0, 0)); public Person(String fName, String lName, 
GregorianCalendar dob) 
firstName = fName; 
lastName = lName;</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Factorial example revisited (iteration)
Trace of solution for the number 5 
(factorial and iterator are initially 1):
factorial iterator
1 2
2 3
6 4
After first pass 
through while loop 
Second time through while loop 
24 5 
120 6 Fifth time through while loop 
while (iterator &lt;= n) 
{ 
} factorial = factorial * iterator++;</text>
        </slide>
        <slide>
          <slideno>41</slideno>
          <text>Initializing an Array's Values
in Its Declaration
	Array elements can be initialized in the declaration 
statement by putting a comma -separated list in braces 
	Uninitialized elements will be assigned some default 
value, e.g. 0 for int arrays 
	The length of an array is automatically determined 
when the values are explicitly initialized in the 
declaration 
	For example:
double[] realNums = {5.1, 3.02, 9.65};
System.out.println(realNums.length);
-d i s p l a y s 3, the length of the array realNums</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Signature
 myMethod(10, 1.2) has a different signature 
than myMethod(1.2, 10) 
 same method name and number of arguments, 
but different order of argument types : 
(int, double) vs. (double, int)</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Method Overloading
	The same method name has more than one 
definition within the same class 
	Each definition must have a different signature
 different argument types, a different number of 
arguments, or a different ordering of argument 
types 
 The return type is not part of the signature and 
cannot be used to distinguish between two 
methods with the same name and parameter 
types</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Factorial example revisited (recursion)
Declarative approach (definition using Scheme):
(define (factorial n)
(if (= n 0) 1
(* n (factorial (- n 1)))))
; applying factorial to a particular number: 
(factorial 5) 
;Value: 120</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>Three Ways to Use [ ] (Brackets)
with an Array Name
1. To create a type name, e.g. int[] pressure; creates a name 
pressure with the type " int array" 
 note that the types int and int array are different 
 int array is the type of the name pressure 
 the type of the data that can be stored in pressure is int 
2. To create a new array, e.g. pressure = new int[100];
3. To name a specific element in the array
- also called an indexed variable , e.g.
pressure[3] = 55;
System.out.println("You entered" +
pressure[3]);</text>
        </slide>
        <slide>
          <slideno>52</slideno>
          <text>Arguments for the Method main
	The following main method in the class 
TestProgram will print out the first two 
arguments it receives: 
{ 
System.out.println(Hello  + args[0] +   + args[1]);
} public static void main(String[] args) 
	In this example, the output from the command line 
above will be: 
Hello Josephine Student</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Outline
	Recursion and iteration
	Imperative and declarative programming 
revisited (the factorial problem) 
	Encapsulation/information hiding and Abstract 
Data Types (ADTs) 
	Classes, objects, and methods continued
	Arrays</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Arrays
	An array: a single name for a collection of data values, 
all of the same data type 
(it is a collection of variables that have the same type) 
	Arrays are a carryover from earlier programming 
languages (e.g. C, C++) 
	Array: more than a primitive type, less than an object
 they work like objects when used as method arguments 
and return types (i.e., arrays are reference types) 
	they do not have or use inheritance
 they are sort of like a Java class that is not fully 
implemented
	Arrays are a natural fit for loops, especially for loops</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Factorial example revisited (iteration)
public class IterativeFactorial2{
public static void main(String[] args)
{
int n = 5; // num ber whose factorial we are finding 
int factorial = n; // set initial value of factorial to n 
int iterator = n; // set initial value of loop iterator to n 
while (iterator &gt; 1) { 
/* set the new value of factorial to its current value 
times the value of the iterator */ 
factorial = factorial * --iterator; 
} // end of while () 
System.out.println("The factorial of " + n + " is " + factorial); 
} // end of main 
} // end of class IterativeFactorial2 iterator decremented before 
its old value has been used</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Factorial example revisited
	Both examples shown above are imperative 
programming approaches to solving the factorial 
problem (using recursion and iteration) 
	The declarative approach to the problem given 
in lecture 1 follows (uses recursion)</text>
        </slide>
        <slide>
          <slideno>45</slideno>
          <text>Arrays, Classes, and Methods
An array of a class can be declared
and the class's methods applied to
the elements of the array. 
public void printFirstNames() 
{ 
int numberOfPeople = 50; 
Person[] people = new Person[numberOfPeople]; 
for (int i = 0; i &lt; numberOfPeople; i++) 
{
 people[i] = new Person();
//readInfo allows us to set the attributes of a person
people[i].readInfo();
//writeInfo allows us to print the attributes of a person
System.out.println(people[i].writeInfo());
} 
} each array element is 
a Person instance 
variable 
use the readInfo 
method of Person create an array of Person s 
use the writeInfo 
method of Person</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Recursion and Iteration
	Some methods have a fixed number of steps        
(e.g. a method that uses multiplication to square a 
number n will use one multiplication no matter how 
large n is) 
	Other methods have steps whose size depend on 
the value of their parameters 
	Recursion strategy: do nearly all the work first; 
then there will only be a little left to do 
e.g.: to find 52!, have to multiply 53 numbers together, 
which requires 52 multiplications. First find 51! 
multiply 52 numbers - and there is only one 
multiplication left to be done</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Overloading and Argument Type
Still using the Pet example of overloading: 
	What you want: name  "Scamp", weight 2, and age 3
	But you make two mistakes: 
1. you reverse the age and weight numbers, and
2. you fail to make the weight a type double
	Remember: set(String, int, double) 
sets the pet's name, age, and weight 
 set("Scamp", 2, 3) does not do what you 
want</text>
        </slide>
        <slide>
          <slideno>44</slideno>
          <text>Initializing Array Elements in a Loop
 Array processing is easily done in a loop 
Afor loop is commonly used to initialize array elements
E x a m p l e : 
int i;//loop counter/array index
int[] a = new int[10];
for(i = 0; i &lt; a.length; i++)
a[i] = 0;
 note that the loop counter/array index goes from 0 to 
length - 1 
 it counts through length = 10 iterations/elements 
using the zero-numbering of the array index</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Defining Constructors
Programming Tip
 Include a constructor that initializes all 
instance variables 
 Include a constructor that has no     
parameters (that is, include your own 
default constructor)</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>Array Length
	The length of an array is specified by the
number in brackets when it is created with new 
 it determines the amount of memory allocated 
for the array elements (values) 
 it determines the maximum number of elements 
the array can hold 
 storage is allocated whether or not the elements 
are assigned values</text>
        </slide>
        <slide>
          <slideno>46</slideno>
          <text>Arrays and Array Elements
as Method Arguments
Arrays and array elements can be used with 
classes and methods just like other objects
	both an indexed element and an array name 
can be an argument in a method 
	methods can return an array value or an 
array name</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Factorial example revisited (recursion)
else {
// the factorial of n is n * factorial(n - 1)
factorial = number * findFactorial(number - 1);
return(factorial); 
} 
} // end of findFactorial method 
public static void main(String[] args) { 
int n = 5; // number for which we are finding the factorial 
/* Since main is a static method, it cannot call findFactorial() directly 
Create a new RecursiveFactorial object in order to call findFactorial() */ 
RecursiveFactorial fact = new RecursiveFactorial(); 
System.out.println("The factorial of " + n + " is "  + fact.findFactorial(n)); 
} 
} // end of class RecursiveFactorial</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Signature
	The combination of meth od name and number and 
types of arguments, in order 
equals(Person) has a different signature than 
equals(String) 
 same method name, different argument types
 myMethod(1) has a different signature than 
myMethod(1, 2) 
 same method name, different number of 
arguments</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Factorial example revisited (iteration)
Trace of solution for the number 5 
(factorial and iterator are initially 5):
factorial iterator 
20 4 
60 3 
120 2 
120 1 After first pass 
through while loop 
Since we know that factorial(1) = 1, we could set the boolean expression in the while loop to (iterator &gt;=2) and save two multiplications 
over the previous example while loop 
Fourth time through 
while loop 
while (iterator &gt; 1) 
{ 
factorial = 
} Third time through 
factorial * --iterator;</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Overloading and Argument Type
	Accidentally using the wrong datatype as an 
argument can invoke a different method than 
desired 
	For example, say we have defined a Pet class 
(theres one defined in the Java text) 
set(int) sets the pet's age in whole years 
set(double) sets the pet's weight in 
pounds 
set(String, int, double) sets the 
pet's name, age, and weight</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Encapsulation/Information Hiding
One of the 3 cornerstones of object-oriented programming
	use classes and objects 
for programming 
	objects include both 
data items and methods 
to act on the data 	protect data inside an 
object (do not allow 
direct access) 
u s e private modifier 
for instance variable 
declarations 
u s e public methods to 
access data</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Programming Tips for
Writing Methods
U s e public and private modifiers judiciously
 If a user will need the method, make it part of the 
interface by declaring it public 
 If the method is used only within the class definition 
(i.e., it is a helper method, then declare it private) 
	Create a main method with diagnostic (test) code 
within a class's definition 
 run just the class to execute the diagnostic program 
(to make sure that it works the way it ought to) 
 when the class is used by another program the class's 
main is ignored</text>
        </slide>
        <slide>
          <slideno>43</slideno>
          <text>Subscript out of Range Error
	Using a subscript larger than length-1 causes 
a run time (not a compiler) error 
a n ArrayOutOfBoundsException is thrown 
	you do not need to catch this exception 
	you need to fix the problem and recompile your code 
	Some programming languages, e.g. C and C++, 
do not even cause a run time error 
 one of the most dangerous characteristics of these 
languages is that they allow out of bounds array 
indexes</text>
        </slide>
        <slide>
          <slideno>51</slideno>
          <text>Arguments for the Method main
	The heading for the main method shows a 
parameter that is an array of Strings: 
public static void main( String[] args ) 
	When you run a program from the command 
line, all words after the class name will be 
passed to the main method in the args array: 
java TestProgram Josephine Student</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Built-in Operators, Built-in Java Classes, and Classes, Objects &amp; Methods (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture4/</lecture_pdf_url>
      <lectureno>4</lectureno>
      <slides>
        <slide>
          <slideno>40</slideno>
          <text>Variables: Class Type vs. Primitive 
Type
	A class type variable holds the memory address 
of the object 
 the variable does not actually hold the value of the 
object 
 in fact, as stated above, objects generally do not 
have a single value and they also have methods, so it 
does not make sense to talk about an objects 
"value"</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>The StringBuffer Class
	Implements a modifiable sequence of characters
 the length and content of the sequence of characters can be 
modified using its methods 
 has many of the same methods as the String class and a few 
more (append, insert, replace) 
	To create a new StringBuffer object that initially 
represents the string rue and assign it to a variable 
strBuffer, of type StringBuffer, write 
StringBuffer strBuffer = new StringBuffer(rue); 
// illegal to write StringBuffer strBuffer = rue 
or write
String str = rue;
StringBuffer strBuffer = new StringBuffer(str);</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Return Type of Methods
	As seen in previous slides, some methods 
perform an action and return a single value 
	Some methods just perform an action (e.g. print 
a message) and do not return a value 
	All methods require that the return type be 
specified 
	Return types may be: 
 a primitive data type, such as char , int, double 
 a class, such as String, Person, etc.
void if no value is returned</text>
        </slide>
        <slide>
          <slideno>49</slideno>
          <text>Class Type as a Method Argument
//Method definition with a DemoSpecies class 
//parameter
public void makeEqual(DemoSpecies otherObject) { 
otherObject.name = this.name;
otherObject.population =
this.population;
otherObject.growthRate =
this.growthRate;
} 
//Method invocation
DemoSpecies s1 = new
DemoSpecies("Crepek", 10, 20);
DemoSpecies s2 = new DemoSpecies(); 
s1.makeEqual(s2);</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Increment and Decrement Operators
	Shorthand notation for common  arithmetic operations on 
integer variables used for counting 
	Some counters count up, some count down
	The counter can be incremented (or decremented) before 
or after using its current value 
int count; 
++count; //preincrement count: count = count + 1 before using it 
count++; //postincrement count: count = count + 1 after using it 
--count; //predecrement count: count = count -1 before using it 
count--; //postdecrement count: count = count -1 after using it</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Increment and Decrement Operators
Example:
int x = 5;
int y = 5;
int result;
What will be the value of result after each of
these executes? (assume each line is independent of
the other)
(a) result = x / ++y; 
(b) result = x / y++; 
(c) result = x + --y; 
(d) result = x + y--;</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Returned Values
	Expressions return values: a number, character, etc. 
produced by an expression is returned, (it is the 
return value.) 
int firstNumber, secondNumber, 
productOfNumbers;
firstNumber = 5;
secondNumber = 9;
productOfNumbers = firstNumber * 
secondNumber;
(in the last line, firstNumber returns the value 5 
and secondNumber returns the value 9)</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Instantiating (Creating) Objects
	Private instance variables cannot be modified/accessed in 
this way: 
newPerson.firstName = BElanna; //illegal
	Define public get and set me thods in class Person to 
retrieve and modify values of private instance variables: 
	public String getFirstName() 
	public void setFirstName(String fName) 
	public String getLastName() 
	public void setLastName(String lName) 
	To set first and last name instance variables: 
	newPerson.setFirstName(BElanna);
	newPerson.setLastName(Torres);</text>
        </slide>
        <slide>
          <slideno>45</slideno>
          <text>Assignment with
Variables of a Class Type
	A class variable returns a number 
corresponding to the memory address where 
the object with that variable name is stored 
	If two class variables are compared using ==, 
it is their addresses , not their values that are 
compared! 
	This is rarely what you want to do!
 Use the class's .equals() method to 
compare the values of class variables</text>
        </slide>
        <slide>
          <slideno>56</slideno>
          <text>Static Variables
	Example of a static variable definition: 
private static int numTries = 0; 
 Similar to definition of a named constant, 
which is a special case of static variables.
	Static variables may be public or private but 
are usually private for the same reasons 
instance variables are.</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Variable Declaration
	Declaring variables outside all blocks but within a 
method definition makes them available within all the 
blocks in that method: 
public void printSomeValue(int n)
{ 
int i=0; // i is available in a ll blocks (including if and while) 
if (i &lt; n) { 
int j = (i + n) * 50; // j is available only in the if block; 
} 
while (j &lt; 50) { // illegal, j is  not available outside if block 
System.out.println(j is  + j);
j++;
}
}</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Specialized Assignment Operators
amount *= 1 + interestRate;
/* 
amount = 
amount * (1 + interestRate); 
*/ 
	Note that the right side is treated as a unit (as 
though there are parentheses around the entire 
expression)</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>Variable Declaration
Good Programming Practice: 
	declare variables just before you use them
	initialize variables when you declare them
	do not declare variables inside loops 
 it takes time during execution to create and destroy 
variables, so it is better to do it just once for loops
	it is okay to declare loop counters in the 
Initialization field of for loops, e.g.
for(int i=0; i &lt;10; i++)
t h e Initialization field executes only once, 
when the for loop is first entered</text>
        </slide>
        <slide>
          <slideno>46</slideno>
          <text>Comparing Class Variables
Person firstPerson = new Person();
firstPerson.setFirstName(Lisa);
Person secondPerson = new Person();
secondPerson.setFirstName(Barry); 
if(firstPerson == secondPerson)
//this compares their addresses 
{ 
&lt;body of if statement&gt;
} 
if(firstPerson.equals(secondPerson)
//this compares their variable values 
{ 
&lt;body of if statement&gt;
}</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Two Main Kinds of Types in Java
primitive data types
	the simplest types 
	cannot decompose into 
other types 
	have values only, no 
methods 
	Examples: 
int -i n t e g e r 
double - floating point 
char - character class types 
	more complex
	composed of other 
types (primitive or 
class types) 
	have both data and 
methods 
	Examples:
String 
StringBuffer</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>The StringBuffer Class
	Modify the sequence: 
strBuffer.append(s); 
System.out.println(strBuffer); // prints out rues 
System.out.println(strBuffer.length()); // prints out 4 strBuffer.insert(2, s); System.out.println(strBuffer); // prints out ruses strBuffer.insert(1, ef); System.out.println(strBuffer); // prints out refuses System.out.println(strBuffer.length()); // prints out 7 
strBuffer.replace(2, 3, -); System.out.println(strBuffer); // prints out re-uses</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Indexing Characters within a String
	The index of a character within a string is 
an integer starting at 0 for the first character 
and gives the position of the character 
T h e charAt(Position) method returns 
the char at the specified position 
substring(Start, End) method 
returns the string from position Start to 
position End</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Built-in Operators for primitive types
	Arithmetic (use with int, double, etc.): 
+, -, *, /, % 
	Comparison (use with int, double, char, etc.): 
==, !=, &lt;, &lt;=, &gt;, &gt;= 
	Logical (use with boolean): 
&amp;&amp;, ||, !</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Parameter Passing Example
//Definition of method to double an integer 
public int doubleValue(int numberIn) 
{ 
return 2 * numberIn;
} 
//Invocation of the method... somewhere in main...
int next = 55; 
System.out.println("Twice next = " + doubleValue(next));
 Formal parameter in the method definition:
numberIn 
 Argument in the method invocation: 
next</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>Pass-By-Value:
Primitive Data Type Arguments
	Formal parameters are initialized to the 
values passed 
	Formal parameters are local to the method 
for which they are defined 
	Variables used as arguments cannot be 
changed by the method 
 the method only gets a copy of the variable's 
value</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Outline
 Another look at Java built-in operators 
 String and StringBuffer built-in java classes
 Classes, objects, and methods</text>
        </slide>
        <slide>
          <slideno>52</slideno>
          <text>Static Methods
	Declare static methods with the static
modifier, for example: 
public static double circleArea(double radius) ... 
	Since a static method doesnt need a calling 
object, it cannot refer to a (nonstatic) instance 
variable of its class. 
	Likewise, a static method cannot call a nonstatic 
method of its class (unless it creates an object of the class to use as a calling object).</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>The "this." Operator
public int getAnswer()
{
/* One way to invoke the answerOne 
method defined in this file 
(Oracle.java)is: answerOne();
*/
//Another way is to use "this."int num = this.answerOne();
return(num);
} 
} // end class Oracle</text>
        </slide>
        <slide>
          <slideno>53</slideno>
          <text>Uses for Static Methods
	Static methods are commonly used to provide 
libraries of useful and related functions 
E x a m p l e s :
 The different read methods in the SavitchIn class` 
t h e  M a t h  c l a s s 
 automatically provided with Java 
 functions include pow, sqrt, max, min, etc.
 more details to come</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Calling an Objects Methods
	To call a method outside its object definition file, 
in general, a valid object name should precede the 
method name 
	For example (in a file other than Oracle.java):
Oracle myOracle = new Oracle(); 
//myOracle is not part of the definition //code for Oracle ... //dialog is a method defined in Oracle class myOracle.dialog();</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>The main Method
 A program written to solve a problem (rather than define 
an object) is written as a class with one method, main
 Invoking the class name invokes the main method
E x a m p l e : HelloWorld Class 
 Note the basic structure: 
public class HelloWorld
{
public static void main(String[] args)
{
&lt;statements that define the main method&gt; 
}
}</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>Variables: Class Type vs. Primitive 
Type 
What does a variable hold? 
 It depends on whether its type is a primitive type or 
class type 
	A primitive type variable holds the value of the 
variable 
	Class types are more complicated 
 classes have methods and instance variables</text>
        </slide>
        <slide>
          <slideno>47</slideno>
          <text>Pass- by-Reference:
Class Types as Arguments
	Class variable names used as parameters in a 
method call copy the argument's address 
(not the value) to the formal parameter 
	So the formal parameter name also contains 
the address of the argument 
	It is as if the formal parameter name is an 
alias for the argument name</text>
        </slide>
        <slide>
          <slideno>54</slideno>
          <text>The Math Class
	Includes constants Math.PI (approximately 
3.14159) and Math.E (base of natural 
logarithms which is approximately 2.72) 
	Includes three similar static methods: round, 
floor , and ceil 
 All three return whole numbers (although they are 
of type double ) 
 Math.round returns the whole number nearest its 
argument</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>Pass-By-Value:
Primitive Data Type Arguments
	When the method is called, the value of 
each argument is copied (assigned) to its 
corresponding formal parameter 
	The number of arguments must be the same 
as the number of formal parameters 
	The data types of the arguments must be the 
same as the formal parameters and in the 
same order</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>The "this." Operator
 this. refers to the object that contains the 
reference (an objects way of referring to itself) 
	Methods called in a .java file that gives an 
objects definition do not need to reference the 
object 
 In such files, you may omit the use of " this. 
in referring to a method, since it is presumed
	For example, if answerOne() is a method 
defined in the class Oracle :</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Passing Values to a Method: Parameters
	Some methods can be more flexible (and useful) if we 
pass them input values 
	Input values for methods are called passed values or 
parameters 
	Parameters and their data types must be specified 
inside the parentheses of the heading in the method 
definition 
 these are called formal parameters
	The calling object must put values of the same data 
type, in the same order, inside the parentheses of the 
method invocation 
 these are called arguments , or actual parameters</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Instance Variables (Data Items)
public class Person 
{
private String firstName;
private String lastName;
public double age;
public String getFirstName()
{
return(firstName);
}
// other method definitions ...
}</text>
        </slide>
        <slide>
          <slideno>55</slideno>
          <text>The Math Class
Math.round(3.3) returns 3.0 and 
Math.round(3.7) returns 4.0 
 Math.floor returns the nearest whole number 
that is equal to or less than its argument 
Math.floor(3.3) returns 3.0 and 
Math.floor(3.7) returns 3.0 
 Math.ceil (short for ceiling) returns the nearest 
whole number that is equal to or greater than its 
argument 
Math.ceil(3.3) returns 4.0 and 
Math.ceil(3.7) returns 4.0</text>
        </slide>
        <slide>
          <slideno>41</slideno>
          <text>Variables: Class Type vs. Primitive 
Type 
 See handout</text>
        </slide>
        <slide>
          <slideno>42</slideno>
          <text>Assignment with
Variables of a Class Type
klingon.set(Klingon ox, 10, 15);
earth.set(Black rhino, 11, 2);
earth = klingon;
earth.set(Elephant, 100, 12);
System.out.println(earth:);
earth.writeOutput();
System.out.println(klingon:);
klingon.writeOutput(); 
What will the output be?
(see the next slide)</text>
        </slide>
        <slide>
          <slideno>58</slideno>
          <text>Read
 Chapter 4</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Classes, Objects, and Methods
 Instance variables 
 Instantiating (creating) objects
 A look at methods 
 Parameter passing (pass-by-value 
and pass-by-reference) 
 Static methods and static variables</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 4</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Instantiating (Creating) Objects
S y n t a x :
ClassName instanceName = 
new ClassName(); 
	Note the keyword new
	Example: instantiate an object of class Person within the 
definition of another class 
Person newPerson = new Person();
	Public instance variables can be accessed and modified 
using the dot operator: 
newPerson.age = 35.5;</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>The "this." Operator
public class Oracle
{ 
private int firstNum = 5; 
private int secondNum = 10; 
public int answerOne() 
{ 
return(firstNum + secondNum); 
} 
// code stored in file Oracle.java</text>
        </slide>
        <slide>
          <slideno>43</slideno>
          <text>Assignment with
Variables of a Class Type
klingon.set(Klingon ox, 10, 15);
earth.set(Black rhino, 11, 2);
earth = klingon;
earth.set(Elephant, 100, 12);
System.out.println(earth:);
earth.writeOutput();
System.out.println(klingon:);
klingon.writeOutput(); 
What will the output be? 
klingon and earth both print elephant. 
Why do they print the same thing? 
(see the next slide) Output:
earth: Name = Elephant
Population = 100
Growth Rate = 12% 
klingon:
Name = Elephant
Population = 100
Growth Rate = 12%</text>
        </slide>
        <slide>
          <slideno>44</slideno>
          <text>klingon.set(Klingon ox, 10, 15);
earth.set(Black rhino, 11, 2);
earth = klingon;
earth.set(Elephant, 100, 12);
System.out.println(earth:);
earth.writeOutput();
System.out.println(klingon:);
klingon.writeOutput(); 
Why do they print the same thing? 
The assignment statement makes earth and 
klingon refer to the same object. 
When earth is changed to  Elephant , 
klingon is changed also. Before the assignment 
statement, earth and klingon refer to two 
different objects. 
earth 
klingon Black rhino 
11 2 
Klingon ox10 15 
After the assignment 
statement, earth and 
klingon refer to the 
same object.
earth 
klingon Klingon ox
10 15</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Instantiating (Creating) Objects
	To retrieve values of first and last name instance 
variables: 
 newPerson.getFirstName(); 
//returns BElanna
 newPerson.getLastName(); 
//returns Torres
	Instance variable age should also be private: 
	private double age; 
	public double getAge() 
	public void setAge(double ageValue)</text>
        </slide>
        <slide>
          <slideno>51</slideno>
          <text>Static Methods
	Sometimes there is no obvious object to which a 
method should belong (e.g., a method to 
compute the square root of a number) 
	Use the static keyword in defining such methods
	Static methods can be called without first 
creating an object 
	Use the class name instead of an object name to 
invoke them 
	Static methods are also called class methods</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Local Variables and Blocks
Ablock (also called a compound statement) is the set 
of statements between a pair of matching braces 
(curly brackets) 
	A variable declared inside a block is known only 
inside that block 
i t  i s local to the block, therefore it is called a local 
variable 
 when the block finishes executing, local variables disappear 
 references to it outside the block cause a compile 
error</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>The String Class
	A string is a sequence of characters 
	The String class is used to store strings 
	The String class has methods to operate on strings
	String constant: one or more characters in double 
quotes 
	Examples:
char charVariable = a 
String stringVariable = "a"; 
String sentence = "Hello, world";</text>
        </slide>
        <slide>
          <slideno>57</slideno>
          <text>Static Variables
	Only one copy of a static variable exists for 
a class and it can be accessed by any object 
of the class. 
	May be initialized (as in example above) or 
not. 
	Can be used to let objects of the same class 
coordinate (see 2nd handout).</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Instance Variables (Data Items)
	Person class has the following instance variables/data 
items: firstName, lastName, and age: 
public String firstName; 
public String lastName; 
public double age; 
public means that there are no restrictions on how 
an instance variable is used 
private means that the instance variable cannot be 
accessed directly outside the class 
	In general, instance variables should be declared 
private instead of public</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Return Type of Methods
	You can use a method wherever it is legal to use 
its return type, for example the
getFirstName() method of Person 
returns a String, so this is legal: 
Person anotherPerson = 
new Person();
String name =
anotherPerson.getFirstName(); 
	Also legal:
double age =
anotherPerson.getAge();</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Specialized Assignment Operators
	A shorthand notation for performing an operation 
on and assigning a new value to a variable 
	General form: var &lt;op&gt;= expression;
 equivalent to: 
var = var &lt;op&gt; (expression); 
 &lt;op&gt; is +, -, *, /, or % 
	Examples: 
amount += 25;
//amount = amount + 25;</text>
        </slide>
        <slide>
          <slideno>48</slideno>
          <text>Pass- by-Reference:
Class Types as Arguments
	Any action taken on the formal parameter 
is actually taken on the original argument 
	Unlike the situation with primitive types, the 
original argument is not protected for class 
types</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Good Programming Practice
 Start class names with a capital letter
 Start method names with a lower case 
letter 
 Include comments in your code that 
describe 
 what each class does 
 what each method does 
 any unusual/non-intuitive steps taken in 
solving a problem</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>The String Class
 Individual characters in a variable of type 
String can be accessed but not modified
	To modify individual characters in a string, 
need to use a variable of type StringBuffer 
(more to come on class StringBuffer) 
	A complete interface specification of Javas 
built-in classes and their methods (including 
that of the String class) is at: 
http://java.sun.com/j2se/1.3/docs/api/index.html</text>
        </slide>
        <slide>
          <slideno>50</slideno>
          <text>Class Type as a Method Argument
//Method definition with a DemoSpecies class parameter
public void makeEqual(DemoS pecies otherObject)
{
otherObject.name = this.name;
otherObject.population = this.population;
otherObject.growthRate = this.growthRate;
}
//Method invocation
DemoSpecies s1 = new D emoSpecies("Crepek", 10, 20);
DemoSpecies s2 = new DemoSpecies();
s1.makeEqual(s2);
 The method call makes otherObject an alias 
for s2 , therefore the method acts on s2, the 
DemoSpecies object passed to the method!
T h i s  i s unlike primitive types, where the 
passed variable cannot be changed.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Returned Values
firstNumber * secondNumber is an 
expression that returns the integer value 45
 Similarly, methods return values
Integer.parseInt(str); is a method of the 
Java built-in class Integer that returns the integer value 
of a string such as 12, 67, etc.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Indexing Characters within a String
E x a m p l e :
String greeting = "Hi, there!"; 
greeting.charAt(0) returns H 
greeting.charAt(2) returns , 
greeting.substring(4,6) returns the 
Hi, t h e r e ! 
0 1 23456789</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Return Statement
	Methods that return a value must execute a return 
statement that includes the value to return 
	For example:
public double getAge()
{
return age; 
//return(age); could be used instead
}
private double age = 79.6;
	A return statement is not required in a method that does 
not return a value (has a void return type)</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Local Variables and Blocks
	Some programming languages (e.g. C and 
C++) allow a variables name to be reused 
outside the local block 
 this is confusing and not recommended
	In Java, a variable name can be declared 
only once for a method 
 although the variable does not exist outside 
the local block, other blocks in the same 
method cannot reuse the variable's name</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Algorithms and Object Oriented Programming (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture2/</lecture_pdf_url>
      <lectureno>2</lectureno>
      <slides>
        <slide>
          <slideno>14</slideno>
          <text>Next Class
Read Chapter 2 sections 2.1-2.4 
Questionnaire 2</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Object Oriented Programming
If we add a new shape to the list using the 
procedural approach, need to add another 
conditional statement and code for drawing it 
If we add a new shape in the OOP approach, 
we only need to implement its draw method</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Object Oriented Programming
	Objects are defined using classes -- an object 
is an instance of a class 
	Each class specifies attributes (properties) of 
an object and the objects behavior (via 
methods) 
	An object can perform actions by invoking 
methods defined in its class</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Object Oriented Programming
 To create an OO program we need to identify 
 all the objects that we want to manipulate 
 the properties that these objects have 
 how these objects relate to /interact with each other 
 This process is called data modeling 
Example problem: scheduling mid-term exams 
for four courses that have some of the same students 
so that no two students have an overlapping exam</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Object Oriented Programming
Health care 
professional
Pharmacist 
EMT 
Nurse	 Medical Physiotherapist
doctor 
Surgeon Pediatrician Radiologist</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Object Oriented Programming
3. Inheritance - means by which classes that  
have common or overlapping properties can 
have those properties specified just once 
 can base a new class on an existing class with 
more general properties: e.g., base student on 
person 
 common or base class is the superclass
 new (derived) class is the subclass 
 subclass is usually a specialization of the 
superclass</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Object Oriented Programming
Problem: Given a list of shapes, draw them
Imperative OOP approach (e.g. Java, C++): 
for each shape, s 
s.draw() 
	There is a base shape class with a draw method
	Each subclass of shape implements its own 
version of the draw method so it knows how to 
draw itself</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>A simple Java class
import java.io.*;
/* The SimpleProgram class implements an application
* that displays Hello world! to the standard output 
*/ 
public class SimpleProgram {
public static void main(String[] args)
{
// Display the words Hello world! 
System.out.println(Hello world!);
}
}
Must be saved in a file called SimpleProgram.java</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Object Oriented Programming
	To perform a task, find an object and send it 
a message (a message is a request to 
perform a method) 
	If no appropriate object is available, create 
one using an already defined class 
	If no class is available that does what you 
want, write a new class</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 2</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Object Oriented Programming
OOP follows three main design principles:
1. Encapsulation (information hiding) 
 Users of an object see only what is absolutely 
necessary for using that object
 As an abstraction mechanism , encapsulation frees us 
from the details of a particular implementation of an 
object 
 We can focus on what an object can do (its 
interface ) rather than how it does it</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Object Oriented Programming
2. Polymorphism (e.g., method overloading) 
 an instruction (via a single method name) can be 
issued using different types of objects 
 different actions are performed depending on the 
objects used</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Object Oriented Programming
	In this course, we will examine imperative, 
object-oriented programming (OOP) using Java 
	Imperative OOP: objects issue commands 
	Object: an entity (car, dog, house, person, etc.)
	In OOP, data and the methods for manipulating 
the data are grouped together in an object</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Object Oriented Programming
Problem: Given a list of shapes, draw them
Non-OO procedural programming approach (e.g. C,
Pascal):
for each shape, s in the list
if s is a square 
specify square drawing code
else if s is a rectangle 
specify rectangle drawing code 
else if s is a circle 
specify circle drawing code</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>OO Modeling Problem
A bakery shop sells 5 different types of pastries and 
orders common ingredie nts used to make all 
pastry types each week. While all the pastries 
require flour, butter, sugar, and eggs, each of the five types of pastries uses one additional 
ingredient that the other four dont. All pastries 
are wrapped and the wrapper bar-coded according 
to the pastry type. The store would like you to 
create an automated re-ordering program for the 
special ingredient: When the store has only 10 of a particular type of pastry left, an electronic order 
for its special ingredient should be generated to 
the particular store that sells this ingredient .</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Medical Coding Systems (continued) and UMLS (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture16/</lecture_pdf_url>
      <lectureno>16</lectureno>
      <slides>
        <slide>
          <slideno>12</slideno>
          <text>GabrieliGabrieli Medical NomenclatureMedical Nomenclature 
zz Single large hierarchySingle large hierarchy 
zz More complex terms as you move downMore complex terms as you move down 
zz Being adopted by ASTM as a standardBeing adopted by ASTM as a standard</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>SNOMED RTSNOMED RT 
Fully Specified Name: Fully Specified Name: Needle biopsy Needle biopsy
(procedure)(procedure) 
Concept ID: Concept ID: 129249002129249002 
Definition: Definition: 
Is a (attribute) Is a (attribute) Biopsy (procedure)Biopsy (procedure) 
Method (attribute) Method (attribute) Biopsy Biopsy --action (qualifier action (qualifier
value)value) 
Using (attribute) Using (attribute) Biopsy needle, device (physical Biopsy needle, device (physical
object)object) 
Qualifiers:Qualifiers: 
Priority (attribute) Priority (attribute) Priorities (qualifier value)Priorities (qualifier value)</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>SPECIALIST LEXICONSPECIALIST LEXICON 
{base=abdominal delivery{base=abdominal delivery 
entry=E0006453entry=E0006453 
cat=nouncat=noun 
variants=variants= uncountuncount 
variants=variants= reg reg } }</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Nursing terminologiesNursing terminologies 
zz Many initiatives worldwideMany initiatives worldwide 
zz North American Nursing Diagnosis North American Nursing Diagnosis 
Association (NANDA) codesAssociation (NANDA) codes 
zz Nursing Outcomes Classification (NOC)Nursing Outcomes Classification (NOC) 
zz Georgetown Home Health Care Georgetown Home Health Care 
Classification (HHCC)Classification (HHCC) 
zz Omaha SystemOmaha System 
zz Problems, interventions, outcomesProblems, interventions, outcomes</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>GALENGALEN 
zz European initiativeEuropean initiative 
zz Reference model for medical conceptsReference model for medical concepts 
zz Formalism called Structured Meta Formalism called Structured Meta 
KnowledgeKnowledge 
zz Similar to description logicSimilar to description logic</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Semantic NetworkSemantic Network 
zz SRDEF: Basic information about the SRDEF: Basic information about the 
Semantic Types and RelationsSemantic Types and Relations 
zz SRSTR: Structure of the Network.SRSTR: Structure of the Network. 
zz SRSTRE1: Fully inherited set of Relations SRSTRE1: Fully inherited set of Relations 
(UI's).(UI's). 
zz SRSTRE2: Fully inherited set of Relations SRSTRE2: Fully inherited set of Relations 
(names).(names).</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>STTSTT 
zz PF: Preferred form of termPF: Preferred form of term 
zz V: Followed by one or more of the following V: Followed by one or more of the following 
types of variation, in this order:types of variation, in this order: 
zz C: Varies from the preferred term only in upperC: Varies from the preferred term only in upper --lower lower 
casecase 
zz W: Contains same words as the preferred form, W: Contains same words as the preferred form, 
disregarding order and punctuationdisregarding order and punctuation 
zz S: Singular of the preferred formS: Singular of the preferred form 
zz P: Plural of the preferred formP: Plural of the preferred form 
zz O: Other variant of the preferred formO: Other variant of the preferred form</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>SizeSize 
zz MetathesaurusMetathesaurus : About 800,000 concepts, : About 800,000 concepts, 
2 million terms2 million terms 
zz Semantic Netowork:134 semantic types Semantic Netowork:134 semantic types 
and 54 relationshipsand 54 relationships 
zz Lexicon: About 30,000 wordsLexicon: About 30,000 words 
zz Include 56 families of vocabulariesInclude 56 families of vocabularies 
zz 13 Languages13 Languages</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>SNOMED III SNOMED III --Coding ExamplesCoding Examples 
"D3"D3--15000"      rdial infarction, NOS"  15000" rdial infarction, NOS" --32020) (M32020) (M --
54700)"54700)" 
TT--32020  32020 
MM--54700 = Infarction, NOS54700 = Infarction, NOS 
"D3"D3--15010"      15010" MicroinfarctMicroinfarct of heart              of heart --32000) (M32000) (M --
54701)54701) 
TT--32000 = Heart, NOS 32000 = Heart, NOS 
MM--54701 = Focal Infarct 54701 = Focal Infarct 
Mother died of myocardial  infarct Mother died of myocardial  infarct 
SS--10120, S10120, S --13030, D313030, D3 --1500015000 
SS--10120, F10120, F --A7860, TA7860, T --32020, M32020, M --5470054700 Slides borrowed from Dr. Cimino J 
"Myoca "01"    "(T "Myoca "01" "(T
Myocardium, NOS=  Myocardium, NOS = 
" "01"    " "01" "(T"(Tof Columbia Univ.</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>Use of UMLSUse of UMLS 
zz Natural Language ProcessingNatural Language Processing 
zz Liu H, Johnson SB, Friedman C.Liu H, Johnson SB, Friedman C. Automatic Resolution Automatic Resolution 
of Ambiguous Terms Based on Machine Learning and of Ambiguous Terms Based on Machine Learning and 
Conceptual Relations in the UMLS.Conceptual Relations in the UMLS. 
J Am Med Inform Assoc. 2002 NovJ Am Med Inform Assoc. 2002 Nov --Dec;9(6):621Dec;9(6):621 --36.36. 
zz Information RetrievalInformation Retrieval 
zz HershHersh W, W, MailhotMailhot M, M, ArnottArnott --Smith C, Lowe H.Smith C, Lowe H. 
Selective automated indexing of findings and Selective automated indexing of findings and 
diagnoses in radiology reports.diagnoses in radiology reports. 
J J BiomedBiomed Inform. 2001 Aug;34(4):262Inform. 2001 Aug;34(4):262 --73.73.</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Use of UMLSUse of UMLS 
zz MediationMediation 
zz AymardAymard S, S, JoubertJoubert M, M, FieschiFieschi D, D, FieschiFieschi M.M. 
Mediation services with health information Mediation services with health information 
sources. Proc AMIA sources. Proc AMIA SympSymp . 2000;:37. 2000;:37 --41.41. 
zz Decision SupportDecision Support 
zz GeissbuhlerGeissbuhler A, Miller RAA, Miller RA . Clinical application of . Clinical application of 
the UMLS in a computerized order entry and the UMLS in a computerized order entry and 
decisiondecision --support system.support system. 
Proc AMIA Proc AMIA SympSymp . 1998;:320. 1998;:320 --4.4.</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>READREAD 
182..A 
Xa0wWK rodynia 
182Z.A 
Xa0wWK eathing -pleurodynia 
1826.A  Parasternal pain 
1823.A ordial pain 
1821.A present 
X75rWC 
1829.A pain Chest pain P Y7CmDC 
PleuP Y7CmFC 
Chest pain NOS P Y7CmGC 
Painful brS Y7CmIC 
P Y7CmJC 
PrecP Y7CmLC 
Chest pain not P Y7CmNC 
Pain in heart P Y7CmYC 
Retrosternal P Y7CmZC</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>SNOMED RTSNOMED RT 
Fully Specified Name:Fully Specified Name: Myocardial infarction Myocardial infarction
(disorder)(disorder) 
Concept ID:Concept ID: 2229800622298006 
Definition: Definition: 
Is a (attribute) Is a (attribute) Myocardial disease (disorder)Myocardial disease (disorder) 
Is a (attribute) Is a (attribute) Structural disorder of heart Structural disorder of heart 
(disorder)(disorder) 
Associated morphology (attribute) Associated morphology (attribute) Infarct Infarct 
(morphologic abnormality)(morphologic abnormality) 
Finding site (attribute) Finding site (attribute) Myocardium structure Myocardium structure
(body structure)(body structure)</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 5Lecture 5 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>TSTS 
zz P: Preferred NameP: Preferred Name 
zz S: SynonymS: Synonym 
zz s: Suppressible synonym (possibly s: Suppressible synonym (possibly 
problematic for some applications, e.g. problematic for some applications, e.g. 
abbreviations)abbreviations)</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>ReadingReading 
zz http://www.nlm.nih.gov/research/umls/Uhttp://www.nlm.nih.gov/research/umls/U 
MLSDOC.HTMLMLSDOC.HTML 
zz http://http:// umlsinfoumlsinfo ..nlmnlm..nihnih..govgov/education.htm/education.htm 
ll</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>MRCON: Concept NamesMRCON: Concept Names 
Least Restriction Level LRL String STR Unique identifier for string SUI String type STT Unique identifier for term LUI Term status TS Language of Term LAT Unique identifier for concept CUI Description Col.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>National Drug CodesNational Drug Codes 
zz Developed by FDADeveloped by FDA 
zz Widely used in USWidely used in US 
zz Codes based on drug manufacturerCodes based on drug manufacturer 
zz Codes have little class hierarchyCodes have little class hierarchy 
zz Codes are reused at manufacturers Codes are reused at manufacturers 
discretiondiscretion</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>LOINCLOINC 
zz Logical Observations, Identifiers, Names, Logical Observations, Identifiers, Names, 
Codes (LOINC)Codes (LOINC) 
zz Consortium led by Clem McDonald and Consortium led by Clem McDonald and 
Stan HuffStan Huff 
zz Originally lab resultsOriginally lab results 
zz Now extended to include clinical Now extended to include clinical 
observationsobservations 
zz Recently, merged into SNOMEDRecently, merged into SNOMED</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Read Clinical CodesRead Clinical Codes 
zz Developed by James Read in  Developed by James Read in 
zz Adopted by UK NHS in 1990Adopted by UK NHS in 1990 
zz Allows postAllows post --coordinationcoordination 
zz Merged with SNOMEDMerged with SNOMED the 80sthe 80s</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>SNOMEDSNOMED 
zz Systematized Nomenclature of Human and Systematized Nomenclature of Human and 
Veterinarian MedicineVeterinarian Medicine 
zz Developed by the College of American Developed by the College of American 
Pathologists (1971)Pathologists (1971) 
zz SNDO, SNOP, SNOMEDSNOMEDSNDO, SNOP, SNOMEDSNOMED 
zz SNOMED InternationalSNOMED International 
zz SNOMEDSNOMED --RT (Reference Terminology)RT (Reference Terminology) 
zz SNOMEDSNOMED --CT (merger with Read)CT (merger with Read)</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>MRREL: Related ConceptsMRREL: Related Concepts 
C0002871|CHD|C0002891|isa|MSH2001|MSH2001C0002871|CHD|C0002891|isa|MSH2001|MSH2001 
|||| 
C0002871|RB|C0221016||MTH|MTH||C0002871|RB|C0221016||MTH|MTH|| 
C0002871|RL|C0002886|mapped_to|SNMI98|SNMC0002871|RL|C0002886|mapped_to|SNMI98|SNM 
I98||I98|| 
C0002871|RO|C0002886|clinically_associated_withC0002871|RO|C0002886|clinically_associated_with 
|CCPSS99|CCPSS99|||CCPSS99|CCPSS99|| 
MegaloblasticMegaloblastic anemia due to anemia due to folatefolate deficiency, N OS deficiency, N OS 
(C0151482) has clinically_associated_with (C0151482) has clinically_associated_with 
relationship to Anemia (C0002871) relationship to Anemia (C0002871)</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>SABSAB 
zz AIR93 AIR93 
zz AI/RHEUM. Bethes da (MD): National Library o f Medic ine, Lister Hi AI/RHEUM. Bethes da (MD): National Library o f Medic ine, Lister Hi ll Center, 1993. ll Center, 1993. 
zz ALT2000 ALT2000 
zz Alternative Billing Concepts (Alternative Billing Concepts ( AltLinkAltLink ). Version 983. L as Cruces (NM): A lternative L ink LLC, ). Version 983. L as Cruces (NM): A lternative L ink LLC, 
2000. Contact: A lternative L ink LLC; 1065 S. Main St.; Bldg. C ; 2000. Contact: A lternative L ink LLC; 1065 S. Main St.; Bldg. C ; Las Cruces, NM 880 05; Las Cruces, NM 880 05; 
phone: (505) 527phone: (505) 527 --0636; fax: (505) 5230636; fax: (505) 523 --4152; http://www . 4152; http://www .alternativelinkalternativelink .com; .com; 
mail@mail@ alternativelin k alternativelin k.com. .com. 
zz AOD99 AOD99 
zz Alcoho l and Other Drug Thesaurus:  A Guide to Concepts and Termin Alcoho l and Other Drug Thesaurus:  A Guide to Concepts and Termin ology in Substance ology in Substance
Abuse and Addictio n. 3rd ed. [4 vo lumes]. Bethesda (MD): N ationa Abuse and Addictio n. 3rd ed. [4 vo lumes]. Bethesda (MD): N ational Institute  on Alcohol l Institute  on Alcohol 
Abuse an d Alcoho lism (NIAAA) and Center for Substance Abuse Prev Abuse an d Alcoho lism (NIAAA) and Center for Substance Abuse Prev ention (CSAP), 1999. ention (CSAP), 1999. 
zz BI98 BI98 
zz Beth Israel OMR Clinic al Problem List Voc abulary. Version 1.0. B Beth Israel OMR Clinic al Problem List Voc abulary. Version 1.0. B oston (MA): Beth Israel oston (MA): Beth Israel
Deaconess Medic al Center, 1999. Contact : How ard Go ldberg, MD.; Deaconess Medic al Center, 1999. Contact : How ard Go ldberg, MD.; 
hgoldberhgoldber @@bidmcbidmc..harvardharvard ..eduedu. . 
zz BRMP2001 BRMP2001 
zz DescritoresDescritores emem CienciasCiencias dada SaudeSaude [Portugues e translation of [Portugues e translation of MeSHMeSH ]. Sao Paulo ]. Sao Paulo
(Brazil): (Brazil): Latin Americ an and Caribbe an Center on Health Sciences Informat Latin Americ an and Caribbe an Center on Health Sciences Informat ion. ion. 
BIREME/PA HO/WHO, 2001. BIREME/PA HO/WHO, 2001. 
zz ..</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>MRREL: Related ConceptsMRREL: Related Concepts 
Machine-generated and unverified indicator 
(optional)MG Source of relationship labels SL Abbreviation of the source of relationship SAB Relationship attribute RELA Unique identifier of second concept CUI2 Relationship of second to first concept REL Unique identifier of first concept CUI1 Description Col.</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>MeSHMeSH 
zz Medical Subject HeadingsMedical Subject Headings 
zz Developed by NLMDeveloped by NLM 
zz Indexes medical literatureIndexes medical literature 
zz MedlineMedline 
zz Terms are in hierarchies and appear in Terms are in hierarchies and appear in 
multiple places in hierarchiesmultiple places in hierarchies</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>SNOMED RTSNOMED RT 
Fully Specified Name: Fully Specified Name: Heart disease in mother complicating Heart disease in mother complicating 
pregnancy, childbirt h AND/OR pregnancy, childbirt h AND/OR puerperiumpuerperium (disorder)(disorder) 
Concept ID: Concept ID: 7838100478381004 
Definition: Definition: 
Is a (attribute)Is a (attribute) Cardiac complication (disorder)Cardiac complication (disorder) 
Is a (attribute)Is a (attribute) Complication related to pregnancy (disorder)Complication related to pregnancy (disorder) 
Finding site (attribute) Finding site (attribute) Heart structure (body structure)Heart structure (body structure) 
Qualifiers:Qualifiers: 
Onset (attribute)Onset (attribute) Onsets (qualifier value)Onsets (qualifier value) 
Severity (attribute)Severity (attribute) Severities (qualifier value)Severities (qualifier value) 
EpisodicityEpisodicity (attribute)(attribute) Episodiciti es Episodiciti es (qualifier value)(qualifier value) 
Course (attribute)Course (attribute) Courses (qualifier value)Courses (qualifier value)</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Today We Will Talk AboutToday We Will Talk About 
zz Continue survey of medical coding Continue survey of medical coding 
systemssystems 
zz UMLSUMLS</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Appropriate values for the Priority Appropriate values for the Priority 
(attribute) relationship type(attribute) relationship type 
Deferred (q ualifier value) Deferred (q ualifier value) 
Denied (qualifier value)Denied (qualifier value) 
Elective (qua lifier value) Elective (qua lifier value) 
Emergency (qualifier value)Emergency (qualifier value) 
Immediate (qualifier value)Immediate (qualifier value) 
Reclassified (qualifier value)Reclassified (qualifier value) 
Reclassified and rescheduled (qualifier value)Reclassified and rescheduled (qualifier value) 
Repeat electi ve (qualifier value) Repeat electi ve (qualifier value) 
Repeat emergency (qualifier value)Repeat emergency (qualifier value) 
Rescheduled (qualifier value)Rescheduled (qualifier value) 
Routine (qualifier value)Routine (qualifier value) 
Scheduled (qualifier value)Scheduled (qualifier value) 
Urgency (qualifier value)Urgency (qualifier value)</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Unified Medical Language SystemUnified Medical Language System 
zz A long term NLM projectA long term NLM project 
zz Designed to facilitate the retrieval and Designed to facilitate the retrieval and 
integration of biomedical information from integration of biomedical information from 
various sourcesvarious sources 
zz ComponentsComponents 
zz MetathesaurusMetathesaurus 
zz Semantic NetworkSemantic Network 
zz SPECIALIST Lexicon and Lexical ProgramsSPECIALIST Lexicon and Lexical Programs 
zz (Information Source)(Information Source)</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>SNOMED InternationalSNOMED International 
Chemicals, Drugs, and Biological ProductsChemicals, Drugs, and Biological Products 14,84614,846 
Diseas es/Diagno ses Diseas es/Diagno ses 35,83435,834 
FunctionFunction 19,22119,221 
General Linkage/ModifiersGeneral Linkage/Modifiers 1,5691,569 
Living OrganismsLiving Organisms 24,61424,614 
Manufacturers of Pharmaceuticals Human/VeterinaryManufacturers of Pharmaceuticals Human/Veterinary 363363 
MorphologyMorphology 5,8755,875 
OccupationsOccupations 1,9491,949 
Physical Agents, Forces and ActivitiesPhysical Agents, Forces and Activities 1,6001,600 
ProceduresProcedures 30,72330,723 
Social contextSocial context 1,0131,013 
TopographyTopography 12,93612,936 
150,343150,343 Slides borrowed from Dr. Cimino J of Columbia Univ.</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>RELREL 
zz RB: has a broader relationshipRB: has a broader relationship 
zz RN: has a narrower relationshipRN: has a narrower relationship 
zz RO: has relationship other than synonymous, narrower, RO: has relationship other than synonymous, narrower, 
or broaderor broader 
zz RL: the relationship is similar or "alike". PAR: has parent RL: the relationship is similar or "alike". PAR: has parent 
relationship in a relationship in a MetathesaurusMetathesaurus source vocabularysource vocabulary 
zz CHD: has child relationship in a CHD: has child relationship in a MetathesaurusMetathesaurus source source 
vocabularyvocabulary 
zz SIB: has sibling relationship in a SIB: has sibling relationship in a MetathesaurusMetathesaurus source source 
vocabulary.vocabulary. 
zz AQ: is an allowed qualifier for the first concept in a AQ: is an allowed qualifier for the first concept in a 
MetathesaurusMetathesaurus source vocabulary.source vocabulary.</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>STSTRE2STSTRE2 
zz Acquired Abnormality|Acquired Abnormality| isaisa|Anatomic al |Anatomic al 
Abnormality|Abnormality| 
zz Acquired Abnormality|Acquired Abnormality| isaisa|Anatomical Structure||Anatomical Structure| 
zz Acquired Abnormality|Acquired Abnormality| isaisa|Physical Object||Physical Object| 
zz Acquired Abnormality|Acquired Abnormality| isaisa|Entity||Entity| 
zz Acquired Abnormality|affects|Alga|Acquired Abnormality|affects|Alga| 
zz Acquired Abnormality|affects|Amphibian|Acquired Abnormality|affects|Amphibian| 
zz Acquired Abnormality|affects|Animal|Acquired Abnormality|affects|Animal| 
zz Acquired Abnormality|affects|Bacterium|Acquired Abnormality|affects|Bacterium| 
zz Acquired Abnormality|affects|Bird| Acquired Abnormality|affects|Bird|</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>THE SPECIALIST LEXICON AND THE SPECIALIST LEXICON AND 
LEXICAL PROGRAMSLEXICAL PROGRAMS 
zz The SPECIALIST lexicon has been developed to The SPECIALIST lexicon has been developed to 
provide the lexical information needed for the provide the lexical information needed for the 
SPECIALIST Natural Language Processing SPECIALIST Natural Language Processing 
System (NLP). System (NLP). 
zz A general English lexicon that includes many A general English lexicon that includes many 
biomedical termsbiomedical terms 
zz Lexical Methods for Managing Variation in Lexical Methods for Managing Variation in 
Biomedical Terminologies", A.T. McCray, S. Biomedical Terminologies", A.T. McCray, S. 
SrinivasanSrinivasan , A.C. Browne, in the Proceedings of , A.C. Browne, in the Proceedings of 
the 18th Annual Symposium on Computer the 18th Annual Symposium on Computer 
Applications in Medical Care, 1994, 235Applications in Medical Care, 1994, 235 --239. 239.</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>MRCON: Concept NamesMRCON: Concept Names 
C0002871|ENG|P|L0002871|PF|S0013742|Anemia|0| 
C0002871|ENG|P|L0002871|VP|S0013787|Anemi as|0| 
C0002871|ENG|P|L0002871|VC|S0352787|ANEMIA|0| C0002871|ENG|P|L0002871|VC|S0414880|anemia|0| 
C0002871|ENG|P|L0002871|VO|S0470197|Anemi a, NOS|3| 
C0002871|ENG|S|L0280031|PF|S0803242|Anaemia|3|</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Use of UMLSUse of UMLS 
zz Knowledge DiscoveryKnowledge Discovery 
zz WeeberWeeber M, Klein H, Aronson AR, M, Klein H, Aronson AR, MorkMork JG, de JG, de JongJong--
van den Berg LT, van den Berg LT, VosVosR.R.TextText--based discovery in based discovery in 
biomedicine: the architecture of the DADbiomedicine: the architecture of the DAD --system. system. 
Proc AMIA Proc AMIA SympSymp . 2000;:903. 2000;:903 --7.7.
zzKnowledge AcquisitionKnowledge Acquisition
zzWeeberWeeber M, Klein H, Aronson AR, M, Klein H, Aronson AR, MorkMork JG, de JG, de JongJong--
van den Berg LT, van den Berg LT, VosVosR.R.TextText--based discovery in based discovery in 
biomedicine: the architecture of the DADbiomedicine: the architecture of the DAD --system.system.
Proc AMIA Proc AMIA SympSymp . 2000;:903. 2000;:903 --7.7.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Last Time We Talked AboutLast Time We Talked About 
zz Medical vocabulary Medical vocabulary 
zz Survey of coding systemsSurvey of coding systems</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>MetathesaurusMetathesaurus 
zz MetathesaurusMetathesaurus Concept NamesConcept Names 
zz MRCONMRCON 
zz Relationships between Different Concept NamesRelationships between Different Concept Names 
zz MRREL, MRCOC, MRATX MRREL, MRCOC, MRATX 
zz AttributesAttributes 
zz MRSAT, MRDEF, MRST Y, MRLO, MRRANK MRSAT, MRDEF, MRST Y, MRLO, MRRANK 
zz Source Information and contextsSource Information and contexts 
zz MRSO, MRCX T MRSO, MRCX T 
zz IndexesIndexes 
zz MRXW.BAQ, MRXW.DAN, MRXW.D UT, MRXW.ENG, MRXW.FIN, MRXW.BAQ, MRXW.DAN, MRXW.D UT, MRXW.ENG, MRXW.FIN, 
MRXW.FRE, MRXW.GER, MRXW.H EB, MRXW.HUN, MRXW.ITA, MRXW.FRE, MRXW.GER, MRXW.H EB, MRXW.HUN, MRXW.ITA, 
MRXW .NOR, MRXW .POR, MRXW .RUS, MRXW .SPA, MRXW .SWE, MRXW .NOR, MRXW .POR, MRXW .RUS, MRXW .SPA, MRXW .SWE, 
MRXNW.ENG, MRXNS.ENG MRXNW.ENG, MRXNS.ENG</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>RELARELA 
zz Any of the relationships defined in the Any of the relationships defined in the 
UMLS Semantic Network UMLS Semantic Network 
zz A more specific relationship provided by A more specific relationship provided by 
the source vocabulary identifiedthe source vocabulary identified</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Process (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture18/</lecture_pdf_url>
      <lectureno>18</lectureno>
      <slides>
        <slide>
          <slideno>15</slideno>
          <text>Petri NetPetri Net 
zz Marking: assign a nonMarking: assign a non --negative integer to negative integer to 
each place. (dot/token)each place. (dot/token) 
zz Firing: a transaction take place after Firing: a transaction take place after 
enabledenabled 
zz Firing sequence: the sequence of Firing sequence: the sequence of 
transaction firings for a given PN with a transaction firings for a given PN with a 
given initial markinggiven initial marking</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>ExampleExample 
zz Continuous ProcessContinuous Process 
zz AgingAging 
zz Discrete ProcessDiscrete Process 
zz Out patient visit (make appointment, check in Out patient visit (make appointment, check in 
with nurse, see a doctor, have test/receive with nurse, see a doctor, have test/receive 
medication)medication)</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Basic DistinctionsBasic Distinctions 
zz Discrete or continuousDiscrete or continuous 
zz Linear or branchingLinear or branching 
zz Independent or ramifiedIndependent or ramified 
zz Immediate or delayedImmediate or delayed 
zz Sequential or concurrentSequential or concurrent 
zz Predictable or surprisingPredictable or surprising</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Petri Net  Petri Net 
zz ConflictConflict 
zz StarvationStarvation 
zz DeadlockDeadlock</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>FSMFSM 
zz Basic components: state (circle), transition Basic components: state (circle), transition 
(arrow), input (label on the arrow)(arrow), input (label on the arrow) 
zz End state can be marked with double End state can be marked with double 
circlescircles</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>ExerciseExercise 
Overweight patients should be instructed Overweight patients should be instructed 
either excise regularly or keep a healthy either excise regularly or keep a healthy 
diet for 3 months. When one fails, try both diet for 3 months. When one fails, try both 
for 3 months. When both fail, a patient for 3 months. When both fail, a patient 
should be given medication x for 2 should be given medication x for 2 
months.months.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>ReadingReading 
zz Sowa Chap. 3Sowa Chap. 3</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Last Time We Talked AboutLast Time We Talked About 
zz Major KR schemesMajor KR schemes 
zz Semantic NetworkSemantic Network 
zz FrameFrame --based Representationbased Representation 
zz Production RulesProduction Rules</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Finite State Machine (FSM)Finite State Machine (FSM) 
zz Discrete process (continuous process can Discrete process (continuous process can 
be simulated with fine time steps)be simulated with fine time steps) 
zz State transition diagramState transition diagram 
zz Formal Definition:Formal Definition: 
zz A finite set of states: QA finite set of states: Q 
zz A finite set of inputs: IA finite set of inputs: I 
zz A transition function F(Q, I) A transition function F(Q, I) --&gt; Q, F can be a &gt; Q, F can be a 
partial Functionpartial Function</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Types of ProcessTypes of Process 
Process 
Continuous Process 
Discrete Process 
Initiation Continuation Cessation Event State</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Petri NetPetri Net 
zz Assign values to tokensAssign values to tokens 
zz Define functions for transactionDefine functions for transaction 
zz Specify scheduling policiesSpecify scheduling policies 
zz Times Petri NetTimes Petri Net</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Flow ChartFlow Chart 
zz Event (box) and decision (diamond)Event (box) and decision (diamond) 
zz Arrow (transition) and label on the arrow Arrow (transition) and label on the arrow 
(condition for decision)(condition for decision) 
zz Start and end can be specified with boxStart and end can be specified with box</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Today We Will Talk AboutToday We Will Talk About 
zz ProcessProcess 
zz Finite state machineFinite state machine 
zz Flow chartFlow chart 
zz Petri NetPetri Net</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Petri NetPetri Net 
zz A finite set of places (circle)A finite set of places (circle) 
zz A finite set of transactions (line)A finite set of transactions (line) 
zz A finite set of arrows connecting either A finite set of arrows connecting either 
places to transactions or transactions to places to transactions or transactions to 
placesplaces</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Describing ProcessDescribing Process 
zz Predicate logicPredicate logic 
zz treat (Dr. Jones, Ms. List)treat (Dr. Jones, Ms. List) 
zz FrameFrame --based systembased system 
zz Patient Frame has a slot primary care or Patient Frame has a slot primary care or 
attending physicianattending physician 
zz There are more about treat to specifyThere are more about treat to specify 
zz When, where, how, why, what resultWhen, where, how, why, what result</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Suspect DB 
Confirmed DB Highly suspect 
DB High blood sugar in test 1 
High blood sugar in test 2 No DB normal blood sugar in test 1 
normal blood sugar in test 2 FSMFSM</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 6Lecture 6 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>ProcessProcess 
zz Object: continuantObject: continuant 
zz E.g. diagnosis, medication, data repository E.g. diagnosis, medication, data repository 
zz Process: Process: occurrentoccurrent 
zz E.g. diagnose, treat, retrieveE.g. diagnose, treat, retrieve</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Basic DistinctionsBasic Distinctions 
zz Normal or Normal or equinomralequinomral 
zz Flat or hierarchicalFlat or hierarchical 
zz Timeless or timeTimeless or time --boundbound 
zz Forgetful or memoryForgetful or memory --boundbound</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Process, Procedure and HistoryProcess, Procedure and History 
zz Sequence of events and stateSequence of events and state 
zz Process: one event or state is currentProcess: one event or state is current 
zz Procedure: abstract (pattern or script of Procedure: abstract (pattern or script of 
processes)processes) 
zz History: record of a past processHistory: record of a past process</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Ontology and Data Model (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture14/</lecture_pdf_url>
      <lectureno>14</lectureno>
      <slides>
        <slide>
          <slideno>23</slideno>
          <text>Distinction Distinction --&gt; Categories&gt; Categories 
zz Distinctions maybe combined to generate Distinctions maybe combined to generate 
categories. E.g.categories. E.g. 
zz Classify patients. Classify patients. 
zz Distinctions: (insured, uninsured), (inpatient, Distinctions: (insured, uninsured), (inpatient, 
outpatient), (infant, child, adult), (emergency, outpatient), (infant, child, adult), (emergency, 
urgent, general)..urgent, general).. 
zz Categories: insured pediatric emergency Categories: insured pediatric emergency 
patient, uninsured adult inpatientpatient, uninsured adult inpatient</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Websters Definition of OntologyWebsters Definition of Ontology 
zz 11 :: a branch of metaphysics concerned a branch of metaphysics concerned 
with the nature and relations of beingwith the nature and relations of being 
22 :: a particular theory about the nature of a particular theory about the nature of 
being or the kinds of existents being or the kinds of existents ----
http://www.webster.com/cgihttp://www.webster.com/cgi --
bin/dictionarybin/dictionary</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>ExampleExample 
zz Which one of the following is a problemWhich one of the following is a problem 
zz CoughCough 
zz AnxietyAnxiety 
zz PregnancyPregnancy 
zz Sleep disorderSleep disorder 
zz RashRash 
zz Physicians can not agreePhysicians can not agree 
zz Cited by a number of Cited by a number of POEMRs POEMRs as one of the as one of the 
reasons of failurereasons of failure</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>ReadingReading 
zz Sowa: Chapter 2Sowa: Chapter 2</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Sowas OntologySowas Ontology 
zz AXIOMS:AXIOMS: 
zz Independent: independent entities can exist without Independent: independent entities can exist without 
being dependent on the existence of another entity. being dependent on the existence of another entity. 
E.g. person, diary, song.E.g. person, diary, song. 
zz Relative: relative entities require the existence of Relative: relative entities require the existence of 
some other entity. E.g. joints between bones, middle some other entity. E.g. joints between bones, middle 
child, remission after a disease episode.child, remission after a disease episode. 
zz Mediating: mediating entities require the existence of Mediating: mediating entities require the existence of 
(at least) two other entities and establish new (at least) two other entities and establish new 
relationship among them. E.g. theory of relativity, relationship among them. E.g. theory of relativity, 
diagnostic strategy, cardiovascular system.diagnostic strategy, cardiovascular system.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Why Ontology in Biomedical DomainWhy Ontology in Biomedical Domain 
zz Encode dataEncode data 
zz E.g. Patient A is diabetic and HIV positive E.g. Patient A is diabetic and HIV positive 
zz Represent knowledgeRepresent knowledge 
zz E.g. Blood Glucose test is a diagnostic test for E.g. Blood Glucose test is a diagnostic test for 
diabetes. diabetes.</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Contrast Contrast --&gt; Distinction&gt; Distinction 
zz All perceptions start with contrastAll perceptions start with contrast 
zz Bright Bright  darkdark 
zz Tall Tall  shortshort 
zz Healthy Healthy  illill 
zz Happy Happy  sadsad 
zz Distinction (discrete/continuous) Distinction (discrete/continuous) 
conceptual interpretations of perceptual conceptual interpretations of perceptual 
contrastscontrasts</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Data Model Example Data Model Example  HL7 RIMHL7 RIM 
zz It is good practice to give a freeIt is good practice to give a free --text text 
description of a attribute, as well as description of a attribute, as well as 
document the rationale and open issuesdocument the rationale and open issues 
zz 3.1.6 status_cd : CS 3.1.6 status_cd : CS 
The state of the action (e.g., newly ordered, in process, The state of the action (e.g., newly ordered, in process, 
completed.) The state is communicated in coded form. The completed.) The state is communicated in coded form. The 
codes are strictly defined by the statecodes are strictly defined by the state --transition model of a transition model of a 
service class. No alternative coding system can be used for service class. No alternative coding system can be used for 
the status_cd attribute (CNE, coded no exceptions.) the status_cd attribute (CNE, coded no exceptions.)  ----
SchadowSchadow,,RusslerRussler, Mead, Case &amp; McDonald, The Unified Service 
, Mead, Case &amp; McDonald, The Unified Service 
Action Model,Action Model,RegenstreifRegenstreifInstitute for Health Care, 2000Institute for Health Care, 2000</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>To Solve the ProblemTo Solve the Problem 
zz Develop formalism for sharing (e.g. KIF, Develop formalism for sharing (e.g. KIF, 
CGIF)CGIF) 
zz Develop standard ontologyDevelop standard ontology 
zz Develop new formalism to increase Develop new formalism to increase 
expressive powerexpressive power</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Data ModelingData Modeling 
zz Is about how to represent a piece of data in a Is about how to represent a piece of data in a 
standard format.standard format. 
zz Often involve the specification ofOften involve the specification of 
zz Properties the Properties the classobjectclassobject /construct (e.g. data type, /construct (e.g. data type, 
relationship to other class/object/construct)relationship to other class/object/construct) 
zz Attributes/elements of the data class/object/constructAttributes/elements of the data class/object/construct 
zz Properties (e.g. data type) of  Properties (e.g. data type) of 
zz Methods/functions pertaining to the dataMethods/functions pertaining to the data attributesattributes</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Matrix of Central CategoriesMatrix of Central Categories 
PurposePurpose ReasonReason SituationSituation StructureStructure MediatingMediating HistoryHistory DescriptionDescription ParticipationParticipation JunctureJuncture RelativeRelative ScriptScript SchemaSchema ProcessProcess ObjectObject IndepenIndepen --
dentdentOccurrentOccurrent ContinuantContinuant OccurrentOccurrent ContinuantContinuantAbstractAbstract PhysicalPhysical</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Major ConsiderationsMajor Considerations 
zz Expressiveness (Domain Complete)Expressiveness (Domain Complete) 
zz Efficiency (concise)Efficiency (concise) 
zz ComputabilityComputability 
zz Clarity (non ambiguous)Clarity (non ambiguous) 
zz GeneralizabilityGeneralizability 
zz ConsistencyConsistency 
zz Low RedundancyLow Redundancy</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>ExampleExample 
zz Problem Oriented Medical RecordProblem Oriented Medical Record 
zz Weed LL. Medical records that guide and Weed LL. Medical records that guide and 
teach. 1968. MD teach. 1968. MD ComputComput . 1993 Mar. 1993 Mar --
Apr;10(2):100Apr;10(2):100 --14. 14. 
zz Where SOAP comes fromWhere SOAP comes from 
zz The gist: organizing medical data/information The gist: organizing medical data/information 
by patient problemby patient problem 
zz Many Many EMRs EMRs has a place for problem listhas a place for problem list</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Tell me whats in this roomTell me whats in this room 
zz Tables, chairs, windows, computers, papers, Tables, chairs, windows, computers, papers, 
pens, people, etc..pens, people, etc.. 
zz We can writeWe can write 
zz But what is a table? What is a room?But what is a table? What is a room? 
zz Logic has no vocabulary of its ownLogic has no vocabulary of its own ),( )( )( .. yxIny Roomx Tableyx</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Ontological CategoriesOntological Categories 
zz Making a choice on ontological categories Making a choice on ontological categories 
is first step in system design is first step in system design  John SowaJohn Sowa 
zz Ontological Categories isOntological Categories is 
zz Class in OO systemClass in OO system 
zz Domain in database theoryDomain in database theory 
zz type in AI theorytype in AI theory 
zz type or sort in logic  type or sort in logic</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Philosophers Approach to OntologyPhilosophers Approach to Ontology 
zz TopTop--downdown 
zz Concerned with the entire universeConcerned with the entire universe 
zz Build top level ontology firstBuild top level ontology first 
zz Long historyLong history 
zz Lao Lao Zi Zi (Book of Tao)(Book of Tao) 
zz PlatoPlato 
zz AristotleAristotle 
zz Kant (1787)Kant (1787)</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>ExerciseExercise 
Assume you are developing an alert system Assume you are developing an alert system 
to monitor errors in laboratory information to monitor errors in laboratory information 
systems. Identify some distinctions for systems. Identify some distinctions for 
categorizing the errors and describe which categorizing the errors and describe which 
distinctions are in contrast with which distinctions are in contrast with which 
other distinctions. How would this other distinctions. How would this 
influence our data modelinginfluence our data modeling</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Contrast Contrast --&gt; Distinction&gt; Distinction 
zz All perceptions start with contrastAll perceptions start with contrast 
zz Bright Bright  darkdark 
zz Tall Tall  shortshort 
zz Healthy Healthy  illill 
zz Happy Happy  sadsad 
zz Distinction (discrete/continuous) Distinction (discrete/continuous) 
conceptual interpretations of perceptual conceptual interpretations of perceptual 
contrastscontrasts</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Further ReadingFurther Reading 
zz http://www.http://www. togethersofttogethersoft .com/services/pra.com/services/pra 
ctical_guides/ctical_guides/ umlonlinecourseumlonlinecourse /index.html/index.html 
zz http://www.hl7.org/http://www.hl7.org/ , then search for rim, then search for rim</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Another ExampleAnother Example 
zz What does acute mean?What does acute mean? 
zz sharpness or severity e.g. sharpness or severity e.g. acuteacute pain pain 
zz having a sudden onset, sharp rise, and short having a sudden onset, sharp rise, and short 
course, e.g. course, e.g. acuteacute pancreatitispancreatitis 
zz In a data model for finding, we had In a data model for finding, we had 
severity as an attribute. Thus need to severity as an attribute. Thus need to 
decide where acute fit in. decide where acute fit in.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Last Time We Talked AboutLast Time We Talked About 
zz Boolean AlgebraBoolean Algebra 
zz Predicate Logic (First order logic)Predicate Logic (First order logic)</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Sowas Ontology (Sowas Ontology ( Peirce Peirce and and 
Whitehead)Whitehead) 
zz AXIOMS:AXIOMS: 
zz Physical: physical entities have location Physical: physical entities have location 
in space and a point in time. E.g. hand, in space and a point in time. E.g. hand, 
hair, computer.hair, computer. 
zz Abstract: abstract entities do not have Abstract: abstract entities do not have 
location in space or a point in time. E.g. location in space or a point in time. E.g. 
theorem, knowledge, story.theorem, knowledge, story.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Brentanos tree of Aristotles Brentanos tree of Aristotles 
CategoriesCategories 
Being 
Substance Accident 
Property 
Relation 
Directness Inherence 
Containment</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Ontology Fills the GapOntology Fills the Gap 
zz Ontology is a study of existence, of all Ontology is a study of existence, of all 
kinds of existence, of all kinds of entitieskinds of existence, of all kinds of entities 
zz It supplies the predicates of predicate It supplies the predicates of predicate 
logic and labels that fill the boxes and logic and labels that fill the boxes and 
circles of conceptual graphcircles of conceptual graph</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>CYC OntologyCYC Ontology 
Thing 
Individual Obj ect Intangi ble 
Event Represented Thing 
Stuff IntangibleObject 
Collection Relationship</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Ontology Development in Biomedical Ontology Development in Biomedical 
DomainDomain 
zz Areas that directly involve ontologyAreas that directly involve ontology 
zz Data modelData model 
zz Vocabulary/terminologyVocabulary/terminology 
zz Knowledge based systemKnowledge based system</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Sources of OntologySources of Ontology 
zz Observation: provides knowledge of the Observation: provides knowledge of the 
physical worldphysical world 
zz Reasoning: make sense of observation by Reasoning: make sense of observation by 
generating a framework of abstractions generating a framework of abstractions 
called metaphysics.called metaphysics.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Problem Faced by Computer/Information Problem Faced by Computer/Information 
ScientistsScientists 
zz Tower of BabelTower of Babel 
zz Ontology used/developed by different groups Ontology used/developed by different groups 
for applications for applications 
zz Terminological and conceptual incompatibilitiesTerminological and conceptual incompatibilities 
zz Problem arise in system development and Problem arise in system development and 
maintenance as well as data/knowledge exchangemaintenance as well as data/knowledge exchange 
zz Insufficient expressive powerInsufficient expressive power</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 3Lecture 3 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Today We Will Talk AboutToday We Will Talk About 
zz OntologyOntology 
zz Data ModelData Model</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Computer/Information Sciences Computer/Information Sciences 
ApproachApproach 
zz Bottom UpBottom Up 
zz Start with limited world or specific applicationsStart with limited world or specific applications 
zz Exception: Exception: Cyc Cyc systemsystem 
zz Designed with computing in mindDesigned with computing in mind 
zz Short HistoryShort History 
zz First use of the term ontology in computer First use of the term ontology in computer 
science community: McCarthy, J. 1980 science community: McCarthy, J. 1980 
Circumscription Circumscription  A Form of NonA Form of Non --Monotonic Monotonic 
Reasoning, Reasoning, Artificial IntelligencArtificial Intelligenc e, 5: 13, 27e, 5: 13, 27  
39.39.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>My Simplified UnderstandingMy Simplified Understanding 
zz Ontology seeks to describe entities through Ontology seeks to describe entities through 
classification of relations among entitiesclassification of relations among entities 
zz Domain ontology limits the its scope to a specific Domain ontology limits the its scope to a specific 
domain such as medicinedomain such as medicine 
zz In informatics, we further limit domain ontology In informatics, we further limit domain ontology 
to what is needed by a application or certain to what is needed by a application or certain 
kinds of applications such clinical guideline, kinds of applications such clinical guideline, 
retrieval of pathology informationretrieval of pathology information</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Sowas OntologySowas Ontology 
zz AXIOMS:AXIOMS: 
zz Continuant: has only spatial parts and no Continuant: has only spatial parts and no 
temporal parts; identity cannot depend on temporal parts; identity cannot depend on 
location in space and time. E.g. gender, alert location in space and time. E.g. gender, alert 
and reminder system, medication formula.and reminder system, medication formula. 
zz OccurrantOccurrant : has both spatial parts : has both spatial parts 
(participants) and no temporal parts (stages); (participants) and no temporal parts (stages); 
can only identify by location in space and can only identify by location in space and 
time. E.g. disease episode, clinical event, time. E.g. disease episode, clinical event, 
medication order.medication order.</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Ontological CategoriesOntological Categories 
zz Making a choice on ontological categories Making a choice on ontological categories 
is first step in system design is first step in system design  John SowaJohn Sowa 
zz Ontological Categories isOntological Categories is 
zz Class in OO systemClass in OO system 
zz Domain in database theoryDomain in database theory 
zz type in AI theorytype in AI theory 
zz type or sort in logic  type or sort in logic</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Course Overview (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture1/</lecture_pdf_url>
      <lectureno>1</lectureno>
      <slides>
        <slide>
          <slideno>12</slideno>
          <text>Overview of the computer 
 Compilers translate a high-level programming 
language (such as C++) to a low-level one (such 
as assembly language) 
High-level statement: A + B 
Assembly language: add A, B 
Machine language: 1000110010100000</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Programming language paradigms 
Some other high-level languages have different 
characteristics: 
 Programming in these languages is defining or 
declaring a solution 
 A programming language analog of hardwares 
modifiable storage is not an important feature 
This paradigm is called declarative programming 
Examples of declarative languages: 
Common Lisp, Scheme, Prolog</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Course overview 
Course Aims 
 Present basic computer science concepts 
necessary for understanding and solving 
medical informatics problems (part 1) 
 Introduce important data and knowledge 
representation methods (part 2) 
 Examine data storage and retrieval issues as 
they relate to the medical domain (part 3)</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Programming language paradigms 
 Variables and assignment together serve as the 
programming language analog of hardwares 
modifiable storage (computer main memory) 
This paradigm/pattern of programming is called 
imperative programming 
Examples of imperative languages: 
C, Pascal, C++, Java, Fortran</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Questionnaires</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Programming language paradigms 
Many high-level languages have the following 
characteristics: 
 Programming in these languages is issuing 
instructions/commands (imperatives) 
 There is a notion of modifiable storage 
(variables) 
 Assignment is used to change the state of the 
variables (and consequently of the program)</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Imperative Programming Example 
Trace of factorial of the number 4: 
factorial-rec(4) 
4 * factorial-rec(3) = 
4 * 3 * factorial-rec(2) = 4 * 3 * 2 * factorial-rec(1) = 4 * 3 * 2 * 1 * factorial-rec(0) = 
4 * 3 * 2 * 1 * 1 = 
24 returns:</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Solving problems with computers 
 The word algorithm is named for al-Khowarizmi, 
a 9th century Persian mathematician 
 An algorithm is a step by step procedure for 
solving a problem 
 You are all familiar with clinical algorithms or 
algorithms for cooking (also known as recipes) 
 Creating elegant algorithms (algorithms that 
are simple and/or require the fewest steps 
possible) is a principal challenge in programming</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Imperative Programming Example 
Previous imperative algorithm in Java: 
int factorial-rec(int n) // assume n is a number &gt;= 0 
{ 
int factorial; 
int temp; 
if (n = 0) return 1; // factorial of 0 is 1 
factorial = n; 
temp = n - 1; // temp stores the next number in the series 
return 
} factorial * factorial-rec(temp);</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Another algorithm 
Problem : 
Write out a step by step description of Euclids algorithm for 
finding the greatest common divisor of two non-negative integers, 
X and Y: 
As long as the value of neither X nor Y is zero, continue 
dividing the larger of the values by the smaller and 
assigning to X and Y the values of the divisor and 
remainder respectively. 
remainder becomes 0 is the greatest common divisor. The final value of X when the</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Creating a simple algorithm 
Problem : 
You need to share a pizza with five of your 
friends so that each of you gets a piece of the 
same size 
Solution : 
Volunteer?</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Declarative Programming Example 
Declarative version of factorial in Scheme: 
(define (factorial n) 
(if (= n 0) 1 
(* n (factorial (- n 1))))) 
Trace of solution for the number 4: 
(factorial 4) = (* 4 (* 3 (* 2 (* 1 1)))) = 
24</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Overview of the computer 
 Programmers created a program called an 
assembler to translate from the new symbolic 
notation to binary 
 This symbolic notation was called assembly 
language 
The symbolic instruction: add A, B 
is translated by the assembler to a form the 
computer understands: 1000110010100000</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Outline 
 Overview of the computer 
 Programming languages and paradigms 
 Solving problems with a computer 
 abstraction 
algorithms 
 Questionnaires</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Overview of the computer 
3) Input 
(writes data to memory) 
4) Output 
(reads data from memory)</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Another problem 
A physician with a small practice wants you to 
write a program that calculates the number of 
minutes he can spend per appointment. 
patients each day and works an 8 hour day. needs half an hour for lunch, and 10 minutes after 
each patient visit to write up notes. You may 
assume for this exercise that each patient gets an 
equal amount of time with the physician. He sees 15 
He</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Overview of the computer
Memory
(primary)Input Control
Datapath Output
Processor (CPU)</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Imperative Programming Example 
Solution to the factorial problem for a number n: 
-create a function called factorial-rec that takes n as an 
argument 
-create a variable within factorial-rec called factorial 
-create another variable within factorial-rec called temp 
-if n is 0 return a value of 1 (the factorial of 0 is 1) 
otherwise (n is greater than 0) 
-assign the value of n to factorial 
-assign to temp the value of n minus 1 
-return factorial multiplied by factorial-rec(temp)</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Euclids GCD Algorithm 
If x is less than or equal to 0 then stop 
If y is less than or equal to 0 then stop 
As long as y is greater than 0 repeat these steps: 
if x is greater than y then numerator = x and divisor = y 
otherwise numerator = y and divisor = x 
remainder 
x 
y 
When y is equal to 0 the gcd is x = numerator modulo divisor 
divisor = 
= remainder</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Side note on Java 
 Assembly language varies from one type of 
computer to another (as does machine language) 
 Traditional compilers compile a program into 
the version of assembly language that runs on a 
particular type of computer 
 Running the same program on another type of 
computer may require rewriting some of its high-level code and usually requires recompiling</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Solving problems with computers 
 The set of steps that define an algorithm must be 
unambiguous (no room for misinterpretation) 
 An algorithm must have a clear stopping point 
(a common mistake for programmers developing 
algorithms for problems that involve repetitive 
tasks is producing a series of steps that never end 
--an infinite loop)</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Overview of the computer 
1) Processor (CPU) 
 Datapath (brawn: 
operations) 
 Control (brain: tells datapath, memory, I/O 
devices what to do according to the wishes of a program) 
2) Memory 
(where programs are kept when they are running; contains data needed by running programs) performs arithmetic</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Overview of the computer 
 Computers respond to/act on instructions 
 Instructions are collections of bits that the 
computer understands 
 Early programmers communicated with a 
computer in its machine language using binary 
numbers (very tedious) 
 Communication using symbolic notation that 
was closer to the way humans think was soon 
adopted</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Observations 
 Declarative programming is often a more 
intuitive approach to solving a problem 
 Easier to use for certain classes of problems 
(theorem proving, etc.) 
 However, since it does not attempt to mirror real 
hardware storage allocation, memory 
management and speed are sometimes problems</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Solving problems with computers 
In order to create a computer program to solve 
a particular problem we must: 
 create a concise description/model of the 
problem, omitting details irrelevant to 
solving it (this is an example of abstraction) 
 devise appropriate methods for solving this 
concise description (create an algorithm)</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Introduction 
Medical informatics is interdisciplinary, 
and borrows concepts/ideas from: 
 medicine 
 computer science 
 information science 
 statistics 
This course focuses mainly on computer science 
concepts used in medical informatics</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Overview of the computer 
 The most important program that runs on any 
computer is the operating system (e.g., 
Unix/Linux, Mac OS, Windows XX, IBM OS/2) 
 The OS manages the execution of every other 
program that runs on a computer 
 It recognizes keyboard input, sends output to 
display screens, keeps track of files on disk and 
controls peripheral devices such as printers, etc.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Example Problem 
The factorial problem (for numbers greater 
than or equal to 0): 
 the factorial of 0 is 1 
 the factorial of any number, n, greater than 0 
is n multiplied by the factorial of n minus 1 
(finding the factorial of a number, n, larger 
than 0 requires finding the factorial of all 
numbers between n and 0)</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>HST 952 
Computing for Biomedical Scientists Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Introduction 
Why learn computer science basics? 
 May need to design systems that others 
implement 
 May need to implement prototypes 
 May need to oversee programmers 
 May need to analyze systems/products 
 May need to apply these concepts in your 
research projects/future job</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Overview of the computer 
 Communication with a computer requires the 
use of electrical signals 
 The easiest signals for a computer to understand 
are off and on 
 The alphabet for a computer (used in its 
machine language ) consists of two letters that 
represent the off and on signals: 0 and 1 
 Each letter is referred to as a binary digit or bit</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Side note on Java 
 Time is often spent creating versions of programs 
that are customized for a particular type of 
computer 
 Java compilers translate high-level Java 
statements to bytecode 
 Bytecode is not customized to any specific type 
of computer (it is architecturally neutral) 
 The idea is that you can write a Java program on 
one type of computer and run it on any other</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Overview of the computer 
 Assembly language is still used today 
 It requires a programmer to write one line 
for every instruction the computer will 
follow (think like a machine) 
 Using the same ideas that led to assemblers, 
programmers created programs called compilers</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Review Session (PDF)
Review Session Solutions (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture11/</lecture_pdf_url>
      <lectureno>11</lectureno>
      <slides>
        <slide>
          <slideno>6</slideno>
          <text>lecture11 
==================================================================== 
14) 
We want to copy the contents of one file to another in the
class defined below. What expression should go in the
parentheses after the while statement. What statements should 
occur in the body of the while loop?
What happens when a FileNotFoundException occurs in main
given the class definition below (if for example, input.txt
cannot be found)?:
public class CopyFile{ 
public static void main(String[] args) { 
try { 
FileReader fr = new FileReader("input.txt"); FileOutputStream fw = new FileOutputStream("output.txt"); BufferedReader in = new BufferedReader(fr); PrintWriter out = new PrintWriter(fw); String getLine = in.readLine(); while ( ) { 
} in.close(); out.close(); 
} catch (Exception e2) { 
System.err.println("An exception occurred"); return; 
} catch (IOException e1) { 
System.err.println("An IO exception occurred"); return; 
} catch (FileNotFoundException e) { 
System.err.println("File not found!"); return; 
} 
} 
} 
} 
Page 7</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>lecture11 
newChar2.setChar('z'); 
char c1 = newChar1.getChar(); char c2 = newChar2.getChar(); System.out.println("c1 is " + c1 + " c2 is " + c2); 
} 
} 
============================================================== 
7) 
(spot the errors -- 7 compile-time, 2 run-time) 
import java.util.*; public class Test{ 
String s1 = "hey";
Vector strVec = new Vector(20);
char ch = "a"; 
public void setVector(String[] strs)
{
int i = 0;
do {
strVec.addElement(strs[i]); 
} while (i &lt; strs.length) strVec.trimToSize(); 
} 
public static void main(String[] args) 
{ 
String a = {"one", "two", "three", "four"}; 
setVector(a); String b[] = {}; setVector(b); 
} 
} 
============================================================== 
8) 
(iteration and recursion) 
Write a method int square(int n) that given a number n returns the value of n*n (n squared) without using the multiplication operator. You may use your knowledge of 
multiplication via addition from homework 1. 
a) Your method int square(int n) should call a recursive method 
that actually computes the square of n. 
b) Your method int square(int n) should call an iterative method 
that actually computes the square of n. 
============================================================== (Tracing through a recursive method) 
9) 
Write out a trace of the return values when fib(5) is called. 
public int fib(int n) 
{ 
// calculates fib(n) where n &gt;=0 if (n == 0) 
Page 4</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>lecture11 
System.out.println("."); 
} 
public static void main(String[] args) 
{ 
int[] arr1 = {1, 2, 3, 4, 5}; 
TestVector newVec = new TestVector(); 
newVec.setVector(arr1); newVec.printVector(); Vector n1 = newVec.getVector(); n1.addElement(new Integer(90)); n1.addElement(new Integer(-25)); newVec.printVector(); 
} 
} 
============================================================== 
6) 
(static and non-static variables) 
a) What is the line printed out by the main method of class TestChar1? 
a) What is the line printed out by the main method of class TestChar2? 
public class TestChar1 { 
private char c; 
public void setChar(char ch) { 
c = ch; 
} 
public char getChar() { 
return ch; 
} 
public static void main(String[] args) 
{ 
TestChar1 newChar1 = new TestChar1(); newChar1.setChar('a'); TestChar1 newChar2 = new TestChar1(); newChar2.setChar('z'); char c1 = newChar1.getChar(); char c2 = newChar2.getChar(); System.out.println("c1 is " + c1 + " c2 is " + c2); 
} 
} 
public class TestChar2 { 
public static char c; 
public void setChar(char ch) { 
c = ch; 
} 
public char getChar() { 
return ch; 
} 
public static void main(String[] args) 
{ 
TestChar1 newChar1 = new TestChar1(); newChar1.setChar('a'); TestChar1 newChar2 = new TestChar1(); 
Page 3</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>lecture11 
return 0; 
else if (n == 1) 
return 1; 
else 
return fib(n-1) + fib(n-2) 
} 
=========================================================================== 
10) 
(inheritance)
Imagine that you have defined a class called BaseClass which
has the following attributes:
private int num; private String arg; 
and the following methods: 
public void doSomething(String app);
private void appendArg(String app);
public int getNum();
public void setNum(int n);
public String getArg();
public void setArg(String a);
You create a new class DerivedClass that is a subclass of BaseClass
and define a variable newClass in DertivedClass's main method as follows:
DerivedClass newClass = new DerivedClass();
Which of the following calls in main would be invalid:
int a = newClass.getNum();
newClass.setNum(56);
newClass.setArg("happy happy");
newClass.appendArg("joy joy"); 
String newStr=newClass.getArg();
================================================================
11) 
(method overloading) 
What's wrong here? 
import java.util.*; public class Area{ 
double area(int s1, double s2) { 
return(s1*s2); 
} 
double area(int s1, int s2) { 
return(s1*s2*1.0); 
} 
double area(double r) { 
return(Math.PI*r*r); 
} 
int area(int s1, int s2) { 
return(s1*s2); 
} 
Page 5</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>lecture11 
5)
(Primitive and class types and call/return-by-value)
Remember: 
In Java you make a class cloneable by having it implement the Cloneable interface; e.g., to make class Person cloneable you would write: 
public class Person implements Cloneable { 
// the usual class variables, constructors, and methods 
// go here 
} 
a) What are the 3 lines that the main method in class TestNumber prints out? 
b) What are the 2 lines that the main method in class TestVector prints out? 
c) What changes would you make in class TestVector to ensure that the Vector v 
in that class cannot be inappropriately modified? 
public class TestNumber { 
private int number; 
public void setNumber(int n) { 
number = n; 
} 
public int getNumber() { 
return number; 
} 
public static void main(String[] args) 
{ 
TestNumber newNum = new TestNumber(); newNum.setNumber(25); System.out.println("number is: " + newNum.getNumber()); int n1 = newNum.getNumber(); n1 = 90; System.out.println("number is: " + newNum.getNumber()); System.out.println("n1 is: " + n1); 
} 
} 
public class TestVector { 
private Vector v; 
public void setVector(int[] arr) 
{ 
v = new Vector(arr.length); for (int i = 0; i &lt; arr.length; i++) 
v.addElement(new Integer(arr[i])); 
} 
public Vector getVector() { 
return v; 
} 
public void printVector() 
{ 
Integer n; System.out.print("Vector v has contents: "); for (int i=0; i &lt; v.size(); i++) { 
n = (Integer)v.elementAt(i); System.out.print(" " + n.intValue()); 
} 
Page 2</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>lecture11 
} 
=========================================================================== 
12) 
(exceptions) 
What's the difference in output between a call to 
double quot = divide1(5, 0);
and
double quot = divide2(5, 0);
public double divide1(int numerator, int denominator) 
{ 
double quotient = SENTINEL; try { 
if (denominator == 0) 
throw new DivideByZeroException(); 
quotient = numerator/(double)denominator; System.out.println(numerator + "/" 
+ denominator 
+ " = " + quotient); 
} catch(DivideByZeroException e) { 
System.out.println(e.getMessage()); 
System.exit(0); 
} 
return(quotient); 
} 
public double divide2(int numerator, int denominator) 
{ 
double quotient = SENTINEL; try { 
if (denominator == 0) 
throw new DivideByZeroException(); 
quotient = numerator/(double)denominator; System.out.println(numerator + "/" 
+ denominator 
+ " = " + quotient); 
} catch(DivideByZeroException e) { 
System.out.println(e.getMessage()); 
} 
finally { 
return(quotient); 
} 
} 
=========================================================================== 
13)
(command line input to a program)
a) If I've defined a java class TestNew and compiled it, 
what is the value of args.length in main after I type in the following command?: 
java TestNew input.txt output.txt 
b) What would the values stored in args be? 
Page 6</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Lecture 11 (review session for intro to computing) 
============================================================== 
1) 
(Big-Oh notation continued) 
Assume that each of the following operations takes 1 time 
unit: an arithmetic op, a comparison, a logical op, an
assignment, accessing a particular row in an array, accessing 
a particular column in an array, a variable declaration (allocation 
of space in memory for the declared variable).
public void fillArray(int[][] arr, int n) { 
int row, col; 
for (row=0; row &lt; n; row++) 
for (col=0; col &lt; n; col++) 
arr[row][col] = 10*row + col; 
} 
a) Find the worst-case time, T(n) for the method fillArray above. 
b) T(n) is O(?) 
============================================================== 
2) 
(2-dimensional arrays) 
What are the contents of the array arr above (from the method fillArray) when n = 5? 
============================================================== 
3) 
(Big-Oh notation) 
We have an algorithm which has time T(n) = 4n + 4, 
a) To find the worst case time, if we pick the value 5 as the 
constant c, for the inequality T(n) &lt;= c*f(n) (4n + 4 &lt;= 5n in this case) what is the value of n0? 
b) If we pick the value 6 as the constant c, for the inequality 
T(n) &lt;= c*f(n) (4n + 4 &lt;= 6n in this case) what is the value of n0? 
============================================================== 
4)
(pre-increment/post-increment pre-decrement/post-decrement operators)
What are the values of result1 - result4? 
public static void main(String[] args) 
{ 
int i=25, j=30, k=4, l = 9; int result1, result2, result3, result4; 
result1 = 5 + ++i; result2 = 87 / --j; result3 = 50 % k++; result4 = 6 * l--; 
} 
============================================================== 
Page 1</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Java&#174; Constructs (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture3/</lecture_pdf_url>
      <lectureno>3</lectureno>
      <slides>
        <slide>
          <slideno>34</slideno>
          <text>Switch statement
case Q:
case q: 
System.out.println(Instructor is Qing); 
break; 
default: 
System.out.println(Unknown instructor); 
break; 
} 
Fall-through is desired in this example</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Logical Operators
	How the &amp;&amp; operator works 
true &amp;&amp; true evaluates to true 
true &amp;&amp; false evaluates to false false &amp;&amp; true evaluates to false false &amp;&amp; false evaluates to false 
 Once one of its operands is false, a boolean 
expression involving &amp;&amp; evaluates to false</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Recap
Objects (instances) of class Vehicle
HarleyDynaGlide 
Number of wheels : 2 
Type: Motorcycle 
Color: Black 
Manufacturer: Harley-Davidson 
Mileage: 1,000 miles MackVision 
Number of wheels : 18 Type: Truck 
Color: Red 
Manufacturer: Mack 
Mileage: 50,000 miles</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Loop Statements
	Allow us to repeat an action/several 
actions until a particular condition is met 
Examples of Java loop statements:
	while 
	do-while 
f o r</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Recap
Class definition:
 Provides a template of the attributes and 
methods associated with a kind of object 
 An object is a specific instantiation of a class</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Switch statement
Another example (myNum is a variable of type int): 
switch(myNum) { 
case 1: 
System.out.println(The number is one); 
case 2: 
System.out.println(The number is two); 
default:
System.out.print(The number is neither);
System.out.println( one nor two);
} 
What happens when myNum is 3?</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>if/if-else statement
	The actions following the if part of the statement are 
performed only when the boolean expression 
evaluates to true 
	If the boolean expression evaluates to false, the 
actions following the else part of the statement are 
executed (when an else is present) 
	The curly braces group together all the actions to be 
performed 
	If only one action is to be performed, the curly 
braces may be omitted</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Comparison Operators
	The last four comparison operators may only 
be used to compare values from ordered 
sequences (numbers, characters) 
	Examples of boolean expressions: 
y &lt; z (evaluates to true) 
5.9 &gt;= 23 (evaluates to false)
true == false (evaluates to false)
25 != 25 (evaluates to false)</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>if/if-else statement
Syntax: 
if (boolean expression ) 
{ 
// perform action1 
} 
else 
{ 
// perform action2
}</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Switch statement
switch( int or char expression ) {
case int or char constant : 
// perform action1 
break; 
case int or char constant : 
// perform action2 
break; 
default: 
// perform action3 
break; 
}</text>
        </slide>
        <slide>
          <slideno>42</slideno>
          <text>For Loop
Syntax:
for(initializer; boolean expression ; update action ) 
{ 
// perform actions 
}</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Logical Operators
	How the || operator works 
true || true evaluates to true 
true || false evaluates to true false || true evaluates to true false || false evaluates to false 
 Once one of its operands is true, a boolean 
expression involving || evaluates to true</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 3</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Recap
Imagine that we want to keep track of how 
many tons a truck can haul, but are not 
interested in this for cars or motorcycles
One approach to doing this could involve 
making the Vehicle class a parent class 
(superclass) of the Car, Motorcycle, and Truck (sub)classes</text>
        </slide>
        <slide>
          <slideno>41</slideno>
          <text>Do-While Loop
Example:
int iterator = 0;
do
{
System.out.println(Iterator is  + iterator);
iterator = iterator + 1; 
// another way of writing the line above is iterator++
} while(iterator &lt; 10);
How does this differ from the while loop example in terms of what 
gets printed?</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Logical Operators
 Binary operator (requires two operands) 
 Unary operator (requires just one operand)
Symbol Description 
&amp;&amp; and (binary operator)
|| or (binary operator)
! not (unary operator)</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>While Loop
 The actions in the loop body are performed only 
when the boolean expression evaluates to true
	If the boolean expression is true, the actions are 
performed until it is false 
 If the boolean expression is never false, we may 
have an infinite loop (actions performed until 
program runs out of memory resources, etc.)
	This implies that there should be a statement in 
the body of the loop that alters the loops course</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Switch statement
	Multi-way branching statement
	Makes a decision on which branch to take 
based on the value of an integer or character 
expression (called the controlling expression) 
	Can be mapped to an equivalent if-else 
sequence (but not always the other way around) 
	Syntax next</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Recap
Attributes and methods common to all vehicles 
would be described in the Vehicle class 
Attributes that are specific to a Car, Truck, or 
Motorcycle would be specified in the 
appropriate subclass 
For our example, the Truck class could have the 
attribute tonnage and methods getTonnage() 
and setTonnage() which the Car and 
Motorcycle classes would not have</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>While Loop
Example: 
int iterator = 0; 
while(iterator &lt; 10) { 
System.out.println(Iterator is  + iterator);
iterator = iterator + 1; 
// another way of writing the line above is iterator += 1
}</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>While Loop
Syntax:
while( boolean expression ) 
{ 
// perform action(s) 
}</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Recap
Algorithm: 
A series of unambiguous steps for solving a 
problem 
Object-oriented programming: 
Approach to programming that relies on 
objects and interactions among objects</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Switch statement
Note:
	there is an implicit equality comparison 
between the int or char expression in the 
switch and the constant in a case 
	default case is optional 
	break statement ends each case and is 
necessary to prevent fall-through</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>Do-While Loop
Syntax:
do 
{ 
// perform action(s) 
} while( boolean expression);</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Comparison Operators
Symbol Description
== is equal to
!= is not equal to 
&lt; is less than
&lt;= is less than or equal to
&gt; is greater than 
&gt;= is greater than or equal to</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Logical Operators
What do the boolean expressions in these 
assignment statements evaluate to? 
boolean firstBool = true || false &amp;&amp; false; boolean secondBool = (true || false) &amp;&amp; false; 
boolean thirdBool = firstBool || secondBool; 
boolean fourthBool = !true || false; 
boolean fifthBool = !(true &amp;&amp; false);</text>
        </slide>
        <slide>
          <slideno>40</slideno>
          <text>Do-While Loop
	The actions in the loop body are performed until 
the boolean expression evaluates to false 
	If the boolean expression is never false, we may 
also have an infinite loop 
	This implies that there should be a statement in 
the body of the loop that alters the loops course 
(ensures that the boolean expression is 
eventually false)</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Switch statement
Example (firstInitial is a variable of type char):
switch(firstInitial) {
case A: 
System.out.println(Instructor is Aziz); 
break; 
case O: 
System.out.println(Instructor is Omolola); break; 
Example continued on next slide</text>
        </slide>
        <slide>
          <slideno>44</slideno>
          <text>Read
Chapter 3</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Boolean Expressions
	Evaluate to true or false
	May be used with other language constructs 
to determine the flow of control in a 
program 
	Involve comparison operators and/or logical 
operators</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Switch statement
case Q: 
System.out.println(Instructor is Qing); 
break; 
default: 
System.out.println(Unknown instructor); break; 
}</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>This Lecture
We will examine some Java constructs that serve as 
building blocks/tools for implementing an algorithm 
in Java 
Java constructs include: 
 Expressions (boolean, arithmetic, logical, etc.) 
 Operators (comparison, logical, arithmetic)
 Statements (assignment, branch, loop, etc.)
Our focus will be on constructs that are important for 
determining the flow of control in a program</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>if/if-else statement
if (score &lt; 80) 
System.out.println(Score is less than 80); 
else { 
if (score &lt; 90) 
System.out.println(Score is less than 90); 
else { 
if (score &lt; 100) 
System.out.println(Score is less than 100); 
} 
} 
what happens when score is 50?</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Switch statement
Another example (myNum is a variable of type int): 
switch(myNum) { 
case 1: 
System.out.println(The number is one); 
case 2: 
System.out.println(The number is two); 
default:
System.out.print(The number is neither);
System.out.println( one nor two);
} 
What happens when myNum is 1?</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Logical Operators
	! has the highest precedence 
	&amp;&amp; has the next highest precedence
	|| has the lowest precedence 
	may use parentheses to group parts of an 
expression to force a particular order of 
evaluation</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Recap
Objects (instances) of class Vehicle
VolvoS60 
Number of wheels : 4 
Type: Car 
Color: Blue 
Manufacturer: Volvo 
Mileage: 5,000 miles DodgeNeon 
Number of wheels : 4 Type: Car 
Color: Green 
Manufacturer: Dodge 
Mileage: 10,000 miles</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>if/if-else statement
Example: 
if (score &lt; 100) 
System.out.println(Score is less than 100); 
if (score &lt; 90) 
System.out.println(Score is less than 90); 
if (score &lt; 80) 
System.out.println(Score is less than 80);
what happens when score is 50?</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Flow of control
	May need to write methods that have to choose one 
path out of several possible paths 
(programs for an ATM machine have to choose how much 
money to dispense based on your input and balance) 
	May need to repeat an action several times to obtain 
a desired result
(e.g., solution to the GCD problem)</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Branching statements
	Allow us to make a choice of an action given 
two or more options 
	Use implicit or explicit boolean expressions in 
making the choice 
Examples of Java branching statements: 
	if /if-else statement (uses explicit boolean expr.)
	switch statement (uses implicit boolean expr.)</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Recap
Example class: Vehicle
Attributes might include:
 Number of wheels
 Type 
 Color 
 Manufacturer
 Mileage 
Methods might include: 
 getMileage() 
 setMileage(int miles) 
 setMileage(Vehicle otherv)</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>if/if-else statement
Easier way to write the same sequence of statements: 
if (score &lt; 80) 
System.out.println(Score is less than 80); 
else if (score &lt; 90) 
System.out.println(Score is less than 90); 
else if (score &lt; 100) 
System.out.println(Score is less than 100); 
what happens when score is 120?</text>
        </slide>
        <slide>
          <slideno>43</slideno>
          <text>For Loop
Example:
int iterator;
for(iterator = 0; iterator &lt; 10; iterator++)
{
System.out.println(Iterator is  + iterator); 
}</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Recap
Object: 
 Has attributes (properties) 
 Has methods (methods define the way the object 
interacts with the world) 
Each method associated with an object
implements an algorithm that solves a 
particular problem that is specific to the 
object</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Switch statement
Example: Cases with no breaks (firstI nitial is a variable of type char): 
switch(firstInitial) { 
case A: 
case a: 
System.out.println(In structor is Aziz); 
break;
case O:
case o:
System.out.println(Instructor is Omolola); 
break; 
Example continued on next slide</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Logical Operators
	How the ! operator works 
! true evaluates to false 
! false evaluates to true 
	a boolean expression involving ! evaluates to 
the opposite of the operands truth value</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Designing Methods, Wrapper Classes, Arrays, Packages, Inheritance, Derived Classes, and Dynamic Binding (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture6/</lecture_pdf_url>
      <lectureno>6</lectureno>
      <slides>
        <slide>
          <slideno>37</slideno>
          <text>Example of Adding Constructor 
in a Derived Class: Student
public class Student extends Person 
{ 
private int studentNumber;
public Student()
{ 
super();studentNumber = 0;
} 
 z Keyword extends in 
first line 
 
class 
 creates derived 
class from base 
this is inheritance 
 Four new constructors (one on next slide) 
 default initializes attribute studentNumber to 0 
 super must be first action in a constructor definition
 Included automatically by Java if it is not there
 super() calls the parent default constructor</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Packages
	Use lowercase letters for the package name 
	By using packages if we write a new class description 
that has the same name as a built-in Java class, we can 
avoid problems 
	java.awt has a Rectangle class 
 to refer to it by its full name: java.awt.Rectangle 
	graphics package has a Rectangle class 
 to refer to it by its full name: graphics.Rectangle 
	To use java.awt and graphics Rectangle packages in the 
same code, can use their full names (which includes 
their package name)</text>
        </slide>
        <slide>
          <slideno>55</slideno>
          <text>Summary
	A derived class inherits the instance variables &amp; methods of 
the base class 
	A derived class can create addi tional instance variables and 
methods 
	The first thing a constructor in a derived class normally does is 
call a constructor in the base class 
	If a derived class redefines a method defined in the base class, 
the version in the derived class overrides that in the base class 
	Private instance variables and methods of a base class cannot 
be accessed directly in the derived class 
	If A is a derived class of class B,  then an instance of A (object) 
is both a member of classes A and B 
	the type of the object is both A and B</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Wrapper class example: Integer
	Some useful Integer methods: 
Integer.parseString("123") to 
convert a string of numerals to an integer 
Integer.toString(123) to 
convert an Integer to a String
	The other wrapper classes have similar 
constants and functions</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Multidimensional Array Parameters
and Returned Values
Number of rows of a 2D array is: nameOfArray.length 
Number of columns for each row is: 
nameOfArray[row-index].length 
public static void showTable(int[][] displayArray) 
{
int row, column;
for (row = 0; row &lt; displayArray.length; row++)
{
Notice how the number 
of rows is obtained 
System.out.print((row + 1) + " ");
 for (column = 0; column &lt; displayArray[row].length
Notice how the number
of columns is obtained ; column++)
 System.out.print("$" + displayArray[row][column] + "  ");
 System.out.println();
}
}</text>
        </slide>
        <slide>
          <slideno>41</slideno>
          <text>Example of Adding an Attribute in 
a Derived Class: Student
A line from the Student class: 
private int studentNumber;
 Note that an attribute for the student 
number has been added 
Student has this attribute in addition to 
firstName, lastName, and 
dateOfBirth , which are inherited from 
Person</text>
        </slide>
        <slide>
          <slideno>40</slideno>
          <text>Example of a constructor using this
	calls the constructor with three arguments, fName, lName ( String ) and 0 
(int), within the same class 
public Student(String first, String last)
{ 
this(first, last, 0);
} Student class has a constructor with three parameters: String for the 
firstName and lastName attributes and int for the studentNumber 
attribute 
public Student(String fName, String lName,
int newStudentNumber)
{ 
studentNumber = newStudentNumber;
} 
Another constructor within Student takes two String arguments and 
initializes the studentNumber attribute to a value of 0: super(fName, lName);</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Outline
 Arrays continued
 Packages 
 Inheritance</text>
        </slide>
        <slide>
          <slideno>52</slideno>
          <text>Example of Dynamic Binding: 
General Description
 A derived class calls a method in its 
parent class which calls a method that is 
overridden (defined) in the derived class 
 the parent class is compiled separately; in some 
cases before the derived class is even written
 the compiler cannot possibly know which address 
to use 
 therefore the address must be determined (bound) 
at run time</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Derived Classes: a Class Hierarchy
Person 
Student Employee 
Faculty Staff Undergraduate Graduate 
MastersDegree NonDegree PhD 
	The base class can be used to  implement specialized classes 
	For example: student, employee, faculty, and staff 
	Classes can be derived from the clas ses derived from the base class, 
etc., resulting in a class hierarchy</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Packages
	To use classes from a package in program source 
code, can put an import statement at the start 
of the file, e.g.: 
import graphics.*;
n o t e  t h e  " .*" notation, " *" is a wild-card that 
matches all class names in the graphics package; 
in our example, it is shorthand for graphics.Circle, 
graphics.Rectangle, and graphics.Ellipse 
	Class descriptions with no package statement 
are automatically placed in a default package (a 
package with no name)</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Calculating the Cell Values
Each array element corresponds to the balance for a specific 
number of years and a specific in terest rate (assuming a starting 
balance of $1000): 
balance(start-balance, years, rate ) = (start-balance) x (1 + rate)years 
The repeated multiplication by (1 + rate) can be done in a for loop that 
repeats years times. 
public static int balance(double startBalance, int years, double rate)
{
double runningBalance = startBalance;
int count;
for (count = 0; count &lt; years; count++)
runningBalance = runningBalance*(1 + rate/100);
return (int) (Math.round(runningBalance));
}</text>
        </slide>
        <slide>
          <slideno>48</slideno>
          <text>Assignment Compatibility
 Can assign an object of a derived class to a 
variable of any ancestor type 
Person josephine;
Employee boss = new Employee();josephine = boss; OK 
C a n not assign an object of an ancestor class to 
a variable of a derived class type 
Person josephine = new Person(); Employee boss;
boss = josephine; 
Not allowed Person 
Employee 
Person is the 
parent class of 
Employee in 
this example. 
An employee is a person but a pers on is not necessarily an employee</text>
        </slide>
        <slide>
          <slideno>51</slideno>
          <text>Static and Dynamic Binding
	Binding : determining the memory addresses for jumps 
(calls to class methods, etc.) 
	Static : done at compile time
 also called offline 
	Dynamic : done at run time
	Compilation is done offline
 it is a separate operation done before running a 
program 
	Binding done at compile time is, therefore, static
	Binding done at run time is dynamic 
 also called late binding</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Wrapper Classes
 Used to wrap primitive types in a class structure
 All primitive types have an equivalent class 
 The class includes useful constants and static methods, 
including one to convert back to the primitive type
Primitive type Class type Method to convert back 
int Integer intValue() 
long Long longValue() 
float Float floatValue() 
double Double doubleValue() 
char Character charValue()</text>
        </slide>
        <slide>
          <slideno>54</slideno>
          <text>Polymorphism revisited
	Using the process of dynamic binding to 
allow different objects to use different 
method actions for the same method name 
	Method overloading is an example of 
polymorphism 
	However, the term polymorphism is most 
often used in reference to dynamic binding</text>
        </slide>
        <slide>
          <slideno>42</slideno>
          <text>Example of Overriding a Method in 
a Derived Class: Student
	Both parent and derived classes have a writeOutput method 
	Both methods have the same parameters (none) 
	they have the same signature 
	The method from the derived class overrides (replaces) the 
parent's 
	It will not override the parent if the parameters are different (since 
they would have different signatures) 
T h i s  i s overriding , not overloading 
public void writeOutput()
{ 
System.out.println(Name:  + getFirstName() +   + 
getLastName());
System.out.println("Student Number : " + 
studentNumber);
}</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Example of a Partially Filled Array
entry[0] 
entry[1] 
entry[2] Anne 
Stephen 
Rahul countOfEntries - 1 
entry[3] 
garbage valuesentry[4] 
countOfEntries has a value of 3. 
entry.length has a value of 5.</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Inheritance Overview
	Inheritance allows you to define a very general 
class then later define more specialized classes 
by adding new detail 
 the general class is called the base or parent class
	The specialized classes inherit all the 
properties of the general class 
 specialized classes are derived from the base class
 they are called derived or child classes</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Multidimensional Arrays
	Arrays with more than one index 
 number of dimensions = number of indexes 
	Arrays with more than two dimensions are a 
simple extension of two-dimensional (2-D) 
arrays 
	A 2-D array corresponds to a table or grid 
 one dimension is the row 
 the other dimension is the column 
 cell: an intersection of a row and column 
 an array element corresponds to a cell in the table</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>An Example of Inheritance:
a Person Class
Accessor methods contd.:
 setDateOfBirth to change the value of the 
dateOfBirth attribute
 getDateOfBirth to read the value of the 
dateOfBirth attribute
 writeOutput to display the values of the firstName,
and lastName attributes 
	One other class method:
 sameName to compare the values of the firstName and 
lastName attributes for objects of the class 
	Note: the methods are public and the attributes 
private</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Partially Filled Arrays
	Sometimes only part of an array has been 
filled with data 
 Array elements always contain something, 
whether you have written to them or not
 elements which have not been written to/filled 
contain unknown ( garbage) data so you should 
avoid reading them 
	There is no automatic mechanism to detect 
how many elements have been filled - you, 
need to keep track...</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>Example of Adding Constructor 
in a Derived Class: Student
	Passes parameter fName to constructor of parent class
	Uses second parameter to initialize instance variable that 
is not in parent class. 
public class Student extends Person
{ . . . 
public Student(String fName, int newStudentNumber){ 
super(fName);studentNumber = newStudentNumber;
} 
. . .</text>
        </slide>
        <slide>
          <slideno>45</slideno>
          <text>The final Modifier
	Specifies that a method definition cannot be 
overridden with a new definition in a derived class 
E x a m p l e :
public final void specialMethod()
{
. . . 
} 
	Used in specification of some methods in standard 
libraries 
	Allows the compiler to generate more efficient code
	An entire class can be declared final, which means it 
cannot be used as a base class to derive another class</text>
        </slide>
        <slide>
          <slideno>53</slideno>
          <text>Dynamic Binding: Specific Example
Parent class : Figure 
 Defines methods: drawAt and drawHere 
 drawAt calls drawHere 
Derived class: Box extends Figure 
 Inherits drawAt 
 redefines (overrides) drawHere 
 Calls drawAt 
 uses the parent's drawAt method 
 which must call the derived class's, drawHere method 
 Figure is compiled before Box is even written, so the 
address of drawHere(in the derived class Box) cannot be 
known then
 it must be determined during run time, i.e. dynamically</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Processing a 2-D Array:
for Loops Nested 2-Deep
	Arrays and for loops are a natural fit
	To process all elements of an n-
dimensional array nest n for loops 
 each loop has its own counter that 
corresponds to an index</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Inheritance Overview
	After the general class is developed you only 
have to write the "difference" or 
"specialization" code for each derived class 
Aclass hierarchy: classes can be derived from 
derived classes (child classes can be parent 
classes) 
 any class higher in the hierarchy is an ancestor 
class 
 any class lower in the hierarchy is a descendent 
class</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Wrapper class example: Integer
D e c l a r e  a n Integer class variable: 
Integer n = new Integer(); 
	Convert the value of an Integer variable to its 
primitive type, int: 
int i = n.intValue();
//method intValue()returns an int
	Some useful Integer constants:
Integer.MAX_VALUE - the maximum 
integer value the computer can represent
Integer.MIN_VALUE - the smallest integer 
value the computer can represent</text>
        </slide>
        <slide>
          <slideno>49</slideno>
          <text>Character Graphics Example
Figure 
Box Triangle offset 
Methods: 
setOffset getOffset
drawAt drawHere 
offset height width 
Methods: 
setOffset getOffsetdrawAt drawHere 
reset drawHorizontalLine 
drawSides drawOneLineOfSides 
spaces offset base 
Methods: 
setOffset getOffsetdrawAt drawHere 
reset drawBase 
drawTop spaces Inherited 
Overrides Static Instance variables: 
Instance variables: Instance variables:</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Multidimensional Array Parameters
and Returned Values
	Methods may have multi-dimensional array 
parameters 
	Methods may return a multi-dimensional 
array as the value returned 
	The situation is similar to 1-D arrays, but 
with more brackets 
	Example: a 2-D int array as a method 
argument</text>
        </slide>
        <slide>
          <slideno>47</slideno>
          <text>What is the "Type" of a Derived class?
	Derived classes have more than one type
	They have the type of the derived class (the 
class they define)
	They also have the type of every ancestor class
 all the way to the top of the class hierarchy 
	All classes derive from the original, predefined 
Java class Object
T h a t  i s ,	Object is the original ancestor class 
for all other Java classes (including user-defined 
ones)</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Packages
	A way of grouping and naming a collection 
of related classes 
 the classes in a package serve as a library of 
classes 
 they do not have to be in the same directory as 
the code for your program 
	The first line of each class in the package 
must be the keyword package followed by 
the name of the package</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Java Code to Create a 2-D Array
 Syntax for 2-D arrays is similar to 1-D 
arrays 
 Declare a 2-D array of int s named 
table 
 the array table should have ten rows and 
six columns 
int[][] table = new int[10][6];</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>ageOfPerson() method
public double ageOfPerson() 
{ 
// The GregorianCalendar class default constructor creates 
// a new date and time corresponding to the date and time // the program in which it is called is executed 
GregorianCalendar today = new GregorianCalendar(); 
// Calendar is a parent class to GregorianCalendar // YEAR is a static named constant of the Calendar class 
int thisYear = today.get(Calendar.YEAR); 
int birthYear = dateOfBirth.get(Calendar.YEAR); 
// Java Gregorian Calendar month is zero based -- Jan==0 
int thisMonth = today.get(Calendar.MONTH); 
int birthMonth = dateOfBirth.get(Calendar.MONTH); double age = (thisYear - birthYear) + ((thisMonth - birthMonth)/12.0); 
return(age); 
}</text>
        </slide>
        <slide>
          <slideno>50</slideno>
          <text>Java program execution order
	Programs normally execute in sequence
	Non-sequential execution occurs with:
 selection (if/if-else/switch) and repetition (while/do-
while/for) 
(depending on the test it may not go in sequence) 
 method calls, which jump to the location in memory that 
contains the method's instructions and returns to the calling 
program when the method is finished executing 
	One job of the compiler is to try to figure out the 
memory addresses for these jumps 
	The compiler cannot always know the address
	sometimes it needs to be determined at run time</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Processing a 2-D Array:
for Loops Nested 2-Deep
	For example: calculate and enter balances in interest 
table (10 rows and 6 columns)
 inner loop repeats 6 times (six rates) for every outer loop 
iteration 
 the outer loop repeats 10 times (10 different values of 
years) 
	so the inner repeats 10 x 6 = 60 times = # cells in 
table 
int[][] table = new int[10][6];
int row, column;
for (row = 0; row &lt; 10; row++)
for (column = 0; column &lt; 6; column++) 
table[row][column] = balance(1000.00, row + 1, (5 + 0.5*column));</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Packages
	Pathnames are usually relative and use the CLASSPATH
environment variable 
DOS 
	If: CLASSPATH=c:jdk\lib\examples , and the classes in 
your graphics package are in
c:jdk\lib\examples\graphics\ , and your test 
program is in package test in 
c:jdk\lib\examples\test\TestGraphics.java
From the DOS command line in c:jdk\lib\examples,
can type javac test\TestGraphics.java to compile 
and java test.TestGraphics to run 
Output: 
Rectangle area is 22.0 
Circle area is 78.53981633974483</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 6</text>
        </slide>
        <slide>
          <slideno>43</slideno>
          <text>Call to an Overridden Method
U s e super to call a method in the parent class that was 
overridden (redefined) in the derived class 
	Example: Student redefined the method writeOutput
of its parent class, Person 
	Could use super.writeOutput() to invoke the 
overridden (parent) method 
public void writeOutput()
{ 
super.writeOutput(); // prints first and last name
System.out.println("Student Number : " +
studentNumber);
}</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>ageOfPerson() method
public double ageOfPerson() 
{ 
// The GregorianCalendar class default constructor creates 
// a new date and time corres ponding to the date and time The Person class definition 
// the program in which it is called is executed would need to include the
GregorianCalendar today = new GregorianCalendar();
// Calendar is a parent class to GregorianCalendar following line at the top of 
// YEAR is a static named cons tant of the Calendar class the Person.java file:
int thisYear = today.get(Calendar.YEAR);
int birthYear = dateOfBi rth.get(Calendar.YEAR); import java.util.*;
// Java Gregorian Calendar mo nth is zero based -- Jan==0 This import statement tells
int thisMonth = today.get(Calendar.MONTH);
int birthMonth = dateOfBirth.get(Calendar.MONTH); the java compiler where to 
double age = (thisYear - birthYear) + find the GregorianCalendar
((thisMonth - birthMonth)/12.0); and Calendar built-in classesreturn(age);
}</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>An Example of Inheritance:
a Person Class
The base class: 
 Constructors: 
 a default constructor 
 three others that initialize the firstName , 
lastName, and dateOfBirth attributes (instance 
variables) 
 Accessor methods:
setFirstName to change the value of the 
firstName attribute
getFirstName to read the value of the 
firstName attribute 
 same for lastName</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Packages
Unix/Linux
	If: CLASSPATH=/name/lib/examples , and the classes in 
your graphics package are in 
/name/lib/examples/graphics/ , and your test 
program is in package test in 
/name/lib/examples/test/TestGraphics.java 
From the unix/linux command line in 
/name/lib/examples, you can type 
javac test/TestGraphics.java to compile
and java test.TestGraphics to run 
Output:
Rectangle area is 22.0
Circle area is 78.53981633974483</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Inheritance
	OOP is one paradigm that facilitates managing the 
complexity of programs 
	OOP applies principles of abstraction to simplify the 
tasks of writing, testing, maintaining and understanding 
complex programs 
	OOP aims to increase code reuse
 reuse classes developed for one application in other 
applications instead of writing new programs from 
scratch ("Why reinvent the wheel?") 
	Inheritance is a major technique for realizing these 
objectives</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Designing Methods:
Top-Down Design
	In pseudocode, write a list of subtasks that the method must 
perform 
	If you can easily write Java statements for a subtask, you are 
finished with that subtask 
 If you cannot easily write Java statements for a subtask, treat 
it as a new problem and break it up into a list of subtasks
	Eventually, all of the subtasks will be small enough to easily 
design and code 
	Solutions to subtasks might be implemented as private helper 
methods 
	Top-down design is also known as divide-and-conquer or 
stepwise refinement</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Packages
Example -- a group of related classes that 
represent shapes and methods for drawing them: 
package graphics; 
public class Circle extends Graphic { 
. . . 
} // in Circle.java 
package graphics; 
public class Rectangle extends Graphic { 
. . . 
} // in Rectangle.java 
package graphics; 
public class Ellipse extends Graphic { 
. . . 
} // in Ellipse.java</text>
        </slide>
        <slide>
          <slideno>56</slideno>
          <text>Read
 Sections 6.3 - 6.5</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Designing Methods:
Top-Down Design
Some tasks this method should perform:
 find out the current year 
 find out the current month 
 find out the birth year 
 find out the birth month 
 find out the age using these values 
 subtract the birth year and month 
from the current year and month
 return the value obtained as the 
age</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Table as a 2-D 
Column Index 4 
(5th column) Array 
0 1 2 3 4 5 
0 
1 
2 
3 
4 
       In dexe s 
$1050 $1055 $1060 $1065 $1070 $1075 
$1103 $1113 $1124 $1134 $1145 $1156 
$1158 $1174 $1191 $1208 $1225 $1242 
$1216 $1239 $1262 $1286 $1311 $1335 
$1276 $1307 $1338 $1370 $1403 $1436 Row Index 3 
(4th row) 
 Generalizing to two indexes: [row][column] 
 First dimension: row index 
 Second dimension: column index 
 Cell contains balance for the year/row and percentage/column 
 All indexes use zero-numbering 
 Balance [3][4] = cell in 4th row (year = 4) and 5th column (7.00%) 
 Balance[3][4] = $1311 (shown in yellow)</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>More about
Constructors in a Derived Class 
 Constructors can call other constructors 
U s e super to invoke a constructor that is 
defined in the parent class 
 as shown on the previous slide
U s e this to invoke a constructor that is 
defined within the derived class itself
 shown on the next slide</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Multidimensional Arrays
Example of usage:
Store the different possible ending balances 
corresponding to $1000 saved at 6 different 
interest rates over a period of 10 years</text>
        </slide>
        <slide>
          <slideno>44</slideno>
          <text>Overriding Verses Overloading
Overriding 
	Same method name
	Same signature 
	One method in 
ancestor, one in 
descendant Overloading 
	Same method name
	Different signature
	Both methods can be 
in same class</text>
        </slide>
        <slide>
          <slideno>46</slideno>
          <text>private &amp; public
Instance Variables and Methods
private instance variables from the parent 
class are not available by name in derived 
classes 
 "Information Hiding" says they should not be 
 use accessor methods to change them, e.g. can call 
parents setFirstName method for a Student 
object to change the firstName attribute 
private methods are not inherited! 
u s e public to allow methods to be inherited 
 only helper methods should be declared private</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Wrapper classes
There are some important differences in the code to 
use wrapper classes and that for the primitive types
Wrapper Class	 Primitive Type
	variables contain the address  variables contain a value 
of the object 
	variable declaration example: variable declaration example:
Integer n;	int n;
	variable declaration &amp; init: 
Integer n = new  variable declaration &amp; init.: 
Integer(0); int n = 0; 
	assignment:  assignment:
n = new Integer(5); n = 99;</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Ragged Arrays
	Ragged arrays have rows of unequal length
 each row has a different number of columns, or 
entries 
	Ragged arrays are allowed in Java
	Example: create a 2-D int array named b with 
5 elements in the first row, 7 in the second row, 
and 4 in the third row: 
int[][] b;
b = new int[3][];
b[0] = new int[5];
b[1] = new int[7];
b[2] = new int[4];</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Packages
 In directory c:jdk\lib\examples\test have
package test;
import graphics.*; // import graphi cs.Rectangle and graphics.Circle
public class TestGraphics
{
public static void main (String[] args) { 
Rectangle r1 = new Rectangle(); 
System.out.println("Rectangle area is " + r1.getArea()); 
Circle c1 = new Circle(); 
System.out.println("Circle area is " + c1.getArea()); 
} // end of main () 
}</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Designing Methods:
Top-Down Design
	Person class has attributes of type String and 
GregorianCalendar corresponding to a persons first name, 
last name, and date of birth: firstName, lastName, and 
dateOfBirth 
	Create a new method: 
double ageOfPerson()
for the Person class that returns the approximate age (with 
respect to year and month of birt h) of a person.  Approximate 
in this case means that if a p erson was born in September of 
1965 and the current month and year are September 2002, the age returned should be 37.0 (the actual day of the month on which the person was born is ignored). 
What tasks should this method perform?</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Packages
 In directory c:jdk\lib\examples\graphics have
package graphics; 
public class Rectangle { 
private double length=5.5; 
private double width=4.0; 
{ 
return length*width; 
} 
} // Rectangle.java package graphics; 
public class Circle { 
private double radius=5; 
public double getArea() 
{ 
return Math.PI * 
radius * radius; 
} 
} // Circle.java public double getArea()</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Major KR Schemes (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture17/</lecture_pdf_url>
      <lectureno>17</lectureno>
      <slides>
        <slide>
          <slideno>21</slideno>
          <text>ComponentsComponents 
zz RRule baseule base 
zz Inference engineInference engine 
zz Working memoryWorking memory</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Semantic NetworkSemantic Network 
zz An long existing notion: there are different An long existing notion: there are different 
pieces of knowledge of world, and they pieces of knowledge of world, and they 
are all linked together through certain are all linked together through certain 
semantics. semantics.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>FrameFrame --based Networkbased Network 
zz Distinguish instance vs. classDistinguish instance vs. class 
zz Hierarchical structure (Hierarchical structure ( superclass superclass and and 
subclass)subclass) 
zz Multiple hierarchyMultiple hierarchy 
zz SlotsSlots 
zz Member slotMember slot 
zz Own slotOwn slot</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Some Often Used Relations in Some Often Used Relations in 
Biomedical DomainBiomedical Domain 
zz IS AIS A 
zz IS PART OFIS PART OF 
zz CAUSE OFCAUSE OF 
zz MEASURESMEASURES 
zz COCO--OCCURSOCCURS 
zz</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>SlotSlot 
zz Frame identifying informationFrame identifying information 
zz Relationship between framesRelationship between frames 
zz Descriptors of requirements for frame Descriptors of requirements for frame 
matchmatch 
zz Procedural informationProcedural information 
zz Default informationDefault information 
zz Restrictions and constraintsRestrictions and constraints 
zz New instance information New instance information</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>ExciseExcise 
zz Which representation scheme to choose?Which representation scheme to choose?</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>InferenceInference 
zz Modus Modus ponensponens 
zz Forward chainingForward chaining 
zz Modus Modus tollenstollens 
zz Background chainingBackground chaining</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Pro and ConPro and Con 
zz ProPro 
zz ModularModular 
zz NaturalNatural 
zz ConCon 
zz Not efficientNot efficient 
zz Not expressiveNot expressive</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>ReadingReading 
zz Sowa Chap. 4Sowa Chap. 4</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>UMLS Semantic Network UMLS Semantic Network  Concept Concept 
HierarchyHierarchy 
http://w ww.nlm.nih.gov/research/umls/archive/2002AA/META3.HTML Figure 1</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Example: MYCINExample: MYCIN 
IF the identity of the germ is not known IF the identity of the germ is not known 
with certainty with certainty 
AND the germ is gramAND the germ is gram --positive positive 
AND the morphology of the organism is AND the morphology of the organism is 
"rod" "rod" 
AND the germ is aerobicAND the germ is aerobic 
THEN there is a strong probability (0.8) that THEN there is a strong probability (0.8) that 
the germ is of type the germ is of type enterobacteriacae enterobacteriacae</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Example: MEDExample: MED 
http://www.cpmc.columbia.edu/homepages/dab7001/topics/index.html</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>ExerciseExercise 
zz Represent the information in semantic Represent the information in semantic 
networknetwork 
zz Represent the information in frameRepresent the information in frame --based based 
networknetwork</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Today We Will Talk AboutToday We Will Talk About 
zz Major KR schemesMajor KR schemes 
zz Semantic NetworkSemantic Network 
zz FrameFrame --based Representationbased Representation 
zz Production RulesProduction Rules</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Production RulesProduction Rules 
zz Also called IFAlso called IF --THEN rulesTHEN rules 
zz Many forms:Many forms: 
zz IF condition THEN action IF condition THEN action 
zz IF premise THEN conclusionIF premise THEN conclusion 
zz IF proposition p1 and proposition p2 are true IF proposition p1 and proposition p2 are true 
THEN proposition p3 is true THEN proposition p3 is true</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>ExerciseExercise 
zz The thyroid gland is located at th e base of your neck in front o The thyroid gland is located at th e base of your neck in front o f your f your
trachea (or  trachea (or 
butterfly. butterfly. 
zz The thyroid gland makes, stores , and releases two hormones The thyroid gland makes, stores , and releases two hormones --T4 T4 
((thyroxinethyroxine ) and T3 () and T3 ( triiodothyroninetriiodothyronine ). Thyroid hormones con trol the ). Thyroid hormones con trol the 
rate at which every part of your  body works. This is called your rate at which every part of your  body works. This is called your
metabolism. Your metabolism controls whether you feel hot or colmetabolism. Your metabolism controls whether you feel hot or col d d 
or tired or rested. When your th yroid gland is working the way i or tired or rested. When your th yroid gland is working the way i t t 
should, your metabolism stays at a steady pace should, your metabolism stays at a steady pace --not too fast or too not too fast or too 
slow. slow. 
zz If no cancer cells are found, your doctor may prescribe a thyroiIf no cancer cells are found, your doctor may prescribe a thyroi d d 
hormone to decrease the size of your nodule. Or, your doctor mayhormone to decrease the size of your nodule. Or, your doctor may
suggest surgery to remove it. If  cancer cells are found, further suggest surgery to remove it. If  cancer cells are found, further 
treatment will be needed. Thyroi d cancer usually can be treated treatment will be needed. Thyroi d cancer usually can be treated
with success. with success. windpipe). It has two sides and is shaped like a windpipe). It has two sides and is shaped like a</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>ExtensionExtension 
zz Extending expressivity (distinguish Extending expressivity (distinguish 
different types of concepts and relationsdifferent types of concepts and relations 
zz Distinguish between some and allDistinguish between some and all 
zz Distinguish between existence and Distinguish between existence and 
intensionintension 
zz Distinguish between definition and Distinguish between definition and 
assertion assertion 
zz Add semantic rigorAdd semantic rigor 
zz Map to logic (Sowa Map to logic (Sowa  CG)CG)</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>RelationRelation 
zz Directed or nonDirected or non --directeddirected 
zz Multiple relations between two conceptsMultiple relations between two concepts 
zz Can have different propertiesCan have different properties 
zz Reflexive (e.g. concurrence)Reflexive (e.g. concurrence) 
zz Transitive (e.g. causal)Transitive (e.g. causal) 
zz Symmetric (e.g. sibling)Symmetric (e.g. sibling) 
zz ....</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>UMLS Semantic Network UMLS Semantic Network  Relation Relation 
HierarchyHierarchy 
http://w ww.nlm.nih.gov/research/umls/archive/2002AA/META3.HTML Figure 2</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Basic ComponentsBasic Components 
zz NodesNodes 
zz Represent conceptsRepresent concepts 
zz ArcsArcs 
zz Represent relationsRepresent relations 
zz Labels for nodes and arcsLabels for nodes and arcs</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Major LimitationMajor Limitation 
zz Lack of SemanticsLack of Semantics 
zz No formal semantic of the relationsNo formal semantic of the relations 
zz E.g. Does ISA mean subclass, member, etc?E.g. Does ISA mean subclass, member, etc? 
zz Possible multiple interpretationsPossible multiple interpretations 
zz Restricted expressivenessRestricted expressiveness 
zz E.g. can not distinguish between instance and E.g. can not distinguish between instance and 
classclass</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>ExerciseExercise 
Mrs MrsZ.N. : 35 yr old farmer Z.N. : 35 yr old farmerlabourer labourerfrom the from theKwazuluKwazulu--
Natal province. She presented with a one week history Natal province. She presented with a one week history of right sided of right sidedpleuritic pleuriticchest pain. The onset was sudden. chest pain. The onset was sudden. 
This was associated with a warm flushing feeling and This was associated with a warm flushing feeling and dizziness. There was also a pain in the right upper dizziness. There was also a pain in the right upper quadrant of her abdomen. There was no history of quadrant of her abdomen. There was no history of shortness of breath, cough or wheezing. There were no shortness of breath, cough or wheezing. There were no cardiac symptoms, no symptoms of malaise or loss of cardiac symptoms, no symptoms of malaise or loss of weight. No history of fevers. She was not a smoker and weight. No history of fevers. She was not a smoker and drank no alcohol. Of note is that she admitted to eating drank no alcohol. Of note is that she admitted to eating the entrails of the goats that she keepsthe entrails of the goats that she keeps . . -
http://www.wits.ac.http://www.wits.ac. zaza//facfac/med//med/ pulmonologypulmonology /case1./case1. htm htm</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>UMLS Semantic Network UMLS Semantic Network  Relation ConstraintsRelation Constraints 
http://w ww.nlm.nih.gov/research/umls/archive/2002AA/META3.HTML Figure 3</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 6Lecture 6 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Knowledge Representation Knowledge Representation 
ProcessProcess 
zz Identify Needs Identify Needs 
zz ConceptualizationConceptualization 
zz Formalization Formalization 
zz ImplementationImplementation 
zz Evaluation Evaluation</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Little ConstraintLittle Constraint 
DSG Site 
Course Site Instruc tors 
Homepage Link Link 
Link 
WebWeb</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Little ConstraintLittle Constraint 
patient 
physician Nurse Interact Interact 
Interact</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>StrengthStrength 
zz Help organize knowledge hierarchicallyHelp organize knowledge hierarchically 
zz Procedure informationProcedure information 
zz Support multiple inheritanceSupport multiple inheritance</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Last Time We Talked AboutLast Time We Talked About 
zz Medical Coding SystemsMedical Coding Systems 
zz UMLSUMLS</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Weakness Weakness 
zz Expressiveness (e.g. quantifier)Expressiveness (e.g. quantifier) 
zz InheritanceInheritance 
zz Sub classing (override slot value)Sub classing (override slot value) 
zz Multiple inheritanceMultiple inheritance 
zz Large complex knowledge systemLarge complex knowledge system</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Example: ProtgExample: Protg 
http://protege.stanford.edu/</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Information Hiding, Exceptions (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture7/</lecture_pdf_url>
      <lectureno>7</lectureno>
      <slides>
        <slide>
          <slideno>20</slideno>
          <text>When to Define
Your Own Exception Class
 When you use a throw -statement in your code you 
should usually define your own exception class.
	If you use a predefined, more general exception class, 
then your catch -block will have to be general. 
	A general catch -block could also catch exceptions 
that should be handled somewhere else. 
	A specific catch -block for your own exception class 
will catch the exceptions it should and pass others on 
(e.g., DivideByZeroException will only catch 
divisions by zero and will ignore 
NumberFormatException s)</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>throws-Clauses in Derived Classes
	You cannot add exceptions to the throws -clause of a 
redefined method in a derived class 
 only exceptions in the throws -clause of the parent class's 
method can be in the throws -clause of the redefined 
method in the derived class 
	In other words, you cannot throw any exceptions that are not 
either caught in a catch block or already listed in the 
throws -clause of the same method in the base class 
	You can, however, declare fewer exceptions in the throws 
clause of the redefined method</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Documentation for Exception class
Methods inherited from class java.lang.Throwable:
fillInStackTrace, getLocalizedMessa ge, getMessage, printStackTrace, 
printStackTrace, printStackTrace, toString
Methods inherited from class java.lang.Object
clone, equals, finalize, getClass, hashCode, notify, notifyAll, wait, wait, wait
Constructor Detail public Exception() 
Constructs an Exception with no specified detail message. 
public Exception(String s) 
Constructs an Exception with the specified detail message. 
Parameters: 
s - the detail message.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Information Hiding Revisited
	To achieve information hiding goal, need to 
make a classs instance variables private and 
provide public accessor methods for retrieving 
and setting these variables values 
	For instance variables that have a class type, 
this may not be enough! 
	Variables with primitive types in Java are 
passed or returned by value 
 a copy of the variables value is passed/returned, the 
original contents of the va riable cannot be modified 
by changing this copy</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Three Possibilities for a try-catch-
finally Block
T h e try-block runs to the en d and no exception is 
thrown. 
	The finally -block runs after the try-block.
	An exception is thrown in the try-block and caught 
in the matching catch -block. 
	The finally -block runs after the catch -block.
	An exception is thrown in the try-block and there is 
no matching catch -block. 
	The finally -block is executed before the method ends.
 Code that is after the catch -blocks but not in a finally-
block would not be executed in this situation.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>User-Defined Exception Classes
public class DivideByZeroException extends Exception 
{ 
public DivideByZeroException() 
{ 
super("Dividing by Zero!");
}
public DivideByZeroException(String message) 
{ 
super(message);
}
} 
	Must be derived from some already defined exception class 
	Often the only method you need to define is the constructor 
	Include a constructor that takes a String message argument 
	Also include a default cons tructor with a call to super and default 
message string</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Exceptions: Overview
	Exceptions give us a way of organizing a 
program into sections for the normal case and 
the exceptional case 
 exception examples:
division by zero
incorrect type of input
	Simplifies development, testing, debugging 
and maintenance 
 errors are easier to isolate</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>More about the catch-Block
 Although it may look similar to a method definition
The catch -block is not a method definition! 
E v e r y Exception has a getMessage method 
 it retrieves the string given to the exception object when it 
was thrown, e.g. 
throw new Exception("This message is retrieved"); 
Acatch -block applies only to an immediately 
preceding try block 
 if no exception is thrown the catch block is ignored</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>try-throw-catch Threesome
Catch block 
Executes if an exception is thrown 
 may terminate execution with exit statement 
 if it does not exit, execution resumes after the 
catch block 
Statements after the Catch block
Executed if either the exception is not thrown or if it is 
thrown but the catch block does not exit the program</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Information Hiding Revisited
	In general, class variables are passed or 
returned by reference 
 a copy of the memory address the variable refers to 
is passed, the contents of this memory address can 
be altered once this address is known 
(Exceptions to this rule in Java are variables of the String and StringBuffer classes which act like 
variables of primitive types when passed/returned)</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Documentation for Exception class
java.lang 
Class Exception The package which Exception belongs to Taken from http://java.sun.com/j2se/1.3/docs/api/index.html 
java.lang.Object 
| 
+--java.lang.Throwable 
|
+--java.lang.Exception
Ancestor class for all Java classes 
Sub-class of Object 
All Implemented Interfaces: 
Serializable A Java class cannot be a subclass of more than 
To get 
around this, Java allows a class to implement 
more than one interface. An interface is a 
must have. Sub-class of Throwable 
one class, but sometimes we need it to have 
properties of more than one class.  
property of a class that says what methods it</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Exception: Reality Check
	Exception handling can be overdone 
 use it sparingly and only in certain ways 
	If the way an exceptional condition is handled 
depends on how and where the method is invoked, 
then it is better to use exception handling and let 
the programmer handle the exception (by writing 
the catch block and choosing where to put it) 
	Otherwise it is better to avoid throwing exceptions</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Information Hiding Revisited
 Programming example: Person class</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Documentation for Exception class
Direct Known Subclasses: 
AclNotFoundException, ActivationException, AlreadyBoundException, 
ApplicationException, AWTExcepti on,  BadLocationException, 
ClassNotFoundException, CloneNotSupportedException, DataFormatException,  
ExpandVetoException, FontFormatException, GeneralSecurityException, 
IllegalAccessException, InstantiationException, 
InterruptedException, IntrospectionException, InvalidMidiDataException, 
InvocationTargetException, IOException,  LastOwnerException, 
LineUnavailableException, MidiUnavaila bleException, MimeTypeParseException, 
NamingException, NoninvertibleTransformException, NoSuchFieldException, 
NoSuchMethodException, NotBoundException, NotOwnerException, 
ParseException, PrinterException, PrivilegedActionException, 
PropertyVetoException, RemarshalException, RuntimeException,
ServerNotActiveException, SQLException,  TooManyListenersException,
UnsupportedAudioFileException, UnsupportedFlavorException,
UnsupportedLookAndFeelException, UserException</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>Read
 Sections 6.4 - 6.5
 Chapter 7
 Chapter 8</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>try-throw-catch Threesome
Try block 
Statements execute up to the conditional throw 
statement 
If the condition is true the exception is thrown
 control passes immediately to the catch 
block(s) after the try block 
Else the condition is false 
 the exception is not thrown
 the remaining statements in the try block (those 
following the conditional throw) are executed</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Example: throws-Clause
divide method
	May throw a DivideByZeroException in another 
method normal that calls it 
	But the catch block is in main
S o normal must include a throws -clause in the first line of 
the method definition: 
public void normal() throws
DivideByZeroException 
{ 
&lt;statements to define the normal method&gt; 
}</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Programming examples
 Exceptions (divide by zero) 
 Inheritance (Student &amp; Person classes)</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Exceptions: Some Terminology
	The normal case is handled in a try block 
	The exceptional case is handled in a catch 
block 
	The catch block takes a parameter of type 
Exception 
 it is called the catch -block parameter 
	Exception is a built-in Java class 
	If an exception is thrown execution in the try
block ends and control passes to the catch 
block(s) after the try block</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Predefined Exception Classes
Exception is the root class of all exceptions 
 Many predefined classes throw exceptions 
 the documentation or interface will tell you
 the exceptions thrown ar e often also predefined 
 Some common predefined exceptions: 
IOException 
ClassNotFoundException , and
FileNotFoundException</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Summary
	An exception is caught in a catch block
	When a method might throw an exception but does not have a 
catch block to catch it, usually the exception class must be 
listed in the throws -clause for the method 
	A try block may be followed by more than one catch block
 more than one catch block may be capable of handling the 
exception 
 the first catch block that can handle the exception is the 
only one that executes 
 so put the most specific catch blocks first and the most 
general last 
	Every exception class has a getMessage method to retrieve 
a text message description of the exception caught</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>The finally Block
At this stage of your programming you may not have much use for
the finally block, but it is included for completeness - you may 
find it useful in the future 
 You can add a finally block after the try/catch blocks
 finally blocks execute whether or not catch block(s) 
execute 
	Code organization using finally block: 
try block 
catch block 
finally
{ 
&lt;Code to be executed whether or  not an exception is thrown&gt; 
}</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Information Hiding Revisited
 cloning a variable is one solution to this problem
 a clone has the same contents as the original 
variable but a different address in memory
 altering the clone does not affect the original
 classes that allow cloning implement the cloneable 
interface (e.g. GregorianCalendar) 
 some classes do not allow cloning (do not 
implement the cloneable interface) e.g. String, 
StringBuffer</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Catching an Exception in a Method 
other than the One that Throws It
When defining a method you must include a throws -clause to declare any 
exception that might be thrown but is not caught in the method. 
U s e  a throws -clause to "pass the buck" to whatever method calls it (pass 
the responsibility for the catch block to the method that calls it) 
	that method can also pass the buck,
but eventually some method must catch it
	This tells other methods 
"If you call me, you must handle an y exceptions that I throw."</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Summary
	An exception is an object descended from the Exception
class 
	Exception handling allows you to design code for the normal 
case separately from that for the exceptional case 
	You can use predefined exception classes or define your own
	Exceptions can be thrown by: 
	certain Java statements 
	methods from class libraries 
	explicit use of the throw statement 
	An exception can be thrown in either 
a try block, or 
 a method definition without a try block, but in this case the 
call to the method must be placed inside a try block</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Multiple Exceptions an d
catch Blocks in a Method
	Methods can throw more than one exception
	The catch blocks immediately following the try block are 
searched in sequence for one that catches the exception type 
 the first catch block that handl es the exception type is the 
only one that executes 
	Specific exceptions are derived from more general types
 both the specific and general types from which they are 
derived will handle exceptions of the more specific type 
	So put the catch blocks for the more specific, derived, 
exceptions early and the more general ones later</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Exceptions: Some Terminology
	Throwing an exception: either Java itself or 
your code signals that something unusual has 
happened 
	Handling an exception: responding to an 
exception by executing a part of the program 
specifically written for the exception 
 also called catching an exception</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>More about Passing the Buck
Good programming practice:
Every exception thrown should eventually be caught in some 
method
	Normally exceptions are either caught in a catch block or 
deferred to the calling method in a throws -clause 
 If a method throws an exception, it expects the catch block to 
be in that method unless it is deferred by a throws-clause
 if the calling method also defers with a throws -clause, its 
calling program is expected to have the catch block, etc., 
up the line all the way to main , until a catch block is 
found</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>p ()
{ 
); 
} MethodA throws 
MyException
but defers 
catching it (by 
using a throws -
clause: 
p ) 
{ 
{
()
 }
)
 {
 } 
} Typical Program 
Organization for 
Exception Handling in 
Real Programs 
MethodB , which 
calls MethodA, 
catches 
MyException
exceptions: ublic void MethodA  throws MyException 
   throw new MyException("Bla Bla Bla"
ublic void MethodB(
   try
       MethodA ;//May throw MyException exception 
    catch(MyException e
        &lt;statements to handle MyException exceptions&gt;</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>try-throw-catch Threesome
Basic code organization :
try
{ 
&lt;code to try&gt; 
if(test condition)
throw new Exception("Message to display");
&lt;more code&gt; 
}
catch(Exception e)
{
}&lt;exception handling code&gt;
Programming example: restricting the length of an input string</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Questionnaire</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Outline
 Information hiding revisited
 Intro to exceptions in java 
 Programming examples 
 Questionnaire</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Using an Object that May Throw 
an Exception
Sample object = new SampleClass();
try
{
&lt;Possibly some code&gt;
object.doStuff();//may throw IOException
&lt;Possibly some more code&gt;
}
catch(IOException e)
{
&lt;Code to handle the IOException, probably
including this line:&gt;
System.out.println(e.getMessage());
} 
	Predefined exceptions usually include a meaningful message that is retrieved 
with getMessage</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Uncaught Exceptions
	In any one method you can catch some 
exceptions and defer others 
	If an exception condition occurs but the 
exception is not caught in the method that 
throws it or any of its calling methods, either: 
 the program ends abnormally, or,
 in the case of a GUI using Swing, the 
program may become unstable</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Example: 
public double divide(int numerator, int denominator)Using the { 
double quotient = SENTINEL;Divide-
ByZero-try
{
if (denominator == 0)
throw new DivideByZeroException();
Class Exception quotient = numerator/(double)denominator; System.out.println(numerator + "/" 
+ denominator 
+ " = " + quotient);
}
catch(DivideByZeroException e)
{
System.out.println (e.getMessage()); 
} return(quotient); 
}</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 7</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Documentation for Exception class
public class Exception 
extends Throwable 
The class Exception and its subclasses are a form of Throwable that indicates 
conditions that a reasonable appl ication might want to catch. 
Constructor Summary: 
Exception() 
Constructs an Exception with no specified detail message. 
Exception(String s) 
Constructs an Exception with the specified detail message.</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Vectors, Streams, Input and Output (PDF)
Lecture 8 Code (ZIP) (zip file includes: TestRotation2.java, TestVector2.java, RotateText.java, KeyboardInput.java, TestSimpleParser.java, TestRotation.java, TestVector.java, and Medinfo.txt)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture8/</lecture_pdf_url>
      <lectureno>8</lectureno>
      <slides>
        <slide>
          <slideno>16</slideno>
          <text>Input/Output (I/O) Overview
	In this context it is input to and output from 
programs 
	Input can be from keyboard or a file 
	Output can be to display (screen) or a file
	Advantages of file I/O 
 permanent copy 
 output from one program can be input to another 
 input can be automated (rather than entered  
manually)</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Closing a file
If a program automatically closes files when it 
ends normally, why close them with explicit calls 
to close ? 
Two reasons:
1. 	To make sure it is closed if a program ends 
abnormally (the file could get damaged if it is left 
open). 
2. 	A file that has been opened for writing must be 
closed before it can be opened for reading.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Increasing Storage Efficiency of 
Vectors
	A vector automatically increases its size if elements 
beyond its current capacity are added 
	But a vector does not automa tically decrease its size if 
elements are deleted 
	The method trimToSize() shrinks the capacity of 
a vector to its current size so there is no extra, wasted 
space 
 the allocated space is reduced to whatever is 
currently being used
 To use storage more efficiently, use trimToSize()
when a vector will not need its extra capacity later</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Binary Versus Text Files
	All data and programs are ultimately just zeros and ones
	each digit can have one of two values, hence binary 
	bit is one binary digit, byte is a group of eight bits
I n text files: the bits represent printable characters 
 one byte per character for ASCII, the most common code 
	for example, Java source files are text files
	so is any file created with a "text editor" 
	In binary files : the bits represent other types of encoded 
information, such as executable  instructions or numeric data 
	these files are easily read by the computer but not humans
	they are not intelligible to a human when printed</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Text File Output
	Binary files are more efficient for Java to 
process, but text files are readable by humans 
	Java allows both binary and text file I/O
	To open a text file for output: connect a text file 
to a stream for writing 
 e.g., create a stream of the class PrintWriter 
and connect it to a text file</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Input File Exceptions
AFileNotFoundException is 
thrown if the file is not found when an 
attempt is made to open a file 
 Most read methods throw IOException
 we have to write a catch block for it 
 If a read goes beyond the end of the file an 
EOFException is thrown</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Programming example</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>Read
 Chapter 9
 Chapter 10</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>The File Class
	Acts like a wrapper class for file names
	A file name like " out.txt" has only String
properties 
	But a file name of type File has some very 
useful methods 
	exists:  tests to see if a file already exists
canRead : tests to see if the operating system will 
let you read a file 
FileInputStream and 
FileOutputStream have constructors that 
take a File argument as well as constructors 
that take a String argument</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Vectors
 We can think of a vector as an array that can get 
larger or smaller when a program is running
	Data structure - a construct that allows us to 
organize/aggregate data 
	An array is a static data structure 
	A vector is a dynamic data structure</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Summary
 Text files contain strings of printable 
characters; they look intelligible to humans 
when opened in a text editor. 
 Binary files contain numbers or data in 
non-printable codes; they look unintelligible to humans when opened in a 
text editor . 
 Java can process both binary and text files 
for I/O</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>Programming example
Want to create a simple parser that can read a boolean 
expression typed from the keyboard of the form: 
true and true
true and false
true or true
true or false
not true
not false, etc.
and print out the truth value of the expression</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>More Details About Vectors
 The method clone is used to make a copy of a 
vector but its return type is Object , not Vector 
 of course you want it to be Vector, not Object 
 So, what do you do?
This just makes otherV 
another name for the vector 
v (there is only one copy of 
the vector object and it now 
has two names referring to 
the same location/address in 
memory)  Cast it to Vector
Vector v = new Vector(10);
Vector otherV;
otherV = v;
Vector otherV2 = (Vector)v.clone();
This creates a copy of v 
with a different name, otherV2 
and a different address in memory second</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Outline
 Vectors 
 Streams, Input, and Output in Java
 Programming examples</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Reading Parts of a String
T h e r e  a r e BufferedReader methods to read a line 
and a character, but not just a single word 
StringTokenizer can be used to parse a line into 
words 
 it is in the util library so you need to import 
java.util.* 
 some of its useful methods are shown in the text
 e.g. test if there are more tokens 
 you can specify delimiters (the character or 
characters that separate words)
 the default delimiters are "white space" (space, tab, and 
newline)</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>More Details About Vectors
	Vectors put values in successive indexes
addElement is used to put initial values in a 
vector 
 new values can be added only at the next higher 
index 
	You can use setElementAt to change the 
value stored at a particular index 
setElementAt can be used to assign the value 
of an indexed variable only if it has been
previously assigned a value with addElement</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Protecting Private Variables
	Be careful not to return addresses of private vector 
variables, otherwise calling methods can access them 
directly 
	"Information Hiding" is compromised
	To protect against it, return a copy of the vector 
u s e clone as described in the previous slide 
	But that's not all:
 if the elements of the vector are class (and not primitive) 
types, they may not have been written to pass a copy
	they may pass their address
 so additional work may be required to fix the accessor 
methods (have accessor methods return clones)</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 8</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Every File Has Two Names
 The code to open the file creates two 
names for an output file 
 the name used by the operating system 
e . g . , out.txt 
 the stream name 
e . g . , outputStream 
 Java programs use the stream name</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Vector Syntax
	The idea is the same as for a rrays, but the syntax is different
	As with arrays, the index must be in the range 0 to size-of-the-
vector 
Array: a is a String array 
a[i] = "Hi, Mom!"); 
String temp = a[i]; Vector: v is a vector 
v.setElementAt("Hi,
Mom!", i); 
String temp =
(String)v.elementAt(i); 
Instead of the index in 
brackets and = for assignment, use vector 
method setElementAt 
with two arguments, the 
value and the index elementAt(int index) to 
retrieve the value of an element 
Note: the cast to String is 
required because the base type of 
vector elements is Object Use vector method</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>More Details About Vectors
	The following code looks very reasonable but will produce an 
error saying that the class Object does not have a method 
named length : 
Vector v = new Vector()
String greeting = "Hi, Mom!";
v.addElement(greeting);
System.out.println("Length is " +
(v.elementAt(0)).length());
 String , of course, does have a length method, but Java sees 
the type of v.elementAt(0) as Object , not String 
	Solution?  Cast v.elementAt(0) to String :
System.out.println("Length is " +
(String)(v.elementAt(0)).length();</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Binary Versus Text Files
 Text files are more readable by humans 
 Binary files are more efficient 
 computers read and write binary  files more easily than text 
 Java binary files are portable 
 they can be used by Java on different machines 
 Reading and writing binary files is normally done by a 
program 
 text files are used only to communicate with humans 
Java Text Files Java Binary Files 
 Source files  Executable files (created by 
 Occasionally input files compiling source files) 
 Occasionally output files  Usually input files 
 Usually output files</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Vector Size Versus Vector Capacity
	Be sure to understand the difference between 
capacity and size of a vector: 
	capacity is the declared size of the vector 
 the current maximum number of elements 
 size is the actual number of elements being used
 the number of elements that contain valid values, not 
garbage 
 remember that vectors add values only in successive 
indexes 
	Loops that read vector elements should be limited by 
the value of size, not capacity , to avoid reading 
garbage values</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Programming example
Reading input from one file and writing 
output to another</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Closing a File
 An output file should be closed when 
you are done writing to it (and an input 
file should be closed when you are 
done reading from it) 
U s e  t h e close method of the class
 If a program ends normally it will 
close any files that are open</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Vector Initial Capacity vs. 
Efficiency
	Choosing the initial size of a vector is an 
example of a tradeoff 
 making it too large wastes allocated memory space
 making it too small slows execution 
 it takes time to resize vectors dynamically 
	Solution? 
 optimize one at the expense of the other 
 or make good compromises 
 choose a size that is not too big and not too small</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Text File I/O
	Important classes for text file output (to the file) 
	PrintWriter, FileWriter, BufferedWriter 
	FileOutputStream 
	Important classes for text file input (from the file): 
	BufferedReader 
	FileReader 
	Note that FileOutputStream and FileReader are used 
only for their constructors, wh ich can take file names as 
arguments. 
 PrintWriter and BufferedReader cannot take file 
names as arguments for their constructors. 
	To use these classes your pr ogram needs a line like the 
following: 
import java.io.*;</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Text File Output
	For example:
PrintWriter outputStrea m = new PrintWriter(new 
FileOutputStream("out.txt")); 
	Then you can use print and println to 
write to the file (convenient) 
 The text lists some other useful PrintWriter 
methods</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>Summary
 Always check for the end of the file when 
reading from a file. The way you check for 
end-of-file depends on the method you use 
to read from the file. 
 A file name can be read from the keyboard 
into a String variable and the variable 
used in place of a file name.</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Testing for the End of an Input File
	A common programming situati on is to read data from 
an input file but not know how much data the file 
contains 
	In these situations you need to check for the end of the 
file 
	There are three common ways  to test for the end of a 
file: 
1. 	Put a sentinel value at the end of the file and test for it.
2. 	Throw and catch an end-of-file exception. 
3. 	Test for a special character that signals the end of the file 
(text files often have such a character).</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Example: StringTokenizer 
 Display the words separated by any of the following 
characters: space, new line (\n), period (.) or comma (,). 
String inputLine = KeyboardInput.readLine();
StringTokenizer wordFinder = 
new StringTokenizer(inputLine, " \n.,");
//the second argument is a string of the 4 delimiters
while(wordFinder.hasMoreTokens())
{ 
System.out.println(wordFinder.nextToken()); 
} 
Question
2b or 
!tooBee Entering "Question,2b.or !tooBee. " 
gives this output:</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>Warning: Overwriting a File
	Opening a file creates an empty file
	Opening a file creates a new file if one does 
not already exist 
 Opening a file that already exists eliminates 
the old file and creates a new, empty one
 data in the original file is lost
	How to test for the existence of a file and 
avoid overwriting it is covered in section 9.3 
of the text, which discusses the File class</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Handling IOException
IOException cannot be ignored
 either handle it with a catch block
 or defer it with a throws -clause
Put code to open a file and read/write to it in 
a try-block and write a catch -block for this 
exception :
catch(IOException e) 
{ 
System.out.println(Problem); 
}</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Text File Input
	To open a text file for input: connect a text file to a stream for 
reading 
	use a stream of the class BufferedReader and connect it to a text file 
u s e  t h e FileReader class to connect the BufferedReader object to 
the text file 
	For example:
BufferedReader inputStream = 
new BufferedReader(new FileReader("data.txt")); 
T h e n : 
	read lines (Strings) with BufferedReader s readLine method 
 BufferedReader has no methods to read numbers directly, so read 
numbers as String s and then convert them 
	read a single char with BufferedReader s read method</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Vector Methods
 The vector class includes many useful methods:
 constructors 
 array-like methods, e.g. setElementAt &amp; 
elementAt
 methods to add elements 
 methods to remove elements 
 search methods 
 methods to work with the vector's size and capacity, 
e.g. to find its size and check if it is empty
a clone method to copy a vector
 see section 10.1 of Savitch text for more details</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Base Type of Vectors
	The base type of an array is specified when the 
array is declared 
 all elements of arrays must be of the same type 
	The base type of a vector is Object 
 elements of a vector can be of any class type
 in fact, elements of a vector can be of different class 
types 
 it is usually best to have all elements in a vector be 
the same class type 
 to store primitive types in a vector they must be 
converted to a corresponding wrapper class</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Testing for End of File in a Text File
 There are several ways to test for end of file. For 
reading text files in Java you can use this one:
 Test for a special character that signals the end of the file
W h e n readLine tries to read beyond the end of a text 
file it returns the special value null 
 so you can test for null to stop processing a text file
r e a d returns -1 when it tries to read beyond the end of 
a text file 
 the int value of all ordinary characters is nonnegative</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Streams
	Stream : an object that either delivers data to its 
destination (screen, file, etc. ) or that takes data from a 
source (keyboard, file, etc.) 
 it acts as a buffer between the data source and destination
	Input stream : a stream that provides input to a program
	Output stream : a stream that accepts output from a 
program 
	System.out is an output stream 
	System.in is an input stream 
	A stream connects a program to an I/O object
	System.out connects a program to the screen 
	System.in connects a program to the keyboard</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Using Vectors
	Vectors are not automatically part of Java
 they are in the util library 
 you must import java.util.* 
	Create a vector with an initial size of 20 
elements: 
Vector v = new Vector(20);</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Arrays versus Vectors
Arrays	 Vectors 
Bad:	 Good : 
	Size is fixed when declared  Size is not fixed
	Inefficient storage: can use a  Better storage efficiency: a 
partially full array, but space partially full vector may be 
has been allocated for the allocated just the space it needs 
full size	  If one more value needs to be 
	If one more value needs to added past the maximum size 
be added past the maximum the vector size increases 
size the array needs to be automatically 
redeclared 
Good:	 Bad:
 More efficient (faster)  Less efficient (slower) execution
execution  Elements must be class types 
	Elements can be of any type (primitive types not allowed)</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Medical Vocabulary Representation and Survey of Medical Coding Systems (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture15/</lecture_pdf_url>
      <lectureno>15</lectureno>
      <slides>
        <slide>
          <slideno>1</slideno>
          <text>Last Time We Talked AboutLast Time We Talked About 
zz OntologyOntology 
zz Data ModelData Model</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>SNOMED RTSNOMED RT 
Fully Specified Name: Fully Specified Name: Needle biopsy Needle biopsy
(procedure)(procedure) 
Concept ID: Concept ID: 129249002129249002 
Definition: Definition: 
Is a (attribute) Is a (attribute) Biopsy (procedure)Biopsy (procedure) 
Method (attribute) Method (attribute) Biopsy Biopsy --action (qualifier action (qualifier
value)value) 
Using (attribute) Using (attribute) Biopsy needle, device (physical Biopsy needle, device (physical
object)object) 
Qualifiers:Qualifiers: 
Priority (attribute) Priority (attribute) Priorities (qualifier value)Priorities (qualifier value)</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>First Formal Health Data ModelFirst Formal Health Data Model 
London Bills of Mortality London Bills of Mortality 
zz Commissioned 1542 (1598)Commissioned 1542 (1598) 
zz Intended to Track Plague (Black Death)Intended to Track Plague (Black Death) 
zz ~60 disease categories~60 disease categories 
zz Variously DefinedVariously Defined 
zz Collected by Parish Clerks (Chanters) Collected by Parish Clerks (Chanters) 
zz Irregularly Printed in Folio Irregularly Printed in Folio 
zz Data Table LayoutData Table Layout 
zz 1616thth Century SpreadsheetCentury Spreadsheet Slides borrowed from Dr. Christopher G. Chute of Mayo Clinic</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>ICDICD 
zz International Classification of Diseases and International Classification of Diseases and 
its Clinical Modificationits Clinical Modification 
zz First published in 1893 by Statistical First published in 1893 by Statistical 
International InstituteInternational Institute 
zz Revised every 10+Revised every 10+ --yearsyears 
zz ICD8 ICD8  1967 (World Health Organization)1967 (World Health Organization) 
zz ICD9ICD9  1977 (World Health Organization)1977 (World Health Organization) 
zz ICD10 ICD10  1982 (World Health Organization)1982 (World Health Organization)</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Vocabulary Representation ApproachesVocabulary Representation Approaches 
zz List, Tree/Hierarchy, Multiple TreeList, Tree/Hierarchy, Multiple Tree 
zz Embed hierarchy information in identifier Embed hierarchy information in identifier 
or notor not 
zz PrePre--coordination,  coordination, --coordinationcoordination 
zz Description logicDescription logic PostPost</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>DRGDRG 
zz DiagnosisDiagnosis --Related GroupRelated Group 
zz Initially developed for billing purpose at Initially developed for billing purpose at 
Yale (1960s)Yale (1960s) 
zz Used for Medicare payment since 1980sUsed for Medicare payment since 1980s 
zz Depend on ICDDepend on ICD --99--CMCM 
zz DRG codes need to be derived from ICD DRG codes need to be derived from ICD 
codescodes</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>GabrieliGabrieli Medical NomenclatureMedical Nomenclature 
zz Single large hierarchySingle large hierarchy 
zz More complex terms as you move downMore complex terms as you move down 
zz Being adopted by ASTM as a standardBeing adopted by ASTM as a standard</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Nursing terminologiesNursing terminologies 
zz Many initiatives worldwideMany initiatives worldwide 
zz North American Nursing Diagnosis North American Nursing Diagnosis 
Association (NANDA) codesAssociation (NANDA) codes 
zz Nursing Outcomes Classification (NOC)Nursing Outcomes Classification (NOC) 
zz Georgetown Home Health Care Georgetown Home Health Care 
Classification (HHCC)Classification (HHCC) 
zz Omaha SystemOmaha System 
zz Problems, interventions, outcomesProblems, interventions, outcomes</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>GALENGALEN 
zz European initiativeEuropean initiative 
zz Reference model for medical conceptsReference model for medical concepts 
zz Formalism called Structured Meta Formalism called Structured Meta 
KnowledgeKnowledge 
zz Similar to description logicSimilar to description logic</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>National Drug CodesNational Drug Codes 
zz Developed by FDADeveloped by FDA 
zz Widely used in USWidely used in US 
zz Codes based on drug manufacturerCodes based on drug manufacturer 
zz Codes have no class hierarchyCodes have no class hierarchy 
zz Codes are reused at manufacturers Codes are reused at manufacturers 
discretiondiscretion 
zz Not useful for decision supportNot useful for decision support</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>CPTCPT 
zz Current Procedure TerminologyCurrent Procedure Terminology 
zz Developed by American Medical Developed by American Medical 
AssociationAssociation</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Combination Platter CodingCombination Platter Coding 
in Diabetes Mellitusin Diabetes Mellitus 
250.0 250.0 DM DM without mention complicationswithout mention complications 
250.1 250.1 Diabetes with Diabetes with ketoacidosisketoacidosis 
250.2250.2 Diabetes with Diabetes with hyperosmilarityhyperosmilarity 
250.3250.3 Diabetes with Diabetes with other comaother coma 
250.4250.4 Diabetes with Diabetes with renal manifestationsrenal manifestations 
250.5250.5 Diabetes with Diabetes with ophthalmic manifestationsophthalmic manifestations 
250.5250.5 Diabetes with Diabetes with neurological manifestationsneurological manifestations 
250.7250.7 Diabetes with Diabetes with peripheral circulatory disordersperipheral circulatory disorders 
250.8250.8 Diabetes with Diabetes with other specified manifestationother specified manifestation 
250.9250.9 Diabetes with Diabetes with unspecified complicationsunspecified complications Slides adapted from Dr. Christopher G. Chut e of Mayo Clin ic 
Missing Severi ty 
Not flexible</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>SNOMED III SNOMED III --Coding ExamplesCoding Examples 
"D3"D3--15000"      rdial infarction, NOS"  15000" rdial infarction, NOS" --32020) (M32020) (M --
54700)"54700)" 
TT--32020  32020 
MM--54700 = Infarction, NOS54700 = Infarction, NOS 
"D3"D3--15010"      15010" MicroinfarctMicroinfarct of heart              of heart --32000) (M32000) (M --
54701)54701) 
TT--32000 = Heart, NOS 32000 = Heart, NOS 
MM--54701 = Focal Infarct 54701 = Focal Infarct 
Mother died of myocardial  infarct Mother died of myocardial  infarct 
SS--10120, S10120, S --13030, D313030, D3 --1500015000 
SS--10120, F10120, F --A7860, TA7860, T --32020, M32020, M --5470054700 Slides borrowed from Dr. Cimino J 
"Myoca "01"    "(T "Myoca "01" "(T
Myocardium, NOS=  Myocardium, NOS = 
" "01"    " "01" "(T"(Tof Columbia Univ.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>CMCM 
zz ICDICD--9 adopted by US National Center for 9 adopted by US National Center for 
Health Statistics (NCHC)Health Statistics (NCHC) 
zz Clinical Modification (CM) was madeClinical Modification (CM) was made 
zz ICDICD--99--CM CM vsvs IC9IC9 
zz CompatibleCompatible 
zz Additional digits (4Additional digits (4thth and 5and 5thth) to provide extra ) to provide extra 
levels of detaillevels of detail 
zz Most Diagnoses in US are coded in ICDMost Diagnoses in US are coded in ICD --99--
CMCM</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Diagn ostic C riteria Diagn ostic C riteria 
zz The person has been exposed to a traumatic event in whic h both o The person has been exposed to a traumatic event in whic h both o f the f the 
followin g were present: followin g were present: 
zz the person expe rienced, witnessed,  or was confronted with an eve the person expe rienced, witnessed,  or was confronted with an eve nt or events nt or events 
that involved actual or threatened  death or serious injury, or a that involved actual or threatened  death or serious injury, or a threat to the threat to the 
physical integrity of self or others physical integrity of self or others 
zz the person's response involved intense  fear, help lessness, or ho the person's response involved intense  fear, help lessness, or ho rrorrror 
zz Either while experiencing or after experiencing the distressing Either while experiencing or after experiencing the distressing event, the event, the 
individual has three (or more) of the following individual has three (or more) of the following dissociativedissociative symptoms:symptoms: 
zz a subj ective sense of numbing, de tachment, or absence of emotion a subj ective sense of numbing, de tachment, or absence of emotion al al 
responsiveness responsiveness 
zz a reduction in awareness of his or her surroundings (e.g., "bein a reduction in awareness of his or her surroundings (e.g., "bein g in a daze") g in a daze") 
zz derealizationderealization 
zz depersonalization depersonalization 
zz dissociativedissociative amnesia (i.e., inability to recall an important aspect of the amnesia (i.e., inability to recall an important aspect of the
trauma) trauma) Anxiety DisorderAnxiety Disorder</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>SNOMED RTSNOMED RT 
Fully Specified Fully SpecifiedName:Name: MyocardialMyocardial infarction infarction 
(disorder)(disorder) 
Concept ID:Concept ID: 2229800622298006 
Definition: Definition: 
Is a (attribute) Is a (attribute) Myocardial disease (disorder)Myocardial disease (disorder) 
Is a (attribute) Is a (attribute) Structural disorder of heart Structural disorder of heart 
(disorder)(disorder) 
Associated morphology (attribute) Associated morphology (attribute) Infarct Infarct 
(morphologic abnormality)(morphologic abnormality) 
Finding site (attribute) Finding site (attribute) Myocardium structure Myocardium structure
(body structure)(body structure)</text>
        </slide>
        <slide>
          <slideno>41</slideno>
          <text>ReadingReading 
zz CiminosCiminos paper on coding systempaper on coding system 
zz http://www.cdc.gov/nchs/icd9.htmhttp://www.cdc.gov/nchs/icd9.htm 
zz http://http:// www.psychologynet.org/dsm.htmlwww.psychologynet.org/dsm.html 
zz http://http:// www.loinc.orgwww.loinc.org // 
zz http://www.fda.gov/cder/ndc/http://www.fda.gov/cder/ndc/ 
zz http://www.nlm.nih.gov/mesh/features2002.htmhttp://www.nlm.nih.gov/mesh/features2002.htm 
ll 
zz http://www.nlm.nih.gov/mesh/2K/MeSHtree.M.hhttp://www.nlm.nih.gov/mesh/2K/MeSHtree.M.h 
tmltml</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Anxiety DisorderAnxiety Disorder 
zz The traumatic event is persistently The traumatic event is persistently reexperiencedreexperienced in at least one of the following in at least one of the following
ways: recurrent images, thoughts, dreams, illusions, flashback e ways: recurrent images, thoughts , dreams, illusions, flashback e pisodes, or a sense pisodes, or a sense
of relivi ng the ex perience; or di stress on exposure to reminders of relivi ng the ex perience; or di stress on exposure to reminders of the traumatic of the traumatic 
event. event. 
zz Marked avoidance of stimuli that arouse recollections of the traMarked avoidance of stimuli that arouse recollections of the tra uma (e.g., thoughts, uma (e.g., thoughts,
feelings, conversations, activities, places, people).feelings, conversations, activities, places, people). 
zz Marked symp toms of anxiety or increased arousal (e.g., difficult Marked symp toms of anxiety or increased arousal (e.g., difficult y sleeping, irritability, y sleeping, irritability,
poor concentration, poor concentration, hypervigilan ce hypervigilan ce, exaggerated startle response , motor , exaggerated startle response , motor 
restlessness).restlessness). 
zz The disturbance causes clinically  significant distress or impair The disturbance causes clinically  significant distress or impair ment i n socia l, ment i n socia l, 
occupational, or other important areas of functioning or impairs occupational, or other important areas of functioning or impairs the individual's a bility the individual's a bility
to pursue some necessary task, such as obtaining necessary assis to pursue some necessary task, such as obtaining necessary assis tance or mobilizingtance or mobilizi ng
personal resources by telling fa mily memb ers about the traumatic personal resources by telling fa mily memb ers about the traumatic experience. experience. 
zz The disturbance lasts for a minimu m of 2 days and a maximum of 4 The disturbance lasts for a minimu m of 2 days and a maximum of 4 weeks and weeks and 
occurs within 4 weeks of the traumatic event.occurs within 4 weeks of the traumatic event. 
zz The disturba nce is not due to the dir ect phys iologica l effects o The disturba nce is not due to the dir ect phys iologica l effects o f a substance (e.g., a f a substance (e.g., a
drug of abuse, a medication) or a general medical condition, is drug of abuse, a medication) or a general medical condition, is not better accounted not better accounted 
for byfor by Brief Psychotic DisorderBrief Psychotic Disorder , and is not merely an exac erbation o f a preexisting , and is not merely an exac erbation o f a preexisting
Axis I or Axis II disorder . Axis I or Axis II disorder .</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>ICDICD 
zz International Classification of Diseases and International Classification of Diseases and 
its Clinical Modificationits Clinical Modification 
zz First published in 1893 by Statistical First published in 1893 by Statistical 
International InstituteInternational Institute 
zz Revised every 10+Revised every 10+ --yearsyears 
zz ICD8 ICD8  1967 (World Health Organization)1967 (World Health Organization) 
zz ICD9ICD9  1977 (World Health Organization)1977 (World Health Organization) 
zz ICD10 ICD10  1982 (World Health Organization)1982 (World Health Organization)</text>
        </slide>
        <slide>
          <slideno>40</slideno>
          <text>MeSHMeSH 
D011014: PneumoniaD011014: Pneumonia 
D018410: Pneumonia, BacterialD018410: Pneumonia, Bacterial 
D007877: Legionnaires' DiseaseD007877: Legionnaires' Disease 
D011018: Pneumonia, D011018: Pneumonia, PneumococcalPneumococcal 
D011019: Pneumonia, D011019: Pneumonia, MycoplasmaMycoplasma 
D009175: D009175: MycoplasmaMycoplasma InfectionsInfections 
D011002: D011002: PleuropneumoniaPleuropneumonia , , 
ContagiousContagious 
D011022: Pneumonia, D011022: Pneumonia, RickettsialRickettsial 
D011023: Pneumonia, StaphylococcalD011023: Pneumonia, Staphylococcal</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>DSMDSM 
zz Diagnostic and statistical Manual of Mental Diagnostic and statistical Manual of Mental 
DisordersDisorders 
zz Developed by American Psychiatric Developed by American Psychiatric 
AssociationAssociation 
zz Includes definition and diagnostic criteriaIncludes definition and diagnostic criteria 
zz Limited number of conceptsLimited number of concepts 
zz Current Version: DSMCurrent Version: DSM --IVIV--R (1996)R (1996) 
zz Correspond to ICD10Correspond to ICD10</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Description LogicDescription Logic 
zz Describe the world in terms of "properties" Describe the world in terms of "properties" 
or "constraints" that specific "individuals" or "constraints" that specific "individuals" 
have to satisfyhave to satisfy 
zz ObjectsObjects 
zz ConceptsConcepts 
zz RolesRoles</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>ICDICD--1010--CMCM 
zz PrePre--release draft release draft 
zz ICDICD--1010--CM far exceeds its predecessors in CM far exceeds its predecessors in 
the number of codes provided.the number of codes provided. 
zz The disease classification has been The disease classification has been 
expanded to include healthexpanded to include health --related related 
conditionsconditions 
zz Provide greater specificity at the sixth digit Provide greater specificity at the sixth digit 
level and with a seventh digit extension.level and with a seventh digit extension.</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Read Clinical CodesRead Clinical Codes 
zz Developed by James Read in  Developed by James Read in 
zz Adopted by UK NHS in 1990Adopted by UK NHS in 1990 
zz Allows postAllows post --coordinationcoordination 
zz Merged with SNOMEDMerged with SNOMED the 80sthe 80s</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>READREAD 
182..A 
Xa0wWK rodynia 
182Z.A 
Xa0wWK Painful breathing -pleurodynia 
1826.A  Parasternal pain 
1823.A ordial pain 
1821.A present 
X75rWC 
1829.A pain Chest pain P Y7CmDC 
PleuP Y7CmFC 
Chest pain NOS P Y7CmGC 
S Y7CmIC 
P Y7CmJC 
PrecP Y7CmLC 
Chest pain not P Y7CmNC 
Pain in heart P Y7CmYC 
Retrosternal P Y7CmZC</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>CPTCPT 
zz PrecoordinatedPrecoordinated coding schemecoding scheme 
zz Endovascular repair of descending thoracic aortic Endovascular repair of descending thoracic aortic 
aneurysm, aneurysm, pseudoaneurysmpseudoaneurysm or dissection involving or dissection involving 
coverage of left coverage of left subclaviansubclavian artery origin, initial artery origin, initial 
endoprosthesisendoprosthesis , radiological supervision and , radiological supervision and 
interpretation interpretation  
zz Diagnostic and therapeutic procedureDiagnostic and therapeutic procedure 
zz For billing and reimbursements (public and For billing and reimbursements (public and 
private)private) 
zz withdraw of blood for diagnosiswithdraw of blood for diagnosis 
zz Current version: CPT 4 (CPT 5 expected in 2003)Current version: CPT 4 (CPT 5 expected in 2003)</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>ICD10ICD10 --CMCM 
zz A06 A06 AmebiasisAmebiasis 
zz Includes:infectionIncludes:infection due to due to EntamoebaEntamoeba 
histolyticahistolytica 
zz Excludes1:other Excludes1:other protozoalprotozoal intestinal diseases intestinal diseases 
(A07.(A07. --)) 
zz A06.0 Acute amebic dysenteryA06.0 Acute amebic dysentery 
zz Acute Acute amebiasisamebiasis 
zz Intestinal Intestinal amebiasisamebiasis NOSNOS 
zz A06.1 Chronic intestinal A06.1 Chronic intestinal amebiasisamebiasis 
zz A06.2 Amebic A06.2 Amebic nondysentericnondysenteric colitiscolitis</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>CodingCoding 
zz 3 digit code to represent core term3 digit code to represent core term 
zz 44thth digit (in the first decimal place) to digit (in the first decimal place) to 
provide addition info.provide addition info. 
zz Typically .0 to .7 are used for more specific Typically .0 to .7 are used for more specific 
forms of the core termforms of the core term 
zz .8 is for other.8 is for other 
zz .9 is for unspecified.9 is for unspecified</text>
        </slide>
        <slide>
          <slideno>39</slideno>
          <text>MeSHMeSH 
zz Medical Subject HeadingsMedical Subject Headings 
zz Developed by NLMDeveloped by NLM 
zz Indexes medical literatureIndexes medical literature 
zz MedlineMedline 
zz Terms are in hierarchies and appear in Terms are in hierarchies and appear in 
multiple places in hierarchiesmultiple places in hierarchies</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Appropriate values for the Priority Appropriate values for the Priority 
(attribute) relationship type(attribute) relationship type 
Deferred (q ualifier value) Deferred (q ualifier value) 
Denied (qualifier value)Denied (qualifier value) 
Elective (qua lifier value) Elective (qua lifier value) 
Emergency (qualifier value)Emergency (qualifier value) 
Immediate (qualifier value)Immediate (qualifier value) 
Reclassified (qualifier value)Reclassified (qualifier value) 
Reclassified and rescheduled (qualifier value)Reclassified and rescheduled (qualifier value) 
Repeat electi ve (qualifier value) Repeat electi ve (qualifier value) 
Repeat emergency (qualifier value)Repeat emergency (qualifier value) 
Rescheduled (qualifier value)Rescheduled (qualifier value) 
Routine (qualifier value)Routine (qualifier value) 
Scheduled (qualifier value)Scheduled (qualifier value) 
Urgency (qualifier value)Urgency (qualifier value)</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>LOINCLOINC 
zz Logical Observations, Identifiers, Names, Logical Observations, Identifiers, Names, 
Codes (LOINC)Codes (LOINC) 
zz Consortium led by Clem McDonald and Consortium led by Clem McDonald and 
Stan HuffStan Huff 
zz Originally lab resultsOriginally lab results 
zz Now extended to include clinical Now extended to include clinical 
observationsobservations 
zz Recently, merged into SNOMEDRecently, merged into SNOMED</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>SNOMEDSNOMED 
zz Systematized Nomenclature of Human and Systematized Nomenclature of Human and 
Veterinarian MedicineVeterinarian Medicine 
zz Developed by the College of American Developed by the College of American 
Pathologists (1971)Pathologists (1971) 
zz SNDO, SNOP, SNOMEDSNOMEDSNDO, SNOP, SNOMEDSNOMED 
zz SNOMED InternationalSNOMED International 
zz SNOMEDSNOMED --RT (Reference Terminology)RT (Reference Terminology) 
zz SNOMEDSNOMED --CT (merger with Read)CT (merger with Read)</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Weights and MeasuresWeights and Measures 
The nomenclature is of as much The nomenclature is of as much 
importance in this department of importance in this department of 
inquiry, as weights and measures in inquiry, as weights and measures in 
the physical sciences, and should be the physical sciences, and should be 
settled without delay.settled without delay. 
zz William Farr, about Cullenian systemWilliam Farr, about Cullenian system 
zz First Annual Report of the RegistrarFirst Annual Report of the Registrar --General of Births,Deaths, General of Births,Deaths, 
and Marriages in England.  ondon: and Marriages in England. ondon: 18391839 p. 99p. 99.. Slides borrowed from Dr. Christopher G. Chute of Mayo Clinic 
LL</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>SNOMED InternationalSNOMED International 
Chemicals, Drugs, and Biological ProductsChemicals, Drugs, and Biological Products 14,84614,846 
Diseas es/Diagno ses Diseas es/Diagno ses 35,83435,834 
FunctionFunction 19,22119,221 
General Linkage/ModifiersGeneral Linkage/Modifiers 1,5691,569 
Living OrganismsLiving Organisms 24,61424,614 
Manufacturers of Pharmaceuticals Human/VeterinaryManufacturers of Pharmaceuticals Human/Veterinary 363363 
MorphologyMorphology 5,8755,875 
OccupationsOccupations 1,9491,949 
Physical Agents, Forces and ActivitiesPhysical Agents, Forces and Activities 1,6001,600 
ProceduresProcedures 30,72330,723 
Social contextSocial context 1,0131,013 
TopographyTopography 12,93612,936 
150,343150,343 Slides borrowed from Dr. Cimino J of Columbia Univ.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Data and Knowledge Data and Knowledge 
RepresentationRepresentation 
Lecture 6Lecture 6 Harvard-MIT Division of Health Sciences and Technology
HST.952: Computing for Biomedical Scientists</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Today We Will Talk AboutToday We Will Talk About 
zz Medical vocabulary representationMedical vocabulary representation 
zz Survey of medical coding systemsSurvey of medical coding systems</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>DRGDRG 
Simple Pneumonia with min or complication, age greater than 17 Simple Pneumonia with min or complication, age greater than 17 8989 
Simple Pneumonia with no minor c omplication, age greater than 17 Simple Pneumonia with no minor c omplication, age greater than 17 9090 
Respiratory disease with ventilator supportRespiratory disease with ventilator support 475475 
Respiratory disease with major chest operating room procedure anRespiratory disease with major chest operating room procedure an d major d major 
complic ation or complic ation or comorbiditycomorbidity 538538 
Respiratory disease, other respiratory system operating procedurRespiratory disease, other respiratory system operating procedur e and major e and major 
complic ation or complic ation or comorbiditycomorbidity 539539 
Respiratory infection with major complication or Respiratory infection with major complication or comorbiditycomorbidity 540540 
Respiratory infection with secondary diagnosis of Respiratory infection with secondary diagnosis of bronchopulmonarybronchopulmonary dysplasiadysplasia 
631631 
Respiratory infection with seco ndary diagnosis of cystic fibrosi Respiratory infection with seco ndary diagnosis of cystic fibrosi ss 740740</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>ExampleExample 
zz Represent the following concepts in a Represent the following concepts in a 
vocabularyvocabulary 
zz FluFlu 
zz PneumoniaPneumonia 
zz Flu with PneumoniaFlu with Pneumonia 
zz Infectious DiseaseInfectious Disease 
zz Respiratory DiseaseRespiratory Disease 
zz AdultAdult 
zz InfantInfant</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>DSM TreeDSM Tree 
Anxiety Disor ders Anxiety Disor ders 
zz Acute Stress Dis order Acute Stress Dis order (acute psychological consequences of previous trauma) (acute psychological consequences of previous trauma) 
zz AgoraphobiaAgoraphobia (generalized irrational fear) (generalized irrational fear) 
zz Generalized Anxi ety Disorder Generalized Anxi ety Disorder (nonspecific anxiety) (nonspecific anxiety) 
zz ObsessiveObsessive --Compulsive DisorderCompulsive Disorder ((obessiveobessive thoughts and compulsive rituals) thoughts and compulsive rituals) 
zz Panic DisorderPanic Disorder (unprovoked panic attacks) (unprovoked panic attacks) 
zz Posttraumatic Stress DisorderPosttraumatic Stress Disorder ((nonacutenonacute psychological consequences of previous psychological consequences of previous
trauma) trauma) 
zz Separation Anxiety Disord er Separation Anxiety Disord er 
zz Social Phobia Social Phobia (irrational fear of embarrassment) (irrational fear of embarrassment) 
zz Specific PhobiaSpecific Phobia (other specific irrational fears)(other specific irrational fe ars) 
Childhood Diso rders Childhood Diso rders 
zz AttentionAttention --Deficit/Hyperactivity DisorderDeficit/Hyperactivity Disorder 
zz Conduct DisorderConduct Disorder (the Antisocial Personality Disorder of Childhood) (the Antisocial Personality Disorder of Childhood) 
zz Oppositional Defiant DisorderOppositional Defiant Disorder (not only for children) (not only for children) 
..</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Terminology as Crucial Terminology as Crucial 
RequirementRequirement 
WithoutWithout Terminology Standards...Terminology Standards... 
zz Health Data is Health Data is nonnon--comparablecomparable 
zz Health Systems Health Systems cannotcannot Interchange Data Interchange Data 
zz Secondary Uses (Research, Efficiency) are Secondary Uses (Research, Efficiency) are notnotpossiblepossible 
zz Linkage to Decision Support Resources Linkage to Decision Support Resources notnotPossiblePossible Slides borrowed from Dr. Christopher G. Chute of Mayo Clinic</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>SNOMED RTSNOMED RT 
Fully Specified Name: Fully Specified Name: Heart disease in mother complicating Heart disease in mother complicating 
pregnancy, childbirt h AND/OR pregnancy, childbirt h AND/OR puerperiumpuerperium (disorder)(disorder) 
Concept ID: Concept ID: 7838100478381004 
Definition: Definition: 
Is a (Is a ( attribute)attribute) CardiacCardiac complication (disorder)complication (disorder) 
Is a (Is a ( attribute)attribute) ComplicationComplication related to pregnancy (disorder)related to pregnancy (disorder) 
Finding site (attribute) Finding site (attribute) Heart structure (body structure)Heart structure (body structure) 
Qualifiers:Qualifiers: 
Onset (Onset ( attribute)attribute) OnsetsOnsets (qualifier value)(qualifier value) 
Severity (Severity ( attribute)attribute) SeveritiesSeverities (qualifier value)(qualifier value) 
EpisodicityEpisodicity ((attribute)attribute) Episodiciti es Episodiciti es (qualifier value)(qualifier value) 
Course (Course ( attribute)attribute) CoursesCourses (qualifier value)(qualifier value)</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>AlgorithmAlgorithm 
zz Algorithmic mapping from ICD based Data Algorithmic mapping from ICD based Data 
to DRG codesto DRG codes 
zz Distinguish cases base on factors that Distinguish cases base on factors that 
affect cost and length of stayaffect cost and length of stay 
zz Severity of illness       Severity of illness 
zz Prognosis                        Prognosis 
zz Treatment difficultyTreatment difficulty 
zz Need for interventionNeed for intervention 
zz Resource intensity Resource intensity --administrativeadministrative } Slides adapted from Dr. Christopher G. Chut e of Mayo Clin ic 
clinicalclinical</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Searching and Sorting (PDF)
Lecture 9 Code (ZIP) (zip file includes: TestBinarySearch.java, TestMergeSort.java, and TestSelectionSort.java)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/hst-952-computing-for-biomedical-scientists-fall-2002/resources/lecture9/</lecture_pdf_url>
      <lectureno>9</lectureno>
      <slides>
        <slide>
          <slideno>4</slideno>
          <text>Linear/sequential search
 If we have a completely filled array
 start at the beginning of the array and proceed in 
sequence until either the valu e is found or the end of 
the array is reached 
 or, start at the end of the array and proceed 
backwards in sequence until the value being sought 
is found or the beginning of the array is reached 
 If the array is only partially filled, 
 keep track of the number of valid entries in the array 
 forward search stops when the last meaningful value 
has been checked</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Merge sort
 Board example 
 Programming example</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Linear/sequential search
	Linear search is not the most efficient search 
method 
	However, it works and is easy to program
public int itemInArray(char item, char[] arr, int validEntries) 
{ 
int index = -1; 
for (int i = 0; i &lt; validEntries; i++) {
if (item == arr[i])
index = i;
}
return index;
}</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Other sorting algorithms
There are other sorting algorithms that we 
wont examine in detail: 
Q u i c k s o r t 
 Insertion sort
H e a p s o r t 
 Bubblesort 
 Bogosort (only ever used to illustrate the worst/ 
most inefficient method possible for sorting)</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Read
Foundations of Computer Science by Aho and 
Ullman 
 Chapter 2 
 Chapter 3
Tip 
 Start Homework 4 early!</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Searching and sorting
 To search a collection of numbers, characters, 
strings or any other typed that can be ordered 
 if the collection is not sorted, we may have to 
examine each member of the collection in turn 
until we find the item we are seeking (a linear or 
sequential search strategy) 
 if the collection is sorted we may be able to speed 
up or otherwise improve the efficiency of our 
search by taking advantage of this fact</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Binary search
 Programming example</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Binary search
Search: 
middle page = (first page + last page)/2 
Open the phone book to middle page; 
If (name is on middle page) 
then done; //this is the base case
else if (name is alphabetically before middle page) 
last page = middle page //redefi ne search area to front half 
Search //recursive call with reduced number of pages 
else //name must be after middle page 
first page = middle page //redefi ne search area to back half 
Search //recursive call with reduced number of pages</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Summary
	Selection sort is one of the easiest sorting 
methods to understand and code 
	Interchanges smallest number in array with 
first location in array 
	It is not the most efficient sorting method
	Merge sort uses a divide-and-conquer 
strategy for sorting 
	More efficient than selection sort</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Summary
	Linear search is most appropriate for searching through a 
collection of unsorted items 
	It is not very efficient, but is easy to program
	Binary search is a more efficient search method than linear 
search 
	It works for arrays/collections that are already sorted (is 
essentially the strategy that humans use for searching a phone 
book or dictionary) 
	this strategy is often called a divide-and-conquer strategy 
	Strategy for searching for a name in one section of a phone 
book is the same as initial strategy for searching for the name in the entire phone book 
	This implies that we can solve the binary search problem 
using recursion</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Searching and sorting
	We will look briefly at some searching methods
	linear/sequential search 
	binary search 
	Since the process of searching a collection of  numbers, 
etc. can be improved if we know that the items in the 
collection are already sorted we will look at some 
sorting methods: 
	selection sort
	merge sort 
	We will use arrays and vectors to illustrate the 
searching and sorting methods</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Binary search
	In the worst possible case (e.g., when the 
element we are seeking is not in the array at 
all), the total number of array item comparisons 
performed in a binary search is significantly 
less than for linear search 
	For an array with 2048 elements a binary search 
would perform 11 comparisons in the worst 
case (compared to 2048 for linear search!)</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Linear/sequential search
	In the worst possible case (when the element 
we are seeking is in the last position in the 
array or is not in the array at all), the total 
number of array item comparisons performed in a linear search equals the total length of the 
array being searched 
	For an array with 2048 elements this means 
2048 comparisons in the worst case</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Merge sort
	Uses a divide-and-conquer strategy for sorting
	The idea is to sort a set of n numbers, etc. by splitting 
them into two sets of roughly equal size (n/2) 
	We then sort each of the half-sized sets of numbers 
separately 
	To complete the sorting of the original set of n 
numbers, we merge the two sorted, half-sized sets 
 Note that we can apply the same split-and-merge 
approach when we sort the two half-sized sets
 this means we can use a recursive approach for merge 
sorting</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Binary search
	More efficient search method than linear search
	Works for arrays/collections that are already 
sorted (is essentially the strategy that humans 
use for searching a phone book or dictionary) 
 this strategy is often called a divide-and-conquer 
strategy 
	Strategy for searching for a name in one 
section of a phone book is the same as initial strategy for searching for the name in the entire 
phone book 
	This implies that we can solve the binary 
search problem using recursion</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Selection sort
 Board example 
 Programming example</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Selection sort
	One of the easiest sorting methods to 
understand and code 
	However it is not the most efficient
 in the worst case (we are sorting in non-
decreasing/increasing order: e.g.,1-1-2-3-4 but 
the array is already sorted in decreasing order: e.g., 4-3-2-1-1) for an array of length 1000, we 
perform roughly 1,000,000 comparisons 
 we will look at merge sort next which is more 
efficient than selection sort</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Merge sort
 More efficient than selection sort:
 In the worst case we want to merge-sort two sets 
that are already sorted in decreasing order: e.g., 
4-3-2-1-1 and 6-5-2-1-0 
into one set with elements in non-decreasing/ 
increasing order: i.e.,
0-1-1-1-2-2-3-4-5-6
 For a vector/array of leng th 1000, we would need to 
perform roughly 10,000 comparisons (as opposed to 
1,000,000 for selection sort)</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Merge sort
	Merging means that we produce from the two sorted 
sets a single sorted set containing all the elements in 
the two sets and no others 
	We can use two vectors to hold these two sets 
	A simple algorithm for merging the two sorted sets is:
 compare the first elements of the two vectors holding the two 
sets of numbers we wish to merge 
 store the smaller of the two into a new vector that will hold 
the combined set of numbers (can break ties arbitrarily)
 remove the stored element from its original vector so that this vector has a new first element 
 repeat this process until there are no elements left in the two 
original vectors</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Selection sort
To sort an array, A of integers in non-decreasing order:
	search the array for the smallest number and record its index
	swap (interchange) the smallest number with the first element of 
the array 
	the sorted part of the array is now the first element: A[0]
 the unsorted part of the a rray is the remaining elements:
A[1]- A[length-1]
	search A[1]- A[length-1] for the next smallest element and record 
that element's index 
	swap the next smallest element with the second element of the 
array 
	repeat the search and swap until all elements have been placed
 each iteration of the search/swap process increases the length of 
the sorted part of the array by  one, and reduces the unsorted 
part of the array by one</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Harvard-MIT Division of Health Sciences and Technology 
HST.952: Computing for Biomedical Scientists 
HST 952
Computing for Biomedical Scientists
Lecture 9</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Outline
 Searching and sorting 
 Programming examples</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
  </lectures>
</doc>
