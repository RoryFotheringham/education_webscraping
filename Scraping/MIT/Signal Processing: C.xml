<doc>
  <source>MIT</source>
  <date>28/01/2023</date>
  <course>
    <course_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/</course_url>
    <course_title>Signal Processing: Continuous and Discrete</course_title>
    <course_tags>
      <list>Engineering </list>
      <list>Mathematics </list>
      <list>Mechanical Engineering </list>
    </course_tags>
  </course>
  <lectures>
    <lecture>
      <lecture_title>The one-sided Laplace transform
The transfer function
Poles and zeros of the transfer function
Frequency response and the pole-zero plot</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_05/</lecture_pdf_url>
      <lectureno>5</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G30 /G70 /G31 
/G70 /G32 /G70 
/G70 /G32 /G31 
/G73 /G6A /G57 
/G32 /G7C /G6A /G57 /G20/G31 /G2D /G20 /G70 /G32 /G20 /G7C /G6A /G57 /G6A /G57 
/G73 /G6A /G57 /G31 
 
  
/G30 /G73 /G30
/G31 /G6A /G57 
/G57 
/G57 /G31 /G32 
/G2D /G39 /G30 /G2D /G71 /G31 
/G32 /G4B 
/G4B /G2F /G71 
/G4B /G2F /G71 
/G30
/G6A /G57 /G31 
/G32 
/G71
/G71 /G31 /G32 
/G2D /G71 /G57 /GD0 /G28 /G6A /G57 /G20 /G31 /G2D /G20 /G70 /G20 /G20 /G29 /G30 /G31 
/G7A /G31 
/G71 /G31 /G31/G71 /G71 
/G32 /G66 /G31 /G32 /G72 
/G66 /G72 /G32 /G31 /G73 /G2D /G70 /G6C /G61 /G6E /G65 /G71 /G73 /G2D /G70 /G6C /G61 /G6E /G65 
as shown above, with similar expressions for the vectors from the m zeros. The magnitude 
and phase angle of the complete frequency response may then be written in terms of the 
magnitudes and angles of these component vectors 
m |(j  zi)||H(j)| = K i=1 
|(j  pi)|n 
i=1 
m n 
/negationslash H(j) = /negationslash (j  zi)  /negationslash (j  pi). 
i=1 i=1 
If the vector from the pole pi to the point s = j has length qi and an angle i from the 
horizon tal, and the vector from the zero zi to the point j has a length ri and an angle i, 
the value of the frequency response at the point jis 
r1 ...r m|H(j)| = K (1) q1 ...q n 
/negationslash H(j)=( 1 + ...+ m)  (1 + ...+ n) (2) 
The graphical metho d can be very useful for deriving a qualitativ e picture of a system 
frequency response. For example, consider the sinusoidal response of a rst-order system 
with a pole on the real axis at s = 1/ as shown below. Even though the gain constan t 
K cannot be determined from the pole-zero plot, the following observ ations may be made 
directly by noting the behavior of the magnitude and angle of the vector from the pole to 
the imaginary axis as the input frequency is varied: 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C 
/G32 /G73 /G2D /G70 /G6C /G61 /G6E /G65 
/G32 
/G71 /G71 
/G31 /G57/G6A /G57 /GD0 /G48 /G28 /G6A /G57 /G29 
/G70 /G20 /G3D /G20 /G2D /G31 /G2F /G74
/G28 /G61 /G29 /G28 /G62 /G29 
57</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>2.1 The Transfer function and the Sinusoidal Frequency Resp onse 
We have seen that 
bmsm + bm1sm1 + ...+ b1s+ b0H(s)= ansn + an1sn1 + ...+ a1s+ a0 
and 
bm(j)m + bm1(j)m1 + ...+ b1(j) + b0H(j) = an(j)n + an1(j)n1 + ...+ a1(j) + a0 
so that 
H(j) = H(s)|s=j 
3 Poles and Zeros of the Transfer Function 
The transfer function provides a basis for determining important system response character
istics without solving the complete dieren tial equation. As dened, the transfer function is 
a rational function in the complex variable s= + j, that is 
bmsm + bm1sm1 + ...+ b1s+ b0H(s)= ansn + an1sn1 + ...+ a1s+ a0 
It is often convenient to factor the polynomials in the numerator and denominator, and to 
write the transfer function in terms of those factors: 
N(s) (s z1)(s z2) ...(s zm1)(s zm)H(s)= = K ,D(s) (s p1)(s p2) ...(s pn1)(s pn) 
where the numerator and denominator polynomials, N(s) and D(s), have real coecien ts 
dened by the systems dieren tial equation and K = bm/an. The zis are the roots of the 
equation 
N(s)=0, 
and are dened to be the system zeros, and the pis are the roots of the equation 
D(s)=0, 
and are dened to be the system poles. Clearly when s = zi the numerator N(s)=0 and 
the transfer function vanishes, that is 
lim H(s)=0. 
szi 
and similarly when s= pi the denominator polynomial D(s) = 0 and the value of the transfer 
function becomes unbounded, 
lim H(s)= . 
spi 
All of the coecien ts of polynomials N(s) and D(s) are real, therefore the poles and zeros 
must be either purely real, or appear in complex conjugate pairs. In general for the poles, 
either pi = i, or else pi,pi+1 = i  ji. The existence of a single complex pole without a 
corresp onding conjugate pole would generate complex coecien ts in the polynomial D(s). 
Similarly , the system zeros are either real or appear in complex conjugate pairs. 
55</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G79 /G28 /G74 /G29 
/G4C /G4C /G2D /G31 
/G52 The Laplace transform generalizes the denition of the transfer function to a complete in
put/output description of the system for any input u(t) that has a Laplace transform. 
The system response y(t)= L1 {Y (s)} may be found by decomp osing the expression for 
Y (s)= U(s)H(s) into a sum of recognizable components using the metho d of partial fractions 
as describ ed above, and using tables of Laplace transform pairs to nd the component 
time domain responses. To summarize, the Laplace transform metho d for determining the 
response of a system to an input u(t) consists of the following steps: 
(1)	If the transfer function is not available it may be computed by taking the 
Laplace transform of the dieren tial equation and solving the resulting al
gebraic equation for Y (s). 
(2)	Take the Laplace transform of the input. 
(3)	Form the product Y (s)= H(s)U(s). 
(4)	Find y(t) by using the metho d of partial fractions to compute the inverse 
Laplace transform of Y (s). 
/G74 /G69 /G6D /G65 /G20 /G64 /G6F /G6D /G61 /G69 /G6E /G75 /G28 /G74 /G29 
/G54 /G72 /G61 /G6E /G73 /G66 /G65 /G72 /G20 /G66 /G75 /G6E /G63 /G74 /G69 /G6F /G6E 
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G48 /G28 /G73 /G29 
/G4C /G61 /G70 /G6C /G61 /G63 /G65 /G20 /G64 /G6F /G6D /G61 /G69 /G6E /G55 /G28 /G73 /G29 /G59 /G28 /G73 /G29 /G20 /G3D /G20 /G55	 /G28 /G73 /G29 /G48 /G28 /G73 /G29 
/G6D /G75 /G6C /G74 /G69 /G70 /G6C /G69 /G63 /G61 /G74 /G69 /G6F /G6E 
Example 2 
Determine the transfer function of the rst-order RC lter: 
/G43 /G76 /G20 /G20 /G28 /G74 /G29 /G2B 
/G2D /G76 /G20 /G20 /G28 /G74 /G29 /G69 /G6E /G6F 
The dieren tial equation relating vo(t)to vin(t)is 
dv0RC + vo = vin(t)dt 
and taking the Laplace transform of both sides gives 
(RCs +1)Vo(s)= Vin(s) 
from which 
Vo(s) 1 H(s)= = Vin(s) RCs +1 
54</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>2 This procedure may be repeated to nd the Laplace transform of higher order derivatives, 
for example the Laplace transform of the second derivative is 
d2x dx 
L = s [sL{x(t)}x(0)]  dt2 dt t=0 
dx 
= s 2X(s) sx(0)  dt t=0 
which may be generalized to 
 n  
L dnx = s nX(s)   
s ni di1x 
dtn dti1 
i=1 t=0 
for the n derivative of x(t). 
The Transfer Function 
The use of the derivative property of the Laplace transform generates a direct algebraic 
solution metho d for determining the response of a system describ ed by a linear input/output 
dieren tial equation. Consider an nth order linear system, completely relaxed at time t =0, 
and describ ed by 
dny dn1y dy an + an1 + ... + a1 + a0y = dtn dtn1 dt 
dmu dm1u du bm + bm1 + ... + b1 + b0u. dtm dtm1 dt 
In addition assume that the input function u(t), and all of its derivatives are zero at time 
t = 0, and that any discon tinuities occur at time t =0+ . Under these conditions the Laplace 
transforms of the derivatives of both the input and output simplify to 
dny dnu L = s nY (s), and L = s nU(s)dtn dtn 
so that if the Laplace transform of both sides is taken 
ans n + an1s n1 + ... + a1s + a0 Y (s)= 
bms m + bm1s m1 + ... + b1s + b0 U(s) 
which has had the eect of reducing the original dieren tial equation into an algebraic 
equation in the complex variable s. This equation may be rewritten to dene the Laplace 
transform of the output: 
bmsm + bm1sm1 + ... + b1s + b0Y (s)= U(s) ansn + an1sn1 + ... + a1s + a0 
= H(s)U(s) 
53</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
 
Department of Mechanical Engineering
 
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 51 
Reading: 
 Class handout: The Laplac e Transform . 
 Class handout: Understanding Poles and Zeros. 
 Class handout: Sinusoidal Frequency Response of Linear Systems . 
1 The One-Sided Laplace Transform 
Consider a causal waveform x(t), such as the unit-step function us(t), for which the Fourier 
integral   
x(t)ejtdt =   
x(t)ejtdt 
 0 
does not converge. Clearly , for us(t), the Fourier integral 
 
Us(j)= 1.ejtdt 
0 
does not converge. 
Now consider a modied function x(t)= x(t)w(t) where w(t) is a weighting function with 
the property limt w(t) = 0, chosen to ensure convergence, so that 
 
X(j,w)= x(t)w(t)ejtdt 
0 
may be considered an appro ximation to X(j). 
In particular, consider w(t)= et for real , and note that as  0, x(t)w(t) x(t),  
so that the Fourier transform is 
F 
x(t)et 
= X(j,)=   
x(t)et ejtdt =   
x(t)e(+j)tdt. 
0 0 
If we dene a complex variable s =  + j we can write 
  
x(t)estdt L{x(t)} = X(s)= 
0 
which denes the one-side d Laplace transform. (See the handout for the denition of the 
two-sided transform). 
1copyrigh t c D.Ro well 2008 
51</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>frequency of the input increases. (This cannot happ en in physical energetic systems 
because it implies an innite power gain through the system.) If n = m the system 
gain becomes constan t at high frequencies. 
2. If a system has a pair of complex conjugate poles close to the imaginary axis, the 
magnitude of the frequency response has a peak, or resonance, at frequencies in the 
proximit y of the pole. If the pole pair lies directly upon the imaginary axis, the system 
exhibits an innite gain at that frequency . 
3. If a system has a pair of complex conjugate zeros close to the imaginary axis, the 
frequency response has a dip or notc h in its magnitude function at frequencies in 
the vicinit y of the zero. Should the pair of zeros lie directly upon the imaginary axis, 
the response is identically zero at the frequency of the zero, and the system does not 
respond at all to sinusoidal excitation at that frequency . 
4. A pole at the origin of the	 s-plane (corresp onding to a pure integration term in the 
transfer function) implies an innite gain at zero frequency . 
5. Similarly a zero at the origin of the s-plane (corresp onding to a pure dieren tiation) 
implies a zero gain for the system at zero frequency . 
59</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G74 /G66 /G28 /G74 /G29 /G66 /G28 /G74 /G29 
 
  
  
  The Laplace transform may be considered as an extension of the Fourier transform 
(for causal functions) that includes an exponential weighting term to extend the range 
of functions for which the integral converges. 
Note that for causal waveforms 
X(j) = X(s)|s=j 
and if x(t) is non-causal 
X(j) /negationslashX(s)| = s=j , 
for example F{sin( 0t)}/negationslashL{sin( 0t) }| = s=j, since the Laplace transform assumes x(t) 0 
for t&lt; 0 . 
/G30 
/G6E /G6F /G6E /G2D /G63 /G61 /G75 /G73 /G61 /G6C /G20 /G73 /G69 /G6E /G75 /G73 /G6F /G69 /G64 /G63 /G61 /G75 /G73 /G61 /G6C /G20 /G73 /G69 /G6E /G75 /G73 /G6F /G69 /G64 /G30 /G74 
Example 1 
The following are some simple examples of Laplace transforms: 
  1 L{us(t) } = 1.e stdt = 
0 s   
L{(t) } = (t)e stdt =1 
0 
  1 L e at = e (s+a)tdt = 
0 s + a 
1.1 The Deriv ativ e Prop erty of the Laplace Transform: 
If a function x(t) has a Laplace transform X(s), the Laplace transform of the derivative of 
x(t)is 
dx L = sX(s) x(0). dt 
Using integration by parts 
dx   dx L = e stdt dt 0 dt   
= x(t)e st   
0 + sx(t)e stdt 
0 
= sX(s) x(0). 
52</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>4 3.1 The Pole-Zero Plot 
A system is characterized by its poles and zeros in the sense that they allow reconstruction of 
the input/output dieren tial equation. In general, the poles and zeros of a transfer function 
may be complex, and the system dynamics may be represen ted graphically by plotting their 
locations on the complex s-plane, whose axes represen t the real and imaginary parts of the 
complex variable s. Such plots are known as pole-zer o plots. It is usual to mark a zero 
location by a circle () and a pole location a cross (). The location of the poles and zeros 
provide qualitativ e insigh ts into the response characteristics of a system. Many computer 
programs are available to determine the poles and zeros of a system. The gure below is an 
example of a pole-zero plot for a third-order system with a single real zero, a real pole and 
a complex conjugate pole pair, that is; 
(3s+6)	 (s (2))H(s)=	 =3 (s3 +3s2 +7s+5) (s (1))(s (1  2j))(s (1+2j)) 
/G30/G2D /G32 
/G73 /G2D /G70 /G6C /G61 /G6E /G65 
/G6A /G32 
/G2D /G31 
/G2D /G6A /G32 /G70 /G6F /G6C /G65 
/G7A /G65 /G72 /G6F 
Note that the pole-zero plot characterizes the system, except for the overall gain constan t 
K. 
Frequency Resp onse and the Pole-Zero Plot 
The frequency response may be written in terms of the system poles and zeros by substituting 
directly into the factored form of the transfer function: 
(j  z1)(j  z2) ...(j  zm1)(j  zm)H(j) = K	 . (j  p1)(j  p2) ...(j  pn1)(j  pn) 
Because the frequency response is the transfer function evaluated on the imaginary axis of 
the s-plane, that is when s= j, the graphical metho d for evaluating the transfer function 
may be applied directly to the frequency response. Each of the vectors from the n system 
poles to a test point s= j has a magnitude and an angle: 
|j  pi| = 2 +(  i)2 ,i 
/negationslash	(s pi) = tan1   i ,i 
56</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G30 /G73 /G31 /G32
/G6A /G57	 /G30 
/G30 
/G2D /G31 /G38 /G30 /G70
/G70 /G31 
/G32 /G6A /G57 
/G57 
/G57 
/G57 1. At low frequencies the gain approac hes a nite value, and the phase angle has a small 
but nite lag. 
2. As the input frequency is increased the gain decreases (because the length of the vector 
increases), and the phase lag also increases (the angle of the vector becomes larger). 
3. At	very high input frequencies the gain approac hes zero, and the phase angle ap
proaches /2. 
As a second example consider a second-order system, with the damping ratio chosen so that 
the pair of complex conjugate poles are located close to the imaginary axis as shown below. 
In this case there are a pair of vectors connecting the two poles to the imaginary axis, and 
the following conclusions may be drawn by noting how the lengths and angles of the vectors 
change as the test frequency moves up the imaginary axis: 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C 
/G6A 
/G31 /G57 /G57 /G32	 /GD0 /G48 /G28 /G6A /G57 /G29 
/G28 /G61 /G29	 /G28 /G62 /G29 
1. At low frequencies there is a nite (but undetermined) gain and a small but nite 
phase lag associated with the system. 
2. As the input frequency is increased and the test point on the imaginary axis approac hes 
the pole, one of the vectors (associated with the pole in the second quadran t) decreases 
in length and at some point reaches a minim um. There is an increase in the value of 
the magnitude function over a range of frequencies close to the pole. 
3. At very high frequencies, the lengths of both vectors tend to innit y, and the magnitude 
of the frequency response tends to zero, while the phase approac hes an angle of  
radians because the angle of each vector approac hes /2. 
The following generalizations may be made about the sinusoidal frequency response of a 
linear system, based upon the geometric interpretation of the pole-zero plot: 
1. If a system has an excess of poles over the number of zeros (n&gt;m ) the magnitude 
of the frequency response tends to zero as the frequency becomes large. Similarly , 
if a system has an excess of zeros (n&lt;m ) the gain increases without bound as the 
58</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The Fourier series and transform
Periodic input functions &#8212; the Fourier series
Aperiodic input functions &#8212; the Fourier transform</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_03/</lecture_pdf_url>
      <lectureno>3</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G31 /G2E /G30 /G32 /G2E /G30 
/G31 /G2E /G30 /G32 /G2E /G30 /G2D /G35 /G2D /G34 /G2D /G33 /G2D /G32 /G2D /G31 /G30 /G31 /G32 /G33 /G34 /G35 
/G6E 
/G2D /G35 /G2D /G34 /G2D /G33 /G2D /G32 /G2D /G31 /G33 /G34 /G35 /G6E 
 /GC2 /G7B /G58 /G6E /G20 /G20 /G7D 
/GC1 /G7B /G58 /G20/G6E/G20 /G7D 
/G2D /G32 /G2E /G30 /G2D /G31 /G2E /G30 /G30 /G31 /G32 
2.1 Computation of the Fourier Coecien ts 
Section (2.1) of the class handout derives the nite (truncated) Fourier series as a least-
squares approximation to the periodic function x(t). The results show that for the complex 
represen tation 
1 t0+T 
Xn = xp(t)e jn0tdt,T t0 
and for the real represen tation 
2  t0+T 
an = x(t)cos(n0t)dt T t0 
2  t0+T 
bn = x(t)sin(n0t)dt. T t0 
The results are summarized in the following table: 
Sinusoidal formulation Exponential formulation 
Synthesis: x(t)= 1 
2 a0 +   
n=1 (an cos(n0t)+ bn sin(n0t)) x(t)= +  
n= Xnejn0t 
Analysis: an 
bn = 2 
T  t1+T 
t1 x(t) cos(n0t)dt 
= 2 
T  t1+T 
t1 x(t) sin(n0t)dt Xn = 1 
T  t1+T 
t1 x(t)e jn0tdt 
35</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G54 
/G74 /G74 /G54 /G54 2 Periodic Input Functions -The Fourier Series 
In general, a periodic function is a function that satises the relationship: 
x(t)= x(t + T) 
for all t,or x(t)= x(t+ nT) for n = 1,2,3,..., where T is dened as the period. Some 
examples of periodic functions is shown below. 
/G78 /G33/G20 /G20 /G28 /G74 /G29 /G78 /G32/G20 /G20 /G28 /G74 /G29 /G78 /G31/G20 /G20 /G28 /G74 /G29 
/G74 /G30 /G30	
The fundamental angular frequency 0 (in radians/second) of a periodic waveform is dened 
directly from the period 
2 0 = ,T 
and the fundamental frequency F0 (in Hz) is 
1 F0 = T 
so that 0 =2F0. 
	Any periodic function with period T is also be periodic at intervals of nT for any 
positive integer n. Similarly any waveform with a period of T/n is periodic at intervals 
of T seconds. 
	Two waveforms whose periods, or frequencies, are related by a simple integer ratio are 
said to be harmonic ally related. 
	If two harmonically related functions are summed together to produce a new function 
g(t)= x1(t)+ x2(t), then g(t) will be periodic with a period dened by the longest 
period of the two components. In general, when harmonically related waveforms are 
added together the resulting function is also periodic with a repetition period equal to 
the fundamen tal period. 
32</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>/G30 /G31 /G32 /G33 /G34/G31 /G2E /G30
/G74/G78 /G28 /G74 /G29
/G54 /G20 /G3D /G20 /G34
/G30 /G31 /G32 /G33 /G34/G31 /G2E /G30
/G74/G78 /G28 /G74 /G29
/G54 /G20 /G3D /G20 /G32
/G30 /G31 /G32 /G33 /G34/G31 /G2E /G30
/G74/G78 /G28 /G74 /G29
/G54 /G20 /G3D /G20 /G31/G54 /G58/G6E
/G30
/G30/G30/G6E
/G6E
/G6E/G30/G77 /G20 /G20 /G3D /G20 /G32 /G70 /G72 /G61 /G64 /G2F /G73 /G65 /G63/G30 /G77 /G20 /G20 /G3D /G20 /G70 /G2F /G32 /G72 /G61 /G64 /G2F /G73 /G65 /G63
/G30 /G77 /G20 /G20 /G3D /G20 /G70 /G72 /G61 /G64 /G2F /G73 /G65 /G63/G54 /G58/G6E
/G54 /G58/G6E(c)	 The period T is now allowed to become arbitrarily large, with the result that the fun
damen tal frequency 0 becomes very small and we write 0 = . We dene x(t) as 
the limiting case of xp(t) as T approac hes innit y, that is 
x(t)	 = lim xp(t)
T  
 1  T/2 
(t)ejntdt  
jnt = lim  
xp e 
T  2 T/2n=  1    
= x(t)ejtdt ejtd	 (4)2  
where in the limit the summation has been replaced by an integral. 
(d)	 If the function inside the braces is dened to be X(j), Eq. (??) may be expanded into 
a pair of equations, known as the Fourier transform pair: 
 
X(j) = x(t)ejtdt 
 1x(t) = X(j)ejtd 2  
which are the equations we seek. 
(To be continued in Lecture 4) 
311</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>2.2 Properties of the Fourier Series 
The following are some of the important properties of the Fourier series: 
(1) Existence of the Fourier Series	 For the series to exist, the Fourier analysis integral 
must converge. A set of three sucien t conditions, known as the Dirichelet conditions, 
guaran tee the existence of a Fourier series for a given periodic waveform x(t). They 
are 
 The function x(t) must be absolutely integrable over any period, that is 
 t0+T 
|x(t)| dt &lt;  
t0 
for any t0. 
	There must be at most a nite number of maxima and minima in the function 
x(t) within any period. 
	There must be at most a nite number of discon tinuities in the function x(t) 
within any period, and all such discon tinuities must be nite in magnitude. 
These requiremen ts are satised by almost all waveforms found in engineering practice. 
The Dirichelet conditions are a sucient set of conditions to guaran tee the existence 
of a Fourier series represen tation. They are not necessary conditions, and there are 
some functions that have a Fourier series represen tation without satisfying all three 
conditions. 
(2) Linearit y of the Fourier Series Represen tation	 The Fourier analysis and synthe
sis operations are linear. Consider two periodic functions g(t) and h(t) with identical 
periods T , and their complex Fourier coecien ts 
1  T 
Gn = g(t)e jn0tdt T 0 
1  T 
Hn = h(t)e jn0tdt T 0 
and a third function dened as a weighted sum of g(t) and h(t) 
x(t)= ag(t)+ bh(t) 
where a and b are constan ts. The linearit y property, which may be shown by direct 
substitution into the integral, states that the Fourier coecien ts of x(t) are 
Xn = aGn + bHn, 
that is the Fourier series of a weighted sum of two time-domain functions is the weighted 
sum of the individual series. 
36</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>(3) Even and Odd Functions	 If x(t) exhibits symmetry about the t = 0 axis the Fourier 
series represen tation may be simplied. If x(t) is an even function of time, that is 
x(t)= x(t), the complex Fourier series has coecien ts Xn that are purely real, with 
the result that the real series contains only cosine terms, so that Eq. (??) simplies to 
1 x(t)= a0 + an cos(n0t). 2 n=1 
Similarly if x(t) is an odd function of time, that is x(t)= x(t), the coecien ts Xn 
are imaginary , and the one-sided series consists of only sine terms: 
 
x(t)= bn sin(n0t). 
n=1 
Notice that an odd function requires that x(t) have a zero average value. 
(4) The Fourier Series of a Time Shifted Function	 If the periodic function x(t) has 
a Fourier series with complex coecien ts Xn, the series represen ting a time-shifted 
version g(t)= x(t + ) has coecien ts ejn0Xn.If 
then
1  T 
Xn = x(t)e jn0tdt T 0 
1  T 
Gn = f(t + )e jn0tdt. T 0 
Changing the variable of integration  = t +  gives 
1 +T 
Gn = f()e jn0()d T  
jn0 1  +T 
jn0td = e f()e T  
jn0Xn. = e
If the nth spectral component is written in terms of its magnitude and phase 
xn(t)= An sin(n0t + n) 
then 
xn(t + )= An sin(n0(t +  )+ n) 
= An sin(n0t + n + n0 ) . 
The additional phase shift n0, caused by the time shift  , is directly proportional 
to the frequency of the component n0. 
37</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>(5) Interpretation of the Zero Frequency Term	 The coecien ts X0 in the complex 
series and a0 in the real series are somewhat dieren t from all of the other terms for 
they corresp ond to a harmonic component with zero frequency . The complex analysis 
equation shows that 
1  t1+T 
X0 = x(t)dt T t1 
and the real analysis equation gives 
1 1  t1+T 
a0 = x(t)dt 2 T t1 
which are both simply the average value of the function over one complete period. 
If a function x(t) is modied by adding a constan t value to it, the only change in its 
series represen tation is in the coecien t of the zero-frequency term, either X0 or a0. 
2.3 The Response of Linear Systems to Periodic Inputs 
Consider a linear single-input, single-output system with a frequency response function 
H(j). Let the input u(t) be a periodic function with period T, and write it in terms 
of a real Fourier series: 1 u(t)= a0 + An sin(n0t + n)2 n=1 
The nth real harmonic input component, un(t)= An sin(n0t + n), generates an output 
sinusoidal component yn(t) with a magnitude and a phase that is determined by the systems 
frequency response function H(j): 
yn(t)= |H(jn0)|An sin(n0t + n + /negationslash H(jn0)). 
The principle of superposition states that the total output y(t) is the sum of all such com
ponent outputs, or 
 
y(t)= yn(t)
n=0
1 =	a0H(j0) + An |H(jn0)|sin(n0t + n + /negationslash H(jn0)) ,2 n=1 
which is itself a Fourier series with the same fundamen tal and harmonic frequencies as the 
input. The output y(t) is therefore also a periodic function with the same period T as 
the input, but because the system frequency response function has modied the relativ e 
magnitudes and the phases of the components, the waveform of the output y(t) diers in 
form and appearance from the input u(t). 
In the complex formulation the input waveform is decomp osed into a set of complex 
exponentials un(t)= Unejn0t . Each such component is modied by the system frequency 
response so that the output component is 
yn(t)= H(jn0)Unejn0t 
38</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Example 1 
A family of waveforms gN (t)(N =1, 2 ... 5) is formed by adding together the 
rst N of up to ve component functions, that is 
N 
gN (t)= xn(t) 1 &lt;N  5 
n=1 
where 
x1(t)=1 
x2(t)=	 sin(2t) 
1 x3(t)= sin(6t)3 
1 x4(t)= sin(10t)5 1 
x5(t)= sin(14t). 7 
The rst term is a constan t, and the four sinusoidal components are harmonically 
related, with a fundamen tal frequency of 0 =2 rad/s and a fundamen tal period 
of T =2/0 = 1 second. (The constan t term may be considered to be periodic 
with any arbitrary period, but is commonly considered to have a frequency of 
zero rad/s.) The gure below shows the evolution of the function that is formed 
as more of the individual terms are included into the summation. Notice that 
in all cases the period of the resulting gN (t) remains constan t and equal to the 
period of the fundamen tal component (1 second). In this particular case, it can 
be seen that the sum is tending toward a square wave as more terms are included. 
/G67 /G4E/G20 /G20 /G28 /G74 /G29 /G20 /G28 /G6E /G20 /G3D /G20 /G31 /G2E /G2E /G2E /G35 /G29 
/G30 /G2E /G30 /G30 /G2E /G35 /G31 /G2E /G30 /G31 /G2E /G35 /G32 /G2E /G30
/G54 /G69 /G6D /G65 /G20 /G28 /G73 /G65 /G63 /G29
/G30 /G2E /G30 /G30 /G2E /G35 /G31 /G2E /G30 /G31 /G2E /G35 /G32 /G2E /G30 
/G74 /G67 /G20 /G28 /G74 /G29 /G67 /G20 /G28 /G74 /G29/G35 
/G32 
/G67 /G20 /G28 /G74 /G29/G31 /G53 /G79 /G6E /G74 /G6E /G74 /G68 /G65 /G73 /G69 /G7A /G65 /G64 /G20 /G66 /G75 /G6E /G63 /G74 /G69 /G6F /G6E 
33</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G74 
/G54 /G74 
/G54 and the complete output Fourier series is
  
y(t)= yn(t)= H(jn0)Unejn0t . 
n= n= 
/G79 /G28 /G74 /G29 /G70 /G65 /G72 /G69 /G6F /G64 /G69 /G63 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G75 /G28 /G74 /G29 /G70 /G65 /G72 /G69 /G6F /G64 /G69 /G63 /G20 /G69 /G6E /G70 /G75 /G74 
/G75 /G28 /G74 /G29 
/G4C /G54 /G49 /G20 /G46 /G69 /G6C /G74 /G65 /G72 
/G48 /G28 /G6A /G57 /G29 /G79 
/G20 /G73/G28 /G74 /G29 /G20 
/G46 /G6F /G75 /G72 /G69 /G65 /G72 /G79 /G6E /G74 /G68 /G65 /G73 /G69 /G73 /G46 /G6F /G75 /G72 /G69 /G65 /G72 /G6E /G61 /G6C /G79 /G73 /G69 /G73 
/G20 /G20 /G20 /G20 /GA5
/G53
/G6E /G3D /G20/G20
/G2D /G20
/GA5 /G20 /G61 
/G55 /G6E /G20 /G20 /G65 /G20/G6A /G6E /G57 /G20/G6F /G20 /G74 /G6D /G75 /G6C /G74 /G69 /G70 /G6C /G69 /G63 /G61 /G74 /G69 /G6F /G6E /G53/G20 /G20 /G20 /G20 /GA5
/G20 /G20 /G55 /G6E /G20 /G20 /G48 /G28 /G6A /G6E /G57 /G6F /G20 /G29 /G20 /G65 /G6A/G20/G6E /G57 /G20/G6F /G20 /G74 
/G6E /G3D /G20 /G2D /GA5 
The system H(j) acts as a frequency-domain lter and modies the input wave
form u(t) by (1) selectiv ely amplifying/atten uating the spectral components, and (2) 
applying a frequency dependen t phase shift. 
See the class handout for examples. 
3 Aperiodic Input Functions -The Fourier Transform 
Many waveforms found in practice are not periodic and therefore cannot be analyzed directly 
using Fourier series metho ds. A large class of system excitation functions can be character
ized as aperiodic, or transien t, in nature. These functions are limited in time, they occur 
only once, and decay to zero as time becomes large. 
Consider a function x(t) of duration  that exists only within a dened interval t1 &lt;t 
t1 + , and is identically zero outside of this interval. We begin by making a simple assump
tion; namely that in observing the transien t phenomenon x(t) within any nite interval that 
encompasses it, we have observ ed a fraction of a single period of a periodic function with a 
very large period; much larger than the observ ation interval. Although we do not know what 
the duration of this hypothetical period is, it is assumed that x(t) will repeat itself at some 
time in the distan t future, but in the meantime it is assumed that this periodic function 
remains identically zero for the rest of its period outside the observ ation interval. 
The analysis thus conjectures a new function xp(t), known as a periodic extension of x(t), 
that repeats every T seconds (T&gt;), but at our discretion we can let T become very large. 
39</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/G2D /G32 /G54 /G2D /G54 /G30 /G54 /G32 /G54 /G33 /G54/G78 /G28 /G74 /G29
/G78 /G20 /G20 /G28 /G74 /G29/G70/G78 /G28 /G74 /G29
/G44/G74As observ ers of the function xp(t) we need not be concerned with its pseudo-p eriodicity 
because we will never be given the opportunit y to experience it outside the rst period, and 
furthermore we can assume that if xp(t) is the input to a linear system, T is so large that the 
system response decays to zero before the arrival of the second period. Therefore we assume 
that the response of the system to x(t) and xp(t) is identical within our chosen observ ation 
interval. The importan t dierence between the two functions is that xp(t) is periodic, and 
therefore has a Fourier series description. 
The developmen t of Fourier analysis metho ds for transien t phenomena is based on the 
limiting behavior of the Fourier series describing xp(t) as the period T approac hes innit y. 
The derivation proceeds in the following steps (see the class handout for details). 
(1) The waveform xp(t) is describ ed by a Fourier series with lines spaced at intervals 
2 0 = T 
and coecien ts 
t0+T1 
Xn = xp(t)ejn0tdt T t0 
(2) From the synthesis equation (with t0 = T/2) 
 
jn0t xp(t)=  
Xne 
n= 
 T/2  
0 jn0t =  
xp(t)ejn0tdt e 2 T/2n= 
The gure below shows how the line spectrum varies as the period T changes. Note that 
the shape of the envelope dening the spectrum is unaltered, but the the magnitude 
and the line spacing changes. 
310</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G31 /G31 
/G31 /G31 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discrete 
Fall Term 2008 
Lecture 31 
Reading: 
 Class handout: Frequency Domain Metho ds 
The Fourier Series and Transform 
In Lecture 2 we looked at the response of LTI continuous systems to sinusoidal inputs of the 
form 
u(t)= A sin(t + ) 
and saw that the system was characterized by the frequency response function H(j). 
In signal processing work, linear lters are usually specied by a desired frequency re
sponse function. (We will see that often the magnitude function |H(j)| alone is used to 
specify a lter). The following gure shows the four basic forms of ideal linear lters: 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C
/G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72
/G7C /G48 /G28 /G6A /G57 /G29 /G7C 
/G68 /G69 /G67 /G68 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G2D /G57 /G63/G30 /G57 /G63 /G57 
/G2D /G57 /G63/G30 /G57 /G63 /G57 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C /G7C /G48 /G28 /G6A /G57 /G29 /G7C /G62 /G61 /G6E /G64 /G2D /G73 /G74 /G6F /G70 /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G62 /G61 /G6E /G64 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G2D /G57 /G63 /G32 /G2D /G57 /G63 /G31 /G30 /G57 /G63 /G31 /G57 /G63 /G32 /G57 /G2D /G57 /G63 /G30 /G57 /G63 /G57 
In this lecture we generalize the response of LTI systems to non-sin usoidal inputs. We do 
this using Fourier metho ds. 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
31</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>The Fourier series represen tation of an arbitrary periodic waveform x(t) (subject to some 
general conditions describ ed later) is as an innite sum of harmonically related sinusoidal 
components, commonly written in the following three equivalent forms 
1 x(t)= a0 + (an cos(n0t)+ bn sin(n0t)) (1)2 n=1 
 1 = a0 + An sin(n0t+ n) (2)2 n=1 
+ 
= Xnejn0t . (3) 
n= 
In each represen tation knowledge of the fundamen tal frequency 0, and the sets of Fourier 
coecien ts {an} and {bn} (n =0 ...), or {An} and {n})(n =0 ...), or {Xn} (n = 
 ...) is sucien t to completely dene the waveform x(t). 
These represen tations are related by 
An = a2 
n + b2 
n 
n = tan1(an/bn). 
and 
Xn =1/2(an  jbn) 
Xn =1/2(an + jbn) 
See the class handout for details. 
The spectrum of a periodic waveform is the set of all of Fourier coecien ts in any of 
the represen tations, for example {An} and {n}, expressed as a function of frequency . Be
cause the harmonic components exist at discrete frequencies, periodic functions are said to 
exhibit line (or discrete) spectra, and it is common to express the spectrum graphically with 
frequency  as the independen t axis, and with the Fourier coecien ts plotted as lines at 
intervals of 0. The rst two forms of the Fourier series, based upon Eqs. (??) and (??), 
generate one-sided spectra because they are dened from positive values of nonly, whereas 
the complex form dened by Eq. (??) generates a two-sided spectrum because its summa
tion requires positive and negativ e values of n. The gure below shows a complex spectrum 
(Eq. ??). 
34</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Frequency-sampling filters
FIR filter design using optimization</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_17/</lecture_pdf_url>
      <lectureno>17</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/parenleftbig	 /parenrightbig 
/vextendsingle /vextendsingle /vextendsingle 
/parenleftbig /parenrightbig 
/G64 /G32
/G31 /G2B /G64 /G31
/G31 /G2D /G64 /G31
/G31
/G30
 /G77 
/summationdisplay 	The algorithm uses Chebyshevs alternation theorem to recognize the optimal solution. 
In general terms the theorem is stated: 
Dene the error E(x) as above, namely 
E(ej )= W(ej ) Hd(ej )  H(ej ) 
and the maxim um error as 
/bardblE(ej )/bardbl = argmaxx /vextendsingleE(ej ) 
A necessary and sucien t condition that H(ej ) is the unique Lth-order 
polynomial minimizing /bardblE(ej )/bardbl is that E(ej ) exhibit at least L +2 
extremal frequencies, or alternations, that is there must exist at least L+2 
values of , k  , k =[0,1,...,L + 1], such that 0 &lt;1 &lt;...&lt; L+1, 
and such that 
E(ej k )= E(ej k+1 )= /bardblE(ej )/bardbl . 
Note that the alternation theorem is simply a way of recognizing the optimal equi
ripple solution. For example, the following gure is from a Parks-McClellan low-pass 
lter with length M +1 = 17. 
/G70 /G61 /G73 /G73 /G2D /G62 /G61 /G6E /G64 /G73 /G74 /G6F /G70 /G2D /G62 /G61 /G6E /G64 /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E 
/G61 /G6C /G74 /G65 /G72 /G6E /G61 /G74 /G69 /G6F /G6E /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G69 /G65 /G73 /G7C /G48 /G28 /G65 /G20 /G20 /G6A /G20 /G29 /G7C	 /G77 
/G77 /G63 /G77 /G73	 /G70 
From above, H(ej ) is written as a polynomial of degree M/2, 
M/2 
H(ej )= ak /prime (cos())k 
k=0 
so that L = M/2 and the pass- and stop-bands must exhibit at least M/2+2 = 10 
points of alternation. These 10 points are shown in the gure. 
	The Parks-McClellan algoritm uses the Remez exchange optimization metho d. 
178</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Weight the stop-band ripple ten times more heavily than the pass-band. 
Solution: 
h=firpm(32,[0 0.2 0.4 0.7 0.85 1],[0 0 10 10 0 0],[10 1 10]) 
freqz(h,1) 
/G30 /G30 /G2E /G32 /G30 /G2E /G34 /G30 /G2E /G36 /G30 /G2E /G38 /G31/G2D /G31 /G35 /G30 /G30/G2D /G31 /G30 /G30 /G30/G2D /G35 /G30 /G30/G30/G35 /G30 /G30/G31 /G30 /G30 /G30
/G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G20 /G28 /G20 /G20 /G20 /G72 /G61 /G64 /G2F /G73 /G61 /G6D /G70 /G6C /G65 /G29/G50 /G68 /G61 /G73 /G65 /G20 /G28 /G64 /G65 /G67 /G72 /G65 /G65 /G73 /G290/G30 /G2E /G32 /G30 /G2E /G34 /G30 /G2E /G36 /G30 /G2E /G38 /G31/G2D /G31 /G30 /G30/G2D /G35 /G30/G30/G35 /G30
/G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G20 /G28 /G20 /G20 /G20 /G72 /G61 /G64 /G2F /G73 /G61 /G6D /G70 /G6C /G65 /G29/G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29
/G78 /G70/G78 /G70
1710</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>% 
N = 2*length(samples) -1; 
H_d = zeros(1,N); 
% 
% We want a causal filter, so the resulting impulse response will be shifted 
% (N-1)/2 to the right. 
% Move the samples into the upper and lower halves of H_d and add the 
% linear phase shift term to each sample. 
% 
Phi = pi*(N-1)/N; 
H_d(1) = samples(1); 
for j = 2:N/2-1 
Phase = exp(-i*(j-1)*Phi); 
H_d(j) = samples(j)*Phase; 
H_d(N+2-j) = samples(j)*conj(Phase); 
end 
% 
% Use the inverse DFT to define the impulse response. 
% 
h = real(ifft(H_d)); 
The following MATLAB commands were used to generate a lter with 22 frequency samples, 
generating a length 43 lter. 
h=firfs([1 1 1 1 0.4 0 0 0 0 0.8 2 2 2 2 0.8 0 0 0 0 0 0 0 ]); 
freqz(h,1) 
The lter has two pass-bands; a low-pass region with a gain of unity, and a band-pass region 
with a gain of two. Notice that the band-edges have been specied with transition samples, 
this is discussed further below. The above commands produced the following frequency 
response for the lter. 
0 Magnitude (dB)20 
40 
60 
80 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Normalized Frequency (  rad/sample) 
0 Phase (degrees)500 
1000 
1500 
2000 
0	 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Normalized Frequency (  rad/sample) 
174</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/summationdisplay 
/summationdisplay 
/parenleftbig	 /parenrightbig 
/bracketleftBig	 /bracketrightBig /bracketleftbig /bracketrightbig /vextendsingle /vextendsingle /vextendsingle	 /vextendsingle /vextendsingle /vextendsingle	 /vextendsingle /vextendsingle	 /vextendsingle 
/vextendsingle	 /vextendsingle /summationdisplay 
/summationdisplay /summationdisplay and the frequency response function can be written
M/2 
H(ej )= h0 +2 hk cos(k) 
k=1 
M/2 
= ak cos(k) 
k=0 
Let Hd(ej ) be the desired frequency response, and dene a weighted error 
E(ej )= W(ej ) Hd(ej )  H(ej ) 
where W(ej ) is a frequency dependen t weighting function, but by convention let W(ej ) 
be constan t across each of the critical bands, and zero in all transition bands. In particular 
for the low-pass design 
 
2/1 in the pass-band  
W(ej )= 1 in the stop-band  0 in the transition band. 
This states that the optimization will control the ratio of the pass-band to stop-band ripple, 
and that the transition will not contribute to the error criterion. 
Let  be a compact subset of the frequency band from 0 to  represen ting the pass- and 
stop-bands. The goal is to nd the set of lter parameters {ak}, k =0,...,M /2 + 1 that 
minimize the maximum value of the error E(ej ) over the pass- and stop-bands. 
  	  /vextendsingle	 M/2 /vextendsingle 
 	  min max /vextendsingleE(ej ) = min max W(ej ) Hd(ej )  ak cos(k) 
over ak over 	 over ak over  /vextendsingle	k=0 /vextendsingle 
where  is the disjoin t set of frequency bands that make up the pass- and stop-bands of 
the lter. 
The solution is found by an iterativ e optimization routine. We do not attempt to cover the 
details of the algorithm here, and merely note: 
	The metho d is based on reform ulating the problem as one in polynomial approximation, 
using Chebyshev polynomials, where 
cos(k)= Tk(cos()) 
where Tk(x) is a polynomial of degree k, (see the Class Handout on Chebyshev lter 
design). Consequen tly 
M/2 M/2 
H(ej )= ak cos(k)= ak /prime (cos())k 
k=0 k=0 
177</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/braceleftbigg 
/summationdisplay For convenience denote the complete sample set {Hk} as 
Hk = H(ejk ) k =1,...,N  1. 
For a lter with a real impulse response {hn} we require conjugate symmetry , that is 
 HNk = Hk 
and further, for a lter with a real, even impulse response we require {Hk} to be real and 
even, that is 
HNk = Hk. 
Within these constrain ts, it is sucien t to specify frequency samples for the upper half of 
the z-plane, that is for 
2 k =0,..., N
2 1 N odd k = k NN k =0,..., 2 N even. 
and use the symmetry constrain ts to determine the other samples. 
If we assume that H(ej) may be recovered from the complete sample set {Hk} by the 
cardinal sinc interpolation metho d, that is 
N1 
H(ej)= /summationdisplay 
Hk sin( 2k/N) 
 2k/N k=0 
then H(ej) is completely specied by its sample set, and the impulse response, of length 
N, may be found directly from the inverse DFT, 
{hn} = IDFT {Hk} 
where 
N11 j 2kn hn = HkeN n=0,...,N  1 N k=0 
As mentioned above, this metho d guaran tees that the resulting FIR lter, represen ted by 
{hn}, will meet the specication H(ej)= Hk at  = k =2k/N. Between the given 
sampling frequencies the response H(ej) will be describ ed by the cardinal interpolation. 
1.1 Linear-Phase Frequency-Sampling Filter 
The lter describ ed above is nite, with length N, but is non-causal. To create a causal lter 
with a linear phase characteristic we require an impulse response that is real and symmetric 
about its mid-p oint. This can be done by shifting the computed impulse response to the 
right by (N  1)/2 samples to form 
H/prime(z)= z (N1)/2H(z) 
but this involves a non-in teger shift for even N. Instead, it is more convenient to add the 
appropriate phase taper to the frequency domain samples Hk before taking the IDFT. The 
non-in teger delay then poses no problems: 
172</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 171 
Reading: 
 Class Handout: Frequency-Sampling Filters . 
 Proakis and Manolakis: Secs. 10.2.3, 10.2.4 
 Oppenheim, Schafer and Buck: 7.4 
 Cartinhour: Ch. 9 
Frequency-Sampling Filters 
In the frequency-sampling lters the parameters that characterize the the lter are the 
values of the desired frequency response H(ej) at a discrete set of equally spaced sampling 
frequencies. In particular, let 
2 k = k k =0,...,N  1 (1)N 
as shown below for the cases of N even, and N odd. Note that when N is odd there is 
no sample at the Nyquist frequency ,  = . The frequency-sampling metho d guaran tees 
that the resulting lter design will meet the given design specication at each of the sample 
frequencies. 
/G31 /G2D /G31 /G31 /G2D /G31 /G49 /G6D /G28 /G7A /G29 
/G52 /G65 /G28 /G7A /G29 /G77 /G20 /G77/G31 
/G31 
/G32 /G70 /G32 /G70 
/G31 /G30 /G31 /G31 /G7A /G2D /G70 /G6C /G61 /G6E /G65 
/G52 /G65 /G28 /G7A /G29 /G7A /G2D /G70 /G6C /G61 /G6E /G65/G49 /G6D /G28 /G7A /G29 
/G4E /G20 /G3D /G20 /G31 /G30 /G20 /G28 /G65 /G76 /G65 /G6E /G29 /G4E /G20 /G3D /G20 /G31 /G31 /G20 /G28 /G6F /G64 /G64 /G29 
/G28 /G61 /G29 /G28 /G62 /G29 
1cop yrigh t c/circlecopyrt D.Ro well 2008 
171</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G77 
/G73 /G74 /G6F /G70 /G73 /G74 /G6F /G70 /G70 /G61 /G73 /G73 
/G31 /G30 See Proakis and Manolakis Sec. 10.2.4 or Openheim, Schafer and Buck Sec. 7.4 for details. 
MATLAB Parks-McClellan Function: The Parks-McClellan algorithm is implemen ted 
in the MATLAB function 
b = firpm(M,F,A,W) 
where b is the array of lter coecien ts, M is the lter order (M+1 is the length of the lter), 
F is a vector of band edge frequencies in ascending order, A is a set of lter gains at the band 
edges, and W is an optional set of relativ e weights to be applied to each of the bands. 
For example, consider a band-pass lter with two pass-bands as shown below: 
/G77 /G77 /G77 /G77 /G77 /G77 /G77 /G77 /G70 /G30 /G32 /G31 /G33 /G34 /G35 /G36 /G37 /G38 /G73 /G74 /G6F /G70 /G73 /G74 /G6F /G70 /G73 /G74 /G6F /G70 /G70 /G61 /G73 /G73 
/G70 /G61 /G73 /G73 /G31 
/G30 /G2E /G37 
/G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G48 /G20 /G28 /G65 /G20 /G20 /G20 /G29/G6A /G77 
/G64 
There are ve distinct bands in this lter, separated by four transition regions. The lter 
would require the following specications: 
F=[ 0 1 2 3 4 5 6 7 8 1]
A=[ 001 10 00.70.700]
W=[ 10110 110]
where the errors in the stop-bands have been weighted 10 times more heavily than in the 
pass-bands. See the MATLAB help/do cumen tation for more details. 
Example 1 
Design a length 33 Parks-McClellan band-pass lter with the following band 
specications: 
/G48 /G64/G20 /G28 /G65 /G20/G6A/G20/G77 /G20 /G29 
/G30 /G30 /G2E /G32 /G70 /G30 /G2E /G34 /G70 /G30 /G2E /G37 /G70 /G30 /G2E /G38 /G35 /G70 /G70/G77 
/G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E 
179</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>1.3 The Eect of Band-Edge Transition Samples 
One of the advantages of the frequency-sampling lter is that the band-edges may be more 
precisely specied than the windo w metho d. For example, low-pass lters might be specied 
by 
h = firfs([1 1 1 1 1 0.4 0 0 0 0 0 0]); 
with one transition value of 0.4, or 
h = firfs([1 1 1 1 0.7 0.2 0 0 0 0 0 0]); 
with a pair of transition specications. The frequency-sampling lter characteristic will pass 
through these points, and they can have a signican t eect on the stop-band characteristics 
of the lter. 
The gure below shows the eect of varying the value of a single transition point in a 
lter of length N = 33. 
80 70 60 50 40 30 20 10 0 10 Magnitude (dB) t = 0.6 
t = 0.4 
t = 0.2 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Frequency f/FN 
The values shown are for t =0.6, 0.4 and 0.2. There is clearly a signican t impro vement in 
the stop-band attenuation for for the case t =0.4. 
Similarly the following gure compares the best of these single transition values (t =0.4) 
with a the response using two transition points (t1 =0.59, t2 =0.11). The lter using two 
transition points shows a signican t impro vement in the stop-band over the single point case, 
at the expense of the transition width. 
80 70 60 50 40 30 20 10 0 10 Magnitude (dB) t1 = .59, t2 = 0.11 
t = 0.4 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
Frequency f/fN 
175</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G64 /G32 /G31 /G2B /G64 /G31
/G31 /G2D /G64 /G31
/G31
/G30 /G77 /G70 2 Rabiner et al. (1970) did an extensiv e linear-programming optimization study to deter
mine the optim um value of band edge transition values, and tabulated the results for even 
and odd lters of dieren t lengths. The results show that for one transition point topt  0.4, 
and for two points topt  0.59, and 0.11. 
FIR Filter Design Using Optimization 
These metho ds allow much greater exibilit y in the lter specication. In general they seek 
the lter coecien ts that minimize the error (in some sense) between a desired frequency 
response Hd(ej ) and the achieved frequency response H(ej ). The most common optimiza
tion metho d is that due to Parks and McClellan (1972) and is widely available in software 
lter design packages (including MATLAB). 
The Parks-McClellan metho d allows 
	Multiple pass- and stop-bands. 
	Is an equi-ripple design in the pass-and stop-bands, but allows independen t weighting 
of the ripple in each band. 
	Allows specication of the band edges. 
/G70 /G61 /G73 /G73 /G2D /G62 /G61 /G6E /G64	 /G73 /G74 /G6F /G70 /G2D /G62 /G61 /G6E /G64 
/G65 /G71 /G75 /G69 /G2D /G72 /G69 /G70 /G70 /G6C /G65 
/G77 /G77/G63 /G73 /G65 /G71 /G75 /G69 /G2D /G72 /G69 /G70 /G70 /G6C /G65 /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E 
For the low-pass lter shown above the specication would be 
1  1 &lt;H (ej ) &lt; 1+ 1 in the pass-band 0 &lt; c 
2 &lt;H (ej ) &lt; 2 in the stop-band s &lt; . 
where the ripple amplitudes 1 and 2 need not be equal. Given these specications we need 
to determine, the length of the lter M+ 1 and the lter coecien ts {hn} that meet the 
specications in some optimal sense. 
If M+ 1 is odd, and we assume even symmetry 
hMk = hk k=0 ...M/2 
176</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>-------------------------------------------------------------------------/braceleftbigg 
/braceleftbigg  Apply a phase shift of 
k(N  1)k =  (2)N
to each of the samples in the upper half z-plane
H/prime jk k =0,...,(N  1)/2 (for n odd) = Hkek k =0,...,N /2 (for n even) 
 Force the lower half plane samples to be complex conjugates. 
H/prime H/prime k =1,...,(N  1)/2 (for n odd) = Nk k k =1,...,N /2  1 (for n even) 
 Then the linear-phase impulse response is 
{hn} = IDFT {H/prime }k
1.2 A Simple MATLAB Frequency-Sampling Filter 
The following is a MATLAB script of a tutorial frequency-sampling lter 
h = firfs(samples) 
that takes a vector samples of length N of the desired frequency response in the range 
0    (N  1)/N, and returns the linear-phase impulse response {hn} of length 2N 1. 
% 2.161 Classroom Example -firfs -A simple Frequency-Sampling Linear-Phase FIR
% Filter based on DFT interpolation.
% Usage : h = firfs(samples)
% where samples -is a row vector of M equi-spaced, real values
% of the freq. response magnitude.
% The samples are interpreted as being equally spaced around
% the top half of the unit circle at normalized (in terms of
% the Nyquist frequency f_N) frequencies from
% 0 to 2(M-1)/(2M-1) x f_N,
% or at frequencies 2k/(2N-1)xf_N for k = 0...M-1
% Note: Because the length is odd, the frequency response
% is not specified at f_N.
% h -is the output impulse response of length 2M-1 (odd).
% The filter h is real, and has linear phase, i.e. has symmetric
% coefficients obeying h(k) = h(2M+1-k), k = 1,2,...,M+1.
%------------------------------------------------------------------------
function h = firfs(samples)
%
% Find the length of the input array...
% The complete sample set on the unit circle will be of length (2N-1)
173</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>FFT convolution for FIR filters
The design of IIR filters</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_18/</lecture_pdf_url>
      <lectureno>18</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>The most common design procedure for digital IIR lters is to design a continuous lter in 
the s-plane, and then to transform that lter to the z-plane. Because the mapping between 
the continuous and discrete domains cannot be done exactly , the various design metho ds are 
at best approximations. 
2.1 Design By Appro ximation of Deriv atives: 
Perhaps the simplest metho d for low-order systems is to use backward-dierence approxi
mation to continuous domain derivatives. 
Example 1 
Suppose we wish to make a discrete-time lter based on a protot ype rst-order 
high-pass lter s Hp(s)= . s + a 
The dieren tial equation describing this lter is 
dy df + ay = dt dt 
The backward-dierence approximation to a derivative based on samples taken 
at intervals T apart is 
dx xn  xn1 dt T 
and substitution into the dieren tial equation gives 
yn  yn1 fn  fn1 + ayn = T T 
or 1 1 yn = yn1 + (fn  fn1)1+ aT 1+ aT 
The transfer function is 
1  z1 z  1 H(z)= = (1 + aT )1 + z1 (1 + aT )z +1 
This example indicates that the metho d uses the transformation 
1  z1 
s  T 
in Hp(s). For higher order terms 
1  z1 n 
n s  . T 
185</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Then
 
(nT )} = T ZT H(z)= T Z{hp 
L1 {Hp(s)} 
since hp(t)= L1 {Hp(s)}, and where ZT {} indicates the z-transform of a continuous func
tion with sampling interval T . 
Example 3 
Find the impulse-in varian t IIR lter from the protot ype continuous lter 
a Hp(s)= . s + a 
Solution: Using Laplace transform tables 
hp(t)= L1  a  
= a eat . s + a 
and from z-transform tables 
a 
a eat 
= . ZT 1  eaT z1 
The IIR lter is 
a eat 
= aT H(z)= T ZT 1  eaT z1 
and the dierence equation is 
yn =eaT yn1 + aTfn 
For the digital lter 
 
H(ejT )= H(z)| jT =  
hk ej kT 
z=e 
k=0 
and the DTFT of the samples of the continuous protot ypes impulse response is
 
 1   2k 
DTFT {hp(nT )} =  
hp(kT )ej kT =  
Hp j .  T T k=0
 k=
Then if hn = Thp(nT ), 
  2k 
H(ejT )=  
Hp j  . T k= 
The discrete-time frequency response is therefore a superposition of shifte d replicas of the 
frequency response of the protot ype. As a result, aliasing will be presen t in H(ej ) if the 
protot ypes frequency response |Hp(j)| = 0 for || /T . 
187</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G6B 
/G6E /G2D /G6B /G30 
/G30
 /G2D /G33 /G66 /G6B 
/G6E /G2D /G6B 
/G30 /G68 /G6E /G2D /G6B /G6E /G3D /G38
/G38 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 181 
Reading: 
 Proakis and Manolakis: 7.3.1, 7.3.2, 10.3 
 Oppenheim, Schafer, and Buck: 8.7.3, 7.1 
FFT Con volution for FIR Filters 
The response of an FIR lter with impulse response {hk} to an input {fk} is given by the 
line ar convolution  
yn = fkhnk. 
k= 
The length of the convolution of two nite sequences of lengths P and Q is N = P + Q  1. 
The following gure shows a sequence {fn} of length P = 6, and a sequence {hn} of length 
Q = 4 reversed and shifted so as to compute the extremes of the convolved sequence y0 and 
y8. 
/G50 /G20 /G3D /G20 /G36 
/G6E /G20 /G3D /G20 /G30 /G68 /G6E /G2D /G6B /G35 
/G51 /G20 /G3D /G20 /G34 
/G51 /G20 /G3D /G20 /G34 
The convolution property of the DFT suggests that the FFT might be used to convolve two 
equal length sequences 
yn = IDFT {DFT {fn} .DFT {hn}} . 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
181</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>However, DFT convolution is a circular convolution, involving periodic extensions of the two 
sequences. The following gure shows the circular convolution of length 6, on two sequences 
{fn} of length P = 6 and {hn} of length Q = 4. The periodic extensions cause overlap in 
the rst Q  1 samples, generating wrap-around errors in the DFT convolution. 
/G50 /G20 /G3D /G20 /G36 
/G51 /G20 /G3D /G20 /G34 /G6B 
/G6E /G2D /G6B /G30 /G35 
/G30 /G2D /G33 /G66 /G6B 
/G68 /G6E /G2D /G6B /G6E /G20 /G3D /G20 /G30 
/G6F /G76 /G65 /G72 /G6C /G61 /G70 /G20 /G6F /G66 /G20 /G51 /G2D /G31 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
DFT convolution of two sequences of length P and Q (P  Q) in DFTs of length P 
1. Produces an output sequence of length P , whereas linear convolution produces 
an output sequence of length P + Q  1. 
2. Introduces wrap-around error in the rst Q1 samples of the output sequence. 
The solution is to zero-pad both input sequences to a length N  P +Q1 
and then to use DFT convolution with the length N sequences. 
For example, if {fn} is of length P = 237, and {hn} is of length Q = 125, for error-free 
convolution we must perform the DFTs in length N  237 + 125  1 = 461. If the available 
FFT routine is radix-2, we should choose N=512. 
The use of the FFT for Filtering Long Data Sequences: The DFT convolution 
metho d provides an attractiv e alternativ e to direct convolution when the length of the data 
record is very large. The general metho d is to break the data into manageable sections, then 
use the FFT to to perform the convolution and then recom bine the output sections. Care 
must be taken, however, to avoid wrap-around errors. There are two basic metho ds used for 
convolving long data records. Let the impulse response {hn} have length Q. 
Overlap-Sa ve Metho d: (Also known as the overlap-disc ard,or sele ct-savings metho d.) 
In this metho d the data is divided into blocks of length P samples, but with successiv e 
blocks overlapping by Q  1. The DFT convolution is done on each block with length 
P , and wrap-around errors are allowed to contaminate the rst Q  1 samples of the 
output. These initial samples are then discarded, and only the error-free P  (Q  1) 
samples are saved in the output record. 
182</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G77
/G32 /G70 /G70 /G2D /G70 /G2D /G32 /G70/G30/G48 /G28 /G65 /G20 /G20 /G20 /G29/G6A /G77
/G61 /G6C /G69 /G61 /G73 /G69 /G6E /G67 /G20 /G64 /G69 /G73 /G74 /G6F /G72 /G74 /G69 /G6F /G6E
/G69 /G6E /G20 /G74 /G68 /G65 /G20 /G70 /G61 /G73 /G73 /G2D /G62 /G61 /G6E /G64 /G2E/G6F /G76 /G65 /G72 /G6C /G61 /G70 /G70 /G69 /G6E /G67 /G20 /G72 /G65 /G70 /G6C /G69 /G63 /G61 /G73For this reason the impulse-in variance metho d is not suitable for the design of high-pass or 
band-stop lters, which by denition require a protot ype Hp(s) with a non-zero frequency 
response at  = /T. 
Example 4 
Design an impulse-in varian t lter based on the second-order low-pass Butter-
worth protot ype used in Example 2, with T = 0.5 s. 
1 Hp(s)= s2 + 
2s +1 
Solution: From z-transform tables 
   eaT sin( T )z ZT L1 
(s + a)2 + 2 = z2 +2z eaT cos( T )z +e2aT 
and Hp(s) may be written in this form 
1 Hp(s)= (s +1/
2)2 + (1/
2)2 
so that a =1/
2, and  =1/
2. Substituting these values, 
0.1719z1 
H(z)= T ZT 
L1 {Hp(s)} 
=1  1.3175 z1 +0.4935 z2 
The frequency response of the impulse-in varian t, and backward-dierence (from 
Example 2) lters are compared with the protot ype below: 
188</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G30 /G31 /G32 /G33 /G34 /G35 /G36/G30/G30 /G2E /G31/G30 /G2E /G32/G30 /G2E /G33/G30 /G2E /G34/G30 /G2E /G35/G30 /G2E /G36/G30 /G2E /G37/G30 /G2E /G38/G30 /G2E /G39/G31
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G29/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G72 /G65 /G73 /G70 /G6F /G6E /G73 /G65 /G20 /G6D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65/G78 /G20 /G20 /G20 /G20 /G20 /G20 /G2D /G20 /G50 /G72 /G6F /G74 /G6F /G74 /G79 /G70 /G65 /G20 /G42 /G75 /G74 /G74 /G65 /G72 /G77 /G6F /G72 /G74 /G68 /G20 /G46 /G69 /G6C /G74 /G65 /G72
/G49 /G6D /G70 /G75 /G6C /G73 /G65 /G2D /G69 /G6E /G76 /G61 /G72 /G69 /G61 /G6E /G74 /G20 /G28 /G54 /G20 /G3D /G20 /G30 /G2E /G35 /G29
/G42 /G61 /G63 /G6B /G77 /G61 /G72 /G64 /G20 /G64 /G69 /G66 /G66 /G65 /G72 /G65 /G6E /G63 /G65 /G20 /G28 /G54 /G20 /G3D /G20 /G30 /G2E /G35 /G29The MATLAB function 
[bz, az] = impinvar(bs, as, Fs) 
will compute the numerator az, and denominator bz coecien ts for an impulse-in varian t 
lter from the continuous protot ype coecien ts bs and as, with a sampling frequency Fs. 
The lter in Example 4 can be designed in a single line:
 
[bz, az] = impinvar(1, [1 sqrt(2) 1], 2).
 
189</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G6E 
  2 wrap-around errors do not occur. In this case the output is identical to the linear 
convolution of the two blocks, with an initial rise of length Q  1 samples, and a 
trailing section also of length Q 1 samples. It is easy to show that if the trailing 
section of the mth output block is overlapp ed with the initial section of the (m+1)th 
block, the samples add together to generate the correct output values. 
/G50 /G50 /G50 
/G6E /G6E 
/G66 /G28 /G6E /G29 /G68 /G28 /G6E /G29 
/G51 
/G61 /G64 /G64 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G20 /G69 /G6E /G20 /G74 /G68 /G69 /G73 /G20 /G72 /G65 /G67 /G69 /G6F /G6E 
/G61 /G64 /G64 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G20 /G69 /G6E /G20 /G74 /G68 /G69 /G73 /G20 /G72 /G65 /G67 /G69 /G6F /G6E /G50 /G20 /G2B /G20 /G51 /G20 /G2D /G20 /G31 
/G50 /G20 /G2B /G20 /G51 /G20 /G2D /G20 /G31 
/G50 /G20 /G2B /G20 /G51 /G20 /G2D /G20 /G31 /G79 /G20 /G20 /G28 /G6E /G29/G31
/G79 /G20 /G20 /G28 /G6E /G29/G32
/G79 /G20 /G20 /G28 /G6E /G29/G33/G6E 
/G6E 
MATLABs fftfilt() function performs DFT convolution using the overlap-add metho d. 
The Design of IIR Filters 
An IIR lter is characterized by a recursiv e dierence equation 
N M 
yn = akynk + bkfnk 
k=1 k=0 
and a rational transfer function of the form 
b0z0 + b1z1 + ...+ bM zM 
H(z)= z0 + a1z1 + ...+ aN zN 
IIR lters have the advantage that they can give a better cut-o characteristic than a FIR 
lter of the same order, but have the disadv antage that the phase response cannot be well 
controlled. 
184</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G68 /G28 /G74 /G29 /G68 /G28 /G74 /G29 
/G74 
/G54 
/G6E /G74 /G64 /G28 /G74 /G29 Example 2 
Convert the continuous low-pass Butterw orth lter with c = 1 rad/s to a digital 
lter with a sampling time T =0 .5 s. The transfer function is 
1 Hp(s)=  . s2 +2s +1 
The discrete-time transfer function is 
1
H(z)=  1 2   1 
1z 1z+2 +1T T 
T 2 
=   
(1+ 2T + T 2)  (2+ 2T )z1 + z2 
and with T =0 .5s, 
0.25 H(z)= 1.9571  2.7071 z1 + z2 
The frequency response of this lter is plotted in Example 4. 
In general, the backward-dierence does not lead to satisfactory digital lters that mimic 
the protot ype lter characteristics. (See Proakis and Manolakis, Sec. 10.3.1). 
2.2 Design by Impulse-In variance: 
In the impulse-invariant design metho d the impulse response {hn} of the digital lter is 
taken to be proportional to the samples of the impulse response hp(t) of the continuous lter 
Hp(s) with a sampling interval of T seconds. The most common form is 
hn = Th p(nT ). 
/G64 /G28 /G74 /G29 /G50
/G20 /G20 /G20/G72
/G20/G6F
/G20 /G48/G74 /G6F
/G28/G74
/G73/G79
/G29/G70 /G65 
/G68 /G28 /G6E /G54 /G29 /G73 /G61 /G6D /G70 /G6C /G65 /G72 
186</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G6E With the overlap of the data blocks, in the mth block the samples are 
fm(n)= f(n+ m(P  (Q 1))) , n =0 ,...,P  1, 
and after DFT convolution in length P, giving ymP (n), the output is taken as 
ymP (n+(Q 1)),n =0 ,...,P  (Q 1) ym(n)= 0, otherwise. 
and the output is formed by concatenating all such records: 
 
y(n)= ym(n m(P  Q+ 1)). 
m=0 
/G50 /G50 /G50 
/G50 /G20 /G79 /G20 /G20 /G20 /G20 /G28 /G6E /G29/G30 /G50 /G6E 
/G66 /G28 /G6E /G29 /G68 /G28 /G6E /G29 
/G51 
/G6E 
/G51 /G2D /G31 
/G50 /G20 /G6E 
/G51 /G2D /G31 
/G50 /G20 /G6E 
/G51 /G2D /G31 /G6F /G76 /G65 /G72 /G6C /G61 /G70 /G70 /G69 /G6E /G67 /G20 /G69 /G6E /G70 /G75 /G74 /G20 /G73 /G65 /G63 /G74 /G69 /G6F /G6E /G73 
/G79 /G20 /G20 /G20 /G20 /G28 /G6E /G29/G31 /G50 
/G79 /G20 /G20 /G20 /G20 /G28 /G6E /G29/G32 /G50 /G64 /G69 /G73 /G63 /G61 /G72 /G64 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G20 /G69 /G6E /G20 /G74 /G68 /G69 /G73 /G20 /G72 /G65 /G67 /G69 /G6F /G6E /G64 /G69 /G73 /G63 /G61 /G72 /G64 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G20 /G69 /G6E /G20 /G74 /G68 /G69 /G73 /G20 /G72 /G65 /G67 /G69 /G6F /G6E 
/G64 /G69 /G73 /G63 /G61 /G72 /G64 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G20 /G69 /G6E /G20 /G74 /G68 /G69 /G73 /G20 /G72 /G65 /G67 /G69 /G6F /G6E 
Overlap-Add Metho d: In this metho d the data is divided into blocks of length P, but 
the DFT convolution is done in zero-padded blocks of length N = P + Q 1 so that 
183</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Introduction to signal processing
Properties of LTI continuous filters
The Dirac delta function
Properties of the delta function
Practical applications of the Dirac delta function</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_01/</lecture_pdf_url>
      <lectureno>1</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G6E /G6E 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 11 
Reading: 
 Class handout: The Dirac Delta and Unit-Step Functions 
Introduction to Signal Processing 
In this class we will primarily deal with processing time-based functions, but the metho ds 
will also be applicable to spatial functions, for example image processing. We will deal with 
(a) Signal processing of continuous waveforms f(t), using continuous LTI systems (lters). 
/G61 /G20 /G4C /G54 /G49 /G20 /G64	 /G79 /G6E /G61 /G6D /G69 /G63 /G61 /G6C /G20 /G73 /G79 /G73 /G74 /G65 /G6D 
/G69 /G6E /G70 /G75 /G74 
/G66 /G28 /G74 /G29 /G43
/G20 /G20 /G20/G6F
/G20 /G20/G6E
/G20 /G50/G74 /G69 /G6E
/G72 /G6F/G75
/G63/G6F
/G65/G75
/G73/G73
/G73/G20
/G6F/G53 
/G72/G69 /G67 /G6E /G61 /G6C /G6F /G75 /G74
/G79/G70 
/G28/G75
/G74 /G29/G74 
and 
(b)	Discrete-time (digital) signal processing of data sequences {fn} that might be samples of 
real continuous experimen tal data, such as recorded through an analog-digital converter 
(ADC), or implicitly discrete in nature. 
/G61 /G20 /G4C /G54 /G49 /G20 /G64	 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G61 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D 
/G69 /G6E /G70 /G75 /G74 /G20 /G73 /G65	 /G71 /G75 /G65 /G6E /G63 /G65 /G6F /G75 /G74 /G70 /G75 /G74 /G20 /G73 /G65 /G71 /G75 /G65 /G6E /G63 /G65
/G7B /G66 /G20 /G20 /G7D /G20 /G44 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G53 /G69 /G67 /G6E /G61 /G6C /G7B /G79 /G20 /G20 /G7D/G20 /G20 /G20 /G20 /G20 /G50 /G72 /G6F /G63 /G65 /G73 /G73 /G6F /G72 
Some typical applications that we look at will include 
(a)	Data analysis, for example estimation of spectral characteristics, delay estimation in 
echolocation systems, extraction of signal statistics. 
(b)	Signal enhancemen t. Suppose a waveform has been contaminated by additiv e noise, 
for example 60Hz interference from the ac supply in the laboratory . 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
11</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G30 /G54 /G54 /G54 /G54/G31 /G32 /G33 /G34
/G61 /G29 /G20 /G55 /G6E /G69 /G74 /G20 /G70 /G75 /G6C /G73 /G65 /G73 /G20 /G6F /G66 /G20 /G64 /G69 /G66 /G66 /G65 /G72 /G65 /G6E /G74 /G20 /G65 /G78 /G74 /G65 /G6E /G74 /G73 /G62 /G29 /G20 /G54 /G68 /G65 /G20 /G69 /G6D /G70 /G75 /G6C /G73 /G65 /G20 /G66 /G75 /G6E /G63 /G74 /G69 /G6F /G6E/G31 /G2F /G54/G31
/G31 /G2F /G54/G32
/G31 /G2F /G54/G33/G31 /G2F /G54/G34/G74/G64 /G28 /G74 /G29
/G30/G74
/G20/G64 /G20 /G20 /G28 /G74 /G29/G54The gure below shows a unit pulse function T (t), that is a brief rectangular pulse 
function of exten t T , dened to have a constan t amplitude 1/T over its exten t, so that the 
area T  1/T under the pulse is unity: 
T (t)= 
 
 
0 for t  0 
1/T 0 &lt;t  T 
for t&gt;T . 0
 
The Dirac delta function (also known as the impulse function) can be dened as the limiting 
form of the unit pulse T (t) as the duration T approac hes zero. As the exten t T of T (t) 
decreases, the amplitude of the pulse increases to maintain the requiremen t of unit area 
under the function, and 
(t) = lim T (t). 
T 0 
The impulse is therefore dened to exist only at time t = 0, and although its value is strictly 
undened at that time, it must tend toward innit y so as to maintain the property of unit 
area in the limit. 
4 Prop erties of the Delta Function 
4.0.1 Time Shift 
An impulse occurring at time t = a is (t  a). 
4.0.2 The strength of an impulse 
Because the amplitude of an impulse is innite, it does not make sense to describ e a scaled 
impulse by its amplitude. Instead, the strength of a scaled impulse K(t) is dened by its 
area K. 
4.0.3 The Sifting Prop erty of the Impulse 
When an impulse appears in a product within an integrand, it has the property of sifting 
out the value of the integrand at the time of its occurrence: 
  
f(t)(t  a)dt = f(a) 
 
15</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>This is easily seen by noting that (t  a) is zero except at t = a, and for its innitesimal 
duration f(t) may be considered a constan t and taken outside the integral, so that 
	   
f(t)(t  a)dt = f(a) (t  a)dt = f(a) 
 	  
from the unit area property. 
4.0.4 Scaling 
A helpful identity is the scaling property: 
    du 1 (t)dt = (u) =
 
  ||||
 
and so 1  (t)= (t). || 
4.0.5 Laplace Transform 
  
L{(t)} = 
0 (t)estdt =1 
by the sifting property. 
4.0.6 Fourier Transform 
  
(t)ejtdt =1 F{(t)} = 
 
by the sifting property. 
5 Practical Applications of the Dirac Delta Function 
 	 The most importan t application of t in linear system theory is directly related to its 
Laplace transform property, L{(t)} = 1. Consider a SISO LTI system with transfer 
function H(s), with input u(t) and output y(t), so that in the Laplace domain 
Y (s)= H(s)U(s). 
If the input is u(t)= (t), so that U(s) = 1, then Y (s)= H(s).1, and through the 
inverse Laplace transform 
y(t)= h(t)= L1 {H(s)} . 
where h(t) is dened as the systems impulse response. The impulse response com
pletely characterizes the system, in the sense that it allows computation of the transfer 
function (and hence the dieren tial equation). 
16</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G6E	 /G28 /G74 /G29
/G52	 /G4C 
/G56 /G69 /G20 /G6E /G6F 
/G2B /G49 /G73 
/G2D /G2B 
/G2D 
/G43 /G31 /G46 /G69 /G6C /G74 /G65 /G72 /G66 /G28 /G74 /G29 /G79 /G28 /G74 /G29 /G69 /G6E /G70 /G75 /G74 /G6F /G75 /G74 /G70 /G75 /G74 
/G2B /G2B 
/G61 /G64 /G64 /G69 /G74 /G69 /G76 /G65 /G20 /G6E /G6F /G69 /G73 /G65
The task is to design a lter that will minimize the eect of the interference while not 
destro ying information from the experimen t. 
(c)	Signal detection. Given a noisy experimen tal record, ask the question whether a known 
signal is presen t in the data. 
1.1 Processing metho ds 
(a) Passive Continuous Filters:	 We will investigate signal processing using passiv e con
tinuous LTI (Linear Time-In variant) dynamical systems. These will typically be elec
trical R-L-C systems, for example 
/G43 /G76 /G20 /G20 /G28 /G74 /G29/G6F /G20 /G28 /G74 /G29 /G43 /G76 /G56 /G20 /G20 /G28 /G74 /G29 /G69 /G6E	 /G43 /G31 /G32 /G20 /G20 /G28 /G74 /G29 
or even an electro mechanical system using rotational elemen ts:
/G4A /G4A 
/G4B /G4B 
/G42 /G31 
/G42 /G32 /G31 
/G31 /G32 
/G32 /G20 /G28 /G74 /G29 /G61 /G63 /G74 /G75 /G61 /G74 /G6F /G72 /G66 /G69 /G6C /G74 /G65 /G72 /G73 /G65 /G6E /G73 /G6F /G72 
/G76 /G6F /G20 /G28 /G74 /G29 
(b) Active Continuous Filters:	 Modern continuous lters are implemen ted using oper
ational ampliers. We will investigate simple op-amp designs. 
/G52 /G32 /G33 
/G69 /G6E /G6F /G75 /G74 /G56 /G56 /G2B 
/G2B /G2D 
/G2B /G52 
/G43 
/G32 /G31 
/G52 
12</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G66
 /G28 /G74 /G29
 /G79 /G28 /G74 /G29
/G74 /G66 
/G6E 
/G74 /G30 /G79 /G28 /G74 /G29 (c) Digital Signal Processors: Here a digital system (a computer or DSP chip) is used 
to process a data stream. 
/G44 /G69 /G67 /G69 /G74 /G61 /G6C /G20 /G53 /G69 /G67 /G6E /G61 /G6C 
/G20 /G20 /G20 /G50 /G72 /G6F /G63 /G65 /G73 /G73 /G6F /G72 /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G72 /G65 /G63 /G6F /G6E /G73 /G74 /G72 /G75 /G63 /G74 /G6F /G72 
/G50 /G72 /G6F /G63 /G65 /G73 /G73 /G65 /G73 /G20 /G64 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73
/G6F /G66 /G20 /G74 /G68 /G65 /G20 /G69 /G6E /G70 /G75 /G74 /G20 /G66 /G20 /G20 /G20 /G3D /G20 /G66 /G28 /G6E /G54 /G29 /G20 /G74 /G6F
/G70 /G72 /G6F /G64 /G75 /G63 /G65 /G20 /G61 /G20 /G64 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G6F /G75 /G74 /G70 /G75 /G74
/G73 /G65 /G71 /G75 /G65 /G6E /G63 /G65 /G20 /G79 /G20 /G20 /G2E/G6E /G6E 
(i) The sampler (A/D converter) records the signal value at discrete times to produce
a sequence of samples {fn
/G66 /G28 /G74 /G29 /G20 
/G74
/G30 /G54 /G32 /G54 /G33 /G54 /G34 /G54 /G35 /G54 /G36 /G54 /G37 /G54 /G38 /G54 } where fn = f(nT )(T is the sampling interval. 
(ii) At each interval, the output sample yn is computed, based on the history of the 
input and output, for example
1
yn =(fn + fn1 + fn2)3
3-point moving average lter, and
yn =0.8yn1 +0.2fn 
is a simple recursiv e rst-order low-pass digital lter. Notice that they are algo
rithms. 
(iii) The reconstructor takes each output sample and creates a continuous waveform. 
In real-time signal processing the system operates in an innite loop: 
/G66 /G28 /G74 /G29 /G20 
/G73 /G74 /G61 /G69 /G72 /G63 /G61 /G73 /G65 /G20 /G6F /G72 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G20 /G66 /G28 /G74 /G29 
/G63 /G6F /G6D /G70 /G75 /G74 /G65 /G20 /G79 /G6E 
/G30 /G74 /G69 /G6D /G65 /G7A /G65 /G72 /G6F /G2D /G6F /G72 /G64 /G65
/G77 /G61 /G76 /G65 /G66 /G6F /G72 /G6D 
/G72 /G65 /G63 /G6F /G6E /G73 /G74 /G72 /G75 /G63 /G74 /G20 /G79 /G28 /G74 /G29 /G72 
13</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>2 
3 Properties of LTI Continuous Filters 
/G6F /G75 /G74 /G70 /G75 /G74 
/G75 /G28 /G74 /G29 /G4C /G54 /G49 /G20 /G43 /G6F /G6E /G74 /G69 /G6E /G75 /G6F /G75 /G73 /G20 /G46 /G69 /G6C /G74 /G65 /G72 /G79 /G28 /G74 /G29 /G69 /G6E /G70 /G75 /G74 
A LTI lter is dynamical SISO (single-input single-output) linear system, governed by an 
ODE with constan t coecien ts. From elemen tary linear system theory , some fundamen tal 
properties of LTI systems are: 
(a) The Principle of Superposition	 This is the fundamen tal property of linear systems. 
For a system at rest at time t = 0, if the response to input f1(t)is y1(t), and the response 
to f2(t)is y2(t), then the response to a linear combination of f1(t) and f2(t), that is 
f3(t)= af1(t)+ bf2(t)(a and b constan ts) is 
y3(t)= ay1(t)+ by2(t). 
(b) The Dieren tiation Property	If the response to input f(t)is y(t), then the re
sponse to the derivative of f(t), that is f1(t)= df/dt is 
dy y1(t)= . dt 
(c) The Integration Property If the response to input f(t)is y(t), then the response 
tto the integral of f(t), that is f1(t)=  f(t)dt is 
t 
y1(t)= y(t)dt. 
 
(d) Causalit y	A causal system is non-an ticipatory , that is it does not respond to an input 
before it occurs. Physical LTI systems are causal. 
The Dirac Delta Function 
The Dirac delta function is a non-ph ysical, singularit y function with the following denition 
0	 for t =0/negationslash(t)= undened at t =0 
but with the requiremen t that   
(t)dt =1, 
 
that is, the function has unit area. Despite its name, the delta function is not truly a 
function. Rigorous treatmen t of the Dirac delta requires measur e theory or the theory of 
distributions . 
14</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>The impulse response h(t) is used in the convolution integral. 
 	 In signal processing the delta function is used to create a Dirac comb (also known as 
an impulse train, or Shah function): 
 
T (t)=  
(t  nT ) 
n= 
is used in sampling theory . A continuous waveform f(t) is sample d by multiplication 
by the Dirac comb 
 
f(t)= f(t) T (t)=  
f(t  nT )(t  nT ), 
n= 
 
where f(t) is the sampled waveform, producing a train of weighted impulses.
 
17</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Operational-amplifier based state-variable filters
Introduction to discrete-time signal processing</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_09/</lecture_pdf_url>
      <lectureno>9</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/G74 /G66 
/G6E 
/G74 /G30 /G79 /G28 /G74 /G29 /G6F /G72 /G20 
/G72 
 
 
/G74 
/G74 
/G74 /G66 /G28 /G74 /G29 /G20 
/G73 /G61 /G6D /G70 /G6C /G65 /G20 /G66 /G28 /G74 /G29 
/G30 /G74 /G69 /G6D /G65 /G73 /G74 /G61 /G69 /G72 /G63 /G61 /G73 /G65 /G20 
/G7A /G65 /G72 /G6F /G2D /G6F /G72 /G64 /G65 
/G77 /G61 /G76 /G65 /G66 /G6F /G72 /G6D /G63 /G6F /G6D /G70 /G75 /G74 /G65 /G20 /G79 /G6E 
/G72 /G65 /G63 /G6F /G6E /G73 /G74 /G72 /G75 /G63 /G74 /G20 /G79 /G28 /G74 /G29 
2.1 Sampling 
The mathematical operation of sampling (not to be confused with the operation of an analog-
digital converter) is most commonly describ ed as a multiplic ative operation, in which f(t)is 
multiplied by a Dirac comb sampling function s(t;T ), consisting of a set of delayed Dirac 
delta functions:  
s(t;T )= (t  nT ). 
n= 
We denote the sampled waveform f(t)as 
 
f(t)= s(t;T )f(t)= f(t)(t  nT ) 
n= 
/G66 /G28 /G74 /G29 
/G73 /G28 /G74 /G3B /G44 /G54 /G29 
/G66 /G20 /G20 /G28 /G74 /G29 /G20 /G3D /G20 /G66 /G28 /G78 /G29 /G73 /G28 /G74 /G3B /G44 /G54 /G29 /G2A 
910</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G56 /G69 /G6E /G52 /G33 
    Then dvout 1 =  vindt RinC 
or 
1 t 
vout =  vindt + vout(0)RinC 0 
As above, the integrator may be extended to a summing conguration by simply adding 
extra input resistors: 
1 t n vi vout =  dt + vout(0)C Ri 0 i=1 
and if all input resistors have the same value R 
1  t n 
vout =  vi dt + vout(0)RC 0 i=1 
1.2 A Three Op-Amp Second-Order State Variable Filter 
A conguration using three op-amps to implemen t low-pass, high-pass, and bandbass lters 
directly is shown below: 
/G68 /G69 /G67 /G68 /G2D /G70 /G61 /G73 /G73 /G20 /G6F /G75 /G74 /G70 /G75 /G74 
/G2B /G2D /G43 
/G2B /G2D /G43/G31 
/G32 
/G52 /G52/G31 
/G32 
/G41 /G41/G31 /G76 /G31 
/G32 /G2B /G2D 
/G41 /G33 /G52 
/G52 
/G52 /G34 
/G36 /G35 
/G76 /G76 /G33 /G32 /G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G6F /G75 /G74 /G70 /G75 /G74 
/G62 /G61 /G6E /G64 /G2D /G70 /G61 /G73 /G73 /G20 /G6F /G75 /G74 /G70 /G75 /G74 
Ampliers A1 and A2 are integrators with transfer functions 
1 1 1 1 H1(s)=  and H2(s)=  . R1C1 s R2C2 s 
Let 1 = R1C1 and 2 = R2C2. Because of the gain factors in the integrators and the sign 
inversions we have 
dv2 d2v2 v1(t)= 2 and v3(t)= 12 . dt dt2 
Amplier A3 is the summer. However, because of the sign inversions in the op-amp circuits 
we cannot use the elemen tary summer conguration describ ed above. Applying Kirchos 
Curren t Law at the non-in verting and inverting inputs of A3 gives 
Vin  v+ v1  v+ v3  v v2  v + =0 and + =0. R5 R6 R4 R1 
94</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G76 /G76
/G6F /G75 /G74 /G69 /G6E /G52 /G69 /G6E
/G69 /G69 /G6E /G69 /G66 The voltage gain is therefore dened by the ratio of the two resistors. The term inverting 
amplier comes about because of the sign change. 
The Inverting Summer: The inverting amplier may be extended to include multiple 
inputs: 
/G73 /G75 /G6D /G6D /G69 /G6E /G67 /G20 /G6A /G75 /G6E /G63 /G74 /G69 /G6F /G6E 
/G2B /G2D 
/G76 /G76 
/G6F /G75 /G74 /G52 /G66 
/G69 /G66 /G28 /G76 /G69 /G72 /G74 /G75 /G61 /G6C /G20 /G67 /G6F /G75 /G6E /G64 /G29 
/G52 
/G52 /G31 
/G32 /G31 
/G32/G76 /G69 
/G69 /G31 
/G32 
As before we assume that the inverting input is at a virtual ground (v  0) and apply 
Kirchos curren t law at the summing junction 
v1 v2 Vouti1 + i2 + if = + + =0 R1 R2 Rf 
or 
Rf Rf vout =  v1 + v2R1 R2 
which is a weighted sum of the inputs. 
The summer may be extended to include several inputs by simply adding additional input 
resistors Ri, in which case 
n  Rf vout =  viRii=1 
The Integrator: If the feedbac k resistor in the inverting amplier is replaced by a capac
itor C the amplier becomes an integrator. 
/G73 /G75 /G6D /G6D /G69 /G6E /G67 /G20 /G6A /G75 /G6E /G63 /G74 /G69 /G6F /G6E /G43 
/G28 /G76 /G69 /G72 /G74 /G75 /G61 /G6C /G20 /G67 /G6F /G75 /G6E /G64 /G29 
/G2B /G2D 
At the summing junction we apply Kirchos curren t law as before but the feedbac k curren t 
is now dened by the elemen tal relationship for the capacitor: 
vin dvoutiin + if = + C =0 Rin dt 
93</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Note that f(t) is a set of delayed and weighted delta functions, and that the waveform must 
be interpreted in the distribution sense by the strength (or area) of each component impulse. 
The implied process to produce the discrete sample sequence {fn} is by integration across 
each impulse, that is 
 nT+  nT+  
fn = f(t)dt = f(t)(t  nT)dt 
nT nT n= 
or 
fn = f(nT) 
by the sifting property of (t). 
2.2 The Spectrum of the Sampled Waveform f(t): 
Notice that sampling comb function s(t;T) is periodic and is therefore describ ed by a 
Fourier series: 1 jn0t s(t;T)= eT n= 
where all the Fourier coecien ts are equal to (1/T), and where 0 =2/T is the fun
damen tal angular frequency . Using this form, the spectrum of the sampled waveform f(t) 
may be written 
     
jt dt F(j) = f(t)ejt dt =1 f(t)ejn0t e 
 T n=  
1 = F (j (  n0))T n= 
   1 2n = Fj   T T n= 
The Fourier transform of a sampled function f(t) is periodic in the frequency domain with 
period 0 =2/T, and is a superposition of an innite number of shifted replicas of the 
Fourier transform, F(j), of the original function scaled by a factor of 1/T. 
/G46 /G28 /G6A /G57 /G29 /G46 /G20 /G20 /G28 /G6A /G57 /G29 
/G31 /G2A 
/G31 /G2F /G44 /G54 /G73 /G61 /G6D /G70 /G6C /G69 /G6E /G67 /G20 /G61 /G74 /G20 /G44 /G54 
/G2D /G70 /G2F /G44 /G54 /G30 /G70 /G2F /G44 /G54 /G57 /G2D /G34 /G70 /G2F /G44 /G54 /G2D /G32 /G70 /G2F /G44 /G54 /G2D /G70 /G2F /G44 /G54 /G30 /G70 /G2F /G44 /G54 /G32 /G70 /G2F /G44 /G54 /G34 /G70 /G2F /G44 /G54 /G57 
/G28 /G61 /G29 /G28 /G62 /G29 
911</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Using the innite gain approximation for the op-amp, we set v = v+ and 
R3 R5 R4 R6 v3  v1 + v2 = Vin,R3 + R4 R5 + R6 R3 + R4 R5 + R6 
and substituting for v1 and v3 we generate a dieren tial equation in v2 
d2v2  1+ R4/R3  dv2  R4 1  1+ R4/R3  
+ + v2 = Vindt2 1(1 + R6/R5) dt R3 12 12 (1 + R5/R6) 
which corresp onds to a low-pass transfer function with 
Klpa0H(s)= s2 + a1s + a0 
where 
a0 =  R4 
R3  1 
12   1+ R4/R3 1 a1 = 1+ R6/R5 1 
1+ R3/R4Klp = 1+ R5/R6 
A Band-P ass Filter: Selection of the output as the output of integrator A1 generates 
the transfer function Kbpa1s Hbp(s)= 1sHlp(s)= s2 + a1s + a0 
where R6Kbp = R5 
A High-P ass Filter: Selection of the output as the output of the summer A3 generates 
the transfer function 
Hhp(s)= 12s 2Hlp(s)= Khps2 
s2 + a1s + a0 
where 
1+ R4/R3Khp = 1+ R5/R6 
A Band-Stop Filter: The band-stop conguration may be implemen ted with an addi
tional summer to add the outputs of ampliers A2 and A (with appropriate weights). 
1.3 A Simplied Two Op-amp Based State-v ariable Filter: 
If the required lter does not require a high-pass action (that is, access to the output of 
the summer A1 above) the summing operation may be included at the input of the rst 
integrator, leading to a simplied circuit using only two op-amps shown below: 
95</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G56 
/G56 /G6F /G75 /G74 /G69 /G6E /G52 /G32 /G52 /G31 
/G56 /G56 /G6F /G75 /G74 /G69 /G6E /G52 /G31 
/G43 /G52 /G32 /G52 /G33 
  1.4 First-Order Filter Sections: 
Single pole low-pass lter sections with a transfer function of the form
K0
H(s)= s +0 
may be implemen ted in either an inverting or non-in verting conguration as shown in Fig. 
11. 
/G2B /G2D /G43 
/G2B /G2D 
/G28 /G61 /G29 /G28 /G62 /G29 
The inverting conguration (a) has transfer function 
Vout(s) Zf R1 1/R1C =  =  Vin(s) Zin R2 s +1/R1C 
where 0 =1/R1C and K = R1/R2. 
The non-in verting conguration (b) is a rst-order R-C lag circuit buered by a non-
inverting (high input impedance) amplier (see the class handout) with a gain K =1+ 
R3/R2. Its transfer function is 
  Vout(s) = 1+ R3 1/R1C . Vin(s) R2 s +1/R1C 
97</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G66 /G28 /G74 /G29 /G79 /G28 /G74 /G29 2 Introduction to Discrete-Time Signal Pro cessing 
Consider a continuous function f(t) that is limited in extent, T1  t&lt;T 2. In order to 
process this function in the computer it must be sample d and represen ted by a nite set of 
numbers. The most common sampling scheme is to use a xed sampling interval T and to 
form a sequence of length N: {fn} (n=0 ...N  1), where 
fn = f(T1 + nT). 
In subsequen t processing the function f(t) is represen ted by the nite sequence {fn} and the 
sampling interval T. 
In practice, sampling occurs in the time domain by the use of an analog-digital (A/D) 
converter. 
/G44 /G69 /G67 /G69 /G74 /G61 /G6C /G20 /G53 /G69 /G67 /G6E /G61 /G6C 
/G20 /G20 /G20 /G50 /G72 /G6F /G63 /G65 /G73 /G73 /G6F /G72 /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G72 /G65 /G63 /G6F /G6E /G73 /G74 /G72 /G75 /G63 /G74 /G6F /G72 
/G50 /G72 /G6F /G63 /G65 /G73 /G73 /G65 /G73 /G20 /G64 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G6F /G66 /G20 /G74 /G68 /G65 /G20 /G69 /G6E /G70 /G75 /G74 /G20 /G66 /G20 /G20 /G20 /G3D /G20 /G66 /G28 /G6E /G54 /G29 /G20 /G74 /G6F 
/G70 /G72 /G6F /G64 /G75 /G63 /G65 /G20 /G61 /G20 /G64 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G6F /G75 /G74 /G70 /G75 /G74 
/G73 /G65 /G71 /G75 /G65 /G6E /G63 /G65 /G20 /G79 /G20 /G20 /G2E/G6E /G6E 
(i) The sampler (A/D converter) records the signal value at discrete times nT to produce 
a sequence of samples {fn} where fn = f(nT)(T is the sampling interval . 
/G66 /G28 /G74 /G29 /G20 
/G74 
/G30 /G54 /G32 /G54 /G33 /G54 /G34 /G54 /G35 /G54 /G36 /G54 /G37 /G54 /G38 /G54 
(ii)	At each interval, the output sample yn is computed, based on the history of the input 
and output, for example 
1 yn =(fn + fn1 + fn2)3 
3-point moving average lter, and 
yn =0.8yn1 +0.2fn 
is a simple recursiv e rst-order low-pass digital lter. Notice that they are algorithms. 
(iii) The reconstructor takes each output sample and creates a continuous waveform. 
In real-time signal processing the system operates in an innite loop: 
99</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G56 Classro om Demonstration
Example 2 in the class handout Op-Amp Implemen tation of Analog Filters describ es a 
state-v ariable design for a 5th-order Chebyshev Type I low-pass lter with c = 1000 rad/s 
and 1dB ripple in the passband. 
The transfer function is 
122828246505000 H(s)= (s2 + 468.4s + 429300)( s2 + 178.9s + 988300)( s + 289.5) 
429300 988300 289.5 =   s2 + 468.4s + 429300 s2 + 178.9s + 988300 s + 289.5 
which is implemen ted in the handout as a pair of second-order two-op-amp sections followed 
by a rst-order block: 
/G30 /G2E /G34 /G37 /G20 
/G2B /G2D 
/G2B /G2D /G69 /G6E 
/G2B /G2D 
/G2B /G2D /G30 /G2E /G34 /G37 
/G2B /G2D 
/G6F /G75 /G74 /G56 /G30 /G2E /G34 /G37 
/G30 /G2E /G34 /G37 /G30 /G2E /G34 /G37 
/G31 /G35 /G30 /G30 /G20 /G34 /G35 /G30 /G30 /G20 
/G37 /G33 /G34 /G39 /G20 /G37 /G37 /G30 /G20 
/G37 /G37 /G30 /G20 /G31 /G31 /G38 /G39 /G33 /G20 /G34 /G36 /G34 /G32 /G20 
/G34 /G36 /G34 /G32 /G20 /G34 /G35 /G34 /G32 /G20 
This lter was constructed on a bread-b oard using 741 op-amps, and was demonstrated 
to the class, driven by a sinusoidal function generator and with an oscilloscop e to displa y 
the output. The demonstration included showing (1) the approximately 10% ripple in the 
passband, and (2) the rapid attenuation of inputs with frequency above 157 Hz (1000 rad/s). 
98</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G43 /G31 
/G43 /G69 /G66 /G31 
/G52 /G31 
/G52 /G33 
/G56 /G6F /G75 /G74 /G56 /G69 /G6E /G56 /G31 
/G41 /G31 /G69 /G31 /G69 /G33 /G2B /G2D 
/G2B /G2D /G43 /G32 
/G52 /G52 
/G52 /G31 
/G32 
/G33 /G56 /G6F /G75 /G74 /G56 /G69 /G6E /G56 /G31 
/G41 /G41/G31 
/G32 
Consider the input stage: 
/G28 /G61 /G29 /G76 /G61 
/G2B /G2D 
With the innite gain assumption for the op-amps, that is V = V+ , and with the assumption 
that no curren t ows in either input, we can apply Kirchos Curren t Law (KCL) at the 
node designated (a) above: 
1 1 i1 + if  i3 =(Vin  va)+ sC1(v1  va)  va =0 R1 R3 
Assuming va = Vout, and realizing that the second stage is a classical op-amp integrator with 
transfer function 
Vout(s) 1 =  v1(s) R2C2s 
1 1 (Vin  Vout)+ sC1(R2C2sVout  Vout)  Vout =0 R1 R3 
which may be rearranged to give the second-order transfer function 
Vout(s) 1/12 = Vin(s) s2 +(1/2)s +(1+ R1/R3)/12 
which is of the form Klpa0Hlp(s)= s2 + a1s + a0 
where 
1 a0 =(1+ R1/R3) 12 
1 a1 = 2 
1 Klp = 1+ R1/R3 
96</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G55 /G28 /G73 /G29 
/G76 /G6F /G75 /G74 /G76 /G2B 
/G76 /G2D 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discrete 
Fall Term 2008 
Lecture 91 
Reading: 
 Class Handout: Introduction to the Operational Amplier 
 Class Handout: Op-amp Implementation of Analog Filters 
Operational-Amplier Based State-V ariable Filters 
We saw in Lecture 8 that second-order lters may be implemen ted using the block diagram 
structure 
/G73/G31 
/G73/G31 /G58 /G28 /G73 /G29 /G73 /G58 /G28 /G73 /G29 /G73 /G20 /G20 /G58 /G28 /G73 /G29/G32 
/G61 /G2D /G61 
/G31 /G30 /G2B 
/G2D 
/G61 /G30 /G30 /G2B 
/G2B 
/G61 /G31 /G61 /G59 /G34 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G62 /G61 /G6E /G64 /G2D /G73 /G74 /G6F /G70 /G29 
/G59 /G33 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G68 /G69 /G67 /G68 /G2D /G70 /G61 /G73 /G73 /G29 
/G59 /G32 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G62 /G61 /G6E /G64 /G2D /G70 /G61 /G73 /G73 /G29 
/G59 /G31 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G6C /G6F /G77 /G20 /G2D /G70 /G61 /G73 /G73 /G29 
and that a high-order lter may be implemen ted by cascading second-order blocks, and 
possibly a rst-order block (if the lter order is odd). 
We now look into a metho d for implemen ting this lter structure using operational am
pliers. 
1.1 The Operational Amplier 
What is an operational amplier? It is simply a very high gain electronic amplier, with a 
pair of dieren tial inputs. Its functionalit y comes about through the use of feedback around 
the amplier, as we show below. 
/G47 /G61 /G69 /G6E /G3A /G20 /G41 
/G2B 
/G2D 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
91</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G76 /G76 
/G6F /G75 /G74 /G69 /G6E /G52 /G69 /G6E 
/G69 /G69 /G6E /G69 /G66 The op-amp has the following characteristics: 
	It is basically a three terminal amplier, with two inputs and an output. It is a 
dierential amplier, that is the output is proportional to the dierence in the voltages 
applied to the two inputs, with very high gain A, 
vout = A(v+  v) 
where A is typically 104 105, and the two inputs are known as the non-inverting (v+) 
and inverting (v) inputs respectively. In the ideal op-amp we assume that the gain A 
is innite. 
	In an ideal op-amp no curren t ows into either input, that is they are voltage-con trolled 
and have innite input resistance. In a practical op-amp the input curren t is in the 
order of pico-amps (1012) amp, or less. 
	The output acts as a voltage source, that is it can be modeled as a Thevenin source 
with a very low source resistance. 
The following are some common op-amp circuit congurations that are applicable to the 
active lter design metho d describ ed here. (See the class handout for other common cong
urations). 
The Inverting Amplier: 
/G73 /G75	 /G6D /G6D /G69 /G6E /G67 /G20 /G6A /G75 /G6E /G63 /G74 /G69 /G6F /G6E /G52 /G66 
/G28 /G76 /G69 /G72 /G74 /G75 /G61 /G6C /G20 /G67 /G6F /G75 /G6E /G64 /G29 
/G2B /G2D	
In the conguration shown above we note 
	Because the gain A is very large, the voltage at the node designated summing junc
tion is very small, and we approximate it as v = 0  the so-called virtual ground 
assumption. 
 We assume that the curren t i into the inverting input is zero. 
Applying Kirchos Curren t law at the summing junction we have 
vin voi1 + if = + =0 R1 Rf 
from which 
Rf vout =  vinRin 
92</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>FIR low-pass filter design by windowing
Window FIR filters or other filter types
The zeros of a linear phase FIR filter</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_16/</lecture_pdf_url>
      <lectureno>16</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>The gure below shows a quad of zeros associated with a complex zero z1, a conjugate pair 
of zeros on the unit circle associated with z2, a recipro cal pair associated with the real zero 
z3, and a single zero z4 at z = 1. 
/G4F 
/G4F /G31 /G6A /G31 
/G2D /G31 
/G2D /G6A /G31 /G7A 
/G31 /G2F /G7A /G31 
/G31 /GC2 /G7B /G7A /G7D /GC1 /G7B /G7A /G7D 
/G4F 
/G4F /G4F 
/G4F /G7A /G31 /G31 /G2F /G7A /G31 
/G7A /G32 
/G7A /G32 /G4F /G4F /G7A /G33 /G7A /G33 
/G4F /G7A /G34 
In addition 
M M M /summationdisplay 1 /summationdisplay 1 /summationdisplay
H(z)= hkz k = hkz Mk = hMnz n
zM zM 
k=0 k=0 n=0 
where n = M  k. But with even symmetry h(M  n)= h(n), and since (1)k =(1)k , 
at z = 1 
H(1) = (1)M H(1). 
If M is odd, H(1) = H(1), thus forcing H(1) = 0, therefore H(z) has a zero at 
z = 1 if the lter length M + 1 is even. 
Any lter with a nite response magnitude at  =  cannot have a zero at z = 1. 
For an even-symmetric FIR lter this requires that the lter length M + 1 be odd 
(or equivalently that the number of zeros be even). Linear phase FIR high-pass and 
band-stop lters must have an odd lter length. 
Example 2 
Draw the pole-zero plot for a length 40 low-pass linear-phase FIR lter with 
c =0.4 using a Kaiser windo w with  =3. 
Solution: The plot below was generated with the MATLAB commands: 
&gt;&gt; b=fir1(39,0.4,kaiser(40,3)); 
&gt;&gt; zplane(b,1) 
1611</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G2D /G38 /G30 /G2D /G36 /G30 /G2D /G34 /G30 /G2D /G32 /G30
/G30
/G31 /G30
/G6A /G77 
/G6C /G61 /G72 /G29
/G77 
/G72 
/radicalbigg 
/G2D /G32 /G30 /G30 /G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29 /G32 /G30	 /G20 /G6C /G6F /G67 /G20 /G20 /G20 /G28 /G7C /G57 /G28 /G65 /G20 /G20 /G20 /G29 /G2F /G57 /G28 /G31 /G29 /G7C /G29 
/G61 /G20 /G3D /G20 /G30 /G2E /G35 /G20 /G28 /G48 /G61 /G6E /G6E /G29 /G61 /G20 /G3D /G20 /G31 /G20 /G28 /G52 /G65 /G63 /G74 /G61 /G6E /G67 /G75 /G70 
/G69 /G6E /G63 /G72 /G65 /G61 /G73 /G69 /G6E /G67 /G20 /G74 /G61 /G70 /G65 
Although we have only discussed raised cosine windo ws here, in general the degree of taper 
aects the convolution kernel as follows: 
	As the taper increases the width of the main lobe increases, causing the transition 
band-width in the lter to increase. 
	As the taper increases the amplitude of the side-lob es decreases more rapidly away 
from the main lobe, with the result that the lter stop-band attenuation is signican tly 
increased at high frequencies. 
The Kaiser Windo w: The Kaiser windo w, dened as 
/parenleftBigg /parenrightBigg 
2  n  I0  1(M/2 )
wK (n,)= I0() 2,	M 
2  n  M 
 0,	 otherwise 
where I0() is the zero-order modied Bessel function of the rst kind, and the parameter  
provides a convenient control over the windo w taper (and the resultan t trade-o between 
lower side-lob e amplitudes and the width of the main lobe). (Note: Some authors dene the 
windo w in terms of a parameter  =2/M.) 
Kaiser windo ws for  =2, 4, 6 are shown below: 
/G32 /G30 /G20 /G6C /G6F /G67 /G20 /G20 /G20 /G28 /G7C /G57 /G28 /G65 /G20 /G20 /G20 /G29 /G2F /G57 /G28 /G31 /G29 /G7C /G29/G31 /G30 /G6A /G77 
/G30 
/G2D /G32 /G30 
/G2D /G34 /G30 
/G2D /G36 /G30 
/G2D /G38 /G30 /G77 
/G70 
/G32 /G30 /G62 /G20 /G3D /G20 /G32 
/G62 /G20 /G3D /G20 /G34 
/G62 /G20 /G3D /G20 /G36 
/G6E /G77 /G28 /G6E /G29 
/G62 /G20 /G3D /G20 /G32 
/G62 /G20 /G3D /G20 /G36 /G62 /G20 /G3D /G20 /G34 
167</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/summationdisplay 
/G7A /G7D 3 The Zeros of a Linear Phase FIR Filter 
Consider the transfer function of a FIR system with an even-symmetric impulse response of 
length M +1 
M 
H(z)= hkz k 
k=0 
The order of the polynomial is M . Also 
M M M /summationdisplay /summationdisplay /summationdisplay 
k M (Mk) M nH(z 1)= hkz hkz	 hMnz = z	 = z 
k=0 k=o	 n=o 
where n = M  k. Because {hk} is even-symmetric, hk = hMk, and the polynomials in 
H(z) and H(z1) are identical 
H(z 1)= z(M)H(z). 
This means that if z1 is azeroof H(z), that is H(z1) = 0, then also H(1/z1) = 0, and 
therefore 1/z1 is also a zero of H(z). 
If z1 = r ej , then 1/z1 =(1/r)ej  and the recipro cal zeros may be drawn on the z-plane 
/G4F 
/G4F /G72 
/G31 /G2F /G72 /G71 
/G2D /G71 /G31 /G6A /G31 
/G2D /G31 
/G2D /G6A /G31 /G7A 
/G31 /G2F /G7A /G31 
/G31 /GC2 /G7B /GC1 /G7B /G7A /G7D 
In addition, zeros are either real or appear in complex conjugate pairs, with the result 
	A general complex zero will be a member of a group of four zeros that are a quad of 
recipro cal conjugates. 
	A pair complex zeros on the unit circle are their own recipro cals, and so will exist only 
as a pair. 
	A general real zero will be a member of a conjugate pair. 
	A zero at z = 1 will satisfy its own recipro cal, and therefore may exist on its own. 
1610</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
 
Department of Mechanical Engineering
 
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 161 
Reading: 
Proakis &amp; Manolakis, Sec. 10.2  
 Oppenheim, Schafer &amp; Buck, Chap. 7. 
 Cartinhour, Chap. 9. 
1	 FIR Low-Pass Filter Design by Windo wing 
In Lecture 15 we examined the creation of a causal FIR lter based upon an ideal low-pass 
lter with cut-o frequency c, and found that the impulse response was 
c sin( cn
h(n) =  cn  &lt;n&lt; . 
The resulting lter is therefore both innite in exten t and non-causal. 
To create a nite length lter we truncated the impulse response by multiplying {h(n)}
with an even rectangular windo w function {r(n)} of length M + 1, where 
r(n)= 
1 |n| M/2 
0 otherwise. 
The result was to create a modied lter {h } with a real frequency response functionn
H(ej ) from the convolution 
1   
H(ej )= H(ej  )R(ej())d 2  
where 
R(ej ) = sin((M + 1)/2) 
sin(/2) 
The truncation generates a Gibbs phenomenon associated with the band edges of H(ej ) 
where, as demonstrated in the gure below: 
(a)	 Both the pass-band and the stop-band exhibit signican t ripple, and the maxima of the 
ripple is relativ ely indep enden t of the chosen lter length M + 1. 
1copyrigh t c D.Ro well 2008 
161</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/braceleftBigg /parenleftbig /parenrightbig 
/G6E /G77 /G6E 
/G70 /G65 /G72 Notice that while the Bartlett windo w generates a lter with less attenuation in the stop-
band, it has no ripple in the stop-band (no sign changes in H/prime(ej )) and therefore no jump 
discon tinuities in its linear phase characteristic. 
General Commen ts on Windo w Taper Consider the family of windo w functions that 
are raised cosine functions on a pedestal, characterized by 
 +(1  )cos 2 n M/2  n  M/2 w(n)= M 
0 otherwise . 
where the parameter , for 1    0.5, denes the degree of taper. When  =1 we have 
the rectangular windo w with zero taper, when  =0.5 we have the Hann windo w (maxim um 
taper) , and the Hamming windo w corresp onds to  =0.54. 
/G52 /G65 /G63 /G74 /G61 /G6E /G67 /G75 /G6C /G61 /G72 
/G48 /G61 /G6D /G6D /G69 /G6E /G67 
/G61 /G20 /G3D /G20 /G30 /G2E /G35 /G34 /G61 /G20 /G3D /G20 /G31 
/G61 /G20 /G3D /G20 /G30 /G2E /G35 
/G2D /G4D /G2F /G32 /G30 /G4D /G2F /G32 /G69 /G6E /G63 /G72 /G65 /G61 /G73 /G69 /G6E /G67 /G20 /G74 /G61 
/G48 /G61 /G6E /G6E 
These windo w functions may written as a linear combination of the rectangular windo w 
wrect(n), and the Hann windo w wHann(n): 
w(n) = 2(1  )wHann(n)+2(  0.5)wrect(n) 
The spectra of these windo ws W(ej ) will therefore be a similar combination of the spectra 
Wrect(ej ) of the rectangular windo w, and WHann(ej ) of the Hann windo w. 
W(ej ) = 2(1  )WHann(ej )+2(  0.5)Wrect(ej ) 
166</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G2D /G31 /G30 /G30 /G2D /G38 /G30 /G2D /G36 /G30 /G2D /G34 /G30 /G2D /G32 /G30 /G30 /G31 /G30 
/G77 
/braceleftbig /bracerightbig The eect of the parameter  on the windo w taper, and the compromise between the width 
of the main lobe and sidelob e amplitude can be easily seen. These three windo w functions 
were used to design low-pass FIR lters with c =0.4. the frequency response magnitudes 
are shown below 
/G32 /G30 /G20 /G6C /G6F /G67 /G20 /G20 /G20 /G28 /G7C /G48 /G28 /G65 /G20/G6A /G77/G20 /G20 /G29 /G7C /G29 
/G70 
/G62 /G20 /G3D /G20 /G32 /G62 /G20 /G3D /G20 /G34 
/G62 /G20 /G3D /G20 /G36 
/G62 /G20 /G3D /G20 /G32 
/G62 /G20 /G3D /G20 /G34 /G62 /G20 /G3D /G20 /G36 
The compromise between stop-band attenuation and transition steepness can be clearly seen. 
The Kaiser windo w is very commonly used in FIR lters. 
2 Windo w FIR Filters or Other Filter Types 
High-P ass Filter: Given an ideal low-pass lter Hlp(ej ), a high-pass lter Hhp(ej )may 
be created: 
Hhp(ej )=1 Hlp(ej ) 
/G48 /G20 /G20 /G20 /G28 /G65 /G20 /G20 /G20 /G29 /G6C /G70 /G6A /G77 
/G77/G77 /G63 /G30 /G48 /G20 /G20 /G20 /G28 /G65 /G20 /G20 /G20 /G29/G68 /G70 /G6A /G77 
/G77 /G63 /G77 /G70 /G30 /G70 /G31 /G31 
Then the impulse response is 
{hhp(n)} = IDFT {1}IDFT Hlp(ej ) 
= (n)  c sin(cn) 
 cn 
After windo wing to a length M +1 
/parenleftbigg /parenrightbigg 
h(n)= w(n) (n)  c sin(cn) , |n|M/2.  cn 
168</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>The impulse response is then shifted to the right by M/2 samples to make it causal as before. 
Band-P ass Filter: A band-pass lter Hbp(ej ) may be designed from a pair of low-pass 
lters Hlpu(ej ) and Hlpl(ej ) with cut-o frequencies cu and cl respectively, 
Hbp(ej )= Hlpu(ej ) Hlpl(ej ). 
/G48 /G20 /G20 /G20 /G28 /G65 /G20 /G20 /G20 /G29 /G6C /G70 /G6A /G77 
/G77/G30 /G48 /G20 /G20 /G20 /G28 /G65 /G20 /G20 /G20 /G29/G62 /G70 /G6A /G77 
/G77 /G63 /G75 /G77 /G70 /G30 /G70 /G31 /G31 
/G77 /G63 /G6C /G77 /G63 /G6C /G77 /G63 /G75 
Then 
hbp(n)= w(n) /parenleftbigg cu 
 sin(cun) 
cun  cl 
 sin(cln) 
cln /parenrightbigg 
, |n|M/2. 
Band-stop Filter: A band-stop lter Hbs(ej ) may be designed from a low-pass lters 
Hlp(ej ) and a high-pass lter Hhp(ej ) with cut-o frequencies cl and cu respectively, 
Hbs(ej )= Hlp(ej )+ Hhp(ej ). 
/G48 /G20 /G20 /G20 /G28 /G65 /G20 /G20 /G20 /G29/G62 /G73 /G6A /G77 
/G77/G30 /G70 /G31 
/G77 /G63 /G6C /G77 /G63 /G75 
Then /parenleftbigg /parenrightbigg cu sin(cun) cl sin(cln)hbs(n)= w(n) + (n)  , |n|M/2. cun cln 
We show below that a linear phase high-pass or band-stop lter must have a length 
M + 1 that is odd. 
169</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G6E /G2D /G38 /G30 /G2D /G36 /G30 /G2D /G34 /G30 /G2D /G32 /G30 /G30 /G77 /G6A /G77 /G6E /G31 /G77 /G31 /G30 
/parenleftbigg /parenrightbigg /G32 /G30 /G20 /G6C /G6F /G67 /G20 /G20 /G20 /G28 /G7C /G57 /G28 /G65 /G20 /G20 /G20 /G29 /G2F /G57 /G28 /G31 /G29 /G7C /G29 
/G48 /G61 /G6D /G6D /G69 /G6E /G67 
/G52 /G65 /G63 /G74 /G61 /G6E /G67 /G75 /G6C /G61 /G72 /G70/G4D /G20 /G3D /G20 /G34 /G30 
/G2D /G32 /G30 /G2D /G31 /G30 /G30 /G31 /G30 /G32 /G30 
Filter Design Procedure Using a Fixed Windo w: 
The only design parameters available when using a xed windo w are (1) the low-pass cut-o 
frequency c, (2) the choice of windo w type, and (3) the lter length M + 1. Once these 
choices are made, the procedure is as follows 
(a) Form the samples of the ideal low-pass lter of length M +1. /G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29 
c sin(cn)h(n)= for  M/2  n  M/2  cn 
(b) Form the length M + 1 windo w {wn} of the chosen type. 
(c) Form the impulse response {h/prime } where h/prime = hnwn.n n 
(d) Shift all samples to the right by M/2 samples. 
Example 1 
Write some MATLAB code to design a length 41 low-pass FIR lter with cut-o 
frequency c =0.4 using a Hamming windo w. Plot the magnitude and pahase 
of the resulting lter. 
Solution: The following MATLAB code was used: 
n=-20:20;
wc=0.4*pi;
h = (wc/pi)*sinc(wc/pi*n);
hprime = h.*hamming(41);
% All done -no need to shift -just interpret hprime as the shifted
% impulse response.
% Plot the frequency response:
freqz(hprime,1);
which generated the following frequency response plots: 
164</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G2D /G35 /G30 /G30 /G30 /G2D /G38 /G30
/G2D /G36 /G30
/G2D /G34 /G30
/G2D /G32 /G30
/G30
/G2D /G31 /G30 /G30 /G2D /G39 /G30 /G2D /G38 /G30 /G2D /G37 /G30 /G2D /G36 /G30 /G2D /G35 /G30 /G2D /G34 /G30 /G2D /G33 /G30 /G2D /G32 /G30 /G2D /G31 /G30 /G30 /G31 /G30 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29 
/G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G20 /G28 /G20 /G20 /G78 /G20 /G70 /G20 /G72 /G61 /G64 /G2F /G73 /G61 /G6D /G70 /G6C /G65 /G29 /G30 /G30 /G2E /G31 /G30 /G2E /G32 /G30 /G2E /G33 /G30 /G2E /G34 /G30 /G2E /G35 /G30 /G2E /G36 /G30 /G2E /G37 /G30 /G2E /G38 /G30 /G2E /G39 /G31 
/G30 /G30 /G2E /G31 /G30 /G2E /G32 /G30 /G2E /G33 /G30 /G2E /G34 /G30 /G2E /G35 /G30 /G2E /G36 /G30 /G2E /G37 /G30 /G2E /G38 /G30 /G2E /G39 /G31 
/G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G20 /G28 /G20 /G78 /G70 /G20 /G72 /G61 /G64 /G2F /G73 /G61 /G6D /G70 /G6C /G65 /G29 /G50 /G68 /G61 /G73 /G65 /G20 /G28 /G64 /G65 /G67 /G72 /G65 /G65 /G73 /G29 
/G2D /G31 /G30 /G30 /G30 
/G2D /G31 /G35 /G30 /G30 
/G2D /G32 /G30 /G30 /G30 
Note that the linear phase characteristic has jump discon tinuities of  (or 180) 
when H/prime(ej ) changes sign. 
The following gure shows a comparison of length 41 lters designed with the Bartlett, Hann, 
and Hamming windo ws. /G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G52 /G65 /G73 /G70 /G6F /G6E /G73 /G65 /G20 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29 
/G30 /G30 /G2E /G35 /G31 /G31 /G2E /G35 /G32 /G32 /G2E /G35 /G33 /G77 /G20 /G20 /G3D /G20 /G30 /G2E /G34 /G70 /G20 /G72 /G61 /G64 /G2F /G73 /G61 /G6D /G70 /G6C /G65/G63 
/G4D /G2B /G31 /G20 /G3D /G20 /G34 /G30 
/G42 /G61 /G72 /G74 /G6C /G65 /G74 /G74 /G20 /G77 /G69 /G6E /G64 /G6F /G77 
/G48 /G61 /G6D /G6D /G69 /G6E /G67 /G20 /G77 /G69 /G6E /G64 /G6F /G77 
/G48 /G61 /G6E /G6E /G20 /G77 /G69 /G6E /G64 /G6F /G77 
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G77 
165</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G31 
/G30 /G77 
/vextendsingle /vextendsingle 
/vextendsingle /vextendsingle /vextendsingle 
/vextendsingle /vextendsingle /vextendsingle/vextendsingle /vextendsingle /vextendsingle(b)	The amplitude of the rst side-lob e in the stop-band ia approximately 0.091, corre
sponding to an attenuation of 21 dB, at that frequency . 
(c) The width of the transition region decreases with M + 1, the lter length. 
/G4D /G3D /G31 /G30
/G4D /G3D /G32 /G30 /G4D /G3D /G33 /G30
/G4D /G3D /G34 /G30
/G30 /G2E /G34 /G70	 /G70 /G7C /G48 /G27 /G28 /G65 /G20/G6A/G20/G77 /G20 /G29 /G7C 
/G30 /G2E /G30 /G39 /G31 
A causal lter was then formed by applying a right-shift of M/2 to the impulse response to 
form {hn} where 
h(n)= h/prime(n  M/2) 0  n  M +1. 
The shift was seen to have no eect on /vextendsingleH(ej )/vextendsingle, but created a linear phase taper (lag). 
The windowing metho d of FIR seeks to impro ve the lter characteristic by selecting 
an alternate length M + 1 windo w function {w(n)} with impro ved spectral characteristics 
W(ej ), which when convolved with the ideal low-pass lter function /vextendsingleH(ej ) will produce 
a better lter. 
There are many windo w functions available. We rst look at three common xed param
eter windo ws: 
The Bartlett Windo w: The length M + 1 Bartlett windo w is a even triangular windo w 
 
1+2n/M M/2  n  0  
w(n)= 1  2n/M 0  n  M/2  0 otherwise, 
as shown for M + 1 = 40 in the gure below. Also plotted is the spectrum /vextendsingleW(ej  , 
and for comparison the spectrum of the same length rectangular windo w /vextendsingleR(ej  . 
It can be seen that the main lobe of the Bartlett spectrum is wider than that of the rect
angular windo w, but that the side-lob es decrease in amplitude much faster at higher 
frequencies. The Bartlett windo w produces a monotonically decreasing frequency re
sponse magnitude, as is shown below. 
162</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>/G2D /G31 /G2D /G30 /G2E /G38 /G2D /G30 /G2E /G36 /G2D /G30 /G2E /G34 /G2D /G30 /G2E /G32 /G30 /G30 /G2E /G32 /G30 /G2E /G34 /G30 /G2E /G36 /G30 /G2E /G38 /G31 
/G33 /G39 /G49 /G6D /G61 /G67 /G69 /G6E /G61 /G72 /G79 /G20 /G50 /G61 /G72 /G74 
/G2D /G31 /G2D /G30 /G2E /G35 /G30 /G30 /G2E /G35 /G31 
/G52 /G65 /G61 /G6C /G20 /G50 /G61 /G72 /G74 
The complex recipro cal conjugate quads in the pass-band, conjugate pairs on the 
unit circle in the stop-band, and real axis recipro cals can be clearly seen. 
Notice that because M + 1 = 40 is even, there is a zero at z = 1, and that this 
lter would not be satisfactory for transformation to a high-pass or band-stop 
lter. 
1612</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G6E /G2D /G38 /G30 /G2D /G36 /G30 /G2D /G34 /G30 /G2D /G32 /G30 
/braceleftBigg /parenleftbig /parenrightbig 
/G6E /G2D /G38 /G30 /G2D /G36 /G30 /G2D /G34 /G30 /G2D /G32 /G30 /G30 /G31 /G30 /G77 /G31 
/braceleftBigg /parenleftbig /parenrightbig /G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29 
/G2D /G32 /G30 /G2D /G31 /G30 /G30 /G31 /G30 /G32 /G30 /G77 /G6E 
/G31 
/G4D /G20 /G3D /G20 /G34 /G30 /G30 
/G42 /G61 /G72 /G74 /G6C /G65 /G74 /G74 
/G52 /G65 /G63 /G74 /G61 /G6E /G67 /G75 /G6C /G61 /G72 /G70 /G77 /G32 /G30 /G20 /G6C /G6F /G67 /G20 /G20 /G20 /G28 /G7C /G57 /G28 /G65 /G20 /G20 /G20 /G29 /G2F /G57 /G28 /G31 /G29 /G7C /G29 /G31 /G30 /G6A /G77 
The Hann (or Hanning) Windo w: The Hann windo w is a raised cosine windo w 
0.5+0.5cos 2
M n M/2  n  M/2 w(n)= 0 otherwise . 
The Hann windo w, along with its spectrum, is shown for M + 1 = 40 below. As 
with the Bartlett example above, the spectrum of the rectangular windo w is given for 
comparison. Again it can be seen that the Hann windo w has a broader main lobe, but 
with much reduced side-lob es (even compared to the Bartlett windo w) away from the 
main peak. 
/G77/G6E 
/G48 /G61 /G6E /G6E
/G52 /G65 /G63 /G74 /G61 /G6E /G67 /G75 /G6C /G61 /G72 /G70 /G32 /G30 /G20 /G6C /G6F /G67 /G20 /G20 /G20 /G28 /G7C /G57 /G28 /G65 /G6A/G20 /G77 /G20 /G20 /G29 /G2F /G57 /G28 /G31 /G29 /G7C /G29 /G4E /G6F /G72 /G6D /G61 /G6C /G69 /G7A /G65 /G64 /G20 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65 /G20 /G28 /G64 /G42 /G29 
/G4D /G20 /G3D /G20 /G34 /G30 
/G2D /G32 /G30 /G2D /G31 /G30 /G30 /G31 /G30 /G32 /G30 
The Hamming Windo w: The Hamming windo w is another raised cosine windo w, but 
this time on a pedestal. 
0.54 + 0.46cos 2
M n M/2  n  M/2 w(n)= 0 otherwise . 
so that at the extremities (n = M/2), the value wM/ 2 =0.08. From the gure below, 
it can be seen that the Hamming widow has smaller side-lob es close to the main lobe, 
but that the side-lob es distan t from the main peak have a higher amplitude. 
163</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The discrete Fourier transform (cont.)
The fast Fourier transform (FFT)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_11/</lecture_pdf_url>
      <lectureno>11</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G6D 
/G4E /G2D /G31 /G30 /G6D 
/G6D /G30 /G35 /G30 /G31 /G30 /G30 /G31 /G35 /G30 /G32 /G30 /G30 /G32 /G35 /G30 /G30 /G32 /G34 /G36 /G38 /G31 /G30 /G31 /G32 /G31 /G34 
/G6D /G46 /G6D 
The original 16 DFT points are shown as lled circles (produced by the stem() 
function). The interpolation of 15 new values between these points can be easily 
seen. 
Example 2 
What is the eect of adding M zeros to the center of a DFT record {Fm} before 
taking the inverse DFT? 
/G46 
/G6F /G72 /G69 /G67 /G69 /G6E /G61 /G6C /G20 /G44 /G46 /G54 /G20 /G72 /G65 /G63 /G6F /G72 /G64 /G20 /G28 /G6C /G65 /G6E /G67 /G74 /G68 /G20 /G4E /G29 /G63 /G65 /G6E /G74 /G65 /G72 /G2D /G70 /G61 /G64 /G64 /G65 /G64 /G20 /G44 /G46 /G54 /G20 /G72 /G65 /G63 /G6F /G72 /G64 /G20 /G28 /G6C /G65 /G6E /G67 /G74 /G68 /G20 /G4E /G2B /G4D /G29 
/G4E /G2B /G4D /G2D /G31 /G30 /G46 /G6D 
/G4D /G20 /G61 /G64 /G64 /G65 /G64 /G20 /G7A /G65 /G72 /G6F /G73 
We assume that no aliasing has taken place in the original sampling operation. 
Lets answer this by considering what the DFT would have been if we had sampled 
f(t) at a higher rate, for example lets consider twice the original rate. 
	Since no aliasing was presen t in the original record, there will ne no aliasing 
at the higher rate. 
115</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>2 The Fast Fourier Transform (FFT) 
Although the DFT was known for many decades, its utility was severely limited because of 
the computational burden. The calculation of the DFT of an input sequence of an N length 
sequence {fn} 
N1 
N Fm =  
fn e j 2mn ,m=0,...,N  1 (4) 
n=0 
requires N complex multiplications to compute each on the N values, Fm, for a total of N2 
multiplications. Early digital computers had neither xed-p oint nor oating-p oint hardw are 
multipliers, and multiplication was performed by binary shift-and-add software algorithms. 
Multiplication was therefore a computationally expensive and time consuming operation, 
rendering machine computation of the DFT impractical for common usage. 
The FFT is a computationally ecien t algorithm to compute the DFT, by eliminating 
redundan t complex multiplic ations . In this course we look at a single implemen tation -the 
radix-2 FFT with decimation in time and input-bit-r eversal . Many other algorithms exist. 
We start by writing the DFT as 
N1 N1 
Fm =  
fn e j 2mn =  
fnWNmn ,m=0,...,N  1N 
n=0 n=0 
where WN =ej2/N . We also note the following periodic and symmetry properties of WN 
 WNk(Nn) = WN kn = WNkn (complex conjugate symmetry), 
 WNkn = WNk(n+N) = WNn(k+N) (periodicity in n and k), 
 WNn = WNnN/2 for n N/2. 
The FFT recognizes that these properties render many of the N2 complex multiplications in 
the DFT redundan t. 
Assume that the input sequence length N is even. We then ask whether any compu
tational eciency might be gained from splitting the calculation of {Fm} into two sub-
computations, each of length N/2, involving the even samples, {f2n}, and odd samples 
{f2n+1} for n=0 ...N/2  1. Then 
P 1 P 1 
Fm = f2nWN 2mn + f2n+1WNm(2n+1) 
n=0 n=0 
P 1 P 1 
= f2nWN 2mn + WNm f2n+1WN 2mn 
n=0 n=0 
P 1 P 1 
= f2nWPmn + WNm f2n+1WPmn 
n=0 n=0 
= Am + WNmBm,m=0,...,N  1. 
117</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G30	 /G4E /G2D /G31 /G6E 
 
	  3. Shifting Prop erties: If 
DFT{ fn}  { Fm} 
then 
DFT   
{ fnn0 }  e jmn0 Fm 
and 
DFTejm 0nfn  { Fmm0 }
where n0 and m0 are constan ts.
4. Perio dicit y As noted above, both { fn} and { Fm} are periodic with period N. 
Example 1 
What is the eect of zero-padding (adding extra zero amplitude samples) to a 
data record { fn} before taking the DFT? 
/G6E /G66 /G6E /G6F /G72 /G69 /G67 /G69 /G6E /G61 /G6C /G20 /G72 /G65 /G63 /G6F /G72 /G64 /G20 /G28 /G6C /G65 /G6E /G67 /G74 /G68 /G20 /G4E /G29 
/G30 /G66 /G6E 
/G4D /G20 /G61 /G64 /G64 /G65 /G64 /G20 /G7A /G65 /G72 /G6F /G73 /G7A /G65 /G72 /G6F /G2D /G70 /G61 /G64 /G64 /G65 /G64 /G20 /G72 /G65 /G63 /G6F /G72 /G64 /G20 /G28 /G6C /G65 /G6E /G67 /G74 /G68 /G20 /G4E /G2B /G4D /G29 
/G4E /G2D /G31 /G4E /G2B /G4D /G2D /G31 
	Assume that the original N samples encapsulate f(t), so that f(t)  0 for 
T&gt;NT. Then let FN denote the DFT of the original length N recordm 
N1 
FN j2mn/N = fn em 
n=0 
We note that when related back to the continuous time domain, the Nyquist 
frequency is N = /T, and the line spacing is  =2/NT. 
	When we ad M zeros to the end of the record 
N+M1	 N1 
FN+M = fn e j2mn/ (N+M) = fn e j2mn/ (N+M) 
m 
n=0	 n=0 
since the M extra data point do not contribute to the DFT sums. However 
we now have N + M spectral samples with the same Nyquist frequency 
N = /T, but with a new line spacing  = 2/(N + M)T. 
The result is that padding the data record with zeros has increased the spec
tral resolution of the DFT. 
113</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Note that if the number of added zeros is an integer multiple of the original 
record length (M = kN, for k =1,2,3,...), the original DFT samples FN willm 
be preserv ed and k  1 new samples will be interpolated between the original 
samples. 
kN1 N1 
FkN = fn e j2mn/ (kN ) = fn e j2mn/ (kN ) 
m 
n=0 n=0 
so that FN = FkN 
m km . 
Example: The waveform below was sampled with T = 1 sec to give a length 
16 record. 
/G30 /G35 /G31 /G30 /G31 /G35 
/G2D /G34 /G2D /G33 /G2D /G32 /G2D /G31 /G30 /G31 /G32 /G33 /G34 /G66 /G28 /G74 /G29 
/G74 /G20 /G28 /G73 /G65 /G63 /G29 
The data record length was then extended to a length of 256 by zero-padding 
with 240 zeros, and the FFT was then computed again. The following plot, 
demonstrating the interpolation in the DFT was generated from the MATLAB 
fragmen t: 
k = 0:7;
f16 = [cos(2.*pi*k/8) + 3*cos(4*pi*k/8)+ sin(6*pi*k/8) zeros(1,8)];
f256 = [f16 zeros(1,240)];
plot(0:255,abs(fft(f256)),o);
hold;
stem(0:16:255, abs(fft(f16)),filled);
114</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G6E /G61 
/G62 /G20 /G61 /G20 /G2B /G20 /G57 /G20 /G20 /G20 /G62/G4E /G6E 
The algorithm works from left to right, and each right-hand node is assigned a value that 
is the weighted sum of the connected left-hand nodes, where the indicated weight n is the 
exponent of WN . If no weight is indicated, it is assumed to be unity (or equivalent to WN 0 ). 
Thus the output of the step shown above is c = a + WNn b. 
With this notation the combining of the two length N/2 DFTs is illustrated below for 
N=8. Each right-hand node is one of the Fm, formed by the appropriate combination of Am 
and Bm. 
/G30 
/G31 
/G32 
/G33 
/G34 
/G35 
/G36 
/G37 /G41 
/G41
/G41 
/G41 
/G42/G42 
/G42 
/G42 /G30 
/G30/G31
/G31/G32
/G32
/G33/G33 /G34 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G65 /G76 /G65 /G6E /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G34 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G6F /G64 /G64 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G30 /G32 /G34 /G36 
/G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G31 /G33 /G35 /G37 /G46 /G30/G20 /G3D /G20 /G41 /G20/G30 /G20 /G2B /G20 /G57 /G38 /G20/G30/G20 /G42 /G30 
/G46 /G31/G20 /G3D /G20 /G41 /G20/G31 /G20 /G2B /G20 /G57 /G38 /G20/G31/G20 /G42 /G31 
/G46 /G32/G20 /G3D /G20 /G41 /G20/G32 /G20 /G2B /G20 /G57 /G38 /G20/G32/G20 /G42 /G32 
/G46 /G33/G20 /G3D /G20 /G41 /G20/G33 /G20 /G2B /G20 /G57 /G38 /G20/G33/G20 /G42 /G33 
/G46/G34/G20 /G3D /G20 /G41 /G20/G34 /G20 /G2B /G20 /G57 /G38 /G20/G34/G20 /G42 /G20 /G34 /G20 /G20 /G3D /G20 /G41 /G20 /G30 /G20 /G2D /G20 /G57 /G20/G38/G30/G20 /G42 /G30 
/G46/G35/G20 /G3D /G20 /G41 /G20/G35 /G20 /G2B /G20 /G57 /G38 /G20/G35/G20 /G42 /G20 /G35 /G20 /G20 /G3D /G20 /G41 /G20 /G31 /G20 /G2D /G20 /G57 /G20/G38/G31/G20 /G42 /G31 
/G46/G36/G20 /G3D /G20 /G41 /G20/G36 /G20 /G2B /G20 /G57 /G38 /G20/G36/G20 /G42 /G20 /G36 /G20 /G20 /G3D /G20 /G41 /G20 /G32 /G20 /G2D /G20 /G57 /G20/G38/G32/G20 /G42 /G32 
/G46 /G37/G20 /G3D /G20 /G41 /G20/G37 /G20 /G2B /G20 /G57 /G38 /G20/G37/G20 /G42 /G20 /G37 /G20 /G20 /G3D /G20 /G41 /G20 /G33 /G20 /G2D /G20 /G57 /G20/G38/G33/G20 /G42 /G33 
This only the rst step in the developmen t of the FFT. The complete algorithm will be 
developed in Lecture 12. 
119</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G46 /G20 /G6D 
/G6D Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 111 
Reading: 
 Class Handout: Sampling and the Discr ete Fourier Transform 
 Class Handout: The Fast Fourier Transform 
 Proakis and Manolakis (4th Ed.) Ch. 7 
 Oppenheim, Schafer &amp; Buck (2nd Ed.) Chs. 8 &amp; 9 
1 The Discrete Fourier Transform  continued 
In Lecture 10 the DFT pair associated with a sample set {fn} of length N was dened as 
N1 
Fm = fn e j2mn/N 
n=0 
N11 fn = Fm ej2mn/N 
N m=0 
The value Fm was interpreted as F(j ) evaluated at  = 2/NT. 
1.1 Organization of the DFT 
The N components in a DFT represen t one period of a periodic spectrum. The rst N/2 lines 
in the spectrum represen t physical frequencies 0 ...(/T) radians/second. The components 
in the upper half of the sequence, FN/2+1 ...F N1, may be considered to be the negativ e 
frequency components FN/2+1 ...F 1 in the spectrum. It is common to translate the upper 
half of the record to the the left side of a plot to enhance the physical meaning. 
/G46 /G20 /G4E /G20 /G65 /G71 /G75 /G69 /G2D /G73 /G70/G6D 
/G69 /G6E /G20 /G6F /G6E /G65 /G20 /G70 /G65 
/G4E /G2D /G31 /G61 /G63 /G65 /G64 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G72 /G69 /G6F /G64 /G20 /G6F /G66 /G20 /G46 /G6D 
/G69 /G6E /G74 /G65 /G72 /G70 /G72 /G65 /G74 /G20 /G74 /G6F /G70 /G20 /G4E /G2F /G32 /G20 /G76 /G61 /G6C /G75 /G65 /G73 
/G61 /G73 /G20 /G72 /G65 /G70 /G72 /G65 /G73 /G65 /G6E /G74 /G69 /G6E /G67 /G20 /G6E /G65 /G67 /G61 /G74 /G69 /G76 /G65 /G20 
/G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G69 /G65 /G73 /G20 /G69 /G6E /G20 /G46 /G20 /G2A /G20 /G28 /G6A /G57 /G29 /G2E 
/G30 /G4E /G2F /G32 /G4E /G2D /G31 /G4E /G2F /G32 /G2D /G31 /G30 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
111</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G6E /G6D /G44 /G46 /G54 
/G6D where P = N/2, {Am} is a DFT of length N/2, based on the even sample points, and similarly 
{Bm} is a DFT of length N/2 based on the odd sample points of {fn}. For example, if N =8 
the DFT relationship of {fn} shown as 
/G66 /G6E /G4E /G20 /G3D /G20 /G38 
/G70 /G65 /G72 /G69 /G6F /G64 /G69 /G63 /G20 /G77 /G69 /G74 /G68 /G20 /G70 /G65 /G72 /G69 /G6F /G64 /G20 /G38 
/G30 /G31 /G32 /G33 /G34 /G35 /G36 /G37 /G46 /G6D 
/G30 /G31 /G32 /G33 /G34 /G35 /G36 /G37 /G4E /G20 /G3D /G20 /G38 
/G70 /G65 /G72 /G69 /G6F /G64 /G69 /G63 /G20 /G77 /G69 /G74 /G68 /G20 /G70 /G65 /G72 /G69 /G6F /G64 /G20 /G38 
may decomp osed into even and odd sample sets with a DFT relationship for the even set 
indicated as 
/G66 /G6E 
/G30 /G31 /G32 /G33 /G34 /G35 /G36 /G37 /G6E /G73 /G65 /G6C /G65 /G63 /G74 /G20 /G74 /G68 /G65 /G20 /G65 /G76 /G65 /G6E /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G20 /G6F /G66 /G20 /G7B /G66 /G20 /G20 /G7D /G20 /G74 /G6F 
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G66 /G6F /G72 /G6D /G20 /G61 /G20 /G6E /G65 /G77 /G20 /G73 /G65 /G74 /G20 /G6F /G66 /G20 /G6C /G65 /G6E /G67 /G74 /G68 /G20 /G34 /G2E /G41 /G6D 
/G30 /G31 /G32 /G33 /G34 /G35 /G36 /G37 /G4E /G20 /G3D /G20 /G34 
/G70 /G65 /G72 /G69 /G6F /G64 /G69 /G63 /G20 /G77 /G69 /G74 /G68 /G20 /G70 /G65 /G72 /G69 /G6F /G64 /G20 /G34 
/G44 /G46 /G54 
/G6F /G6E /G65 /G20 /G70 /G65 /G72 /G69 /G6F /G64 /G6E 
We also note from the properties of the DFT that both {Am} and {Bm} are periodic 
with period N/2, that is 
Am+N/2 = Am, and Bm+N/2 = Bm 
so that 
Fm = Am + WNmBm for m =0 ... (N/2  1), and 
mN/2Fm = AmN/2  WN BmN/2 for m = N/2 ... (N  1) 
These equations show that a DFT of length N may be synthesized by combining 
two shorter DFTs from an even/odd decomp osition of the original data set. For 
example, if N =8, F3 and F7 are simply related: 
F3 = A3 + W83B3 
F7 = A7 + W87B7 = A3  W83B3 
so that N/2 multiplications are required to combine the two sets. Each of the two 
shorter DFTs requires (N/2)2 complex multiplications, therefore the total required 
is N2/2+ N/2 &lt;N2, for N&gt; 2, indicating a computational saving. 
A modied discrete form of Masons signal-o w graph is commonly used to displa y the 
algorithmic structure of the synthesis. The gure below shows the signal-o w graph -con
sisting of a network of nodes connected by line segmen ts. 
118</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>1.2 Spectral Resolution of the DFT 
The DFT pair provide a transform relationship between a pair of (complex) data sets {fn}
and {Fm}, each of length N. If the sampling interval associated with {fn} is T units, the 
record duration is 
T = NT. 
The frequency resolution, or line spacing, , in the DFT is 
2 2 1 = = rad/s, or F = Hz. (1)NTT T 
and the frequency range spanned by the N lines in the DFT is 
2 1 N = rad/s, or NF = Hz. (2)T T 
The sequence {Fm} represen ts both the positive and negativ e frequencies in a two-sided 
spectrum. The highest (positive) frequency component in the spectrum is half of this range 
(the Nyquist frequency), that is 
 1 max = rad/s, or Fmax = Hz. (3)T 2T 
We conclude therefore, that the resolution within the DFT depends on the duration T of 
the data record, and the maxim um frequency depends on the sampling interval T. 
1.3 Prop erties of the Discrete Fourier Transform 
Because the DFT is derived directly as a sampled continuous Fourier transform, it inherits 
most of the properties of the Fourier transform. We repeat some of the important properties 
here. In addition other properties are based on the assumed periodicity of {fn} and {Fm}: 
1. Linearit y: If {fn} and {gn} are both length N, and 
{fn} DFT {Fm} and {gn} DFT {Gm} 
then 
DFT a{fn} + b{gn}  a{Fm} + b{Gm} 
2. Symmetry Prop erties of the DFT: If {fn} is a real-valued sequence then 
{Fm} = Fm 
from which it follows that /Rfractur{{Fm}} is an even function of m and /Ifractur{{Fm}} is an odd 
function of m. Similarly the magnitude of {Fm} is an even function, and the phase is 
an odd function. In addition 
DFT DFTE{{fn}}  /Rfractur{{Fm}} and O{{fn}}  /Ifractur{{Fm}} 
where E and O denote the even and odd parts respectively. 
112</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>The total duration T = NT =2N(T/2) , therefore the line spacing  
remains constan t. 
	The Nyquist frequency N = /(T/2) has been doubled. 
	The spectrum has been scaled. 
This argumen t says that doubling the sampling rate (halving the interval T) 
has simply inserted N samples into the center of the DFT record {Fm}, and 
scaled the data points. In general, inserting kN zeros into the center of a DFT 
record and then taking the inverse DFT of the new record of length (k +1)N,is 
to interpolate k  1 samples between each of the original N data points (and to 
scale the data set). 
The following MATLAB fragmen t was used to demonstrate the interpolation. 
i=0:7; 
f8=cos(2*pi*(i-1)/8) + 3*cos(4*pi*(i-1)/8)+ sin(6*pi*(i-1)/8) ; 
%	Take the DFT 
Fin = fft(f8); 
%	Pad the center of the DFT with zeros. 
Fout = zeros(56,1); 
Fout(1:4) = Fin(1:4); 
Fout(61: 64) = Fin(5:8); 
%	Take the inverse DFT, scale, and preserve the real part 
fout = real(ifft(Fout))*8; 
plot(0:63,fout,o); 
hold on; 
stem(0:8:63,f8,filled); 
A data record of length 8 is created, and the DFT is computed. The center of 
this record is padded with zeros to form a length 64 DFT. The inverse DFT is 
then computed and plotted. The results are shown below. The original length 8 
data sequence is shown with lled circles, and the interpolated data points are 
shown as open circles. 
/G30 /G31 /G30 /G32 /G30 /G33 /G30 /G34 /G30 /G35 /G30 /G36 /G30 
/G2D /G34 /G2D /G33 /G2D /G32 /G2D /G31 /G30 /G31 /G32 /G33 /G34 
/G6E /G66 /G6E 
116</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The correlation functions (cont.)
Linear system input/output relationships with random inputs
Discrete-time correlation</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_22/</lecture_pdf_url>
      <lectureno>22</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
Department of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 221 
Reading: 
Proakis and Manolakis: Secs. 12,1  12.2  
	Oppenheim, Schafer, and Buck:
Stearns and Hush: Ch. 13
  
1	The Correlation Functions (continued) 
In Lecture 21 we introduced the auto-c orrelation and cross-correlation functions as measures 
of self-and cross-similarit y as a function of delay  . We continue the discussion here. 
1.1 The Auto correlation Function 
There are three basic denitions 
(a) For an innite duration waveform: 
 T/21 ff () = lim f(t)f(t + )dt 
T  T T/2 
which may be considered as a power based denition. 
(b) For an nite duration waveform:	 If the waveform exists only in the interval t1 
t  t2 t2 
ff ( )= f(t)f(t +  )dt 
t1 
which may be considered as a energy based denition. 
(c) For a periodic waveform: If f(t) is periodic with period T 
t0+T1 
ff ()= f(t)f(t + )dt T	t0 
for an arbitrary t0, which again may be considered as a power based denition. 
1copyrigh t cD.Ro well 2008 
221</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>1.1.2 The Fourier Transform of the Auto-Correlation Function
Consider the transien t case 
Rf f (j ) =   
f f ( ) ej  d 
=     
f(t)f(t + ) dt  
ej  d 
=    
f(t) ej t dt.   
f() ej  d 
=  
F (j )F (j )  
= |F (j )| 2 
or
ff () F Rff (j) = F (j)2  | | 
where Rff () is known as the energy density spectrum of the transien t waveform f(t). 
Similarly , the Fourier transform of the power-based autocorrelation function, ff () 
 
f f (j ) = F {f f ()} = ff () ej  d 
=    
lim 1  T /2 
f(t)f(t + ) dt  
ej  d 
 T  T T /2 
is known as the power density spectrum of an innite duration waveform.
From the properties of the Fourier transform, because the auto-correlation function 
is a real, even function of , the energy/p ower densit y spectrum is a real, even 
function of , and contains no phase information. 
1.1.3 Parsev als Theorem 
From the inverse Fourier transform 
  1  
ff (0) = f2(t)dt = Rff (j)d 2  
or 1    
2f2(t)dt =2 |F (j)| d, 
  
which equates the total waveform energy in the time and frequency domains, and which is 
known as Parsevals theorem. Similarly , for innite duration waveforms 
 T/2 1  
lim f2(t)dt = (j ) d 
T/2T  2  
equates the signal power in the two domains. 
224</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Example 3 
Find the cross-correlation function between the following two functions 
/G66 /G28 /G74 /G29
/G74/G54 /G30/G61/G67 /G28 /G74 /G29
/G74
/G54 /G30/G61/G54
/G31/G54
/G32
In this case g(t) is a delayed version of f(t). The cross-correlation is 
/G72 /G20 /G20 /G28 /G74 /G29
/G74
/G54 /G20 /G20 /G2D /G20 /G54 /G30/G61/G66 /G67
/G32
/G32 /G31
where the peak occurs at  = T2  T1 (the delay between the two signals). 
1.2.1 Prop erties of the Cross-Correlation Function 
(1) fg()= gf ( ), and the cross-correlation function is not necessarily an even function. 
(2) If fg()=0 for all , then f(t) and g(t) are said to be uncorrelated. 
(3)	If g(t)= af(t  T ), where a is a constan t, that is g(t) is a scaled and delayed version of 
f(t), then ff () will have its maxim um value at  = T . 
Cross-correlation is often used in optimal estimation of delay, such as in echolocation (radar, 
sonar), and in GPS receiv ers. 
226</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>3.1 Summary of z-Domain Correlation Relationships 
(The following table is based on Table 13.2 from Stearns and Hush) 
Prop erty Formula

Power spectrum of {fn} ff (z)=  
ff (n)zn 
n=
 
Cross-p ower Spectrum fg(z)=  
fg(n)zn =gf (z1) 
n=
1
Auto correlation ff (n)= ff (z)z n1dz 2j 
1 
Cross-correlation fg(n)= fg(z)z n1dz 
1 Waveform power E 
f2 
=2

ff j 
(0) =  
fg(z)z1dzn 2j 
Linear system properties Y (z)= H(z)F (z) 
yy(z)= H(z)H(z1)ff (z) 
fy(z)= H(z)ff (z) 
2210</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G52
/G73 /G28 /G74 /G29
/G72 /G28 /G74 /G29
/G6E /G28 /G74 /G29/G2B/G74 /G72 /G61 /G6E /G73 /G6D /G69 /G74 /G74 /G65 /G64 /G20
/G77 /G61 /G76 /G65 /G66 /G6F /G72 /G6D
/G72 /G65 /G63 /G65 /G69 /G76 /G65 /G64 /G20
/G77 /G61 /G76 /G65 /G66 /G6F /G72 /G6D /G64 /G65 /G6C /G61 /G79 /G20 /G20 /G54 /G20 /G3D /G20/G32 /G52
/G63/G72 /G65 /G66 /G6C /G65 /G63 /G74 /G69 /G6E /G67 /G20 /G6F /G62 /G6A /G65 /G63 /G74
/G61 /G73 /G28 /G74 /G2D /G54 /G29 /G76 /G65 /G6C /G6F /G63 /G69 /G74 /G79 /G20 /G6F /G66 /G20 /G70 /G72 /G6F /G70 /G61 /G67 /G61 /G74 /G69 /G6F /G6E /G3A /G20 /G63Example 4 
In an echolocation system, a transmitted waveform s(t) is reected o an object 
at a distance R and is receiv ed a time T =2R/c sec. later. The receiv ed signal 
r(t)= s(tT )+n(t) is atten uated by a factor  and is contaminated by additiv e 
noise n(t). 
 
sr()= s(t)r(t + )dt 

 
= s(t)(n(t + )+ s(t  T + ))dt 
 
= sn()+ ss(  T ) 
and if the transmitted waveform s(t) and the noise n(t) are uncorrelated, that is 
sn( )  0, then 
sr()= ss(  T ) 
that is, a scaled and shifted version of the auto-correlation function of the trans
mitted waveform  which will have its peak value at  = T , which may be used 
to form an estimator of the range R. 
1.2.2 The Cross-P ower/Energy Spectrum 
We dene the cross-p ower/energy densit y spectra as the Fourier transforms of the cross-
correlation functions:  
Rfg(j) = fg()ej d 
 
fg(j) = fg()ej d. 
 
Then  
Rfg(j) = fg()ej d 
    
= f(t)g(t + )ej dt d 
     
= f(t)ejt dt g()ej d 
  
227</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G48 /G28 /G6A /G57 /G29/G66 /G28 /G74 /G29/G79 /G28 /G74 /G29
/G66 /G20 /G20 /G28 /G74 /G29/G66 /G66 /G66 /G20 /G20 /G20 /G28 /G74 /G29/G79 /G79or
Rfg(j) = F (j)G(j) 
Note that although Rff (j ) is real and even (because ff () is real and even, this is 
not the case with the cross-p ower/energy spectra, fg(j ) and Rfg(j ), and they are 
in general complex. 
2	Linear System Input/Output Relationships with Random In
puts: 
Consider a linear system H(j ) with a random input f(t). The output will also be random 
Then 
Y (j ) = F (j )H(j ), 
Y (j )Y (j ) = F (j )H(j )F (j )H(j ) 
or 
2yy(j) = ff (j) H(j). | | 
Also 
F (j )Y (j ) = F (j )F (j )H(j ), 
or 
fy(j ) = ff (j )H(j ). 
Taking the inverse Fourier transforms 
yy( )= ff () F1 
|H(j)| 2 
fy( )= ff ()  h( ). 
3	Discrete-Time Correlation 
Dene the correlation functions in terms of summations, for example for an innite length 
sequence 
fg(n) = E{fmgm+n} 
N
= lim 1  
fmgm+n, 
N  2N +1 m=N 
and for a nite length sequence 
N
fg(n)=  
fmgm+n.
m=N
228</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Example 2 
Find the autocorrelation function of the sinusoid f(t) = sin( t + ). 
Since f(t) is periodic, the autocorrelation function is dened by the average over 
one period 
t0+T1 
ff ()= f(t)f(t + )dt. T t0 
and with t0 =0 
 2/ ff () = 2 0 sin(t + ) sin((t + ) + ) dt 
1 = cos(t)2 
and we see that ff () is periodic with period 2/ and is indep enden t of the 
phase . 
1.1.1 Prop erties of the Auto-correlation Function 
(1)	The autocorrelation functions ff () and ff () are even functions, that is 
ff ()= ff (), and ff ( )= ff (). 
(2) A maxim um value of ff () (or ff ( ) occurs at delay  = 0, 
|ff ()| ff (0), and |ff ()| ff (0) 
and we note that  
ff (0) = f2(d)dt 
 
is the energy of the waveform. Similarly
1  
ff (0) = lim f2(t)dt
T  T 
is the mean power of f(t).
(3) ff () contains no phase information, and is indep enden t of the time origin. 
(4) If f(t) is periodic with period T , ff () is also periodic with period T . 
(5) If (1) f(t) has zero mean ( = 0), and (2) f(t) is non-p eriodic, 
lim ff ()=0. 
  
223</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>The following properties are analogous to the properties of the continuous correlation func
tions: 
(1) The auto-correlation functions (ff(n) and ff (n) are real, even functions. 
(2) The cross-correlation functions are not necessarily even functions, and 
fg(n)= gf (n) 
(2) ff (n) has its maxim um value at n = 0, 
|ff (n)| ff (0) for all n. 
(3) If {fk} has no periodic comp onent 
lim ff (n)= f 2 . 
n 
(4)	ff (0) is the average power in an innite sequence, and ff (n) is the total energy in a 
nite sequence. 
The discrete power/energy spectra are dened through the z-transform 

ff (z)= Z{ff (n)} =  
ff (n)zn 
n= 
and 
ff (n) = Z1 {ff (z)}
1  
= ff (z)z n1dz 2j  /T T = ff (ejT )ej nT d. 2 /T 
Note on the MATLAB function xcorr(): In MATLAB the function call phi = 
xcorr(f,g) computes the cross-correlation function, but reverses the denition of 
the subscript order from that presen ted here, that is it computes 
N N
fg(n)= 1  
fn+mgm =1  
fngnmM	 M N	 N 
where M is a normalization constan t specied by an optional argumen t. Care must 
therefore be taken in interpreting results computed through xcorr(). 
229</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G66 /G20 /G20 /G28 /G74 /G29/G66 /G66
/G74/G46 /G20 /G20 /G28 /G6A /G57 /G29/G66 /G66
/G57/G62 /G72 /G6F /G61 /G64 /G20 /G61 /G75 /G74 /G6F /G63 /G6F /G72 /G72 /G65 /G6C /G61 /G74 /G69 /G6F /G6E/G6E /G61 /G72 /G72 /G6F /G77 /G20 /G73 /G70 /G65 /G63 /G74 /G72 /G75 /G6D
/G66 /G20 /G20 /G28 /G74 /G29/G66 /G66
/G74/G46 /G20 /G20 /G28 /G6A /G57 /G29/G66 /G66
/G57/G6E /G61 /G72 /G72 /G6F /G77 /G20 /G61 /G75 /G74 /G6F /G63 /G6F /G72 /G72 /G65 /G6C /G61 /G74 /G69 /G6F /G6E /G62 /G72 /G6F /G61 /G64 /G20 /G73 /G70 /G65 /G63 /G74 /G72 /G75 /G6D
/G66 /G20 /G20 /G28 /G74 /G29/G66 /G66
/G74/G46 /G20 /G20 /G28 /G6A /G57 /G29/G66 /G66
/G57/G22 /G77 /G68 /G69 /G74 /G65 /G22 /G20 /G73 /G70 /G65 /G63 /G74 /G72 /G75 /G6D
/G69 /G6D /G70 /G75 /G6C /G73 /G65 /G20 /G61 /G75 /G74 /G6F /G63 /G6F /G72 /G72 /G65 /G6C /G61 /G74 /G69 /G6F /G6E /G311.1.4	 Note on the relativ e widths of the Auto correlation and Power/Energy 
Spectra 
As in the case of Fourier analysis of waveforms, there is a general recipro cal relationship 
between the width of a signals spectrum and the width of its autocorrelation function. 
 A narro w autocorrelation function generally implies a broad spectrum 
 and a broad autocorrelation function generally implies a narro w-band waveform. 
In the limit, if ff ()= (), then ff (j ) = 1, and the spectrum is dened to be white. 
1.2 The Cross-correlation Function 
The cross-correlation function is a measure of self-similarit y between two waveforms f(t) 
and g(t). As in the case of the auto-correlation functions we need two denitions: 
 T/21 fg() = lim f(t)g(t + )d 
T  T T/2 
in the case of innite duration waveforms, and 
 
fg( )= f(t)g(t + )d 
 
for nite duration waveforms. 
225</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G66 /G28 /G74 /G29
/G74
/G54 /G30/G61
/G66 /G28 /G74 /G2B /G74 /G29
/G74/G30/G61
/G2D /G74 /G54 /G2D /G74
/G72 /G20 /G20 /G28 /G74 /G29
/G74
/G54 /G30/G61/G66 /G66
/G2D /G54/G32
/G72 /G20 /G20 /G28 /G74 /G29 /G20 /G3D /G20 /G61 /G20 /G20 /G28 /G54 /G2D /G74 /G29/G66 /G66/G32Example 1 
Find the autocorrelation function of the square pulse of amplitude a and duration 
T as shown below. 
/G66 /G28 /G74 /G29
/G74
/G54 /G30/G61
The wave form has a nite duration, and the autocorrelation function is 
 T 
ff ()= f(t)f(t + )dt 
0 
The autocorrelation function is developed graphically below 
 T  
ff ( )= a 2 dt 
0 
= a )2(T ||  T    T 
= 0 otherwise. 
222</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Butterworth filter design example
Chebyshev filters</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_07/</lecture_pdf_url>
      <lectureno>7</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>While all lters meet the design specication, it can be seen that the Butterw orth and 
the Chebyshev Type 1 lters are all-pole designs and have an asymptotic high-frequency 
magnitude slope of 20N dB/decade, in this case -80 dB/decade for the Butterw orth design 
and -60 dB/decade for the Chebyshev Type 1 design. The Type 2 Chebyshev design has 
two nite zeros on the imaginary axis at a frequency of 23.07 rad/s, forcing the response to 
zero at this frequency , but with the result that its asymptotic high frequency response has 
a slope of only -20 dB/decade. Note also the singularit y in the phase response of the Type 
2 Chebyshev lter, caused by the two purely imaginary zeros. 
The pass-band and stop-band power responses are shown in below. Notice that the design 
metho d developed here guaran tees that the response will meet the specication at the cut-o 
frequency (in this case |H(j)|2 =0 .9at c = 10. Other design metho ds (such as used by 
MATLAB) may not use this criterion. 
0.88 0.9 0.92 0.94 0.96 0.98 1 1.02 Power response Butterworth (N=4) 
Chebyshev Type 1 (N=3) Chebyshev Type 2 (N=3) 
0 1 2 3 4 5 6 7 8 9 10 
Angular frequency (rad/sec) 
0 0.005 0.01 0.015 0.02 0.025 0.03 0.035 Power responseButterworth (N=4) 
Chebyshev Type 2 (N=3)Chebyshev Type 1 (N=3) 
20 30 40 50 60 70 80 90 100 
Angular frequency (rad/sec) 
711</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Example 1 
Repeat the previous Butterw orth design example using a Cheb yshev Type 1
 
design.
 
From the previous example we have c = 10 rad/s., r = 20 rad/s.,  =0.3333,
 
 =4.358. The required order is
 
cosh1 (/) cosh1 13.07 N  cosh1 (r/c) = cosh1 2 =2.47 
Therefore take N = 3. Determine : 
1 1 1  = sinh1 = sinh1(3) = 0.6061 N  3 
and sinh  =0.6438, and cosh  =1.189. Also, n = (2n  1)/6 for n =1 ... 6 
as follows: 
n: 1 2 3 4 5 6 
n: /6 /25/6 7/6 3/2 11/6 
sin n:1/2 1 1/2 1/2 -1 1/2 
cos n: 
3/2 0 
3/2 
3/2 0 
3/2 
Then the poles are 
pn =c (sinh  sin n + j cosh  cos n) 
1 
3 
p1 =10 0.6438 + j1.189 =3.219 + j10.30  2  2 
p2 = 10 (0.6438  1+ j1.189  0) = 6.438  
1 
3 
p3 =10 0.6438 2  j1.189 =3.219  j10.30   2 
 
1 
3 
p4 = 10 0.6438 2  j1.189 = 3.219  j10.30   2 
p5 = 10(0.6438  0  j1.189  0) = 6.438  
1 
3 
p6 = 10 0.6438 + j1.189 = 3.219 + j10.30  2  2 
and the gain adjusted transfer function of the resulting Type 1 lter is 
750 H(s)= (s2 +6.438s + 116.5)(s +6.438) 
The pole-zero plot for the Cheb yshev Type 1 lter is shown below. 
76</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>and, (2) since at these values of , sin N = 1 we have 
1 1  = N sinh1 
	 (11) 
As in the Butterw orth design procedure, we select the left half-plane poles as the poles of 
the lter frequency response. 
Design Procedure: 
1. Determine the lter order 
cosh1 (/)N  cosh1 (r/c) 
2. Determine 
 
 = N 1 sinh1 1 

 
3. Determine n, n =1 ...N
 
(2n  1)
 n =	 n =1,...,N 2N 
4. Determine the N left half-plane poles 
pn =c (sinh  sin n + j cosh  cos n) n =1,...,N 
5. Form the transfer function 
(a)	 If N is odd
 
p1p2 ...pN
H(s)= (s  p1)(s  p2) ... (s  pN ) 
(b)	 If N is even
 
1 p1p2 ...pN
H(s)= 1+ 2 (s  p1)(s  p2) ... (s  pN ) 
The dierence in the gain constan ts in the two cases arises because of 
2the ripple in the pass-band. When N is odd, the response H(j0) =1, 
2	 | |
whereas if N is even the value of H(j0) =1/(1 + 2). | | 
75</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>= = The poles are found using the metho d developed for the Type 1 lter, the zeros are 
found as the roots of the polynomial TN (/jc) on the imaginary axis  = j. From 
the denition TN (x) = cos(N cos1 (x)) it is easy to see that the roots of the Cheb yshev 
polynomial occur at 
x = cos (n  1/2) 
N  
n = 1 . . . N 
and from Eq. (25) the system zeros will be at 
n = jc cos (n  1/2)  
n = 1 . . . N. N 
2. The poles and zeros are mapp ed back to the s-plane using s =rc/ and the N left 
half-plane poles are selected as the poles of the lter. 
3. The transfer function is formed and the system gain is adjusted to unity at  = 0. 
Example 2 
Repeat the previous Cheb yshev Type 1 design example using a Cheb yshev Type 
2 lter. 
From the previous example we have c = 10 rad/s., r = 20 rad/s.,  =1/3, 
 =4.358. The procedure to nd the required order is the same as before, and 
we conclude that N = 3. Next, dene 
rc 200  = =   
1 3  =0.1154 TN (r/c) T3(2) 
Determine : 
1 1 1  = sinh1 = sinh1(8.666) = 0.9520 N  3 
and sinh  =1.1024, and cosh  =1.4884.
 
The values of n = (2n  1)/6 for n =1 ... 6 are the same as the design for the
 
78</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G58/G58
/G58/G2D /G36 /G2E /G34 /G33 /G38/G30 /G73/G73 /G2D /G70 /G6C /G61 /G6E /G65/G6A /G31 /G30 /G2E /G33 /G30
/G2D /G33 /G2E /G32 /G31 /G39
/G2D /G6A /G31 /G30 /G2E /G33 /G30/G6A /G572.2 The Cheb yshev Type 2 Filter 
The Cheb yshev Type 2 lter has a monotonically decreasing magnitude function in the pass
band, but introduces equi-amplitude ripple in the stop-band by the inclusion of system zeros 
on the imaginary axis. The Type 2 lter is dened by the power gain function: 
|H(j)| 2 = 1 
N	1 + 2 T 2 (r/c)
 
T 2 (r/)
N (12) 
If we make the substitutions 
rc = and  = 1 
 TN (r/c) 
Eq. 24 may be written in terms of the modied frequency  
H(j) 2 = 2TN 2 (/c)	 | | 1 + 2TN 2 (/c) (13) 
which has a denominator similar to the Type 1 lter, but has a numerator that contains a 
Cheb yshev polynomial, and is of order 2N. We can use a metho d similar to that used in the 
Type 1 lter design to nd the poles as follows: 
1. First dene a complex variable, say	  =  + j (analogous to the Laplace variable 
s =  + j used in the type 1 design) and write the power transfer function: 
2TN |H()| 2 = 1+2TN 2 (/jc) 2 (/jc) 
77</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Type 1 lter, so that the poles of H() 2 are || 
pn =c (sinh  sin n + j cosh  cos n) 
1 
3 
1 =10 1.1024 + j1.4884 =5.512 + j12.890  2  2 
2 = 10 (1.1024  1+ j1.4884  0) = 11.024  
1 
3 
3 =10 1.1024 2  j1.488 =5.512  j12.890   2 
 
1 
3 
4 = 10 1.1024 2  j1.4884 = 5.512  j12.890   2 
 1 
5 = 10 1.1024 
 2  j1.488  0= 11.024
 
 
1 
3 
6 = 10 1.1024 + j1.4884 = 5.512 + j12.890  2  2 
The three left half-plane poles (4,5,6) are mapp ed back to the s-plane using 
s =rc/ giving three lter poles 
p1,p2 = 5.609  j13.117 
p3 = 18.14 
The system zeros are the roots of 
T3(/jc) = 4(/jc)3  3(/jc)=0 
from the denition of TN (x), giving 1 = 0 and 2,3 = j8.666. Mapping these 
back to the s-plane gives two nite zeros z1,z2 = j23.07, z3 =  (the zero at 
 does not aect the system response) and the unity gain transfer function is 
H(s)= p1p2p3 (s  z1)(s  z2) 
z1z2 (s  p1)(s  p2)(s  p3) 
6.9365(s2 + 532.2) = (s + 18.14)(s2 + 11.22s + 203.5) 
The pole-zero plot for this lter is shown in below. Note that the poles again lie 
on ellipse, and the presence of the zeros in the stop-band. 
79</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/G58 /G58 
/G58 /G6F 
/G6F /G73 /G74 /G6F /G70 /G2D /G62 /G61 /G6E /G64 
/G70 /G61 /G73 /G73 /G2D /G62 /G61 /G6E /G64 
/G2D /G31 /G38 /G2E /G31 /G34 /G2D /G35 /G2E /G36 /G31 /G6A /G31 /G33 /G2E /G31 /G32 
/G2D /G6A /G31 /G33 /G2E /G31 /G32 /G6A /G32 /G33 /G2E /G30 /G37 
/G2D /G6A /G32 /G33 /G2E /G30 /G37 /G30 /G6A /G57 
/G73 /G73 /G2D /G70 /G6C /G61 /G6E /G65 
/G6A /G31 /G30 /G6A /G32 /G30 
2.3 Comparison of Filter Resp onses 
Bode plot responses for the three previous example lters are shown below: 
0 1 2 310 10 10 10
Angular frequency (rad/sec) 150 100 50 0 50 Magnitude (dB) 
360 180 0 180 360 Phase (deg) Butterworth (N=4) Chebyshev Type 1 (N=3) Chebyshev Type 2 (N=3) 
Butterworth (N=4) Chebyshev Type 1 (N=3) Chebyshev Type 2 (N=3) 
710</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>we therefore select N=4. The 4 poles (p1 ...p 4) lie on a circle of radius r = c/epsilon11/N =13.16 
and are given by 
|pn| =13.16 
/negationslash pn = (2n+3)/8 
for n=1 ...4, giving a pair of complex conjugate pole pairs 
p1,4 = 5.04  j12.16 
p2,3 = 12.16  j5.04 
The transfer function, normalized to unity gain, is 
29993 H(s)= (s2 +10.07s+ 173.2)(s2 +24.32s+ 173.2) 
and the lter Bode plots are shown below. 
Bode Diagram 
1 0 1 2 310 10 10 10 10
Frequency (rad/sec) 
2 Cheb yshev Filters 
The order of a lter required to met a low-pass specication may often be reduced by relaxing 
the requiremen t of a monotonically decreasing power gain with frequency , and allowing 150 100 50 0 50 Magnitude (dB) 
360 270 180 90 0 Phase (deg) 
72</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>ripple to occur in either the pass-band or the stop-band. The Cheb yshev lters allow 
these conditions: 
Type 1 |H(j)| 2 = 1+ 2TN 1 
2 (/ c)	 (1) 
1 Type 2 |H(j)| 2 = 1+ 2 (TN 2 (r/c)/TN 2 (r/))	 (2) 
Where TN (x) is the Cheb yshev polynomial of degree N. Note the similarit y of the form 
of the Type 1 power gain (Eq. (1)) to that of the Butterw orth lter, where the function 
TN (/c) has replaced (/c)N . The Type 1 lter produces an all-pole design with slightly 
dieren t pole placemen t from the Butterw orth lters, allowing resonan t peaks in the pass
band to introduce ripple, while the Type 2 lter introduces a set of zeros on the imaginary 
axis above r, causing a ripple in the stop-band. 
The Cheb yshev polynomials are dened recursiv ely as follows 
T0(x)	 =1
 
T1(x)	 = x
 
T2(x)	 =2x 2  1
 
T3(x)	 =4x 3  3x
 
. . . 
TN (x) =2xTN1(x)  TN2(x), N&gt; 1 (3) 
with alternate denitions 
TN (x)	 = cos(N cos1(x)) (4) 
= cosh( N cosh1(x)) (5) 
The Cheb yshev polynomials have the min-max property: 
Of all polynomials of degree N with leading coecient equal to one, the polynomial 
TN (x)/2N1 
has the smallest magnitude in the interval x This minimum maximum 
amplitude is 21N .	|| 1. 
In low-pass lters given by Eqs. (13) and (14), this property translates to the following 
characteristics: 
Filter Pass-Band Characteristic Stop-Band Characteristic 
Butterw orth Maximally at Maximally at 
Cheb yshev Type 1 Ripple between 1 and 1/(1 + 2) Maximally at 
Cheb yshev Type 2 Maximally at Ripple between 1 and 1/(1 + 2) 
73</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>2.1 The Cheb yshev Type 1 Filter 
With the power response from Eq. (13) 
1 |H(j)| 2 = 1+ 2TN 2 (/c) 
and the lter specication from Fig. 1, the required lter order may be found as follows. At 
the edge of the stop-band  = r 
1 1 2 |H(jr| = 1+ 2TN 2 (r/c)  1+ 2 
so that 
  TN (r/c)=  cosh 
N cosh1 (r/c) 
and solving for N 
cosh1 (/)N  cosh1 (r/c) (6) 
The characteristic equation of the power transfer function is 
1+ 2TN 2  
j s  
=0 or TN  
j s  
=  j
 c	 c 
Now TN (x) = cos(N cos1(x)), so that 
  s  j cos N cos1 = 	 (7)jc 	 
If we write cos1 (s/jc)=  + j, then 
s	 =c (j cos( + j)) 
=c (sinh  sin  + j cosh  cos ) (8) 
which denes an ellipse of width 2c sinh( ) and heigh t 2c cosh( ) in the s-plane. The 
poles will lie on this ellipse. Substituting into Eq. (16) 
	 s 
TN = cos (N ( + j))jc 
= cos N cosh N  j sin N sinh N, 
the characteristic equation becomes 
j cos N cosh N  j sin N sinh N =  .	 (9) 
Equating the real and imaginary parts in Eq. (21), (1) since cosh x = 0 for real x we require 
cos N = 0, or 
n = (2n  1)n =1,..., 2N (10)2N 
74</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G30 /G31 
/G30 /G2E /G39 
/G30 /G2E /G30 /G35 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 71 
Reading: 
 Class handout: Intr oduction to Continuous Time Filter Design . 
Butterw orth Filter Design Example 
(Same problem as in the Class Handout). Design a Butterw orth low-pass lter to meet the 
power gain specications shown below: 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C/G32 
/G30 /G31 /G30 /G32 /G30 /G57 
/G70 /G61 /G73 /G73 /G20 /G62 /G61 /G6E /G64 /G73 /G74 /G6F /G70 /G20 /G62 /G61 /G6E /G64 /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G20 /G62 /G61 /G6E /G64 
At the two critical frequencies 
1 =0.9  /epsilon1 =0.3333 1+ /epsilon12 
1 =0.05   =4.358 1+ 2 
Then 
log(//epsilon1)N  =3.70 log( r/c) 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
71</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Poles and zeros of filter classes
The decibel
Low-pass filter design</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_06/</lecture_pdf_url>
      <lectureno>6</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/epsilon1 =1, atc the power response response |H(jc)|2 =0.5, the -3 dB response frequency . 
In general we expect the response function to be monotonically decreasing in the transition 
band. 
The lter functions examined in this documen t will be of the form
1
|H(j)|2 = 1+ f2() . (3) 
where f() 0as 0, and f()  as   to generate a low-pass lter action. 
3.1 The Butterw orth Filter 
The Butterw orth lter is dened by the power gain 
1 |H(j)|2 = 
1+ /epsilon12 (/c)2N 
where N is a positive integer dening the lter order. Note that  does not appear in this 
formulation, but clearly N and  are interrelated, since at  = r 
1 1  1+ 2 1+ /epsilon12 (r/c)2N 
which may be solved to show 
log(//epsilon1)N  log(r/c) 
endequation 
The power response function of Butterw orth lters for N =1 ... 5 is shown below: 
0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 
Normalized frequency / c 
Butterw orth lters are also known as maximally at lters because the response has the 
maxim um number of vanishing derivatives at  = 0 and  = for lters of the form of Eq. 
1. 
65 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 Power response
 N=1 
N=5 N increasing |H(j )| 2</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G30 /G31
/G31
/G31
3 Decib els Power Ratio Amplitude Ratio 
-40 0.0001 0.01 
-20 0.01 0.1 
-10 0.1 0.3162 
-6 0.25 0.5 
-3 0.5 0.7071 
0 1.0 1.0 
3 2.0 1.414 
6 4.0 2.0 
10 10.0 3.162 
20 100.0 10.0 
40 10000.0 100.0 
Table 1: Common Decib el quantities and their corresp onding power and amplitude ratios. 
Low-P ass Filter Design 
The protot ype low-pass lter is based upon the magnitude-squared of the frequency response 
function |H(j)|2, or the frequency response power function. The phase response of the lter 
is not considered. We begin by dening tolerance regions on the power frequency response 
plot, as shown below:. 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C/G32 
/G31 /G20 /G2B /G20 /G65 /G32
/G31 /G20 /G2B /G20 /G6C /G32
/G30 /G57 /G63 /G57 /G72 /G57 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G65 /G63 /G29 
/G70 /G61 /G73 /G73 /G20 /G62 /G61 /G6E /G64 /G73 /G74 /G6F /G70 /G20 /G62 /G61 /G6E /G64 /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G20 /G62 /G61 /G6E /G64 
The lter specications are that 
1 |H(j)|2 &gt; 1 for ||&lt; c1+ /epsilon12 
1 and |H(j)|2 &lt; for ||&gt; r,1+ 2 
where c is the cut-o frequency , r is the rejection frequency , and /epsilon1 and  are design 
parameters that select the lter attenuation at the two critical frequencies. For example, if 
64</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G31 
/G30 /G57 /G6A /G57 
/G73 
/G57 /G72 /G57 /G72 /G31 /G32 /G6F /G6F /G6F /G6F /G6F /G6F 
/G78 
/G78 /G78 
/G78 /G78 
/G78 
    2 /G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 
/G6E /G20 /G3D /G20 /G6D /G7C /G48 /G28 /G6A /G57 /G29 /G7C 
/G7A /G65 /G72 /G6F /G73 /G20 /G63 /G6C /G75 /G73 /G74 /G65 /G72 /G65 /G64 /G20 /G6F /G6E /G20 /G6F /G72 /G20 /G6E /G65 /G61 /G72 /G20 /G74 /G68 /G65 /G20 
/G69 /G6D /G61 /G67 /G69 /G6E /G61 /G72 /G79 /G20 /G61 /G78 /G69 /G73 /G20 /G69 /G6E /G20 /G72 /G65 /G67 /G69 /G6F /G6E 
/G6F /G66 /G20 /G74 /G68 /G65 /G20 /G73 /G74 /G6F /G70 /G2D /G70 /G61 /G6E /G64 
/G6E /G6F /G20 /G70 /G6F /G6C /G65 /G73 /G20 /G6F /G72 /G20 /G7A /G65 /G72 /G6F /G73 /G20 /G61 /G74 /G20 /G74 /G68 /G65 /G20 /G6F /G72 /G69 /G67 /G69 /G6E 
The Decib el 
Filter frequency response magnitudes |H(j)| are frequen tly plotted using the decibel log
arithmic scale. The Bel, named after Alexander Graham Bell, is dened as the logarithm 
to base 10 of the ratio of two power levels. In practice the Bel is too large a unit, and the 
decibel (abbreviated dB), dened to be one tenth of a Bel, has become the standard unit of 
logarithmic power ratio. The power ow P into any elemen t in a system, may be expressed 
in terms of a logarithmic ratio Q to a refer ence power level Pref : 
P P Q = log10 Bel or Q = 10 log10 dB. (1)Pref Pref 
Because the power dissipated in a Dtype elemen t is proportional to the square of the 
amplitude of a system variable applied to it, when the ratio of across or through variables is 
computed the denition becomes 
 2   A A Q = 10 log10 = 20 log10 dB. (2)Aref Aref 
where A and Aref are amplitudes of variables. 2 Table ?? expresses some commonly used 
decibel values in terms of the power and amplitude ratios. 
The magnitude of the frequency response function |H (j)| is dened as the ratio of the 
amplitude of a sinusoidal output variable to the amplitude of a sinusoidal input variable. 
This ratio is expressed in decibels, that is 
|Y (j)|20log10 |H(j)| = 20 log10 |U(j)| dB. 
As noted this usage is not strictly correct because the frequency response function does not 
dene a power ratio, and the decibel is a dimensionless unit whereas |H (j)| may have 
physical units. 
2This denition is only strictly correct when the two amplitude quantities are measured across a common 
Dtype (dissipativ e) elemen t. Through common usage, however, the decibel has been eectiv ely redened 
to be simply a convenient logarithmic measure of amplitude ratio of any two variables. This practice is 
widespread in texts and references on system dynamics and control system theory . In this book we have also 
adopted this convention. 
63</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G31
/G30 /G57 /G6A /G57 
/G73 /G78 
/G78 
/G78 /G78 
/G78 /G6F
/G6F 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 61 
Reading: 
 Class handout: Sinusoidal Frequency Response of Line ar Systems (Sec. 7). 
 Class handout: Sinusoidal Frequency Response of Line ar Systems (Sec. 6.1). 
 Class handout: Intr oduction to Continuous Time Filter Design . 
Poles and Zeros of Filter Classes 
We can use the s-plane relationship between a lters poles and zeros and the frequency 
response function to make some general commen ts about the desgn of various classes of 
lters: 
(a) Low-Pass Filters: 
	To ensure a high-frequency roll-o the number of poles must exceed the number 
of zeros, ie n&gt;m . (In many low-pass lters m= 0.) 
	To ensure a nite low frequency gain there can be no poles or zeros at the origin. 
/G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 /G7C /G48	 /G28 /G6A /G57 /G29 /G7C 
/G6E /G20 /G3E /G20 /G6D
/G6E /G6F /G20 /G70 /G6F /G6C /G65 /G73 /G20 /G6F /G72 /G20 /G7A /G65 /G72 /G6F /G73 /G20 /G61 /G74 /G20 /G74 /G68 /G65 /G20 /G6F /G72 /G69 /G67 /G69 /G6E 
(b) High-P ass Filters 
	To ensure a constan t high-frequency gain the number of poles must equal the 
number of zeros, ie n= m. 
	To ensure a low frequency gain that approac hes zero, there must be one or more 
zeros at the origin. 
1copyright /circlecopyrtcD.Rowell 2008 
61</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G73 /G78 /G6A /G57 
/G6E /G3D /G31 
/G6E /G3D /G32 
/G6E /G3D /G33 3.1.1 The Butterw orth Filter Transfer Function 
The poles of the power gain transfer function may be found by substituting s = j in the 
characteristic equation: 2N 
1+ /epsilon12 s =0 jc 
and solving for S, which yields 2N roots pv (n =1 ...2N) that lie on a circle with radius 
r = c/epsilon11/N , and angular separation of /N rad: 
pn = c/epsilon11/N ej(2n+N 1)/2N n=1 ...2N 
Notice that if N is odd a pair of poles will lie on the real axis at s = c/epsilon11/N , while if N 
is even the roots will form complex conjugate pairs. 
The six poles of |H(s)|2 for a third-order (N = 3) Butterw orth lter are shown in (a) 
below: 
/G78 
/G78 
/G78 /G78 
/G78 
/G78 /G6A /G57 
/G32 /G70 /G2F /G36 /G72 /G20 /G3D /G20 /G57 /G20 /G20 /G65 /G2D /G31 /G2F /G4E /G63 /G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 
/G6E /G3D /G31 
/G6E /G3D /G32 
/G6E /G3D /G33 /G6E /G3D /G34 /G6E /G3D /G35 /G6E /G3D /G36 /G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 
/G72 /G20 /G3D /G20 /G57 /G63 /G20 /G20 /G65 /G2D /G31 /G2F /G4E /G78 
/G78 /G73 /G70 /G2F /G33 
/G28 /G61 /G29 /G28 /G62 /G29 
For a stable causal system we must have 
|H(j)|2 = H(j)H(j) = H(s)H(s)|s=j 
with all poles in the left-half-plane, which allows us to take take the N poles of |H(j)|2 in 
the left half-plane as the poles of the lter H(s), that is the poles specied by (n=1 ...N) 
in Eq. (8) above, 
pn = c/epsilon11/N ej(2n+N 1)/2N n=1 ...N (4) 
as is shown in (b) above. 
If the lter is to have unity gain at low frequencies 
lim |H(j)| =1 
0 
we require the complete Butterw orth transfer function to be 
(p1)(p2) ...(pN )H(s)= (s p1)(s p2) ...(s pN ) 
(1)N p1p2 ...p N = ,(s p1)(s p2) ...(s pN )
where only the N stable left-half-plane poles (Eq. 4) are included. 
66</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Design Procedure: 
1. Determine the lter order 
log(/)N  log(r/c) 
2. Determine the Butterw orth radius
 
r =c1/N
 
3. Determine The Butterw orth angles
 
2n + N  1
 n =  n =1 ... 2N 2N 
4. Determine the N left half-plane poles 
pn = rejn n =1,...,N 
5. Form the transfer function 
p1p2 ...pNH(s)= (s  p1)(s  p2) ... (s  pN ) 
67</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G31 
/G30 /G57 /G6A /G57 
/G73 
/G57 /G63 /G78 /G6F /G6F /G6F /G78 
/G78 
/G31 
/G30 /G57 /G73 /G6F /G6F /G6F /G78 /G78 /G78 
/G78 /G78 /G78 /G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 /G7C /G48	 /G28 /G6A /G57 /G29 /G7C 
/G6E /G20 /G3D /G20 /G6D 
/G6E /G20 /G7A /G65 /G72 /G6F /G73 /G20 /G61 /G74 /G20 /G74 /G68 /G65 /G20 /G6F /G72 /G69 /G67 /G69 /G6E 
(c) Band-P ass Filters 
	To ensure a high-frequency roll-o the number of poles must exceed the number 
of zeros, ie n&gt;m . 
	To ensure a low frequency gain that approac hes zero, there must be one or more 
zeros at the origin. 
	The band-pass characteristic is shaped by a group of poles clustered near the 
imaginary axis in the region of the passband, 
/G6A /G57 /G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65/G7C /G48	 /G28 /G6A /G57 /G29 /G7C 
/G6E /G20 /G3E /G20 /G6D 
/G70 /G6F /G6C /G65 /G73 /G20 /G63 /G6C /G75 /G73 /G74 /G65 /G72 /G65 /G64 /G20 /G6E /G65 /G61 /G72 /G20 /G74 /G68 /G65 /G20 
/G69 /G6D /G61 /G67 /G69 /G6E /G61 /G72 /G79 /G20 /G61 /G78 /G69 /G73 /G20 /G69 /G6E /G20 /G72 /G65 /G67 /G69 /G6F /G6E 
/G6F /G66 /G20 /G74 /G68 /G65 /G20 /G70 /G61 /G73 /G73 /G2D /G70 /G61 /G6E /G64 
/G6F /G6E /G65 /G20 /G6F /G72 /G20 /G6D /G6F /G72 /G65 /G20 /G7A /G65 /G72 /G6F /G73 /G20 /G61 /G74 /G20 /G74 /G68 /G65 /G20 /G6F /G72 /G69 /G67 /G69 /G6E 
/G57 /G63 /G31 /G57 /G63 /G32 
(d) Band-Stop Filters 
	To ensure a constan t high-frequency gain the number of poles must equal the 
number of zeros, ie n= m. 
	To ensure a nite low frequency gain there can be no poles or zeros at the origin. 
	The band-reject characteristic is shaped by a group of zeros clustered on or near 
the imaginary axis in the region of the stopband, 
62</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Continuous LTI system time-domain response
Sinusoidal response of LTI continuous systems</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_02/</lecture_pdf_url>
      <lectureno>2</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/parenleftbig	 /parenrightbig 
/parenleftbig	 /parenrightbig 2 Sinusoidal Resp onse of LTI Con tinuous Systems 
Of particular interest is the response of an LTI continuous system to sinusoidal inputs of the 
form u(t)= A sin(t + ), where A is the amplitude,  is the angular frequency (rad/s), 
and  is a phase angle (rad). (We note that we can also write u(t)= A sin(2Ft + ), where 
F is the frequency in Hz.) 
We begin by noting that a sinusoid may be expressed in terms of complex exponentials 
through the Euler formulas: 
sin(t)= 1 /parenleftbig 
ejt e jt /parenrightbig 
2j 
cos(t)=1 /parenleftbig 
ejt + e jt /parenrightbig 
2 
and rst nding the steady-state solution to inputs of the form u(t)= ejt . Let the LTI 
system be describ ed by an ODE of the form 
dny dn1y dy dmu dm1u du an + an1 + + a1 + a0y = bm + bm1 + + b1 + b0u. dtn dtn1 dt dtn dtm1 dt 
The steady-state response of the system (after all initial condition transien ts have decayed) 
may be found using the method of undetermine d coecients , in which a form of the solution 
is assumed and solved for a set of coecien ts. In particular, if the input is u(t)= ejt , 
assume that 
y(t)= Bejt . 
Substitution into the dieren tial equation gives 
an(j)n + an1(j)n1 + + a1(j) + a0 Bejt 
= bm(j)m + bn1(j)m1 + + b1(j) + b0 ejt 
and solving for B 
an(j)n + an1(j)n1 + + a1(j) + a0B = bm(j)m + bn1(j)m1 + + b1(j) + b0 
so that 
y(t)= H(j)ejt 
where 
N(j) an(j)n + an1(j)n1 + + a1(j) + a0H(j)= = D(j) bm(j)m + bn1(j)m1 + + b1(j) + b0 
H(j) is dened to be the frequency response function , and N(j) and D(j) are the 
numerator and denominator polynomials respectively. We note the following: 
	The output y(t) is simply a (multiplicativ ely) weighted version of the input. 
	H(j) is a property of the system. It is dened entirely by the describing dieren tial 
equation. 
25</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G75 /G28 /G74 /G29 /G75 /G28 /G74 /G29 
/G74 
 
     
/summationdisplay 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discrete 
Fall Term 2008 
Lecture 21 
Reading: 
 Class handout: Convolution 
 Class handout: Sinusoidal Frequency Response 
Con tinuous LTI System Time-Domain Resp onse 
A continuous linear lter is a LTI dynamical system (describ ed by an ODE with constan t 
coecien ts). We are interested in the input-output relationships and seek a metho d of 
determining the response y(t) to a given input u(t). 
/G4C /G54 /G49 /G20 /G46 /G69 /G6C /G74 /G65 /G72 /G79 /G28 /G74 /G29 /G20 /G3D /G20 /G3F 
/G69 /G6E /G70 /G75 /G74 /G6F /G75 /G74 /G70 /G75 /G74 
/G73 /G79 /G73 /G74 /G65 /G6D /G20 /G69 /G73 /G20 /G61 /G74 /G20 /G72 /G65 /G73 /G74 /G20 /G61 /G74 /G20 /G74 /G3D /G30 
The relationship is developed as follows (see the handout for a detailed explanation) 
 The input u(t) is approximated as a zero-order (staircase) waveform uT (t) with intervals 
T . 

         
 
        
uT (t)= u(nT ) for nT  t&lt; (n +1)T. 
 The approximation uT (t) is written as a superposition of non-overlapping pulses 
 
uT (t)= pn(t) 
n= 
c1cop yrigh t /circlecopyrt D.Ro well 2008 
21</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>See the class handout for further details and examples.
24</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>is describ ed by the dieren tial equation 
dvoRC + vo = Vin(t)dt 
Find the frequency response function. 
By inspection 
1 H(j) = jRC+1 
and 
|H(j)| = |1| = /radicalbig 1 
|1+ jRC| (RC)2 +1 
/negationslash H(j) = /negationslash (1) /negationslash (1 + jRC) = 0 tan1 (RC) 
Clearly , as  0, |H(j)|1, and /negationslash H(j) 0 rad. As  , |H(j)|0, 
and /negationslash H(j) /2 rad (-90).
This is a low-pass lter, in that it passes low frequency sinusoids while attenuating
high frequencies.
Example 2 
A new rst-order passiv e RC lter is formed by exchanging the resistor and 
capacitor in the previous example: 
/G52 /G43 
/G76 /G20 /G20 /G28 /G74 /G29/G6F /G2B 
/G2D /G56 /G20 /G20 /G28 /G74 /G29 /G69 /G6E 
and is now describ ed by the dieren tial equation 
dvo dVinRC + vo = RC dt dt 
Find the frequency response function. 
By inspection 
jRC H(j) = jRC+1 
and 
|H(j)| = |jRC| = /radicalbig RC 
|1+ jRC| (RC)2 +1 
/negationslash H(j) = /negationslash (jRC) /negationslash (1 + jRC) =  tan1 (RC)2 
27</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/integraldisplay 
/G75 /G28 /G74 /G29 /G75 /G28 /G74 /G29 
/G74 
/integraldisplay  We now let the pulse width T become very small, and write nT = , T = d , and note 
that limT 0 T (t)= (t). As T  0 the summation becomes an integral and 
N /summationdisplay 
y(t) = lim 
T 0 u(nT )hT (t  nT )T 
n= /integraldisplay t 
= u()h(t  )d (1) 
 
where h(t) is dened to be the system impulse response, 
h(t) = lim hT (t). 
T 0 
Equation (??) is an important integral in the study of linear systems and is known as the 
convolution or superposition integral. It states that the system is entirely characterize d by its 
response to an impulse function (t), in the sense that the forced response to any arbitrary 
input u(t) may be computed from knowledge of the impulse response alone. The convolution 
operation is often written using the symbol : 
t 
y(t)= u(t)  h(t)= u()h(t  )d. (2) 
 
Equation (??) is in the form of a linear operator, in that it transforms, or maps, an input 
function to an output function through a linear operation. 
/G63 /G6F /G6E /G76 /G6F /G6C /G75 /G74 /G69 /G6F /G6E 
/G4C /G54 /G49 /G20 /G46 /G69 /G6C /G74 /G65 /G72 
/G79 /G28 /G74 /G29 /G20 /G3D /G20 /G75 /G28 /G74 /G29 /G20 /G4F /G58 /G20 /G68 /G28 /G74 /G29 
/G69 /G6E /G70 /G75 /G74 /G68 /G28 /G74 /G29 /G6F /G75 /G74 /G70 /G75 /G74 
The form of the integral in Eq. (??) is dicult to interpret because it contains the term 
h(t  ) in which the variable of integration has been negated. The steps implicitly involved 
in computing the convolution integral may be demonstrated graphically below. The impulse 
response h() is reected about the origin to create h(), and then shifted to the right 
by t to form h(t  ). The product u(t)h(t  ) is then evaluated and integrated to nd 
the response. This graphical represen tation is useful for dening the limits necessary in the 
integration. For example, since for a physical system the impulse response h(t) is zero for all 
t&lt; 0, the reected and shifted impulse response h(t  ) will be zero for all time &gt;t. The 
upper limit in the integral is then at most t. If in addition the input u(t) is time limited, 
that is u(t)  0 for t&lt;t 1 and t&gt;t 2, the limits are: 
 t    u()h(t  )d for t&lt;t 2 
yf (t)= /integraldisplay t1 t2 (3)    u( )h(t  )d for t  t2 
t1 
23</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/summationdisplay 
/G54 /G54 
/G74 /G30 /G31 /G2F /G54
/G30 /G6E
/summationdisplay 
 
/summationdisplay where /braceleftbigg
u(nT ) nT  t&lt; (n +1)T
pn(t)= 0 otherwise 
For example, p3(t) is shown cross-hatc hed in the gure above. 
	Each component pulse pn(t) is written in terms of a delayed unit pulse T (t), of width 
T and amplitude 1/T that is: 
pn(t)= u(nT )T (t  nT )T 
so that  
uT (t)= u(nT )T (t  nT )T. 
n= 
	Assume that the system response to an input T (t) is a known function, and is desig
nated hT (t) as shown below. If the system is linear and time-in variant, the response 
to a delayed unit pulse, occurring at time nT is simply a delayed version of the pulse 
response: 
yn(t)= hT (t  nT ) 
/G64 /G20 /G28 /G74 /G2D /G6E /G54 /G29 /G79 /G20 /G28 /G74 /G29 
/G64 /G20 /G28 /G74 /G2D /G6E /G54 /G29 /G73 /G79 /G73 /G74 /G65 /G6D /G79 /G6E/G20 /G28 /G74 /G29
/G30 /G6E /G54 /G28 /G6E /G2B /G31 /G29 /G54	 /G30 /G6E /G54 /G28 /G6E /G2B /G31 /G29 /G54 /G74 
	The principle of superposition allows the total system response to uT (t) to be written 
as the sum of the responses to all of the component weighted pulses: 
 
yT (t)= u(nT )hT (t  nT )T 
n= 
        
        
   
For causal systems the pulse response hT (t) is zero for time t&lt; 0, and future com
ponents of the input do not contribute to the sum, so that the upper limit of the 
summation may be rewritten: 
N 
yT (t)= u(nT )hT (t  nT )T for NT  t&lt; (N +1)T. 
n= 
22</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/parenleftbig	 /parenrightbig 
/parenleftBig	 /parenrightBig 
/G52 	H(j) is, in general, complex. Even powers of n and m in N(s) and D(s) will generate 
real terms in the polynomials, while odd powers will generate imaginary terms. 
|H(j)| = |N(j)|
|D(j)|
/negationslash H(j) = /negationslash N(j)  /negationslash D(j) 
 H(j) = H(j), where H(j) is the complex conjugate. 
The response to the real sinusoid 
A /parenleftbig /parenrightbig 
u(t)= A sin(t + )= ej(t+)  e j(t+) 
2j 
may be found from the principle of superposition by summing the response to each compo
nent: 
y(t)= AH(j)ej(t+)  H(j)e j(t+) 
2j 
= AH(j)ej(t+)  H(j)e j(t+) 
2j 
Combining the real and imaginary parts gives the result 
y(t)= A |H(j)| sin(t +  + /negationslash H(j)) 
where |H(j)| is the magnitude of the frequency response function, and /negationslash H(j) is the phase 
response. 
	The response to a real sinusoid is therefore a sinusoid of the same frequency as the 
input. 
	The amplitude of the response at an input frequency of  has been modied by a factor 
|H(j)|.If |H(j)| &gt; 1 the input has been amplie d by the system, if |H(j)| &lt; 1, 
the signal has been attenuate d. 
	The system has imposed a frequency dependen t phase shift /negationslash H(j) on the response. 
Example 1 
A rst-order passiv e RC lter with the following circuit diagram 
/G43 /G76 /G20 /G20 /G28 /G74 /G29/G6F /G2B 
/G2D /G56 /G20 /G20 /G28 /G74 /G29 /G69 /G6E 
26</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Clearly , as   0, |H(j)| 0, and  H(j)  /2 rad (90). As , 
|H(j)| 1, and  H(j)  0 rad (0). 
This is a high-p ass lter, in that it atten uates low frequency sinusoids while 
passing high frequencies. 
28</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The design of IIR filters (cont.)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_19/</lecture_pdf_url>
      <lectureno>19</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G30 /G31 /G32 /G33 /G34 /G35 /G360/G31/G32/G33/G34/G35
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G29/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G52 /G65 /G73 /G70 /G6F /G6E /G73 /G65 /G20 /G4D /G61 /G67 /G6E /G69 /G74 /G75 /G64 /G65
/G70 /G72 /G6F /G74 /G6F /G74 /G79 /G70 /G65
/G6D /G61 /G74 /G63 /G68 /G65 /G64 /G20 /G7A /G2D /G74 /G72 /G61 /G6E /G73 /G66 /G72 /G6F /G6DExample 2 
Use the matched z-transform metho d to design a second-order band-pass lter 
based on the protot ype lter 
s Hp(s)= s2 +0.2s +1 
with a sampling interval T =0.5 sec. Make frequency response plots to compare 
the protot ype and digital lters. 
Solution: The protot ype lter as a zero at s = 0, and a complex conjugate 
pole pair at s = 0.1  j0.995, so that 
H(z)= Kz  1 
(z  e(0.1+j 0.995) T )(z  e(0.1j0.995)T ) 
= K z  1 
z2  1.6718z +0.9048 
To nd K, compare the gains at  = 1 rad/s (the peak response of Hp(j)), 
Hp(j)=1 =5 H|
(ejT )|
=1 = 10.54K. 
and to match the gains K =5/10.54 = 0.4612, and 
H(z)= 2 0.4612( z  1) 
z 1.6718z +0.9048 
193</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G7C /G48 /G28 /G6A /G32 /G70 /G46 /G29 /G7C
/G30
/G30 /G46 /G20 /G28 /G48 /G7A /G29/G31
/G70 /G61 /G73 /G73 /G20 /G62 /G61 /G6E /G64 /G73 /G74 /G6F /G70 /G20 /G62 /G61 /G6E /G64 /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G20 /G62 /G61 /G6E /G64/G32
/G3D /G20 /G30 /G2E /G39
/G3D /G20 /G30 /G2E /G30 /G35
/G32 /G30 /G31 /G30/G31 /G20 /G2B /G20 /G65/G31
/G32
/G31 /G20 /G2B /G20 /G6C/G31
/G32we would pre-w arp the frequencies c and r to 
2 cT 2 rT 
c = tan , and 
r = tan T 2 T 2 
and design the protot ype to meet the specications with 
c and 
c as the band edges. 
Design Procedure: For any class of lter (band-pass, band-stop) the procedure is: 
(1) Dene all band-edge critical frequencies for the digital lter. 
(2) Pre-w arp all critical frequencies using  =(T/2)tan( T/2). 
(3) Design the continuous protot ype using the pre-w arped frequencies. 
(4) Use the bilinear transform to transform Hp(s) to H(z). 
(5) Realize the digital lter as a dierence equation. 
Example 5 
Use the bilinear transform metho d to design a low-pass lter, with T = .01 sec., 
based on a protot ype Butterw orth lter to meet the following specications. 
Solution: Pre-w arp the band-edges: 
2 cT 

c = tan = 64.9839 rad/s T 2 
2 rT 

r = tan = 145.3085 rad/s . T 2 
From the specications  =0.3333 and  =4.358, and the required order for the 
protot ype Butterw orth lter is 
log(/)N  log(
r/
c)=3.1946 
198</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G30 /G31 /G30 /G32 /G30 /G33 /G30 /G34 /G30 /G35 /G30/G30/G30 /G2E /G32/G30 /G2E /G34/G30 /G2E /G36/G30 /G2E /G38/G31
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G48 /G7A /G29/G50 /G6F /G77 /G65 /G72 /G20 /G52 /G65 /G73 /G70 /G6F /G6E /G73 /G65 /G20 /G7C /G48 /G28 /G6A /G32 /G70 /G46 /G29 /G7C/G32
/G46so take N = 4. The four poles (p1,...,p4) lie on a circle of radius 
c1/N = 
82.526, 
|pn| = 82.526, 
 pn = (2n + 3)/8 
for n =1 ... 4. The protot ype transfer function is 
p1p2p3p4Hp(s)= (s  p1)(s  p2)(s  p3)(s  p4) 
5.3504  107 
= . s4 + 223.4897s3 + 24974 s2 +1.6348  106s +5.3504  107 
Applying the bilinear transform 
H(z)= Hp(s)|s= (z1 )2 
Tz+1 
gives 
0.0112(1 + z1)4 
H(z)= 1.0000  1.9105z1 +1.6620z2  0.6847z3 +0.1128 z4 
and the frequency response of the digital lter (as a power gain) is shown below: 
199</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Solution:
 a H(z)= s + a s= 2 (z1 
Tz+1 ) 
(aT/2)(z + 1) = (z  1) + (aT/2)(z + 1) 
(aT/2)(1 + z1) = (1 + aT/2)  (1  aT/2)z1 
and the dierence equation is 
1  aT/2 aT/2 yn = 1+ aT/2yn1 + 1+ aT/2 fn. 
Comparing the frequency responses of the two lters, 
H(ejT )
=0 =1 0= Hp(j0) 
 lim H(ejT )=0 
= lim Hp(j), 
/T   2  
demonstrating the assertion above that the entire frequency response of the pro
totype lter has been transformed to the unit circle. 
1.2.1 Frequency Warping in the Bilinear Transform 
The mapping 
2 z  1 
s  Tz +1
implies that when z =ejT ,
jT
s =2  e 1 
=j 2tan T  
T ejT +1 T 2 
so that 2 T 
H(ejT )= Hp j tan T 2 
which gives a nonlinear warping of the frequency scales in the frequency response of the two 
lters. 
196</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G7C /G48 /G28 /G6A /G57 /G29 /G7C
/G30
/G30 /G57 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G65 /G63 /G29 /G57 /G57/G63 /G72/G31
/G31 /G20 /G2B /G20 /G65/G31
/G32
/G31 /G20 /G2B /G20 /G6C/G31
/G32
/G70 /G61 /G73 /G73 /G20 /G62 /G61 /G6E /G64 /G73 /G74 /G6F /G70 /G20 /G62 /G61 /G6E /G64 /G74 /G72 /G61 /G6E /G73 /G69 /G74 /G69 /G6F /G6E /G20 /G62 /G61 /G6E /G64/G32
/G2D /G70 /G2F /G54
/G70 /G2F /G54/G57/G57
/G64/G70
/G20 /G20 /G20 /G20 /G74 /G61 /G6E/G32
/G54/G57 /G54
/G20 /G32
/G57
/G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G69 /G6E /G20 /G64 /G69 /G67 /G69 /G74 /G61 /G6C /G20 /G66 /G69 /G6C /G74 /G65 /G72/G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G69 /G6E /G20 /G70 /G72 /G6F /G74 /G6F /G74 /G79 /G70 /G65 /G20 /G66 /G69 /G6C /G74 /G65 /G72In particular 
H(ej0)= Hp (j0) , and H(ej )= Hp (j ) 
and there is no aliasing in the frequency response. 
1.2.2 Pre-w arping of Critical Frequencies in Bilinear Transform Filter Design 
The specications for a digital lter must be done in the digital domain, that is the critical 
band-edge frequencies must relate to the performance of the nal design -not the continuous 
protot ype. 
Therefore, in designing the continuous protot ype we need to choose band-edge frequencies 
that will warp to the correct values after the bilinear transform. This procedure is known as 
pre-warping. For example, if we are given a specication for a digital low-pass lter such as 
197</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>The steps in the design procedure are: 
1. Determine the poles and zeros of the protot ype lter Hp(s). 
2. Map the poles and zeros to the z-plane using z =esT . 
3. Form the z-plane transfer function with the transformed poles/zeros. 
4. Determine the gain constan t K by matching gains at some frequency (for a low-pass 
lter this is normally the low frequency response). 
5. Add poles or zeros at z = 0 to adjust the delay of the lter (while maintaining causal
ity). 
Example 1 
Use the matched z-transform metho d to design a lter based on the protot ype 
rst-order low-pass lter a Hp(s)= . s + a 
Solution: The protot ype has a single pole at s = a, and therefore the digital 
lter will have a pole at z =eaT . The transfer function is 
1 H(z)= K 
z  eaT . 
To nd K, compare the low frequency gains of the two lters: 
lim Hp(j) = 1 
0
K
lim H(ej)= , 
0 1  eaT 
therefore choose K =1  eaT . Then 
1  eaT (1  eaT )z1 
H(z)= = z  eaT 1  eaT z1 
and the dierence equation is 
yn =eaT yn1 + (1  eaT )fn1. 
Note that this is not a minim um delay lter, because it does not use fn. Therefore 
we can optionally add a zero at the origin, and take 
(1  eaT )z (1  eaT )H(z)= = z  eaT 1  eaT z1 
as the nal lter design. 
192</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G73 /G2D /G70 /G6C /G61 /G6E /G65/G7A /G2D /G70 /G6C /G61 /G6E /G65
/G73/G6A /G57
/GC2 /G7B /G7A /G7D/GC1 /G7B /G7A /G7D
/G57 /G54/G6A /G57/G70Example 3 
Find the bilinear transform equiv alent of an integrator 
1 Hp(s) = s . 
Solution: 
1T  1+ z1 
H(z)= s =2 s= 2 (z1 )1  z1 
Tz+1 
and the dierence equation is 
T yn = yn1 +(fn + fn1)2 
which is the classical trapezoidal (or mid-p oint) rule for numerical integration. 
The bilinear transform maps the left half s-plane to the interior of the unit circle, and thus 
preserv es stabilit y. In addition, we will see below that it maps the entire imaginary axis of 
the s-plane to the unit circle, and thus avoids aliasing in the frequency response. 
Thus every point on the frequency response of the continuous-time protot ype lter, is mapp ed 
to a corresp onding point in the frequency response of the discrete-time lter, although with a 
dieren t frequency . This means that every feature in the frequency response of the protot ype 
lter is preserv ed, with identical gain and phase shift, at some frequency the digital lter. 
Example 4 
Find the bilinear transform equiv alent of a rst-order low-pass lter 
a Hp(s)= . s + a 
195</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>To create a minim um delay lter, make the order of the numerator and denomi
nator equal by adding a zero at the origin, 
0.4612z (z  1) 0.4612(1  z1)H(z)= = z2  1.6718 z +0.9048 1  1.6718 z1 +0.9048z2 
and implemen t the lter as 
yn =1.6718y n1  0.9048y n2 +0.4612( fn  fn1). 
1.2 Design by the Bilinear Transform 
As noted above, the ideal mapping of a protot ype lter to the z-plane is 
Hp sTz=e (s)  H(z)|
or 1 s  T ln(z) 
so that 
H(z)= Hp(s)|s= T 1 ln(z) . 
The Lauren t series expansion for ln(z) is 

z  11 z  13 1 z  15  
ln(z)=2 + + + for {z} 0,z =0. z +1 3 z +1 5 z +1  
The bilinear transform metho d uses the truncated series appro ximation 
1 2 z  1 
s  T ln(z)  Tz +1 
In a more general sense, any transformation of the form 
z  1 s + A 
s = A which implies z z +1 =  s  A 
is a bilinear transform. In particular, when A =2/T the metho d is known as 
Tustins metho d. 
With this transformation the digital lter is designed from the protot ype using 
H(z)= Hp(s)|s= 2 (z1 )Tz+1 
194</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G6A /G70 /G2F /G54
/G2D /G6A /G70 /G2F /G54/G6F /G6F /G78 /G78/G78
/G78/G6F
/G6F/G6F
/G6F/G78
/G78/G73 /G2D /G70 /G6C /G61 /G6E /G65/G7A /G2D /G70 /G6C /G61 /G6E /G65
/G73/G6A /G57
/GC2 /G7B /G7A /G7D/GC1 /G7B /G7A /G7D/G70 /G72 /G69 /G6D /G61 /G72 /G79
/G73 /G74 /G72 /G69 /G70 Massa chusetts Institute of Technology
Department of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 191 
Reading: 
Proakis and Manolakis: Sec. 10.3.3  
 Oppenheim, Schafer, and Buck: Sec. 7.1 
1 The Design of IIR Filters (continued) 
1.1 Design by the Matc hed z-Transform (Root Matc hing) 
Given a protot ype continuous lter Hp(s), 
M
Hp(s)= K k=1(s  zk)
N (s  pk)k=1
with zeros zk, poles pk, and gain K, the matched z-transform metho d appro ximates the ideal 
mapping 
sT Hp(s)  H(z)|z=e
by mapping the poles and zeros 
M zk T )H(z)= Kk=1(z  e N (z  epkT )k=1
where K must be determined from some empirical response comparison between the pro
totype and digital lters. Note that an implicit assumption is that all s-plane poles and 
zeros must lie in the primary strip in the s-plane (that is |(s)| &lt; /T ). Poles/zeros on the 
s-plane imaginary axis will map to the unit circle, and left-half s-plane poles and zeros will 
map to the interior of the unit circle, preserving stabilit y. 
1copyrigh t cD.Ro well 2008 
191</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The discrete-time transfer function
The transfer function and the difference equation
Introduction to z-plane stability criteria
The frequency response of discrete-time systems
The Inverse z-Transform</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_14/</lecture_pdf_url>
      <lectureno>14</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>In general, the computation can become tedious, and it may be dicult to recognize 
the general term from the rst few terms in the sequence. 
1413</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G6F 
/G31 /GC1 /G7B /G7A /G7D 
/braceleftBigg 3 Introduction to z-plane Stabilit y Criteria 
The stabilit y of continuous time systems is governed by pole locations -for a system to be 
BIBO stable all poles must lie in the l.h. s-plane. Here we do a preliminary investigation of 
stabilit y of discrete-time systems, based on z-plane pole locations of H(z). 
Consider the pulse response hn of the causal system with 
z 1 H(z)= = z a 1  az1 
with a single real pole at z= aand with a dierence equation 
yn = ayn1 + fn. 
/G7A /G2D /G70 /G6C /G61 /G6E /G65 
/G61 /G3C /G2D /G31 /G2D /G31 /G3C /G61 /G3C /G30 /G30 /G3C /G61 /G3C /G31 /G61 /G3E /G31 /G78 /GC2 /G7B /G7A /G7D 
/G70 /G6F /G6C /G65 /G20 /G6C /G6F /G63 /G61 /G74 /G69 /G6F /G6E 
Clearly the pulse response is 
1 n=0 hn = an n 1 
The nature of the pulse response will depend on the pole location: 
0 &lt;a&lt; 1: In this case hn = an will be a decreasing function of nand limn hn = 0 and 
the system is stable . 
a=1: The dierence equation is yn = yn1 + fn (the system is a summer and the impulse 
response is hn = 1, (non-deca ying). The system is marginally stable . 
a&gt;1: In this case h= an will be a increasing function of nand limn h=  and the n n 
system is unstable. 
1 &lt;a&lt; 0: In this case hn = an will be a oscillating but decreasing function of n and 
limn hn = 0 and the system is stable . 
a= 1: The dierence equation is yn = yn1 + fn and the impulse response is hn =(1)n , 
that is a pure oscillator. The system is marginally stable . 
a&lt;1: In this case hn = an will be a oscillating but increasing function of nand limn |hn| = 
 and the system is unstable. 
144</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/GC2 /G7B /G7A /G7D /G30 
/summationdisplay 
/GC2 /G7B /G7A /G7D /G4E Alternativ ely, the frequency response may be based on a physical frequency  associated 
with an implied sampling interval T, and 
H(ejT )= H(z)| jT z=e
which is again evaluated on the unit circle, but at angle T.
/G57 /G20 /G69 /G6E /G63 /G72 /G65 
/G4E /G79 /G71 /G75 /G69 /G73 /G74 /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 
/G57 /G20 /G3D /G20 /G70 /G2F /G44 /G7A /G2D /G70 /G6C /G61 /G6E /G65 /GC1 /G7B /G7A /G7D 
/G31 /G2D /G31 /G6A /G31 
/G2D /G6A /G31 /G57 /G44 /G54 /G65 /G6A /G57 /G44 /G54 
/G57 /G3D /G30 /G54 /G61 /G73 /G69 /G6E /G67 /G20 /G3C /G20 /G57 /G20 /G3C /G20 /G70 /G2F /G44 /G54 
/G20 /G3C /G20 /G57 /G20 /G3C /G20 /G30 /G54 /G79 
/G57 /G20 /G3D /G20 /G2D /G70 /G2F /G44 
/G2D /G70 /G2F /G44 /G54 
From the denition of the DTFT based on a sampling interval T 
 
H  (j) = hmjnT = H(z)| n e z=emjnT 
n=0 
we can dene the mapping between the imaginary axis in the s-plane and the unit-circle in 
the z-plane 
s=jo  z=ejoT 
/G7A /G2D /G70 /G6C /G61 /G6E /G65 /GC1 /G7B /G7A /G7D 
/G31 /G2D /G31 /G6A /G31 
/G2D /G6A /G31 /G57 /G44 /G54 /G65 /G6A /G57 /G20 /G20 /G44 /G54 
/G57 /G3D /G30 /G57 /G20 /G3D /G20 /G70 /G2F /G44 /G54 
/G57 /G20 /G3D /G20 /G2D /G70 /G2F /G44 /G54 /G4E /G79 /G71 /G75 /G69 /G73 /G74 /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G73 /G2D /G70 /G6C /G61 /G6E /G65 
/G6A /G70 /G2F /G44 /G54 
/G2D /G6A /G70 /G2F /G44 /G54 /G79 /G71 /G75 /G69 /G73 /G74 /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G6A /G57 
/G73 /G6A /G57 /G6F /G6F /G6D /G61 /G70 /G70 /G69 /G6E /G67 
/G22 /G70 /G72 /G69 /G6D /G61 /G72 /G79 /G22 /G20 /G73 /G74 /G72 /G69 /G70 
The periodicity in H(ejT ) can be clearly seen, with the primary strip in the s-plane 
(dened by  /T&lt; &lt;/T) mapping to the complete unit-circle. Within the primary 
strip, the l.h. s-plane maps to the interior of the unit circle in the z-plane, while the r.h. 
s-plane maps to the exterior of the unit-circle. 
146</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>from which 1 yn  yn1 = fn1  6fn2 +8fn3,2
or 
1 yn = yn1 +(fn1  6fn2 +8fn3). 2
The reverse holds as well: if we are given the dierence equation, we can dene the system 
transfer function. 
Example 2 
Find the transfer function (expressed in powers of z) for the dierence equation 
yn =0.25yn2 +3fn  3fn1 
and plot the system poles and zeros on the z-plane. 
Solution: Taking the z-transform of both sides 
Y (z)=0.25z 2Y (z)+3F (z)  3z 1F (z) 
and reorganizing 
Y (z) 3(1  z1)3z(z  1)H(z)= = = F (z)1  0.25z2 z2  0.25 
which has zeros at z =0, 1 and poles at z = 0.5, 0.5:
/G7A /G2D /G70 /G6C /G61 /G6E /G65 
/G6F /G6F /G78 /G78 
/G31 /G30 /G2E /G35 /G2D /G30 /G2E /G35 /GC1 /G7B /G7A /G7D 
/GC2 /G7B /G7A /G7D 
143</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/bracketleftbig /bracketrightbig 
/parenleftBigg /parenrightBigg /summationdisplay The impulse response is 
hn = Z 1 { H(z)} = Res H(z)z n1 ,  1 =(n + 1)( 1)n . 
/G32 /G34 /G36 /G38 /G31 /G30 /G31 /G32 /G31 /G34 /G31 /G36 /G31 /G38 
/G2D /G32 /G30 /G2D /G31 /G30 /G30 /G31 /G30 /G32 /G30 /G68 /G6E 
/G6E 
Other metho ds of determining the inverse z-transform include: 
Partial Fraction Expansion: This is a table look-up metho d, similar to the metho d 
used for the inverse Laplace transform. Let F (z) be written as a rational function of 
z1: 
/summationtextM bizk 
F (z)= k=0 /summationtextN kaizk=0 /producttextM 1) (1  cizk=1= /producttextN (1  diz1)k=1
If there are no repeated poles, F (z) may be expressed as a set of partial fractions. 
N /summationdisplay AkF (z)= 1  dkz1 
k=1 
where the Ak are given by the residues at the poles 
Ak = lim (1  dkz 1)F (z). 
zdk 
Since 
Z 1 (dk)n un  1  dkz1 
N 
fn = Ak (dk)n un. 
k=1 
1410</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/parenleftbig /parenrightbig /parenleftbig /parenrightbig 2 In general, for LTI systems the transfer function will be a rational function of z, and may 
be written in terms of z or z1, for example 
N(s) b0 + b1z1 + b2z2 + ...+ bM zM 
H(z)= = D(s) a0 + a1z1 + a2z2 + ...+ aN zN 
where the bi,i =0,...,m , ai,i =0,...,n are constan t coecien ts. 
The Transfer Function and the Dierence Equation 
As dened above, let 
Y(z) b0 + b1z1 + b2z2 + ...+ bM zM 
H(z)= = F(z) a0 + a1z1 + a2z2 + ...+ aN zN 
and rewrite as 
a0 + a1z 1 + a2z 2 + ...+ aN z N Y(z)= b0 + b1z 1 + b2z 2 + ...+ bM z M F(z) 
If we apply the z-transform time-shift property 
Z{fnk} = z kF(z) 
term-b y-term on both sides of the equation, (eectiv ely taking the inverse z-transform) 
a0yn + a1yn1 + a2yn2 + ...+ aN ynN = b0fn + b1fn1 + b2fn2 + ...+ bM fnM 
and solve for yn 
1 1 yn =  (a1yn1 + a2yn2 + ...+ aN ynN )+ (b0fn + b1fn1 + b2fn2 + ...+ bM fnM ) a0 a0 
N /parenleftbigg/parenrightbigg M /parenleftbigg/parenrightbigg /summationdisplay ai /summationdisplay bi
= yni + fni
a0 a0i=1 i=0 
which is in the form of a recursiv e linear dierence equation as discussed in Lecture 13. 
The transfer function H(z) directly denes the computational dif
ference equation used to implemen t a LTI system. 
Example 1 
Find the dierence equation to implemen t a causal LTI system with a transfer 
function 
(1  2z1)(1  4z1)H(z)= z(1  1
2 z1) 
Solution: 
z1  6z2 +8z3 
H(z)= 1  1 z1 
2 
142</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/contintegraldisplay 
/summationdisplay 5 Aside: We use the argumen t to dieren tiate between the various classes of transfer 
functions: 
H(s) H(j) H(z) H(ej ) 
/arrowdblbothv /arrowdblbothv /arrowdblbothv /arrowdblbothv 
Continuous Continuous Discrete Discrete 
Transfer Frequency Transfer Frequency 
Function Response Function Response 
The Inverse z-Transform 
The formal denition of the inverse z-transform is as a contour integral in the z-plane, 
1 /contintegraldisplay  
F(z)z n1 dz 2j  
where the path is a ccw contour enclosing all of the poles of F(z). 
Cauchys residue theorem states 
1  /summationdisplay 
F(z)dz = Res [F(z),pk]2j  k 
where F(z) has N distinct poles pk, k =1,...,N and ccw path lies in the 
ROC. 
For a simple pole at z = zo 
Res[F(z),zo]= lim(z zo)F(z), 
zzo 
and for a pole of multiplicit y m at z = zo 
1 dm1 
Res[F(z),zo]= lim (z zo)mF(z) 
zzo (m 1)! dzm1 
The inverse z-transform of F(z) is therefore
fn = Z1 {F(z)} = Res /bracketleftbig 
F(z)z n1 ,pk /bracketrightbig 
. 
k 
Example 3 
A rst-order low-pass lter is implemen ted with the dierence equation 
yn =0.8yn1 +0.2fn. 
Find the response of this lter to the unit-step sequence {un}. 
147</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/bracketleftbig /bracketrightbig /bracketleftbig /bracketrightbig Solution: The lter has a transfer function 
Y (z) 0.2 0.2z H(z)= = = F (z)1  0.8z1 z  0.8 
The input {fn} = {un} has a z-transform 
z F (z)= z  1 
so that the z-transform of the output is 
0.2z2 
Y (z)= H(z)U(z)= (z  1)(z  0.8) 
and from the Cauchy residue theorem 
yn	= Res Y (z)z n1 , 1 + Res Y (z)z n1 , 0.8 
= lim(z  1)Y (z)z n1 + lim (z  0.8)Y (z)z n1 
z1 z0.8
0.2zn+1 0.2zn+1 
=	lim + lim 
z1 z  0.8 z0.8 z  1 
=1  0.8n+1 
which is shown below 
/G30 /G32 /G34 /G36 /G38 /G31 /G30 /G31 /G32 /G31 /G34 /G31 /G36 /G31 /G38 
/G6E /G20 /G28 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G29 /G30 /G30 /G2E /G32 /G30 /G2E /G34 /G30 /G2E /G36 /G30 /G2E /G38 /G31 /G79 /G6E 
Example 4 
Find the impulse response of the system with transfer function 
1 z2 z2 
H(z)= = = 1+ z2 z2 +1 (z + j 1)(z  j1) 
148</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>/parenrightBig Example 7 
Find Z1 {log(1 + az1)}.
Solution: F (z) is recognized as having a power series expansion:
 aF (z) = log(1 + az 1)= /summationdisplay (1)n+1n 
z n for |a| &lt; |z|n n=1 
Because the ROC denes a causal sequence, the samples fn are 
 
0 for n  0 
fn =(1)n+1na for n  1. n 
Polynomial Long Division: For a causal system, with a transfer function written as 
a rational function, the rst few terms in the sequence may sometimes be computed 
directly using polynomial division. If F (z) is written as 
N(z1) 1 2 2F (z)= D(z1)= f0 + f1z + f2z + f2z +  
the quotien t is a power series in z1 and the coecien ts are the sample values. 
Example 8 
Determine the rst few terms of fn for 
1+2z1 
F (z)= 1 2z1 + z2 
using polynomial long division. 
Solution: 
1+4z1 +7z2 +  
1 2z1 + z2 1+2z1 
1 2z1 + z2 
4z1 z2 
4z1 8z2 +4z3 
7z2 4z3 
so that 
1+2z1 
F (z)= 1 2z1 + z2 =1+4z 1 +7z 2 +  
and in this case the general term is 
fn =3n + 1 for n  0. 
1412</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/braceleftBigg Solution: The system has a pair of imaginary poles at z = j 1. From the 
Cauchy residue theorem 
hn = Z1 {H(z)} = Res /bracketleftbig 
H(z)z n1 , j1 /bracketrightbig 
+ Res /bracketleftbig 
H(z)z n1 , j1 /bracketrightbig 
n+1 n+1z z= lim + lim 
zj1 z +j1 zj1 z  j1
1 1
= (j 1)n+1  (j1)n+1 
j2 j2
=j n /parenleftbig 
1+(1)n+1 /parenrightbig 
2 
0 n odd hn = (1)n/2 n even 
= cos(n/2) 
where we note that the system is a pure oscillator (poles on the unit circle) with 
a frequency of half the Nyquist frequency . 
/G32 
/G34 /G36 
/G38 /G31 /G30 
/G31 /G32 /G31 /G34 
/G31 /G36 /G31 /G38 
/G2D /G31 /G2D /G30 /G2E /G35 /G30 /G30 /G2E /G35 /G31 
/G6E /G20 /G79 /G20/G6E 
Example 5 
Find the impulse response of the system with transfer function 
1 z2 z2 
H(z)= = = 1+2z + z2 z2 +2z +1 (z +1)2 
Solution: The system has a pair of coinciden t poles at z = 1. The residue at 
z = 1 must be computed using 
1 dm1 
Res[F (z),zo]= lim (z  zo)mF (z). 
zzo (m  1)! dzm1 
With m =2, at z = 1, 
Res /bracketleftbig 
H(z)z n1 , 1 /bracketrightbig 
= lim 1 d(z  1)2H(z)z n1 
z1 (1)! dz 
d n+1 = lim z 
z1 dz
=(n + 1)(1)n
149</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>/braceleftbigg /bracerightbigg /braceleftbigg /bracerightbigg 
/summationdisplay Example 6 
Find the response of the low-pass lter in Ex. 3 to an input 
fn =(0.5)n 
Solution: From Ex. 3, and from the z-transform of {fn}, 
1 0.2 F (z)= ,H(z)=1  0.5z1 1  0.8z1 
so that 
0.2 Y (z)= (1+0.5z1)(1  0.8z1) 
A1 A2 = + 1+0.5z1 1  0.8z1 
Using residues 
0.2 0.1 A1 = lim = 
z0.5 1  0.8z1 1.3 
0.2 0.16 A2 = lim = 
z0.8 1+0.5z1 1.3 
and 
yn =0.1 Z1 1 +0.16 Z1 1 
1.3 1+0.5z1 1.3 1  0.8z1 
0.1 0.16 = (0.5)n + (0.8)n 
1.3 1.3 
Note: (1) If F (z) contains repeated poles, the partial fraction metho d must be ex
tended as in the inverse Laplace transform. 
(2) For complex conjugate poles  combine into second-order terms. 
Power Series Expansion: Since 
 
F (z)= fnz n 
n= 
if F (z) can be expressed as a power series in z1, the coecien ts must be fn. 
1411</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G6E /G6E /G6E 
/G46 /G28 /G7A /G29 /G59 /G5A /G5A /G68 /G6E 
/summationdisplay /summationdisplay 1 Massa chusetts Institute of Technology 
Dep artment of Mechanical Engineering 
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 141 
Reading: 
 Proakis &amp; Manolakis, Chapter 3 (The z-transform) 
 Oppenheim, Schafer &amp; Buck, Chapter 3 (The z-transform) 
The Discrete-Time Transfer Function 
Consider the discrete-time LTI system, characterized by its pulse response {hn}: 
/G63 /G6F /G6E /G76 /G6F /G6C /G75 /G74 /G69 /G6F /G6E 
/G7B /G66 /G20/G6E/G20 /G7D 
/G4C /G54 /G49 /G20 /G73 /G79 /G73 /G74 /G65 /G6D
/G7B /G79 /G20 /G20 /G7D /G20 /G3D /G20 /G7B /G20 /G66 /G20 /G20 /G20 /GC4 /G20 /G68 /G20 /G20 /G7D /G20 
/G28 /G7A /G29 /G20 /G3D /G20 /G46 /G28 /G7A /G29 /G48 /G28 /G7A /G29 
/G6D /G75 /G6C /G74 /G69 /G70 /G6C /G69 /G63 /G61 /G74 /G69 /G6F /G6E 
We saw in Lec. 13 that the output to an input sequence {fn} is given by the convolution 
sum:   
yn = fn hn = fkhnk = hkfnk, 
k= k= 
where {hn}is the pulse response. Using the convolution property of the z-transform we have 
at the output 
Y (z)= F (z)H(z) 
where F (z)= Z{fn}, and H(z)= Z{hn}. Then 
Y (z)H(z)= F (z) 
is the discr ete-time transfer function , and serves the same role in the design and analysis 
of discrete-time systems as the Laplace based transfer function H(s) does in continuous 
systems. 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
141</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/GC2 /G7B /G7A /G7D /G77 /G20 
/G77 /G20 
/G2D 4 This simple demonstration shows that this system is stable only for the pole position 1 &lt; 
a&lt; 1. In general for a system 
/producttextM (z  zk)H(z)= K k=1/producttextN (z  pk)k=1
having complex conjugate poles (pk) and zeros (zk): 
A discrete-time system will be stable only if all of the poles of its 
transfer function H(z) lie within the unit circle on the z-plane. 
The Frequency Response of Discrete-Time Systems 
Consider the response of the system H(z) to an innite complex exponential sequence 
fn = A ej n = A cos(n)+ jA sin(n), 
where  is the normalized frequency (rad/sample). The response will be given by the con
volution 
  /summationdisplay /summationdisplay 
yn = hkfnk = hk /parenleftbig 
A ej (nk) /parenrightbig 
k= k= /parenleftBigg /parenrightBigg  /summationdisplay 
= A hk e j k ej n 
k= 
= AH(ej )ej n 
where the frequency response function H(ej )is 
H(ej )= H(z)|j z=e
that is
The frequency response function of a LTI discrete-time system is 
H(z) evaluated on the unit circle -provided the ROC includes the 
unit circle. For a stable causal system this means there are no poles 
lying on the unit circle. 
/G77 /G20 /G69 /G6E	 /G63 /G72 /G65 /G7A /G2D /G70 /G6C /G61 /G6E /G65 /GC1 /G7B /G7A /G7D 
/G31 /G2D /G31 /G6A /G31 
/G2D /G6A /G31 /G77 /G65 /G6A /G77 
/G77 /G3D /G30 /G3D /G20 /G70 /G61 /G73 /G69 /G6E /G67 
/G3D /G20 /G2D /G70 /G30 /G20 /G3C /G20 /G77 /G20 /G3C /G20 /G70 
/G70 /G20 /G3C /G20 /G77 /G20 /G3C /G20 /G30	
145</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Review of development of Fourier transform
The frequency response of a linear system defined directly from the Fourier transform
Relationship between the frequency response and the impulse response
The convolution property</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_04/</lecture_pdf_url>
      <lectureno>4</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>(6) The Fourier Transform of the Deriv ative of a Function 
dx 
F dt = jX(j), 
The Fourier transform of the nth derivative of x(t) is
dnx
F dtn =(j)nX(j)	 (5) 
(7) The Fourier Transform of the Integral of a Function 
t 	1 F x()d = X(0)(j) + j X(j) 
 
(7) Time Reversal If a function x(t) has a Fourier transform X(j) then 
F{x(t)} = X(j). 
1.4	 Extension of the Fourier Transform to Functions for which the Fourier 
Integral does not Converge. 
The Dirichlet conditions are sucient but not necessary conditions for the existence of 
the Fourier transform. If the use of the Dirac delta function (x) is allowed, the Fourier 
transform of many functions with a non-con vergen t Fourier integral may de dened. This 
topic is covered in greater detail in the class handout (Sec. 4.4), and a simple example is 
given here 
Example 4 
Dene the Fourier transform of the unit-step (Heaviside) function us(t), where 
 0 t&lt; 0 us(t)= 1 t  0. 
Clearly the Fourier integral 
   
Us(j) = us(t)ejtdt = ejtdt 
	 0 
does not converge, and we seek an alternativ e approac h. 
Consider the one-sided real exponential function 
x(t)= us(t)eat 
47</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>we are lead to the conclusion that 
h(t)  u(t) F H(j)U(j). (6)  
The computationally intensiv e operation of computing the convolution integral has been 
replaced by the operation of multiplication. This result, known as the convolution property 
of the Fourier transform, can be shown to be true for the product of any two spectra, for 
example F (j) and G(j) 
   
F (j)G( j) = f()ej d. g()ej d 
     
= f()g( )ej(+)dd, 
  
and with the substitution t =  +  
    
F (j)G(j ) = f(t  )g()d ejtdt 
   
= (f(t)  g(t)) ejtdt 
 
= F{f(t)  g(t)} . 
A dual property holds: if any two functions, f(t) and g(t), are multiplied together in the 
time domain, then the Fourier transform of their product is a convolution of their spectra. 
The dual convolution/m ultiplication properties are 
f(t)  g(t) F F (j)G(j ) (7)  
1 f(t)g(t) F F (j)  G(j). (8)  2 
410</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
Department of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 41 
Reading: 
 
1 Review of Developmen t of Fourier Transform: 
We saw in Lecture 3 that the Fourier transform represen tation of aperiodic waveforms can be 
expressed as the limiting behavior of the Fourier series as the period of a periodic extension 
is allowed to become very large, giving the Fourier transform pair 
 
X(j) = x(t)ejtdt (1) 
1  
x(t) = X(j)ejtd (2)2  
Equation (??) is known as the forwar d Fourier transform, and is analogous to the analysis 
equation of the Fourier series represen tation. It expresses the time-domain function x(t) 
as a function of frequency , but unlik e the Fourier series represen tation it is a continuous 
function of frequency . Whereas the Fourier series coecien ts have units of amplitude, for 
example volts or Newtons, the function X(j) has units of amplitude densit y, that is the 
total amplitude contained within a small incremen t of frequency is X(j)/2. 
Equation (??) denes the inverse Fourier transform. It allows the computation of the 
time-domain function from the frequency domain represen tation X(j), and is therefore 
analogous to the Fourier series synthesis equation. Each of the two functions x(t) or X(j) 
is a complete description of the function and the pair allows the transformation between the 
domains. 
We adopt the convention of using lower-case letters to designate time-domain functions, 
and the same upper-case letter to designate the frequency-domain function. We also adopt 
the nomenclature 
x(t) F X(j)  
as denoting the bidirectional Fourier transform relationship between the time and frequency-
domain represen tations, and we also frequen tly write 
X(j) = F{x(t)} 
x(t) = F1 {X(j)} 
as denoting the operation of taking the forward F{}, and inverse F1{} Fourier transforms 
respectively. 
1copyrigh t cD.Ro well 2008 
41</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>There must be at most a nite number of maxima and minima in the  
function x(t). Notice that periodic functions are excluded by this and 
the previous condition. 
There must be at most a nite number of discon tinuities in the function  
x(t), and all such discon tinuities must be nite in magnitude. 
(2) Linearit y of the Fourier Transform If 
g(t) F G(j) and h(t) F H(j) 	  
then for arbitrary constan ts a and b, 
ag(t)+ bh(t) F aG(j ) + bH(j).	 (3)  
(3) Dualit y 
X(jt) F 2x()  
where X(jt) is X(j) where  has been replaced by t, and x() is x(t) 
where t is replaced by . Therefore if we know the Fourier transform of 
one function, we also know it for another. 
(4) Even and Odd Functions 
The Fourier transform of a real even function of time is a real even  
function 
	The Fourier transform of an real odd function is an imaginary odd 
function. 
The same relationships hold for the inverse Fourier transform. 
(5) Time Shifting The Fourier transform of x(t + ), a time shifted version 
of x(t), is
F{x(t + )} = ej X(j).
and in terms of a magnitude and phase 
F{x(t +  )} = |X(j)| ej( X(j)+ ). 
(4) Time Scaling 
x(at) F 1 X (j/a) , a =0  |a|
(9) Time Reversal If a = 1, the time scaling property gives 
x(t) F X(j). (4)  
(5) Waveform Energy	 Parsev als theorem asserts the equiv alence of the total 
waveform energy in the time and frequency domains by the relationship 
1	 1	 
2   
2   
|x(t)| dt =2 |X(j)| d= 2X(j)X(j)d. 
 	  
In other words, the quantity X(j)2 is a measure of the energy of the | |
function per unit bandwidth. 
46</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>1.1 Alternate Denitions 
Although the denitions of Eqs. (??) and (??) ow directly from the Fourier series, denitions 
for the Fourier transform vary from text to text and in dieren t disciplines. The main 
objection to the convention adopted here is the asymmetry introduced by the factor 1/2 
that appears in the inverse transform. Some authors, usually in physics texts, dene the 
so-called unitary Fourier transform pair as 
1  
X(j) = x(t)ejtdt 
2 
1   
x(t) = X(j)ejtd 
2  
so as to distribute the constan t symmetrically over the forward and inverse transforms. 
Many engineering texts address the issue of the asymmetry by dening the transform 
with respect to frequency F =2 in Hz, instead of angular frequency  in radians/s. 
The eect, through the change in the variable in the inverse transform, is to redene the 
transform pair as 
  
x(t)ej2Ftdt X(F )= 
  
j2FtdF x(t)= X(F )e
 
Some authors also adopt the notation of dropping the j from the frequency domain repre
sentation and write X() or X(F ) as above. 
Even more confusing is the fact that some authors (particularly in physics) adopt a 
denition that reverses the sign convention on the exponential terms in the Fourier integral, 
that is they dene 
 
X(j) = x(t)ejtdt 
1  
x(t) = X(j)ejtd 2  
These various denitions of the transform pair mean that care must be taken to understand 
the particular denition adopted by texts and software packages. Throughout this course 
we will retain the denitions in Eqs. (??) and (??). 
1.2 Fourier Transform Examples 
Example 1 
Find the Fourier transform of the pulse function 
x(t)=  a |t| &lt; T/2 
0 otherwise. 
42</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>as describ ed in Example 3, and note that us(t) = lima0 x(t) which implies 
Us(j) = lima0 X(j). From Example 3 
1 a  X(j) = a + j= a2 +2  ja2 +2 
The real part is in the form of a Cauc hy distribution, and we note that for a&gt; 0   a d=  a2 +2  
and that as a 0, a/(a2 +2) becomes impulse-lik e, Therefore, as a 0, 	  
a	  1 
a2 +2  () and  ja2 +2 j  
so that we may dene the Fourier transform of the unit-step function as 
1 Us(j) = () + j 
2	The Frequency Resp onse of a Linear System Dened Directly 
from the Fourier Transform 
The system frequency response function H(j) may be dened directly using the trans
form property of derivatives. Consider a linear system describ ed by the single input/output 
dieren tial equation 
dny dn1y dy an dtn + an1 dtn1 + ... + a1 dt + a0y = 
dmu dm1u du bm	 + ... + b1 + b0u dtm + bm1 dtm1 dt 
and assume that the Fourier transforms of both the input u(t) and the output y(t) exist. 
Then the Fourier transform of both sides of the dieren tial equation may be found by using 
the derivative property: dnf  
F dtn =(j)nF (j) 
to give 

an(j)n + an1(j)n1 + ... + a1(j) + a0 
Y (j) = 
bm(j)m + bm1(j)m1 + ... + b1(j) + b0 
U(j), 
which has reduced the original dieren tial equation to an algebraic equation in j. This 
equation may be rewritten explicitly in terms of Y (j) in terms of the frequency response 
H(j) 
bm(j)m + bm1(j)m1 + ... + b1(j) + b0Y (j) =	 U(j) an(j)n + an1(j)n1 + ... + a1(j) + a0 
= H(j)U(j), 
showing the multiplicativ e frequency domain relationship between input and output. 
48</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G78 /G28 /G74 /G29
/G74
/G30/G61
/G74/G30/G61/G54
/G54 /G2F /G34/G61 /G54
/G61 /G54 /G2F /G34/G57/G58 /G28 /G6A /G57 /G29
/G46 /G6F /G75 /G72 /G69 /G65 /G72 /G20 /G54 /G72 /G61 /G6E /G73 /G66 /G6F /G72 /G6D
/G46 /G6F /G75 /G72 /G69 /G65 /G72 /G20 /G54 /G72 /G61 /G6E /G73 /G66 /G6F /G72 /G6D/G54 /G2F /G32 /G2D /G54 /G2F /G32
/G54 /G2F /G38 /G2D /G54 /G2F /G38/G78 /G28 /G74 /G29/G58 /G28 /G6A /G57 /G29
/G57Example 2 
Find the Fourier transform of the Dirac delta function (t). 
Solution: When substituted into the forward Fourier transform 
 
(j) = (t)ejtdt 
 
= 1 (i) 
by the sifting property. The spectrum of the delta function is therefore constan t 
over all frequencies. It is this property that makes the impulse a very useful test 
input for linear systems. 
Example 3 
Find the Fourier transform of the causal real exponential function x(t)= us(t)eat 
( for a&gt; 0). 
44</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G2D /G32 /G30 /G61 /G2D /G31 /G30 /G61 /G30 /G31 /G30 /G61 /G32 /G30 /G61
/G2D /G31 /G2E /G35/G2D /G31 /G2E /G30/G2D /G30 /G2E /G35/G31 /G2E /G35
/G2D /G32 /G30 /G61 /G2D /G31 /G30 /G61 /G30 /G31 /G30 /G61 /G32 /G30 /G61/G57/G7C /G58 /G28 /G6A /G57 /G29 /G7C
/G30 /G31 /G32 /G33 /G34/G78 /G28 /G74 /G29
/G61 /G74/G31 /G2E /G30
/G30 /G2E /G35/G46 /G6F /G75 /G72 /G69 /G65 /G72 /G20 /G54 /G72 /G61 /G6E /G73 /G66 /G6F /G72 /G6D
/G30 /G2E /G35/G31 /G2E /G30
/G65/G2D /G61 /G74/G31 /G2F /G61
/G57
/G7C /G58 /G28 /G6A /G57 /G29 /G7CSolution: From the denition of the forward Fourier transform 
X(j) =   
eat ejtdt 
0 1 e(a+j)t 
= a + j 
0 
1 = a + j 
which is complex, and in terms of a magnitude and phase function is 
1 |X(j)| = 
a2 +2	(i) 
 X(j) = tan1 
a 	
(ii) 
Other examples are given in the class handout. 
1.3 Prop erties of the Fourier Transform 
The properties of the Fourier transform are covered more fully in the class handout and are 
simply summarized here: 
(1) Existence of the Fourier Transform	 The three Dirichlet conditions are 
sucien t conditions, but are not strictly necessary: 
	The function x(t) must be integrable in the absolute sense over all time, 
that is   
|x(t)| dt &lt; . 
 
45</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G52 /G65 /G73 /G70 /G6F /G6E /G73 /G65/G75 /G28 /G74 /G29
/G59 /G28 /G6A /G57 /G29 /G20 /G20 /G3D /G20 /G55 /G28 /G6A /G57 /G29 /G48 /G28 /G6A /G57 /G29/G79 /G28 /G74 /G29/G74 /G69 /G6D /G65 /G20 /G64 /G6F /G6D /G61 /G69 /G6E
/G46 /G6F /G75 /G72 /G69 /G65 /G72 /G20 /G64 /G6F /G6D /G61 /G69 /G6E/G46/G2D /G31
/G6D /G75 /G6C /G74 /G69 /G70 /G6C /G69 /G63 /G61 /G74 /G69 /G6F /G6E/G46
/G55 /G28 /G6A /G57 /G29/G48 /G28 /G6A /G57 /G29/G63 /G6F /G6E /G76 /G6F /G6C /G75 /G74 /G69 /G6F /G6E3	Relationship between the Frequency Resp onse and the Impulse 
Resp onse 
The Dirac delta function (t) has a unique property; its Fourier transform is unity for all 
frequencies 
F{(t)} =1, 
The impulse response of a system h(t) is dened to be the response to an input u(t)= (t), 
the output spectrum is then Y(j) = F{h(t)}, 
Y (j) =
F{(t)} H(j)
= H(j).
or 
h(t)= F1 {H(j)} . 
In other words, the system impulse response h(t) and its frequency response H(j) are a 
Fourier transform pair: 
h(t) F H(j).  
In the same sense that H(j) completely characterizes a linear system in the frequency 
response, the impulse response provides a complete system characterization in the time 
domain. 
4	The Convolution Prop erty 
A system with an impulse response h(t), driven by an input u(t), responds with an output 
y(t) given by the convolution integral 
y(t)	= h(t)  u(t)  
= u()h(t   )d 
 
In the frequency domain the input/output relationship for a linear system is multiplicativ e, 
that is Y (j) = U(j)H(j). Because by denition 
y(t) F Y (j),  
49</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G74
/G30 /G54 /G2F /G32 /G2D /G54 /G2F /G32/G61/G78 /G28 /G74 /G29
/G2D /G33 /G30 /G30 /G33 /G30/G58 /G28 /G6A /G57 /G29
/G57/G61 /G54
/G54 /G54 /G54/G2D /G32 /G30 /G2D /G31 /G30
/G54/G31 /G30
/G54/G32 /G30
/G54/G46 /G6F /G75 /G72 /G69 /G65 /G72 /G20 /G54 /G72 /G61 /G6E /G73 /G66 /G6F /G72 /G6DSolution: From the denition of the forward Fourier transform 
 
X(j) = x(t)ejtdt (i) 
 T/2 
= a ejtdt (ii) 
T/2  j T/2 
= aejt(iii) T/2 
= ja 
ejT/2  ejT/2 
(iv) 
sin(T /2) = aT . (v)T/2 
The Fourier transform of the rectangular pulse is a real function, of the form 
(sin x)/x centered around the j = 0 axis. Because the function is real, it 
is sucien t to plot a single graph showing only X(j). Notice that while | |
X(j) is a generally decreasing function of  it never becomes identically zero, 
indicating that the rectangular pulse function contains frequency comp onents at 
all frequencies. 
The function (sin x)/x = 0 when the argumen t x = n for any integer n (n = 0). 
The main peak or lobe of the spectrum X(j) is therefore contained within 
the frequency band dened by the rst two zero-crossings T/2&lt; or &lt; | | ||
2/T . Thus as the pulse duration T is decreased, the spectral bandwidth of the 
pulse increases, indicating that short duration pulses have a relativ ely larger high 
frequency content. 
43</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Direct-form filter structures
Transversal FIR structure
IIR direct form structures
Transposed direct forms
Coefficient sensitivity in direct form filters</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_20/</lecture_pdf_url>
      <lectureno>20</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G61 
/G66 /G6E 
/G67 /G6E /G6E /G6E /G6E /G2D 
 
 
/G62 /G4E 
/G79 /G6E /G66 /G6E /G2D /G4E 1 
2 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 201 
Reading: 
 Class Handout: Direct-F orm Digital Filter Structur es 
 Proakis and Manolakis: Sec. 9.1  9.3 
 Oppenheim, Schafer, and Buck: 6.0  6.5 
Direct-F orm Filter Structures 
Linear shift-in variant digital lters can be represen ted in block diagram form in terms of the 
three primitiv e elemen ts 
/G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G20 /G28 /G67 /G61 /G69 /G6E /G29 /G75 /G6E /G69 /G74 /G20 /G64 /G65 /G6C /G61 /G79 /G73 /G75 /G6D /G6D /G65 /G72 
/G79 /G6E/G20 /G20 /G3D /G20 /G61 /G66/G6E /G66/G6E /G7A /G2D /G31 /G79 /G6E/G20 /G20 /G3D /G20 /G66 /G6E /G2D /G31 /G66 /G6E /G79 /G20 /G20 /G3D /G20 /G66 /G20 /G20 /G2D /G20 /G67 
Transversal FIR Structure 
Let the FIR structure to be implemen ted be 
N 
H(z)= bnz k 
k=0 
so that the dierence equation is 
N 
yn = bkfnk. 
k=0 
The following block diagram is the transversal form of this system: 
/G7A /G7A /G7A /G7A /G2D /G31 /G2D /G31 /G2D /G31 /G2D /G31 
/G32 /G31 /G33 /G62 
/G30 /G62 /G62 /G62 /G66 /G6E /G2D /G31 /G66 /G6E /G2D /G32 /G66 /G66 /G6E /G2D /G33 /G6E 
1copyright /circlecopyrtcD.Rowell 2008 
201</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G79 /G6E /G62 /G78 
/G66 /G6E 3 IIR Direct Form Structures 
Let the IIR structure to be implemen ted be 
N kbnzk=0H(z)= N1+ k=1 akzk 
where it is assumed that the orders of the numerator and denominator of H(z) are equal. 
The dierence equation is 
N N 
yn =  akynk + bkfnk. 
k=1 k=0 
Write H(z) as a pair of cascaded sub-systems, 
H(z)= H1(z)H2(z) 
where 
N 
H1(z)=  
bnz k , and H2(z)= N 1 . 
1+ akzk 
k=0 k=1 
3.1 Direct Form I 
Dene an intermediate variable xn, and implemen t as X(z)= H1(z)F (z) and Y (z)= 
H2(z)X(z), or in dierence equation form as 
N 
xn = bkfnk 
k=0 
N 
yn =  akynk + xn 
k=1 
as shown below: 
/G7A 
/G7A 
/G7A 
/G7A /G7A /G2D /G31 
/G7A 
/G7A 
/G7A /G61 
/G4E /G4E /G31 
/G32 /G31 
/G32 
/G33 /G33 /G30 
/G79 
/G79 
/G79
/G79 /G6E /G2D /G31 
/G6E /G2D /G32 
/G6E /G2D /G33 
/G6E /G2D /G4E /G6E 
/G2D 
/G2D /G31 
/G2D /G31 
/G2D /G31 /G2D /G31 /G2D /G31 /G2D /G31 /G2D /G31 
/G61 
/G61 
/G61 /G62 /G62 /G62 /G62 /G66
/G66 
/G66 
/G66 /G6E /G2D /G31 
/G6E /G2D /G32 
/G6E /G2D /G33 
/G6E /G2D /G4E 
203</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G66 /G6E 
/G6E /G2D /G4E /G78 /G79 /G6E 
/G6E /G2D /G4E /G78 3.2 Direct Form II 
The Direct Form II structure results from reversing the order of H1(z) and H2(z) so that 
X(z)= H2(z)F(z) and Y(z)= H1(z)X(z), or in dierence equation form as 
N 
xn =  akfnk 
k=1 
N 
yn = bkxnk. 
k=0 
as shown below: 
/G7A/G2D /G31 
/G7A
/G7A/G2D /G31 
/G2D /G31 /G7A/G2D /G31
/G7A/G61
/G4E/G31
/G32
/G33/G2D
/G2D /G31 /G61
/G61
/G61 /G7A
/G7A 
/G7A
/G4E/G32/G31
/G33
/G2D /G31/G2D /G31/G2D /G31
/G62/G62/G62/G62
/G6E /G2D /G31
/G6E /G2D /G32 /G78
/G6E /G2D /G33/G78
/G78/G78/G6E /G62/G30 
/G7A/G2D /G31
/G7A
/G7A
/G7A/G61
/G4E/G31
/G2D /G31
/G2D /G31
/G2D /G31/G32
/G33/G2D 
/G61/G61
/G61 /G4E /G62/G32/G6E /G2D /G31 /G78 /G31
/G33 /G62/G62/G62
/G6E /G2D /G32 
/G6E /G2D /G33/G78
/G78/G78 /G62 /G30 /G79/G6E /G66 /G6E /G6E 
From the left hand gure it can be seen that the values xnk, k =0,...N , in the two shift 
registers is equal, and that they can be combined to create the Direct Form II structure, as 
is shown on the right. 
The following MATLAB code implemen ts the Direct Form II structure in a point-by-point 
ltering function: 
% ------------------------------------------------------------------------
% 2.161 Classroom Example -iirdf2 -Demonstration IIR Direct Form II
% implementation.
% Usage : 1) Initialization:
% y = iirdf2(initial, b, a)
% where b, a are the numerator and denominator polynomial
% coefficients. Example:
% [b,a] = butter(7,0.4);
% y = iirdf2(initial,b,a);
% Note: iirdf2 return sy=0f or initialization
% 2) Filtering:
% y_out = iirdf2(f_{in};
% where f_in is a single input value, and
% y_out is the computed output value.
% Example: To compute the step response:
205</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G79 /G66 /G6E /G6E /G66 /G6E 
/G6E /G2D /G4E /G78 /G78 /G79 /G6E /G78/G6E/G62 /G30 /G62 /G30 
/G7A /G2D /G31 
/G7A 
/G7A 
/G7A /G2D /G31 
/G2D /G31 
/G2D /G31 
/G4E /G62 /G32 /G6E /G2D /G31 /G78 /G31 
/G33 /G62 /G62 /G62 
/G6E /G2D /G32 
/G6E /G2D /G33 /G78 
/G78 /G7A /G2D /G31 
/G7A 
/G7A 
/G7A /G32 /G2D /G31 
/G2D /G31 
/G2D /G31 
/G4E /G62 /G31 
/G33 
/G62 /G62 /G62 
/G54 /G72 /G61 /G6E /G73 /G76 /G65 /G72 /G73 /G61 /G6C /G20 /G46 /G49 /G52 /G20 /G54 /G72 /G61 /G6E /G73 /G70 /G6F /G73 /G65 /G64 /G20 /G54 /G72 /G61 /G6E /G73 /G76 /G65 /G72 /G73 /G61 /G6C /G20 /G46 /G49 /G52 
% ------------------------------------------------------------------------
% 2.161 Classroom Example -firtdf -Demonstration Transposed FIR Direct 
% Form implementation. 
% Usage : 1) Initialization: 
% y = firtdf(initial, b) 
% where b, a are the numerator and denominator polynomial 
% coefficients. Example: 
% b=[ 123454321 ]; 
% y = firtdf(initial,b); 
% 
% Note: firtdf return sy=0f or initialization 
% 2) Filtering: 
% y_out = firtdf(f_{in}); 
% where f_in is a single input value, and 
% y_out is the computed output value. 
% Example: To compute the step response: 
% for j=1:100 
% y(j) = firtdf(1); 
% end 
% ------------------------------------------------------------------------
% 
function y_n = firtdf(f_n,B) 
persistent register Bx N 
% 
% The following is initialization, and is executed once 
% 
if (ischar(f_n) &amp;&amp; strcmp(f_n,initial)) 
N = length(B); 
Bx=B ; 
register = zeros(1,N-1); 
207</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>/G79 /G6E /G66 /G6E /G78 
/G6E /G2D /G32 /G79 /G6E/G66 /G6E 
/G7A /G2D /G31 
/G6B /G78 /G6E 
/G63 /G6E /G2D /G31/G78 /G6B /G2D /G65 
A second-order Direct Form 2 section, implemen ting a conjugate pole pair 
dk,dk = r ej  
has a denominator polynomial 
(1  dkz 1)(1  dkz 1)=1  2r cos()z 1 + r 2 z 2 
and when paired with a pair of zeros (either real, or a complex conjugate pair) to give a transfer 
function 
1  b1z1 + b2z2 
H(z)= 1  2r cos()z1 + r2z2 
and dierence equation 
yn =2r cos()yn1 + r 2 yn2 + fn + b1fn1 + b2fn2 
is shown below 
/G7A /G2D /G31 
/G7A /G2D /G31 
/G32 /G62 /G31 /G6E 
/G62 /G6E /G2D /G31 /G78 
/G78 /G2D /G72 /G32 /G32 /G72 /G20 /G63 /G6F /G73 /G28 /G71 /G29 
Example 2 
Implemen t the system 
0.04756z3 +0.14273z2 +0.14273z +0.04756 H(z)= z3  1.3146z2 +1.17043z  0.47524 
as a set of cascaded rst-and second-order systems. 
Solution: Factor the transfer function and rewite as 
0.04756(1 + z1)3 
H(z)= . (1  0.6711z1 +0.7386z2)(1  0.6435z1) 
2012</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Example 3 
Implemen t the system of Example 2 as a parallel realization 
0.04756z3 +0.14273z2 +0.14273z +0.04756 H(z)= z3  1.3146z2 +1.17043z  0.47524 
Solution: Using a partial fraction expansion 
H(z)=0.0476 + 0.2929 .0877z  0.2271 . 2 z  0.6435  z  0.6711z +0.7386 
Implemen t as three sections 
H1(z)=0.0476 
0.2929 z1 
H2(z)= 1  0.6435 z1 
.0877 z1  0.2271 z2 
H3(z)= 1  0.6711z1 +0.7386 z2 
with dierence equations 
un =0.0476 fn 
vn =0.6435 vn1 +0.2929 fn1 
wn =0.6711 wn1  0.7386 wn2 +0.0877 fn1  0.2271f n2 
yn = un + vn  wn 
2014</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>% for j=1:100 
% y(j) = iirdf2(1); 
% end 
% ------------------------------------------------------------------------
% 
function y_n = iirdf2(f_n,B,A) 
persistent register Bx Ax N 
% 
% The following is initialization, and is executed once 
% if (ischar(f_n) &amp;&amp; strcmp(f_n,initial)) 
N = length(A);
Ax=A ;
Bx=B ;
register = zeros(1,N);
y_n=0 ;
else
% Filtering: (Note that a Direct Form II filter needs only a single 
% shift register.) 
x=0 ;y=0 ; 
for J = N:-1:2 
register(J) = register(J-1); % Move along the shift register
x=x-Ax(J)*register(J);
y=y+ Bx(J)*register(J);
end
x 
=x+f_n;
y_n=y+ Bx(1)*x;
register(1) = x;
end 
4 Transposed Direct Forms 
The transp osed forms result from the transp osition theorem from signal-o w graph theory , 
which states that in a signal-o w graph if 
 The arrows on all graph branches are reversed. 
 Branc h points become summers, and summers become branch points. 
 The input and output are swapped, 
then the input/output relationships remain unchanged. The same applies to block diagrams. 
4.1 Transposed Transversal FIR Filter 
The transp osed FIR structure is shown below: 
206</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>% ------------------------------------------------------------------------
% 2.161 Classroom Example -iirtdf2 -Demonstration Transposed IIR Direct 
% Form II implementation. 
% Usage : 1) Initialization: 
% y = iirtdf2(initial, b, a) 
% where b, a are the numerator and denominator polynomial 
% coefficients. Example: 
% [b,a] = butter(7,0.4); 
% y = iirtdf2(initial,b,a); 
% Note: iirdf2 return sy=0f or initialization 
% 2) Filtering: 
% y_out = iirtdf2(f_{in}; 
% where f_in is a single input value, and 
% y_out is the computed output value. 
% Example: To compute the step response: 
% for j=1:100 
% y(j) = iirtdf2(1); 
% end 
% ------------------------------------------------------------------------
% 
function y_n = iirtdf2(f_n,B,A) 
persistent register Bx Ax N 
% 
% The following is initialization, and is executed once 
% if (ischar(f_n) &amp;&amp; strcmp(f_n,initial)) 
N = length(A);
Ax=A ;
Bx=B ;
register = zeros(1,N-1);
y_n=0 ;
else
% Filtering: (Note that a Transposed Direct Form II filter needs only a single 
% register.) Also note that this is not strictly a shift register. 
y_n = register(1) + Bx(1)*f_n; 
% Update for the next iteration 
for J = 1:N-2 
register(J) = register(J+1) + Bx(J+1)*f_n -Ax(J+1)*y_n; 
end register(N-1) = Bx(N)*f_n 
-Ax(N)*y_n; 
end 
Coecien t Sensitivit y in Direct Form Filters 
In practice high-order IIR Direct Form lters are rarely used because of the sensitivit y of pole and 
zero positions to small perturbations in the values of the coecien ts ak and bk in the dierence 
209
5</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Implemen t the lter as a cascaded pair 
0.04756(1 + 2z1 + z2)H1(z)= 1  0.6711z1 +0.7386z2 
1+ z1 
H2(z)= 1  0.6435z1 
with a pair of dierence equations 
xn =0.6711xn1  0.7386xn2 +0.04756( fn +2fn2 + fn2) 
yn =0.6435yn1 + xn + xn1. 
There is a lot of exibilit y in choosing which zeros to associate with the poles of each low order 
section, and how to distribute the overall gain between the sections. A general (rule-of-th umb) 
procedure is 
(1) Select the poles closest to the unit circle. 
(2) Find the closest zeros to those poles. 
(3) Combine into a second-order section. 
(4) Repeat until all zeros are accoun ted for. 
5.2 Parallel Structures 
A high order lter may also be realized as a set of parallel second- and rst-order sections using 
partial fractions, and implemen ted as 
H(z)= H1(z)+ H2(z)+ H3(z) ...+ HN (z) 
so that 
Y(z)=(H1(z)+ H2(z)+ H3(z) ...+ HN (z)) F(z) 
2013
/G79 /G6E /G66 /G6E /G48 /G20 /G20 /G28 /G7A /G29 
/G48 /G20 /G20 /G28 /G7A /G29 
/G48 /G20 /G20 /G28 /G7A /G29 
/G48 /G20 /G20 /G28 /G7A /G29 /G31 
/G32 
/G33 
/G4E</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G79 /G66 /G6E /G6E /G66 /G6E 
/G6E /G2D /G4E /G78 /G79 /G6E 
 y_n=0 ;
else
% Filtering: 
y_n = register(1) + Bx(1)*f_n; 
% Update for the next iteration 
for J = 1:N-2 
register(J) = register(J+1) + Bx(J+1)*f_n;
end
register(N-1) = Bx(N)*f_n;
end 
4.2 Transposed Direct Form II 
The following diagram shows the result when the transp osition theorem is applied to a Direct 
Form II structure. 
/G78/G6E/G62 /G30 /G62 /G30 
/G7A /G2D /G31 
/G7A 
/G7A 
/G7A /G61 
/G4E /G31 
/G2D /G31 
/G2D /G31 
/G2D /G31 /G32 
/G33 /G2D 
/G61 /G61 
/G61 /G4E /G62 /G32 /G31 
/G33 /G62 /G62 /G62/G6E /G2D /G31 
/G6E /G2D /G32 
/G6E /G2D /G33 /G78 
/G78 
/G78 /G7A /G2D /G31 
/G7A 
/G7A 
/G7A /G61 
/G4E /G31 
/G32 
/G33 /G2D /G31 
/G2D /G31 
/G2D /G31 /G61 
/G61 
/G61/G4E /G32 /G31 
/G33 
/G62 /G62 /G62 /G62 
/G78 /G2D 
/G2D 
/G2D 
/G2D 
/G44 /G69 /G72 /G65 /G63 /G74 /G20 /G46 /G6F /G72 /G6D /G20 /G49 /G49 /G20 /G54 /G72 /G61 /G6E /G73 /G70 /G6F /G73 /G65 /G64 /G20 /G44 /G69 /G72 /G65 /G63 /G74 /G20 /G46 /G6F /G72 /G6D /G20 /G49 /G49 
This block diagram simply reorganizes the dierence equation as 
N 
yn = b0fn + (bkfnk  akynk) 
k=1 
which is implemen ted in the MATLAB function iirtdf2() on the next page. 
208</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>equation. If the transfer function is 
M 1A(z) k=0 bkzH(z)= B(z) = 
1+ N
k=1 akz1 , 
and the poles are clustered near the unit circle, then small perturbations in any of the ak from 
the desired value (perhaps because of nite precision limitations) may cause the lter to become 
unstable. 
To demonstrate this, consider a low-pass lter with 
N N    1 1A(z)=1+ akz = 1 pkz 
k=1 k=1 
where the poles pk are within the unit circle, but close to z = 1, and write pk =1+ /epsilon1k, where 
|/epsilon1k|/lessmuch1. 
Now let a single (arbitrary) coecien t ar be be perturb ed by  to 
ar /prime = ar +  
so that the denominator polynomial becomes 
N 
A/prime(z)=1+ akz 1 + zr . 
k=1 
As ||increases, one or more of the poles may move outside the unit circle, leading to instabilit y. 
It is dicult to dene the general condition, but we can easily nd the condition that leads to a 
pole migrating to z = 1, since then 
A/prime(1) = A(1) +  =0, 
that is, there will be a pole at z =1 if 
 = A(1), 
or alternativ ely, if 
N 
 =(/epsilon1(k). 
k=1 
Example 1 
Consider a low-pass lter 
1 1 H(z)= = (1 0.99z1)1 2.97z1 +2.9403z2 0.970299 z3 
with three poles at z =0.99. Find the perturbation allowed in any coecien t 
that will create a marginally stable system with a pole at z = 1. Discuss some 
metho ds of decreasing the sensitivit y. 
2010</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Solution: For the third-order system A(1) = 106 , so any change of  = 
A(1)= 106 in any coecien t will move one of the poles from z =0.99 to 
z = 1. Any perturbation larger than this will generate an unstable lter. 
Now consider the eect of implemen ting this lter as a cascade connection of two 
lters, a second-order lter H1(z), and a rst-order lter H2(z), that is 
1 1 H(z)= H1(z)H2(z)= . 1 (1  0.99z1)2 1  z
with a pair of dierence equations 
xn =1.98xn1  0.9801xn2 + fn 
yn =0.99yn1 + xn. 
For H1(z), A1(1) = 104, while for H2(z) A2(1) = 102 and the sensitivit y is
signican tly reduced.
If the lter is implemen ted as a cascade connection of three rst-order lters,
1 1 1 H(z)= H1(z)H2(z)H(3z)(z)= . . 1  z1 1  z1 1  z1 
with a set of dierence equations 
wn =0.99wn1 + fn 
vn =0.99vn1 + wn
yn =0.99yn1 + vn,
for any of the rst-order sections Hk(z), A1(1) = 102 , and the coecien t
sensitivit y is signican tly reduced even further. 
This example demonstrates that the sensitivit y to coecien t precision can be often drastically 
reduced by implemen ting a lter with low order sections. 
5.1 Cascade Structures 
If the transfer function is written in terms of its poles and zeros 
M1 1) M2 1)H(z)= N1 (1  ekz
1) N2 (1  gkz1)(1  gkz
1) K=1 K=1
(1  ckz (1  dkz1)(1  dkzK=1 K=1
where the ck and ek are real poles and zeros, and dk, dk and gk, gk are complex conjugate pole and 
zero pairs, it is common to realize the system as a cascade chain of rst-and second-order sections 
(usually Direct Form II): 
A rst-order Direct Form II section, implemen ting a real pole ck and zero ek 
1 
Hk(z)= 1  ekz
1 ,1  ckz
as 
yn = ckyn1 + fn  ekfn1 
is shown below 
2011</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>The following MATLAB code implemen ts this structure in a point-by-point ltering function: 
% ------------------------------------------------------------------------
% 2.161 Classroom Example -firdf -Demonstration FIR Direct Form 
% implementation. 
% Usage : 1) Initialization: 
% b=[ 123454321 ]; 
% y = iirdf1(initial, b); 
% where b are the numerator polynomial coefficients. Example: 
% y = iirdf1(initial,[1252 1]); 
% Note: firdf return sy=0f or initialization 
% 2) Filtering: 
% y_out = firdf(f); 
% where f is a single input value, and 
% y_out is the computed output value. 
% Example: To compute the step response: 
% for j=1:100 
% y(j) = firdf(1); 
% end 
% ------------------------------------------------------------------------
% 
function y_n = firdf(f_n,B) 
persistent f_register Bx N 
% 
% The following is initialization, and is executed once 
% 
if (ischar(f_n) &amp;&amp; strcmp(f_n,initial)) 
N = length(B); 
Bx=B ; 
f_register = zeros(1,N); 
y_n=0 ; 
else 
% Filtering: 
y_n=0 ; 
for J = N:-1:2 
f_register(J) = f_register(J-1); 
y_n = y_n + Bx(J)*f_register(J); 
end 
y_n = y_n + Bx(1)*f_n; 
f_register(1) = f_n; 
end 
202</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>The following MATLAB code implemen ts the Direct Form I structure in a point-by-point 
ltering function. 
% ------------------------------------------------------------------------
% 2.161 Classroom Example -iirdf1 -Demonstration IIR Direct Form I 
% implementation. 
% Usage : 1) Initialization: 
% y = iirdf1(initial, b, a) 
% where b, a are the numerator and denominator polynomial 
% coefficients. Example: 
% [b,a] = butter(7,0.4); 
% y = iirdf1(initial,b,a); 
% Note: iirdf1 return sy=0f or initialization 
% 2) Filtering: 
% y_out = iirdf1(f_{in}; 
% where f_in is a single input value, and 
% y_out is the computed output value. 
% Example: To compute the step response: 
% for j=1:100 
% y(j) = iirdf1(1); 
% end 
% ------------------------------------------------------------------------
function y_n = iirdf1(f_n,B,A) 
persistent f_register y_register Bx Ax N 
% 
% The following is initialization, and is executed once 
% if (ischar(f_n) &amp;&amp; strcmp(f_n,initial)) 
N = length(A);
Ax=A ;
Bx=B ;
f_register = zeros(1,N);
y_register = zeros(1,N);
y_n=0 ;
else
% Filtering: (Note that a Direct Form I filter needs two shift registers.) 
x=0 ;y=0 ; 
for J = N:-1:2 
y_register(J) = y_register(J-1); % Move along the shift register
f_register(J) = f_register(J-1);
y=y-Ax(J)*y_register(J);
x=x+ Bx(J)*f_register(J);
end 
x=x+ Bx(1)*f_n; 
y_n=y+x ; 
f_register(1) = f_n; 
y_register(1) = y_n; 
end 
204</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Least-squares filter design</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_24/</lecture_pdf_url>
      <lectureno>24</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Example 2 
Use a least-squares lter to estimate the impulse response of an unkno wn FIR 
system with impulse response 
0 2 4 6 8 10 12 0 1 2 3 4 5 6 Unknown Impulse Response 
% System ID Using LSQFilt
% Create a FIR filter as the "unknown" plant
h=[ 0123454321000 ];
figure(1); stem(0:length(h)-1,h);
title(Unknown Impulse Response);
% 
f = randn(1,1000); 
% create output data representing the exerimental 
% measurements 
y = filter(h,1,f); 
% 
% Estimate the impulse response from the data
[h_opt,MSE] = LSQFilt(f,y,15);
figure(2); stem(0:length(h)-1,h_opt(1:length(h)));
title(Estimated Impulse Response);
giving the following result: 
247</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/bracketleftbigg	 /bracketrightbigg 
/G48 /G28 /G7A /G29 % One-step linear predictor for a sinusoidal input.
% Define a time vector, and the input vector:
t = 0:199;
s = sin(2*pi*t/12);
% In this case the desired output is the input
d=s ;
% To make it causal we must delay the input to the filter
f = zeros(1,200);
f(2:200) = s(1:199);
% Compute the filter coefficients for a first-order filter
[B1,MSE] = LSQFilt(f,d,2)
% Repeat with a second-order model
[B2,MSE] = LSQFilt(f,d,3)
and produces the results 
1.73205080756888 e + 000 B1= 1.00000000000000 e + 000 
	  1.73205080756897 e + 000 
	  B2= 1.00000000000016 e + 000 
112.354570092066 e  015 
which agree with the closed-form solutions in Stearns and Hush. 
1.2.2 System Iden tication 
Suppose we have an unkno wn FIR system and the task is to determine its impulse response. 
We can construct an experimen t, using white noise to excite the system and record the input 
and output series. The least-squares lter design metho d is then used to determine the 
coecien ts of a FIR are used as estimates of the plant impulse response. 
/G69 /G6E /G70 /G75 /G74 
/G7B /G66 /G20/G6E /G20 /G7D /G55 /G6E /G6B /G6E /G6F /G77 /G6E /G20 /G73 /G79 /G73 /G74 /G65 /G6D /G72 /G65 /G73 /G70 /G6F /G6E /G73 /G65 
/G2D/G2B /G7B /G64/G6E/G20 /G20 /G7D 
/G46 /G49 /G52 /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G7B /G67/G6E/G20 /G20 /G7D 
/G62 /G6B	/G66 /G69 /G6C /G74 /G65 /G72 
/G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73 
/G7B /G66 /G20 /G20 /G7D/G6E /G20 /G20 /G20 /G6C /G65 /G61 /G73 /G74 /G2D /G73 /G71 /G75 /G61 /G72 /G65 /G73 /G7B /G65 /G20/G6E /G20 /G7D 
/G64 /G65 /G73 /G69 /G67	 /G6E /G20 /G61 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D 
246</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Plot the resulting impulse response of the compensated channel. 
Solution: The following MATLAB scipt uses a lter length M = 10, and a 
delay factor  = 1. 
% Channel compensation using Least-Squares filter design.
% Input the numerator B(z), and denominator A(z) of the "unknown" plant
B_u = [0.2796 0];
A_u = [1 -1.7211 0.8187];
unknown = tf(B_u, A_u ,1);
h_unknown = impulse(unknown);
figure(1), stem(0:length(h_unknown)-1, h_unknown)
title(Unknown system impulse response);
%
% Use white noise as the input signal:
s = randn(1,200);
f = lsim(unknown,s);
% Create the desired output
$ (delay by one step so that resulting filter is causal)
d = zeros(1,200);
d(2:200) = s(1:199);
[B_noise,MSE] = LSQFilt(f,d,10);
figure(2), stem(B)
title(Filter coefficients found by using white noise as the input)
h_compensated = conv(h_unknown, B);
figure(3), stem(0:length(h_compensated)-1, h_compensated)
title(Compensated system impulse response)
The output is shown below. 
0.3 0.2 0.1 0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 Unknown system impulse response 
0 10 20 30 40 50 60 
249</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/braceleftbig/parenleftbig /parenrightbig /bracerightbig 
/summationdisplay /summationdisplay 
/braceleftBigg /bracerightBigg /summationdisplay 
/summationdisplay 
/summationdisplay 
/summationdisplay 
/summationdisplay /summationdisplay /summationdisplay 
/summationdisplay 
/summationdisplay and in terms of correlation functions
MSE = dd(0) + gg(0) 2dg(0) . 
For the FIR lter with coecien ts bk, the output is 
{gn}= {fn}{bn} 
and from the input/output properties of linear systems (Lec. 22) 
gg(n)= Z1 H(z)H(z 1) ff(n) 
M1 M1 
= bmbnff(mn). 
m=0 n=0 
Similarly , 
dg(n)= E{dmgn+m}
M1 
= E dm bkfn+mk 
k=0 
M1 
= bkE{dmfn+mk}
k=0 
M1 
= bkfd(kn) 
k=0 
and 
M1 
dg(0) = bkfd(k) 
k=0 
The MSE is therefore 
M1 M1 M1 
MSE = dd(0) + bmbnff(mn) 2 bkfd(k). 
m=0 n=0 k=0 
We now seek the optim um coecien ts. 
M1MSE =2 bmff(mn) 2fd(n)bn m=0 
and setting MSE/bn = 0 for n=0,1,...,M 1, we have 
M1 
bmff(mn)= fd(n) 
m=0 
242</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/summationdisplay 
/braceleftbig /bracerightbig 
/braceleftbig /bracerightbig 
/braceleftbig /bracerightbig /braceleftbig /bracerightbig 1 Massa chusetts Institute of Technology 
Dep artment of Mechanical Engineering 
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 241 
Reading: 
 Class Handout: MATLAB Examples of Least-Squar es FIR Filter Design 
 Proakis and Manolakis: Sec. 12.3  12.5 
 Stearns and Hush: Ch. 14 
Least-Squares Filter Design 
We now look at a FIR lter design technique that is based on experimen tal data 
/G22 /G64 /G65	 /G73 /G69 /G72 /G65 /G64 /G22 /G20 /G6F /G75 /G74 /G70 /G75 /G74 
/G7B /G64/G6E/G20 /G20 /G7D 
/G69 /G6E /G70 /G75 /G74 
/G46 /G49 /G52 /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G7B /G67/G6E/G20 /G20 /G7D /G2B 
/G65 /G72 /G72 /G6F /G72
/G7B /G66 /G20/G6E /G20 /G7D 
/G48 /G28 /G7A /G29 /G2D	/G7B /G65 /G6E /G20 /G20 /G7D 
/G6F /G75 /G74 /G70 /G75 /G74 
/G7B /G67/G6E/G20 /G20 /G7D 
/G62 /G6B /G66 /G69 /G6C /G74 /G65 /G72 
/G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73 
/G7B /G66 /G20 /G20 /G7D/G6E /G20 /G20 /G20 /G6C /G65 /G61 /G73 /G74 /G2D /G73 /G71 /G75 /G61 /G72 /G65 /G73 /G7B /G65 /G6E /G20 /G20 /G7D 
/G64 /G65	 /G73 /G69 /G67 /G6E /G20 /G61 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D 
Given an input sequence {fn}, and a desired ltered output sequence {dn}, the task is to 
design a FIR lter 
M 1 
H(z)= bkz k 
k=0 
that will minimize the error {en} = {dn}{gn} in some sense, where {gn} is the lter output. 
In particular, we will look at a lter design metho d that minimizes the mean-squared-error 
(MSE), where 
MSE = E e 2 
n 
= E (dn  gn)2 
= E d2 + E g 2  2E{dngn}n n 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
241</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Filter coefficients found by using white noise as the input 
1 2 3 4 5 6 7 8 9 10 8 6 4 2 0 2 4 
Compensated system impulse response 
0 10 20 30 40 50 60 70 0.2 0 0.2 0.4 0.6 0.8 1 1.2 
Example 4 
The following is another example of channel compensation, this time where the 
channel is corrupted by an echo. For clarity we use a simple strong echo, so 
that the waveform is yn = fn +0.9fn3. White noise is used as the excitation, 
and a lter length M = 50, and a delay  = 4 are chosen. Notice that complete 
echo suppression is not possible with a nite length FIR lter. 
% Model the environment as a nonrecursive filter: 
2410</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G66 /G6E /G20 /G20 
/parenleftbigg /parenrightbigg 1.2 Application Examples of Least-Squares Filters 
1.2.1 The Linear Predictor 
Suppose that we want a lter that will predict the value of a process {fn}  steps in the 
future, 
/G6C /G69 /G6E /G65 /G61 /G72 /G20 /G70 /G72 /G65 /G64 /G69 /G63 /G74 /G6F /G72 
The structure of least-squares lter design is 
/G61 /G64 /G76 /G61 /G6E /G63 /G65 /G48 /G28 /G7A /G29/G66 /G20 /G20/G6E /G67 /G20 /G20 /G3D /G20 /G66/G6E /G6E /G20 /G2B /G20 /G44 
/G48 /G28 /G7A /G29/G66 /G20 /G20/G6E /G6C /G69 /G6E /G65 /G61 /G72 /G20 /G70 /G72 /G65 /G64 /G69 /G63 /G74 /G6F /G72 /G7A /G44 
/G67 /G64 
/G65/G6E /G6E 
/G6E /G2B 
/G2D 
where dn = fn+. This system is not realizable however (because the advance block in the 
forward path is itself a predictor), and a practical design structure uses a delay of  steps 
in the forward path so that the lter design algorithm uses the input history to predict the 
curren t value. 
/G7A /G2D /G44 /G2B /G64/G6E
/G66 /G20/G6E /G20 /G20 /G2D /G20 /G44 /G6C /G69 /G6E /G65 /G61 /G72 /G20 /G70 /G72 /G65 /G64 /G69 /G63 /G74 /G6F /G72 /G67/G6E /G2D 
/G48 /G28 /G7A /G29 /G65/G6E 
/G64 /G65 /G6C /G61 /G79 
Once the lter is designed it may be used without the delay to predict the future. The most 
common form is the one-step ( = 1 predictor. 
Example 1 
Stearns and Hush (p. 346) solve the problem of a one-step linear predictor for 
an sinusoidal input function 
2n sn = sin ,n=0,1,2,...12 
/bracketleftBig /bracketrightBigT /radicalbig 
and show that b = (3) 1 . 
The following MATLAB code de4signs the lter using the function LSQFilt() 
describ ed above: 
245</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Estimated Impulse Response 
0 2 4 6 8 10 12 0 1 2 3 4 5 6 
1.2.3 Channel Comp ensation 
Suppose a waveform has been corrupted by passing through an unkno wn LTI lter H(z), 
and it is desired to recover the original waveform by using a cascade compensating inverse 
lter Hc(z)=1/H(z) so that Hc(zH (z) = 1. The structure is shown below, and includes an 
empirically chosen delay elemen t z to ensure causalit y of the compensating lter. 
/G63 /G68 /G61 /G6E /G6E /G65 /G6C/G69 /G6E /G70 /G75 /G74 /G72 /G65 /G73 /G70 /G6F /G6E /G73 /G65/G7B /G66 /G20/G6E /G20 /G7D 
/G59 /G28 /G7A /G29 /G20 /G3D /G20 /G48 /G28 /G7A /G29 /G46 /G28 /G7A /G29 
/G2D /G22 /G75 /G6E /G6B /G6E /G6F /G77 /G6E /G22 /G20
/G20 /G20 /G63 /G68 /G61 /G6E /G6E /G65 /G6C 
/G7A /G2D /G44 /G48 /G28 /G7A /G29 
/G46 /G49 /G52 /G20 /G63 /G6F /G6D /G70 /G65 /G6E /G73 /G61 /G74 /G69 /G6F /G6E /G7B /G67/G6E/G20 /G20 /G7D /G2B/G7B /G64/G6E/G20 /G20 /G7D /G20 /G3D /G20 /G7B /G66 /G20/G6E /G20 /G2D/G20 /G44 /G20 /G20 /G7D
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G66 /G69 /G6C /G74 /G65 /G72
/G48 /G20/G63/G20 /G28 /G7A /G29	/G63 /G6F /G6D /G70 /G65 /G6E /G73 /G61 /G74 /G65 /G64 /G20 /G6F /G75 /G74 /G70 /G75 /G74 
/G62 /G66 /G69 /G6C /G74 /G65 /G72	/G47 /G28 /G7A /G29 /G20 /G3D /G20 /G48 /G63/G20 /G28 /G7A /G29 /G48 /G28 /G7A /G29 /G46 /G28 /G7A /G29
/G6B /G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73 
/G7B /G66 /G20/G6E /G20 /G7D	/G20 /G20 /G20 /G6C /G65 /G61 /G73 /G74 /G2D /G73 /G71 /G75 /G61 /G72 /G65 /G73 /G7B /G65 /G20/G6E /G20 /G7D 
/G64 /G65 /G73 /G69 /G67 /G6E /G20 /G61 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D 
Example 3 
Use LSQFilt() , with white noise as the input, to design a compensation lter 
for an unkno wn recursiv e lter. 
0.296 H(z)=	 . 1  1.721z1 +0.8187Z2 
248</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G46 /G49 /G52 /G20 /G66 /G69 /G6C /G74 /G65 /G72
/G48 /G28 /G7A /G29/G22 /G64 /G65 /G73 /G69 /G72 /G65 /G64 /G22 /G20 /G6F /G75 /G74 /G70 /G75 /G74
/G7B /G67 /G20 /G20 /G7D/G6E/G7B /G66 /G20 /G20 /G7D /G7B /G65 /G20 /G20 /G7D/G65 /G72 /G72 /G6F /G72
/G20 /G20 /G20 /G6C /G65 /G61 /G73 /G74 /G2D /G73 /G71 /G75 /G61 /G72 /G65 /G73
/G64 /G65 /G73 /G69 /G67 /G6E /G20 /G61 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D/G6E /G6E/G7B /G64 /G20 /G20 /G7D/G6E
/G2B
/G2D/G69 /G6E /G70 /G75 /G74
/G6F /G75 /G74 /G70 /G75 /G74
/G7B /G67 /G20 /G20 /G7D/G6E
/G66 /G69 /G6C /G74 /G65 /G72
/G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73/G62 /G6B
/G7B /G65 /G20 /G20 /G7D/G6E/G7B /G66 /G20 /G20 /G7D/G6E Massa chusetts Institute of Technology 
Department of Mechanical Engineering 
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 241 
Reading: 
	Class Handout: MATLAB Examples of Least-Squar es FIR Filter Design 
Proakis and Manolakis: Sec. 12.3  12.5  
Stearns and Hush: Ch. 14  
1 Least-Squares Filter Design 
We now look at a FIR lter design technique that is based on experimen tal data 
Given an input sequence {fn}, and a desired ltered output sequence {dn} , the task is to 
design a FIR lter 
M1
H(z)=  
bkzk 
k=0 
that will minimize the error {en} = {dn}{gn} in some sense, where {gn} is the lter output. 
In particular, we will look at a lter design metho d that minimizes the mean-squared-error 
(MSE), where 
2MSE = E 
en 
=	E 
(dn  gn)2 
2 = E 
d2 
n 
+ E 
gn 
 2E{dngn} 
1copyrigh t cD.Ro well 2008 
241</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>b = [1 0 0 0.9 0 0];
% Use white noise as the excitation
s = randn(1,200);
f = filter(b,1,s);
% The desired output is a delayed version of the input:
d = zeros(1,200); d(4:200) = s(1:197);
% Design the filter
[B,MSE] = LSQFilt(f,d,50);
figure(1), stem(0:length(B)-1, B)
title(Reverberation cancelling impulse response)
% Find the overall compensated system impulse response
h_comp = conv(B,b);
figure(2), stem(0:length(h_comp)-1, h_comp)
title(Compensated reverberation impulse response)
0.8 0.6 0.4 0.2 0 0.2 0.4 0.6 0.8 1 Reverberation cancelling impulse response 
0 10 20 30 40 50 
2411</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>which is a set of linear equations in the coecien ts bk: 
b0ff(0) + b1ff(1) + ...+ bM1ff(M 1) = fd(0) 
b0ff(1) + b1ff(0) + ...+ bM1ff(M 2) = fd(1) 
b0ff(2) + b1ff(1) + ...+ bM1ff(M 3) = fd(2) . .	 . .	 . . . 
b0ff((M 1)) + b1ff((M 2)) + ...+ bM1ff(0) = fd(M 1) 
Recognizing that the auto-correlation function is an even function (ff(n)= ff(n)), we 
can write the equations in matrix form 
	   
ff(0) ff(1) ff(2)  ff(M 1) b0 fd(0) 
 ff(1) ff(0) ff(1)  ff(M 2)  b0  fd(1)  	    .	 .  .  =  .  .	 . . .  . .  .  .  
ff(M 1) ff(M 2) ff(M 3)  ff(0) b0 fd(0) 
or 
Rb = P
where   
ff(0) ff(1) ff(2)  ff(M 1) 
 ff(1) ff(0) ff(1)  ff(M 2)  
R =  . .  
.	 .  . .  
ff(M 1) ff(M 2) ff(M 3)  ff(0) 
is the correlation matrix, /bracketleftbig	 /bracketrightbigT b = b0 b1 b2  bM1 
are the lter coecien ts, and 
/bracketleftbig	 /bracketrightbigT P = fd(0) fd(1) fd(2)  fd(M 1) 
is the cross-c orrelation matrix. 
The MSE FIR lter coecien ts are 
b = R1P. 
Stearns and Hush show that with these coecien ts
(MSE) min = dd(0) PTb = dd(0) PTR1P. 
	R is a Toeplitz matrix, and ecien t algorithms (Levinson-Durbin  see Proakis and 
Manolakis Sec. 12.4.1) exist for its inversion (O(n2). 
	The developmen t above requires that the processes {fn and dn are stationary . 
243</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>1.1	 A Simple MA TLAB Tutorial Least-Squares Filter Design Func
tion 
%-----------------------------------------------------------------------
function [B,MSE] = LSQFilt(f,d,M) 
%LSQFilt -Demonstration routine for Least-Squares FIR filter design 
%[B,MSE] = LSQFilt(f,d,M) 
% f -rowvector of data samples -length N 
% d -row vector of desired values -length N 
% M -filter order 
% Returns: 
% B - vector of optimal filter coefficients 
% MSE -minimized value of the mean-square-error 
% % Note: This routine is for tutorial purposes only. The Levinson method for 
% toeplitz matrix inversion would be used in practical methods. 
% 
% Author: D. Rowell 
% Revised: 10/29/07 
%-----------------------------------------------------------------------
N = length(f); 
% Compute the correlation coefficients. 
% Note that matlab defines the cross-correlaton backwards!! and 
% we need to reverse the order of the subscripts. 
% 
phiff=xcorr(f); 
phifd=xcorr(d,f); 
% 
% Extract out the central regions (low-lag values) and form 
% the autocorrelation matrix. 
% 
rff=phiff(N:N+M-1);
R = toeplitz(rff);
P=phifd(N:N+M-1);
% % Compute the optimal filter coefficients 
% 
B=inv(R)*P; 
% % and the residual mean-square-error 
% 
phidd=xcorr(d); 
MSE=phidd(N) -P*B; 
% 
%-----------------------------------------------------------------------
244</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>0 10 20 30 40 50 600.100.10.20.30.40.50.60.70.80.9Compensated reverberation impulse response2412</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The fast Fourier transform (cont.)
Spectral leakage in the DFT and apodizing (windowing) functions</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_12/</lecture_pdf_url>
      <lectureno>12</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>briey here by considering a nite sample set (length N) of a sinusoid of the form 
f(t) = cos(at) 
so that 
fn = cos(anT) n = N/2,...N /2 1 
Notice that in eect we have sampled a windo wed version of f(t), or 
f(t)= f(t)rect(NT) 
where the rect function is dened 
rect(t)=	1 |t|&lt; 1/2, 
0 otherwise 
The Fourier transform of the windo wed sinusoid is the convolution of the two Fourier trans
forms 
F{cos(at)} = (( a)+ ( + a)) 
sin(NT/2)F{rect(NT)} = NT NT/2 
and the Fourier transform of the product is 
F(j) = F{rect(NT)cos(at)}
1
= (F{rect(NT)}F {cos(at)})2 
NT sin(( a)NT/2) sin((+ a)NT/2) =	 + 2 ( a)NT/2 (+ a)NT/2 
and the spectrum of the sampled waveform is 
F (j)= 1 F(j)T 
N sin(( a)NT/2) sin((+ a)NT/2) =	 + 2 ( a)NT/2 (+ a)NT/2 
which is a pair of sinc functions centered on frequencies  = a and = a. The spacing of 
the zeros of each of the sinc functions is at intervals of  = 2/NT. 
We may consider the DFT as a comb lter that displa ys discrete lines of the spectrum 
F(j) at frequencies: 
2m = ; m =0,1,2,...,N 1 NT 
so that in the DFT, 
Fm = F 2m 
NT
Now consider what happens in two situations:
05</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G38 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G64 /G61 /G74 /G61 /G20 /G73 /G65 /G74 /G34 /G20 /G32 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 /G73 /G32 /G20 /G34 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 /G73 /G38 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G30 
/G31 
/G32 
/G33 
/G34 
/G35 
/G36 
/G37 /G46 
/G46 
/G46 
/G46 /G46 /G46 /G46 /G46 /G30 
/G31 
/G32 
/G33 
/G34 
/G35 
/G36 
/G37 /G30 
/G30 /G32 
/G32 /G34 
/G34 /G36 
/G36 /G30 
/G30 /G30 /G30 /G34 /G34 
/G34 
/G34 /G66 /G66 
/G66 
/G66 
/G66
/G66
/G66 
/G66 /G30 
/G34 
/G32 /G36 
/G31
/G35/G33 
/G37 
Input Bit-Rev ersal: 
Notice that the algorithm describ ed above requires that the input sequence { fn} be re
ordered in the left-hand column to accomplish the even-odd decomp osition at each step. 
The particular order reqired by this form of the FFT is known as input bit reversal, which 
refers to a simple algorithm to determine the position k of the sample fn in the re-ordered 
sequence: 
1. Express the index n as a N-bit binary number. 
2. Reverse the order of the binary digits (bits) in the binary number. 
3. Translate the bit-rev ersed binary number back into decimal, to create the position in 
the sequence k. 
For example, the re-ordered position of f37 in a data sequence of length N =256=28 is 
found from 
bit reversal37 10 = 00100101 2  10100100 2 = 164 10 
so that f37 would be positioned at k = 164 in the decimated input sequence. 
The re-ordering procedure for N = 8 is: 
Input position n: 0 1 2 3 4 5 6 7 
(000) 2 (001) 2 (010) 2 (011) 2 (100) 2 (101) 2 (110) 2 (111) 2 
Bit reversal         
(000) 2 (100) 2 (010) 2 (110) 2 (001) 2 (101) 2 (011) 2 (111) 2 
Modied position k: 0 4 2 6 1 5 3 7 
The Inverse Fast Fourier Transform (IFFT): 
The inverse FFT is dened as 
N1 1 j 2mn 
N fn = Fm e ,n=0,...,N  1 (1)N m=0 
03</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>The width of the central lobe is wider than that of the rectangular windo w, indicating 
that the main lobe will be approximately two lines in width. 
	The magnitude of the side-lob es is signican tly reduced, indicating that leakage away 
from the main peak will be reduced. 
These two eects are demonstrated in the following two plots. In the rst plot there are three 
periods in the data record, and the data set as used has been windo wed using a Hanning 
function. In the non-windo wed case there would be no leakage but the central peak has now 
been smeared to occupy three lines. 
1 0.5 0 0.5 1 f(t) 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
t (sec) 
0 1 2 3 4 5 Magnitude 
8 6 4 2 0 2 4 6 8 
m 
In the second case the data set contains 3.5 periods of a cosinusoid, and has been windo wed 
with a Hanning function. Here it can be seen that the leakage components away from the 
main peak have been signican tly attenuated. 
09</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Hamming Windo w This is a smoothly tapered windo w that is similar to the Hanning 
windo w 
0.54+0.46cos((t  T/2)/(T/2)) 0  t&lt;T w(t)= 0 otherwise . 
0.54+0.46cos((n  N/2)/(N/2)) 0  n&lt;N wn = 0 otherwise . 
The magnitude spectra of these three windo ws are shown below, in linear and logarithmic 
plots for (a) Bartlett, (b) Hanning, and (c) Hamming windo ws. In each case the spectrum 
is shown in linear and logarithmic (dB) form. The frequency scale is normalized to units 
of line spacing (2/NT) radians/sec. The spectrum of the implicit rectangular windo w is 
shown as a dotted line in each case. The various windo ws are a compromise and trade-o the 
width of the central peak and attenuation of leakage components distan t from the peak. For 
example, the Hamming windo w has greater attenuation of components close to the cental 
peak, while the Hanning windo w has greater attenuation away from the peak. 
Magnitude Magnitude (dB)
1
Bartlett 0 
0.8 20 
0.6
40
0.4 
600.2 
0 80 
10 5 0 5 10 10 5 0 5 10 
Frequency (a) Frequency 
Magnitude Magnitude (dB)
1
Hanning 0 
0.8 20 
0.6
40
0.4 
600.2 
0 80 
10 5 0 5 10 10 5 0 5 10 
Frequency (b) Frequency 
Magnitude Magnitude (dB) 
1 
Hamming 0 
0.8 20 
0.6
40
0.4 
600.2 
0 80 Hamming 
10 5 0 5 10 10 5 0 5 10 
Frequency (c) Frequency Bartlett 
Hanning 
In each case it can be noted:
08</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discrete 
Fall Term 2008 
Lecture 121 
Reading: 
 Class Handout: The Fast Fourier Transform 
 Proakis and Manolakis (4th Ed.): Secs. 8.1  8.3 
 Oppemheim Schafer &amp; Buck (2nd Ed.): Secs. 9.0  9.3 
The Fast Fourier Transform (con td.) 
In Lecture 11 we saw that we could write the DFT of a length N sequence as 
N1 N1 
j 2mn Fm = fn e N = fnWNmn ,m=0,...,N  1 
n=0 n=0 
where WN =ej2/N . We noted that the number of complex multiplication operations 
to compute the DFT is N2, but if we divided the original sequence into two length N/2 
sequences (based on even and odd samples) and computed the DFT of each shorter sequence, 
they could be combined 
Fm = Am + WNmBm for m=0 ...(N/2  1), and 
Fm = AmN/2  WNmN/2BmN/2 for m= N/2 ...(N  1) 
where {Am} is the DFT of the even-numbered samples, and {Bm} is the DFT of the odd-
numbered samples. 
/G30 
/G31
/G32
/G33 
/G34
/G35 
/G36 
/G37 /G41 
/G41
/G41 
/G41 
/G42
/G42 
/G42 
/G42 /G30 
/G30/G31
/G31/G32
/G32
/G33/G33 /G34 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G65 /G76 /G65 /G6E /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G34 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G6F /G64 /G64 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G30 /G32 /G34 /G36 
/G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G31 /G33 /G35 /G37 /G46 /G30/G20 /G3D /G20 /G41 /G20/G30 /G20 /G2B /G20 /G57 /G38 /G20/G30/G20 /G42 /G30 
/G46 /G31/G20 /G3D /G20 /G41 /G20/G31 /G20 /G2B /G20 /G57 /G38 /G20/G31/G20 /G42 /G31 
/G46 /G32/G20 /G3D /G20 /G41 /G20/G32 /G20 /G2B /G20 /G57 /G38 /G20/G32/G20 /G42 /G32 
/G46 /G33/G20 /G3D /G20 /G41 /G20/G33 /G20 /G2B /G20 /G57 /G38 /G20/G33/G20 /G42 /G33 
/G46/G34/G20 /G3D /G20 /G41 /G20/G34 /G20 /G2B /G20 /G57 /G38 /G20/G34/G20 /G42 /G20 /G34 /G20 /G20 /G3D /G20 /G41 /G20 /G30 /G20 /G2D /G20 /G57 /G20/G38/G30/G20 /G42 /G30 
/G46/G35/G20 /G3D /G20 /G41 /G20/G35 /G20 /G2B /G20 /G57 /G38 /G20/G35/G20 /G42 /G20 /G35 /G20 /G20 /G3D /G20 /G41 /G20 /G31 /G20 /G2D /G20 /G57 /G20/G38/G31/G20 /G42 /G31 
/G46/G36/G20 /G3D /G20 /G41 /G20/G36 /G20 /G2B /G20 /G57 /G38 /G20/G36/G20 /G42 /G20 /G36 /G20 /G20 /G3D /G20 /G41 /G20 /G32 /G20 /G2D /G20 /G57 /G20/G38/G32/G20 /G42 /G32 
/G46/G37/G20 /G3D /G20 /G41 /G20/G37 /G20 /G2B /G20 /G57 /G38 /G20/G37/G20 /G42 /G20 /G37 /G20 /G20 /G3D /G20 /G41 /G20 /G33 /G20 /G2D /G20 /G57 /G20/G38/G33/G20 /G42 /G33 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
01</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>1 0.5 0 0.5 1 f(t) 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
t (sec) 
0 2 4 6 Magnitude 
8 6 4 2 0 2 4 6 8 
m 
Reduction of Leak age by an Apodizing (Windo wing) Function The reason for the 
appearance of leakage components in the DFT of a truncated data set is the convolution of 
the data spectrum with that of the truncation windo w (the rect function). Each sinusoidal 
component in f(t) has a spectrum F(j) that is a pair of impulses in the frequency domain: 
multiplication by the truncating function causes a spread in the width of the component. 
Leakage may be reduced (but not eliminated) by using a dierent function to truncate 
the series instead of the implicit rect function. These functions are known as an apodizing, 
or windo wing, functions and are chosen to smoothly taper the data record to zero at the 
extremities, while minimizing the spectral spreading of each component. The data record 
then becomes 
f(t)= f(t)w(t) 
or in the samples 
fn = fnwn 
where w(t) (or wn) is the windo wing function. There are many windo wing functions in 
common use, the following are perhaps the most common: 
Bartlett Windo w: This is a triangular ramp, tapered to zero at the extremities of the 
record 
w(t)=	1 |t T/2|/(T/2) 0 t&lt;T 
0 otherwise , 
1 |n N/2|/(N/2) 0 n&lt;N wn = 0	 otherwise . 
Hanning Windo w This is a smoothly tapered windo w 
0.5(1.0 + cos((t T/2)/(T/2))) 0 t&lt;T w(t)= 0	 otherwise , 
0.5(1.0 + cos((nN/2)/(N/2))) 0 n&lt;N wn = 0	 otherwise . 
07</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>(a)	The frequency a in f(t) = cos(at) is such that the data record contains an integer 
number of periods. In this case the length of the data record 
2	 2M NT	= M or a = , for M integer. a	 NT 
The DFT is  
N sin((m  M)) sin((m + M))
Fm = +	 (3)2 (m  M) (m + M) 
that is Fm = N/2 for m = M and Fm = 0 otherwise, which is what we would expect. 
(b)	The frequency a in f(t) = cos(at) is such that the data record does not contain an integer 
number of periods. In this case the peak and zeros of the sinc functions will not line 
up with the frequencies 2m/(NT) in the DFT and the results will (1) not show the 
peak of the sinc functions, and (2) will show nite components at all frequencies. This 
is the origin of spectral leakage. 
Spectral leakage occurs when frequency components in the input function f(t) are 
not harmonics of the fundamen tal frequency k0 =2/(NT ), dened by the length 
of data record NT. Under such conditions the lines in the DFT do not accurately 
reect the amplitude of the component, and spurious components appear adjacen t 
to the component. 
This phenomenon is illustrated in the following two gures based on a DFT of length 16. In 
the rst case the frequency of the the sinusoid is chosen so that there are four cycles in the 
data record. The DFT shows two clean components at the appropriate frequency with no 
evidence of leakage. 
1 0.5 0 0.5 1 f(t) 
0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1 
t (sec) 
0 2 4 6 8 10 Magnitude 
8 6 4 2 0 2 4 6 8 
m 
In the second case the data record contains 3.5 cycles of the sinusoidal component. The 
spectral leakage is severe: both the height of the main peak is reduced, and signican t 
amplitudes are recorded for all spectral components. 
06</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>While the IFFT can be implemen ted in the same manner as the FFT describ ed above, it is 
possible to use a forward FFT routine to compute the IFFT as follows: Since the conjugate 
of a product is the product of the conjugates, if we take the complex conjugate of both sides 
we have 
N1 1 j 2mn 
N fn = Fm e . N m=0 
The right-hand side is recognized as the DFT of Fm and can be computed using a for
ward FFT, such as describ ed above. The complete IDFT may therefore be computed by 
conjugating the output, that is 
N1 1 j 2mn 
N fn = Fm e ,n=0,...,N  1 (2)N m=0 
The steps are: 
1. Conjugate the data set {Fm}. 
2. Compute the forward FFT. 
3. Conjugate the result and divide by N. 
Computational Savings of the FFT: 
As expressed above the computational requiremen ts (in terms of complex multiplications) is 
M FFT =(N/2)log2(N) if the initial 2-point DFTs are implemen ted with exponentials. The 
number of complex multiplications for the direct DFT computation is M DFT = N2)Wecan 
therefore dene a speed impro vement factor M FFT/M DFT as is shown below: 
N M DFT M FFT M FFT/M DFT 
4 16 4 0.25 
8 64 12 0.188 
16 256 32 0.125 
32 1,024 80 0.0781 
64 4,096 192 0.0469 
128 16,384 448 0.0273 
256 65,536 1024 0.0156 
512 262,144 2,304 0.00879 
1024 1,048,576 5,120 0.00488 
2048 4,194,304 11,264 0.00268 
4096 16,777,216 24,576 0.00146 
Spectral Leak age in the DFT and Apodizing (Windo wing) Func
tions 
Often apparen tly spurious spectral components will appear in the output of a DFT compu
tation. This phenomenon is known as spectral leakage. We examine the origin of this eect 
04
2</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G46 
/G46 
/G46 
/G46 /G33 
/G46 /G34 
/G46 /G46 
/G36 
/G46 /G30 
/G31 
/G32 
/G35 
/G37 The total number of required complex multiplications is (N/2)2 for each shorter DFT, and 
N/2 to combine the two, giving a total of N(N +1)/2, which is less than N2 . 
If N is divisible by 4, the process may be repeated, and each length N/2 DFT may be 
formed by decimating the two N/2 sequences into even and odd components, forming the 
length N/4 DFTs, and combining these back into a length N/2 DFT, as is shown for N =8 
below: 
/G34 /G20 /G32 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 /G73 /G32 /G20 /G34 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 /G73 /G38 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G30 
/G31 
/G32 
/G33 
/G34 
/G35 
/G36 
/G37 /G32 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G30 /G34 /G30 
/G30 /G32 
/G32 /G34 
/G34 /G36 
/G36 /G32 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G32 /G36 
/G32 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G31 /G35 
/G32 /G2D /G70 /G6F /G69 /G6E /G74 /G20 /G44 /G46 /G54 
/G66 /G72 /G6F /G6D /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G7B /G66 /G20 /G20 /G2C /G20 /G66 /G20 /G20 /G7D/G33 /G37 
Notice that all weights in the gure are expressed by convention as exponents of W8. 
In general, if the length of the data sequence is an integer power of 2, that is N =2q for 
integer q, the DFT sequence {Fm} may be formed by adding additional columns to the left 
and halving the length of the DFT at each step, until the length is two. For example if 
N =256=28 a total of seven column operations would be required. 
The nal step is to evaluate the N/2 length-2 DFTs. Each one may be written 
F0 = f0 + W20f1 = f0 + f1
F1 = f0 + W21f1 = f0  f1,
which is simply the sum and dierence of the two sample points. No complex multiplications 
are necessary . The 2-point DFT is shown in signal-o w graph form below, and is known as 
the FFT buttery . 
/G46/G30 /G20 /G3D /G20 /G66/G30/G20 /G20 /G2B /G20 /G57 /G32/G20/G30/G20 /G66/G31/G20 /G20 /G3D /G20 /G66 /G30 /G20 /G20 /G2B /G20 /G66 /G31 
/G46/G31/G20 /G3D /G20 /G66/G30/G20 /G20 /G2B /G20 /G57 /G32 /G20/G31/G20 /G66/G31/G20 /G20 /G3D /G20 /G66/G30 /G20 /G20 /G2D /G20 /G66/G31 
The complete FFT algorithm for N = 8 is shown below. We note that if N =2q, there 
will be q = log2(N) columns in the signal-o w graph, and after the sum and dierence to 
form the 2-point DFTs there will be log2(N)  1 column operations, each involving N/2 
complex multiplications, giving a total of N/2(log2(N)  1)  N2 . We will address the 
issue of computational savings in more detail later. 
02 /G30 
/G31 /G66 
/G66 /G30 
/G31</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>00.10.20.30.40.50.60.70.80.9110.500.51
t (sec)f(t)
8 6 4 2 0 2 4 6 801234
mMagnitude010</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Non-parametric power spectral density estimation</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_23/</lecture_pdf_url>
      <lectureno>23</lectureno>
      <slides>
        <slide>
          <slideno>2</slideno>
          <text>the PSD from nite records of an innite random process. For example, the following gure 
shows a stationary random process with three possible nite records. An estimator ff(j) 
of ff(j ) is to made from one of the nite-length records. 
/G66 /G28 /G74 /G29 
/G52 /G65 /G63 /G6F /G72 /G64 /G20 /G31 /G52 /G65 /G63 /G6F /G72 /G64 /G20 /G32 /G52 /G65 /G63 /G6F /G72 /G64 /G20 /G33 
We ask ourselv es about the statistics of estimators derived from the dieren t records, in 
particular, 
(1) the bias in the estimator 
B ff(j) = ff(j) E ff(j) 
(2) the varianc e of the estimator 
   2 
V ff(j) = E ff(j) ff(j) 
1.1 The Perio dogram 
1.1.1 The Con tinuous Perio dogram 
If f(t) is a stationary , real, random process, its autocorrelation function is dened by the 
ensem ble statistics 
ff()= E{f(t)f(t + )}. 
For an ergodic process, if we have a single record of duration T we can compute an estimator, 
ff() based on the time average: 
1 T/2 
ff()= f(t)f(t + )dt,T T/2 
and 
ff() = lim ff(). 
T 
232</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G30 /G35 /G30 /G31 /G30 /G30 /G31 /G35 /G30 /G32 /G30 /G30 /G32 /G35 /G30 /G33 /G30 /G30 /G33 /G35 /G30 /G34 /G30 /G30 /G34 /G35 /G30 /G35 /G30 /G30/G2D /G34 /G30/G2D /G33 /G35/G2D /G33 /G30/G2D /G32 /G35/G2D /G32 /G30/G2D /G31 /G35/G2D /G31 /G30/G2D /G35/G30
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G48 /G7A /G29/G50 /G6F /G77 /G65 /G72 /G2F /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G64 /G42 /G2F /G48 /G7A /G29/G50 /G65 /G72 /G69 /G6F /G64 /G6F /G67 /G72 /G61 /G6D /G20 /G50 /G6F /G77 /G65 /G72 /G20 /G53 /G70 /G65 /G63 /G74 /G72 /G61 /G6C /G20 /G44 /G65 /G6E /G73 /G69 /G74 /G79 /G20 /G45 /G73 /G74 /G69 /G6D /G61 /G74 /G65
/G57 /G65 /G6C /G63 /G68 /G20 /G50 /G6F /G77 /G65 /G72 /G20 /G53 /G70 /G65 /G63 /G74 /G72 /G61 /G6C /G20 /G44 /G65 /G6E /G73 /G69 /G74 /G79 /G20 /G45 /G73 /G74 /G69 /G6D /G61 /G74 /G65/G50 /G6F /G77 /G65 /G72 /G2F /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G64 /G42 /G2F /G48 /G7A /G29
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G48 /G7A /G29/G30 /G35 /G30 /G31 /G30 /G30 /G31 /G35 /G30 /G32 /G30 /G30 /G32 /G35 /G30 /G33 /G30 /G30 /G33 /G35 /G30 /G34 /G30 /G30 /G34 /G35 /G30 /G35 /G30 /G30/G2D /G34 /G30/G2D /G33 /G35/G2D /G33 /G30/G2D /G32 /G35/G2D /G32 /G30/G2D /G31 /G35/G2D /G31 /G30/G2D /G35/G30239</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>1.2.4 MATLAB Examples 
MATLAB has built-in functions for spectral estimation, in particular the function spectrum() 
is a powerful general function for non-parametric estimation, and the function pwelch() can 
be used for Welchs metho d. 
Notes: 
(1)	The MATLAB functions can represen t a continuous periodogram IT (j ) by specifying 
a sampling rate. 
(2)	The MATLAB default convention is that if the sample set is real the PSD is computed 
as a one-side d spectrum, that is it is assumed the the power is contained in positiv e 
frequencies only. Because of the real, even nature of the periodogram, the one-sided 
spectrum has values twice those of the two-sided spectra. For complex data sets the 
convention is to compute the two-sided spectra. The defaults can be overuled by 
optional argumen ts in the function calls. 
The following script was used to displa y a periodogram and a Welch estimate of a 200 
Hz sinusoid in noise. A 1.024 sec. data record, with a sampling rate of 1000 samples/sec. is 
simulated. 
% Create the data record.
Fs = 1000;
t = 0:1/Fs:1.024;
f = cos(2*pi*t*200) + randn(size(t)); % A cosine of 200Hz plus noise
% Periodogram
figure(1);
h = spectrum.periodogram;
psd(h,f,Fs,Fs);
%
% Welchs method.
% Use default of 8 sections, 50% overlap, Hamming window
figure(2);
pwelch(f,128,64,128,Fs);
The following two plots were generated. 
238</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Furthermore, the Fourier transform of ff() provides an estimator ff(j ) of the PSD 
ff(j)  T/2 
= ff()ej d 
T/2 
= 1  T/2  T/2 
f(t)f(t+ )dte j d T T/2 T/2 
1 = F(j )F(j) T 
= 1 |F(j )|2 . T 
where F(j ) is the Fourier transform of the nite data record. The perio dogram estimator 
IT(j ) is then dened as 
IT(j) = ff(j)= 1 |F(j)|2 . T 
1.1.2 The Discrete-Time Perio dogram 
For an innite sampled data record {fn}, the autocorrelation function is dened by the 
expectation 
ff(m)= E{fnfn+m}, 
and, invoking ergodicity, a time-a verage denition is 
N11 ff(m) = lim fnfn+m. 
N N n=0 
As in the continuous case, we can use a single nite length record, of length N, to form 
an estimator of ff(j ). The equivalent periodogram denition (through the DFT) is 
IN (k)= ff (k)= 1 FkFk =1 |Fk|2 . N N 
where {Fk}is the DFT of {fn}. 
1.1.3 The Relationship between IT(j) and IN(k) 
We frequen tly want to used discrete-time analysis to estimate the PSD of a continuous 
waveform. Consider a nite sample set {fn}, of length N, derived from sampling a continuous 
waveform f(t) with sampling interval , so that 
fn = f(n),n=0,...,N 1. 
From sampling theory F(j ), the Fourier transform of the sampled waveform f(t)is 
F  (j) = F(j), 
233</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G30 /G30 /G31 /G35 /G30 /G32 /G30 /G30 /G32 /G35 /G30 /G33 /G30 /G30 /G33 /G35 /G30 /G34 /G30 /G30 /G34 /G35 /G30 /G35 /G30 /G30 /G2D /G31 /G30 /G30 /G2D /G35 /G30 /G30 
/G30 /G30 /G31 /G35 /G30 /G32 /G30 /G30 /G32 /G35 /G30 /G33 /G30 /G30 /G33 /G35 /G30 /G34 /G30 /G30 /G34 /G35 /G30 /G35 /G30 /G30 /G2D /G31 /G30 /G30 /G2D /G35 /G30 /G30 
/G30 /G30 /G31 /G35 /G30 /G32 /G30 /G30 /G32 /G35 /G30 /G33 /G30 /G30 /G33 /G35 /G30 /G34 /G30 /G30 /G34 /G35 /G30 /G35 /G30 /G30 /G2D /G31 /G30 /G30 /G2D /G35 /G30 /G30 The estimated autocorrelation function used to compute the priodogram is therefore 
biased. For the mth lag, the unbiased time-a verage estimator of the autocorrelation 
function should therefore be 
N1 
/prime (m)= 1 fnfn+m,m= (N 1),...,N 1ffN |m| n=0 
which is sometimes known as the mean-lagge d-pr oduct. Then
N1   
E{IN(k)}= N |m| ff(m)ej2km/N 
N m=(N1) 
The periodogram is therefore a biased estimator of ff(j ). We note, however, that 
lim IT(j) = ff(j) 
T 
and that IT(j ) is therefore asymptotically unbiased. 
(3) Variance of the perio dogram.	 A somewhat surprising result is that the variance of 
the of IN(k) (and IT(j )) does not decrease signican tly as N increases. For large 
values of the lag m, particularly when m  N, because there are few values in the 
/prime	/prime j 2ksum the variance of the estimate ff(m) becomes large, and although ff  
N  
is 
asymptotically unbiased, the variance does not decay to zero as N . In fact 
lim var[ff(j)] 2 (j) ffN 
that is the variance is approximately equal to the square of the true value (see OS&amp;B 
10.6, P&amp;M 14.1.2), and is not reduced by taking a longer data record. 
As more points are taken into the computation of the periodogram, the apparen t 
spectral resolution is increased, but the reliabilit y of the extra points is marred by 
the residual variance. The following gure shows periodograms of a 200 Hz sinusoid 
in noise, sampled with  = 0.001 s, and computed with N = 128,512, and 2048 
samples. (Only one side of the periodogram is shown). Notice that the variance does 
not decrease. 
/G4E /G3D /G31 /G32 /G38
/G35 /G30 /G31 /G30 
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G48 /G7A /G29 
/G4E /G3D /G35 /G31 /G32
/G35 /G30 /G31 /G30 
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G48 /G7A /G29 
/G4E /G3D /G32 /G30 /G34 /G38
/G35 /G30 /G31 /G30 
/G46 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G28 /G48 /G7A /G29 
235 /G50 /G53 /G44 /G20 /G28 /G64 /G42 /G29 /G50 /G53 /G44 /G20 /G28 /G64 /G42 /G29 /G50 /G53 /G44 /G20 /G28 /G64 /G42 /G29</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>(2)	Welchs metho d also applies a windo w function w(n) to each of the data records before 
the DFT is computed. A modied periodogram based on the windo wed record is then 
computed 
(q) 1 K1
fnw(n)ej2nk/Q IK (k)= 	
q =1,...,Q KU n=0 
where 
1 K1
U =  
w 2(n)K n=0 
is a factor to comp ensate for the fact that the windo wing operation has reduced the 
power of the waveform, and allows the estimator to be asymptotically unbiased. 
As before, the spectral estimator is taken as the ensem ble average of the windo wed and 
overlapp ed blocks 
Q
1(q)IK (k)=  
IK (k)Q q=1 
1.2.3 The Blackman-T ukey Metho d: Smoothing the Periodogram 
Blackman and Tukey proposed that an eectiv e metho d of variance reduction would be to 
smo oth the periodogram estimate with a low-pass lter, and that the smoothing operation 
could be implemen ted by applying a suitable windowing function in the delay domain of the 
autocorrelation function, to achieve the desired frequency domain convolution. 
An alternativ e rationale is based on the reliabilit y (variance) of the samples in the au
tocorrelation function for large lags. As was demonstrated at the start of this lecture, for 
a xed length data record, the overlap in the product for computing ff (m) is N |m|, 
and as m N the variance becomes large. The windo wing operation serves to reduce the ||
contribution of these unreliable estimates in the computation of the PSD. 
The Blackman-T ukey estimator is 
M1
 ff (m)w (m)ej2km/(2M 1)IN (k)=  
m=(M1) 
where the windo w function is real and symmetric about its mid-p oint (to ensure that IN (k) 
is real). The windo w length parameter M may be shorter than the data record length N. 
The Blackman-T ukey estimate is therefore 
IN (k)= IN (k)  W (k) 
where {W (k)} = DFT {w(n)}. 
The choice of windo w function should be made to ensure that IN (j) &gt; 0. Many com
monly used windo ws, such as the Hamming and Hann windo ws, do not have this property, 
and may result in negativ e values for the spectral estimates. The triangular Bartlett windo w 
does maintain the sign of the estimates. 
237</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>(4) Implicit windo wing in the periodogram. We noted above that
N1
E{IN (j)} = N |m| 
ff (m)emjT 
N m=(N 1) 
The periodogram is therefore the Fourier transform of the true autocorrelation function 
multiplied by the Bartlett windo w function 
mwN (m)= N ||, m =0,...,N  1. N 
The periodogram is therefore the convolution of the true spectral densit y and the 
Fourier transform of the Bartlett windo w, resulting in a smoothing operation, and the 
introduction of Gibbs eect ripple adjacen t to transitions in the spectrum. 
Aside: It is interesting to note that for the Barlett windo w, F{wN (m)} 0 and as 
a result the convolution maintains the requiremen t that IN (j)  0. 
1.2 Variance Reduction in Periodogram PSD Estimation 
There are two common metho ds of reducing the variance in the periodogram metho d of PSD 
estimation (1) the averaging of periodograms, and (2) the smoothing of a single periodogram 
by windo wing the autocorrelation function. 
1.2.1 The Bartlett Metho d: The Averaging of Periodograms 
Bartlett proposed the ensem ble averaging of basic periodograms as a means of reducing the 
variance in the estimate -at the expense of spectral resolution, and increased bias. Supp ose 
we have a record {fn} of length N, and we divide the total record into Q smaller blocks, each 
(q)of length K. Then if we compute the periodogram of each block and designate it IK (k), 
q =1,...,Q, the averaged periodogram may be dened as 
Q1 (q)IK (k)=  
IK (k)Q q=1 
Because each of the smaller blocks contains fewer samples, the spectrum computed through 
the DFT will have decreased spectral resolution. However, provided each of the Q peri
odograms are statistically indep enden t, the variance will be reduced by a factor of Q 
1	 (q) 12V 
IK (j) 
= QV 
IK (j) 
 Q ff (k). 
1.2.2 The Welch Metho d: The Averaging of Modied Periodograms 
Welch proposed two enhancemen ts to Bartletts metho d: 
(1)	Welch showed that instead of dividing the data sequence into contiguous smaller blocks, 
it is possible to overlap adjacen t blocks by as much as 50% and still maintain statistical 
indep endence. The eect is to increase Q, the number of data blocks in the ensem ble 
average and thus eect a further reduction in the variance of IK (k). 
236</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>and through the DTFT 
N1 
F  (j) = fn e j n . 
n=0 
Then the continuous periodogram, with record length T = N, evaluated at  = 2k/N is 
   2j2k 1  j2k  
IT = F T T N 	 2 
=1	 
F  j2k  
N N 
and since   N1 
F 	j2k = fn e j2kn/N = FkN n=0 
j2k  2IT = |Fk|=IN (k)T	 N 
The discrete-time periodogram is therefore a scaled version of the continuous periodogram. 
1.1.4	 Prop erties of the Perio dogram: 
(1) The perio dogram is a real, even function.	 Because it is dened by the Fourier 
transform of the autocorrelation function (which is a real, even function), the peri
odogram is also a real, even function. 
(2) The perio dogram is a biased estimator.	 Consider the denition of the estimate 
of the autocorrelation implicitly used above 
N1 
ff (m)= 1 fnfn+m. N n=0 
With a nite length record the overlapping region of the two records {fn}and {fn+m}
in the summation only includes N |m| terms: 
/G66 
/G66 /G30 /G4E /G2D /G31 /G6E 
/G6E /G4E /G2D /G31 /G6E 
/G6E /G2B /G6D /G4E /G2D /G7C /G6D /G7C /G20 /G74 /G65 /G72 /G6D /G73 
/G2D /G6D /G4E /G2D /G6D /G2D /G31 
234</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>MIT OpenCourseWare 
http://ocw.mit.edu 
2.161 Signal Processing: Continuous and Discrete 
Fall 2008 
For information about citing these materials or our Terms of Use, visit: http://ocw.mit.edu/terms .</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
Department of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 231 
Reading: 
Proakis and Manolakis: Secs. 14.1  14.2  
	Oppenheim, Schafer, and Buck: 10.6  10.8
Stearns and Hush: 15.4, 15.6
  
1 Non-P arametric Power Spectral Densit y Estimation 
In Lecture 22 we dened the power-density spectrum ff (j ) of an innite duration, real 
function f(t) as the Fourier transform of its autocorrelation function ff () 
 
1  T/2  
ff (j) = F lim f(t)f(t +  )dt. 
T  T T/2 
with units of (physical-units)2.s or (physical-units)2/Hz, where physical-units are the units 
of f(t), for example volts. The waveform power contained in the spectral region between 
1 &lt; &lt; 2 is || 
1  1	 2 
P = ff (j)d+ ff (j)d2	1  2 2 
1 = ff (j)d 	1 
since ff (j ) is a real, even function. 
Similarly , we dened the energy-density spectrum Rff (j ) of a real nite duration wave
form f(t) of duration T as the Fourier transform of its energy based autocorrelation function 
ff ()  T 
Rff (j) = F f(t)f(t + )dt. 
0 
with units of (physical-units)2.s2 or (physical-units)2.s/Hz, again where physical-units are 
the units of f(t). 
In this lecture we address the issue of estimating the PSD (power spectral densit y) 
ff (j ) of an innite process using a nite length sample of the process. PSD analysis is an 
importan t tool in engineering analysis. The practical problem is to form reliable estimates of 
1copyrigh t cD.Ro well 2008 
231</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>The sampling theorem
The discrete Fourier transform (DFT)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_10/</lecture_pdf_url>
      <lectureno>10</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>The DFT operations are a transform pair between two sequenc es {fn} and {Fm}.  
The DFT expressions do not explicitly involve the sampling interval T or the sam  
pled frequency interval  = 2/(nT ). 
 	 Simple substitution into the formulas will show that both Fm and fn are periodic 
with period N, that is fn+pN = fn and Fm+pN = Fm for any integer p. 
The inverse transform is easily demonstrated: 
1	 N1 1 N1 N1  
j2mn/N  
fk ej2mk/N j2mn/N fn = Fm e =	 e N	 N m=0 m=0 k=0 
1 N1 N1 
j2m(nk)/N =  
fk  
e N k=0 m=0 
1 = (Nfn)= fnN 
since 
N1	 
N  
e = for n = kj2m(nk)/N 
0 otherwise . m=0 
As in the continuous Fourier transform case, we adopt the notations 
DFT {fn}  {Fm} 
{Fm} = DFT {fn} 
{fn} = IDFT {Fm} 
to indicate DFT relationships. 
108</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G57 
/G57 This phenomenon is known as aliasing. After sampling any spectral component in F(j) 
above the Nyquist frequency /T will masquerade as a lower frequency component 
within the reconstruction bandwidth, thus creating an erroneous reconstructed function. 
The phenomenon is also known as frequency folding since the high frequency components 
will be folded down into the assumed system bandwidth. 
One-half of the sampling frequency (i.e. 1/(2T) cycles/second, or /T radians/second) 
is known as the aliasing frequency ,or folding frequency for these reasons. 
/G33 /G70 /G2F /G44 /G54 /G35 /G70 /G2F /G44 /G54 
/G70 /G2F /G44 /G54 /G33 /G70 /G2F /G44 /G54 
/G30 /G70 /G2F /G44 /G54 /G2D /G70 /G2F /G44 /G54 
/G2D /G33 /G70 /G2F /G44 /G54 /G2D /G70 /G2F /G44 /G54 
/G2D /G35 /G70 /G2F /G44 /G54 /G2D /G33 /G70 /G2F /G44 /G54 
The following gure shows the eect of folding in another way. In (a) a function f(t) with 
Fourier transform F(j ) has two disjoin t spectral regions. The sampling interval T is 
chosen so that the folding frequency /T falls between the two regions. The spectrum 
of the sampled system between the limits /T&lt;   /T is shown in (b). The 
frequency components above the aliasing frequency have been folded down into the region 
/T&lt;   /T. 
/G46 /G28 /G6A /G57 /G29 
/G73 /G61 /G6D /G70 /G6C /G69 /G6E /G67 /G20 /G61 /G74 /G20 /G44 /G54 
/G57 /G46 /G20 /G20 /G28 /G6A /G57 /G29 /G2A /G20 
/G61 /G6C /G69 /G61 /G73 /G65 /G64 /G20 /G73 /G70 /G65 /G63 /G74 /G72 /G61 /G6C 
/G63 /G6F /G6D /G70 /G6F /G6E /G65 /G6E /G74 /G73 /G61 /G6C /G69 /G61 /G73 /G65 /G64 /G20 /G73 /G70 /G65 /G63 /G74 /G72 /G61 /G6C 
/G63 /G6F /G6D /G70 /G6F /G6E /G65 /G6E /G74 /G73 
/G2D /G70 /G2F /G44 /G54 /G30 /G70 /G2F /G44 /G54 /G2D /G70 /G2F /G44 /G54 /G30 /G70 /G2F /G44 /G54 
/G28 /G61 /G29 /G28 /G62 /G29 
1.2 Anti-Aliasing Filtering: 
Once a sample set {fn} has been taken, there is nothing that can be done to eliminate the 
eects of aliased frequency components. The only way to guaran tee that the sample set 
unambiguously represen ts the generating function is to ensure that the sampling theorem 
criteria have been met, either by 
103</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G74 /G66 /G28 /G74 /G29 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 101 
Reading: 
 Class Handout: Sampling and the Discr ete Fourier Transform 
 Proakis &amp; Manolakis (4th Ed.) Secs. 6.1  6.3, Sec. 7.1 
 Oppenheim, Schafer &amp; Buck (2nd Ed.) Secs. 4.1  4.3, Secs. 8.1  8.5 
The Sampling Theorem 
Given a set of samples {fn} and its generating function f(t), an important question to ask 
is whether the sample set uniquely denes the function that generated it? In other words, 
given {fn} can we unambiguously reconstruct f(t)? The answer is clearly no, as shown 
below, where there are obviously many functions that will generate the given set of samples. 
In fact there are an innit y of candidate functions that will generate the same sample set. 
The Nyquist sampling theorem places restrictions on the candidate functions and, if 
satised, will uniquely dene the function that generated a given set of samples. The theorem 
may be stated in many equivalent ways, we presen t three of them here to illustrate dieren t 
aspects of the theorem: 
	A function f(t), sampled at equal intervals T, can not be unambiguously 
reconstructed from its sample set {fn} unless it is known a-priori that f(t) 
contains no spectral energy at or above a frequency of /T radians/s. 
	In order to uniquely represen t a function f(t) by a set of samples, the sampling 
interval T must be sucien tly small to capture mor e than two samples per 
cycle of the highest frequency component presen t in f(t). 
	There is only one function f(t) that is band-limited to below /T radians/s 
that is satised by a given set of samples {fn}. 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
101</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>by reversing the order of integration and summation, and using the sifting property of (t). 
We note: 
	F(j ) is a continuous function of , but is computed from the sample points f(nT) 
in f(t). 
	We have shown that F(j ) is periodic in  with period 0 =2/T. 
We now restrict ourselv es to a nite, causal waveform f(t) in the interval 0  t&lt;nT,so 
that it has N samples, and let 
N1 
F  (j) = f(nT)ejnT 
n=0 
which is known as the Discr ete-Time Fourier Transform (DTFT). 
As a further restriction consider computing a nite set of N samples of F(j ) in a single 
period, from  = 0 to 2/T, that is at frequencies 
2m m = for m=0,1,2,...,N  1 NT 
/G46 /G20 /G2A /G20 /G28 /G6A /G57 /G29	 /G4E /G20 /G65 /G71 /G75 /G69 /G2D /G73 /G70 /G61 /G63 /G65 /G64 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 
/G69 /G6E /G20 /G6F /G6E /G65 /G20 /G70 /G65 /G72 /G69 /G6F /G64 /G20 /G6F /G66 /G20 /G46 /G20 /G2A /G20 /G28 /G6A /G57 /G29 
/G30 /G2D /G70 /G2F /G44 /G54 /G70 /G2F /G44	 /G54 /G32 /G70 /G2F /G44 /G54 
and writing Fm = F(jm)= F(j2m/NT), the DTFT becomes 
N1 
Fm = fn e j2mn/N for m=0,1,2,...,N  1 
n=0 
where fn = f(nT). This equation is known as the Discr ete Fourier Transform (DFT) and 
relates the sample set {fn} to a set of samples of its spectrum {Fm}  both of length N. 
The DFT can be inverted and the sample set {fn} recovered as follows: 
N11 j2mn/N fn = Fm e for n=0,1,2,...,N  1 N m=0 
which is known as the inverse DFT (IDFT). These two equations together form the DFT 
pair. 
107</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>2 or in the case of a nite data record of length N
N1  sin((t  nT )/T )f(t)= fn . (t  nT )/T n=0 
This is known as the cardinal (or Whittak er) reconstruction function. It is a superposition 
of shifted sinc functions, with the important property that at t = nT , the reconstructed 
function f(t)= fn. This can be seen by letting t = nT , in which case only the nth term 
in the sum is nonzero. Between the sample points the interpolation is formed from the 
sum of the sinc functions. The reconstruction is demonstrated below, where a sample set 
(N = 13) with three nonzero samples is reconstructed. The individual sinc functions are 
shown, together with the sum (dashed line). Notice how the zeros of the sinc functions fall 
at the sample points. 
o o 
o 
o o o o o o o o o o 
0.3 
The Discrete Fourier Transform (DFT) 
We saw in Lecture 8 that the Fourier transform of the sampled waveform f(t) can be written 
as a scaled periodic extension of F (j) 
   1 2n F (j) = F j  T T n= 
We now look at a dieren t formulation of F (j ). The Fourier transform of the sampled 
function f(t) 
F (j ) =   
f(t)ejtdt =     
f(t)(t  nT )ejt dt 
  n= 
 
= f(nT )ejnT 
n= 
106</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Note that the sampling rate, Fs =1/T , must be greater than twice the highest cyclic 
frequency Fmax in f(t). Thus if the frequency content of f(t) is limited to max radians/s 
(or Fmax cycles/s) the sampling interval T must be chosen so that 
 T&lt; max 
or equivalently 
1 T&lt; 2Fmax 
The minim um sampling rate to satisfy the sampling theorem FN = max/ samples/s is 
known as the Nyquist rate. 
1.1 Aliasing 
Consider a sinusoid 
f(t)= A sin(at + ) 
sampled at intervals T , so that the sample set is 
{fn} = {A sin(anT + )} , 
and noting that sin(t)= sin(t +2k) for any integer k, 
2m fn = A sin(anT + )= A sin a + nT +  T 
where m is an integer, giving the following important result: 
Given a sampling interval of T , sinusoidal comp onents with an angular frequency 
a and a +2m/T , for any inte ger m, will gener ate the same sample set. 
In the gure below, a sinusoid is undersampled and a lower frequency sinusoid, shown as a 
dashed line, also satises the sample set. 
f(t)
 t o 
o o 
o 0  T 
o o 
o 
0 
102</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G66 /G28 /G74 /G29 
/G57 
 
/G68 /G28 /G74 /G29 
/G74 /G31 
 /G49 /G64 /G65 /G61 /G6C /G20 /G72 /G65 /G63 /G6F /G6E /G73 /G74 /G72 /G75 /G63 /G74 /G69 /G6F /G6E 
/G20 /G20 /G20 /G20 /G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72/G66 /G20 /G20 /G2A /G20 /G20 /G28 /G74 /G29 /G48 /G28 /G6A /G57 /G29 
/G46 /G20 /G20 /G2A /G20 /G28 /G6A /G57 /G29 /G20 /G20 /G20 /G46 /G28 /G6A /G57 /G29 
/G2D /G70 /G2F /G44 /G54 /G70 /G2F /G44 /G54 
If the transfer function of the reconstruction lter is 
T for || &lt;/T H(j) = 0 otherwise, 
in the absence of aliasing in f(t), that is no overlap between replications of F(j) in F(j), 
the lter output will be 
y(t)= F1 {F(j)H(j)} = F1 {F(j)} = f(t). 
The lters impulse response h(t)is 
h(t)= F1 {H(j)} = sin (t/T) ,t/T 
/G30 /G44 /G54 /G32 /G44 /G54 /G2D /G34 /G44 /G54 /G2D /G33 /G44 /G54 /G2D /G32 /G44 /G54 /G2D /G44 /G54 /G33 /G44 /G54 /G34 /G44 /G54 
and note that the impulse response h(t) = 0 at times t = nT for n =1, 2, 3,... (the 
sampling times). The output of the reconstruction lter is the convolution of the input 
function f(t) with the impulse response h(t), 
   
f(t)= f(t)  h(t)= h() f(t  )(t  nT  )d 
 n= 
    sin(/T) = f(t  )(t  nT  )d /T n= 

 sin((t  nT)/T) = f(nT) ,(t  nT)/T n= 
105</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G66 /G28 /G74 /G29
 /G66 /G28 /G74 /G29 /G7E 
 1. Selecting a sampling interval T sucien tly small to capture all spectral components, 
or 
2. Processing the continuous-time function f(t) to eliminate all components at or above 
the Nyquist rate. 
The second metho d involves the use of a continuous-time processor before sampling f(t). A 
low-pass aanti-aliasing lter is used to eliminate (or at least attenuate) spectral components 
at or above the Nyquist frequency . Ideally the anti-aliasing lter would have a transfer 
function  
1 for || &lt;/T H(j ) = 0 otherwise,. 
/G46 /G28 /G6A /G57 /G29
/G41 /G6E /G74 /G69 /G2D /G61 /G6C /G69 /G61 /G73 /G69 /G6E /G67 
/G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G48 /G28 /G6A /G57 /G29 /G20 /G3D /G20 /G30 /G2C /G20 /G20 /G7C /G57 /G7C /G3E /G70 /G2F /G54 /G20 /G20 /G53 /G61 /G6D /G70 /G6C /G65 /G72 
/G44 /G54 /G7B /G66 /G20/G6E /G20 /G7D 
/G20 /G46 /G28 /G6A /G57 /G29 /G48 /G28 /G6A /G57 /G29 
/G63 /G6F /G6E /G74 /G69 /G6E /G75 /G6F /G75 /G73 /G20 /G64 /G6F /G6D /G61 /G69 /G6E /G64 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G64 /G6F /G6D /G61 /G69 /G6E 
In practice it is not possible to design a lter with such characteristics, and a more realistic 
goal is to reduce the oending spectral components to insignican t levels, while maintaining 
the delity of components below the folding frequency . 
1.3 Reconstruction of a Function from its Sample Set 
We saw in Lecture 9 that the spectrum F(j ) of a sampled function f(t) is innite in 
extent and consists of a scaled periodic extension of F(j ) with a period of 2/T, i.e. 
   1 2n F(j) = F j  . T T n= 
/G46 /G28 /G6A /G57 /G29 /G46 /G20 /G20 /G28 /G6A /G57 /G29 
/G31 /G2A 
/G31 /G2F /G44 /G54 /G73 /G61 /G6D /G70 /G6C /G69 /G6E /G67 /G20 /G61 /G74 /G20 /G44 /G54 
/G2D /G70 /G2F /G44 /G54 /G30 /G70 /G2F /G44 /G54 /G57 /G2D /G34 /G70 /G2F /G44 /G54 /G2D /G32 /G70 /G2F /G44 /G54 /G2D /G70 /G2F /G44 /G54 /G30 /G70 /G2F /G44 /G54 /G32 /G70 /G2F /G44 /G54 /G34 /G70 /G2F /G44 /G54 /G57 
/G28 /G61 /G29 /G28 /G62 /G29 
If it is assumed that the sampling theorem was obeyed during sampling, the repetitions in 
F(j ) will not overlap, and in fact f(t) will be entirely specied by a single period of F(j). 
Therefore to reconstruct f(t) we can pass f(t) through an ideal low-pass lter with transfer 
function H(j ) that will retain spectral components in the range /T&lt;  &lt;/T and 
reject all other frequencies. 
104</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Introduction to time-domain digital signal processing
The discrete-time convolution sum
The z-transform</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_13/</lecture_pdf_url>
      <lectureno>13</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>If we use a backwar ds-dier ence numerical approximation to the derivatives, that is 
dx (x(nT)  x((n 1)T) dt T 
and adopt the notation y= y(nT), and let a= /T, n 
a(yn  yn1)+ yn = a(fn  fn1) 
and solving for yn 
a a a yn = yn1 + fn  fn11+ a 1+ a 1+ a 
which is a rst-order dierence equation , and is the computational formula for a sample-
by-sample implemen tation of digital high-pass lter derived from the continuous protot ype 
above. Note that 
	The delit y of the approximation depends on T, and becomes more accurate when 
T /lessmuch . 
	At each step the output is a linear combination of the presen t and/or past samples 
of the output and input. This is a recursiv e system because the computation of the 
curren t output depends on prior values of the output. 
In general, regardless of the design metho d used, a LTI digital lter implemen tation will be 
of a similar form, that is 
N M 
yn = aiyni + bifni 
i=1 i=0 
where the ai and bi are constan t coecien ts. Then as in the simple example above, the 
curren t output is a weighted combination of past values of the output, and curren t and past 
values of the input. 
 If ai  0 for i=1 ...N, so that 
M  
yn = bifni 
i=0 
The output is simply a weighted sum of the curren t and prior inputs. Such a lter is 
a non-recursiv e lter with a nite-impulse-resp onse (FIR), and is known as a moving 
average (MA) lter, or an all-zero lter. 
	If bi  0 for i=1 ...M, so that 
N 
yn = aiyni + b0fn 
i=0 
only the curren t input value is used. This lter is a recursiv e lter with an innite-
impulse-resp onse (IIR), and is known as an auto-regressive (AR) lter, or an all-pole 
lter. 
132</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>(1) {fn} = {n} (the digital pulse sequence) 
From the denition of F (z): 
F (z)=1z 0 = 1 for all z. 
(2) {fn} = {anun} 
n 
zn 
F (z)=  
a =  
az1n 
n=0 n=0 
n Z F (z)= 1 = z	 for z &gt;a. {a }  1  az1 z  a || 
since
  1
 n 
x = for x&lt; 1. 1  x n=0 
(3)	 {fn} = {un} (the unit step sequence). 
 1 z F (z)=  
zn = = for z&lt; 1 1  z1 z  1 ||
n=0 
from (2) with a = 1. 
(4) {fn} =  
ebnun
. 
  
F (z)=  
ebn zn =  
eb z1n 
n=0 n=0 
 
ebn	 1 z Z F (z)= =	 for z&gt; eb . z1	 z  ebn 1  eb|| 
from (2) with a =eb .
 
n
(5) {fn} =  
eb||
. 
0  
F (z)=  
eb zn +  
eb z1n  1 
n= n=0 
1 1
 =1  ebz +1  ebz1  1
 
Note that the item f0 = 1 appears in each sum, therefore it is necessary to subtract 1. 
n	 b 
eb|| Z F (z)= 1  e2b 
for eb &lt;z&lt; e .  (1  ebz)(1  ebz1)	 || 
137</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G56 /G2B /G43 1 Massa chusetts Institute of Technology 
Dep artment of Mechanical Engineering 
2.161 Signal Processing -Continuous and Discrete 
Fall Term 2008 
Lecture 131 
Reading: 
 Proakis &amp; Manolakis, Chapter 3 (The z-transform) 
 Oppenheim, Schafer &amp; Buck, Chapter 3 (The z-transform) 
Introduction to Time-Domain Digital Signal Pro cessing 
Consider a continuous-time lter 
/G20 /G20 /G20 /G43 /G6F /G6E /G74 /G69 /G6E /G75 /G6F /G75 /G73
/G66 /G28 /G74 /G29 /G20 /G20 /G20 /G20 /G20 /G73 /G79 /G73 /G74 /G65 /G6D /G79 /G28 /G74 /G29
/G28 /G68 /G28 /G74 /G29 /G2C /G20 /G48 /G28 /G73 /G29 /G29
such as simple rst-order RC high-pass lter: 
/G2D /G52 /G76 /G6F 
describ ed by a transfer function 
H(s)= RCs 
RCs +1 . 
The ODE describing the system is 
 dy 
dt + y =  df 
dt 
where  = RC is the time constan t. 
Our task is to derive a simple discrete-time equivalent of this protot ype lter based on 
samples of the input f(t) taken at intervals T . 
/G66/G6E /G61/G20 /G20
/G6C /G67/G20 /G44
/G6F/G53
/G72 /G69 /G74/G50
/G68 /G6D /G79/G6E 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
131</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>can be written  
F(z)= fnz n 
n=0 
Example: The nite sequence {f0,...,f 3} = {5,3,1,4} has the z-transform 
F(z)=5z 0 +3z 1  z 2 +4z 3 
The Region of Con vergence: For a given sequence, the region of the z-plane in which 
the sum converges is dened as the region of convergence (ROC). In general, within the ROC 
 
fnr n  &lt; 
n= 
and the ROC is in general an annular region of the z-plane: 
/G72 
/G72 /G31 
/G32 
/GC2 /G28 /G7A /G29 /GC1 /G28 /G7A /G29 
/G7A /G2D /G70 /G6C /G61 /G6E /G65 
/G52 /G4F /G43
/G46 /G28 /G7A /G29 /G20 /G63 /G6F /G6E /G76 /G65 /G72 /G67 /G65 /G73 /G20 /G66 /G6F /G72
/G72 /G20 /G20 /G3C /G20 /G72 /G20 /G3C /G20 /G72 /G31 /G32 
(a) The ROC is a ring or disk in the z-plane. 
(b) The ROC cannot contain any poles of F(z). 
(c)	For a nite sequence, the ROC is the entire z-plane (with the possible exception of z =0 
and z = . 
(d) For a causal sequence, the ROC extends outward from the outermost pole. 
(e) for a left-sided sequence, the ROC is a disk, with radius dened by the innermost pole. 
(f)	For a two sided sequence the ROC is a disk bounded by two poles, but not containing 
any poles. 
(g) The ROC is a connected region.
z-Transform Examples: In the following examples {un} is the unit step sequence,
0 n&lt; 0 un = 1 n 0 
and is used to force a causal sequence. 
136</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G73 /G6A /G57 
/GC2 /G7B /G7A /G7D /GC1 /G7B /G7A /G7D 
 
 The Laplace Transform (contd.) 
(5) For a causal function f(t), the region of 
convergence (ROC) includes the s-plane to the 
right of all poles of F(j). 
/G58 /G58 /G73 /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 /G52 /G4F /G43 
(6) If the ROC includes the imaginary axis, 
the FT of f(t)is F(j): 
F(j) = F(s) |s=j 
(7) The convolution theorem states 
  Lf(t)g(t)= f()g(t)d F(s)G(s) 
 
(8) For an LTI system with transfer function 
H(s), the frequency response is 
H(s) |s=j = H(j) 
if the ROC includes the imaginary axis. The Z transform (contd.) 
(5) For a right-sided (causal) sequence {fn}
the region of convergence (ROC) includes the 
z-plane at a radius greater than all of the poles 
of F(z). 
/G2D /G31 /G2E /G30 /G58 /G7A /G20 /G2D /G20 /G70 /G6C /G61 /G6E /G65 /G52 /G4F /G43 
/G58 
/G31 /G2E /G30 
/G75 /G6E /G69 /G74 /G20 /G63 /G69 /G72 /G63 /G6C /G65 
(6) If the ROC includes the unit circle, the 
DFT of {fn}, n =0,1,...,N  1. is {Fm}
where 
jm Fm = F(z) |z=e= F(ejm), 
where m =2m/N for m=0,1,...,N 1. 
(7) The convolution theorem states 
 
Z{fn}{gn}= fmgnm F(z)G(z) 
m= 
(8) For a discrete LSI system with transfer 
function H(z), the frequency response is 
j H(z) |z=e= H(ej) || 
if the ROC includes the unit circle. 
From the above derivation, the Z-transform of a sequence {fn}is 
 
F(z)= fnz n 
n= 
where z = rej  is a complex variable. For a causal sequence fn = 0 for n&lt;0, the transform 
135</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G66 /G79 /G20 /G20 /G3D /G20 /G66/G6E /G6E/G7A/G6E /G2D /G31/G2D /G31/G55 /G6E /G69 /G74 /G20 /G44 /G65 /G6C /G61 /G79(c) Convolution:
 
Z{fn}{gn}  F (z)G(z) ROC: Intersection of ROCf and ROCg. 

where {fn}{gn} =  
fkgnk is the convolution sum. 
k=
Let 
     
Y (z)=  
ynzn =   
fkgnk zn 
n= n= k= 
      
=  
fk  
gnkz(nk) zk =  
fkzk  
gmzm 
k= n= k= m= 
= F (z)G(z) 
(d) Conjugation of a complex sequence: 

fn Z F (z) ROC: ROCf  
(e) Time reversal:
 
Z F (1/z) ROC: 1 &lt;z&lt; 1 {fn}  r1 || r2 
where the ROC of F (z) lies between r1 and r2. 
(e) Scaling in the z-domain: 
Z F (a1 {a nfn}  z) ROC: |a| r1 &lt; |z| &lt; |a| r2 
where the ROC of F (z) lies between r1 and r2. 
(e) Dieren tiation in the z-domain: 
{nfn} Z dF (z) ROC: r2 &lt;z &lt;r1  z dz || 
where the ROC of F (z) lies between r1 and r2. 
139</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>The Laplace Transform 
(1) We begin with causal f(t) and nd its 
Fourier transform (Note that because f(t)is 
causal, the integral has limits of 0 and ): 
  
F (j) = f(t)e jtdt 
0 
(2) We note that for some functions f(t) (for 
example the unit step function), the Fourier 
integral does not converge. 
(3) We introduce a weighted function 
w(t)= f(t)e t 
and note 
lim w(t)= f(t)
0 
The eect of the exponential weighting by et 
is to allow convergence of the integral for a 
much broader range of functions f(t). 
(4) We take the Fourier transform of w(t) 
  
W (j) = F(j|)=  
f(t)e t  
e jtdt 
0   
= f(t)e (+j)dt 
0 
and dene the complex variable s =  + jso 
that we can write 
  
F (s)= F(j|)= f(t)e stdt 
0 
F (s) is the one-sided Laplace Transform. Note 
that the Laplace variable s =  + j is ex
pressed in Cartesian form. The Z transform 
(1) We sample f(t) at intervals T to produce 
f(t). We take its Fourier transform (and use 
the sifting property of (t)) to produce 
 
F  (j) = fne jnT 
n=0 
(2) We note that for some sequences fn (for 
example the unit step sequence), the summa
tion does not converge. 
(3) We introduce a weighted sequence 
{wn} = fnr n 
and note 
lim {wn} = {fn}
r1 
The eect of the exponential weighting by rn 
is to allow convergence of the summation for 
a much broader range of sequences fn. 
(4) We take the Fourier transform of wn 
 
W  (j) = F (j|r)=  
fnr n  
e jnT 
n=0 
 
=  
fn  
rejT n 
n=0 
and dene the complex variable z = rejT so 
that we can write 
 
F (z)= F (j|r)= fnz n 
n=0 
F (z) is the one-sided Z-transform. Note that 
z = rejT is expressed in polar form. 
134</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>2  With the full dierence equation 
N M 
yn = aiyni + bifni 
i=1 i=0 
the lter is a recursiv e lter with an innite-impulse response (IIR), and is known as 
an auto-regressive moving-aver age (ARMA) lter. 
The Discrete-time Con volution Sum 
For a continuous system 
/G20 /G20 /G20 /G43 /G6F /G6E /G74 /G69 /G6E /G75 /G6F /G75 /G73
/G66 /G28 /G74 /G29 /G20 /G20 /G20 /G20 /G20 /G73 /G79 /G73 /G74 /G65 /G6D /G79 /G28 /G74 /G29
/G28 /G68 /G28 /G74 /G29 /G2C /G20 /G48 /G28 /G73 /G29 /G29 
the output y(t), in response to an input f(t), is given by the convolution integral:   
y(t)= f()h(t  )d 
0 
where h(t) is the system impulse response. 
For a LTI discrete-time system, such as dened by a dierence equation, we dene the 
pulse response sequence {h(n)} as the response to a unit-pulse input sequence {n}, where 
1 n =0 n = 0 otherwise. 
/G7B /G64 /G20 /G6E /G20 /G7D /G7B /G68 /G6E /G20 /G20 /G7D 
/G66 /G6E /G61/G20 /G20
/G6C /G67/G20 /G44
/G6F /G53
/G72 /G69 /G74/G50
/G68 /G6D /G79/G6E
/G2E /G2E /G2E /G2E /G2D /G32 /G2D /G31 /G30 /G31 /G32 /G2E /G2E /G2E /G2E /G6E /G2E /G2E /G2E /G2E /G2D /G32 /G2D /G31 /G30 /G31 /G32 /G2E /G2E /G2E /G2E /G6E 
If the input sequence {fn} is written as a sum of weighted and shifted pulses, that is 
 
fn = fknk 
k= 
then by superposition the output will be a sequence of similarly weighted and shifted pulse 
responses 
 
yn = fkhnk 
k= 
which denes the convolution sum, which is analogous to the convolution integral of the 
continuous system. 
The z-Transform 
The z-transform in discrete-time system analysis and design serves the same role as the 
Laplace transform in continuous systems. We begin here with a parallel developmen t of 
both the z and Laplace transforms from the Fourier transforms. 
133 3</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/GC2 /G28 /G7A /G29/GC1 /G28 /G7A /G29
/G7A /G2D /G70 /G6C /G61 /G6E /G65
/G52 /G4F /G43/G58 /G58/G65/G2D /G62 /G65/G62(6)	 {fn} = { ej0nun} = {cos( 0n)un} j {sin( 0n)un} . 
F (z)= Z{cos( 0n)un} jZ{sin( 0n)un} 
From (1)
 
1
 F (z) =	 1  ej0 z1 for z &gt; 1| | 
1  cos( 0)z1  j sin(0) = 1  2 cos(0)z1 + z2 
z2  cos( 0)z  j sin( 0)z2 
= z2  2 cos(0)z + 1 
and therefore 
z2  cos( 0)z Z{cos( 0n)un} =	 for z&gt; 1 2z  2cos( 0)z +1 || 
sin( 0)z2 
Z{sin( 0n)un} =	 for z&gt; 1 2z  2cos( 0)z +1	 || 
Prop erties of the z-Transform: Refer to the texts for a full description. We simply 
summarize some of the more importan t properties here. 
(a) Linearit y: 
Z aF (z)+ bG(z) ROC: Intersection of ROCf and ROCg. a {fn} + b {gn}  
(b) Time Shift:
 
Z zmF (z) {fnm}  ROC: ROCf except for z =0 if k&lt; 0, or z =  if k&gt; 0. 
If gn = fnm, 
	  
fkz(k+m)G(z)=  
fnmzn =  
= zmF (z). 
n= k= 
This is an importan t property in the analysis and design of discrete-time systems. We 
will often have recourse to a unit-dela y block: 
138</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Frequency response and poles and zeros
FIR low-pass filter design</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_15/</lecture_pdf_url>
      <lectureno>15</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/G30 /G31 /G30 /G2D /G31 /G30 /G6E /G6E 
/G31 
 
  The truncated frequency response is therefore 
H/prime(ej )= 1 H(ej )  R(ej ). 2 
For the windo w function 
M/ 2 
R(z)= z 1 
k=M/ 2 
M/ 2 M/ 2 
R(ej )= e j k =1+ 2cos(k)= DM/ 2() 
k=M/ 2 k=1 
DM/ 2() is known as the Dirichlet kernel , and is found in the study of truncated Fourier 
series and convolution of periodic functions. It is easy to show (using the sum of a 
nite geometric series) that 
R(ej )= DM/ 2()= sin((M +1)/2) 
sin(/2) 
/G77 /G70 /G2D /G70 /G30 /G4D /G20 /G3D /G20 /G31 /G30 
/G4D /G3D /G32 /G30 
/G4D /G3D /G33 /G30 /G52 /G28 /G65 /G20 /G20 /G20 /G20 /G29/G6A /G77 
/G4D /G2B /G31
/G31 
157</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G77 
 Example 2 
Design a ve point causal FIR low-pass lter with a cut-o frequency c =0.4. 
Solution: The ideal lter has an impulse response 
c sin(cn) 1 sin(n/2)hn =	 =  cn 2 n/2 
Select M + 1 = 5, and select the ve central components: 
n : 2 10 1 2 
h/prime : 0.0935 0.3027 0.40.3027 0.0935n 
Shift to the right by M/2 = 2, and form the causal impulse response {hn}: 
n : 0 1 2 3 4 
hn : 0.0935 0.3027 0.40.3027 0.0935 
with dierence equation 
yn =0.0935fn +0.3027fn1 +0.4fn2 +0.3027fn3 +0.0935fn4 
The causal impulse response and the frequency response magnitude are shown 
below: 
/G30 /G2E /G34 
/G30 /G32 /G34 /G36 /G38 /G2D /G32 /G2D /G34 /G6E /G68 /G6E 
/G30 /G2E /G33 /G30 /G32 /G37 
/G30 /G2E /G30 /G39 /G33 /G35 
/G30 /G30 /G2E /G35 /G31 /G31 /G2E /G35 /G32 /G32 /G2E /G35 /G33 /G30 /G2E /G32 /G30 /G2E /G34 /G30 /G2E /G36 /G30 /G2E /G38 /G31 /G31 /G2E /G32 /G7C /G48 /G28 /G65 /G20 /G20 /G20 /G29 /G7C/G6A /G77 
2.1 The Eect of Truncation and Shifting 
(a) The Eect of Truncation	 The selection of the M + 1 central components of the 
non-causal impulse response {hn}can be written as a product 
{h/prime }= {hnrn}n
where {rn}is an even rectangular window function 
1 |n|M/2 rn = 0 otherwise.
The following gure shows {rn}for M = 20.
156</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
 
Department of Mechanical Engineering
 
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 151 
Reading: 
Proakis &amp; Manolakis, Ch. 7  
 Oppenheim, Schafer &amp; Buck. Ch. 10 
Cartinhour, Chs. 6 &amp; 9  
1 Frequency Resp onse and Poles and Zeros 
As we did for the continuous case, factor the discrete-time transfer functions into as set of 
poles and zeros; 
b0z0 + b1z2 + + bM zM M
i=1 (z  zi)H(z)=  = K a0z0 + a1z2 + + aN zN N
i=1 (z  pi)  
where Zi are the system zeros, the pi are the system poles, and K = b0/a0 is the overall gain. 
We note, as in the continuous case that the polse and zeros must be either real, or appear 
in complex conjugate pairs. 
As in the continuous case, we can draw a set of vectors from the poles and zeros to a test 
point in the z-plane, and evaluate H(z) in terms of the lengths and angles of these vectors. 
In particular, we choose to evaluate H(ej ) on the unit circle, 
M  
e  
H(ej )= K i=1 j   ziN
i=1 (ej   pi) 
and 
M
i=1  e zi M
i=1 qiH(ej )
= K 
M N
i=1 | ejj 
 
 pi| = K N
i=1 ri
M N N 
j  j  H(ej )=  
  
e  zi 
  
  
e  pi 
=  
i   
i 
i=1 i=1 i=1 i=1 
where the qi and i are the lengths and angles of the vectors from the zeros to the point 
z =ej , the ri and i are the lengths and angles of the vectors from the poles to the point 
z =ej , as shown below: 
1copyrigh t c D.Ro well 2008 
151</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G6E /G68 /G6E 
/G30 /G30 /G2E /G32 
      The following gure shows the central region of the impulse response of an ideal FIR lter 
with c =0.2: 
It is obvious that this impulse response has two problems: 
(a) It is innite in extent, and 
(b) It is non-causal. 
To produce a causal, nite length lter 
(a)	Truncate {hn} to include M +1 central points (M +1 odd), that is select the points 
M/2  n  M/2. Let this truncated lter be designated H(z). 
(b)	Shift the truncated impulse response {hn} to the right by M/2 to form a causal 
sequence {h/prime }, where h/prime = h(M/ 2n), for n =0,...M .n n 
Take {h/prime } as the FIR causal approximation to the ideal low-pass lter. n
Then 
H/prime(z)= z(M1)/2H(z), 
that is the response is delayed by (M  1)/2 samples. The frequency response is 
H/prime(ej )= ej(M1)/2H(ej ), 
and because H(ej ) is real 
H/prime(ej ) =  H(ej ) 
/negationslash H/prime(ej )=( M  1)/2. 
155</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G2D /G70 /G30 /G70 /G77 
 
  /G7C /G48 /G28 /G65 /G20/G6A /G77/G20 /G20 /G29 /G7C 
The ideal FIR low-pass lter has a response 
H(ej )=  
1 
0 ||c 
c &lt; || 
/G70 /G77/G2D /G70 /G77 /G2D /G77 /G31 /G7C /G48 /G28 /G65 /G20 /G20 /G20 /G29 /G7C/G6A /G77 
/G77 /G48 /G28 /G65 /G20 /G20 /G20 /G29 /G20 /G3D /G20 /G31/G6A /G77 /G48 /G28 /G65 /G20 /G20 /G20 /G29 /G20 /G3D /G20 /G30/G6A /G77 /GC1 /G7B /G7A /G7D 
/GC2 /G7B /G7A /G7D/G2D /G77 
/G63 /G63 /G63 
/G63 
The impulse response hn = Z1 {H(z)}, and although we are not given H(z) explicitly , we 
can use the formal denition of the inverse z-transform (Lecture 14) as a contour integral in 
the z-plane, 
1  
Z1 {H(z)}= H(z)z n1 dz 2j  
where the path is a ccw contour enclosing all of the poles of H(z), and for a stable lter 
choose the contour as the unit-circle. Let z =ej , so that dz =jej  d, and 
 c   
hn = Z1 {H(z)}= 1 
2 1. ej n d = c 
 sin(cn) 
cnc 
The impulse response of the FIR ideal low-pass lter is therefore
c sin(cn)hn =  cn 
154</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/G58/G58
/G58/G4F /G4F/G31 /G2D /G31
/G2D /G6A /G31/G6A /G31
/GC2 /G7B /G7A /G7D/GC1 /G7B /G7A /G7D
/G66
/G66/G66 /G71 /G71/G70
/G70/G70 /G7A /G7A/G31
/G31/G31/G31
/G32/G32/G32/G32
/G33/G33/G72
/G72/G72/G71 /G71/G31
/G31
/G32/G32/G33/G7A /G20 /G3D /G20 /G65/G6A /G77/G41 /G74 /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G20 /G77 /G3A
/G7C /G48 /G28 /G65 /G20 /G20 /G20 /G29 /G7C /G20 /G3D /G20 /G4B/G71 /G20 /G20 /G71
/G72 /G20 /G20 /G72 /G20 /G20 /G72/G6A /G77 /G31
/G31/G32
/G32 /G33
/G48 /G28 /G65 /G20 /G20 /G20 /G29 /G20 /G3D /G20 /G28 /G71 /G20 /G20 /G2B /G20 /G71 /G20 /G20 /G29
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G2D /G20 /G28 /G66 /G20 /G20 /G2B /G20 /G66 /G20 /G20 /G2B /G20 /G66 /G20 /G20 /G29
/G20/G31 /G32/G6A /G77
/G31 /G32 /G33We can interpret the eect of pole and zero locations on the frequency response as follows: 
(a) A pole (or conjugate pole pair) on the unit circle will cause H(ej )to become innite 
at frequency . 
(b) A zero (or conjugate zero pair) on the unit circle will cause H(ej )
to become zero at 
frequency . 
(c) Poles near the unit circle will cause a peak in 
H(ej )
in the neigh borhood of those 
poles. 
(c) Zeros near the unit circle will cause a dip, or notch, in H(ej )in the neigh borhood of 
those zeros. 
(d) Poles and zeros at the origin z = 0 have no eect upon 
H(ej )
, but add a frequency 
dependen t linear phase taper ( for a pole, + for a zero), which is equiv alent to 
shift. 
(e) A pole or zero at z = 1 forces H(ej )to be innite (pole) or 0 (zero) at  = 0. 
(f) A pole or zero at z = 1 forces H(ej )
to be innite (pole) or 0 (zero) at  = , (the 
Nyquist frequency). 
2 FIR Low-Pass Filter Design 
The FIR (nite impulse response) lter is an all-zero system with a dierence equation 
M 
yn =  
bkfnk 
k=0 
which is clearly a convolution of the input sequence with an impulse response {hk} = {bk}, 
for k =0, ,M. A direct-form causal implemen tation is  
152</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Notice (1) The width of the main lobe decreases with M, (2) the side lobes do not 
decay to zero as  increases. 
Aside: The formal denition of the z-transform of the product of two sequences is
given by the z-plane contour integral 
 
F (z)= Z{xnyn}= 1 
2j X()Y  z 
  
1 d 
where X(z)= Z{xn}, Y (z)= Z{yn}, and the contour lies in the ROC of both X(z) 
and Y (z). In particular if the unit-circle lies within the ROC of both sequences, choose 
the unit-circle as the contour,  =ej, then 
1   
F (ejo )= X(ej)Y (ej(0))d 2  
which is the convolution of X(ej) and Y (ej). 
The frequency response of the truncated lter is 
1 H/prime(ej)= H(ej) R(ej)2 
= 1   
H(ej)R(ej())d 2  
or 
1  c 
H/prime(ej)= DM/ 2( )d. 2 c 
which is shown below for lter with c =0.4 and lengths M +1=11, 21, 31, and 41: 
/G4D /G3D /G31 /G30 
/G4D /G3D /G32 /G30 /G4D /G3D /G33 /G30 
/G4D /G3D /G34 /G30 
/G30 /G2E /G30 /G39 /G31 /G31 
/G30 /G30 /G2E /G34 /G70 /G70 /G77 /G7C /G48 /G27 /G28 /G65 /G20 /G20 /G20 /G29 /G7C/G6A /G77 
158</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>In general:
 
The amplitude of the ripple in the pass-band does not decrease with the lter  
order M.
 
Similarly , the stop-band atten uation is relativ ely unaected by the lter order,
  
and the amplitude of the rst side-lob e is 0.091, so that the truncated lter has 
a stop-band atten uation of -21 dB. 
The width of the transition-band decreases with increasing M.  
(b) The Eect of the Right-Shift to Form a Causal Filter	 The truncated non-causal 
impulse response {h } is even and real, so that H 
(ej ) is also real and even, that is 
 H(ej ) = 0.
 
The right-shift of h by M/2 samples to force causalit y imposes
 
H(z)= zM/2H(z)
 
and therefore
 
H(ej )= ej M/2H(ej ).
 
The phase response of the lter is
 
 H(ej )= (M/2)
 
which is a linear phase taper (lag).
 
The eect of the right-shift on the impulse response of the ideal lter is to impose 
a phase lag that is proportional to frequency , with a slope of M/2. 
159</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G7A/G2D /G31/G7A/G2D /G31/G7A/G2D /G31/G7A/G2D /G31
/G62/G30 /G62/G31 /G62/G32/G62/G33/G62/G4D
/G2B/G2B /G2B /G2B /G2B
/G2B /G2B /G2B/G66/G6E
/G79/G6E/G66/G6E /G2D /G31 /G66 /G6E /G2D /G32 /G66/G6E /G2D /G33 /G66/G6E /G2D /G4DThe transfer function is 
M M
 
H(z)=  
bkzk =1 
M  
bkz Mk
 
z k=0 k=0 
and the frequency response is 
M 
H(ej )=  
bk ej k . 
k=0 
Note that there are M + 1 terms in the impulse response but the order of the polynomials 
is M. 
Example 1 
Find the frequency response H(ej ) for a simple three-p oint moving average 
lter: 1 yn =(fn + fn1 + fn2) . 3 
Solution: 
H(z)= 1 z 0 +1 z1 +1 z2 
3 3 3 
so that 
H(ej )=1 
1+ ej  +e2j  
3 
= 1ej   
ej  +1+ ej  
3 
1 = (1+2cos()) ej  
3 
and 
H(ej ) = 1(1+2cos( ))3 
 H(ej )= . 
153</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Interpolation and decimation
Introduction to random signals</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_21/</lecture_pdf_url>
      <lectureno>21</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/G74 /G31 
/G74 
/integraldisplay The mean is /integraldisplay  /integraldisplay x0+ x   = xp(x)dx = dx = x0 +  2 x0 
which is the mid-p oint of the range. 
The variance is /braceleftbig/bracerightbig 1 2 = Ex 2  2 =2 
12 
2.2 Time-based Statistics 
Two stochastic waveforms may have identical pdfs (and hence equal means and variances), 
but be very dieren t qualitativ ely, for example 
/G66 /G20 /G20 /G28 /G74 /G29 
/G66 /G20/G32 /G20 /G28 /G74 /G29 
/G74 /G20 /G20 /G2B /G74 /G74 /G6F /G6F 
These two waveforms obviously dier in 
 spectral content, or 
 self-similarit y between themselv es at a time t0 and some time  later. 
A random waveform cannot be predicted exactly at any time, but clearly in the above gure 
the upper waveform (with greater high frequency spectral content) has less self-similarit y, or 
correlation with itself, after a delay of . 
The correlation functions are a measure of the degree to which the value of a function 
depends upon its past. For innite duration waveforms the auto-c orrelation function ff() 
is dened as 
1 T/2 
ff( ) = lim f(t)f(t + )dt 
T T T/2 
2110</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/summationdisplay 
/summationdisplay 
/summationdisplay This is illustrated above, where a data record with N = 8 samples has been expanded by 
a factor K = 3 to form a new data record of length N = 24 formed by inserting two zero 
samples between each of the original data points. We now examine the eect of inserting 
K  1 samples with amplitude 0 after each sample. The DFT of the original data set is 
N1 
j 2mn Fm = fne N ,m=0 ...N  1 
n=0 
and for the extended data set {fn}, n=0 ...KN  1 
KN1 
KN Fm = fne j 2mn ,m=0 ...KN  1 
n=0 
However, only the original N samples contribute to the sum, so that we can write 
N1 
N Fm = fKke j 2mk 
k=0 
= Fm,m=0 ...KN  1 
since fKk = fk. We note that {Fm} is periodic with period N, and {Fm} is periodic with 
period KN, so that {Fm} will contain K repetitions of {Fm}. 
/G30 /G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72
/G70 /G61 /G73 /G73 /G62 /G61 /G6E /G64 
/G4E /G79 /G71 /G75 /G69 /G73 /G74
/G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79/G72 /G65 /G70 /G6C /G69 /G63 /G61 /G74 /G69 /G6F /G6E /G73 /G20 /G6F /G66 /G20 /G46/G46 /G6D 
/G4B /G4E /G2F /G32 /G4B /G4E/G6D/G5E 
/G77 /G20 /G20 /G3D /G20 /G4B /G70 /G2F /G44 /G54 /G77 /G20 /G20 /G3D /G20 /G32 /G4B /G70 /G2F /G44 /G54 
/G30 /G46 /G5E /G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 
/G64 /G69 /G67 /G69 /G74 /G61 /G6C /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G6D 
/G4B /G4E /G2F /G32 /G4B /G4E /G77 /G20 /G20 /G3D /G20 /G4B /G70 /G2F /G44 /G54 /G6D 
/G77 /G20 /G20 /G3D /G20 /G32 /G4B /G70 /G2F /G44 /G54 
The magnitude of the DFTs of the two waveforms is shown above. The eect of inserting the 
K1 zeros between the original samples has been to generate a waveform with an equivalent 
sampling interval of T/K s, and a Nyquist frequency of K/T rad/s. The line resolution 
is unchanged, and the original DFT {Fm} is replicated K times within the frequency span 
of 2K/T rad/s. 
214</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G6D 
/G6D /G28 /G61 /G29 
/G28 /G62 /G29 /G30 /G4E /G2F /G32 /G46 
/G4E /G33 /G4E /G2F /G32 /G32 /G4E/G2D /G4E /G2F /G32 /G6D 
/G4E /G79 /G71 /G75 /G69 /G73 /G74 /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G4E /G75 /G6D /G62 /G65 /G72 /G20 /G6F /G66 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G3A /G20 /G20 /G4E 
/G53 /G61 /G6D /G70 /G6C /G69 /G6E /G67 /G20 /G69 /G6E /G74 /G65 /G72 /G76 /G61 /G6C /G3A /G20 /G20 /G20 /G44 /G54 
/G30 /G46 
/G4E /G32 /G4E /G6D 
/G4E /G79 /G71 /G75 /G69 /G73 /G74 /G20 /G66 /G72 /G65 /G71 /G75 /G65 /G6E /G63 /G79 /G4E /G75 /G6D /G62 /G65 /G72 /G20 /G6F /G66 /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G3A /G20 /G20 /G32 /G4E 
/G53 /G61 /G6D /G70 /G6C /G69 /G6E /G67 /G20 /G69 /G6E /G74 /G65 /G72 /G76 /G61 /G6C /G3A /G20 /G20 /G20 /G44 /G54 /G2F /G32 
The above gure demonstrates these eects by schematically , by comparing the DFT of (a) 
a data set of length N derived by sampling at intervals T, and (b) a data set of length 
2N resulting from sampling at intervals T/2. The low frequency region of both spectra 
are similar, except for a scale factor, and the primary dierence lies in the high frequency 
region, centered around the Nyquist frequency , in which all data points are zero. 
The above leads to an algorithm for the interpolation of additional points into a data 
set, by a constan t factor K: 
1. Take the DFT of the original data set to create {Fm} of length N. 
2. Insert (K  1)N zeros into the center of the DFT to create a length KN array. 
3. Take the IDFT of the expanded array, and scale the sequence by a factor K. 
1.1.2 A Time-Domain Metho d 
We now examine an interpolation scheme that may implemen ted on a sample-b y-sample 
basis in real-time using time domain processing alone. As before, assume that the process 
f(t) is sampled at intervals T, generating a sequence {fn} = {f(nT)}. Now assume that 
K  1 zeros are inserted between the samples to form a sequence {fk} at intervals T/K. 
0 1 2 3 
n f n 
0 1 2 3 4 5 6 7 
(a) Initial data set, N=8 
0 1 2 3 
n n f 
0 5 10 15 20 
(b) Data set with two samples interpolated between samples, N=24 
213</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/G66 /G28 
/G46 0 1 2 3 4 5 6 7 0 2 4 6 8 10 
m m F 
(a) DFT of Initial data set, N=8 
0 5 10 15 20 0 2 4 6 8 10 
m m F ^ 
(b) DFT of data set with two samples interpolated between samples, N=24 
The fully interpolated waveform may be reconstructed by elimination of the replications 
of the original spectral components. While this might be done in the frequency domain, 
the most common metho d is to low-pass lter the padded data sequence to retain only the 
base-band portion of the spectrum as shown below. 
/G41 /G6E /G74 /G69 /G2D /G61 /G6C /G69 /G61 /G73 /G69 /G6E /G67 
/G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G48 /G28 /G6A /G57 /G29 /G20 /G3D /G20 /G30 /G2C /G20 /G20 /G7C /G57 /G7C /G3E /G70 /G2F /G44 /G54 /G53 /G61 /G6D /G70 /G6C /G65 /G72 
/G44 /G54 /G74 /G29 
/G7B /G66 /G20 /G20 /G7D /G20 /G20 /G20 /G46 /G28 /G6A /G57 /G29 /G48 /G28 /G6A /G57 /G29 /G28 /G6A /G57 /G29 /G6E /G66 /G28 /G74 /G29 /G7E 
/G63 /G6F /G6E /G74 /G69 /G6E /G75 /G6F /G75 /G73 /G20 /G64 /G6F /G6D /G61 /G69 /G6E /G64 /G69 /G73 /G63 /G72 /G65 /G74 /G65 /G20 /G64 /G6F /G6D /G61 /G69 /G6E /G49 /G6E /G73 /G65 /G72 /G74 /G20 /G4B /G2D /G31 /G20 /G7A /G65 /G72 /G6F /G73 
/G62 /G65 /G74 /G77 /G65 /G65 /G6E /G20 /G73 /G61 /G6D /G70 /G6C /G65 /G73 /G4C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G64 /G69 /G67 /G69 /G74 /G61 /G6C 
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G7B /G66 /G20 /G20 /G7D/G6E /G44 /G54 /G44 /G54 /G2F /G4B 
/G69 /G6E /G74 /G65 /G72 /G70 /G6F /G6C /G61 /G74 /G65 /G64 
/G77 /G61 /G76 /G65 /G66 /G6F /G72 /G6D /G48 /G28 /G7A /G29 /G5E /G4B 
/G44 /G54 /G2F /G4B 
1.2 Down-Sampling (Decimation) by an Integer Factor 
Decimation by an integer factor K is the reverse of interpolation, that is increasing the 
sampling interval T by an an integer factor (or decreasing the sampling frequency). At 
rst glance the process seems to be simple: simply retain every Kth sample from the data 
sequence so that f n = fnK where {f n} is the down-sampled sequence, as shown in below. 
/G44 /G6F /G77 /G6E /G2D /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G4C /G44 /G54 
/G74 /G4C /G44 /G54 
/G74 
Caution must be taken however to prevent aliasing in the decimated sequence. It is not valid 
to directly down-sample a sequence directly unless it is known a-priori that the spectrum of 
the data set is identically zero at frequencies at and above the Nyquist frequency dened by 
the lower sampling frequency . 
215</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G78 /G28 /G74 /G29 
/G70 /G28 /G78 /G29 /G74 /G61 /G62 
/G61 /G62 /GA3 /G20 /G62 /G7D 
/G20 /G20 /G31 /G70 /G28 /G78 /G29 
/G78 2.1 Ensem ble Based Statistics 
2.1.1 The Probabilit y Densit y Function (pdf) 
The pdf is strictly an ensem ble statistic that describ es the distribution of samples x across 
the amplitude scale. Its denition is 
1 p(xa) = lim Prob {xa  x  xa +x}
x0 x 
so that the probabilit y that a single sample lies in the range a  x  b is 
/integraldisplay b 
Prob {a  x  b} = p(x)dx, 
a 
and we note	 /integraldisplay  
Prob {  x } = p(x)dx =1. 
 
For an ergodic process, the pdf can also be describ ed from a single time series 
/G78 
/G61 /G72 /G65 /G61 /G20 /G3D /G20 /G50 /G72 /G6F /G62 /G7B /G61 /G20 /GA3 /G20 /G78 
and may be interpreted as the fraction of time that the waveform dwells in the range 
b  f(t)  b. 
Two common pdfs are 
(a) The Uniform distribution	 a random sample taken from a uniformly distributed ran
dom process is equally likely to be found anywhere between a minim um and maxim um 
value. /braceleftBigg 
1 a  x  b p(X)= ba 
0	elsewh were. 
/G62 /G20 /G2D /G20 /G61 
/G61 /G62 
218</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 211 
Reading: 
 Class Handout: Interpolation (Up-sampling) and Decimation (Down-sampling) 
 Proakis and Manolakis: Secs. 11.1  11.5, 12.1 
 Oppenheim, Schafer, and Buck: Sec. 4.6, Appendix A 
 Stearns and Hush, Ch. 9 
1 Interp olation and Decimation 
1.1 Up-Sampling (Interp olation) by an Integer Factor 
Consider a data set {fn} of length N, where fn = f(nT), n =0 ...N  1 and T is the 
sampling interval. The task is to resample the data at a higher rate so as to create a new 
data set {fn}, of length KN, represen ting samples of the same continuous waveform f(t), 
sampled at intervals T/K. The following gure shows a cosinusoidal data set with N =8 
samples, and resampled with the same data set interpolated by a factor K =4. 
1cop yrigh t /circlecopyrtcD.Ro well 2008 2 4 6 8 1 0.5 0 0.5 1 
10 20 30 1 0.5 0 0.5 1 
(a) original data set
 (8 samples) (b) interpolated data set
 (32 samples) 
211</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/summationdisplay 
/summationdisplay 
/braceleftBig /bracerightBig 1.1.1 A Frequency Domain Metho d 
This metho d is useful for a nite-sized data record. Consider the DFTs {Fm} and {Fm}
of a pair of sample sets {fn}and {fn}, both recorded from f(t) from 0 t&lt;T , but with 
sampling intervals T and T/K respectively. Let N and KN be the corresp onding sample 
sizes. It is assumed that T has been chosen to satisfy the Nyquist criterion: 
	Let F(j) = F{f(t)} be the Fourier transform of f(t), and let f(t) be sampled at 
intervals T to produce f(t). Then 
 /parenleftbigg/parenleftbigg /parenrightbigg/parenrightbigg 
F  (j)= 1 Fj   2n	(1)T	 T n=0 
is periodic with period 2/T, and consists of scaled and shifted replicas of F(j). 
Let the total sampling interval be T to produce N = T/T samples. 
	If the same waveform f(t) is sampled at intervals T/K to produce f(t) the period 
of its Fourier transform F(j) is 2K/T and 
 /parenleftbigg/parenleftbigg /parenrightbigg/parenrightbigg 
F (j) = K Fj   2Kn	(2)T	 T n=0 
which diers only by a scale factor, and an increase in the period. Let the total 
sampling period be T as above, to generate KN samples. 
	We consider the DFTs to be sampled represen tations of a single period of F(j) and 
F(j). The equivalent line spacing in the DFT depends only on the total duration 
of the sample set T, and is =2/T in each case: 
/parenleftbigg /parenleftbigg /parenrightbigg/parenrightbigg 2m Fm = F  j ,m =0,1,...N 1 T /parenleftbigg /parenleftbigg /parenrightbigg/parenrightbigg 2mFm = F  j ,m =0,1,...K N 1. T 
From Eqs. (1) and (2) the two DFTs {Fm}and Fm are related: 
 
 KF m m=0,1,...,N /2 1 
Fm =0 m= N/2,...,N K N/2 1  KF m(K1)N m= NKN/2,...,K N 1 
	The eect of increasing N (or decreasing T) in the sample set, while maintaining 
T = NT constan t, is to increase the length of the DFT by raising the eectiv e 
Nyquist frequency N . 
 N N = = T T 
212</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>/summationdisplay 
/summationdisplay Since we cannot describ e f(t), we must use statistical descriptors that capture the essence 
of the waveform. There are two basic metho ds of doing this: 
(a)	Describ e the waveform based on temporal measuremen ts, for example dene the mean 
 of the waveform as 
1 /integraldisplay T/2 
= lim f(t)dt 
T T T/2 
(b)	Conjecture an ensemble of random processes fi(t), i=1,...N , with identical statistics 
and dene the descriptors my measuremen ts made across the ensem ble at a given time, 
for example 
 
(t) = lim fi(t). 
N 
N=1 
	A stationary process is dened as one whose ensem ble statistics are indepen
dent of time. 
	An ergodic process is one in which the temporal statistics are identical to the 
ensem ble statistics. 
Clearly , ergodicity impies stationarit y. 
/G66 /G20 /G20 /G28 /G74 /G29 
/G66 /G20 /G20 /G28 /G74 /G29 
/G66 /G20 /G20 /G28 /G74 /G29 /G31 
/G32 
/G33 /G74 /G69 /G6D /G65 /G2D /G62 /G61 /G73 /G65 /G64 /G20 /G73 /G74 /G61 /G74 /G69 /G73 /G74 /G69 /G63 /G73 /G20 /G64 /G65 /G72 /G69 /G76 /G65 /G64 /G20 /G66 /G72 /G6F /G6D /G20 /G61 /G20 /G73 /G69 /G6E /G67 /G6C /G65 /G20 /G72 /G61 /G6E /G64 /G6F /G6D /G20 /G70 /G72 /G6F /G63 /G65 /G73 /G73 
/G65 /G6E /G73 /G65 /G6D /G62 /G6C /G65 /G2D /G62 /G61 /G73 /G65 /G64 /G20 /G73 /G74 /G61 /G74 /G69 /G73 /G74 /G69 /G63 /G73 /G20 /G64 /G65 /G72 /G69 /G76 /G65 /G64 /G20 /G66 /G72 /G6F /G6D /G20 /G61 /G20 /G68 /G79 /G70 /G6F /G74 /G68 /G65 /G74 /G69 /G63 /G61 /G6C /G20 /G63 /G6F /G6C /G6C /G65 /G63 /G74 /G69 /G6F /G6E /G20 /G6F /G66 
/G72 /G61 /G6E /G64 /G6F /G6D /G20 /G70 /G72 /G6F /G63 /G65 /G73 /G73 /G65 /G73 /G20 /G77 /G69 /G74 /G68 /G20 /G69 /G64 /G65 /G6E /G74 /G69 /G63 /G61 /G6C /G20 /G64 /G65 /G73 /G63 /G72 /G69 /G70 /G74 /G6F /G72 /G73 
In practice statistical descriptors are usually derived experimen tally from measuremen ts. 
For example, the mean of of a waveform might be estimated from a set of 1000 samples of 
a waveform and computed as 
10001 1 = fi. 1000 i=1 
But  is not the mean, it is simply an estimator of the true mean. If we repeated the 
experimen t, we would come up with a dieren t value 2. In statistical descriptions we use 
the terms expected value,or expectation, designated E{x}, and say 
E{i} =  
to indicate that our experimen tal estimates i will be clustered around the true mean . 
217</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>/G74 
/G6E 
/G6D /G5E 
/G6D /G5E /G6E 
2 In discussing sampling of continuous waveforms, we describ ed the use of a pre-aliasing 
lter to eliminate (or at least signican tly reduce) spectral components that would introduce 
aliasing into the sampled data set. When down-sampling, the digital equivalent is required: 
a digital low-pass lter is used to eliminate all spectral components that would cause aliasing 
in the resampled data set. The complete down-sampling scheme is: 
/G44 /G6F /G77 /G6E /G2D /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G4C /G44 /G54 
/G74 /G4C /G44 /G54 
/G44 /G69 /G67 /G69 /G74 /G61 /G6C /G20 /G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 
/G61 /G6E /G74 /G69 /G2D /G61 /G6C /G69 /G61 /G73 /G69 /G6E /G67 /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G44 /G54 
1.3 Resampling with a non-in teger factor
Assume that the goal is to re-sample a sequence by a non-in teger factor p that can be 
expressed as a rational fraction, that is 
P = N 
M 
where N and M are positive integers. This can be achieved by (1) interpolation by a factor 
N, followed by (2) decimation by a factor M, as shown below. 
/G7B /G20 /G66 /G20 /G20 /G7D 
/G69 /G6E /G74 /G65 /G72 /G70 /G6F /G6C /G61 /G74 /G69 /G6F /G6E /G64 /G6F /G77 /G6E /G2D /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G4D /G61 /G6E /G74 /G69 /G2D /G61 /G6C /G69 /G61 /G73 /G69 /G6E /G67 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G48 /G20 /G20 /G20 /G28 /G7A /G29 
/G64 /G65 /G63 /G69 /G6D /G61 /G74 /G69 /G6F /G6E /G64 /G6E /G48 /G20 /G20 /G20 /G28 /G7A /G29 /G69 /G6E /G74 /G65 /G72 /G70 /G6F /G6C /G61 /G74 /G69 /G6F /G6E /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G75 /G70 /G2D /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G75 /G4E /G70 /G7B /G20 /G66 /G20 /G20 /G7D 
However, since the two low-pass lters are cascaded, they may be replaced with a single lter 
with a cut-o frequency that is the lower of the two lters, as is shown below 
/G7B /G20 /G66 /G20 /G20 /G7D /G75 /G70 /G2D /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G4E /G48 /G20 /G20 /G20 /G28 /G7A /G29 /G20 /G6C /G6F /G77 /G2D /G70 /G61 /G73 /G73 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G6C /G70 /G64 /G6F /G77 /G6E /G2D /G73 /G61 /G6D /G70 /G6C /G65 /G72 
/G4D /G7B /G20 /G66 /G20 /G20 /G7D 
Introduction to Random Signals 
In dealing with physical phenomena and systems we are frequen tly confron ted with non
deterministic, (stochastic ,or random ) signals, where the temporal function can not be de
scribed explicitly , nor predicted. Some simple examples are wind loading on a structure, 
additiv e noise in a comm unication system, and speech waveforms. In this brief examina
tion of random phenomena we concen trate on common statistical descriptors of stochastic 
waveforms and input-output relationships of linear systems excited by random waveforms. 
/G6E /G6F /G6E /G2D /G64 /G65 /G72 /G74 /G65 /G72 /G6D /G69 /G6E /G69 /G73 /G74 /G69 /G63 /G20 /G69 /G6E /G70 /G75 /G74 /G6E /G6F /G6E /G2D /G64 /G65 /G72 /G74 /G65 /G72 /G6D /G69 /G6E /G69 /G73 /G74 /G69 /G63 /G20 /G6F /G75 /G74 /G70 /G75 /G74 /G4C /G69 /G6E /G65 /G61 /G72 /G20 /G73 /G79 /G73 /G74 /G65 /G6D 
216</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>and is a measure of the self-similarit y of the function f(t) at time t and at a time  later. 
The cross-correlation function fg() measures the similarit y between two dieren t functions 
f(t) and g(t) at two times  apart. 
 T/21 fg() = lim f(t)g(t + )dt 
T/2T  T 
Note that these denitions must be modied for nite duration waveforms, and if f(t) exists 
in the interval T1  t  T2, we dene 
 T2 
ff ( )= f(t)f(t + )dt 
T1 
2111</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/braceleftbig /bracerightbig 
/braceleftbig /bracerightbig 
/braceleftBigg (b)	The normal (or gaussian) distribution] The normal distribution denes the well known 
bell-shap ed-curv e of elemen tary statistics 
1  (x)2 
p(x)=  e 22 
2 
where  is the mean of the distribution, and 2 is the variance. 
/G6D /G20 /G6D /G20 /G2B /G20 /G73 /G20 /G6D /G20 /G2D /G20 /G73 /G70 /G28 /G78 /G29 
/G78 
Note: The centr al limit theorem of statistics states that any random process that is 
the sum of a large number of underlying independen t random processes, regardless 
of their distributions will be describ ed by a gaussian distribution. 
Many ensem ble based statistical descriptors may be describ ed in terms of the pdf, for example 
The mean	 /integraldisplay  
E {x} =  = xp(x)dx 
 
The variance	 /integraldisplay  
E(x  )2 = 2 = (x  )2 p(x)dx 
 
and by expanding the integral 
/integraldisplay 	 /integraldisplay  /integraldisplay  
2 = x 2 p(x)dx  2 xp(x)dx + 2 p(x)dx =E x 2  2 
	   
Example 1 
Find the mean and variance a random variable that is uniformly distributed 
between x0 and x0 +. 
The pdf is 
1 x0  x  x0 + p(X)=  
0 elsewhere . 
219</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Second-order filter sections
Transformation of low-pass filters to other classes
State-variable active filters</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_08/</lecture_pdf_url>
      <lectureno>8</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>to a high-pass lter Hhp(s). 
Using the transformation g(s)=2 
c /s 
2 s2 
Hhp(s)= 2  c  =  
2 2 c c s2 +2s + c +2
 +2 
s s c 
Example 3 
Design a second-order bandpass lter with center frequency o and bandwidth 
. 
Step 1: Design a rst-order protot ype low-pass lter with cut-o frequency 
: 
 
22+so Hlp(s)= s +  
Step 2: Transform the protot ype using 
s2 +2 
g(s)= o 
s 
so that  s H(s)=   = 2 + s +2 
o +  s
s 
Example 4
22+so Design a second-order band-stop lter with center frequency o and notch-width 
. 
Step 1: Design a rst-order protot ype low-pass lter with cut-o frequency 
:

Hlp(s)= s +  
Step 2: Transform the protot ype using 
s2 
g(s)=  
s2 +2 
o 
so that
 s2 +2
H(s)=  
s2  = o 
 +  s2 + s +2 
o 
86</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/G75 /G28 /G74 /G29 /G79 /G28 /G74 /G29 The rst equation may be rewritten explicitly in terms of the highest derivative 
d2x dx = a1  a0x + u. (1)dt2 dt 
Consider a pair of cascaded analog integrators with the output dened as x(t) so that the 
derivatives of x(t) appear as inputs to the integrators: 
/G73/G31 
/G73/G31 /G78 /G28 /G74 /G29 /G64 /G78
/G64 /G74 /G64 /G20 /G20 /G78
/G64 /G74 /G32 
/G32 
Note that Eq. (1) gives an explicit expression for the input to the rst block in terms of 
the outputs of the two integrators and the system input, and therefore generates the block 
diagram for H1(s) shown below: 
/G73/G31 
/G73/G31 /G78 /G28 /G74 /G29 /G64 /G78
/G64 /G74/G64 /G20 /G20 /G78
/G64 /G74 /G32 
/G32 
/G61 /G61
/G31 /G30 /G75 /G28 /G74 /G29 /G2B 
/G2D/G2D 
The equation 
d2x dx y = b2 + b1 + b0x. dt2 dt 
shows that the output y(t) is a weighted sum of x(t) and its derivatives, leading to the 
complete second-order state variable lter block diagram: 
/G73/G31 /G73/G31 /G78 /G28 /G74 /G29/G64 /G78
/G64 /G74/G64 /G20 /G20 /G78
/G64 /G74 /G32 
/G32 
/G61 /G61
/G31 /G30 /G2D/G2D /G2B /G62 /G62 /G62 /G30 /G31 /G32 /G2B /G2B/G2B /G2B 
This basic structure may be used to realize the four basic lter types by appropriate 
choice of the numerator. 
Y1(s) a0Hlp(s)= = a unity gain low-pass lter (2)U(s) s2 + a1s + a0 
Y2(s) a1s Hbp(s)= = a unity gain band-pass lter (3)U(s) s2 + a1s + a0 
Y3(s) s2 
Hhp(s)= = a unity gain high-pass lter (4)U(s) s2 + a1s + a0 
Y4(s) s2 + a0Hbs(s)= = a unity gain band-stop lter (5)U(s) s2 + a1s + a0 
88</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>edges, and a bandwidth : 
o = cucl 
 = cu  cl. 
The transformation formulas for a low-pass lter with cut-o frequency c are given below 
Low-pass ( c1 )  Low-pass ( c2 ) g(s)= c1 
c2 s 
Low-pass ( c)  High-pass ( c) g(s)= 2 
c 
s 
Low-pass ( c = )  Band-pass ( cl, cu) g(s)= s2 +2 o 
s 
Low-pass ( c = )  Band-stop ( cl, cu) g(s)= s2 c 
s2 +2 
o 
The band-pass and band-stop transformations both double the order of the lter, since s2 
is involved it the transformation. The low-pass lter is designed to have a cut-o frequency 
c = cu  cl. 
The above transformations will create an ideal gain characteristic from an ideal low-
pass lter. For practical lters, however, the skirts of the pass-bands will be a warped 
represen tation of the low-pass protot ype lter. This does not usually cause problems. 
Example 1 
Transform the rst-order low-pass lter 
cHlp(s)= s + c 
to a high-pass lter Hhp(s). 
Using the transformation g(s)=2 
c /s 
c s Hhp(s)=  
2  = 
c + c s + c 
s 
Example 2 
Transform the second-order low-pass Butterw orth lter 
2 
Hlp(s)=  c 
s2 + 2cs +2 
c 
85</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>3 State-V ariable Activ e Filters 
Practical realizations of analog lters are usually based on factoring the transfer function 
into cascaded second-order sections, each based on a complex conjugate pole-pair or a pair 
of real poles, and a rst-order section if the order is odd. Any zeros in the system may be 
distributed among the second- and rst-order sections. Each rst-and second-order section 
is then implemen ted by an active lter and connected in series. For example the third-order 
Butterw orth high-pass lter 
s3 
H(s)= s3 +40s2 + 800s + 8000 
would be implemen ted as 
s2 s H(s)= s2 +20s + 400  s +20 
as shown below: 
/G73 
/G73 /G20 /G20 /G2B /G20 /G32 /G30 /G73 /G20 /G2B /G20 /G34 /G30 /G30 /G32 
/G32/G73
/G73 /G20 /G2B /G20 /G32 /G30/G73 /G33
/G73 /G20/G33/G20 /G2B /G20 /G34 /G30 /G73 /G20/G32/G20 /G2B /G20 /G38 /G30 /G30 /G73 /G20 /G2B /G20 /G38 /G30 /G30 /G30
/G28 /G61 /G29 /G28 /G62 /G29 
The design of each low-order block can be handled independen tly. 
The state-variable lter design metho d is based on the block diagram represen tation used 
in the so-called phase-variable description of linear systems that uses the outputs of a chain 
of cascaded integrators as state variables. Consider a second-order lter block with a transfer 
function 
Y (s) b2s2 + b1s + b0H(s)= = U(s) s2 + a1s + a0 
and split H(s) into two sub-blo cks represen ting the denominator and numerator by intro
ducing an intermediate variable x and rewrite 
X(s) 1 H1(s)= = U(s) s2 + a1s + a0 
Y (s) 2H2(s)= = b2s + b1s + b0X(s) 
so that H(s)= H2(s)H1(s). 
The dieren tial equations corresp onding to H1(s) and H2(s) are 
d2x dx + a1 + a0x = u dt2 dt 
and 
d2x dx y = b2 + b1 + b0x. dt2 dt 
87</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>(b) High-P ass Filter 
2sHhp(s)= s2 + a1s+ a0 
High Frequency Beha vior: The number of poles equals the number of zeros (n= 
m) so that 
lim |H(j)| =1. 
 
Low Frequency Beha vior: There are a pair of zeros at the origin so that 
lim |H(j)| =0 
0 
and the low frequency asymptotic slope is +40dB/decade. 
 Mid Frequency Beha vior: The response in the region   a0 is determined by 
the systems damping ratio , and will exhibit a resonan t peak if &lt;0.707. 
/G31 
/G30 /G57 /G7C /G48 /G28 /G6A /G57 /G29 /G7C 
(c) Band-P ass Filter a1s Hbp(s)= s2 + a1s+ a0 
High Frequency Beha vior: The number of poles exceeds the number of zeros (n 
m= 1) so that 
lim |H(j)| =0. 
 
and the high frequency asymptotic slope is -20dB/decade. 
Low Frequency Beha vior: There is a single of zero at the origin so that 
lim |H(j)| =0 
0 
and the low frequency asymptotic slope is +20dB/decade. 
 Mid Frequency Beha vior: When s= ja0, 
 H(ja0)=1
which denes the passband center frequency .
82</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 81 
Reading: 
 Class handout: Intr oduction to Continuous Time Filter Design . 
 Class Handout: Intr oduction to Operational Ampliers . 
 Class Handout: Op-A mp Implementation of Analo g Filters . 
Second-Order Filter Sections 
(a) Low-P ass Filter a0Hlp(s)= s2 + a1s+ a0 
High Frequency Beha vior: The number of poles exceeds the number of zeros (n 
m= 2) so that 
lim |H(j)| =0. 
 
and the high frequency asymptotic slope is -40dB/decade. 
Low Frequency Beha vior: 
lim |H(j)| =1 
0 
 Mid Frequency Beha vior: The response in the region   a0 is determined by 
the systems damping ratio , and will exhibit a resonan t peak if &lt;0.707. 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C 
/G31 
/G30 /G57 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
81</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>/G61 /G30 /G57 /G31 
/G30 
/G31 
/G30 /G61 /G30 /G57 /G7C /G48 /G28 /G6A /G57 /G29 /G7C 
(d) Band-Stop Filter 
s2 + a0Hbs(s)= s2 + a1s + a0 
High Frequency Beha vior: The number of poles equals the number of zeros (n = 
m = 2) so that 
lim |H(j)| =1. 
 
Low Frequency Beha vior: There are no zeros at the origin and
lim |H(j)| =1
0 
 Mid Frequency Beha vior: There are a pair of imaginary zeros at s = ja0 forcing the response magnitude to zero at a frequency  = a0. 
 |H(ja0)| =0
which denes the band rejection (notch) center frequency .
/G7C /G48 /G28 /G6A /G57 /G29 /G7C 
83</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>/G73/G31
/G73/G31
/G58 /G28 /G73 /G29 /G73 /G58 /G28 /G73 /G29 /G73 /G20 /G20 /G58 /G28 /G73 /G29/G32
/G61/G61
/G31/G30/G55 /G28 /G73 /G29/G2B
/G2D/G2D
/G61/G30/G30/G2B
/G2B
/G59 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G6C /G6F /G77 /G20 /G2D /G70 /G61 /G73 /G73 /G29/G59 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G62 /G61 /G6E /G64 /G2D /G70 /G61 /G73 /G73 /G29/G59 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G68 /G69 /G67 /G68 /G2D /G70 /G61 /G73 /G73 /G29/G59 /G20 /G20 /G28 /G73 /G29 /G20 /G28 /G62 /G61 /G6E /G64 /G2D /G73 /G74 /G6F /G70 /G29
/G31/G32/G33/G34
/G61/G31/G6189</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G30
/G31
/G52 /G63
/G52 /G73
/G30
/G31
/G52 /G63
/G52 /G73
/G30
/G31
/G52 /G63
/G52 /G73
2 Transformation of Low-P ass Filters to other Classes 
Filter specication tolerance bands for high-pass, band-pass and band-stop lters are shown 
The most common procedure for the design of these lters is to design a prototyp e low-p ass 
lter using the metho ds describ ed above, and then to transform the low-pass lter to the 
desired form by a substitution in the transfer function, that is we substitute a function 
g(s) for s in the low-pass transfer function Hlp(s), so that the new transfer function is 
H/prime(s)= Hlp(g(s)). The eect is to modify the lter poles and zeros to produce the desired 
frequency response characteristic. 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C/G32 
/G30 /G57 /G72 /G57 /G63 /G57 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G65 /G63 /G29 
/G28 /G61 /G29 /G20 /G48 /G69 /G67 /G68 /G2D /G70 /G61 /G73 /G73 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C/G32 
/G30 /G57 /G72 /G6C /G57 /G63 /G6C /G57 /G63 /G75 /G57 /G72 /G75 /G57 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G65 /G63 /G29 
/G28 /G62 /G29 /G20 /G42 /G61 /G6E /G64 /G2D /G70 /G61 /G73 /G73 
/G7C /G48 /G28 /G6A /G57 /G29 /G7C/G32 
/G30 /G57 /G63 /G6C /G57 /G72 /G6C /G57 /G72 /G75 /G57 /G63 /G75 /G57 /G20 /G28 /G72 /G61 /G64 /G2F /G73 /G65 /G63 /G29 
/G28 /G63 /G29 /G20 /G42 /G61 /G6E /G64 /G2D /G73 /G74 /G6F /G70 
The critical frequencies used in the design are as shown above. For band-pass and band-stop 
lters it is convenient to dene a center frequency o as the geometric mean of the pass-pand 
84</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Adaptive filtering</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/2-161-signal-processing-continuous-and-discrete-fall-2008/resources/lecture_25/</lecture_pdf_url>
      <lectureno>25</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>MIT Open CourseWare 
http://oc w.mit.edu 
2.161  Signal Processing: Continuous and Discrete 
Fall 2008 
For info rmati on abo ut citin g these mate rials or o ur Terms of Use, visit: http://ocw.mit.edu/term s.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>b(J,:) = b1; 
end; 
% 
wavplay(e,Fs); 
The script reads the sound le, adds the interference waveform and plays the 
le. It then lters the le and plays the resulting output. After ltering the 
sliding sinusoid can only be heard very faintly in the background. There is some 
degradation in the qualit y of the speech, but it is still very intelligible. 
This example was demonstrated in class at this time.
The following plot shows the waveform spectrum before ltering. The superpo
sition of the speech spectrum on the pedestal spectrum of the swept sinusoid can 
be clearly seen. 
0 500 1000 1500 2000 2500 Magnitude Input Spectrum 
0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 
Frequency (Hz) 
The pedestal has clearly been removed after ltering, as shown below. 
Filtered Output Spectrum 
0 100 200 300 400 500 600 700 800 900 1000 Magnitude 
0 1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 
Frequency (Hz) 
259</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>/summationdisplay 
/G66 /G28 /G6E /G29 
/G6B /G6B 1.1 The Adaptiv e LMS Filter Algorithm 
1.1.1 Simplied Deriv ation 
In the length M FIR adaptiv e lter the coecien ts bk(n), k =1,2,...,M 1, at time step n 
are adjusted continuously to minimize a step-b y-step squared-error performance index J(n): 
/parenleftBigg /parenrightBigg2M1 
J(n)= e 2(n)=(d(n) y(n))2 = d(n)  b(k)f(nk) 
k=0 
J(n) is describ ed by a quadratic surface in the bk(n), and therefore has a single minim um. 
At each iteration we seek to reduce J(n) using the steep est descen t optimization metho d, 
that is we move each bk(n) an amoun t proportional to J(n)/b(k). In other words at step 
n+ 1 we modify the lter coecien ts from the previous step: 
J(n)bk(n+1) = bk(n) (n) ,k =0,1,2,...M 1 b k(n)
where (n) is an empirically chosen parameter that denes the step size, and hence the rate 
of convergence. (In many applications (n) = , a constan t.) Then 
J(n) e2(n) e(n) = =2e(n) = 2e(n)f(nk)b k b k b k 
and the xed-gain FIR adaptive Least-Me an-Squar e (LMS) lter algorithm is 
bk(n+1) = bk(n)+e(n)f(nk),k =0,1,2,...M 1 
or in matrix form
b(n+1) = b(n)+e(n)f(n),
where 
b(n)=[b0(n) b1(n) b2(n)  bM1]T 
is a column vector of the lter coecien ts, and 
f(n)=[f(n) f(n1) f(n2)  f(n(M 1))]T 
is a vector of the recent history of the input {f(n)}. 
A Direct-F orm implemen tation for a lter length M =5 is 
/G7A /G2D /G31 
/G58 
/G62 /G20 /G20 /G28 /G6E /G29 /G7A /G2D /G31 
/G58 
/G62 /G20 /G20 /G28 /G6E /G29 /G2B
/G2B /G7A /G2D /G31 
/G58 
/G62 /G20 /G20 /G28 /G6E /G29 /G2B
/G2B /G7A /G2D /G31 
/G58 
/G62 /G20 /G20 /G28 /G6E /G29 /G2B /G58 
/G62 /G20 /G20 /G28 /G6E /G29 /G2B
/G2B/G2B /G2B 
/G30 /G31 /G32 /G33 /G34 /G79 /G28 /G6E /G29 /G64 /G28 /G6E /G29 
/G65 /G28 /G6E /G29 
/G41 /G64 /G61 /G70 /G74 /G69 /G76 /G65 /G20 /G4C /G4D /G53 /G20 /G41 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D 
/G62 /G20 /G20 /G28 /G6E /G2B /G31 /G29 /G20 /G20 /G3D /G20 /G20 /G62 /G20 /G20 /G28 /G6E /G29 /G20 /G20 /G2B /G20 /G20 /G4C /G65 /G28 /G6E /G29 /G66 /G28 /G6E /G2D /G6B /G29 
252</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>/summationdisplay {s(n )}, so that it will not be predicted. In other words it assumes that 
ss()=0, for || &gt;. 
This least squares structure is similar to a -step linear predictor. It acts to predict the cur
rent narrow-band (broad auto-correlation) component from the past values, while rejecting 
uncorrelated components in {d(n)} and {f(n )}. 
If the LMS lter transfer function at time-step n is Hn(z), the overall suppression lter 
is FIR with transfer function H(z): 
E(z) F(z)  zHn(z)F(z)H(z)= = F(z) F(z)
=1  z Hn(z)
= z 0 +0z 1 + ...+0z (1)  b0(n)z   b1(n)z (+1) + ... 
... bM1(n)z (+ M 1) 
that is, a FIR lter of length M +  with impulse response h/prime(k) where 
 
 1 k =0 
h/prime(k)= 0 1  k&lt;  bk(n)   k  M +  1 
and with frequency response 
M+1 
H(ej ) = h/prime(k)e jk . 
k=0 
The lter adaptation algorithm is the same as describ ed above, with the addition of the 
delay , that is 
b(n+1) = b(n)+e(n)f(n )) 
or 
bk(n+1) = bk(n)+e(n)f((n )  k),k =0,1,2,...M  1. 
Example 1 
The frequency domain Characteristics of an LMS Suppression Filter: 
This example demonstrates the lter characteristics of an adaptiv e LMS lter af
ter convergence. The interfering signal is comprised of 100 sinusoids with random 
phase and random frequencies between 0.3 and 0.6. The signal is white noise. 
The lter used has M = 31,  = 1, and  was adjusted to give a reasonable 
convergence rate. The overall system H(z)=1  zHn(z) frequency response 
magnitude is then computed and plotted, along with the z-plane pole-zero plot. 
255</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>/G66 /G6E /G2D /G44 /G66 /G6E /G72 /G6E	/G64 /G6E 
/G73 /G6E end;
f_history(1) = f;
% Perform the convolution 
y=0 ; 
for J = 1:M 
y = y + b(J)*f_history(J);
end;
% Compute the error and update the filter coefficients for the next iteration 
e=d-y ; 
for J = 1:M 
b(J) = b(J) + lambda*e*f_history(J);
end;
bout=b;
end 
1.1.4	 Application Example -Suppression of Narro w-band Interference in a 
Wide-band Signal 
Consider an adaptiv e lter application of suppressing narrow band interference, or in terms 
of correlation functions we assume that the desired signal has a narrow auto-correlation 
function compared to the interfering signal. 
Assume that the input {f(n)} consists of a wide-band signal {s(n)} that is contaminated 
by a narrow-band interference signal {r(n)} so that 
f(n)= s(n)+ r(n). 
The ltering task is to suppress r(n) without detailed knowledge of its structure. Consider 
the lter shown below: 
/G6E /G61 /G72 /G72 /G6F /G77 /G2D /G62 /G61 /G6E /G64
/G63 /G61 /G75 /G73 /G61 /G6C /G20 /G6C /G69 /G6E /G65 /G61 /G72 /G20 /G46 /G49 /G52 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G48 /G28 /G7A /G29/G5A /G2D /G44 
/G41 /G64 /G61 /G70 /G74 /G69 /G76 /G65 /G20 /G4C /G65 /G61 /G73 /G74 /G2D /G53 /G71 /G75 /G61 /G72 /G65 /G73
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G41 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D/G69 /G6E /G74 /G65 /G72 /G66 /G65 /G72 /G65 /G6E /G63 /G65
/G79/G6E /G2D /G2B /G65 /G72 /G72 /G6F /G72 
/G65 /G6E/G20 /G20 /GBB /G20 /G73/G6E
/G77 /G69 /G64 /G65 /G2D /G62 /G61 /G6E /G64
/G73 /G69 /G67 /G6E /G61 /G6C /G64 /G65 /G6C /G61 /G79
/G66 /G69 /G6C /G74 /G65 /G72 /G20 /G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73 
This is similar to the basic LMS structure, with the addition of a delay block of  time steps 
in front of the lter, and the denition that d(n)= f(n). The overall ltering operation is 
a little unusual in that the error sequence {e(n)} is taken as the output. The FIR lter is 
used to predict the narrow-band component so that y(n)  r(n), which is then subtracted 
from d(n)= f(n) to leave e(n)  s(n). 
The delay block is known as the decorrelation delay. Its purpose is to remove any 
cross-correlation between {d(n)} and the wide-band component of the input to the lter 
254</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>4 Magnitude Spectrum of input signal f(n) Spectrum of output signal e(n) 
8 8 
7 7 
6 6 
5 5 Magnitude4 
3 3 
2 2 
1 1 
0 0 
1 2 3 
Normalized angular frequency 0 0 
1 2 3 
Normalized angular frequency 
Adaptive Filter Frequency Response 
30 25 20 15 10 5 0 5 Magnitude (dB) 
0	 0.5 1 1.5 2 2.5 3 
Normalized frequency 
Adaptive Filter  zplane pole/zero plot 
1 0.8 0.6 0.4 0.2 0 0.2 0.4 0.6 0.8 1 
31Imaginary Part 
1 0.5 0 0.5 1 
Real Part 
257</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>% The frequency domain filter characteristics of an interference 
% suppression filter with finite bandwidth interference 
% 
% Create the interference as a closely packed sum of sinusoids 
% between 0.3pi &lt; Omega &lt; 0.6pi with random frequency and phase 
phase = 2*pi*rand(1,100);
freq = 0.3 + 0.3*rand(1,100);
f = zeros(1,100000);
for J=1:100000
f(J) = 0;
for k = 1:100
f(J) = f(J) + sin(freq(k)*J + phase(k));
end
end
% The "signal" is white noise 
signal = randn(1,100000); 
f = .005*f + 0.01*signal; 
% Initialize the filter with M = 31 , Delta =1 
% Choose filter gain parameter Lambda = 0.1 
Delta = 1; Lambda = 0.5; M = 31; 
x = LSadapt(initial,Lambda, M); 
% Filter the data 
f_delay = zeros(1,Delta+1); 
y = zeros(1,length(f)); 
e = zeros(1,length(f)); 
for J = 1:length(f) 
for K = Delta+1:-1:2 
f_delay(K) = f_delay(K-1);
end
f_delay(1) = f(J);
[y(J),b] = LSadapt(f_delay(Delta+1),f(J));
e(J) = f(J) -y(J);
end; 
% Compute the overall filter coefficients 
% H(z) = 1 -z^{-Delta}H_{LMS}(z) 
b_overall = [1 zeros(1,Delta-1) -b]; 
% Find the frequency response 
[H,w] = freqz(b_overall,1); 
zplane(b_overall,1) 
The following plots show (i) the input input and output spectra, the lter fre
quency response magnitude, and (iii) the pole-zero plot of the lter. Note that 
the zeros have been placed over the spectral region (0.3 &lt;&lt;0.6) to create the 
band-reject characteristic. 
256</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>A linear system with an unkno wn impulse response is excited by wide-band 
excitation f(n), The adaptiv e, length M FIR lter works in parallel with the 
system, with the same input. Since it is an FIR lter, its impulse response is the 
same as the lter coecien ts, that is 
h(m) = b(m), for m =0, 1, 2,...M  1. 
and with the error e(n) dened as the dierence between the system and lter 
outputs, the minim um MSE will occur when the lter mimics the system, at 
which time the estimated system impulse h(m) response may be taken as the 
converged lter coecien ts. 
Consider a second-order unkno wn system with poles at z1,z2 = Rej, that is 
with transfer function 
1 H(z)= ,1  2Rcos()z1 + R2z2 
where the radial pole position R varies slowly with time. The following MATLAB 
script uses LSadapt() to estimate the impulse response with 10,000 samples of 
gaussian white noise as the input, while the poles migrate from z1,z2 =0.8ej/5 
to 0.95ej/5 
% Adaptive SysID 
f = randn(1,10000); 
% Initialize the filter with M = 2, Delta =.8 
% Choose filter gain parameter Lambda = 0.1 
Lambda = 0.01; M = 51; 
x = LSadapt(initial,Lambda,M); 
% Define the "unknown" system 
R0 = .8; R1 = 0.95; ctheta = cos(pi/5); 
delR = (R1-R0)/L; 
L = length(f); 
b=zeros(M,L); 
ynminus2 = 0; ynminus1 = 0; 
for J = 1:L 
% Solve the difference equation to determine the system output 
% at this iteration 
R = R0 + delR*(J-1); 
yn = 2*R*ctheta*ynminus1 -R^2*ynminus2 + f(J); 
ynminus2 = ynminus1; 
ynminus1 = y; 
[yout,b(:,J)] = LSadapt(f(J),yn); 
end; 
The following plot shows the estimated impulse response, h(m)= b(m), as the 
poles approac h the unit circle during the course of the simulation, demonstrating 
that the adaptiv e algorithm is able to follow the changing system dynamics. 
2511</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>/G65 /G6E /G66 /G6E /G79 /G6E /G2D 1 Massa chusetts Institute of Technology
Dep artment of Mechanical Engineering
2.161 Signal Processing -Continuous and Discr ete 
Fall Term 2008 
Lecture 251 
Reading: 
 Class Handout: Intr oduction to Least-Squar es Adaptive Filters 
 Class Handout: Intr oduction to Recursive-L east-Squar es (RLS) Adaptive Filters 
 Proakis and Manolakis: Secs. 13.1  13.3 
Adaptiv e Filtering 
In Lecture 24 we looked at the least-squares approac h to FIR lter design. The lter coef
cients bm were generated from a one-time set of experimen tal data, and then used subse
quently, with the assumption of stationarit y. In other words, the design and utilization of 
the lter were decoupled. 
We now extend the design metho d to adaptive FIR lters, where the coecien ts are 
continually adjusted on a step-b y-step basis during the ltering operation. Unlike the static 
least-squares lters, which assume stationarit y of the input, adaptiv e lters can track slowly 
changing statistics in the input waveform. 
The adaptiv e structure is shown in below. The adaptiv e lter is FIR of length M with 
coecien ts bk, k =0,1,2,...,M  1. The input stream {f(n)} is passed through the lter 
to produce the sequence {y(n)}. At each time-step the lter coecien ts are updated using 
an error e(n)= d(n)  y(n) where d(n) is the desired response (usually based of {f(n)}). 
/G63 /G61 /G75 /G73 /G61 /G6C /G20 /G6C /G69 /G6E /G65 /G61 /G72 /G20 /G46 /G49 /G52 /G20 /G66 /G69 /G6C /G74 /G65 /G72 
/G48 /G28 /G7A /G29 
/G41 /G64 /G61 /G70 /G74 /G69 /G76 /G65 /G20 /G4C /G65 /G61 /G73 /G74 /G2D /G53 /G71 /G75 /G61 /G72 /G65 /G73
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G41 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D /G64/G6E 
/G2B /G65 /G72 /G72 /G6F /G72 
/G66 /G69 /G6C /G74 /G65 /G72 /G20 /G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73 
The lter is not designed to handle a particular input. Because it is adaptiv e, it can adjust 
to a broadly dened task. 
1cop yrigh t /circlecopyrtcD.Ro well 2008 
251</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>/G64 /G28 /G6E /G29 /G68 /G28 /G6D /G29 The magnitude of the frequency response lter as a meshed surface plot, with 
time as one axis and frequency as the other. The rejection notch is clearly visible, 
and can be seen to move from a low frequency at the beginning of the message 
to approximately 2.5 kHz at the end. Magnitude (dB) 20 
0
20
40
60
10
8
4000 
6 3000 
4 2000 
2 1000 
Time (sec) 0 0 Frequency (Hz) 
Example 3 
Adaptiv e System Iden tication: 
An adaptiv e LMS lter may be used for real-time system identication, and will 
track slowly varying system parameters. Consider the structure shown in below. 
/G66 /G28 /G6E /G29 /G75 /G6E /G6B /G6E /G6F /G77 /G6E /G20 /G4C /G54 /G49 /G20 /G73 /G79 /G73 /G74 /G65 /G6D /G73 /G79 /G73 /G74 /G65 /G6D /G20 /G6F /G75 /G74 /G70 /G75 /G74 
/G63 /G61 /G75 /G73 /G61 /G6C /G20 /G6C /G69 /G6E /G65 /G61 /G72 /G20 /G46 /G49 /G52 /G20 /G66 /G69 /G6C /G74 /G65 /G72 /G79 /G28 /G6E /G29 /G2B 
/G48 /G28 /G7A /G29 /G2D 
/G65 /G73 /G74 /G69 /G6D /G61 /G74 /G65 /G64 /G20 /G69 /G6D /G70 /G75 /G6C /G73 /G65
/G72 /G65 /G73 /G70 /G6F /G6E /G73 /G65 
/G66 /G69 /G6C /G74 /G65 /G72 /G20 /G63 /G6F /G65 /G66 /G66 /G69 /G63 /G69 /G65 /G6E /G74 /G73 /G68 /G28 /G6D /G29 
/G61 /G64 /G61 /G70 /G74 /G69 /G76 /G65 /G20 /G4C /G65 /G61 /G73 /G74 /G2D /G53 /G71 /G75 /G61 /G72 /G65 /G73 /G65 /G28 /G6E /G29 
/G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G20 /G61 /G6C /G67 /G6F /G72 /G69 /G74 /G68 /G6D /G65 /G72 /G72 /G6F /G72 
2510</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>/parenleftbigg /parenleftbigg /parenrightbigg/parenrightbigg Example 2 
Suppression of a Sliding Sinusoid Superimp osed on a Voice Signal: 
In this example we demonstrate the suppression of a sinusoid with a linearly 
increasing frequency superimp osed on a voice signal. The ltering task is to task 
is to suppress the sinusoid so as to enhance the intelligibilit y of the speech. The 
male voice signal used in this example was sampled at Fs =22.05 kHz for a 
duration of approximately 8.5 sec. The interference was a sinusoid 
Fs 2 r(t) = sin((t))=sin 2t + t150 
where Fs =22.05 kHz is the sampling frequency . The instan taneous angular 
frequency (t)= d(t)/dt is therefore 
(t)=2(50 + 294t) rad/s 
which corresp onds to a linear frequency sweep from 50 Hz to approx 2550 Hz 
over the course of the 8.5 second message. In this case the suppression lter 
must track the changing frequency of the sinusoid. 
% Suppression of a frequeny modulated sinusoid superimposed on speech. 
% Read the audio file and add the interfering sinusoid 
[f,Fs,Nbits] = wavread(crash); 
for J=1:length(f) 
f(J) = f(J) + sin(2*pi*(50+J/150)*J/Fs);
end
wavplay(f,Fs);
% Initialize the filter 
M = 55; Lambda = .01; Delay = 10; 
x = LSadapt(initial, Lambda, M); 
y = zeros(1,length(f)); 
e = zeros(1,length(f)); 
b = zeros(length(f),M); 
f_delay = zeros(1,Delay+1); 
% Filter the data 
for J = 1:length(f) 
for K = Delta+1:-1:2 
f_delay(K) = f_delay(K-1);
end
f_delay(1) = f(J);
[y(J),b1] = LSadapt(f_delay(Delta+1),f(J));
e(J) = f(J) 
-y(J);
258</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>1.1.2 Expanded Deriv ation 
A more detailed derivation of the LMS algorithm (leading to the same result) is given in the 
class handout Intr oduction to Least-Squar es Adaptive Filters , together with a brief discussion 
of the convergence properties. 
1.1.3 A MATLAB Tutorial Adaptiv e Least-Squares Filter Function 
% ------------------------------------------------------------------------
% 2.161 Classroom Example -LSadapt -Adaptive Lleast-squares FIR filter 
% demonstration 
% Usage : 1) Initialization: 
% y = LSadapt(initial, Lambda, FIR_N) 
% where Lambda is the convergence rate parameter. 
% FIR_N is the filter length. 
% Example: 
% [y, e] = adaptfir(initial, .01, 51); 
% Note: LSadapt returns y = 0 for initialization 
% 2) Filtering: 
% [y, b] = adaptfir(f, d}; 
% where f is a single input value, 
% d is the desired input value, and 
% y is the computed output value, 
% b is the coefficient vector after updating. 
% 
% Version: 1.0 
% Author: D. Rowell 12/9/07 
% ------------------------------------------------------------------------
% 
function [y, bout] = LSadapt(f, d ,FIR_M) 
persistent f_history b lambda M 
% 
% The following is initialization, and is executed once 
% 
if (ischar(f) &amp;&amp; strcmp(f,initial)) 
lambda = d;
M = FIR_M;
f_history = zeros(1,M);
b = zeros(1,M);
b(1) = 1;
y=0 ;
else 
% Update the input history vector: 
for J=M:-1:2 
f_history(J) = f_history(J-1); 
253</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>010203040500.80.850.90.95
1.510.500.511.52
Pole radius
Time step (n)Impulse response h(n)1.2 The Recursiv e Least-Squares Filter Algorithm 
The recursiv e-least-squares (RLS) FIR lter is an alternativ e to the LMS lter describ ed 
above, where the coecien ts are continually adjusted on a step-b y-step basis during the 
ltering operation. The lter structure is similar to the LMS lter but diers in the internal 
algorithmic structure. 
Like the LMS lter, the RLS lter is FIR of length M with coecien ts bk, k =0, 1, 2,...,M
1. The input stream {f(n)} is passed through the lter to produce the sequence {y(n)}. At 
each time-step the lter coecien ts are updated using an error e(n)= d(n)  y(n) where 
d(n) is the desired response (usually based of {f(n)}). 
The LMS lter is implicitly designed around ensem ble statistics, and uses a gradien t 
descen t metho d based on expected values of the waveform statistics to seek optimal values 
for the lter coecien ts. On the other hand, the RLS lter computes the temp oral statistics 
directly at each time-step to determine the optimal lter coecien ts. The RLS lter is 
adaptiv e and can adjust to time varying input statistics. Under most conditions the RLS 
lter will converge faster than a LMS lter. 
Refer to the class handout Introduction to Recursive-L east-Squar es (RLS) Adaptive Fil
ters for details. 
2512</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
  </lectures>
</doc>
