<doc>
  <source>MIT</source>
  <date>28/01/2023</date>
  <course>
    <course_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/</course_url>
    <course_title>Communication System Design</course_title>
    <course_tags>
      <list>Engineering </list>
      <list>Computer Science </list>
      <list>Systems Engineering </list>
    </course_tags>
  </course>
  <lectures>
    <lecture>
      <lecture_title>Introduction to practical digital communications (PDF) (Courtesy of John Cioffi. Used with permission.)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_2/</lecture_pdf_url>
      <lectureno>L2</lectureno>
      <slides>
        <slide>
          <slideno>6</slideno>
          <text>More constellations1()t
-3 -1 1 3-3 -1 1 3 1()tQuadrature Amplitude Modulation 
(QAM)
Pulse Amplitude Modulation 2()t(PAM)
3
1
-1
e.g. PAM4-3
e.g. 16-QAM
PAM and QAM have pulses as basis functions
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 23</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>6.973 Communication System Design 20Maps continuous signals to discrete vectors
Significantly simplifies system analysis
signal pointssignal 
waveformsbasis functions
Modulator
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Vector signal representation</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>6.973 Communication System Design 24Need to be orthonormal  (b/c of demodulation)
Inner products
Continuous
Discrete
Invariant to choice of basis functions
Average energy of the constellation
Invariant to the choice of basis functions
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
How do we choose basis functions?</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Implications of the inner product invariance to 
basis functions
If energy is a signal, it is the same regardless of the mod waveform used
As long as basis functions are orthogonal
Parsevals identity
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 25
Constellation energy</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>6.973 Communication System Design 27
Cor
Note                       equivalent to
Can implement with an integrate-and-dump
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Practical implementation
relative demodulator Matched-filter demodulator</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Discrete data transmission
Messages are encoded into signal points
signal points
signal waveform
Signal points are mapped to signal waveforms
Modulation
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 18
s</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>29
Sources
VppSim/CppSim is a tool developed by prof. 
Michael Perrott
Digital communications material is adapted 
from prof. John Cioffis Stanford Course 
readers
http://www.stanford.edu/class/ee379a,b,c/
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.973 Communication System Design  Spring 2006
Massachusetts Institute of Technology
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Intro to Practical
Digital Communications
Lecture 2
Vladimir Stojanovi</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>6.973 Communication System Design 22Manchester modulation example (Ethernet)
Different waveforms can have same vector representations
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>6.973 Communication System Design 26
Straightforward demodulator implementation
Use the fact that basis functions are orthogonal
Collect the signal energy
Hard to build in practice
DemodulatorModulator
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Correlative demodulator</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>21BPSK example
Signal constellation
What is the information rate (R) of this modulation?
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Summary
In this course youll be able to learn
Practical digital communication techniques
Hands-on, little math
Hardw are implementations
Algorithmic transformations
Micro-architectures
ASIC flow and behavioral modeling
In other words, everything youll need to start building 
cutting-edge digital communication systems
Started intro to digital communications
Modulation  signal constellation, basis functions
Demodulation  basis function invariance, matched-filter
Next  basics of detection, signalling on band-limited channels
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 28</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Modulation and de-modulation
e.g. Binary Phase-Shift Keying (BPSK)
x0(t)
x1(t)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
 19 6.973 Communication System Design</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>PDF - 1.2 MB</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_6/</lecture_pdf_url>
      <lectureno>L6</lectureno>
      <slides>
        <slide>
          <slideno>12</slideno>
          <text>Improving area efficiency: Folding
N times
D D 
clk f clk fD 
clk f 
D D 
clk f
clkNf
Sel
 Reuse logic and registers 
 Preserves the throughput 
 Saves area 
 Need to up-sample the internal data flow 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 13</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Unfolding applications
 Sample period reduction 
p q 
r ut s 
(4) (4) 
(4) 
p q 
r u t s 2D 
(1) 
D 
(0) DTs=4 (1) 
2D (4) (0) (1) (0) 
(4) D 
Ts=6/2=3
p q 
r ut s (1) (0) 
(4) 
 Reduce iteration period (1) 
a b cD 
bbcccc
a D 
b c a 
(4) 
a b c D (0) D 
(2) 
(1) (2) (4) (1) (1) (0) 
a bbcccc
abb Tp=7 
(1) (2) (4) c c c c 
Tp=6 D Titer_avg =Tp/2 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 22</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Fixed-Coefficient Multiplication 
Conventional Multiplication 
Z=X*Y 
Constant multiplication (become hardwired shifts and adds) 
I 
shifts using wiring 
u Example -FFT Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Improving area efficiency: Time multiplexing
D D 
D 
D clk f clk f
clk f
clk f2 clk fD 
D clk f
clk f2 clk fD D 
clk f clk f
 Save area by reusing resources
 Need twice faster clock internally
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 12</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Retiming example: FIR filter 
mmmmm~d;a~d~h*~m. &lt;. 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw,mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Folding  biquad filter example
(|1)S1 (| 3)S 
D 
a D 
D D 
D c D b 
d 2 )0 3(|S 2(| 2) S 1 
2) 1 
4 5 6 
7 8 OUT IN 
2 
(| (| 0) S1 S1
S (|) (| 3) S 12 2 
 Folding sets S1={4,2,3,1}, S2={5,8,6,7} 
 e.g. node 3 executed in the folded architecture at 
time instances 4l+2 (S1|2) 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 17</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Essential transform: Retiming
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY].
6.973  Communication System Design 6</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Folding - example
 Folding set 
 ordered set of operations executed by the same
functional unit (e.g. S1={A1, 0, A2}, N=3) 
 A1 belongs to folding set S1  with folding order 0  S1|0 
 A2 belongs to folding set S1  with folding order 2  S1|2 
 Unit is not utilized at time instances 3l+1 due to null operation at
position 1 within S1  S1|1 
 Biquad filter example (add 1, multiply 2) 
 N=4 (folded 4 times, now iteration period is 4) 
 Each node of the filter executed once every 4 time units when 
folded 
 Pa=1, Pm=2 (one stage pipelined add, 2-stage
pipelined multiply)  units can be clocked at unit time 
 Functional units in the folded architecture execute 4 
operations before the next period 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 16</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Pipelining 
Pipelining = Adding Delays + Retiming 
Only works on feed-forward path,s 
Contrary to retiming, 
pipelining adds extra registers 
to the system 
add input 
registem 3 How to pipehe: 
1. Add extra registers at 
all inputs 
2. Retime 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>References
	A. P. Chandrakasan, S. Sheng, and R. W. 
Brodersen, "Low-power CMOS digital design" 
IEEE Journal Solid-State Circuits, April 1992 
 Second most cited JSSC paper 
 Keshab Parhi VLSI Digital Signal Processing 
Systems 
 Read: Chapters 3, 4, 5, 6 (10, 13 and 17 optional) 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 25</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Parallelism  saving power
D D 
clk f clk f
D 
D 
D 2 clk f
clk f2 clk f 
2 clk f 
2 
 Same throughput as nominal 
 Delay of each path relaxed 2x 
 Lower the supply to match 2x nominal delay 
 P=f*Ctot*Vdd2 
 fpar=fnom/2, Cpar=2*Cnom, Vdd_par~=Vdd_nom /2 (sqrt(2))=&gt; Ppar~=Pnom/4 (2) 
 Not quite right since Mux is additional overhead (but close) 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 10</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Parallelism  speeding up
D D 
clk f clk f
D 
D 
D clk f
clk fclk f clk fclkf 
 Almost twice the throughput of the nominal design 
 Need to fit the extra mux 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 11</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Behavioral transformations 
There are a large number of implementations of the same 
functionality 
These implementations present a different point in the 
area-time-power design space 
Behavioral transformations allow exploring the design 
space a high-level 
Optimization metrics: 
1. Area of the design 
2. Throughput or sample time T, 
3. Latency: clock cycles between 
the input and associated output 
change 
4. Power consumption 
5. Energy of executing a task 
6. ... power 
4 
area 
time 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973Communication System Design</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Micro-architectures and transformations
Lecture 6
Vladimir Stojanovi 
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Algebraic transformations 
Commutativity Distributivity 
Associativity Common sub-expressions 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Transforms for efficient resource utilization 
Time multiplexing: mapped to 
3 multipliers and 3 adders 
Reduce number of operators 
to 2 multipliers and 2 adders 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
Mll Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Courtesy of Anantha Chandrakasan. Used with permission. 
Lookahead 
loop 
unrolling 
Try pipelining 
this structure 
How about pipelining 
this structure! 
retiming -
A* -
precomputedCourtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimlr Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Fast fourier transform: theory and algorithms (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_8/</lecture_pdf_url>
      <lectureno>L8</lectureno>
      <slides>
        <slide>
          <slideno>20</slideno>
          <text>Goods mapping
 
mapping 
 Turns original transform into  a set of small DFTs with 
coprime lengths 
{xiN+ n | n2= 12  
12,..., N 1 }o r{xi+ N  
1 | n= 1,..., 
2n  1 N1 1 }
equivalent to 
 This mapping is one-to-one if N1 and N2 are coprime 
 All congruences modulo N1 obtained 
 For a given congruence modulo N2 and vice versa FFTs without twiddle factors all based on the same 
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].21 0
01
12
23
34
45
56
67
78
89
910
1011
1112
1213
1314
14 Good's mapping
Figure by MIT OpenCourseW .are.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Divide and conquer
Suppose all Il sets have sa me number 
of elements N1 so, N=N1*N2, r=N2 
Each inner-most sum takes N12 multiplications 
The outer sum will need N2 multiplications per output point 
 Hence, total number of multiplications  Divide and conquer always has less computations 
N2*N for the whole sum (for all output points) 
6.973 Communication System Design 
 4
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Fast Fourier Transform History
Twiddle factor FFTs (non-coprime sub-lengths) 
  
 1805 Gauss 
 Predates even Fouriers work on transforms!
 1903 Runge
 1965 Cooley-Tukey
 1984 Duhamel-Vetterli (split-radix FFT)
 FFTs w/o twiddle factors (coprime sub-lengths) 
 1960 Goods mapping 
 applic ation of Chinese Rema inder Theorem  ~100 A.D. 
 1976 Rader  prime length FFT 
 1976 Winograds Fourier Transform (WFTA) 
 1977 Kolba and Parks (Prime Factor Algorithm  PFA) 
6.973  Communication System Design 3 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Duality DIT&lt;-&gt;DIF
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].14 DFT
N = 2DFT
N = 2DFT
N = 2DFT
N = 2X0
X4X1
X5X2
X6X3X0
X4
X1
X5
X2
X6
X3
X7 X7w1
8
w2
8
w3
8
Division
into even and
 odd numbered
sequencesDFT of
N / 2Multiplication
by twiddle
factorsDFT of
2DFT
N = 4DFT
N = 2
DFT
N = 2
DFT
N = 2
DFT
N = 2X0X0
X4X4X1
X1
X5
X5X2X2
X6X6X3
X3
X7X7
DFT of
2DFT of
N / 2Multiplication
by twiddle
factors{  }x2k
DFT
N = 4
{   }x2k+1DFT
N = 4
{  }x2i
DFT
N = 4
{    }x2i+1w1
8
w2
8
w3
8
 Which one is DIT (DIF)? 
 How can we get one from another? Figure by MIT OpenCourseW .are.</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Prime Factor Algorithm
 Efficient small DFTs are a key to the 
feasibility of this algorithm 
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].26 
X = F1 x F2T.
x12
x9X9
X4
X14
X8
X2
X11
X5x6
x3
x0
x5
x10DFT
5
DFT
3Good's mapping CRT mapping
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Complexity of radix-2 FFTs
 DFT of length N replaced by two length-N/2 
 At the cost of N complex multiplications (twiddle) 
 And N complex additions (2pt DFTs) 
 Iterate the scheme log2N-1 times 
 Obtain trivial transforms (length 2) of the length-N/2 DFTs 
 Twiddle multiplies (WNi) 
 Complex multiply  3 real mult + 3 real add 
 If i is multiple of N/4, no arithmetic operation required (why?) 
4 butterflies (one general, 3 special cases)
6.973  Communication System Design 15 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>The cost of mapping
	The goal for divide and conquer 
	Different types balance mapping with subproblem 
cost 
 E.g. in radix-2 
 subproblems are trivial (only sum and differences) 
 Mapping requires twiddle factors (large number of
multiplies) 
 E.g. in prime-factor algorithm 
 Subproblems are DFTs with coprime lengths (costly) 
 Mapping trivial (no arithmetic operations) 
6.973  Communication System Design 6 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Step 1: Evaluate N1 DFTs of length N2 
 Step 2: N multiplications with twiddle factors 
 Step 3: Evaluate N2 DFTs of length N1 
 Vector xi mapped to matrix xn1,n2 (N1xN2) 
 Compute N1 DFTs of length N2 on each row 
 Point-to-point multiply with twiddle factors 
 Compute N2 DFTs of length N1 on the columns 
6.973  Communication System Design 9 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Split-radix (DIF SRFFT)
DFT
2/4X0 X0
X4
X14X1
X13X3
X15X8
X12X[(xn1+xN / 2+n 1)
-j(xn1+N / 4-xn1+3N / 4)].
DFT
8
DFT
4
DFT
4DFT
N = 4DFT
N = 2
DFT
N = 2
DFT
N = 2
DFT
N = 2X0 X0
X4X4X1
X1
X5
X5X2X2
X6X6 X3
X3
X7 X7w1
8
w2
8
w3
8
DFT of
2DFT of
N / 2Multiplication
by twiddle{  }x2k
DFT
N = 4
{    }x2k+1n1=0= X2k1N / 2-1
N / 2(xn1+xN / 2+n 1),
X[(xn1-xN / 2+n 1)
+j(xn1+N / 4-xn1+3N / 4)],n1k1 W
n1=0= X4k1+1N / 4-1
N N / 4Wn1n1k1 W
n1=0= X4k1+3N / 4-1
N N / 4W3n1n1k1 Wn1=0
n1=0=
=X2k1
X2k1+1N / 2-1
N / 2-1N / 2(xn1+xN / 2+n 1),
N N / 2 Wn1(xn1-xN / 2+n 1).n1k1
n1k1W
W
factors
	Even samples X2k in DIF should 
be computed separately from 
other samples 
 With same algorithm (recursively) as 
the original sequence 
 No general rule for odd samples 
 Radix-4 is more efficient than radix-2 
 Higher radices are inefficient 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY]. Look at DIF radix-2 
 Xdont have twiddle2k1 s 
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>2-D view of Cooley-Tukey mapping
 N=15 (N1=3, N2=5)
 Cannot exchange the order of DFTs 
 Because of twiddle multiply 
 Different mapping for N1=5, N2=3 
 Not just transpose 
6.973  Communication System Design 10 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].DFT-3
DFT-3
x0x0
x0x0
x0x3x3
x3x6x6
x6x9x9
x9x9x12x12
x12x12
x1x1x1...............
x1x4x4
x4
x4x7x7
x10x10
x10x13x13
x13x13
x2x2
x2x5x5
x5x5x8x8
x11x11
x11x14x14
x14x14
DFT-5
DFT-5
DFT-5
jmDFT-3
DFT-3DFT-3W
x0x5x10
x1x6x11
x2x7x12
x3x8x13
x4xx9 14
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Using convolution to compute DFTs
 All sub DFTs are prime length
 Rader showed that prime-length DFTs can be 
computed as a result of cyclic convolution
 E.g. length 5 DFT 
Permute last two rows and columns 
Cyclic correlation 
(a convolution with a reversed sequence)
 This is a general result
6.973  Communication System Design 24 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Example
 Results in smallest number of multiplies
6.973  Communication System Design 25 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Discrete Fourier Transform  A review
 Definition 
 {Xk} is periodic 
 Since {Xk} is sampled, {xn} must also be periodic 
 From a physical point of view, both are 
repeated with period N 
 Requires O(N2) operations 
6.973  Communication System Design 2 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Radix 2 and radix 4 algorithms
 Lengths as powers of 2 or 4 are most popular 
 Assume N=2n 
 N1=2, N2=2n-1 (divides input sequence into even and 
odd samples  decimation in time  DIT) 
Butterfly
(sum or difference followed or 
preceeded by a twiddle factor multiply)
 Xm and XN/2+ m outputs of N/2 2-pt DFTs on outputs of 
2, N/2-pt DFTs weighted with twiddle factors 
6.973  Communication System Design 11 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Generalizations
 The inner-most sum has to represent a DFT 
 Only possible if the subset (possibly permuted) 
 Has the same periodic ity as the initial sequence 
 All main classes of FFTs can be cast in the above form 
 Both sums have same periodicity (Goods mapping) 
 No permutations (i.e. twiddle factors) 
 All the subsets have same number of elements m=N/r 
 (m,r)=1  i.e. m and r are coprime 
 If not, then inner sum is one stap of radix-r FFT 
 If r=3, subsets with N/2, N/4 and N/4 elements 
 Split-radix algorithm 
6.973  Communication System Design 5 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Split-radix (DIT SRFFT)
 Dual to DIF SRFFT
 Considers separately subsets {x2i}, {x4i+1} and {x4i+3} 
 Redundancy in Xk, Xk+N/4, Xk+N/2, Xk+3N/4 computation
6.973 Communication System Design 19 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Winograds Fourier Transform Algorithm
	B1xB2 only involves additions 
	D  diagonal (so point multiply) 
	Winograd transform has many more additions than 
twiddle FFTs 
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].27 x10
x5
x0
x3
x6
x9
X9X4X14X8X2X11X5
x12
input additions input additions output additions output additions point wise 
multiplicationN = 3 N = 5 N = 5 N = 3
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Mixed-radix and Split-radix
 Mixed-radix 
 Diferent radices in different 
stages 
 Split-radix 
 Different radices in the same stage 
 Simultaneously on different 
parts of the transform 
 Can achieve lowest number 
of adds and multiplies for 
length 2n inputs 
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].17 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
R2
R4
S-Rx0X0
x4
x8
x12X14X1
X13X3
X15DFT
2/4DFT
8
DFT
4
DFT
4DFT
8DFT
8DFT
2
DFT
4DFT
4
DFT
4
DFT
4
DFT
4X15X1X14X0 x0
X0 x0
X12
x12X1
x8X13
X14x4
X2
X15 x15X3x8
x15
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Fast Fourier Transform: 
Theory and Algorithms
Lecture 8
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Vladimir Stojanovi  
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Cooley-Tukey FFT contd.
can be taken mod N2 
1 1 2 , , nk nk Y Y= 
2. N multplications with twiddle factors 1. N1 DFTs of length N2 
3. N2 DFTs of length N1
6.973  Communication System Design 8
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Just another arrangement of CRT
 
 If we know the residue of some number k modulo 
two coprime numbers N1 and N2 kNk
1 N2
 It is possible to reconstruct k NN12 
 
Nk N = k1 kN = 2
Then 1 2
k N
k
  = t k+ NN 11 2  N2 2 1
12
t11N  = 1and t N N 2 2= 
2 N  1
1
t1 multiplicative inverse of N1 mod N2
t2 multiplicative inverse of N2 mod N1
t1, t2 always exist since N1, N2 coprime (N1,N2)=1
What are t1, t2 for N1=3, N2=5? 
 Reversing N1 and N2
 Results in transposed mapping
6.973
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Chinese Remainder Theorem (CRT) 
Let 
  tk  0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
0
123
456
789
101112
1314 Good's mapping
0
1
23
4
56
7
89
10
1112
13
14 CRT mapping
22 Figure by MIT OpenCourseW .are.</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>DIT radix-2 implementations
 Several different ways 
 Reorder the input data 
 Input samples for inner 
DFTs in subsequent 
locations 
 Results in bit-reversed input, in-order output DIT
 Selectively compute
DFTs on evens and 
odds 
 Perform in-place 
computation 
 Output in bit-reversed order (X3 in position six 
(011-&gt;110))  
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].12 DFT
N = 2DFT
N = 2DFT
N = 2DFT
N = 2X0 X0
X4
X4X1X1
X5
X5X2X2
X6
X6 X3X3
X7 X7DFT
N = 4
{    }w1
8
w2
8
w3
8
Division
into even and 
odd numbered
sequencesDFT of
N / 2Multiplication
by twiddle
factorsDFT of
2DFT
N = 4
{  }x2i
x2i+1
Which type is this implementation? Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Radix-4
 N=4n, N1=4, N2=N/4 
 4 DFTs of length N/4 
 3N/4 twiddle multiplies 
 N/4 DFTs of length 4 
 Cost of length-4 DFT 
 No multiplication 
 Only 16 real additions 
 Reduces the number of stages to log4N 
 Radix-8 can reduce number of operations even more 
6.973 Communication System Design 1
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].6 
DFT
8DFT
8DFT
2
DFT
4DFT
4
DFT
4
DFT
4
DFT
4X15X1X14X0 x0
X0 x0
X12
x12X1
x8X13
X14x4
X2
X15 x15X3x8
x15
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>FFTs with twiddle factors
 Reintroduced by Cooley-Tukey 65
Start from general div ide and conquer 
Keep periodicity compatible with 
periodicity of the input sequence 
Use decimation
almost N1 DFTs of size N2
6.973  Communication System Design 7 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>FFTs without twiddle factors
 Divide and conquer requirements 
 N-long DFT computed from D FTs with lengths that are 
factors of N (allows the inner sum to be a DFT) 
 Provided that subsets Il guarantee periodic xi 
 When N factors into co-prime factors N=N1*N2 
 Starting from any xi form subset with compatible periodicity (the 
periodicity of the subset divides the periodicity of the set) 
{x+ n | n2 = 1,..., N2 1} or x iNn| n1 = 1,..., N1 1} {
iN12 + 21 
 Both subsets have only one common point xi 
 Allows a rearrangement of the input (periodic) vector into a 
matrix with a periodicity in both dimensions (rows and 
columns), both periodicities being comatible with the initial one 
6.973  Communication System Design 
 20 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Impact on DFT
 Formulating the true multi-dimensional transform 
k = N t k+ N t k   NN 11 2 2 2 1 12
 N
6.973 Communication System Design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].23
Xk =  S  x i WN,  k = 0,..., N - 1,
i = 0ik
XN1t1k2 + N2r2k1 =  S    S  x n1N2 + n2N1  W NN2 - 1 N1 - 1
n2 = 0 n1 = 0(n1N2 + N1n2)(N1t1k2+N2t2k1)
WN = W N1N2WN1   = W N1              = W N1N2t2 (N2t2)N1
XN1t1k2 + N2t2k1 =  S    S  x n1N2 + n2N1  WN1      WN2N2 - 1 N1 - 1
n2 = 0 n1 = 0n1k2 n2k2 
         ,
X'k1k2 = X N1t1k2 + N2t2k1x'n1.n2 = x n1N2 + n2N1
X'k1k2  =  S    S  x' n1n2 WN1      WN2n2k2 n1k1N2 - 1 N1 - 1
n2 = 0 n1 = 0DFT
3DFT
5X9
X4
X14
X8
X2
X11
X5x12
x9
x6
x3
x0
x5
x10N - 1
Figure by MIT OCW.True bidimensional transform!
(no extra twiddle factors)
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Decimation in frequency (DIF) radix-2 implementation
 If reverse the role of N1 and N2, get DIF
 N1=N/2, N2=2
6.973  Communication System Design 13 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].DFT
N = 4DFT
N = 2
DFT
N = 2
DFT
N = 2
DFT
N = 2X0 X0
X4X4X1
X1
X5
X5X2X2
X6X6 X3
X3
X7 X7w1
8
w2
8
w3
8
DFT of
2DFT of
N / 2Multiplication
by twiddle
factors{   }x2k
DFT
N = 4
{    }x2k+1n1=0
n1=0=
=X2k1
X2k1+1N / 2-1
N / 2-1N / 2(xn1+xN / 2+n 1),
N N / 2 Wn1(xn1-xN / 2+n 1).n1k1
n1k1W
W
Figure by MIT OpenCourseWare.</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Multi-tone systems (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_3/</lecture_pdf_url>
      <lectureno>L3</lectureno>
      <slides>
        <slide>
          <slideno>20</slideno>
          <text>MMSE DFE
Selects the feedback taps
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 21</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Symbol-by-symbol detection
Suffers significantly from Intersym bol-interference (channel memory), 
so need to remove ISI to get almost AWGN channel
Need to adapt basis functions to th e particular channel, to avoid ISI
Alternatively , use equaliz ation to remove ISI
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 6Bandlimited
channelReceiverx (t)n (t)
Sampler
Estimate of input
symbol at time kInput symbol
at time kxkyk zk
xk +Matched
filterSBS
detectorR mod h(t)
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>ISI channel model
Oversampled channel representation (3x e.g)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 17</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>33
Summary
Bandlimited communication
Block vs. symbol-by-symbol detector
Try to make bandlimited channel look  AWGN
Use complex block detectors to orthogonalize basis functions 
(MAP)
Simplify with equalization+sbs detector
Generate basis functions that dont loose orthogonality when 
passing through frequency select ive channle (multitone modulation)
Equalization
ZFE removes ISI but enhances noise
Trade-off by designing MMSE equalizer
DFE removes trailing ISI without noise enhancement
Multitone
Optimal transmission with proper allocation of energy/dimension 
(waterfilling)
Next  practical loading algorithms and DMT/OFDM, Vector 
codin g
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Water-filling spectrum
Flip the channel and pour in energy like water
Channel
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 29E0E1E2E3
L
g0L
g1L
g3L
g2L
g4L
g5Energy
constant
0 1 2 3 4 5Subchannel
index+ =s2
H2constant .n + =constant nn
nng
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Inter-Symbol Interference (ISI)
0  2  4 6 8 10 12 14 16 1800.20.40.60.81
Symbol timeAmplitudeError!
Middle sample is corrupted by 0.2trailing ISI (from the previous 
symbol), and 0.1leading ISI (from the next symbol) resulting in 
0.3total ISI
As a result middle symbol  is detected in error
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 4</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Gap review
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 263
2.5
2
1.5
1
0.5
0
2 4 6 8 10 12 14 16bits/dimension
SNR (dB)0 dB
3 dB
6 dB
9 dB
Achievable bit rate for various gaps
Illustration of bit rates versus SNR for various gaps.
22b1 (dB)b .5 1 2 3 4 5
SNR for Pe = 10-6 (dB) 8.8
8.8 8.8 8.8 8.8 8.8 8.813.5 20.5 26.8 32.9 38.9
0 4.7 11.7 18.0 24.1 30.1
 (dB)
Table of SNR Gaps for Pe = 10-6.
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Linear equalization
Zero-forcing not good on channels with nulls
Equalizer enhances noise
Remember, Pedepends on both noise and ISI
Balance noise and ISI in the mean-square sense
Minimizing MMSE wrt. Wk
Same as using the orthogonality principle
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 13</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Basic multitone transmission
Each tone sees AWGN channel (no ISI)
N QAM-like symbols (complex)
1 PAM symbol
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 24X0
X1
XN-1
XNj0(t)
j1(t)j0(-t)
j1(-t)
jN-1(t) jN-1(-t)
jN (-t)jN (t)
jp,n(t) = jn(t) * h(t) XX
X
XX
Xe j2pf1t
 
e j2pfN-1t
e j2pfN te-j2pf1t
e-j2pfN-1t
e-j2pfN t

h(t) + +n(t)
p s
h pa l
s i
e tYn = Hn . Xn+ NnY0
Y1
YN-1
YNbits
T=kNT' =kT
N = 2N+ bits.
.
.
bn =  1
2log2   1+SNR n
G( ( jn(t) =      . sinc1
T T((tE
N
C
OD
ERD
E
C
OD
ER
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Bandlimited communication systems
Block detector vs. symbol-by-symbol
Block of K symbols  MKmessages
MAP/ML detector complexity grows exponentially
MKbasis functions (branches in the matched filter)
Sequence detection can bound that growth
Simpler detector is Symb ol-By-Symb ol
Optimal for AWGN channel
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 5Block
Detector
RSBS
detectoryp(t)
yp(t)fk(KT - t)f2(KT - t)f1(KT - t)
X
jp(T - t)t = KT
t = kT, k = 0,...,K - 1Xk k = 0,...,K -1
yp(t)...
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>A bit of history
1948 Shannon constructs capacity bounds
AWGN channel with linear ISI  effectively uses multi-tone 
modulation
Analog multi-tone
1958 Collins Kineplex modem (first voiceband modem)  analog 
multitone
1964 Hols ingers MIT thesis modem that approx imates 
Shannons  water-filling
1967 Saltzberg, 1973 Bell Labs, 1980 IBM 
Digital multi-tone ~ 1990s
DMT for DSL - Major push by pr of. Cioffis group at Stanford
Use DSP power to improve th e robustness and algorithms for 
discrete multi-tone modulation
We will mostly focus on this type of modulation
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 23</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>ZFE vs. MMSE - LE
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 140wQ(e-jwT )WZFE (e-jwT )
WMMSE-LE (e-jwT )
Tp0w
TpSNR
||p||
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Basic multitone modulation
Best performance if basis functions are tailored to the 
channel
Use each tone as a basis function
Each tone transmits narrow QAM signal and satisfies Nyquist
criterion  i.e. no ISI per tone
Put less energy where channel is bad or where there is more noise
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 22
Frequency Frequency Frequency
Frequency Frequency FrequencyBits/chan
Bits/chanBits/chan
Bits/chan RF
xtalkGain
Gain=
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Example  simplified multitone
1+0.9D channel
With gap 4.4 dB
Put unit energy per di mension (simply guessed)
Same as baseband DFE
Data rate 1bit/dimension
Re-calculate the necessary SNR  margin
SNRmfb=10dB
SNRmultitone=8.8dB (with more t ones to better approx no-ISI case)
SNRdfe=7.1dB
Can do even better with multito ne, if allocated energy properly
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 27</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 9Matched Filter Bound
You cant do better with successive 
transmissions than with one-shot
Matched filter collects the pulse energy ||p||2
Then calculate performance as on AWGN
Example  binary transmission
Will use MFB to compare different ISI 
compensation techniques</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Bandlimited channel example
0 2 4 6 8 10-60-50-40-30-20-100
frequency [ GHz]Attenua tion [dB]
0 1 2 300.20.40.60.81
nspulse response Tsymbol=160ps
Low-pass channel causes pulse attenuation and dispersion
Notches cause ripples in time domain
Makes it hard to transmit successive messages
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 3</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Example: ZFE vs. MMSE LE
1+0.9D channel
Equalizer response
zfe
mmse
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 15</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>10
Nyquist criterion  6.011 revisited
A channel specified by pulse response p(t) is 
ISI free if
Nyquist frequency: w=pi/T or f=1/2T
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>X( f )N = 2N
X0
Y0 Y1 Y2X1
f2f1
f2f1X2XN-1
fN-1fNXN
YN-1
fN-1YN
fNH( f )
Y( f )Yn     Hn    Xninput
output.The effect of the channel
Each channel can be treated as AWGN
With only one basis function  hence simple 
symbol-by-symbol detector is optimal
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 25
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Finite length equalizer formulation
Write convolution as multiply with Toeplitz matrix
yk zk xkpw
kkzw Px=
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 18</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Passband channel example
Two-ray wireless channel (multi-path  1+0.9D)
Multi-path creates notching in frequency domain
Just slide the frequency window to bb
Add single-sided noise
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 2</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Water-fill loading algorithms
Rate maximization
Margin maximization
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 30</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Decision feedback equalizer
Feed-forward equalizer
Matched + whitening filter + remove pre-cursor ISI
Feed-back equalizer
Removes trailing ISI
To get w, first puncture the channel matrix to emulate the effect of 
feedback on the equaliz ed pulse response wP
Then, get b from the causal t aps of equalized pulse response wPyk zk xkpw
b
0 2  46810121416
1800.20.40.60.81
Symbol timeAmplitudeFeedback
equalizationxk-
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 20</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Fractional equalizers
Oversampling in the receiver
Can merge matched filter and equalizer
Can reconstruct original signal from oversampled signal 
(as long as original is band-limited)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 16xk + p jp(t)xp,k xp(t)np(t)
yp(t) y(t)Fractionally-spaced equalizer
Wk
gain   Tanti-alias
filter
sample
at times
k(T/l)zkyk
Figure by MIT OCW .
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Rate-adaptive loading
Solve through 
matrix inversion
Solve iteratively
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 31</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>2
Basic equalization concepts
Zero-forcing equalization
Flattens equalized channel transfer function
H(D)=Q(D)*W(D) Wzfe(D)=1/(Q(D)||p||)X=
Channel Q(w) Equalizer W(w) Equalized 
=&gt;Q(D) W(D)kxkxky
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 1</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>6.973 Communication System Design 32
Water-filling example (rate-adaptive)
1+0.9D again (Gap=1, so calculating capacity)
Try 8 dim first
Try 7 dim next
Capacity=1.55bits/dim=&gt;
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Energy1.29
0 1 2 3 4 5 6 7n1.29 1.29 1.29 1.29 1.29
2.9681.24E0E1E1E2E2E3E3
1.23 1.23 1.19 1.19 .96 .96
2.9681.29
1
19.941
17.031
17.031
101
101
.0552
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Mean-distortion
Treat ISI as noise
Peak-distortion
Treat worst-case ISI as constellation offset
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
ISI impact
6.973 Communication System Design 8pulse response p(t)
sample at
times kTdiscrete
time
receiverxkxp,k xp(t)np(t)
yp(t) ykxk y(t)
S
q(t) = jp(t)*jp(-t)||p|| jp(t) jp (-t)
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Find optimum energy allocation that 
maximizes b for given total energy constraint
bis a convex function in energy/dimension
Use Lagrange multipliers to solve for n 
=&gt;d
dn
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 28Water-filling derivation</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Raised-cosine pulses
Can have excess bandwidth as long as 
there is symmetry that fills the aliased 
spectrum flat
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 11</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>ZFE and MMSE solution
Zero forcing equalizer (ZFE)
Minimum-mean square error (MMSE) equalizer
=&gt;()11 1 , 1 [0 0...1...0 0]TT T T
kk k z f e z f e zx w P x w P w P P P
    == = = =
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 19</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.973 Communication System Design  Spring 2006
Massachusetts Institute of Technology
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Bandlimited communication systems
Lecture 3
Vladimir Stojanovi</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Vector channel - revisited
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 7x(t) h(t)
h(t) xknnp (t)
np (t)xp (t)
yp (t)
yp (t)
yp (t)xp (t)xn (t)
np (t)
pn(t)jn(t)
xp (t)
xkn+
+
+
Figure by MIT OpenCourseWare.</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Viterbi algorithm (cont.) (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_14/</lecture_pdf_url>
      <lectureno>L14</lectureno>
      <slides>
        <slide>
          <slideno>0</slideno>
          <text>Viterbi Algorithm - Implementation
Lecture 14
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Vladimir Stojanovi  
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Add-Compare-Select Recursion
Eight state trellis Conventional 
add-compare-select unit 
6.973  Communication System Design 10 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Add-Compare-Select Recursion
Radix-4 
applied to an eight-state trellis add-compare-select unit One step lookahead 
6.973  Communication System Design 14 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Viterbi Decoder
 Implements Viterbi algorithm 
 Three main components 
 Branch metric calculation 
 Path metric accumulation (add-compare -
select recursion) 
 Survivor path decode 
6.973  Communication System Design 6 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Trellis Diagram
 Time-indexed state diagram 
i i+1 i+2 i+3 i+4 
00 
01 
10 
11 0/00 
1/11 0/00 
1/11 
0/11 
1/00 
6.973  Communication System Design 4 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Calculating Branch Metrics
 Assume G1 and G2 both output a 0 
 Soft decoder inputs are 0.1 and 0.25 instead 
 Branch metrics: 
 bm00 = |0  0.1| + |0  0.25| = 0.35
 bm01 = |0  0.1| + |1  0.25| = 0.85
 bm10 = |1  0.1| + |0  0.25| = 1.15
 bm11 = |1  0.1| + |1  0.25| = 1.65
6.973 Communication System Design 
 8 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Calculating Branch Metrics
 Euclidean distances (AWGN channel) 
 bmi = (yk  sk)2 
 sk are usually integers 
bmi = yk 2 -2Ciyk + Ci 2 
	Since yk terms are common to all branch 
metrics they drop out in ACS comparison, 
and can be eliminated. 
	Ci 2 are precomputed and 2 Ciyk are shifts and 
adds. 
6.973  Communication System Design 9 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Bit-level view
MSB
LSB
6.973  Communication System Design 18 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 
Figure from Fettweis, G., and H. Meyr. "High-speed Parallel Viterbi Decoding: Algorithm and VLSI-architecture."
IEEE Communications Magazine 29 (1991): 46-55. Copyright 1991 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>The Viterbi Algorithm 
 Illustrated by 2-state trellis 
sm1n1 sm1nbm1 
bm2 bm3 
sm2n1 bm4 sm2n 
tn1 tn time 
sm1n = min (sm1n1 + bm1, sm2n1 + bm3) 
sm2n = min (sm1n1 + bm2, sm2n1 + bm4) 
Add Add 
Select Compare 
6.973  Communication System Design 5 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Add-Compare-Select Recursion
Time
Bit 
1 2 3 4 5 6 7 0 Select Register 
Register Add 
C C C C C C C C 
6.973  Communication System Design 
 13 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Decisions at Each Step
00 
01 
10 
11 
State (path) 
metrics Branch 
metrics i i+1 i+2 	In Gaussian channel: 
bm = (yk  sk)2 
 In BSC:
bm = dH(yk, sk) = |yk 
sk|
dH is Hamming distance 
	If received yk = 10 
dH(10, 00) = 1 
dH(10, 01) = 2 
6.973  Communication System Design 3 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Viterbi Decoder
D 
Branch 
metr ics 
unit Add-
Compare-
Select Survivor 
path 
decode Inputs Decoded bits 
 Branch metrics unit 
 Calculates the distances between the received signal
and the ideal signals 
 Add-Compare-Select unit 
 Accumulates path metrics 
 Survivor path decode 
 Keeps track of the path through the trellis 
6.973  Communication System Design 7 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>References
	Slides from Borivoje Nikolic and Bob Brodersen 
	G. Fettweis and H. Meyr "High-speed parallel 
Viterbi decoding: algorithm and VLSI-
architecture," Communications Magazine, IEEE
vol. 29, no. 5, pp. 46-55, 1991.
6.973  Communication System Design 21 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Add-Compare-Select Recursion
Adder 
Adder 
Subtractor 
2:1 Multiplexer 
Register sm1 sm2 
bm1 
bm2 
MSB 
Decision 
New Sta te Metric 5 
5 8 8 
8 8 
8 
6.973  Communication System Design 11 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/)
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].,</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Turn into forward path and pipeline 
6.973  Communication System Design 19 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY]. 
Figures from Fettweis, G., and H. Meyr. "High-speed Parallel Viterbi Decoding: Algorithm and VLSI-architecture."
IEEE Communications Magazine 29 (1991): 46-55.   Copyright 1991 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>6.973  Communication System Design 17 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].
 
Figure from Fettweis, G., and H. Meyr. "High-speed Parallel Viterbi Decoding: Algorithm and VLSI-architecture."
IEEE Communications Magazine 29 (1991): 46-55. Copyright 1991 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>2-state example
6.973  Communication System Design 16 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].
 
Figure from Fettweis, G., and H. Meyr. "High-speed Parallel Viterbi Decoding: Algorithm and VLSI-architecture."
IEEE Communications Magazine 29 (1991): 46-55. Copyright 1991 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Add-Compare-Select Recursion
sm3 sm1 sm2 sm4 
8
 8
 8
 8
bm1 
Adder 
5
bm2 
5
bm3 4-way ACS: 
5
2 additions + bm4 
6 comparisons 5
6.973  Communication System Design Decision 8
 New Sta te Metric Adder
 Subtrac tor 
4:1 Multipl exer 
Register MSB Adder
 Subtrac tor
 Subtrac tor 
Select MSB 
MSB Adder
 Subtrac tor
 Subtrac tor
 Subtrac tor MSB 
MSB MSB 
Inhibit sm3 
Inhibit sm48 8 8 8 
15 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Convolutional Codes
 Adding redundancy 
D D + 
+ di di-1 di-2 Channel 
0110 1+D2 
1+D+D2 0111 
0100 (00, 11, 10, 10) 
 Generators:
G1 = 101
G2 = 111
6.973  Communication System Design 2 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Add-Compare-Select Recursion
bm2 
sm2 
0 
bm1 
0 
sm1 
0 0 sm2 
1 bm2 
1 sm2 
2 bm2 
2 sm2 
3 bm2 
3 sm2 
4 bm2 
4 sm2 
5 sm2 
6 sm2 
7 
+ + 
+ + 
+ + 
+ + 
+        
+
++
++
++
sm1 
4 
bm1 
1 bm1 
2 bm1 
3 bm1 
4 sm1 
5 sm1 
6 sm1 
7 diff 
sm 
7 
sm 
6 
sm 
5 
sm 
4 
sm 
3 
sm 
2 
sm 
1 
sm 
0 
6.973  Communication System Design 12 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Add-Compare-Select Recursion
Parallel compare-select-add unit 
6.973  Communication System Design 20 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. MIT OpenCourseWare (http://ocw.mit.edu/), 
Massachusetts Institute of Technology. Downloaded on [DD Month YYYY].</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Course overview (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_1/</lecture_pdf_url>
      <lectureno>L1</lectureno>
      <slides>
        <slide>
          <slideno>12</slideno>
          <text>6.973 Communication System Design 13
Assignments and grades
Exams are take home (little math, mostly Matlab)
Exam 1 - 15%
Exam 2 - 15%
No collaboration
Homeworks
Three major, 15% each
FFT, Viterbi, Synchronization and Channel Estimation
Collaboration is o.k. but need to design everything yourself
Three minor, 5% each
Equalization and multi-tone, 802.11a behav ioral, Bluespec
No collaboration
Final presentation and writeup, 10%
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>3
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesigncoderFilter/
Modula tor Channel decoderFilter/
Demod ulator
TimingSynchroni zerInner Tx Outer Tx Inner Rx Outer Rx
DQ
ClkLogic ADQ
ClkLogic BDQ
ClkDQ
ClkLogic A
DQ
ClkLogic ALogic B
Logic BDQ
ClkLogic ADQ
ClkLogic BDQ
ClkDQ
ClkLogic A
DQ
ClkLogic ALogic B
Logic BTheory
Algorithm
Arc hitecture
Gate Level
Physical Design
Image removed due to copyright restrictions.
Very complicated  so divide &amp; conquer</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>6.973 Communication System Design 15
Recommended readings
Posted on the web site (stellar)
Recommended books on reserve in Barker
Papers
802.11a implementations
FFT
Viterbi algorithm
Convolutional codes and Trellis coded modulation
Synchronization
Block codes (if time permits)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>10
Logic synthesis with Design Vision
Behavioral to structural RTL
Makes Bluespec generated Verilog RTL more compac
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design t 
Image removed due to copyright restrictions. 
Screenshot of "Design View" program.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Courses usually follow the hierarchy
Not a bad thing
Get a lot of depth
But, loose the big picture
Rarely get a chance to look at the whole system
With todays tight energy and performance specs
Need to optimize the whole system
Need to know and work ACROSS the hierarchy
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 4</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Place and route (Encounter)
Synthesized structural RTL to placed and routed design
et area, power and timing estimates
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 11GImage removed due to copyright restrictions.
 Screenshot of "Encounter" program.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>6.973 Communication System Design 14
Similar course is 6.375
Uses same tool-flow (Bluespec to gates)
Does not use VppSim
Have to write your own test harnesses
More focused on hardware
Doesnt offer the vertical view
You can choose your own project
Not a bad idea to listen to lectures in one or 
the other course
Well share the lab with 6.375 people
Lectures MWF 2:30-4
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>6.973 Communication System Design 5
In 6.973 well try to cut ACROSS
Project driver  Wi-Fichip
coderIFFT/
Modula tor ChannelViterbi
decoderIFFT/
Demod ulator
TimingSynchroni zerTheory/
AlgorithmChan nel E st.
Arc hitecture
Gate Level
Physical 
Design
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>6.973 Communication System Design 2
Communication systems are ubiquitous
http://www.aradial.com/images/hotspots.jpg
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Courtesy of Aradial Technologies. Used with permission.</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Class logistics
Lectures
M,W 1-2:30pm
Prerequis ites: 6.011 and 6.111
Units: 3-1-8, 6 EDPs (H level)
Contact:
Professor Vladimir Stojanovi 
TA Steven Gerding
Office hours after the lecture and tutorials
Tutorials
On Fridays 1:00-2:30pm  first six weeks

Design lab
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 12CppSim, Verilog, 802.11a Arch, Bluespec, Design Flow 1 &amp; 2</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>6.973 Communication System Design 16
For Friday
Read the CppSim primer 
Start reading Chapter 1 in Digital 
Communications reader posted online
CppSim tutorial will be this Friday Feb. 10
Tutorials are hands-on
Highly advise you attend
Will save you a ton of time later
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>6.973 Communication System Design 6
Communication theory view
coderIFFT/
Modula tor ChannelViterbi
decoderIFFT/
Demod ulator
TimingSynchroni zerTheory/
AlgorithmChan nel E st.
Multitone modulations
Convolutional/Block coding and Viterbi/RS decoding
Synchronization  tracking loops
Channel Estimation
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>6.973 Communication System Design 9
VppSim project snapshot
Cadence schematic editor
Block modules written in C++ or Verilog
Co-simulation C++/Verilog
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>6.973 Communication System Design 7
Implementation view - Architecture
FFT
Radix 2,4,8
Viterbi
ACS - radix 2,4
Traceback vs. Reg. ExchSynchronization
Correlators
CORDIC
Tracking loops
Channel Estimation
Equalization
Mean-square
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.973 Communication System Design  Spring 2006
Massachusetts Institute of Technology
Modern Communication System Design: 
Course Overview
Lecture 1
Vladimir Stojanovi 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>6.973 Communication System Design 8
Our ASIC design flow
Behavioral Simulator
VppSim
(c++, Verilog views)Archit ecture specif ication
Blue Spec
(System Verilog)
Compiled gate level 
(Verilog)
Synthe sis
(Design Vision)
Place and route
(Encounter)Power, 
Area,
TimingBlock Verif ication,
Performance est imation
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Bluespec&#8482; overview (PDF) (Courtesy of Arvind. Used with permission.)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_7/</lecture_pdf_url>
      <lectureno>L7</lectureno>
      <slides>
        <slide>
          <slideno>18</slideno>
          <text>March 1, 2006 L-19
IFFT Requirements
802.11a needs to process a symbol in 4 sec
(250KHz)
IFFT must outpu t a symbol every 4 sec
i.e. perform an Inverse FFT of 64 complex numbers
Each module before IFFT must process every 4 sec
1 frame for 6 Mbps rate
2 frames for 12Mbp s rate
4 frames for 24Mbp s rate
Even in the worst case (24Mbps) the clock frequency 
can be as low as 1Mhz.
But what about the area &amp; power?
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>March 1, 2006 L-15
Generated Hardware Module
x_en y_enx y
&gt; !(=0)
swap? subtract?subx
y
wen
rdy
x
rdy
start resultstart_en start_en
x_en = swap? OR start_e n
y_en = swap? OR subt ract? OR start_en
rdy = (y==0)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>March 1, 2006 L-14
Generated Hardware
next s tate values
predicatesx_en y_enx y
&gt; !(=0)
swap? subtract?subx
y
wen
rdy
x
rdy
start result
x_en = swap?
y_en = swap? OR subt ract?
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>March 1, 2006 L-20
Area-Frequency Tradeoff
We can decrease the area by multiplexing some 
circuits and running the system at a higher frequency
Reuse 
Twice the frequency 
but half the area
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>March 1, 2006 L-6
Bluespec promotes composition
through guarded interfaces
theModuleA
not full
not empty
not emptyn
nrdyenab
rdyenab
rdy
enq deq firstFIFO theModuleBtheFifo.enq(value1);
theFifo.deq();
value2 = theFifo.first();
theFifo.enq(value3);
theFifo.deq();
value4 = theFifo.first();theFifoEnqueue
arbitration 
control
Dequeue
arbitration 
controlSelf-documenting 
interfaces; 
Automatic generation 
of logic to eliminate 
conflicts in use.
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>MBluespec Sys temVerilog source
Bluespec Compiler
Blueview C Verilog 95 RTL
Cycle Bluespec C sim Verilog sim RTL synthesisAccurate
VCD output gates
LegendDebussy
filesVisualization
Bluespec tools
3rdparty toolsarch 1,  2006 L-12
Bluespec Tool flow
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY]..files
Bluespec tools
3rdparty tools</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>March 1, 2006 L-35
Synthesis results 
Nirav Dave &amp; Mike Pellauer
Design Area (mm2)CLK Period Throughput 
(1 symbol)  
15 ns 15ns
7 ns
24 ns
408 ns7 ns
8 ns
8 ns1.03
1.46 
0.83
0.23Comb.
Pipelined
Circula r
1 RadixLatency
15 ns
21 ns
24 ns
408 ns
TSMC .13 micron; numbers report ed are before place and route.
Single radix-4 node desi gn is  the size of combination design 
but still meets the thro ughput requirement easily; clock can 
reduc ed to 15 to 20 Mhz
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>March 1, 2006 L-25
Bluespec code for pure 
Combinational Circuit continued
// (* continued from previous *)
stage12_out = stage12_permuted; //Later implementations will change this
//Radix 4 stage 2 (unpermuted)
for(Integer i = 0; i &lt; 16; i = i + 1)
begin
Integer idx = i * 4;
lettwid1 = getTwiddl e(1, fromInteger(i));
match{.y0, .y1, .y2, .y3} = radix4(twid1,
stage12_out[idx], stage12_out[idx + 1],
stage12_out[idx + 2], st age12_out[idx + 3]);
stage23_data[idx] = y0;     stage23_data[idx + 1] = y1;
stage23_data[idx + 2] = y2; stage23_data[idx + 3] = y3;
end
//Stage 2 permutation
for(Integer i = 0; i &lt; 64; i = i + 1)
stage23_permuted[i] = stage23 _data[permute64_2to3[i]];

//Repeat for Stage 3

returnstage3out_permuted;
endfunction
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>March 1, 2006 L-16
Design a 802.11a Transmitter
802.11a is an IEEE Standard for wireless 
communication 
Frequency of Operation: 5Ghz band
Modulation: Orthogonal Frequency Division Multiplexing (OFDM)
Transmitter
ReceiverChannelTX MAC
Analog
RXAnalog
TX
RX MAC
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>interfacemodule
Marc
Bluespec:  State and Rules 
organized into modules
All state (e.g., Registers, FIFOs, RAMs, ...) is explicit.
Behavior is expressed in terms of at omic actions on the state:
Rule: condition action
Rules can manipulate state in other modules only via their 
interfaces.Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.h 1, 2006  Downloaded on [DD Month YYYY]. L-8</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Mar
In Bluespec SystemVerilog (BSV) 
ch 1, 2006 L-7
Power to express complex static 
structures and constraints
Checked by the compiler
Micro-protocols are managed by the compiler
The compiler generates the necessary 
hardware (muxing and control)
Micro-protocols need less or no verification
Easier to make changes while 
preserving correctness
Smaller, simpler, clearer, more correct code
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>March 1, 2006 L-33
Bluespec Code for Extreme 
reuse
modulemkIFFT_SuperCircular (I_IFFT);
SVector#(64, Complex) in_ data = newSVector();
SVector#(64, Complex) stage_data = newSVector();
SVector#(64, Complex) per mutedV  = newSVector();
//State
Reg#(SVector#(64, Complex)) data_ reg &lt;-mkReg(newSVector());
Reg#(SVector#(64, Complex)) post_ reg &lt;-mkReg(newSVector());
Reg#(Bit#(2)) stage_count er &lt;-mkReg(0);
Reg#(Bit#(5)) idx_counter  &lt;-mkReg(16);
FIFO#(SVector#(64, Complex)) in_fifo &lt;- mkFIFO();
//Read input
in_data = data_reg; 
//Do one-sixteenth of a Rad ix 4 stage (unpermuted)
Bit#(6) idx = {idx_counter, 2'b00}; //idx = idx_counter * 4
//Use DYNAMIC select and update of the Vector
let twid = getTwiddle(stage_counter, idx_counter);
match{.y0, .y1, .y2, .y3} = radix4(twid,
select(in_data, idx), select( in_data, idx + 1),
select(in_data, idx + 2), sel ect(in_data, idx + 3));
//generates post_reg after writing in the 4 new values
letstage_data0 = post_reg;
letstage_data1 = update(stage_data, idx, y0);
letstage_data2 = update(stage_da ta1,idx + 1, y1);
letstage_data3 = update(stage_da ta2,idx + 2, y2);
stage_data = update(stage_data3,idx + 3, y3);
//Continued
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>March 1, 2006 L-3
Typical SOC Architecture
For example: Cell phone
Hardware/software 
development needs to 
be tightly coupled in 
order to meet 
performance/power/ 
cost goals
System validation for 
functionality and 
performance is very 
difficult
Stable platform for 
software development
IP block reuse is essential to mitigate 
development costs
IP = Intellectual Property
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>March 1, 2006 L-21
Combinational IFFT
in0
in1
in2
in63in3
in4Radix 4
Radix 4
Radix 4x16Radix 4
Radix 4
Radix 4Radix 4
Radix 4
Radix 4out0
out1
out2
out63out3
out4
Permute_ 1Permute_ 2Permute_ 3
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>March 1, 2006 L-17
Transmitter Overview
Controller Scrambler Encoder
Interleaver Mapper
IFFTCyclic
Extendheaders
data
IFFT Transforms 64 (frequency domain) 
complex numbers into 64 (time domain) 
complex numberscompute intensive
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>March 1, 2006        L-1
Architecture exploration in 
Bluespec
Arvind 
Computer Science &amp; Artificial In telligence Lab
Massachusetts Institute of Technology
Guest Lecture 6.973 (lecture 7)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.                                                                            Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>March 1, 2006 L-4
IP re-use sounds great until 
you start to use it...
data_in
push_req_n
pop_req_n
clk
rstndata_out
full
empty
Example: C ommercially available 
FIFO IP blockNo ma
chine 
ver
ification of such informa
l constraints is fea
sible
These constraints are spread over many pages of 
the documentation...
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>March 1, 2006 L-11
rdyenabint
int
rdy
start result
GCD
moduleint
y == 0
y == 0implicit 
conditions
interface I_GCD;
methodAction start (int a, int b);
methodint result();
endinterfaceGCD Hardware Module
t
#(type t)t
t
t t
tIn a GCD call t
could be
Int#(32),
UInt#(16),Int#(13), ...
The module can easily be made polymorphic
Many different implementations can provide the same 
interface: module mkGCD (I_GCD)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>March 1, 2006 L-13
Generated Verilog RTL: GCD
module mkGCD(CLK,RST_N,start_a ,start_b,EN_start,RDY_start,
result,RDY_result);
input  CLK; input  RST_N;
// action method start
input [31 : 0] start _a; input [31 : 0] st art_b; input EN_st art;
output RDY_start;
// value method result
output [31 : 0] result; output RDY_result;
// register x and y
reg[31 : 0] x;
wire[31 : 0] x$D_IN; wire x$EN;
reg[31 : 0] y;
wire[31 : 0] y$D_IN; wire y$EN;
...
// rule RL_subtract
assign WILL_FIRE_RL_subtract = x_SLE_y___d3 &amp;&amp; !y_EQ_0___d10 ;
// rule RL_swap
assign WILL_FIRE_RL_swap = !x_SLE_y___d3 &amp;&amp; !y_EQ_0___d10 ;
...
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>March 1, 2006 L-29
Circular pipeline: Reusing the 
Pipeline Stage
in0
in1
in2
in63in3
in4out0
out1
out2
out63out3
out4Radix 4
Radix 4Permute_1 Permute_2 Permute_3Stage 
Counter16 Radix 4s can be 
shared but not the three 
permutations. Hence the 
need for muxes64, 4-way 
Muxes
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>March 1, 2006 L-27
Bluespec code for Pipeline 
Stage
modulemkIFFT_Pipelined() (I_IFFT);
//Declare vectors
SVector#(64, Co mplex) in_data;
SVector#(64, Complex) stage 12_data = newSVector();

//Declare FIFOs
FIFO#(SVector#(64, Compl ex)) in_fifo &lt;-mkFIFO();
//Declare pipe line registers
Reg#(SVector#(64, Complex)) stage1 2_reg &lt;- mkReg(newSVector());    
Reg#(SVector#(64, Complex)) sta ge23_reg &lt;- mkReg(newSVector());
//Read input
in_data = in_fifo.first();
//Radix 4 stage 1 (unpermuted)
for(Integer i = 0; i &lt; 16; i = i + 1)
begin
Integer idx = i * 4;
wlettwid0 = getTwiddle(0,  fromInteger(i));
wmatch{.y0, .y1, .y2, .y 3} = radix4(twid0,
in_data[idx], in_data[idx + 1],
//Continue as before
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>March 1, 2006 L-30
Bluespec Code for Circular 
Pipeline
modulemkIFFT_Circular (I_IFFT);  
SVector#(64, Complex) in_data = newSVector();
SVector#(64, Complex) st age_data = newSVector();
SVector#(64, Complex) stage _permuted = newSVector();
//State elements
Reg#(SVector#(64, Complex)) d ata_reg &lt;-mkReg(newSVector());
Reg#(Bit#(2)) sta ge_counter &lt;-mkReg(0);
FIFO#(SVector#(64, Compl ex)) in_fifo &lt;-mkFIFO();
//Read input
in_data = data_reg;
//Perform a single Radix  4 stage (unpermuted)
for(Integer i = 0; i &lt; 16; i = i + 1)
begin
Integer idx = i * 4;
let twid = getTwiddle( stage_counter , fromInteger(i)); 
match{.y0, .y1, .y2, .y3} = radix4(twid, 
in_data[idx], in_data[idx + 1],
in_data[idx + 2], in_data[idx + 3]);    
stage_data[idx] = y0;     stage_data[idx + 1] = y1;
stage_data[idx + 2] = y2; stage_data[idx + 3] = y3;
end
//Continued
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>March 1, 2006 L-9
Programming with
rules: A simple example
Euclids algorithm for computing the 
Greatest Common Divisor (GCD):
15 6
96 subtract
36 subtract
63 swap
33 subtract
03 subtract answer:
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>March 1, 2006 L-23
Bluespec code: Radix-4 Node
function Tuple4#(Complex, Complex,  Complex, Complex) 
radix4(Tuple4#(Complex, Complex,  Complex, C omplex) twids, 
Complex k0, Complex k1,  Complex k2, Complex k3);
match{.t0, .t1, .t2, .t3} = twids;
Complex m0 = k0 * t0; Co mplex m1 = k1 * t1; 
Complex m2 = k2 * t2; Complex m3 = k3 * t3;
Complex y0 = m0 + m2; Co mplex y1 = m0 - m2; 
Complex y2 = m1 + m3; Complex y3 = m1 - m3;
Complex y3_j = Complex { i: negate(y3.q), q: y3.i};
Complex z0 = y0 + y2; Co mplex z1 = y1 - y3_j;
Complex z2 = y0 - y2; Complex z3 = y1 - y3_j;
returntuple4(z0, z1, z2, z3);
endfunction
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>March 1, 2006 L-2
Chip design has become 
too risky a business
Ever increasing size and complexity
Microprocessors: 100M gates 1000M gates
ASICs: 5M to 10M gates  50M to 100M gates
Ever increasing costs and design team sizes
&gt; $10M for a 10M gate ASIC
&gt; $1M per re-spin in case of an error (does not 
include the redesign costs, which can be substantial)
18 months to design but o nly an eight-mon
th selling opportunity in the market
Fewer new chip-starts every year
Looking for alternatives, e.g., FPGAs
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>March 1, 2006 L-10
GCD in BSV
modulemkGCD (I_GCD);
Reg#(int) x &lt;- mkRegU;
Reg#(int) y &lt;- mkReg(0);
ruleswap ((x &gt; y) &amp;&amp;  (y != 0));
x &lt;= y;  y &lt;= x;
endrule
rulesubtract ((x &lt;= y) &amp;&amp; (y != 0));
y &lt;= y  x;
endrule
method Action start(int a, int b) if(y==0);
x &lt;= a;  y &lt;= b;
endmethod
methodint result() if(y==0);
returnx;
endmethod
endmoduleInternal
behavior
External
interfaceState
typedef int Int#(32)
Assumes x /= 0 and y /= 0x y
swap sub
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>March 1, 2006 L-31
Bluespec Code for Circular 
Pipeline
//Stage permutation
for(Integer i = 0; i &lt; 64; i = i + 1)
stage_permuted[i] = case(stage_counter)
0: returnin_wire._read[i];
1: returnstage_data[permu te64_1to2[i]];
2: returnstage_data[permu te64_2to3[i]];
3: returnstage_data[permu te64_3toOut[i]];
endcase;
rulewriteRegs (True);
data_reg &lt;= stage_permuted;
stage_counter &lt;= stage_counter + 1;
endrule
methodAction inp(SVecto r#(64, Complex) data) if(stage_counter == 0);
in_fifo.enq(data);
stage_counter &lt;= 1;
endmethod

endmodule
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>March 1, 2006 L-5
New semantics for expressing behavior 
to reduce design complexity 
Decentralize complexity: Rule-based 
specifications (Guarded Atomic Actions)
Let us think about one ruleat a time
Formalize composition: Modules with 
guarded interfaces
Automatically manage and ensure the 
correctness of connectivity, i.e., correct-by-
construction methodology
Retain resilience to changes in design or 
layout, e.g. compute latency s
Promote regularity of layout at macro level
Bluespec
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>March 1, 2006 L-37
Two circular pipelines
StartInputDataQ OutputDataQ
16-Node
StageData and
Twiddle
Setup
Data and
Twiddle
SetupInputDataQ OutputDataQ
16-Node
Stage
Steve Gerding, Elizabeth Basha &amp; Rose Liu
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>March 1, 2006 L-34
Bluespec Code for Extreme 
reuse-2
//Permutation is base d on the current stage
for(Integer i = 0; i &lt; 64; i = i + 1)
permutedV[i] = case(stage_counter)
1: returnpost_reg [permute64_1to2[i]];
2: returnpost_reg [permute64_2to3[i]]
3: return
post_reg[permute64_3toOut[i]];
default: return in_fifo.first()[i];
endcase;
rulewriteRegs (stage_counter != 0);
post_reg &lt;= stage_data; 
if (idx == 16)
data_reg &lt;= permutedV;
idx_counter &lt;= (idx_counter == 16) ? 0: idx_counter + 1;
if (idx_counter == 16)
stage_counter &lt;= stage_counter + 1;
endrule
//Everything else as before
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>March 1, 2006 L-28
Bluespec code for Pipeline 
Stage

//Read from pipe regi ster for stage 2
stage12_out = stage12_reg;
//Radix 4 stage 2 (unpermuted)
for(Integer i = 0; i &lt; 16; i = i + 1)

//Read from pipe regi ster for stage 3
stage23_out = stage23_reg;
rulewriteRegs (True);
stage12_reg &lt;= stage12_permuted;
stage23_reg &lt;= stage23_permuted;
in_fifo.deq(); out_fifo.e nq(stage3out_permuted);
endrule
methodAction inp (Vector#(64, Complex) data);
in_fifo.enq(data);
endmethod

endmodule
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>March 1, 2006 L-18
Receiver Overview
Synchronizer FFTSerial to 
Parallel
Detector /
DeinterleaverViterbi Controller
DescramblerFFT, in half 
duplex system is 
often 
shared with
IFFT
compute intensive
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>March 1, 2006 L-36
Synthesis results 
Steve Gerding, Elizabeth Basha &amp; Rose Liu
Design Area (mm2)CLK Period Throughput 
(1 symbol)  
63 ns 63 ns
90 ns
99 ns30 ns
33 ns29.12
5.19
4.57Comb.
Circula r-
2stages
Circula rLatency
63 ns
180 ns
99 ns
TSMC .13 micron; numbers reported are after place and route
Two stage circular pipeli ne desi gn is not good. 
Circula r pipeline design can m eet the throughput requirement 
at 750KH z!
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>March 1, 2006 L-24
Bluespec code for pure 
Combinational Circuit
function SVector#(64, Complex) ifft (SVector#(64, Complex) in_data);
//Declare vectors
SVector#(64, Complex) stage12_d ata = newSVector();
SVector#(64, Complex) s tage12_permuted = newSVector();
SVector#(64, Complex) stage12_o ut = newSVector();
SVector#(64, Complex) stage23_d ata = newSVector();

//Radix 4 stage 1 (unpermuted)
for(Integer i = 0; i &lt; 16; i = i + 1)
begin
Integer idx = i * 4;
lettwid0 = getTwiddl e(0, fromInteger(i));
match{.y0, .y1, .y2, .y3} = radix4(twid0, 
in_data[idx], in_data[idx + 1],
in_data[idx + 2], in_data[idx + 3]);
stage12_data[idx] = y0;     stage12_data[idx + 1] = y1;
stage12_data[idx + 2] = y2; stage12_data[idx + 3] = y3;
end
//Stage 1 permutation
for(Integer i = 0; i &lt; 64; i = i + 1)
stage12_permuted[i] = stage12_data[permute_1to2[i]];
//Continued on next slide
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>March 1, 2006 L-22
Radix-4 Node
*
**
*+
--
++
--
+
* jk0 out0
k1
k2
k3
twid3twid2twid1twid0
out1
out2
out3
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>March 1, 2006 L-26
Pipelined IFFT
in0
in1
in2
in63in3
in4Radix 4
Radix 4
Radix 4x16Radix 4
Radix 4
Radix 4Radix 4
Radix 4
Radix 4out0
out1
out2
out63out3
out4
Permute_ 1Permute_ 2Permute_ 3
Put a register to hold 64 complex numbers at the output of 
each stage.
Even more hardware but clock can go faster  less 
combinational circuitry between two stages 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>March 1, 2006 L-32
Just one Radix-4 node!
in0
in1
in2
in63in3
in4out0
out1
out2
out63out3
out4Radix 4Permute_1 Permute_2 Permute_3Stage 
Counter 
0 to 2Index 
Counter 
0 to 1564, 4-way 
Muxes
4, 16-way 
Muxes4, 16-way 
DeMuxes
The two stage 
registers can be folded into one
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Viterbi algorithm (cont.) (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_15/</lecture_pdf_url>
      <lectureno>L15</lectureno>
      <slides>
        <slide>
          <slideno>18</slideno>
          <text>A 64-state example
 Not fully parallel (8 radix-4 ACS units) 
 2 radix-4 butterflies in each cycle 
 8 cycles for 64 states radix-4 (i.e. two radix-2 steps) 
6.973 Communication System Design 19 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Images removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Readings
	[1] A.P. Hekstra "An alternative to metric rescaling in Viterbi
decoders," Communic ations, IEEE Transactions on vol. 37, no. 
11, pp. 1220-1222, 1989. 
	[2] P.J. Blac k and T. H. Meng "A 140-Mb/s, 32-state, radix-4 
Viterbi decoder," Solid-State Circ uits, IEEE Journal of vol. 2 7, 
no. 12, pp. 1877-1885, 1992. 
	[3] P.J. Blac k and T.Y. Meng "A 1-Gb/s, four-state , sliding block 
Viterbi decoder," Solid-State Circ uits, IEEE Journal of vol. 3 2, 
no. 6, pp. 797-805, 1997. 
	[4] M. Anders, S. Mathew, R.  Krishnamurthy and S. Borkar "A 
64-state 2GHz 500Mbps 40mW Viterbi accelerator in 90nm 
CMOS," VLSI Circuits, 2004. Digest of Technical Papers. 2004 
Symposium on , pp. 174-175, 2004. 
6.973  Communication System Design 20 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 20
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].06.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Forward vs. Forward-Backward
 Can decode more than one state (M  states)
 Fw-Bw has reduced decoding delay and skew buffer memory
6.973  Communication System Design 14 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Radix-4 ACS implementation
	Use ripple carry adders and 
comparators 
 Take advantage of the ripple 
profile to hide the compare
 Delay 17% longer than 2-way 
ACS due to
 Increased adder fanout
 4:1 mux instead of 2:1 mux
 Overall, results in 1.7x 
speedup compared to 2-way 
ACS 
6.973  Communication System Design 5 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from from Black, P. J., and T. H. Meng. "A 140-Mb/s, 32-state, Radix-4 Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 27 (1992): 1877-1885. Copyright 1992 IEEE. Used with permission.Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>ACS units
6.973  Communication System Design 18 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figures from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Continuous stream processing
 
 
 Cut the incoming stream in overlapping chunks 
Process in parallel 
Outputs are non-overlapping 
6.973 Communication System Design 15 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>3 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Radix-4 trellis
8-state Radix-2 trellis   4-stat e subtrellis 8-state Radix-4 trellisFigure by MIT OpenCourseWare.0n - 2 n - 2 n - 2 n n n n - 1 n - 1
1 1 1
1 11 1 1 2
2
222
2
3 3 3
3 33 3
34 4 4 4 4
5 5 55
5 55 5
6 6 6
7 7 7 7 7 7 7 72 2 4
6
6 66
64 40 0 0 0 0 0 0
2RadixIdeal
speedupRadix - 2k complexity speed measures
Complexity
increaseArea 
efficiency k
1 1 1 1
1
0.75
0.52 2
3 32 4
4 44 8
8 16Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Radix-4 placement and routing
 Paths given as Hamiltonian cycles (visit each node 
in the graph once) 
6.973  Communication System Design 6 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Images removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Decoder block diagram
6.973  Communication System Design 10 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.Decoder output
Decoder inputs2 x 3 G1, G2G1, G24 x 4 4 x 4
2 x 3Radix-16 trace-back unit
Radix-4 pretrace-back unitDecision memory
Radix-4 ACS array
Radix-4 branch metric unit
Metrics Metrics
Radix-2 BMU Radix-2 BMU32 x 4 Radix-16 decisions
32 x 4 Radix-16 decisions
32 x 2 Radix-4 decisions
16 x 5 MetricsLIFO4
4 Decisions</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Branch metric unit
 Example (8-level soft input, R=1/2, K=6 (32 state) 
 (S1S2)=|G1-S1|+|G2-S2| (G-received sample, S-expected 
sample) ( max=14) 
 4 bits required for radix-2 branch metrics 
 5 bits for the radix-4 branch metrics 
6.973  Communication System Design 8 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Images removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Radix-4 ACS
Radix-4 trellis 4-way ACS Radix-4 ACS unit
6.973  Communication System Design 4
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].nx00 00 lnx00 00 lnx00 01 lnx00 10 lnx00 11 l
nx01 00 lnx01 01 lnx01 10 lnx01 11 l
nx10 00 lnx10 01 lnx10 10 lnx10 11 l
nx11 00 lnx11 01 lnx11 10 lnx11 11 lnx00 01 l
nx00 10 l
nx00 11 lGx00
n 
Gx01
n 
Gx10
n 
Gx11
n Gx0 0
n - 2
Gx1 0
n - 2
Gx0 1
n - 2
Gx1 1
n - 2Gx0 0
n - 2Gx0 0
nn
Gx1 0
n - 2Gx1 0
n
Gx0 1
n - 2Gx0 1
n
Gx1 1
n - 2Gx1 1
n
Gx1 1
n - 2Gx0 1
n - 2Gx1 0
n - 2Gx0 0
n - 2
Gx0 0
ndx0 0
ndx0 0
n
dx1 0
n
dx0 1
n
dx1 1
nn - 24-way
ACS
4-wayACS
4-wayACS
4-wayACSCompare
Select


Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Decision memory organization
 Survivor paths always merge L=5K steps back
6.973  Communication System Design 11 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.Decision vectorDecode
blockSurvivor path
merge block
Trace-backWrite
block
Write
regionRead
regionWriteD D L{
{</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>SBVD implementation
Can find shortest path by running forward or backward 
At step m 
 Forward processing 
 4 survivors 
 Backward processing 
 4 shortest paths 
 Combined 
 Smallest concatenated state metric 
 Starting state for trace- back of the shortest path 
 
 
 Continue fw and backw operation 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 13 Figure from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Systolic SBVD architecture
 Since block is bounded 
 Can unroll and pipeline 
 ACS 
 Trace-back 
 M=2L 
 Has t o be a multiple of L 
6.973  Communication System Design 16 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Viterbi Algorithm
Advanced Architectures
Lecture 15
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Vladimir Stojanovi  
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY]. Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Advanced algorithmic transformations
 Sliding block Viterbi decoder (SBVD) 
 Based on two important observations (+1=constraint 
length of the code) 
 1. Survivor paths merge L=5 iterations back into the trellis 
 2. After K=5 steps, state metrics independent on the initial 
value of state metrics 
 Unknown state at time n can be decoded using only 
information from the block [n-K, n+L] 
 Cannot store all the values in the memory 
 Have to obtain them on-the-fly 
6.973  Communication System Design 12 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Radix 2 ACS
Radix-2 trellis 2-way ACS Radix-2 ACS Unit
6.973  Communication System Design 2
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].GG
GG
GG G
GG G Gx
n0 x0 x00 l  l =min ( ( n - 1 n - 1,x10n - 1 n - 1  + +1x
n
n
n
n0
01
1x0 x0
0x
x10x0 l
n0x1 l
nx11 lx1n1x0 l
n1x0 ln0x0 ln0x0 l
n0x1 ln1x1 ln1x0 l
nx0 dnx0 d
nx1 dnnx0
nx1x0n - 1
n - 1
n - 1
G1x
n - 1Gx1
n - 1G0x
n - 1
n - 1
Compare
Select 2-way
ACS2-way
ACS

Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Example for L=2
6.973  Communication System Design 17 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>State-metric initialization
 Need to start from right state metrics for dynamic range 
bound to hold (and for modulo arithmetic to be valid) 
 This is b/c there are constraints on the state metric values imposed by the trellis structure 
 For example state-0 and state- 1 have a common ancestor state 
one iteration back 
 This constrains the state metrics to differ at most by the max 
	Find the right initial metric through simulation (with all zero 
inputs) until steady state is reached 
6.973 Communication System Design 9 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure removed due to copyright restriction.</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Modulo arithmetic for ACS
 Viterbi algorithm inherently bounds the maximum 
dynamic range max of state metrics 
max maxlog2N (N-number of states, max maximum 
branch metric of the radix-2 trellis) 
 Number theory 
 Given two numbers a and b such that |a-b|&lt;  
 Comparison |a-b| can be evaluated as |a-b| mod 2  without 
ambiguity 
 Hence state metrics can be updated and comparedmodulo 2 
max 
 Choose state metric precision to implement modulo by ignoring 
the state metric overflow 
 Required state metric precision equal to twice the maximum 
dynamic range of the updated state metrics 
 Required number of bits is bits =ceil[ log2(max+kmax) ] + 1 
 k  accounts for branch metric addition 
 Example values (for the 32-state radix-4 decoder) 
 k=2, max=14, max=70, bits=8 
6.973  Communication System Design 7 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>802.11a transceiver architecture (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_4/</lecture_pdf_url>
      <lectureno>L4</lectureno>
      <slides>
        <slide>
          <slideno>20</slideno>
          <text>1+0.9D-1 DMT example
 N=8 
 Waterfilling with Etot=8 
 Waste one unit on CP 
lower than VC (8.1dB) 
 For N=16 quickly reaches max of 8.8dB
6.973  Communication System Design 21 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>VC example
 1+0.9D-1, N=8
 Need one sample guardband 
 Etot=(N+1)*E_dim=(8+1)*1=9 
 SVD on 
 Gives singular values 
 Sub-channel SNRs 
 Waterfilling shows only 7 dimensions can be used 
 Sub-channel energies 
 SNRs are then 
 Total SNR 
 VC capacity 
 Would get 1.55bits/dim if N-&gt; inf 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 14</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>IDFT and DFT as orthogonal transformations
 DMT and OFDM use IDFT and DFT as eigen-vectors
DFT IDFT
 Proof 
channel gain at tone n 
qn is eigen-vector of P # 
6.973  Communication System Design 17 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Interleaver
 Protects the code from overload by burst errors 
 Block interleaver 
 Block size is the #of coded bits in OFDM symbol (NCBPS) 
 Two-step permutation 
 Adjacent coded bits mapped 
 Onto nonadjacent sub-carriers 
 Alternate between less and more significant bits in the 
constellation  avoid long runs of low reliability LSBs
6.973  Communication System Design 29 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>One-tap frequency equalizer
 Need to compensate for channel attenuation
 To recover the original constellation distance
6.973  Communication System Design 19 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Efficientizing example
 1+0.9D-1 channel (Pe=10-6, gap=8.8dB, PAM/QAM) 
 PAM and single-sideband 
 QAM 
bn
b +1n
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 4</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>LC - Rate adaptive algorithm
 ET example (continue from EF example) 
 Start from efficient distribution that blows up the energy
constraint 
=81 8 N= x 
 Margin N 8x ==1.8dB
 5.32 
 Levin-Campello Rate Adaptive algorithm 
 Choose any bit distribution 
 Make it efficient using (EF algorithm) 
 Make it energy tight using (ET algorithm) 
6.973  Communication System Design 6 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Discrete time channel partitioning
 Digital realization 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 12
X0
X1
XN-2
XN-1m0
m1
mN-2
mN-1+ +x1/T 1/T
D
A
CDA
Cx(t)
(t) (-t) (t)h(t)n
*
(LPF) y(t)(LPF)
y = Px + n
f*
N-1f*
N-2f*
1f*
0Y0
Y1
YN-1YN-2
yN-1
yN-2
y0=p0
p0p0p1
p1py
pypy py-10
0
0
0 00
0
0xN-1
x0
x-yx-1+nN-1
nN-1
n0y
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>34</slideno>
          <text>Pilot tracking and channel correction
 OFDM packet structure 
6.973  Communication System Design 35
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].8 + 8 = 16 ms
Signal Detect,
AGC, DiversitySelectionCoarse Freq.Offset EstimationTiming SynchronizeChannel and Fine Frequency
Offset EstimationRATELENGTHSERVICE + DATA DATA
Data 1 Data 20.8 + 3.2 = 4.0 ms 0.8 + 3.2 = 4.0 ms 0.8 + 3.2 = 4.0 ms 10 x 0.8 = 8 ms 2 x 0.8 + 2 x 3.2 = 8.0 ms
t1 T1 T2 t2t3t4t5t6t7t8t9t10 SIGNALGI GI GI GI2
angle adjust
to de-interleavercomposite
channel correction datalong2 traininglong1 training
from fft
fircomplex
inversepilot
magnitude
multiplymagnitude
adjusttraining symbol pilotsto timing controlsymbol
timing adjust
pilots
+
channel
correction
multiplypilot
tracking
core
rotate
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>35</slideno>
          <text>Synchronizer
36 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 
Processing
Data Path
NCO FFTcrosscorrelator
Output
Symbols
Input
Data
Tracking Data PathMoving
Average
(16)Jc(k)JF(k)
CombineIg.1(.)IP
aMoving
Average
beIJ*Z-16Z-49
Plateau
Detector
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>38</slideno>
          <text>References
	 [1] T.H. M eng, B. McFarland, D. Su and J. Thomso n "Desi gn and impl ementation of an all-CMOS 802.11a 
wireless LAN chipset," Communic ations Magaz ine, IEEE vol. 41, no. 8 SN -0163-6804, pp. 160-168, 2003 
	 [2] M. Krstic, K. Maharatna, A. Troya, E. Gra ss and U. Jagdhol d "Impl ement ation of an IEEE 802.11a 
compliant low-power baseband processor," Telecommunications in Mode rn Satellite, Cable and 
Broadcasti ng Service, 2003.  TELSIKS 2003. 6th International C onference on vol. 1, n o.  SN -, pp. 97-1 00 
vol.1, 2003. 
	 [3] J. Thomson, B. Baas, E.M. Coo per, J.M. Gilbe rt, G. Hsieh, P. Husted, A. Lo kanathan, J.S. Kuskin, D. 
McCracken, B. Mc Farland, T.H. Meng, D. Nakahira, S. Ng, M. Ratte halli, J.L. Smith, R.  Subramanian, L. 
Thon, Y.-H. Wang and R. Yu "An integrat ed 802.11a baseband and MAC processor," Solid-State Circuits 
Conference, 2002. Di gest of Technical Papers. ISSCC. 2002 IEEE International vol. 1, n o.  SN -, pp. 12 6-
451 vol.1, 2002. 
	 [4] E. Grass, K. Tittelb ach-Helmrich, U. Jag dhold, A. Troya, G. Lip pert, O. Krug er, J. Le hmann, K. 
Maharatna, K.F. Dombrowski, N. Fi ebig, R. Kraemer and P.  Mahonen "On th e sin gle-chip imp lementation 
of a Hiperlan/2 and IE EE 802.11a c apable m odem," Personal Communications, IEEE [s ee also IEEE 
Wireless C ommunications] vol. 8, no. 6 SN -1070-9916, pp. 48-57, 2001. 
6.973  Communication System Design 39 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 200
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].6.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Levin-Campello (LC) algorithm- components
 Efficientizing (EF)  finding energy-efficient bit 
distribution 
 Always replace a bit distribution with a more efficient  
exhaustively search all single information unit changes 
at each step 
Smallest energy to add a new bit 
Largest energy to subtract the bit 
Subtract bits from costly sub-channels 
and add to least costly sub-channels 
6.973  Communication System Design 3 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>High-level system view
6.973  Communication System Design 25 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Data link control layer (DLC)
Physical radio layer (PHY)
Digital
Viterbi
decoder +
descramblerDemodulation
+ 
deinterleaverGuard 
interval
extraction +
FFT
Scrambler +
forward error
correction 
(FEC) coderInterleaver
+
modulationIFFT +
guard
interval
insertion
Synchronization
Analog front-end
D/AA/DAnalog
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Rate adaptive solution
Need also to satisfy the energy constraint
 
 E-tightness (ET) 
 Cant add another bit without violating the E constraint 
6.973  Communication System Design 
If energy constraint violated 
subtract the most costly bit 
If energy less than max add 
the bit that costs the least to add 
5 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Vector coding
 Creates a set of parallel channels by using SVD
singular-value decomposition of P 
discrete transmitter waveforms 
discrete matched filters 
since F is unitary N is also AWGN 
6.973  Communication System Design 13 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Scrambling
	Need to randomize incoming data 
	Enables a number of tracking algorithms in 
the receiver 
	Provides flat spectrum in the given band 
pseudo-random bit sequence (prbs) generator 
What is the period of this pseudo-random sequence?
6.973  Communication System Design 28 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>32</slideno>
          <text>Spectral mask
 Cannot use last 5 tones on each side 
 Does not use extra windowing 
6.973  Communication System Design 33 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Power Spectral Density (dB)
Transmit Spectrum Mask
(not to scale) 
Typical Signal Spectrum
(an example)-20 dBr
-28 dBr
-40 dBr
-30 -20 -11-9 30 20 9 11 fc
Frequency (MHz)
Transmit spectrum mask
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Modal modulation
 Transmission with eigen-functions
9 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 20
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 06.
r(t) = h(t) * h*(-t) (-TH / 2, TH / 2)
rnjn (t) =.
......
T / 2
-T / 2r(t - t)j n(t)dt n = 1,..., ,t    [-(T - TH) / 2, (T + TH) / 2)] 
X1,k
X2,k
h(t) y(t)n(t)
x(t)
h*(T-t)
XN-1,k
XN,k
n=1
n=1
n=1xj1(t)
j2(t)j*1(T-t)
j*2(T-t)
j*N-1(T-t)
t=T
x(t)
y(t)=
=
= y(t)t=Tt=Tt=T
yN-1,ky1,k
y2,k
yN,k j*N(-t)
xnjn(t)
xn . [r(t) *jN-1(t)
jN(t)+ +
N
N
N. jn (t)
jn (t)] + n(t)~(rnxn)Per-channel MAP is optimal
Problem i s vector AWGN 
 eigenfunctions (channel dependent)  
k (t )Channel
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Pilot insertion and FFT/IFFT
 Pilot insertion 
 Pilots BPSK, prbs modulated 
 FFT and IFFT shared 
 Just flip the Re and Im inputs 
6.973  Communication System Design 32 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Asymmetric digital subscriber line (ADSL)
 Symbol rate T=250us 
 Nd=256, 4.3125kHz wide 
 1/T=2.208 MHz (CP = 40 samples) 
 Each time domain symbol 2*256+40=552 samples 
 Hermitian symmetry creates real signal transmitted from 0-1.1MHz 
 First 2-3 tones near DC not used  avoid interference with voice 
 Tone 256 also not used, 64 reserved for pilot 
 Nup=32, CP=5, each symbol 2*32+5=69 samples 
 Exactly 1/8 of downstream
6.973  Communication System Design 23 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].video switch
ADSL
ADSL
Split
Telco CO
POTS
Up
Down0 Hz
10 kHz
138 kHz
1.1 MHzfrequency12 Mbps
1.5 MbpspsdADSLADSL
Access
Mux
(DSLAM)Split ADSL
internetPOTS
(or ISDN)
Switch
UP
Down
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Transmitter architecture detail
6.973  Communication System Design 27 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].MACData
ScramblerConvolutional
EncoderPuncturer
Signal
Mapper
PreambleInterleaver
Cyclic
ExtendIFFTModulation
&amp;
Upconvert
D/ARF
Transmitter (Digital Components) Transmitter (Analog Components)
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Complexity of DFE, VC, DMT
 Example 1+0.9D-1 channel 
 MMSE-DFE, SNR=7.6 dB, 3ff, 1fb tap, 4 mac/sample 
 VC, N=8, SNR=8.1 dB, 7*8/9=6.2MAC/sample 
 DMT, N=8, SNR=7.6 dB, 8pt FFT/IFFT, 
2.7MAC/sample 
 N=16, 3.8MAC/sample, SNR=8.8 dB 
 DFE needs 10FF taps, 1FB t ap, SNR=8.4 dB, 11MAC/sample 
6.973  Communication System Design 22 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Channel partitioning
 Divide the channel into a set of parallel,
independent channels 
 Generalized Nyquist criterion 
 No interference between symbols 
 No interference between sub-channels 
6.973  Communication System Design 8 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.
...
......X1,k
X2,k
h(t) y(t)n(t)
x(t)
h*(T-t)
XN-1,k
XN,k
X1,kn2,k
nN,kn1,k
y1,k
y2,k
yN,kX2,k
XN,kQk
(MIMO)xj1(t)
j2(t)j*1(T-t)
j*2(T-t)
j*N-1(T-t)
t=Tt=Tt=Tt=T
yN-1,ky1,k
y2,k
yN,k j*N(-t)jN-1(t)
jN(t)+ +
+
+
+(lower case y
indicates normalizing
||p|| factors included)n=1
n=1 kx(t)
x(t)=
=
h(t) * x(t)=
=
=xn . jn(t)
xn,k . jn(t - kT)
xn,k . jn(t - kT) * h(t) =
xn,k . pn(t - kT)N
N
n=1 kN
n=1 kN
pm(t) * pn(-t)
||pm|| . ||pn||*
Qk = Q(kT)
Qk = Idkqn,m (t)D</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Dynamic rate adaptation
 Change the loading when channel changes 
 LC is a natural candidate 
 Keep the ET bit distribution and perturb based on 
channel changes
 Bit is moved from channel n to m
 Tightly coupled with channel and noise estimation 
 Will cover in later lectures 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 7</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>802.11a Wireless LAN example
 Up to 54Mbps symmetrically (&lt;100m) 
 1-3 Tx power levels 
 Complex baseband 
 unlike ADSL which is real baseband 
 N=64 (-31  31) (so 128 dimensions) 
 Symbol length = 80 samples, CP=16 
 Symbol rate 250kHz (T=4uS, T=50ns), CPguard=0.8us 
 FCC demands flat spectrum so no energy-allocation 
 The only knob is data rate selection  Broadcast channel  cant optimize bit allocation not used 
4 pilots 48 data tones 
6.973  Communication System Design 24 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].R (Mbps) constellation code rate bn b bn
6
9
12
18
24
36
48
54BPSK
BPSK
64QAM64QAM16QAM16QAM4QAM4QAM1/2 1/2
1/2 1/2
1/2
1/23/4
3/4
3/4
3/43/43/43/41/4
3/23/23/2
9/4 9/23/8
1
1 2
324
36
48
72
96
144
192
21640 mW
5.15 GHz 5.25 GHz
20 MHz5.35 GHz 5.725 GHz 5.825 GHz200 mW 800 mW
52 carriers total, each ~ 300 kHz
20 MHz
Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>33</slideno>
          <text>Receiver architecture
6.973  Communication System Design 34 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].I and Q from
analog
front-end
ADC FIRRemove
DC
offsetRotate FFTChannel
FIR
Rx gain
to analog
front-end Signal
detect
and AGCAuto-
correlateFrequency
lock
Symbol
timingPipeline
controlChannel
estimate
and
trackingDeinterleave ViterbiRx data
to MAC
correct
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>36</slideno>
          <text>Channel estimator
6.973  Communication System Design 37 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Estimation
 Buffer
(Circular Buffer)
Pilot Sign
CorrectionDelay
Buffer
(D)Reference
Sign
CorrectionSync. + FFTResidual
Phase
CorrectionSoft
DemapperDeinterleaverSoft
Viterbi
Channel Estimator
MapperZero ForcingEqualizer
HREF (k)
Y(i-D,k)Interleaver Conv. EncoderX(i,k) =Y(i,k)
H(i-D,k)
H(i-D,k)
X(i-D,k)Y(i-D,k)H(i-D,k) =
X(i-D,k)X(i,k) 
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>DMT/OFDM implementation
/(  Data rate penalty NN+) 
18 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 
XN-i = Xi  if  x(t)is realXN-1XN-2X1X0
...IDFT...DFTY0
Y1
YN-2
YN-1serial to
parallel
&amp; cyclic
prefix
removerparallel
to serial
&amp; cyclic
prefix
insert
Forces P to be cyclic matrixD
A
CA
D
C
(LPF) (LPF)y(t)j(t) h(t) j (-t)n(t)
+1     N+v=
x(t)1     N+v=G T T G
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Practical multitone architectures
Lecture 4
Vladimir Stojanovi
 
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Convergence of multitone to modal modulation
 Modal modulation is optimal for finite symbol time 
 Eigenfunctions hard to compute and channel dependent 
 Multitone converges to Modal modulation 
 As both N-&gt; inf and [-T/2, T/2]-&gt;(- inf,+inf) 
 Set of eigenvalues of any autocorrelation function is unique 
 This set determines the performance of MM through SNR 
is also a valid eigen-function for inf symbol period  Eigen-functions are not unique 
 
 Corresponding eigenvalues are R(2n/T) 
 No ISI on any tone since symbol period is infinite 
 Each tone is AWGN channel 
 SBS detector is MAP optimal 
 If channel is periodic (does not exist in practice) 
are then eigen-functions even on finite [-T/2,T/2]  
 Can use extra bandwidth in the design to make the channel look periodic 
10 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Finite symbol duration effects
 ISI corrupts the neighboring symbol 
 Need to leave the guardband 
 Can try to create a more sinc-looking symbols in 
time by filtering the tones in frequency domain 
 Need excess bandwidth for filter roll-off 
6.973 Communication System Design 11 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Transceiver architecture
[2] 
6.973  Communication System Design 26
FFT/IFFTCyclic prefixWindowingDACUpconver t 
SynchronizerRemove pre fixAGC&amp; ADCLNA &amp; Downconvert
Channel estimator Pilot insertion
Mapper
EncoderInterleaver 
DescramblerViterbi decoderDeinterleaverDemapper
Scrambler
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Rx/Tx Windowing
Rectangular window
Raised cosine 5% 
Raised cosine 25%
Can overlap as long 
as sum is constant
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 20</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>DMT/OFDM channel partitioning
 Make channel look circular 
 Repeat the tail of the symbol at its beginning 
 Add cyclic prefix to each transmitted symbol 
CP 
DMT
 0 ...x 1 ...N N x x
  1 ...N N x x
  VC
 0 ...x 1 ...N N x x
  0...0 
2 2 
 SVD can be replaced by eige n-decomposition (spectral 
factorization) 
 A discrete form of modal modulation 
 While SNRs are unique, many choices for M and F 
6.973  Communication System Design 
 16 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>37</slideno>
          <text>First 802.11a chip
[1] 
6.973  Communication System Design 38
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Signal mapper
 BPSK, QPSK, 16-QAM, 64-QAM 
 Data divided into groups of (1,2,4,6) bits and mapped 
to a constellation point (i.e. a complex number) 
 Gray-coded constellation mapings 
 Need the same average power for all mappings 
 Scale the output by KMOD 
6.973  Communication System Design 31 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Convolutional Encoder
 Rate 1/2 convolutional encoder 
 Punctured to obtain 2/3 and 3/4 rate 
 Omit some of the coded bits 
Source Data
Encoded Data
Bit Stolen Data
(sent/received data)
Bit Inserted Data
Decoded DataInserted Dummy BitStolen BitPunctured Coding (r = 3/4)
Output Data BInput DataOutput Data AX X X X X X X X X
AA A A A A
B B B B B B1
A1 A4 6
A6 04 3
A37
A71 2 5 6 8 0 4 3 7
2
B25
B5 6
B68
B80
B03
B3
A A A A A A AA
BBB B BB B BB1 5 6 8 0A0
4 3 7
1 2 5 6 8 0 4 3 7
y y y y y y y y y0 1 2 3 4 5 6 7 8Tb Tb Tb Tb Tb TbB4A5 A2
B1A8
B7
A2g0=1338 
g1=1718 
 64-state (constraint length K=7) code 
 Viterbi algorithm applied in the decoder 
6.973  Communication System Design 30 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>DMT and OFDM
 Discrete multitone (DMT) and Orthogonal 
frequency Division Multiplexing (OFDM) 
 DMT used on slowly time-varying channels 
 Optimize bn and En per sub-channel 
 OFDM uses same channel partitioning as DMT 
 But uses same bn and En on all channels 
 Used on one-way broadcast channels 
 Forms of vector coding with added restrictions 
 In vector coding, M,F channel dependent 
 Make the channel circular and make M,F channel 
independent - simplify hardware implementation
6.973  Communication System Design 15 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Viterbi algorithm (cont.) (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_16/</lecture_pdf_url>
      <lectureno>L16</lectureno>
      <slides>
        <slide>
          <slideno>20</slideno>
          <text>Discussion
 Lets see what this formula means
 When k=1, constraint kW&gt;R forces W&gt;R and 
single-speed implementation is impossible 
 With k=3, W=R=T get familiar S=2k/(k-1)X 
 With k=1, W=8R=8T, S=9/7X [5] 
 For 64-state trellis, X~30, so S=40 will work 
6.973  Communication System Design 21 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>The role of decision bits
 Decision dn points to the previous state 
 Sn-1=dnSn (Sn&gt;&gt;1) ( for example 1x=1 (x0&gt;&gt;1) ) 
dn x0=1 
6.973  Communication System Design 4 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Black, P. J., and T. Y. Meng.  "A 1-Gb/s, Four-state, Sliding Block Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 32 (1997): 797-805. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Radix-4 and Radix-16 trace-back
 Radix-2 
 Radix-4 
 Radix-16
Unro lling useful whe n memory acce ss slow
Allows to read/write memory every other  ACS computation
4 bit composite decision 
6.973  Communication System Design 13 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].GG0x
n1x0 ln0x0 l
nx0 d
nx0n - 1
G1x
n - 1
Compare
Select
nx00 00 l
nx00 01 l
nx00 10 l
nx00 11 l
Gx11
n - 2Gx01
n - 2Gx10
n - 2Gx00
n - 2
Gx00
ndx00
nCompare
Select 

cision
sion 1 bit de
2 bit deci
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Trace-back unit implementation
 To match the ACS throughput, for radix-2k trellis 
 Need L/k trace-back recursions per ACS iteration 
 L is the survivor path length 
 For every ACS iteration need to trace-back the whole 
survivor path of length L (L/k steps in radix-2k trellis) 
 Example (32-state, radix-4 
=&gt; L=32, k=2) 
	Trace-back recursion rate 
(TRR) is 16 per ACS 
iteration
	Problem since typically cant 
do more than 2 reads/cycle
 TRR=1/2(1+L/D) 
For L=D and memory of length L and pretrace-back, TRR=1 and can use 
single-ported decision memory
6.973  Communication System Design 15 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.Decision vectorDecode
blockSurvivor path
merge block
Trace-backWrite
block
Write
regionRead
regionWriteD D L{
{</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>Trace-back contd.
 Proposed by Rader in 81
word address ( time index) 
Bitline (state) 
address 
New bit address 1 1 1 0 0 0 0 0 000
1 1 1 1 1 0 0 0 001
1 1 1 1 0 0 0 0 010
1 1 1 1 1 0 0 0 011
1 1 1 1 1 0 0 0 101
1 1 1 1 0 0 0 0 1101 1 0 0 0 0 100 0 01 2 3 4 5 6 7 8
1 1 1 1 0 0 0 0 111Digit Address
Trellis decisions at time  n=8 ( for all 8 states)
6.973  Communication System Design 12 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Trace-back implementation
 For radix-2 survivor path length is L=32 (for 32 state trellis) 
 L=16 for  radix-4 and L=8 fo r radix-16 (pr etrace-back) 
 Hence total memory  length is 3* 8=24 in radix-16 case 
6.973  Communication System Design 16 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Trace-back algorithms [3]
k-pointer even (k read pointers and 1 write pointer)
 
 2k number of banks 
 T trace-back length 
 N number of states 
 T/(k-1) columns/bank 
 Example k=3 
 Need to reorder dec bits 
 Use LIFO (two stack) 
 Overall latency 
 2kT/(k-1) 
 Allows same speed reads and writes 
6.973  Communication System Design 17 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Feygin, G., and P. G. Gulak. "Survivor Sequence Memory Management in Viterbi Decoders."  
IEEE International Symposium on Circuits and Systems 5 (1991): 2967-2970. Copyright 1991 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>A little math
 Can calculate the total number of columns (S) as 
a function of k, X, W, T, R 
 Consider a single read pointer (between collisions with 
write pointer, it traces back X columns and decodes B 
columns, while write pointer writes kB columns 
	Number of columns S given by the number of columns 
traversed by single read and write pointer between 
collisions 
6.973  Communication System Design 20 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Trace-back example
d=0 
d=1 d=0 
d=0 d=1 
d=1 
 Every state has a register of length of the whole survivor path 
 Contents of register at each time is the decoded data 
6.973 Communication System Design 7 
0 0 1 
0 1 0 
1 0 0 
1 0 
1 0 
1 
0 1  decoded bits 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Readings
	[1] C. Rader " Memory Management in a Viterbi Decoder," 
Communications, IEEE Transactions on [legacy, pre - 1988] vol. 29, no.
9, pp. 1399-1401, 1981. 
	[2] R. Cypher and C.B. Shung "Generalized trace back techniques for 
survivor memory management in the Viterbi algorithm," Global 
Telecommunications Conference, 1990, and Exhibition.
'Communications: Connecting the Future', GLOBECOM '90., IEEE , pp.
1318-1322 vol.2, 1990. 
	[3] G. Feygin and P.G. Gulak "Survivor sequence memory 
management in Viterbi decoders," Circuits and Systems, 1991., IEEE
International Sympoisum on, pp. 2967-2970 vol.5, 1991. 
	[4] P.J. Black and T.H. Meng "A 140-Mb/s, 32-state, radix-4 Viterbi
decoder," Solid-State Circuit s, IEEE Journal of vol. 27, no. 12, pp.
1877-1885, 1992. 
	[5] M. Anders, S. Mathew, R. Krishnamurthy and S. Borkar "A 64-state 
2GHz 500Mbps 40mW Viterbi accelerator in 90nm CMOS," VLSI 
Circuits, 2004. Digest of Technical Papers. 2004 Symposium on , pp.
174-175, 2004. 
6.973  Communication System Design 22 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Register exchange example
d0=0 
d1=1 d0=0 
d1=0 d0=1 
d1=1 
 Every state has a register of length of the whole survivor path 
 Contents of register at each time is the decoded data 
6.973 Communication System Design 5 
0 0 1 
0 1 0 
1 0 
0 1  decoded bits d0=0 
d1=0 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Trace-back contd.
 Proposed by Rader in 81
Trellis decisions at time  n=8 ( for all 8 states)
6.973  Communication System Design 10 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Bitline (state) 
address
Form new address
by appending a bit
read from 
000 bit locationword address (time index)
 
 1 2 3
1 1 1 0 0 0 0 04 5 6 7 8
000
1 1 1 1 1 0 0 0 001
1 1 1 1 0 0 0 0 010
1 1 1 1 1 0 0 0 011
1 1 1 1 1 0 0 0 101
1 1 1 1 0 0 0 0 1101 1 0 0 0 0 100 0 0Digit Address
Figure by MIT OpenCourseWare.1 1 1 1 0 0 0 0 111</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Trace-back contd.
 Proposed by Rader in 81
Trellis decisions at time  n=8 ( for all 8 states)
6.973  Communication System Design 11 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Bitline (state) 
address
New bit addressword address (time index)
1 2 3
1 1 1 0 0 0 0 04 5 6 7 8
000
1 1 1 1 1 0 0 0 001
1 1 1 1 0 0 0 0 010
1 1 1 1 1 0 0 0 011
1 1 1 1 1 0 0 0 101
1 1 1 1 0 0 0 0 110
1 1 1 1 0 0 0 0 1111 1 0 0 0 0 100 0 0Digit Address
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Register exchange implementation
6.973  Communication System Design 6 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Trace-back contd.
 Proposed by Rader in 81
Trellis decisions at time  n=8 ( for all 8 states)
6.973  Communication System Design 9 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].word address (time index)
1 2 3
1 1 1 0 0 0 0 04 5 6 7 8
000
1 1 1 1 1 0 0 0 001
1 1 1 1 0 0 0 0 010
1 1 1 1 1 0 0 0 011
1 1 1 1 1 0 0 0 101
1 1 1 1 0 0 0 0 110
1 1 1 1 0 0 0 0 1111 1 0 0 0 0 100 0 0Digit dressBitline (state) 
address Ad
k 
 Start trace-bac
from state 000
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Survivor path decoding
 Essentially two ways to perform the decode 
 Register exchange 
 Trace-back 
	A set of registers equal to the number of states
(for the duration of the survivor path) 
 Register exchange 
 Registers keep the values of the decoded data directly 
 Decoded data are the ACS decisions 
 Trace-back 
 Registers keep track of the survivor path 
 Just keep the pointers and figure out decis ions on the fly 
6.973  Communication System Design 3 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Trace-back algorithms
 1-pointer (1 read pointer and 1 write pointer) 
 k reads per 1 write 
 K+1 memory banks 
 T trace-back length 
 N number of states 
 T/(k-1) columns/bank 
 Read k-1 banks, decode 1 
 Decoding in bursts 
 Example k=3 
 Need to reorder dec bits 
 Use LIFO (two stack) 
 Also takes care of bursts 
 Overall latency 
 (k+1)T/(k-1) 
 More efficient for all exc ept fully parallel ACS schemes 
6.973  Communication System Design 18 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from Feygin, G., and P. G. Gulak. "Survivor Sequence Memory Management in Viterbi Decoders."  
IEEE International Symposium on Circuits and Systems 5 (1991): 2967-2970. Copyright 1991 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Trace-back contd.
 Proposed by Rader in 81
6.973 Communication System Design 8 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].1 2 3
1 1 1 0 0 0 0 04 5 6 7 8
000
1 1 1 1 1 0 0 0 001
1 1 1 1 0 0 0 0 010
1 1 1 1 1 0 0 0 011
1 1 1 1 1 0 0 0 101
1 1 1 1 0 0 0 0 110
1 1 1 1 0 0 0 0 1111 1 0 0 0 0 100 0 0Digit Address
Bitline (state)
addressWord address (time index)
Trellis decisions at time n=8 (for all 8 states)
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Pretrace-back unit
 Pretrace-back is calculation of composite decisions
 The size of decision memory is unchanged 
 4b decisions stored for each state, for every other radix-4 ACS 
computation (Radix-16 trace-back) 
 2b decisions stored for each st ate, for every radix-4 ACS 
computation (Radix-4 traceback) 
6.973  Communication System Design 14 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure from from Black, P. J., and T. H. Meng. "A 140-Mb/s, 32-state, Radix-4 Viterbi Decoder."  
IEEE Journal of Solid-State Circuits 27 (1992): 1877-1885. Copyright 1992 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>A little math [2]
	Can generalize these k-pointer schemes for 
different read, write and decode times (W, T, R) 
 Need to follow some rules 
 Immediately after colliding with the write pointer, each 
read pointer traces back X columns (X-survivor path 
length) and then decodes values from B columns. 
Then it collides again with write pointer and repeats the 
procedure. 
 Write pointer always collides with read pointer in the 
same order. Between collisions it writes out exactly B 
columns 
 Write pointer stores the pointers for trellis stage 0 in 
column 0 at time 0 
6.973  Communication System Design 19 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Decision memory organization
 Survivor paths always merge L=5K steps back 
 K= log2(number of states) = (constraint length  1) 
6.973  Communication System Design 2 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.Decision vectorDecode
blockSurvivor path
merge block
Trace-backWrite
block
Write
regionRead
regionWriteD D L{
{</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Viterbi Algorithm
Survivor Path Decoding
Lecture 16
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Vladimir Stojanovi  
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>PDF - 3.0 MB</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_10/</lecture_pdf_url>
      <lectureno>L10</lectureno>
      <slides>
        <slide>
          <slideno>14</slideno>
          <text>Radix-22 architecture  Sync control
 log2N-bit binary counter 
 Synchronization controller 
 Address counter for twiddle factor reading in each stage 
 On first N/2 cycles, 2-to-1 mux in BF1 switch to 0 
 Butterfly is idle (input data directed to shift registers) 
 On next N/2 cycles, muxes in BF1 switch to 1 
 Butterfly computes a 2pt DFT with incoming da ta and data stored in the shift registers 
 Output Z1(n) sent to twiddle multiplier 
 Output Z1(n+N/2) sent back to the shift register to be m ultiplied in next N/2 cycles, 
when the first half of the next frame is loaded in 
	Operation of BF2 is similar, except the distance of butterfly input sequence is 
just N/4 and the trivial multiply logic 
	Utilization of the multiplier is 75% 
	Next frame can be computed w/o pausing due to the pipelined processing in 
each stage 
6.973  Communication System Design 	Pipeline register can be inserted between each multiplier and BF stage to improve the performance 
15 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].X(k)Xx(n)
clkW2(n) W3(n) W1(n)8 16 32 64 128
BF2I BF2II BF2I BF2II BF2I BF2II BF2I BF2II1 2 4
0 1 2 3 4 5 6 7X X X X X X X X t t t t
+++
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Memory issues
	The area/power consumption in the pipeline architectures
dominated by the 
	FIFO register files at each stage 
	Complex multipliers at each (or every other stage) 
	To diminish the unnecessary data moving in the FIFO need
to reconstruct the storage 
	A known approach is to use FIFO with 2-port RAM 
 With read and write addresses displaced by a constant 
 2-port RAM cells 33% more area of the 1-port RAM cell 
	Use two N/2 1-port RAMs 
 Read and write interleaved 
 Each active every other cycle 
6.973 Communication System Design 17 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].D(n) lxN 2-port RAM D(n-N)
W-addr. R-addr.
W RD(n) D(n-N)
R/Wab
d
c
Addr.EE
E
N/2-1 RAMN/2-1 RAME
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Radix-4 Multi-path Delay Commutator
[Swartzlander84]
 What is the utilization of 
 Butterflies? 
 Multipliers? 
6.973  Communication System Design 6 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
+++12
8
4BF4 BF41
2
3C4123
C4
DFT
4DFT
4DFT
4
DFT
4
DFT
4
DFT
4X0 x0
X12
x12X1
x8X13
X14x4
X2
X15 x15X3
N
4x(n+    )N
4y(n+    )
N
2y(n+    )
3N
4y(n+    )x(n) y(n)
N
2x(n+    )
3N
4x(n+     )WN0
WNn
WN2n
WN3n-j
-1
-1
-1
-1j
-jFigure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Radix-2 Single-path Delay Feedback
 Uses registers more efficiently 
 Both as input and the output of the butterfly 
 A single data stream goes through the 
multiplier at every stage 
 Multiplier utilization is also 50% 
6.973  Communication System Design 4 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].BF28
BF24
BF21
BF22
j
Figure by MIT OpenCourseWare.
[ W o l d&amp;  D e s p a i n 8 4 ]</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Radix-4 Single-path Delay Commutator
[Bi &amp; Jones 89] 
	Modified radix-4 algorithm 
	Programmable  radix-4 BF 
	75% utilization 
	Used to build one of the largest single-chip 
FFTs (8192pts) [Bidet95] 
6.973  Communication System Design 7 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].DFT
4DFT
4DFT
4
DFT
4
DFT
4
DFT
4X0 x0
X12
x12X1
x8X13
X14x4
X2
X15 x15X3
N
4x(n+    )N
4y(n+    )
N
2y(n+    )
3N
4y(n+    )x(n) y(n)
N
2x(n+    )
3N
4x(n+     )WN0
WNn
WN2n
WN3n-j
-1
-1
-1
-1j
-jcommutatorbutterfly
elementcommutatorbutterfly
element
coefficientc1c2c3 c4c5c6inputstage 1 stage 2
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Input unit
 Hard wired outputs and data shifting 
 To the 8pt FFT 
 Reduce de-muxing 
 Reduce global wires 
 Cannot shift every clk 
 Multiplier cannot finish 
 Extend latency 
 Temporary registers 1,2,3 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 22 
Figure from Maharatna, K., E. Grass, and U. Jagdhold. "A 64-point Fourier Transform Chip for High-speed Wireless 
LAN Application Using OFDM." Solid-State Circuits  39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Decomposition  a review
 Twiddle factor is Nth primitive root of unity 
 With exponent evaluated modulo N 
 Most fast algorithms share same general 
strategy 
 Map one-dimensional transform int a two or multi
dimensional representation 
 Exploit congruence property of coefficients to simplify 
computa tion 
 Unlike traditional step-by-step decomposition
of twiddle factors 
 Cascading the twiddle factor decomposition leads
to new forms of FFT with high-spatial regularity 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 10</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Multiplier unit
 49 multiplies
 Only nine sets unique (cos,sin)
hard-wired constant 
6.973  Communication System Design 23 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
 Significantly less storage space 
 for coefficients 
 Turn multiplies into shift&amp;add 
Figure from Maharatna, K., E. Grass, and U. Jagdhold. "A 64-point Fourier Transform Chip for High-speed Wireless 
LAN Application Using OFDM." Solid-State Circuits  39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Radix-8 Pipelined/Parallel implementation
 A 64pt FFT example for 802.11a 
[Excerpted from Maharatna et al 2004] 
 Two dimensional structure of 8pt FFTs 
 The number of nontrivial complex multiplications is 49 (7x7) 
 Since the first twiddle is always 1 
 The number of nontrivial complex multiplications for radix-2
FFT is 66 
 Radix-4 (or 22) FFTs need only 52 multiplies 
 Important to note that for 8pt FFT (DIT) no need for
multiplies 
6.973  Communication System Design 19 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>A 16pt example
 Get radix-4-like mulitplier complexity with 
radix-2 butterfly structures (radix-22) 
6.973  Communication System Design 12 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].x(0)
x(1)
x(2)
x(3)
x(4)
x(5)
x(6)
x(7)
x(8)
x(9)
x(10)
x(11)
x(12)
x(13)
x(14)
x(15)x(0)
x(1)x(2)
x(3)
x(4)x(5)x(6)x(7)
x(8)x(9)
x(10)
x(11)
x(12)
x(13)
x(14)
x(15)
-j
-j
-j
-j-j
-j
-j
-j-j-j
-j
-jW2
W4
W6
W0
W1
W2
W3
W0
W3
W6
W9W2
W4
W6
W1
W2
W3
W3
W6
W9N/4 DFT
(k1=0, k2=0)
N/4 DFT
(k1=0, k2=1)
N/4 DFT
(k1=1, k2=0)
N/4 DFT
(k1=1, k2=1)X(0)
X(8)
X(4)X(12)
X(2)X(10)
X(6)X(14)
X(1)
X(9)X(5)
X(13)X(3)
X(11)
X(7)
X(15)X(8)X(0)
X(4)
X(12)
X(2)
X(10)
X(6)
X(14)
X(1)X(9)X(5)
X(13)
X(3)X(11)
X(7)X(15)
BF I BF II BF II BF III BF IV BF IW0
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Radix-22 (R22SDF) architecture
N=256 
 Similar to R2SDF 
 Reduced number of multipliers 
 Need two types of butterflies 
 One identical to that in R2SDF 
 The other contains the logic for trivia l twiddle factor multiplication (with j) 
 Synchronization control very si mple due to spatial regularity 
 Just a log2N binary counter 
6.973  Communication System Design 14 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].X(k)Xx(n)
clkW2(n) W3(n) W1(n)8 16 32 64 128
BF2I BF2II BF2I BF2II BF2I BF2II BF2I BF2II1 2 4
0 1 2 3 4 5 6 7X X X X X X X X t t t t
+++
0
1
0
1
0
011+
+
+
+
xxr(n)
xi(n)
xr(n+N/2)
xi(n+N/2)
(i).  BF2I-
-0
1
0
1
0
011+
+
+
++
+xr(n)
zr(n)xi(n)
zi(n)xr(n+N/2)zr(n+N/2)
xi(n+N/2)zi(n+N/2)
(ii). BF2IIt x--
-Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Multiplier unit and scheduling
 Some of the coefficients request ed concurrently by different FFT 
outputs 
 Solve by adding temp registers in the input unit 
 ~50% less power and area than 8 standard complex multipliers 
 Buffer unit similar to input unit, just w/o temporary registers 
 Outputs also hardwired with distance of 8 
6.973  Communication System Design 24 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Figures from Maharatna, K., E. Grass, and U. Jagdhold. "A 64-point Fourier Transform Chip for High-speed Wireless 
LAN Application Using OFDM." Solid-State Circuits  39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>A 64pt radix-22 example
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 13 Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Radix 22 approach
 Start by classical divide-and-conquer radix-2 DIF 
indexing 
 But, consider the first two steps of decomposition together 
Compute directly in standard radix-2 approach 
New idea is to proceed to shorter DFTs cascading 
the twiddle factor WN(N/4n 2+n3)k1 
[Shouseng and Torkelson 1996]
6.973  Communication System Design 11 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Block diagram of the FFT unit
 Two-stages are pipelined 
 Fully parallel in each stage (radix-2 8pt FFT, single clk cycle) 
 Two performance bottlenecks 
 Large number of global wires resulting from the multiplexing of 
complex data to the 8-point FFTs 
 Construction of the multiplier unit to attain the required speed with minimal silicon are is not trivial 
6.973  Communication System Design 21 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Figure from Maharatna, K., E. Grass, and U. Jagdhold. "A 64-point Fourier Transform Chip for High-speed Wireless 
LAN Application Using OFDM." Solid-State Circuits  39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 18 x[0]
x[1]x[2]x[3]
x[4]
x[5]
x[6]
x[7]X[0]X[4]X[2]X[6]
X[1]X[5]X[3]X[7]
-1
-1
-1
-1 -1-1-1-1 -1
-1
-1
-1W0
W1
W2
W3W2W2W0W0W0
W0
W0
W0
TFFT =N
r logrN  Tr,PE. .
Where,
N/r = No. of butterfly per stagelogrN = No. of stage
Tr,PE = Time to calculate one butterfly
Control
Circuits
Coeff
ROMN/r ButterfliesS/P &amp; Bit reverse
P/SCounter
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.Single stage hardware example 

 Fold stages onto each other
Need constant geometry signal flow graph
 
Big price in area for parallelism (within each stage)[Sadat2001]</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Pipelined FFT architectures
 Examples 
 Radix-2 
 multi-path delay commutator 
 single-path delay feedback 
 Radix-4 
 single-path delay feedback 
 multi-path delay commutator 
 single-path delay commutator 
6.973  Communication System Design 2 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.(1) . R2MDC(N-16)
(2) . R25DF(N-16)
(3) . R4SDF(N-256)
(4) . R4MDC(N-256)
(5) . R4SDC(N-256)1  
BF42B4E8F
3X64 3X16
BF4 BF43X4
BF43X1C2 C2 C2 C2 BF2 BF2 BF2 BF2j8 4 
4 2 
2 1  
4848192192
128128
64641616
3232BF4BF4 C4C4
12124848
 32 32
161644
88BF4BF4 C4C4
331212
 8 8
4411
22BF4BF4 C4C433
22
11C4C4 BF4BF4
BF4BF4 BF4BF4 DC6 X64 DC6 X64 BF4BF4 BF4BF4 DC6 X16 DC6 X16 DC6 X4 DC6 X4 DC6 X1 DC6 X1j
BF28
BF24
BF21
BF22</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Readings
 [1] H.e. Shousheng and M. Torkelson "A new approach to pipel ine FFT processor," Parall el 
Processing Symposium, 1996.,  Proceedings of IPPS ' 96, The 10th International no. SN -, 
pp. 766-770, 1996. 
 [3] H.e. Shousheng and M.  Torkelson "Designing pi peline FF T processor for OFDM (de)modul ation," 
Signals, System s, and Electr onics, 1998. ISSSE 98. 1998 URS I International Sy mposium on no. SN 
-, pp. 257- 262, 1998. 
	[2] E. Wold and Alvin M . Despain "Pipeline a nd Parall el-Pipeline FF T Processors for VLSI 
Implementations," IEEE Trans. Computers vol. 33, no. 5,  pp. 414-426, 1984. 
	[3] G. Bi and E.V. Jones "A pipeli ned FFT processor for wo rd-sequential data," Acoustics, 
Speech, and Signal Processing [see also IEEE Transactions  on Signal Processing], IEEE 
Transactions on vol. 37, no. 12 SN -0096-3518, pp. 1982-1985, 1989. 
	[4] K. Maharatna, E. Grass and U. Jagdhold "A 64-point Four ier transform chip for high-
speed wireless LAN app lication using OFDM," Solid-State Circui ts, IEEE Journal of vol. 39, 
no. 3 SN -0018-9200,  pp. 484-493, 2004. 
 Interesting DIT&amp;F algorithm 
 [4]  C. Chiu,  W. Hui, T.J. Ding and J. V. McCanny "A 64-point  Four ier transform chip for  video mot ion 
compensati on using p hase correl ation," Solid-State Ci rcuits, IEEE Journal of vol. 31, no. 11 SN 
0018-9200, pp. 17 51-1761, 1996. 
 Power-performance estimation 
 [2] S. Hong, S. Kim, M.C. P apaefthymi ou and W.E. Stark "Pow er-compl exity analysis of pipel ined 
VLSI FF T architectures fo r low energy wi reless comm unicati on applications," Circu its an d System s, 
1999. 42nd Midw est Sy mposium  on vol. 1, n o.  SN -, pp.  313-316 vol. 1, 1999. 
	[3] K. Pagi amtzis and P.G. Gula k "Empiric al perform ance prediction for IFFT/FFT cores for OFDM 
systems-on-a-chip," Circuits and Systems, 2002. MW SCAS-2002. The 2002 45th Midwest 
Symposium on vol. 1, no.  SN -, pp. I-583-6 vol.1, 2002. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973  Communication System Design 26</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Fast Fourier Transform:
VLSI Architectures
Lecture 10
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Vladimir Stojanovi  
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Radix-4 Single-path Delay Feedback
[Despain74] 
 Utilization of multipliers 75% 
 By storing 3 BF4 outputs 
 Radix-4 butterfly utilization only 25% 
 Butterfly fairly complicated 
 At least 8 complex adders 
6.973  Communication System Design 5 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].3X4 3X1
BF4 BF4
N
4x(n+    )N
4y(n+    )
N
2y(n+    )
3N
4y(n+    )x(n) y(n)
N
2x(n+    )
3N
4x(n+     )WN0
WNn
WN2n
WN3n-j
-1
-1
-1
-1j
-jDFT
4DFT
4
DFT
4
DFT
4
DFT
4X0 x0
X12
x12X1
x8X13
X14x4
X2
X15 x15X3
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Radix-2 Multi-path Delay Commutator
	The most classical approach for pipeline
implementation of radix-2 FFT 
	Input sequence broken into two parallel data
streams flowing forward with correct distance
between data elements entering the butterfly
scheduled by proper delays 
	Both butterflies and multipliers are in 50%
utilization 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 3 C2 C2 C2 C2 BF2 BF2 BF2 BF2j8 4 
4 2 
2 1  
1  
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Some conclusions
	Delay feedback approaches are always more 
efficient than corresponding delay-commutator 
approaches 
 In terms of memory utilization 
 Since butterfly outputs share same storage with its inputs 
 Pipeline architectures require FFT algorithms to 
be formulated in a hardware-oriented form 
 Where spatial regularity is preserved in a signal-flow 
graph (SFG) 
 So that arithmetic operations can be tightly 
scheduled for efficient hardware utilization 
6.973  Communication System Design 9 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Arithmetic complexity
	R22SDF has reached minimum requirement 
for both multiplier and storage 
	Only R4SDC better in terms of adder usage 
	R22SDF well suited for VLSI implementations 
of pipeline FFT processors 
6.973  Communication System Design 16 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].R2MDC
R2SDF
R4SDF
R4MDC
R4SDC
R22SDFmultiplier # adder # memory size control
2(log4 N - 1) 4 log4 N 
4 log4 N 
8 log4 N 
8 log4 N 
3 log4 N 
4 log4 N 2(log4 N - 1)
log4 N - 1
3(log4 N - 1)
log4 N - 1
log4 N - 13N/2 - 2
N - 1
N - 1
5N/2 - 4
2N - 2
N - 1simple
simple
simple
simplemedium
complex
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Output unit
 A mirror of input unit 
 Just w/o temporary reg
 Control/sync is simple
 5-bit counter 
 Starts counting when in
 Local counters control 
 Input 
 Intermediate 
 Output units 
6.973 C
Cite as: Vladimir Stojanovic, course mat erials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw. mit.edu/), Massachusetts Institute of Technology.
 Downl oaded on [DD Month YYYY].
rs 
ull iste
 
put f
ommunication System Design 25 Figure from Maharatna, K., E. Grass, and U. Jagdhold. "A 64-point Fourier Transform Chip for High-speed Wireless 
LAN Application Using OFDM." Solid-State Circuits  39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>R4SDC commutator and  butterfly details
6.973 Communication System Design 
 8
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].inputNtNtNt
Nt
Nt
Nt
mtc1c2c31
11 1 1
1
11
2
30
0
0
0
000 01
1
10
0
01
1
10
0
01
1
10
0
01
1
10
0
02
Time
Time1 0 15
t'+16T t'
t'+28T
m1= 3 m1= 2 m1= 1 m1= 0t'+12T14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 15 14 13 x(n)T
input
2:1 multiplexers
Outputs from
commutator at
stage 12 1 0 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 15 14 13
14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 15 14 13 12 11 10 9
10 9 8 7 6 5 4
6 5 4 3 2 1 03 2 1 0
4 3 2 115 14 13 12 11 10 9 8 7 6 5
15 14 13 12 11 10 9 8 7 6 5
00
0
0
0
0
0
01
1
2
423
32
3
4
5
6
6
6
97
8
9
10
11
12
13
14
150
4
8
12
1
5
9
13
2
6
10
14
3
7
11
150
0
0
0
1
1
1
1
2
2
2
2
3
3
3
30
1
2
3
0
1
2
3
0
1
2
3
0
1
2
3
stage 1 stage 2mtre (0)
Re
Imadd/sub
add/sub
D
add/sub
(0 = addition, 1 = subtraction)add/sub
add/sub
add/subim (0)
im (1)re (1)
im (2)re (2)
im (3)re (3)
c4c5c6
10 0 0
1
10
2
30
1
0
111 0Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.
Figure by MIT OpenCourseWare.Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>8pt DIT FFT
 The only nontrivial multiply is with 1/sqrt(2)
 Easily realize using hardwired shift-and-add
6.973  Communication System Design 20 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Figure from Maharatna, K., E. Grass, and U. Jagdhold. "A 64-point Fourier Transform Chip for High-speed Wireless 
LAN Application Using OFDM." Solid-State Circuits  39 (2004): 484-493. Copyright 2004 IEEE. Used with permission.</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Trellis codes (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_12/</lecture_pdf_url>
      <lectureno>L12</lectureno>
      <slides>
        <slide>
          <slideno>8</slideno>
          <text>Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 9</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Two-dimensional partitioning
 Notice larger number of Ne and N1,2,3,4
6.973  Communication System Design 24
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].4 - 2 5 4 2 2 16 64 256 10243.01 8 3.01
8 04 02 11 5 2.5 8 36 160 714 31443.58 32
60 4.01 8616 1952 410 80
52
64202
202984
8004712
48484.37
4.44116
11628
8
44.77
4.77
4.773
3
36
6
623 04 16 16
32
32
64
64
64
128
128
128
128
256
256
256
5120510274370304164024056042036060064 016
004
052
014
150
100
142
056
272
162
03461001401401
417263245223203115143101 7
7
7
7
7
7444444
43.53.53.53.53.53.5 5.44
5.44
5.44
5.44
5.44
5.446.02
6.02
6.02
6.02
6.02 221822861722028130
146
126
0
312
94
66
152
154
32
64 350124612658376484128429504965925042484
2480
2204
0
6028
1684
1292
2816
2736
522
1530 6768273213182139266624820029320734921075612264122364.68
4.72
4.78
4.74
4.94
4.91
5.01
5.23
5.24
5.22
5.331796900900900451451451451228228228
24
8
8
8
8
810 06 41
45 16 343.982vh2h1h0d2gf (dB) ND-N4-N3-N2-N1-Ne-gf~
dmin w.r.t. A20
dmin w.r.t. B20
dmin w.r.t. C20Ne w.r.t. A20
Ne w.r.t. B20
Ne w.r.t. C20
dmin w.r.t. D20
Ne w.r.t. D20
dmin w.r.t. D20
Ne w.r.t. D20D24D26D25D23D21D22D20C20B20A20
B21
C22C21C23
D27
2
4 22 1 11 11 11 11
4 441
22
484 4 222
2
2
1 1-
-
--
--
-min
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>4-state Ungeroboeck Trellis code
 1 bit controls the subset  (input to conv. encoder) 
 2 bits choose a poi nt in a subset 
 Two minimum distance scenarios 
 Distance between two points in a subset (2 time s greater than uncoded 8SQ Q AM) 
 When two sequences differ in more than one symbol period 
 Symbol poi nts eith er chosen from ev en or odd subsets 
 Within the odds or evens di stance the s ame as 8SQ QAM 
 Divergi ng at one state and merging at anothe r sate forces the squared distance to be doubled 
d8SQ 2+ d8SQ 2=2 d8SQ 2 
 So, this code 3dB better  than  uncoded 8SQ QAM transmission 
6.973  Communication System Design 3 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Another example
 Rate 2/3 trellis code 
 Increase fundamental gain beyond 3dB (which was the parallel 
transition distance in the rate  code) 
 Need constellation partitioning by  one additional level/step to 
ensure that the parallel transition distance will now be 6dB 
6.973  Communication System Design 19 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Mapping by set partitioning
 Basic partitioning can be extended systematic ally to larger values of b (i.e. 
constellation sizes) 
Ungerboeck labeling in two dimensions  
 The LSB v0 of the encoder output  is used to specify which of  the first 2 partitions (B0, 
v0=0 or B1, v0=1) contains the selected coset of the sublattice , and then uses v1
to specify which of the next level parititions (C0,C2,C1,C3) contains the selected 
coset of the sublattice, etc. 
 The remaining bits vk+r, , vb+r-1 are used to select poi nts within the coset 
 In practice, this mapping is often used for N=1,2,4 and 8 
 One dimensional partitioning halves PAM cons tellation into sets of every other
point, realizing 6dB increase in intra-partition distance for each such halving 
 In 4 and 8 dimensions the distance is 1.5dB and 0.75dB per par tition, respectively) 
6.973  Communication System Design 
 11 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Trellis Codes
Lecture 12
Vladimir Stojanovi
 
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Gain of coset codes
 The fundamental gain always with respect to the uncoded
system (x_tilda) 
 Latice redundancy 
 Coding gain between 3 and 6dB
 Shaping gain ~1.5dB (fixed by constellation geometry)
6.973 Communication System Design 7 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Min. distance
	Now, min distance occurs between two 
longer length sequences through the trellis, 
instead of between parallel transitions 
6.973  Communication System Design 20 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Images removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>6.973  Communication System Design 8 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Example, continued
Min. distance in cosets dmin()=2dmin()=4sqrt(2)
Sequence distance (any two paths that start and 
terminate in the same pair of states must have a 
distance that is d=sqrt(16+8+16) &gt;= 4sqrt(2)
So, the parallel transition distance is the minimum 
distance for this code
This is still sqrt(2) better than distance corresponding 
to no extra bit (or just transmitting uncoded 4QAM)</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>One-dimensional TCM
 Up to 6dB of fundamental gain 
 Only need to partition twice = (2) 
to realize min 
separation between any two parallel transitions 
that is 6dB higher than uncoded PAM 
 The partition chain for the one-dimensional trellis 
codes is, with =Z, Z|2Z|4Z, with corresponding 
min distances between points dmin(Z)=1, 
dmin(2Z)=2, dmin(4Z)=4, and rG=1 
 The parallel separation is never more than d2=16 
 G(D) must then be a rate  code 
6.973  Communication System Design 21 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Coset partitioning example (D2 lattice)
 Ungerboeck rate  3dB trellis code 
 8AMPM (or 8CR) constellation is a subset of =D2 lattice that contains | |=8
points 
 Average energy per symbol is E=10 (E_bar=5) 
 Sublattice  has a coset 0 with two points | 0|=2 so that | | |=4 cosets of 
i n  
 0={0.4} 1={1,5} 2={2,6} 3={3,7} 
 These cosets selected by two bit, rate  convolutional encoder output 
 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 8</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>PSK example from Ungerboeck
 Path distance greater than internal coset distance 
2=2, so 
 dfree=min(path distance, internal coset distance)=2 
6.973  Communication System Design 13 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Images removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Two dimensional codes
 Use 3-level partitioning so that = (3) 
 To realize min separation between any two parallel 
transitions that is 6dB higher than uncoded two-
dimensional QAM 
 The partition chain is with =Z2, Z2|D2|2Z2|2D2 
 Corresponding min distance dmin(Z2)=1, 
dmin(D2)=sqrt(2), dmin(2Z2)=2, dmin(2D2)=2sqrt(2) and 
rG=1 
 rG=1 implies doubling of the two-dimensional 
constellation size | | with respect to uncoded 
transmission, the maximum fundamental gain is limited 
to 
6.973  Communication System Design 23 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Coset partitioning
 Coset partitioning |  
 Partition of the lattice  into | | | (called the
order of the partition) cosets of a sublattice  
such that each point in the original lattice  is 
contained in one, and only one, coset of the 
sublattice  
 If the encoder G is 
 Convolutional encoder 
 The set of all possible trans mitted sequences {x(D)} is a 
Trellis Code 
 Block encoder 
 The set of N-dimensional vectors is a Lattice Code 
	Both trellis codes and lattice codes are coset 
codes 
6.973  Communication System Design 6 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>One-dimensional Trellis code tables
 Ne  number of nearest neighbors 
 N1,2,3,4 numbers of next-to-near neighbors 
6.973  Communication System Design 22 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.dmin w.r.t. A10
dmin w.r.t. B10
dmin w.r.t. C10Ne w.r.t. A10
Ne w.r.t. B10
Ne w.r.t. C10C10B10A10 
B11
C12C11C13
1 11
2 221
2 2 122
4
14 2 5 9 2.25 4 8 16 32 64 3.32 12 3.52
8 04 13 10 2.50 4 8 16 40 72 3.78 24
48 3.99 80 48 16 8
8
2824
5648
12680
2364.19
4.6048
968
4
124.39
4.39
5.122.75
2.75
3.2511
11
1323 04 16
16
32
64
64
128
128
128
256
256
512024
054
126
160
124
362
370
0342 1017515515207267235161103 14
14
16
16
15
4.00423.503.75
3.754.004.003.503.505.44
5.44
6.02
 6.02
5.745.74
5.44
6.02 2486636 0
32
0
34
8
32
6
0 564080141002566690 0
84
0
164
56
132
68
01402681363441060236420 4.61
4.94
5.01
5.16
5.24
5.47
5.42
5.511536768768384384384192192
8
15
14
1610 23
45 103.982vh1h0d2gf(dB) ND-N4-N3-N2-N1-Ne-gf~
-
-
---min
332</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>QAM example
 For m information bits need 2m+1 points 
 Extra bit chooses even or odd cosets 
 Coding gain of approx 4dB over uncoded modulation 
6.973  Communication System Design 16 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Benefiting from larger number of states
6.973  Communication System Design 14
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Images removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Trellis codes  Motivation
 In multi-level modulations 
 Trellis codes allow code design directly for 
maximization of Euclidean distance 
 Hamming distance maximizes Euclidean 
distance only in binary modulation 
4 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>8PSK mapping by set partitioning
 Ungerboeck 
6.973  Communication System Design 12
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].(000) (100) (010) (110) (001) (101) (011) (111)y2 = 0y0 = 0
11
1 111
1 0 00
0Do = 2 Sin (p/B) = 0.765
D1 = 1.414
D2 = 2.000
(y2y1y0)Subset B1
Subset C3A0 = 8 - PSK
B0
C0 C2 C1
(D3     0)y1 = 0
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Trellis codes
	Invented by Gottfried Ungerboeck of IBM in 1982 
	[1] G. Ungerboeck "Channel coding with 
multilevel/phase signals," IEEE Transactions on 
Information Theory, vol. 28, no. 1, pp. 55-67, 1982. 
	[2] G. Ungerboeck "Trellis-coded modulation with 
redundant signal sets Part II: State of the art," IEEE 
Communications Magazine, vol. 25, no. 2, pp. 12-21,
1987. 
	[3] G. Ungerboeck "Trellis-coded modulation with 
redundant signal sets Part I: Introduction," IEEE 
Communications Magazine, vol. 25, no. 2, pp. 5-11,
1987. 
6.973  Communication System Design 2 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>Coding gain vs. state
 Significant gains 
 With as few as 4,8,16 states 
 3dB (4 states) 
 4dB (8 states) 
 5dB (16 states) 
 up to 6dB (128 or more) 
 Doubling of states does not 
always increase dfree 
 Can get big increase in 
 Num. nearest neighbors 
 Num. next-nearest neighbors 
6.973  Communication System Design 18 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Trellis for QAM example
 Error paths with distance 5d02 from sequence 
D0-D0-D3-D6 
 All error paths start and re-emerge in one node 
6.973  Communication System Design 17 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>General coset (subset) encoder
 xm  N dimensional vector sequence of points 
 Each N-dimensional symbol chosen from N-dim constellation 
 Sequences of xm are the codewords x(D)=summ(xmDm) 
 Signal constellation has 2b+rg signal points in some coset of N-
dimensional real lattice  
 Signal constellation contains 2k+rg cosets, each with 2b-k points 
 rg_bar=rg/N  normalized redundancy 
 kg_bar=k/N  informativity of the coset code 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 5</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>BER improvement
6.973  Communication System Design 
15 Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure by MIT OpenCourseWare.3 dBUncoded
4 - PSK
0.5
1 dB 12 1 10 9 8 7 6 510-410-310-2
4 - state
 trellis - coded
 8 - PSK
  (Simulation)Error - event probability
SNR (Es/No)Asympt.
limitChannel
capacity
of 8 - PSK
= 2 bit/sec/Hz</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Fast fourier transform: practical aspects and basic architectures (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_9/</lecture_pdf_url>
      <lectureno>L9</lectureno>
      <slides>
        <slide>
          <slideno>14</slideno>
          <text>Implementation issues
General purpose computers
Digital signal processors
Vector/multi processors
VLSI ASICs
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 15</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Relationship with FFT
DHT, DCT, DST and related transforms can all be 
mapped to DFT
All transforms use split-radix algorithmsFigure by MIT OpenCourseWare.
For minimum number of operations
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 14RSDFT
RDFT CDFT
ODFT DHT
PTA
DCT2
4 3
56
b b
b bb
a a
a aa1
(2D)1
2
3
4
5
6a
b
a
b
a
b
a
b
a
bComplex DFT 2n
Complex DFT 2nx2nOdd DFT 2n-11 odd DFT 2n-1+ 1 complex DFT 2n-11 real DFT 2nComplex DFT 2n
Real DFT 2n
Real DFT 2nReal DFT 2n1 real DFT 2n-1+ 1 complex DFT 2n-2
1 real DFT 2n-1+ 2 DCTs 2n-2
Real DFT 2n
Real symmDFT 2nDCT 2n
DHT 2n+2n+1- 4 additions
+ (3.2n-2 - 4) multiplications + (2n +3.2n-2 -n) additions
+ (3.2n-1 -2) multiplications + (3.2n-1 -3) additions+ 3.2n-1 -2 additions
+2n+1 additions
2 complex DFT's 2n-2
+ 2(3.2n-2-4) multiplications + (2n+3.2n-1 -8) additions
1 DHT 2n
-2 additions
1 real DFT 2n
+2 additions
3.2n-1 odd DFT 2n-1 + 1 complex DFT 2n-1x2n-1
+ n.2n additions
1 real symmetric DFT 2n + 1 real antisymmetric DFT 2n
+ (6n+10), 4n-1 additions
1 real symmetric DFT 2n-1 + 1 inverse real DFT
+ 3(2n-3-1)+1 multiplications + (3n-4).2n-3+1 additions2 real DFT's 2n</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>18
Vector and multi-processors
Must deal with two interconnected problems
The vector size of the data that  can be processed at the maximal
rate
Has to be full as often as possible
Loading of the data should be made from data available inside the 
cache memory to save time
In multi-processors performance dependent on 
interconnection network
Since FFT deterministic, resource allocation can be solved off-line
Arithmetic units specialized for butterfly operations
Arrays with attached shuffle networks
Pipelines of arithmetic units with intermediate storage and 
reordering
Mostly favor CTFFTs
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>3
Multiplies and adds
Real multiplies
Real adds 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesignN Radix 2
Radix 2Radix 4 Radix 4SRFFT SRFFTPFA
PFAWinograd
Winograd
16
32
64
128
256
512
1024
2048
16
32
64
128
256
512
1024
204830
60
120
240
504
1008
2520
30
60
120
240
504
1008
252024
88
264
712
1800
4360
10248
2356020
208
1392
785620
6868
196
516
1284
3076
7172
16388136
276
632
1572
3548
9492
N
152
408
103225045896
13566
30728
68616148
976
5488
28336148
388
964
2308
5380
12292
27652
61444384
888
2076
4812
13388
29548
84076384
888
2076
5016
14540
34668
99628100
200
460
1100
2524
5804
17660
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Inverse FFT
FFTs often used for computing FIR filtering
Fast convolution (FFT + pointwise multiply + IFFT)
In some applications (like 802.11a)
Can reuse FFT block to do the IFFT (half-duplex scheme)
Simple trick [Duhamel88]
Swap the real and imaginary inputs and outputs
If FFT(xR,xI,N) computes the FFT of sequence xR(k)+jxI(k)
Then FFT(xI,xR,N) computes the IFFT of  jxR(k)+xI(k)
Exchange the real and imag part
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 5</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Architectures
1, N, N2cell type  direct transform
Cascade (pipelined) FFT
FFT network
Perfect-shuffle FFT
CCC network FFT
The Mesh FFT
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 20</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>6.973 Communication System Design 12
Related transforms: DHT
Proposed as an alternative to DFT
Initial (false) claims of improved arithmetic complexity
Real-valued FFT complexity is equivalent
Self-inverse
Provided that X0further weighted by 1/sqrt(2)
Inverse real DFT on Hermitian data
Same complexity as the real DF T so no significant gain from 
self-inverse property of DHT
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>25
FFT network
Inputs are in bit-shuffled order (decimated)
Outputs are in bit-reversed order
Minimizes the amount of interconnects
General scheme for interconnections
Number the cells naturally
0 to N/2-1, from left to right
Cell i in the first row is connected to two cells in  
 
d X0X4 X1X5 X2X6
X0X2 X1X3 X6X4
X0X1 X3X2X4X5
y0 y4y2 y6y1 y5y3 y7X7X6X7X5X3X7
the second row
Cell i and (i+N/4) mod N/2
Cell i in the second ro w is connected to cells
i and floor(i/(N/4))+((i+N/8) mod N/4) in the third
row
Cell i in the k-th row (k=1,logN-1) is connecte
to (k+1)-th row
Cell i and cell floor(i/(N/2k))+((i+N/2k+1) mod N/2k)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesignFigure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.973 Communication System Design  Spring 2006
Massachusetts Institute of Technology
Vladimir Stojanovi 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Fast Fourier Transform:
Practical aspects and Basic Architectures
Lecture 9</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>6.973 Communication System DesignCite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
 16
Implementation on general purpose computers
FFT algorithms built by repetitive use of basic 
building blocks
CTFF T and SRFF T butterflies are small  easily optimiz able
PFA/WFTA blocks are larger
More time is spent on load/store operations
Than in actual arithmetic (cache miss and memory access 
latenc y problem)
Locality is of utmost importance
This is the reason why PFA and WFTA do not meet the 
performance expected from their computation complexity!
PFA drawback partially compens ated since only a few 
coefficients have to be stored
Compilers can optimize the FFT code by loop-
unrolling (lots of parallelism) and tailoring to cache 
size (aspect ratio)</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Cube-Connected-Cycles (CCC) network
N cells capable of performing N-element FFT in 
O(logN) steps
Closely related to the FFT network
Just has circular connections between first and last 
rows (and uses N instead of N/2logN cells)
Does not exist for all N (only for N=(K/2)*logK for integer K
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 27Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>FFT network
One of the most obvious 
implementations
Provide a multiply-add cell for each 
execution statement
Each cell also has a register holding a particular value of z
j(twiddle factor)
How many such cells do we need for 
length-N (radix-2 DIT)?
One possible layout
logN rows, N/2 cells each row
Pipelined performance O(logN)
A new problem instance can enter the 
network as soon as the previous one has 
left the first row
Delay limited by cells multiply-add and 
long-wire driver to the next row O(logN)
Total network delay is O(log2N)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 24X0X4 X1X5 X2X6
X0X2 X1X3 X6X4
X0X1 X3X2X4X5
y0 y4y2 y6y1 y5y3 y7X7X6X7X5X3X7
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>Structural considerations
How to compare different FFT algorithms?
Many metrics to choose from
The ease of obtaining the inverse FFT
In-place computation
Regularity
Computation
Interconnect
Parallelism and pipelining
Quantization noise
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 4</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>Related transforms
Mostly focused on efficient matrix-vector product 
involving Fourier matrix
No assumption made on the input/output vector
Some assumptions on these leads to related transforms
Discrete Hartley Transform (DHT)
Discrete Cosine (and Sine) Transform (DCT, DST)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 11</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Particular cases
DFT algorithms for real data sequence xk
Xkhas Hermitian symmetry (XN-k=Xk*)
X0is real, and when N even, XN/2real as well
N input values map to 
2 real and N/2-1 complex conjugate values when N even
1 real and (N-1)/2 complex conjugate values when N odd
Can exploit the redundancy
Reduce complexity and storage by a factor of 2
If take the real DFT of xRand xIseparately
2N additions are sufficient to obtain complex DFT
Goal to obtain real DFT with half multiplies and half adds 
Example DIF SRFFT
X2krequires half-length DFT on real data
Then b/c of Hermitian symmetry X4k+1=X*
4(N/4-k-1)+3
Only need to compute one DFT of size N/4 (not two)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 9</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>The perfect-shuffle network
N/2 element network perfectly suited for FFT, radix-2 DIT
 26
Each multiply-add cell associated with xkand xk+1(k- even 
number between 0 and N-1)
A connection from cell with xkto cell with xjwhen j=2k mod 
N-1 (this mapping is one-to-one)
Represents circular left shift of th e logN-bit binary representation 
of k
First the xkvalues are loaded into cells
In each iteration, output values are shuffled among cells
At the end of logN steps, final data is in cell registers in bit-
reversed order
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesignX0,X1X2,X3X4,X5X6,X7
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Related transforms: DCT
Lots of applications in image and video processing
Scale factor of 1/sqrt(2) for X0left out
Formula above appears as a sub-problem in length-4N 
real DFT
Multiplicative complexity can be related to real DFT
Practical algorithms depend on the transform length
N odd: Permutations and sign changes map to real DFT
N even: Map into same length real DFT + N/2 rotations
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 13</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>1 multiply-add cell
Performance O(N2logN)
For large FFTs storage of intermediate results is a problem
N-long FFT requires
N/r*logrN, radix-r butterfly operations
2N*logrN read or write RAM accesses
E.g. to do the 8K FFT in 1ms, need to access internal RAM every 9ns, 
using radix-4
To speed up
Either use higher radix (to reduce the overall number of memory accesses 
at the price of increase in arithmetic complexity)
Or partition the memory to r banks accessed simultaneously (morecomplex addressing and higher area)
Need a very high rate clock
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 22Figure by MIT OpenCourseWare.COEF
ROM
INPUTBUFFER FFTRAMBUTTERFLY
N CONTROLDATA IN DATA OUT</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Regularity, parallelism
Regularity
Cooley-Tukey FFT very regular
Repeat butterflies of same type
Sums and twiddle multiplies
SRFFT slightly more involved
Different butterfly types in parallel
e.g. radix-2 and radix-4 used in parallel on even/odd samples
PFA even more involved
Repetitive use of more complicated modu les (like cyclic convolution, for prime 
length DFTs)
WFTA most involved
Repetition of parts of the cyc lic conv. modules from PFA
Parallelization
Fairly easy for C-TFFT and SRFFT
Small modules applied on sets of data  that are separable and contiguous
More difficult for PFA
Data required for each module not in contiguous locations
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 7</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>Digital Signal Processors
Built for multiply/accumulate based algorithms
Not matched by any of the FFT algorithms
Sums of products changed to fewer but less regular 
computations
Todays DSPs take into account some FFT 
requirements
Modulo counters (a power of 2 for CTFFT and SRFFT)
Bit-reversed addressing 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 17</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>30
Readings
[1]  C.D. Thompson "Fourier Transforms in 
VLSI," no. UCB/CSD-82-105,  1982.
Same, but hard to find publication
[2]  C.D. Thompson "Fourier Transforms in VLSI," 
IEEE Trans. Computers vol. 32, no. 11, pp. 1047-
1057, 1983.
[3]  P. Duhamel and M. Vetterli "Fast fourier
transforms: a tutorial review and a state of the 
art," Signal Process. vol. 19, no. 4, pp. 259-
299, 1990.
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Multiplication complexity per output point
CTFFT and SRFFT
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 2CTFFT and SRFFT
0.01.02.03.04.05.06.07.08.09.010.0
3 4 5 6 7 8 9 10
n = log2 NM/N
-  radix 2
-  radix 4
-  split-radix
-  lower boundMr
Mc
Figure by MIT OpenCoursWare.</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Cascade FFT
Cascade of logN multiply-add cells
Nicely suited for decimation in frequency FFT
E.g. 8pt DIF FFT
Produces the output values in bit-reversed order
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 23x y
Figure by MIT OpenCourseWare.DFT
N = 4DFT
N = 2
DFT
N = 2
DFT
N = 2
DFT
N = 2X0 X0
X4X4X1
X1
X5
X5X2X2
X6X6 X3
X3
X7 X7w1
8
w2
8
w3
8
DFT of
2DFT of
N / 2Multiplication
by twiddle
factors{   }x2k
DFT
N = 4
{    }x2k+1
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>28
The Mesh implementation
Approximately sqrt(N) rows and columns
N-long FFT in logN steps
View as time-multiplexed version of the FFT 
network
In each step, N/2 nodes take the role of N/2 cells 
in FFT network
Other half routes the data other nodes
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesignFigure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>The naive approach
Compute all terms in the matrix-vector product
N2multiplications required
Three degrees of parallelism
Calculate on one multiply-add cell
On N multiply-add cells
On N2multiply-add cells
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 21</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>6.973 Communication System Design 8
Quantization noise
Roundoff noise generated by finite precision of operations inside FFT (adds, 
multiplies)
CTFFT (lengths 2n)
Four error sources per butterfly (variance 2-2B/12)
Total variance per butterfly 2-2B/3
Each output node receives signa ls from a total of  N-1 bu tterflies in the flow graph 
(N/2 from the first stage,  N/4 in the second, )
Total variance for ea ch output ~ N/3*2-2B
Assuming input power 1/3N2(|x(n)|&lt;1/N to avoid overflow)
Output power is 1/3N
Error-to-signal ratio is then N22-2B(needs 1 additional bit per stage to maintain SER)
Since a maximum magnitude increases by less than 2x from stage to stage we 
can prevent the overflow by requiring that  |x(n)|&lt;1 and scaling by  from stage-to-
stage
The output will be 1/N of t he previous case, but the inpu t magnitude can be Nx larger, 
improving the SER
Error-to-signal ratio is then 4N*2-2B(needs 1/2 additional bit per stage to maintain SER)
Radix-4 and SRFFT generate less r oundoff noise than radix-2
WFTA
Fewer multiplications (hence fewer noise sources)
More difficult to include pr oper rescaling in the algorithm
Error-to-signal ratio is hig her than in CTFFT or SRFFT
Two more bits are necessary to represent  data in WFTA for same error order as 
CTFFT
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>6.973 Communication System Design 10
DFT pruning
In practice, may only need to compute a few tones
Or only a few inputs are different from zero
Typical cases: spectral analysis, interpolation, fast conv
Computing a full FFT can be wasteful
Goertzel algorithm
Can be obtained by simply pruning the FFT flow graph
Alternately, looks just like a recursive 1-tap filter for each 
tone
x(n)
WN-kX(k)
z-1
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>In-place computation
Most algorithms allow in-place computation
Cooley-Tukey, SRFFT, PFA
No auxilary storage of size dependent on N is needed
WFTA (Winograd Fourier Transform Algorithm) does 
not allow in-place computation
A drawback for large sequences
Cooley-Tukey and SRFFT are most compatible 
with longer size FFTs
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 6</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Performance summary
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 29      Design     Area   Time Delay Area*Time2
1-cell DFT
N-cell DFTN log N
N log N N log NN5log3N
N3log3NN2log N
N2log NN2log N
Perfect Shuffle N2 / log2 N N2log2N log2N  log2 N
CCC log2N N2log2N N2 / log2 N  log2 N1-proc FFT N3log5N N log2N N log2 N N log N
Cascade N3log3N N log2N N log N N log N
FFT Network N2log2N log2N log N N2 N2-cell DFT log N N2log3N N2log N N2log N
Mesh N2log2N N log2 N N N
Figure by MIT OpenCourseWare.
Cascade FFT has the best trade-off
Less complicated wiring and NlogN delay
FFT network is as fast as N2cell FFT but much less 
area (only N/2logN cells)
Perfect-Shuffle and CCC use less cells than FFT 
network, but take a bit more time</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>ASICs
Area and throughput are important
A  area, T- time between two successive DFT computations
Asymptotic lower bound for AT2
Achieved by several micro-architectures
Shuffle-exchange networks
Square grids
Outperform the more traditional micro-architectures only for very large N
Cascade connection with variable delay
Dedicated chips often based on traditional micro-architectures efficiently 
mapped to layout
Cost dominated by number of multiplies but also by cost of communication
Communication cost very hard to estimate
Dedicated arithmetic units
Butterfly unit
CORDIC unit
Still, many heuristics and local tricks to reduce complexity and improve communication
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 19</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>Convolutional codes (PDF)</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_11/</lecture_pdf_url>
      <lectureno>L11</lectureno>
      <slides>
        <slide>
          <slideno>8</slideno>
          <text>Semi-infinite series of branches starting from a known state
To determine dmin of a code, need only find the two sequences th rough the trellis that 
have minimum separation
Would be the same for long period before and af ter the short period of divergence
For example, min distance betw een a sequence of no- changes and a single bit change would 
be d2
min=4=(+1-(-1))2
No gain when compared to uncoded PAM2, but that is  o.k. in this case si nce differential encoders 
purpose is to make the decoder insensit ive to a sign ambiguity in transmission
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 9
Example sequences for differential encoder
Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>6.973 Communication System Design 28
Readings
Chapters 8,10 (parts related to convolutional
codes)
[1]  G. Forney, Jr. "Convolutional codes I: 
Algebraic structure," IEEE Transactions on 
Information Theory, vol. 16, no. 6, pp. 720-
738, 1970.
[2]  A. Viterbi "Convolutional Codes and Their 
Performance in Communication Systems," 
IEEE Transactions on Communications, vol. 
19, no. 5, pp. 751-772, 1971.
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>6.973 Communication System Design 10
the channel (in this case binary symmetric channel 
with parameter p-probability of bit-error)
Two states
Number of dimensions is 2, thus bits/dimension=1/2
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
A simple convolutional code
G(D)  generator matrix
Two output bits are successively transmitted through</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>The Trellis
Describes the progression of symbols within a code
Example  binary PAM differential encoder trellis
Two states in each time correspond ing to the value of previously
transmitted message
Time-invariant encoder only requires trellis representation at k and 
k+1
A trellis branch connects two states and co rresponds to a possible 
input (always 2bbranches emanating from any state)
Each branch labeled with a channel  symbol and corresponding input xk/mk
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 8</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>6.973 Communication System Design 19
Systematic code
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Example, repeated</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>What well cover today
What are convolutional codes?
How they help
How to encode/decode them
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 3</text>
        </slide>
        <slide>
          <slideno>3</slideno>
          <text>6.973 Communication System Design 4
Channel coding
To enhance robustness, tie bits into sequences, then 
decide on sequences rather than individual received bits
Encoder
Memory-less: translates incoming message mkat time k into a 
symbol vector xk(modulator later converts xkto xk(t))
Sequential: map message bits into  larger dimens ionality symbols 
that can also depend on previous  message bits through the state 
of the encoder
Codewords
Finite (block code)
Semi-Infinite (tree/convolutional code)
Example
Block code - Majority repetition binary code (0-&gt;-1-1-1, 1-&gt;+1+1+1)
ML decoder computes the majority polarity for the received signal
1/3 bits per symbol with min.distance 2*sqrt(3)
Tree code  Transmit -1-1-1 if the bit has not changed, transmit 
+1+1+1 otherwise
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
codecodeword</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>6.973 Communication System Design  Spring 2006
Massachusetts Institute of Technology
Lecture 11
Vladimir Stojanovi 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Intro to coding and convolutional codes</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Coding gain  comparison
hod two  Data-Rate (Energy) Reduction
ix P and W (positive frequencies bandwidth)Met
F
For the coded system fixed W leads to fixed value 
1/(b_bar*T)
Leads to data rate r eduction by a factor b_bar
(Rcode=b_bar*2W)
The squared distance increases to dfree*Ex
But could have used a lo wer-speed uncoded system with 
1/b_bar more energy per dim ension for PAM2 transmission
Thus, the ratio of squared distance improvement is still
b_bar*dfree (i.e. the coding gain)
This method of comparison is more fair since we dont 
assume any bandwidth expansion
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
26 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>8
Constraint length (    )
Log2of the number of states of a convolutional encoder
The number of D flip-flops in the obvious realization
Often used as a measure of complexity of a convolutional
code
The complexity of a convolutional code is the minimum constraint length over all equivalent encoders
An encoder is said to be mi nimal if the complexity equals 
the constraint length
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 1</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>22
8-state Ungerboeck code with feedback
Same code as previous 8-state
example with no feedback!
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesignImage removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Sequential encoder
bits determine state skat time k
There are      states
Encoding of bits into symbols can vary with encoder state
For each state encoder accepts b bits of input (mk) and 
outputs a corresponding N-dimensio nal output vector (this is 
repeated once every symbol period T)
Data rate of the encoder is
Block code if there is only one state (tree code 
otherwise)
 
2
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 5Image removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>6.973 Communication System Design 11
The branches are not labeled  the convention is that the 
upper branch from each state corresponds to input bit of 0 while lower branch corresponds to input 1
The outputs transmitted for each state are listed in modulo-
4 notation to the left of each state (leftmost  upper branch, 
rightmost  lower branch)
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Trellis for convolutional code example</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>6.973 Communication System Design 13
H H
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Hamming distance
Minimum Hamming distance illustration for the convolutional code example
Two sequences above differ in 5 bit positions
At least 3 bit errors must occur in th e BSC before these two sequences could be 
confused
Thus the probability of detecting the erroneous sequence ~p3, which for p&lt;0.5 means 
convolutional code has improved the probability of error significantly (at the cost of 
half the bit-rate of uncoded transmission)
Hamming weight is defined as Hammi ng distance between a codeword and the 
zero sequence w (v(D))=d (v(d),0) (i.e. the number of ones in the codeword)</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>6.973 Communication System Design 24
Catastrophic encoder
Catastrophic encoder is the one for which at least one 
codeword with finite Hamming weight corresponds to an input of infinite Hamming weight
Since the set of all possible codewor ds is also a set of all possible 
error events, this is the same as  saying a finite number of decoding 
errors in a sequence could lead to an infinite number of input bit 
errors  clearly a catastrophic event
Catastrophic encoder test
An encoder is non-catastrophic if an only if the GCD of the 
determinants of all the k x k subm atrices of G(D) is a nonnegative 
power of D (i.e. Ddeltadelta&gt;=0)
A non-catastrophic encoder always exists for any code
A systematic encoder can never be catastrophic (why?)
Also possible to find first a mini mal, non-catastrophic encoder and 
then convert it to systematic encoder
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Coding gain  comparison
Method one  Bandwidth expansion
R=b/T, P=Ex/T (fix, R, P and T while allow W 
(bandwidth) to increase with n)
Simply compare dminvalues of convolutionally
coded systems with PAM2 at the same data rate R
Convolutional code system has  1/b_bar more W than 
uncoded system, and at fixed P and T this means that 
Ex_bar is reduced to b_bar*Ex_bar
Hence coded minimum distance is then 
dfree*b_bar*Ex_bar and coding gain is  
gamma=10log10(b_bar*dfree) listed in coding tables
Somewhat unfair since assumes more bandwidth 
is available for free
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 25</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>20
8-state Ungerboeck encoder example
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System DesignImage removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>6.973 Communication System Design 17
Code rate r=k/n
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Generator and Parity matrices
G(D) can be any k x n matrix with entries in Fr(D) and rank k
H(D) is parity matrix ( n-k x n matrix with rank n-k )
When used as a generator, describes a dual code (all codewords in dual code 
orthogonal to codewords in original code)</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>802.11a Convolutional Encoder
Rate 1/2 convolutional encoder
Punctured to obtain 2/3 and 3/4 rate
Omit some of the coded bits
64-state (constraint length K=7) code
Viterbi algorithm applied in the decoder
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 2Output data A
Output data BInput data TbTbTbTbTbTbX0X1X2X3X4X5X6X7X8
y0y1y2y3y4y5y6y7y8A0B0A1B2A3B3A4B5A6A7B8B6A0A1A2A3A4A5A6A7A8
B0B1B2B3B4B5B6B7B8Punctured coding (r = 3/4)
Source data
Encoded data
Bit stolen data
(sent/received 
data)Stolen bit
A0A1A2A3A4A5A6A7A8
B0B1B2B3B4B5B6B7B8Bit inserted 
data
Decoded dataInserted 
dummy
bitg1 = 1718g0 = 1338
Figure by MIT OpenCourseWare.</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>3
Implementations/Systematic encoders
Two kinds of implementations most used
Feedback-free implementations
Often enumerated in code tables
Systematic (possibly with feedback)
All inputs directly passed to the output, with remaining n-k
outputs being reserved as parity bits (vn-i(D)=uk-i(D) for 
i=0,,k-1)
When feedback is used, always possible to determine a systematic implementation
Conversion to a systematic encoder
u(D) can take on all po ssible causal sequences, 
just as can u(D), so this  is simply a relabeling
of the relationship of input to ou tput sequences
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 2</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Example: Binary PAM differential encoder
=1
2-states (corresponding to the possible values of the 
previous single-bit message)
Example of a sequential encoder with
Differential encoder encodes the difference modulo-
M between successive message inputs to the 
sequential encoder
In binary case it only transmits  a 1 on a change of a bit in a 
message 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 7</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>6.973 Communication System Design 12

which two sequences differ
Euclidean distance  physical distance in which 
the received signal differs from the expected
level for that bit/symbol
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Distance between sequences
The ML detector simply chooses the sequence of 
transitions through the trellis that differs least in 
the trellis-path bits [v2(D), v1(D)], from the 
received 2-dimensional sequence y(D)
Term differs depends on the definition of 
distance between sequences
Hamming distance  number of bit positions in</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>6.973 Communication System Design 6
Examples
QAM is a block code
There is only one state in QAM
Let 1/T=2.4kHz and
For 4 QAM, R=2/T=2*2400=4800bps,                  bit/dimension
For 16 QAM, R=4/T=9600bps,
For 256 QAM, R=8/T=19200bps,   0
=
2/21 b==
4/22 b==
8/24 b==
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Codes from tables
Example r=1/2 table
[17 13]
G(D)=[D3+D2+D+1 D3+D+1]
6.973 Communication System Design 27
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Figure removed due to copyright restrictions.</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>6.973 Communication System Design 15
Two input bits select one of 4 pts in a subset
One input bit enters the encoder to choose a branch
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Trellis codes  Euclidean distance example
Also use sequential encoding
Expand the constellation instead of reducing the data rate
Example 4-state Ungerboeck trellis code
b=3 bits per symbol (redundant, extra pointsin the constellation 
over the minimum needed for transmission)
16 points (for 16 QAM) is double the 8points needed for uncoded8SQ QAM transmission)
Intra subset minimum distance increases by 3dB
Subsets 
0,1,2,3
4pts each</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>Channel as encoder
Sometimes, can use channel with memory as a 
sequential encoder
Example is 1+D parti al response channel
The closest two sequences are dmin2=8 apart, not dmin2=4 as 
with symbol-by-symbol detection (for PAM2)
Still need the sequence decoder (e.g. Viterbi decoder) to 
obtain the ML estimate of the received sequence
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
6.973 Communication System Design 16</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>6.973 Communication System Design 14
For example AWGN channel
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].
Euclidean distance
dE2=d1,k-12+d2,k-12+d1,k2+d2,k2+d1,k+12+d2,k+12
More suitable for noise characterization
d1,k-1
Single-sample distance</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>6.973 Communication System Design 21
Trellis diagram for 8-state code
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006.
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology.
 Downloaded on [DD Month YYYY].Image removed due to copyright restrictions.</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
    <lecture>
      <lecture_title>PDF - 3.2 MB</lecture_title>
      <lecture_pdf_url>https://ocw.mit.edu/courses/6-973-communication-system-design-spring-2006/resources/lecture_5/</lecture_pdf_url>
      <lectureno>L5</lectureno>
      <slides>
        <slide>
          <slideno>3</slideno>
          <text>Modern Application-Specific IC (ASIC)
 Multiple functional blocks Our ASIC example: 
 Put together at the top level 802.11a PHY 
 Makes a WLAN chip 
 Lots of modeling 
 Behavioral level 
 Architecture/functional level Image removed due to copyright restrictions. 
 Different teams on each block 
 Need to make sure things work 
 When connected 
 Many levels of hierarchy 
 Lots of iteration and reuse 
 Many architectural choices 
 Use lots of implementation tricks 
 Micro-architecture and algorithmic transforms [Thompson02] 
 Straightforward solutions many times the chip size 
 Sophisticated CAD tools to architect and verify 4M design 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 4</text>
        </slide>
        <slide>
          <slideno>21</slideno>
          <text>Clock grids
 Alpha 21264 grid example 21064 
 Minimize skew and jitter
 Costs a lot of power
buffer tree 
21164 
Images removed due to copyright restrictions. 
21264 
21064 21164 21264 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 22</text>
        </slide>
        <slide>
          <slideno>5</slideno>
          <text>Gate Arrays 
Can cut mark costs by prefabricating arrays of 
transistors on wafers 
Only customize metal layer for each design 
Image removed due to copyright restrictions. Fixed-size unit transistors 
Metal connections personalize 
design 
Two kinds: 
Channeled Gate Arrays -Leave space between rows of 
transistors for routing 
Sea-of-Gates -Route over the top of unused 
transistors 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
[ OCEAN Sea-of -Gates Base Pattern 
1 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>25</slideno>
          <text>Wire capacitance 
Capacitance depends on geometry of surrounding wires and 
relative permittivity, &amp;,,of insulating dielectric 
-silicon dioxide, SiOp E, 3-9 
-silicon flouride, SiOF E, = 3.1 
-SiLKTMpolymer, E, = 2.6 
Can have different materials between wires and between 
layers, and also different materials on higher layers 
Courtesy of A~indand Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit,edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>24</slideno>
          <text>Wire resistance 
Height7 
width resistance = (length x resistivity) 
(height x width) 
bulk aluminum 
bulk copper 
bulk silver 2.8~10-~ n-m 
1.~xIo-~n-m 
1.6~10-~n-m 
Height (Thickness) fixed in given tnanufacturing process 
Resistances quoted as Wsquare 
TSMC O.18pm 6 Aluminum metal layers 
-MI-5 0.08 Wsquare (0.5 x lmrn wire = 160 a) 
-M6 0.03 SVsquare (0.5 pm x 1mm wire = 60 Q) 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>31</slideno>
          <text>Fewer gates per clock cycle 
Processors in Intel 386 generation, around 50 
F04 gate delays per clock cycle 
Pentium-4 around 16 F04 in normal clock, 
around 8 F04 delays in fast ALU section 
Fastest 64-bit adder around 7 F04 delays 
As measured in distance per clock cycle, wires 
are getting much slower 
Chip area traversed,, 
in one clock cycle 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>19</slideno>
          <text>Single Clock Edge-Triggered Design 
L 
CLK 
Single clock with edge-triggered registers most common 
design style in ASICs 
Slow path timing constraint 
T-lc Tcc&amp;wt + TP- + Tawp-can always work around slow path by using slower clock 
I Fast wth timincl constraint I 
-bad fast path camot be fixed without redesign1 -might have to add delay into paths to satisfy hold time 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>10</slideno>
          <text>The ASIC flow 
Design Capture 
Pre-Layout 
Simulation 
Loaic Svnthesis 
! Floordannina 
3111 1UIQCIUI I Placement I Physical :I . --. I 
Circuit RoutingExtraction 
.c 
Tapeout 
Most Common Design Approach for Designs up to 500Mhz 
Clock Rates 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month WYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>8</slideno>
          <text>Xilinx Configurable logic block (CLB)
 Full-add, LUT, shift, mux, xor, ff 
Courtesy of Arvind and Krste Asanovic. Used with permission. Courtesy of David B. Parlour. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 9</text>
        </slide>
        <slide>
          <slideno>16</slideno>
          <text>The front-end: Verilog to ASIC layout flow
 The push-button approach 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 17</text>
        </slide>
        <slide>
          <slideno>26</slideno>
          <text>Capacitance scaling 
parallel plate capacitance width x lengthspacing 
u 
width 
Capacitance/wnit length -constant with feature 
size scaling (width and spacing scale together) 
-Isolated wire sees approx. 100 fF/rnrn -With close neiohbors about 160 fF/mrn 
Need to use capacitance extractor to get 
accurate values 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month WW]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>7</slideno>
          <text>Field-Programmable Gate Arrays (FPGA) 
Each cell in array contains a programmable logic function 
Array has programmable interconnect between logic functions 
Arrays mass-produced and programmed by customer after 
fabrication 
-Can be programmed by blowing fuses, loading SRAM bits, or loading 
FLASH memory 
Overhead of programmability makes arrays expensive and slow 
but startup costs are low, so much cheaper than ASIC for small 
volumes 
Image removed due to copyright restrictions. 
Virtex4 FPGA Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>28</slideno>
          <text>Wire delay example -our technology 
In 0.18prn TSMC, 5x minimum inverter with effective 
resistance of 3 kn, driving F04 load (25fF) 
Delay = Rdriver x Cload = 75 ps 
Now add lmrn M1 wire. 0.25prn wide 
-Rw = 320R wire + 22n vias = 344Q 
-CW = 160fF 
Courtesy of Awind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MITOpenCourseWare (http://ocw,rnit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>15</slideno>
          <text>More standard cell layouts 
Over cell routing for 
0.18pm bmctal stdcells 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladirnir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw,mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973Communication System Design</text>
        </slide>
        <slide>
          <slideno>18</slideno>
          <text>Clockina 
Large Systems 
Most large scale ASICs, and systems built with these 
ASICs, have several synchronous clock domains connected 
by asynchronous communication channels 
I 
7 1clockdomain 4 
We'll focus on a single synchronous clock domain today 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimlr Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month W]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>30</slideno>
          <text>Wire delay scaling, global wires 
For wire crossing whole chip 
-Resistance grows linearly 
-Capacitance stays fixed 
Wire delay increases relative to gate delay 
[From Mork Homwitz DAC 200Y7 ] 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>14</slideno>
          <text>Standard cell layout methodology 
Celktructuru! hldden under interconnect layers 
With limlted interconnect layers, dedicated routing channels 
between rows of standard cells are needed 
Width of the cell allowed to vary to accommodate complexity 
Interconnect plays a significant role in speed of a digital circuit 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month W]. 
6.973Communication System Design</text>
        </slide>
        <slide>
          <slideno>0</slideno>
          <text>Application Specific Integrated Circuit Design
Lecture 5
Vladimir Stojanovi  
6.973  Communication System Design  Spring 2006
Massachusetts Institute of Technology
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY].</text>
        </slide>
        <slide>
          <slideno>6</slideno>
          <text>Gate Array Pros and Cons 
Cheaper and quicker since less masks to make 
-Can stockpile wafers with diffusion and poly finished 
Memory inefficient when made from gate array 
-	Embedded gate arrays add multiple fixed memory 
blocks to improve density (=&gt;Structured ASICs) 
-	Cell -based array designed to provide efficient memory 
cell (6 transistors in basic cell) 
Logic slow and big due to fixed transistors and 
wiring overhead 
-	Advanced cell -based arrays hardwire logic functions 
(NANDs/NORs/LUTs) which are personalized with 
metal 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>12</slideno>
          <text>Standard cell desian 
o Layout considerations 
Cells have standard height but vary in width 
Designed to conmct power. ground, and wells by abutment 
Clock Rail 
(not typical 
/ Cell UO 
Power 
Rails in , on M2 
\L 
Flip-flop 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>2</slideno>
          <text>Chip design styles
 Full-custom 
 Transistors are hand-drawn 
 Best performance (although almost extinct) 
 Alpha processors, older Intel processors
 Recent processors are semi-custom (Sun, AMD, Intel)
 Standard-Cell-based ASICs 
 Only use standard cells from the library 
 Dominant design style for non-pr ocessor, comms and multimedia 
ASICs
 This is what we will use in 6.973 (also used in 6.375)
 Cheaper alternatives (for small volumes) 
 Sea of Gates (mask-programmable gate arrays) 
 Field Programmable Gate Arrays (FPGA) 
 On-the fly reconfigurable interconnect 
 Flexibility vs. cost 
 Tighter control over transistors increases design cost 
 Can make faster designs but harder to verify and more expensive 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 3</text>
        </slide>
        <slide>
          <slideno>27</slideno>
          <text>Wire delay models 
Win has distributed R and C per unit length 
-wire delay increases quadratically with length -edge rate also degrades quadratically with length 
Simple lumped n model gives reasonable approximation -Rw is lumped resistance of wire -Cw is lumped capacitance (put half at each end) 
cwDelay = Rdriver x -+(Rdriver +Rw) x2 
Courtesy of hind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973Communication Svstem Desian</text>
        </slide>
        <slide>
          <slideno>20</slideno>
          <text>Clock distribution 
Can't really distribute clock at same instant to 
all flip-flops on chip 
Clock 
Distribution jntmCe 
Network length, metal width and 
height, ctqdi/irg caps 
Clock is "clock skew" 
Driver Local 
Clock 
Varrbtions in /ma/ clock Buffers 
load, local power supply, 
local gate length and --A 
threshold: lccal 
temprutwe Courtesy of A~indand Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http ://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>17</slideno>
          <text>The back-end: The Design closure problem
 Biggest problem are wires (signals and clock) 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 17</text>
        </slide>
        <slide>
          <slideno>23</slideno>
          <text>Modern Interconnect Stack 
Images removed due to copyright restrictions. 
Tungsten local interconnect 
IBM CMOS7 process 
6 layers of copper wiring 
1 layer of tungsten local interconnect 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>11</slideno>
          <text>ASIC flow subset  6.375 and 6.973
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 12</text>
        </slide>
        <slide>
          <slideno>22</slideno>
          <text>Clock trees
binary tree H-tree 
Images removed due to copyright restrictions. 
X-tree 
Arbitrary 
matched tree 
 Recursive pattern to match delay 
 Much less power than grid 
 More skew and jitter 
 Skew
 Non-uniform loading
 Buffer mismatch
 Jitter
 Supply noise on buffers
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 23</text>
        </slide>
        <slide>
          <slideno>9</slideno>
          <text>Standard cell ASICs
 Also called Cell-Based ICs (CBICs) 
 Fixed library of cells 
 Memory generators 
 Design 
 Cells synthesized from hardware descriptive language (Verilog, 
VHDL) 
 Cells manually entered in a schematics 
 Placed and routed automatically (most desirable) 
 Full set of masks for productions 
 Most popular today, but increasingly expensive due to mask costs 
in advanced technologies 
 Currently a mask set is a couple $M 
 FPGAs are getting increased attention 
 We will use this approach Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973  Communication System Design 10</text>
        </slide>
        <slide>
          <slideno>29</slideno>
          <text>Wire delay scaling, local wires 
For wire crossing same amount of circuitry 
-Resistance stays roughly constant 
length decreases by saw amount as width, height stays 
large and/or change material to copper 
-Capacitance decreases by scaling factor 
cap/unit length constant, length decreases 
Wire delay tracks improvement in gate delay 
[Fnm Mark Homwitr, DAC ZdlXl] 
Courtesy of Arvind and Krste Asanovic. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYW]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>4</slideno>
          <text>Macro modules 
256x32 (or 8192 bit) SRAM Generated by hard-macro module generator 
Image removed due to copyright restrictions. 
Generate highly regular structures (entire memories, 
multipliers, etc.) with a few lines of code 
Verilog models for memories automatically generated 
based on size 
Example -chip-in-a-day flow (B. Brodersen, UC Berkely) 
A bunch of macros pre-generated (multipliers, adders, memories) 
Easy to do COmm system design Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT Opencourseware (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>1</slideno>
          <text>Modern digital systems engineering 
u Managing complexity and connectivity 
Personal Computer: Circuit Board:Hurdware &amp; software =8 / system 
1-166 devices 
Scheme for 
rsprcsenting 
infomtion 
Courtesy of Arvind and Krste Asanovic. Used with permission. Integrated Circuit: \ 
w8-16 / PCB 
0.25M-16devices &amp;-16/IC 
1OOK devices 
Gate: 16-64 devices 
=2-16 / Cell 
8 devices 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MIT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYYY]. 
6.973 Communication System Design</text>
        </slide>
        <slide>
          <slideno>13</slideno>
          <text>Standard cell characterization 
Power Supply Line (V,,) Delay in (ns)! ! 
1 I Path I ~.ZV@C I 1.W-40C I 
3-input NAND cell 
(from ST Microelectronics): 
C = Load capacitance 
T = input riseffall time 
Ground Supply Line (GND) 
Each library cell (FF, NAND, NOR, INV, etc.) and the variations on size 
(strength of the gate) is fully characterized across temperature, loading, etc. 
Courtesy of Anantha Chandrakasan. Used with permission. 
Cite as: Vladimir Stojanovic, course materials for 6.973 Communication System Design, Spring 2006. 
MJT OpenCourseWare (http://ocw.mit.edu/), Massachusetts Institute of Technology. 
Downloaded on [DD Month YYW]. 
6.973 Communication System Design</text>
        </slide>
      </slides>
      <videos/>
    </lecture>
  </lectures>
</doc>
